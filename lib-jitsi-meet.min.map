{"version":3,"sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDPUtil.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./modules/xmpp/SDP.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./modules/flags/FeatureFlags.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/SdpTransformUtil.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./node_modules/lodash.clonedeep/index.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/(webpack)/buildin/global.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./node_modules/base64-js/index.js","webpack://JitsiMeetJS/./modules/xmpp/SDPDiffer.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./node_modules/process/browser.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./node_modules/lodash.debounce/index.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/(webpack)/buildin/module.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./node_modules/bowser/es5.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./node_modules/async/lib/async.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/xmpp/RtxModifier.js","webpack://JitsiMeetJS/./modules/xmpp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/qualitycontrol/QualityController.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./service/RTC/MediaDirection.ts","webpack://JitsiMeetJS/./modules/xmpp/SdpSimulcast.ts","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/rng.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/bytesToUuid.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/v4.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/(webpack)/buildin/amd-options.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/./node_modules/timers-browserify/main.js","webpack://JitsiMeetJS/./node_modules/setimmediate/setImmediate.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/edge_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/filtericeservers.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","KICKED","LOCAL_ROLE_CHANGED","MEETING_ID_SET","MESSAGE_RECEIVED","INVITE_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTCIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","DATA_CHANNEL_OPENED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","JVB121_STATUS","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","NO_AUDIO_INPUT","NOISY_MIC","PARTICIPANT_CONN_STATUS_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","global$1","global","self","_typeof","obj","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","safe_add","x","y","lsw","str2binl","str","Error","bin","charCodeAt","md5_cmn","q","a","b","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","len","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","charAt","binl2hex","hash","String","fromCharCode","binl2str","core_sha1","j","olde","w","e","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","concat","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","document","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","func","childNodes","childNode","nodeType","this","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","undefined","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","arguments","arg","xmlTextNode","sort","attr","setAttribute","k","xmlescape","text","replace","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","toLowerCase","getAttribute","cssText","cssAttrs","split","cssName","cssValue","push","join","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","indexOf","getDomainFromJid","bare","getBareJidFromJid","parts","splice","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","tree","names","keys","map","result","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","id","options","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","_this2","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","handlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","setTimeout","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","Math","random","addProtocolErrorHandler","status_code","callback","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","_this3","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","forEach","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","err","_dataRecv","req","raw","_this6","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","priority","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","test","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","now","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","substr","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","Number","_processRequest","primary_timeout","isNaN","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","Strophe$2","$build$2","new_service","location","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","$msg","BrowserCapabilities","Logger","require","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","AUDIO","PRESENTER","VIDEO","MediaType","__filename","_instances","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","initBackend","callStatsID","callStatsSecret","userName","aliasName","applicationName","getWiFiStatsMethod","confID","siteID","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","CALLSTATS_SCRIPT_URL","loadCallStatsAPI","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","audioLevelsInterval","longTasksStatsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","supportsPerformanceObserver","performanceObserverStats","PerformanceObserverStats","JitsiConferenceEvents","startObserver","stopObserver","getLongTasksStats","removeLongTasksStatsListener","dispose","size","emit","callStats","values","stopCallStats","tpc","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","cs","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","sendDominantSpeakerEvent","roomJid","sendActiveDeviceListEvent","devicesData","globalSet","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","stats","next","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","properties","eventToLog","sendAnalytics","eventName","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","GRANTED_PERMISSIONS","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","createConferenceEvent","source","createConnectionStageReachedEvent","stage","createE2eRttEvent","participantId","region","rtt","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createTransportStatsEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","substring","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","index","array","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferCodec","codecName","matchingPayloadTypes","rtp","codec","payload","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","H264","fmtp","item","config","includes","rtxApts","rtxPts","keepPts","rtcpFb","CAMERA","DESKTOP","usesAdapter","OLD_GUM_DEFAULT_DEVICES","DEFAULT_CONSTRAINTS","video","height","ideal","max","SS_DEFAULT_FRAME_RATE","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","disableHPF","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevices","availableDevicesPollTimer","emptyFuncton","getConstraints","um","audio","isNewStyleConstraintsSupported","isSafari","mandatory","optional","cameraDeviceId","deviceId","sourceId","facingMode","CameraFacingMode","USER","minFps","maxFps","fps","minFrameRate","maxFrameRate","resolution","Resolutions","width","minWidth","minHeight","maxWidth","maxHeight","setResolutionConstraints","micDeviceId","echoCancellation","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","googNoiseSuppression2","googEchoCancellation2","googAutoGainControl2","isChrome","getSSConstraints","mozMediaSource","mediaSource","frameRate","errmsg","GlobalOnErrorHandler","callErrorHandler","isElectron","screenShareAudio","desktopStream","chromeMediaSource","bandwidth","firefox_fake_device","fake","screen","chromeMediaSourceId","getTrackSSConstraints","desktopSharingFrameRate","updateGrantedPermissions","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","label","updateKnownDevices","pds","devicesReceived","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","slice","RTCUtils","Listenable","super","clearInterval","enumerateDevices","navigator","mediaDevices","then","devices","initEnumerateDevicesWithCallback","usesNewGumFlow","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","wrapAttachMediaStream","srcObject","getStreamID","getTrackID","isChromiumBased","src","srcObjectPropertyName","jitsiObjectURL","URL","createObjectURL","defaultSetVideoSrc","MediaStream","videoTracks","audioTracks","_initPCConstraints","screenObtainer","getUserMediaWithConstraints","isDeviceListAvailable","ds","supportsDeviceChangeEvent","addEventListener","setInterval","pcConstraints","googHighStartBitrate","googPayloadPadding","googScreencastMinBitrate","googCpuOveruseDetection","googCpuOveruseEncodeUsage","googCpuUnderuseThreshold","googCpuOveruseThreshold","p2pPcConstraints","Promise","resolve","reject","getUserMedia","catch","_newGetUserMediaWithConstraints","umDevices","_newGetDesktopMedia","isSupported","supportsVideo","obtainStream","_parseDesktopSharingOptions","obtainAudioAndVideoPermissions","_getAudioAndVideoStreams","streams","audioStream","videoStream","res","audioVideo","addTrack","desktop","sourceType","track","videoType","VideoType","handleLocalStream","requestingDesktop","avStream","missingTracks","_getMissingTracks","stopMediaStream","desktopSharingSourceDevice","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","desktopSharingSources","gumOptions","trackOptions","newObtainAudioAndVideoPermissions","mediaStreamsMetaData","maybeRequestDesktopDevice","matchingDevice","getTracks","applyConstraints","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","autoGainControl","noiseSuppression","newGetConstraints","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","effects","isDeviceChangeAvailable","deviceType","mediaStream","release","url","revokeObjectURL","isDesktopSharingEnabled","setAudioOutputDevice","getAudioOutputDevice","getCurrentlyAvailableMediaDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","enable","googSuspendBelowMinBitrate","rtcUtils","origAttachMediaStream","apply","ex","callUnhandledRejectionHandler","promise","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","args","errHandler","peerConnectionIdCounter","rtcTrackIdCounter","_newCreateLocalTracks","mediaStreamMetaData","metaData","getSettings","safeCounterIncrement","JitsiLocalTrack","rtcId","RTC","peerConnections","localTracks","_channel","_lastN","_lastNEndpoints","_senderVideoConstraints","_maxFrameHeight","_pinnedEndpoint","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_onDeviceListChanged","_updateAudioOutputForAudioTracks","addListener","destroy","_channelOpenListener","tracksInfo","newTracks","trackInfo","localTrack","createLocalTracks","initializeBridgeChannel","wsUrl","BridgeChannel","_senderVideoConstraintsChanged","sendPinnedEndpointMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","_selectedEndpoint","sendSetLastNMessage","senderVideoConstraints","lastNEndpoints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","isInLastN","onCallEnded","setReceiverVideoConstraint","maxFrameHeight","isOpen","selectEndpoints","ids","pinEndpoint","eventType","createPeerConnection","signaling","iceConfig","isP2P","getPCConstraints","abtestSuspendVideo","addPermanentProperties","enableInsertableStreams","encodedInsertableStreams","forceEncodedAudioInsertableStreams","forceEncodedVideoInsertableStreams","sdpSemantics","supportsSdpSemantics","pcConfig","bundlePolicy","newConnection","TraceablePeerConnection","_removePeerConnection","traceablePeerConnection","addLocalTrack","getLastN","getSenderVideoConstraints","getLocalVideoTrack","localVideo","getLocalTracks","getLocalAudioTrack","localAudio","tracks","getType","getRemoteTracks","remoteTracks","pcRemoteTracks","setAudioMute","mutePromises","audioTrack","mute","unmute","all","removeLocalTrack","pos","removeRemoteTracks","owner","removedTracks","pcRemovedTracks","elSelector","isUserStreamById","streamId","closeBridgeChannel","setAudioLevel","audioLevel","getTrackBySSRC","isAudioTrack","sendChannelMessage","to","sendMessage","setLastN","remoteAudioTracks","setAudioOutput","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","once","emitter","eventListener","errorListener","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","existing","warning","newListener","warned","count","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","listeners","prependListener","prependOnceListener","list","position","originalListener","spliceOne","off","rawListeners","eventNames","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","mid","linessrc","idx","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","ssrcMap","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","usesRidsForSimulcast","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpmap","sctpAttrs","number","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","each","_","fb","hasAttribute","fromJingle","jingle","sessionId","groups","$","contents","content","jingle2media","sctp","streamCount","payloadType","__","parameter","hdrExt","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackErrors","constraint","failedConstraintName","getResolutionFromFailedConstraint","removeEventListener","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","version","_detectNWJS","_detectReactNative","product","_detect","bowser","browserInfo","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","BrowserDetection","_bowser","Bowser","getParser","detectedBrowserInfo","_name","_version","getName","isOpera","isIExplorer","isNWJS","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","DummyLocalStorage","clear","_storage","keyName","keyValue","JitsiLocalStorage","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","jitsiLocalStorage","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","flags","_sourceNameSignaling","sourceNameSignaling","_sendMultipleVideoStreams","sendMultipleVideoStreams","_usesUnifiedPlan","usesUnifiedPlan","enableUnifiedOnChrome","isMultiStreamSupportEnabled","isSourceNameSignalingEnabled","WRONG_STATE","DISPLAY_NAME_REQUIRED","VP8","VP9","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","XMPP","token","disconnectInProgress","connectionTimes","authenticatedUser","initStropheUtil","initStropheLogger","enableWebsocketResume","serviceUrl","websocketKeepAlive","XmppConnection","createConnection","bosh","_initStrophePlugins","caps","Caps","clientNode","initFeaturesList","ev","addFeature","disableRtx","enableOpusRed","supportsAudioRed","enableLipSync","rayo","E2EEncryption","getConnection","connectionHandler","credentials","performance","statusStr","getStatusString","XMPPEvents","getStunAndTurnCredentials","_resetState","pingJid","getFeaturesAndIdentities","identities","PING","identity","speakerStatsComponentAddress","conferenceDurationComponentAddress","lobbySupported","f","fr","endsWith","JitsiConnectionEvents","_onPrivateMessage","password","anonymousConnectionFailed","connectionFailed","lastErrorMsg","JitsiConnectionErrors","ping","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","attaching","anonymousdomain","hosts","configDomain","hostname","createRoom","roomName","onCreateResource","roomjid","customDomain","muc","mucNickname","randomHexString","emuc","getJid","getJingleLog","getLog","getXmppLog","dial","getSessions","sessions","disconnectListener","_cleanupXmppConnection","isUsingWebSocket","evType","sendUnavailableBeacon","jvb","iceServers","p2p","p2pStunServers","stunServers","iceTransportPolicy","MucConnectionPlugin","JingleConnectionPlugin","RayoConnectionPlugin","deploymentInfo","shard","headersArr","trim","shard_changed","suspend_time","getPingSuspendTime","time_since_last_success","getTimeSinceLastSuccess","room","tryParseJSONAndVerify","jsonString","json","jsonMessage","parsedJson","users","created_timestamp","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","RunningAverage","average","addNext","getAverage","_callStatsUserName","_machineId","_p8","externalStorage","username","UsernameGenerator","generateUsername","generateCallStatsUserName","jitsiMeetId","generateJitsiMeetId","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","ssrcNum","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","msid","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","groupInfo","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","transform","selectMedia","selectedMLine","toRawSDP","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SOURCE_MUTED_CHANGED","SOURCE_VIDEO_TYPE_CHANGED","PENDING","ACTIVE","ENDED","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","order","wrtcFuncNames","fabricEvent","reportType","_fabrics","backend","backendInitialized","atLeastOneFabric","defaultInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","defaultPC","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","configParams","_traceAndCatchBackendCalls","applicationVersion","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","getConnectionPluginDefinition","base","ConnectionPluginListenable","randomElement","randomHexDigit","randomAlphanumStr","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","argsTag","funcTag","genTag","mapTag","setTag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","Buffer","Uint8Array","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","entry","ListCache","MapCache","Stack","__data__","arrayLikeKeys","inherited","isObjectLike","isArrayLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","isIndex","assignValue","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","input","initCloneArray","copyArray","getTag","isFunc","buffer","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","Ctor","cloneArrayBuffer","dataView","byteOffset","byteLength","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","symbol","initCloneByTag","stacked","props","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","baseIsNative","isFunction","arrayBuffer","newValue","getMapData","getValue","cache","pairs","LARGE_ARRAY_SIZE","other","ArrayBuffer","ctorString","isLength","baseKeys","CONN_STATUS_CHANGED","_options","_stropheConn","_usesWebsocket","_lastSuccessTracker","LastSuccessTracker","startTracking","_resumeTask","ResumeTask","_deferredIQs","PingConnectionPlugin","onPingThresholdExceeded","_onPingErrorThresholdExceeded","websocket","_status","OPEN","disco","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_maybeStartWSKeepAlive","_processDeferredIQs","cancel","startInterval","_tryResumingConnection","_wsKeepAlive","Events","_clearDeferredIQs","deferred","closeWebsocket","streamManagement","getResumeToken","intervalWithJitter","fetch","timeLeft","sendIQ2","sendBeacon","schedule","ENVIRONMENT","g","objectTag","typedArrayTags","freeProcess","process","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","isArg","isBuff","isType","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","othLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","isMasked","arrLength","seen","arrValue","othIndex","resIndex","arrayFilter","baseUnary","gumFunction","ScreenObtainer","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","supportsGetDisplayMedia","obtainScreenFromGetDisplayMedia","JitsiMeetScreenObtainer","openDesktopPicker","streamType","onGetStreamResponse","errorCallback","getDisplayMedia","cursor","applyConstraintsPromise","videoTrack","errorDetails","errorName","errorMsg","errorStack","currentExecutingScript","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","ParticipantConnectionStatus","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","myUserId","figureOutConnectionStatus","_changeConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","NETWORK_INFO_EVENT","NetworkInfo","_current","isOnline","updateNetworkInfo","networkInfo","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","parseMsid","spec","planB","msidParts","parseSctpDescription","maxMessageSize","maxSizeLine","sctpPort","writeSctpDescription","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","getFocusRecordingUpdate","presence","jibriStatus","initiator","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","Deferred","_key","_keyIndex","_reqs","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceJoined","_onConferenceLeft","_onParticipantLeft","Olm","promises","pId","olmData","_getParticipantOlmData","uuidv4","olm","ciphertext","_encryptKeyInfo","setRejectTimeout","_sendMessage","allSettled","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","keyInfo","base64js","fromByteArray","keyIndex","encrypt","_sendSessionInit","free","_sendError","Session","create_outbound","idKey","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","safeJsonParse","toByteArray","lastKey","isEqual","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","_conferenceJoined","_enabled","_initialized","_e2eeCtx","E2EEContext","_olmAdapter","_ratchetKey","debounce","_ratchetKeyImpl","_rotateKey","_rotateKeyImpl","_onParticipantPropertyChanged","_onParticipantJoined","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","_onOlmIdKeyReady","_onParticipantE2EEChannelReady","_onParticipantKeyUpdated","supportsInsertableStreams","testing","disableE2EE","isEnabled","setEnabled","enabled","_restartMediaSessions","_generateKey","updateKey","setKey","crypto","getRandomValues","_getMediaSessions","_setupSenderE2EEForTrack","setLocalParticipantProperty","cleanup","oldValue","material","importKey","newKey","ratchet","updateCurrentKey","findReceiverForTrack","handleReceiver","sender","findSenderForTrack","handleSender","doesVideoMuteByStreamRemove","isVideoTrack","JingleSessionPC","JingleSession","jingleContents","videoContents","maxFrameHeightSel","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","signalingLayer","SignalingLayerImpl","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","JingleSessionState","doInitialize","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","videoQuality","disabledCodec","preferredCodec","disableSimulcast","disableH264","preferH264","_abtestSuspendVideoEnabled","startSilent","onicecandidate","phase","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","iceConnectionState","reconnect","iceStarted","onnegotiationneeded","remoteDescription","workFunction","finishedCallback","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","setChatRoom","enableLayerSuspension","MediaSessionEvents","REMOTE_VIDEO_CONSTRAINTS_CHANGED","getRemoteRecvMaxFrameHeight","idealHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","tmp","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","addIceCandidates","iceCandidates","rtcCandidate","RTCIceCandidate","outerHTML","iceCandidate","addIceCandidate","readSsrcInfo","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","generateRecvonlySsrc","acceptOffer","jingleOffer","failure","setOfferAnswerCycle","sendSessionAccept","invite","addTracks","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","replaceTransport","jingleOfferElem","originalOffer","clone","remove","newFingerprint","sendTransportAccept","accept","responder","responderJid","sessionModify","transportAccept","medialines","sendTransportReject","transportReject","setSenderMaxBitrates","setMaxBitRate","setSenderVideoConstraint","setSenderVideoDegradationPreference","terminate","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","offerIq","remoteSdp","usesPlanB","findIndex","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","ssrcLines","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","PERMISSION_PROMPT_IS_SHOWN","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","len2","encodeChunk","lookup","end","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","SIM_LAYER_RIDS","TPCUtils","videoBitrates","localStreamEncodingsConfig","active","high","low","scaleResolutionDownBy","standard","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","sources","_getStreamEncodings","isSimulcastOn","insertUnifiedPlanSimulcastReceive","usesSdpMungingForSimulcast","simulcast_03","simulcast","simulcastLine","getTrack","transceiverInit","getOriginalStream","sendEncodings","addTransceiver","getTransceivers","addStream","setEncodings","getLocalStreamHeightConstraints","localVideoHeightConstraints","encoding","getTrackId","stopped","localSSRCs","_addedStreams","_extractPrimarySSRC","getParameters","encodings","setParameters","transceivers","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","env","argv","versions","cwd","chdir","dir","umask","AudioContext","webkitAudioContext","LocalStatsCollector","interval","intervalId","intervalMilis","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","ERROR_FEATURE_VERSION_MISMATCH","compareIdentities","some","generateSha","sortedIdentities","accumulatedValue","sortedFeatures","feature","versionToCapabilities","jidToVersion","rooms","_addChatRoom","_removeChatRoom","CAPS","_handleCaps","_onMucMemberLeft","_removeJidToVersionEntry","submit","_generateVersion","removeFeature","getFeatures","_getDiscoInfo","sha","receivedNode","category","_fixChatRoomPresenceMap","addToPresence","_notifyVersionChanged","_identities","_features","oldVersion","packet2JSON","nodes","children","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","ChatRoom","myroomjid","members","presMap","presHandlers","_removeConnListeners","joined","focusMucJid","noBridgeAvailable","moderator","Moderator","enableLobby","lobby","Lobby","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","JitsiTranscriptionStatus","xns","statsId","addVideoInfoToPresence","userRegion","presenceUpdateTime","getLastPresence","mucNick","customJoinPresenceExtensions","disableFocus","allocateConferenceFocus","onConnStatusChanged","fromJoin","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","setLobbyRoomJid","membersOnlyEnabled","meetingId","createNonAnonymousRoom","disableDiscoInfo","getForm","form","formSubmit","onPresence","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","affiliation","isFocus","getFocusUserJid","isHiddenDomain","hiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","botType","nick","statsID","newRole","_initFocus","memberOfThis","displayName","displayJids","att","phone","pin","processNode","mucJid","focusFeatures","supportsRestartByTerminate","setParticipantPropertyListener","tagHandlers","elementName","nickname","sendPrivateMessage","setSubject","subject","onParticipantLeft","skipEvents","onMucMemberLeft","onPresenceUnavailable","destroySelect","reasonSelect","isSelfPresence","isKick","membersKeys","actorSelect","actorNick","onMessage","txt","subjectText","interfaceConfig","APP_NAME","stamp","dateParts","passwordSelect","onPresenceError","lobbyRoomNode","lobbyRoomJid","setAffiliation","grantIQ","kick","kickIQ","lockRoom","onError","onNotSupported","formsubmit","setMembersOnly","formToSubmit","removeFromPresence","getFromPresence","addPresenceListener","removePresenceListener","handlerIdx","isModerator","getMemberRole","peerJid","setVideoMute","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","getMediaPresenceInfo","mutedNode","videoTypeNode","isSIPCallingSupported","isSipGatewayEnabled","hangup","getLobby","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","clean","leave","onMucLeft","doReject","ON","OFF","SignalingLayer","ssrcOwners","chatRoom","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","addOrReplaceInPresence","_doesEndpointSendNewSourceInfo","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","FeatureFlags","_sourceInfoHandler","_memberLeftHandler","_bindChatRoomEventHandlers","SignalingEvents","emitAudioMutedEvent","emitVideoMutedEvent","emitVideoTypeEvent","sourceInfoJSON","emitEventsFromHere","endpointSourceState","sourceName","getMediaTypeFromSourceName","newMutedState","oldSourceState","newVideoType","newSourceNames","_findEndpointSourceInfoForMediaType","remoteSourceState","sourceInfo","getPeerMediaInfo","legacyGetPeerMediaInfo","lastPresence","getPeerSourceInfo","mediaInfo","endpointMediaSource","codecTypeNode","codecType","getSSRCOwner","existingOwner","setTrackMuteStatus","setTrackVideoType","getTrackSourceName","setTrackSourceName","existingName","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","isWebRTCTrackMuted","isLocalAudioTrack","getStreamId","getTrackLabel","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","supportsReceiverStats","getMSID","trackId","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","createAudioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","timestamp","score","pcmData","getDeviceId","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","stopStream","getDeviceLabel","_destroyed","AudioContextImpl","E2E_RTT_CHANGED","clearRejectTimeout","_timeout","ms","getSourceNameForJitsiTrack","trackIdx","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","IDENTITY_UPDATED","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","first","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","textEncoder","TextEncoder","subtle","deriveBits","encode","keyBytes","_setEffectInProgress","effect","_startStreamEffect","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","storedMSID","_streamEffect","_originalStream","startEffect","_stopStreamEffect","stopEffect","_switchStreamEffect","setEffect","cont","removeTrack","_queueSetMuted","setMuted","_setMuted","logMuteInfo","_removeStreamFromConferenceAsMute","streamOptions","getCameraFacingMode","assign","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","successCallback","_removeLocalTrackAsMute","_setConference","_onByteSentStatsReceived","bytesSent","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackAdded","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","JibriSession","_mode","_setSessionID","setStatus","getError","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getStatus","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setInitiator","setTerminator","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","errorIq","_eventEmitter","_grantedPermissions","JitsiMediaDevicesEvents","_logOutputDevice","_handleGrantedPermissions","_permissionsApiSupported","permissions","query","deviceID","isDevicePermissionGranted","supported","results","every","permissionStatus","isMultipleAudioInputSupported","emitEvent","consoleTransport","globalTransports","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","webpackPolyfill","deprecate","paths","grammar","reg","format","u","z","rate","subtype","sessionConfig","raddr","dir2","RecordingResult","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","createEmptyStream","mimeType","ondataavailable","dataEvent","recorderToRemove","download","Blob","href","click","getRecordingResults","getFileType","JitsiConnection","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","setToken","initJitsiConference","JitsiConference","getConnectionTimes","getLogs","metadata","ua","eventManager","JitsiConferenceEventManager","_signalingLayer","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","wasStopped","connectionQuality","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","resourceCreator","isAuthenticatedUser","setupXMPPListeners","_statsCurrentId","statisticsId","Settings","callStatsUserName","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","e2eping","E2ePing","setupRTCListeners","qualityController","QualityController","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","setupChatRoomListeners","setupStatisticsListeners","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","VADTalkMutedDetection","DetectionEvents","enableNoisyMicDetection","vadNoiseDetection","VADNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","NoAudioSignalDetection","hasAudioSignal","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","removeXMPPListeners","onMemberLeft","_getActiveMediaSession","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getPerformanceStats","longTasksStats","eventId","addCommandListener","command","removeCommandListener","sendTextMessage","sendPrivateTextMessage","sendCommand","sendCommandOnce","removeCommand","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","addTrackPromises","_setupNewTrack","_sendBridgeVideoTypeMessage","_updateRoomPresence","isVideoMutedByFocus","_fireMuteChangeEvent","jingleSession","ctx","skip","muteStatusChanged","videoTypeChanged","presenceChanged","localVideoTracks","_setTrackMuteStatus","_setNewVideoType","audioMuteStatusChanged","videoMuteStatusChanged","getSourceName","videoTypeTagName","trackVideoType","legacyTypeChanged","audioMuteChanged","videoMuteChanged","localtrack","BridgeVideoType","NONE","getVideoType","_desktopSharingFrameRate","DESKTOP_HIGH_FPS","sendSourceVideoType","setVideoType","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","actorParticipant","actorId","muteHandler","audioLevelHandler","_doReplaceTrack","replaceTrackPromises","setSourceName","addAsUnmutePromises","removeAsMutePromises","getRole","isHidden","lock","JitsiConferenceErrors","unlock","selectParticipant","selectParticipants","pinParticipant","lastN","isInteger","isVideoActive","getParticipantCount","countHidden","grantOwner","kickParticipant","_maybeClearSITimeout","_sessionInitiateTimeout","onMemberJoined","JitsiParticipant","_role","_botType","_updateFeatures","_maybeStartOrStopP2P","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","mediaSessions","getMediaSessions","tracksToBeRemoved","onMemberKicked","kickedParticipantId","kickedParticipant","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","onTransportInfo","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","supportsP2P","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","_acceptJvbIncomingCall","serverRegion","_isE2EEEnabled","_setBridgeChannel","_suspendMediaTransferForJvbConnection","webSocket","bridgeChannelType","openBridgeChannel","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","sendTones","tones","duration","peerConnection","startRecording","stopRecording","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","isStartAudioMuted","isStartVideoMuted","removeLocalParticipantProperty","getLocalParticipantProperty","prop","overallFeedback","detailedFeedback","getSsrcByTrack","getLocalSSRC","getSSRC","remoteUserId","_isFocus","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onIceConnectionFailed","IceFailedHandling","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","logName","p2pEstablishmentDuration","jvbEstablishmentDuration","done","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","changed","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","userLeftEvent","peers","peerCount","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","getStats","setPreferredReceiveMaxFrameHeight","setPreferredSendMaxFrameHeight","createVideoSIPGWSession","sipAddress","VideoSIPGWConstants","perf","toggleE2EE","isLobbySupported","isMembersOnly","disableLobby","disable","joinLobby","email","lobbyDenyAccess","denyAccess","lobbyApproveAccess","approveAccess","xmppListeners","chatRoomForwarder","EventEmitterForwarder","actor","forward","recorderSession","logObject","AuthenticationEvents","myJid","ts","updated","featuresChangedListener","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","isUserInteractionRequiredForUnmute","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpTransceiver","RTCRtpSender","ondevicechange","supportsLocalCandidateRttStatistics","PerformanceObserver","supportedEntryTypes","RTCRtpReceiver","supportsRTTStatistics","_getChromiumBasedVersion","createEncodedStreams","createEncodedVideoStreams","ReadableStream","postMessage","getCapabilities","chromium","default","17","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","18","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","90","configurable","writable","getResult","91","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","isEngine","is","92","93","versionName","94","vendor","model","95","analyticsHandlers","permanentProperties","conferenceName","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","setConferenceName","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","statsInterval","longTasks","maxDuration","performanceStatsInterval","avgRatePerMinute","maxDurationMs","longTaskEventHandler","getEntries","task","observer","observe","buffered","longTasksIntervalId","_lastTimeStamp","KEYS_BY_BROWSER_TYPE","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","_browserType","_usesPromiseGetStats","_getStatValue","_defineNewGetStatValueMethod","_defineGetStatValueMethod","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","browsers","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","startAudioLevelStats","audioLevels","getAudioLevels","processNewAudioLevelReport","processAudioLevelReport","processNewStatsReport","processStatsReport","itemStatByKey","stat","keyFromName","getNonNegativeStat","getStatValue","byteSentStats","receiveBandwidth","sendBandwidth","localCandidateType","localip","remoteCandidateType","conferenceStatsTransport","selected","local","localCandidateId","remote","remoteCandidateId","ipAddress","portNumber","candidateType","before","ssrcIds","isRemote","remoteSource","ssrcStats","isDownloadStream","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","packetsTotal","packetsLost","bytesReceivedNow","bytesReceivedBefore","bytesReceived","nowBytesTransmitted","timeMs","bitrateReceivedKbps","bitrateSentKbps","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","audioCodec","videoBitrateDownload","videoBitrateUpload","videoCodec","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","localIp","networkType","currentRoundTripTime","framerateMean","frameHeight","frameWidth","framesPerSecond","framesSent","trackIdentifier","getSsrcByTrackId","dest","srcEvent","hidden","_jid","_id","_conference","_hidden","_statsID","_connectionStatus","_properties","_identity","getConference","jitsiTrack","isAudioMuted","_isMediaTypeMuted","_getFeaturesPromise","getBotType","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","kJitsiE2EE","E2EEcontext","baseUrl","ljm","workerBlob","blobUrl","_worker","Worker","operation","receiverStreams","createEncodedAudioStreams","readableStream","readable","writableStream","senderStreams","stropheConnection","_resumeRetryN","_retryDelay","_cancelResume","_networkOnlineListener","_scheduleResume","_resumeTimeout","getJitterDelay","retryDelay","_resumeConnection","resumeToken","retry","minDelay","LastRequestTracker","_lastSuccess","xmppConnection","originalRawInput","ConnectionPlugin","failedPings","pingExecIntervals","_onPingThresholdExceeded","_addPingExecutionTimestamp","pingIntervals","maxInterval","previousTS","currentInterval","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoom","_leaveLobbyRoom","avatar","invitePassword","memberRoomJid","msgToSend","createExpBackoffTimer","step","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","call_control","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","createConferenceIq","machineUID","machineId","openSctp","enforcedBridge","enableTcc","enableRemb","minParticipants","audioPacketDelay","startBitrate","minBitrate","octo","probability","opusMaxAverageBitrate","stereo","useRoomAsSharedDocumentName","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","startMuted","successTime","me","iceservers","dict","credential","temp","useTurnUdp","updateLog","_queue","_processQueueTasks","_stopped","kill","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","_map","_keys","setImmediate","completed","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","idle","priorityQueue","_compareTasks","sequence","compare","beg","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","char","getState","addSources","removeSources","StropheLogger","logIncoming","logOutgoing","onRayo","roomPass","callResource","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","trace","errStatusCapture","senderVideoConstraintsChanged","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","colibriClass","msgPayload","jsonObject","pinnedEndpoint","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","endpoint","videoConstraints","dtlsRole","_initialTrackId","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","addRemoteCandidate","makeError","NotSupportedError","InvalidStateError","InvalidAccessError","OperationError","edgeVersion","addTrackToStreamAndFireEvent","dispatchEvent","MediaStreamTrackEvent","fireAddTrack","trackEvent","Event","_dispatchEvent","_eventTarget","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","_localDescription","_remoteDescription","iceGatheringState","usingBundle","rtcpMuxPolicy","hasTurn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","RTCIceGatherer","gatherPolicy","_config","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","onaddstream","ontrack","onremovestream","onconnectionstatechange","onicegatheringstatechange","ondatachannel","_emitGatheringStateChange","getConfiguration","getLocalStreams","getRemoteStreams","_createTransceiver","doNotAdd","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","_createIceAndDtlsTransports","_maybeFireNegotiationNeeded","clonedStream","clonedTrack","removeStream","getSenders","getReceivers","_createIceGatherer","bufferedCandidateEvents","bufferCandidates","_gather","onlocalcandidate","evt","serializedCandidate","toJSON","complete","RTCIceTransport","onicestatechange","_updateIceConnectionState","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","receive","isIceLite","rejected","remoteIceParameters","remoteDtlsParameters","_updateSignalingState","receiverList","iceOptions","remoteMsid","isComplete","setTransport","setRemoteCandidates","isNewTrack","nativeTrack","removeTrackFromStreamAndFireEvent","states","checking","disconnected","failed","new","connecting","numAudioTracks","numVideoTracks","offerOptions","remoteCodec","rHdrExt","getLocalCandidates","mediaSectionsInOffer","candidateString","selector","MediaStreamTrack","senderOrReceiver","allStats","ortcObjectName","nativeGetstats","nativeStats","mapStats","inboundrtp","outboundrtp","candidatepair","localcandidate","remotecandidate","nativeMethod","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","standardVideoBitrates","maxBitratesVideo","tpcUtils","statsinterval","_usesTransceiverCodecPreferences","_capScreenshareBitrate","interop","Interop","SdpSimulcast","numOfLayers","Simulcast","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","senderVideoMaxHeight","getCodecMimeType","codecPreference","what","_remoteStreamAdded","_remoteStreamRemoved","_remoteTrackAdded","onremovetrack","_remoteTrackRemoved","_processStat","statValue","endTime","dumpSDP","_getDesiredMediaDirection","mediaTransferActive","hasAnyTracksOfType","_setVideoType","setMute","getSynchronizationSources","endpoints","endpointTracksByMediaType","findTrackById","onaddtrack","streamAudioTracks","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","ownerEndpointId","peerMediaInfo","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","endpointTrackMap","mediaTrack","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","normalizePlanB","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","fidGroups","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","videoMedia","enforceSendRecv","transformStreamIdentifiers","_adjustRemoteMediaDirection","hasCameraTrack","_mungeCodecOrder","getConfiguredVideoCodec","bitrates","hdBitrate","_isSharingScreen","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","rtxSsrcMapping","rtxSsrc","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","isMediaStreamInPc","findSenderByKind","negotiationNeeded","oldTrackSSRC","mediaActive","MediaDirection","SENDRECV","RECVONLY","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasLocalSource","hasRemoteSource","SENDONLY","_mungeOpus","localVideoTrack","videoSender","preference","degradationPreference","presenterEnabled","scaleFactor","layer","enableConferenceFlag","mungeRemoteDescription","currentDescription","toUnifiedPlan","newHeight","encodingsEnabledState","ldStreamIndex","interToneGap","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","clearVideoSsrcCache","peerTracks","_createOfferOrAnswer","isOffer","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","groupsMap","groupSSRCs","extractSSRCMap","_processLocalSSRCsMap","handleFailure","capabilities","setCodecPreferences","oaPromise","trackMSID","newSSRCNum","oldSSRCNum","isSharingLowFpsScreen","currNumSsrcs","audioQuality","mLines","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","defaultCodec","getLocalVideoTracks","primarySsrcs","fidLines","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","correspondingRtxSsrcs","clearSsrcCache","ssrcMapping","sdpTransformer","modifyRtxSsrcs2","primaryVideoSsrcs","correspondingRtxSsrc","previousAssociatedRtxStream","stripRtx","cachedPrimarySsrc","injectRecvOnly","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","_sourceName","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_playCallback","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_addMutedLocalVideoTracksToSDP","localVideos","isInPeerConnection","shouldFakeSdp","requiredSSRCs","ssrcCache","primaryCname","_transformMediaIdentifiers","pcId","streamAndTrackIDs","sessionDesc","audioMLine","kSimulcastFormats","layers","videoBitrateCap","getTarget","millisSinceStart","simulcastFormat","targetHeight","pixels","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","_timeLastBwCapRemoved","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","newVideoBitrateCap","bandwidthLimiter","getBandwidthLimit","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_actOnIceFailed","enableIceRestart","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","_timeoutTrigger","_hasAudioInput","_audioLevel","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","myUserID","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","_calculateVADScore","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingInterval","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","_propagateSendMaxFrameHeight","mediaSession","preferredReceiveMaxFrameHeight","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevelsString","AverageStatReport","calculate","appendReport","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","SphinxService","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","stopActiveDevices","deviceLabel","ProxyConnectionService","jitsiConnection","otherOptions","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","processMessage","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","_selfCloseConnection","xml","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","newCreateLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","_rtc","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AuthUtil","getTokenAuthUrl","urlPattern","roleUpgrade","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","sessionMedia","bLine","bundle","mids","msidSemantic","semantic","current","currentDesc","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","inactiveMid","cmLine","_ssrcCache","_fillSsrcsFromCache","cachedSsrcs","newSsrcs","_parseSimLayers","newMsid","_getSsrcAttribute","newCname","_generateNewSsrcsForSimulcast","addAssociatedAttributes","simSsrcs","simSsrc","_generateSsrc","simulcastSsrcs","mungedSsrcs","mungedSsrcGroups","msCrypto","rnds8","rng","byteToHex","bytesToUuid","buf","bth","v4","rnds","getAnalyticsAttributesFromOptions","video_requested","_mergeNamespaceAndModule","JitsiMeetJS","constants","recording","recordingConstants","sipVideoGW","detection","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","firePermissionPromptIsShownEvent","originalOptions","promiseFulfilled","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","oldResolution","newResolution","resName","getLowerResolution","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptFromUrl","getScriptUrlFromStack","ignoreMessage","getSoleInlineScript","currentScript","thrownErr","near","far","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","scope","Timeout","clearFn","_clearFn","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","removeChild","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","expr","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","_restoreSimulcast","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","Word","TranscriptionService","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","getWord","getBeginTime","getEndTime","audioBlob","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","supportsUnifiedPlan","val","compactObject","isEmptyObject","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","walkStats","resultSet","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","shimAddTrackRemoveTrackWithNative","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","addIceCandidateNullSupported","nativeAddIceCandidate","fixNegotiationNeeded","origMSTEnabled","RTCDtmfSender","RTCDTMFSender","RTCPeerConnectionShim","shimRTCPeerConnection","validTurn","shimReplaceTrack","setTrack","nativeGetUserMedia","nativeGetSettings","nativeApplyConstraints","preferredMediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","audioTransceiver","setDirection","videoTransceiver","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeAllowExtmapMixed","nativeSRD","adapter","shimChrome","shimFirefox","shimEdge","shimSafari","commonShim","chromeShim","browserShim","firefoxShim","edgeShim","safariShim","adapterFactory"],"mappings":"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","file":"lib-jitsi-meet.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 149);\n","const XMPPEvents = {\r\n    /**\r\n     * Indicates error while adding ice candidate.\r\n     */\r\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\r\n\r\n    // Designates an event indicating that the focus has asked us to mute our\r\n    // audio.\r\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\r\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\r\n    BRIDGE_DOWN: 'xmpp.bridge_down',\r\n\r\n    /**\r\n     * Triggered when 'session-accept' is received from the responder.\r\n     */\r\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\r\n\r\n    // Designates an event indicating that an offer (e.g. Jingle\r\n    // session-initiate) was received.\r\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\r\n\r\n    // Triggered when Jicofo kills our media session, this can happen while\r\n    // we're still in the MUC, when it decides to terminate the media session.\r\n    // For example when the session is idle for too long, because we're the only\r\n    // person in the conference room.\r\n    CALL_ENDED: 'xmpp.callended.jingle',\r\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\r\n\r\n    // The conference properties (as advertised by jicofo) have changed\r\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\r\n\r\n    /**\r\n     * This event is triggered when the ICE connects for the first time.\r\n     */\r\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\r\n\r\n    // Designates an event indicating that the connection to the XMPP server\r\n    // failed.\r\n    CONNECTION_FAILED: 'xmpp.connection.failed',\r\n\r\n    // Designates an event indicating that the media (ICE) connection was\r\n    // interrupted. This should go to the RTC module.\r\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\r\n\r\n    // Designates an event indicating that the media (ICE) connection was\r\n    // restored. This should go to the RTC module.\r\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\r\n\r\n    // Designates an event indicating that the media (ICE) connection failed.\r\n    // This should go to the RTC module.\r\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\r\n\r\n    /**\r\n     * Designates an event indicating connection status changes.\r\n     */\r\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\r\n\r\n    // Designates an event indicating that the display name of a participant\r\n    // has changed.\r\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\r\n\r\n    /**\r\n     * Chat room instance have been added to Strophe.emuc plugin.\r\n     */\r\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\r\n\r\n    /**\r\n     * Chat room instance have been removed from Strophe.emuc plugin.\r\n     */\r\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\r\n    ETHERPAD: 'xmpp.etherpad',\r\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\r\n    FOCUS_LEFT: 'xmpp.focus_left',\r\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\r\n\r\n    /**\r\n     * Event fired when 'transport-replace' Jingle message has been received,\r\n     * before the new offer is set on the PeerConnection.\r\n     */\r\n    ICE_RESTARTING: 'rtc.ice_restarting',\r\n\r\n    /**\r\n     * Event fired after the 'transport-replace' message has been processed\r\n     * and the new offer has been set successfully.\r\n     */\r\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\r\n\r\n    /**\r\n     * Designates an event indicating that we were kicked from the XMPP MUC.\r\n     * @param {boolean} isSelfPresence - whether it is for local participant\r\n     * or another participant.\r\n     * @param {string} actorJid - the jid of the participant who was initator\r\n     * of the kick.\r\n     * @param {?string} participantJid - when it is not a kick for local participant,\r\n     * this is the jid of the participant which was kicked.\r\n     */\r\n    KICKED: 'xmpp.kicked',\r\n\r\n    // Designates an event indicating that our role in the XMPP MUC has changed.\r\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\r\n\r\n    /**\r\n     * Event fired when the unique meeting id is set.\r\n     */\r\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\r\n\r\n    // Designates an event indicating that an XMPP message in the MUC was\r\n    // received.\r\n    MESSAGE_RECEIVED: 'xmpp.message_received',\r\n\r\n    // Designates an event indicating that an invite XMPP message in the MUC was\r\n    // received.\r\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\r\n\r\n    // Designates an event indicating that a private XMPP message in the MUC was\r\n    // received.\r\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\r\n\r\n    // Designates an event indicating that a bot participant type had changed\r\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\r\n\r\n    // Designates an event indicating that the XMPP MUC was destroyed.\r\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\r\n\r\n    // Designates an event indicating that we have joined the XMPP MUC.\r\n    MUC_JOINED: 'xmpp.muc_joined',\r\n\r\n    // Designates an event indicating that a participant joined the XMPP MUC.\r\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\r\n\r\n    // Designates an event indicating that a participant left the XMPP MUC.\r\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\r\n\r\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\r\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\r\n\r\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\r\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\r\n\r\n    // Designates an event indicating that a participant left the XMPP MUC.\r\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\r\n\r\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\r\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\r\n\r\n    // Designates an event indicating that local participant left the muc\r\n    MUC_LEFT: 'xmpp.muc_left',\r\n\r\n    // Designates an event indicating that the MUC role of a participant has\r\n    // changed.\r\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\r\n\r\n    // Designates an event indicating that the MUC has been locked or unlocked.\r\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\r\n\r\n    // Designates an event indicating that the MUC members only config has changed.\r\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\r\n\r\n    // Designates an event indicating that a participant in the XMPP MUC has\r\n    // advertised that they have audio muted (or unmuted).\r\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\r\n\r\n    // Designates an event indicating that a participant in the XMPP MUC has\r\n    // advertised that they have video muted (or unmuted).\r\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\r\n\r\n    // Designates an event indicating that the video type (e.g. 'camera' or\r\n    // 'screen') for a participant has changed.\r\n    // Note: currently this event fires every time we receive presence from\r\n    // someone (regardless of whether or not the \"video type\" changed).\r\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\r\n\r\n    /**\r\n     * Indicates that the features of the participant has been changed.\r\n     */\r\n    PARTCIPANT_FEATURES_CHANGED: 'xmpp.partcipant_features_changed',\r\n    PASSWORD_REQUIRED: 'xmpp.password_required',\r\n\r\n    /**\r\n     * Indicates that phone number changed.\r\n     */\r\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\r\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\r\n    PRESENCE_STATUS: 'xmpp.presence_status',\r\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\r\n\r\n    // xmpp is connected and obtained user media\r\n    READY_TO_JOIN: 'xmpp.ready_to_join',\r\n\r\n    /**\r\n     * Indicates that recording state changed.\r\n     */\r\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\r\n\r\n    // Designates an event indicating that we received statistics from a\r\n    // participant in the MUC.\r\n    REMOTE_STATS: 'xmpp.remote_stats',\r\n\r\n    /**\r\n     * Indicates that the offer / answer renegotiation has failed.\r\n     */\r\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\r\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\r\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\r\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\r\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\r\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\r\n\r\n    /**\r\n     * Indicates that max users limit has been reached.\r\n     */\r\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\r\n\r\n    // Designates an event indicating that we sent an XMPP message to the MUC.\r\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\r\n\r\n    // Designates an event indicating that we sent a private XMPP message to\r\n    // a specific user of the muc.\r\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\r\n\r\n    /**\r\n     * Event fired when we do not get our 'session-accept' acknowledged by\r\n     * Jicofo. It most likely means that there is serious problem with our\r\n     * connection or XMPP server and we should reload the conference.\r\n     *\r\n     * We have seen that to happen in BOSH requests race condition when the BOSH\r\n     * request table containing the 'session-accept' was discarded by Prosody.\r\n     * Jicofo does send the RESULT immediately without any condition, so missing\r\n     * packets means that most likely it has never seen our IQ.\r\n     */\r\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\r\n\r\n    /**\r\n     * Event fired when speaker stats update message is received.\r\n     */\r\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\r\n\r\n    /**\r\n     * Event fired when conference creation timestamp is received.\r\n     */\r\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\r\n\r\n    // Designates an event indicating that we should join the conference with\r\n    // audio and/or video muted.\r\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\r\n\r\n    // Designates an event indicating that the subject of the XMPP MUC has\r\n    // changed.\r\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\r\n\r\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\r\n    // suspending detected\r\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\r\n\r\n    /**\r\n     * Notifies for transcription status changes. The event provides the\r\n     * following parameters to its listeners:\r\n     *\r\n     * @param {String} status - The new status.\r\n     */\r\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\r\n\r\n    /**\r\n     * Event fired when 'transport-info' with new ICE candidates is received.\r\n     */\r\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\r\n\r\n    /**\r\n     * Indicates that video SIP GW state changed.\r\n     *\r\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\r\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\r\n     */\r\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\r\n\r\n    /**\r\n     * Indicates that video SIP GW Session state changed.\r\n     * The statuses are any of the following statuses:\r\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\r\n     * {@see VideoSIPGWConstants}\r\n     *\r\n     * @param {options} event - {address, oldState, newState, displayName}.\r\n     */\r\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\r\n        'xmpp.videoSIPGWSessionStateChanged',\r\n\r\n    // Designates an event indicating that the local ICE connection state has\r\n    // changed.\r\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\r\n\r\n    /**\r\n     * Event which is emitted when the body in an XMPP message in the MUC\r\n     * contains JSON\r\n     */\r\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\r\n};\r\n\r\nmodule.exports = XMPPEvents;\r\n","/**\r\n * The events for the conference.\r\n */\r\n\r\n/**\r\n * Event indicates that the current conference audio input switched between audio\r\n * input states,i.e. with or without audio input.\r\n */\r\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\r\n\r\n/**\r\n * Indicates that authentication status changed.\r\n */\r\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\r\n\r\n/**\r\n * Fired just before the statistics module is disposed and it's the last chance\r\n * to submit some logs to the statistics service (ex. CallStats if enabled),\r\n * before it's disconnected.\r\n */\r\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\r\n\r\n/**\r\n * Indicates that an error occured.\r\n */\r\nexport const CONFERENCE_ERROR = 'conference.error';\r\n\r\n/**\r\n * Indicates that conference failed.\r\n */\r\nexport const CONFERENCE_FAILED = 'conference.failed';\r\n\r\n/**\r\n * Indicates that conference has been joined. The event does NOT provide any\r\n * parameters to its listeners.\r\n */\r\nexport const CONFERENCE_JOINED = 'conference.joined';\r\n\r\n/**\r\n * Indicates that conference has been left.\r\n */\r\nexport const CONFERENCE_LEFT = 'conference.left';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been established\r\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\r\n * state for the first time.\r\n */\r\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been interrupted for some\r\n * reason.\r\n * XXX This is currently fired when the *ICE* connection is interrupted.\r\n */\r\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been restored.\r\n * XXX This is currently fired when the *ICE* connection is restored.\r\n */\r\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\r\n\r\n/**\r\n * A connection to the video bridge's data channel has been established.\r\n */\r\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\r\n\r\n/**\r\n * A user has changed it display name\r\n */\r\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\r\n\r\n/**\r\n * The dominant speaker was changed.\r\n */\r\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\r\n\r\n/**\r\n * UTC conference timestamp when first participant joined.\r\n */\r\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\r\n\r\n/**\r\n * Indicates that DTMF support changed.\r\n */\r\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\r\n\r\n/**\r\n * Indicates that a message from another participant is received on data\r\n * channel.\r\n */\r\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\r\n\r\n/**\r\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\r\n *\r\n * Event emitted when conference transits, between one to one and multiparty JVB\r\n * conference. If the conference switches to P2P it's neither one to one nor\r\n * a multiparty JVB conference, but P2P (the status argument of this event will\r\n * be <tt>false</tt>).\r\n *\r\n * The first argument is a boolean which carries the previous value and\r\n * the seconds argument is a boolean with the new status. The event is emitted\r\n * only if the previous and the new values are different.\r\n *\r\n * @type {string}\r\n */\r\nexport const JVB121_STATUS = 'conference.jvb121Status';\r\n\r\n/**\r\n * You are kicked from the conference.\r\n * @param {JitsiParticipant} the participant that initiated the kick.\r\n */\r\nexport const KICKED = 'conference.kicked';\r\n\r\n/**\r\n * Participant was kicked from the conference.\r\n * @param {JitsiParticipant} the participant that initiated the kick.\r\n * @param {JitsiParticipant} the participant that was kicked.\r\n */\r\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\r\n\r\n/**\r\n * The Last N set is changed.\r\n *\r\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\r\n * which are leaving Last N\r\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\r\n * which are entering Last N\r\n */\r\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\r\n\r\n/**\r\n * Indicates that the room has been locked or unlocked.\r\n */\r\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\r\n\r\n/**\r\n * Indicates that the region of the media server (jitsi-videobridge) that we\r\n * are connected to changed (or was initially set).\r\n * @type {string} the region.\r\n */\r\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\r\n\r\n/**\r\n * An event(library-private) fired when a new media session is added to the conference.\r\n * @type {string}\r\n * @private\r\n */\r\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\r\n\r\n/**\r\n * An event(library-private) fired when the conference switches the currently active media session.\r\n * @type {string}\r\n * @private\r\n */\r\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\r\n\r\n/**\r\n * Indicates that the conference had changed to members only enabled/disabled.\r\n * The first argument of this event is a <tt>boolean</tt> which when set to\r\n * <tt>true</tt> means that the conference is running in members only mode.\r\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\r\n */\r\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\r\n\r\n/**\r\n * New text message was received.\r\n */\r\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\r\n\r\n/**\r\n * Event indicates that the current selected input device has no signal\r\n */\r\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\r\n\r\n/**\r\n * Event indicates that the current microphone used by the conference is noisy.\r\n */\r\nexport const NOISY_MIC = 'conference.noisy_mic';\r\n\r\n/**\r\n * New private text message was received.\r\n */\r\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\r\n\r\n/**\r\n * Event fired when JVB sends notification about interrupted/restored user's\r\n * ICE connection status or we detect local problem with the video track.\r\n * First argument is the ID of the participant and\r\n * the seconds is a string indicating if the connection is currently\r\n * - active - the connection is active\r\n * - inactive - the connection is inactive, was intentionally interrupted by\r\n * the bridge\r\n * - interrupted - a network problem occurred\r\n * - restoring - the connection was inactive and is restoring now\r\n *\r\n * The current status value can be obtained by calling\r\n * JitsiParticipant.getConnectionStatus().\r\n */\r\nexport const PARTICIPANT_CONN_STATUS_CHANGED\r\n    = 'conference.participant_conn_status_changed';\r\n\r\n/**\r\n * Indicates that the features of the participant has been changed.\r\n */\r\nexport const PARTCIPANT_FEATURES_CHANGED\r\n    = 'conference.partcipant_features_changed';\r\n\r\n/**\r\n * Indicates that a the value of a specific property of a specific participant\r\n * has changed.\r\n */\r\nexport const PARTICIPANT_PROPERTY_CHANGED\r\n    = 'conference.participant_property_changed';\r\n\r\n/**\r\n * Indicates that the conference has switched between JVB and P2P connections.\r\n * The first argument of this event is a <tt>boolean</tt> which when set to\r\n * <tt>true</tt> means that the conference is running on the P2P connection.\r\n */\r\nexport const P2P_STATUS = 'conference.p2pStatus';\r\n\r\n/**\r\n * Indicates that phone number changed.\r\n */\r\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\r\n\r\n/**\r\n * The conference properties changed.\r\n * @type {string}\r\n */\r\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\r\n\r\n/**\r\n * Indicates that recording state changed.\r\n */\r\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\r\n\r\n/**\r\n * Indicates that video SIP GW state changed.\r\n * @param {VideoSIPGWConstants} status.\r\n */\r\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\r\n    = 'conference.videoSIPGWAvailabilityChanged';\r\n\r\n/**\r\n * Indicates that video SIP GW Session state changed.\r\n * @param {options} event - {\r\n *     {string} address,\r\n *     {VideoSIPGWConstants} oldState,\r\n *     {VideoSIPGWConstants} newState,\r\n *     {string} displayName}\r\n * }.\r\n */\r\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\r\n    = 'conference.videoSIPGWSessionStateChanged';\r\n\r\n/**\r\n * Indicates that start muted settings changed.\r\n */\r\nexport const START_MUTED_POLICY_CHANGED\r\n    = 'conference.start_muted_policy_changed';\r\n\r\n/**\r\n * Indicates that the local user has started muted.\r\n */\r\nexport const STARTED_MUTED = 'conference.started_muted';\r\n\r\n/**\r\n * Indicates that subject of the conference has changed.\r\n */\r\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\r\n\r\n/**\r\n * Indicates that DTMF support changed.\r\n */\r\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\r\n\r\n/**\r\n * Event indicates that local user is talking while he muted himself\r\n */\r\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\r\n\r\n/**\r\n * A new media track was added to the conference. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {JitsiTrack} track the added JitsiTrack\r\n */\r\nexport const TRACK_ADDED = 'conference.trackAdded';\r\n\r\n/**\r\n * Audio levels of a media track ( attached to the conference) was changed.\r\n */\r\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\r\n\r\n/**\r\n * A media track ( attached to the conference) mute status was changed.\r\n * @param {JitsiParticipant|null} the participant that initiated the mute\r\n * if it is a remote mute.\r\n */\r\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\r\n\r\n/**\r\n * The media track was removed from the conference. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {JitsiTrack} track the removed JitsiTrack\r\n */\r\nexport const TRACK_REMOVED = 'conference.trackRemoved';\r\n\r\n/**\r\n * Notifies for transcription status changes. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {String} status - The new status.\r\n */\r\nexport const TRANSCRIPTION_STATUS_CHANGED\r\n    = 'conference.transcriptionStatusChanged';\r\n\r\n\r\n/**\r\n * A new user joined the conference.\r\n */\r\nexport const USER_JOINED = 'conference.userJoined';\r\n\r\n/**\r\n * A user has left the conference.\r\n */\r\nexport const USER_LEFT = 'conference.userLeft';\r\n\r\n/**\r\n * User role changed.\r\n */\r\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\r\n\r\n/**\r\n * User status changed.\r\n */\r\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\r\n\r\n/**\r\n * Event indicates that the bot participant type changed.\r\n */\r\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\r\n\r\n/**\r\n * A new user joined the lobby room.\r\n */\r\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\r\n\r\n/**\r\n * A user from the lobby room has been update.\r\n */\r\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\r\n\r\n/**\r\n * A user left the lobby room.\r\n */\r\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\r\n","(function (global, factory) {\r\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n            typeof define === 'function' && define.amd ? define(factory) :\r\n            (global = global || self, global.strophe = factory());\r\n}(this, function () { 'use strict';\r\n\r\n            var global$1 = (typeof global !== \"undefined\" ? global :\r\n                        typeof self !== \"undefined\" ? self :\r\n                        typeof window !== \"undefined\" ? window : {});\r\n\r\n            function _typeof(obj) {\r\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\r\n                _typeof = function (obj) {\r\n                  return typeof obj;\r\n                };\r\n              } else {\r\n                _typeof = function (obj) {\r\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\r\n                };\r\n              }\r\n\r\n              return _typeof(obj);\r\n            }\r\n\r\n            function _toConsumableArray(arr) {\r\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\r\n            }\r\n\r\n            function _arrayWithoutHoles(arr) {\r\n              if (Array.isArray(arr)) {\r\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\r\n\r\n                return arr2;\r\n              }\r\n            }\r\n\r\n            function _iterableToArray(iter) {\r\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\r\n            }\r\n\r\n            function _nonIterableSpread() {\r\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\r\n            }\r\n\r\n            /*\r\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\r\n             * Digest Algorithm, as defined in RFC 1321.\r\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\r\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n             * Distributed under the BSD License\r\n             * See http://pajhome.org.uk/crypt/md5 for more info.\r\n             */\r\n\r\n            /*\r\n             * Everything that isn't used by Strophe has been stripped here!\r\n             */\r\n\r\n            /*\r\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n             * to work around bugs in some JS interpreters.\r\n             */\r\n            var safe_add = function safe_add(x, y) {\r\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n              return msw << 16 | lsw & 0xFFFF;\r\n            };\r\n            /*\r\n             * Bitwise rotate a 32-bit number to the left.\r\n             */\r\n\r\n\r\n            var bit_rol = function bit_rol(num, cnt) {\r\n              return num << cnt | num >>> 32 - cnt;\r\n            };\r\n            /*\r\n             * Convert a string to an array of little-endian words\r\n             */\r\n\r\n\r\n            var str2binl = function str2binl(str) {\r\n              if (typeof str !== \"string\") {\r\n                throw new Error(\"str2binl was passed a non-string\");\r\n              }\r\n\r\n              var bin = [];\r\n\r\n              for (var i = 0; i < str.length * 8; i += 8) {\r\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\r\n              }\r\n\r\n              return bin;\r\n            };\r\n            /*\r\n             * Convert an array of little-endian words to a string\r\n             */\r\n\r\n\r\n            var binl2str = function binl2str(bin) {\r\n              var str = \"\";\r\n\r\n              for (var i = 0; i < bin.length * 32; i += 8) {\r\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\r\n              }\r\n\r\n              return str;\r\n            };\r\n            /*\r\n             * Convert an array of little-endian words to a hex string.\r\n             */\r\n\r\n\r\n            var binl2hex = function binl2hex(binarray) {\r\n              var hex_tab = \"0123456789abcdef\";\r\n              var str = \"\";\r\n\r\n              for (var i = 0; i < binarray.length * 4; i++) {\r\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\r\n              }\r\n\r\n              return str;\r\n            };\r\n            /*\r\n             * These functions implement the four basic operations the algorithm uses.\r\n             */\r\n\r\n\r\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\r\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\r\n            };\r\n\r\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\r\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\r\n            };\r\n\r\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\r\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\r\n            };\r\n\r\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\r\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\r\n            };\r\n\r\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\r\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\r\n            };\r\n            /*\r\n             * Calculate the MD5 of an array of little-endian words, and a bit length\r\n             */\r\n\r\n\r\n            var core_md5 = function core_md5(x, len) {\r\n              /* append padding */\r\n              x[len >> 5] |= 0x80 << len % 32;\r\n              x[(len + 64 >>> 9 << 4) + 14] = len;\r\n              var a = 1732584193;\r\n              var b = -271733879;\r\n              var c = -1732584194;\r\n              var d = 271733878;\r\n              var olda, oldb, oldc, oldd;\r\n\r\n              for (var i = 0; i < x.length; i += 16) {\r\n                olda = a;\r\n                oldb = b;\r\n                oldc = c;\r\n                oldd = d;\r\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\r\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\r\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\r\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\r\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\r\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\r\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\r\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\r\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\r\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\r\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\r\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\r\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\r\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\r\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\r\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\r\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\r\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\r\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\r\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\r\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\r\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\r\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\r\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\r\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\r\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\r\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\r\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\r\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\r\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\r\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\r\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\r\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\r\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\r\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\r\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\r\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\r\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\r\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\r\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\r\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\r\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\r\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\r\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\r\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\r\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\r\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\r\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\r\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\r\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\r\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\r\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\r\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\r\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\r\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\r\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\r\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\r\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\r\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\r\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\r\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\r\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\r\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\r\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\r\n                a = safe_add(a, olda);\r\n                b = safe_add(b, oldb);\r\n                c = safe_add(c, oldc);\r\n                d = safe_add(d, oldd);\r\n              }\r\n\r\n              return [a, b, c, d];\r\n            };\r\n            /*\r\n             * These are the functions you'll usually want to call.\r\n             * They take string arguments and return either hex or base-64 encoded\r\n             * strings.\r\n             */\r\n\r\n\r\n            var MD5 = {\r\n              hexdigest: function hexdigest(s) {\r\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\r\n              },\r\n              hash: function hash(s) {\r\n                return binl2str(core_md5(str2binl(s), s.length * 8));\r\n              }\r\n            };\r\n\r\n            /*\r\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\r\n             * in FIPS PUB 180-1\r\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\r\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n             * Distributed under the BSD License\r\n             * See http://pajhome.org.uk/crypt/md5 for details.\r\n             */\r\n\r\n            /* global define */\r\n\r\n            /* Some functions and variables have been stripped for use with Strophe */\r\n\r\n            /*\r\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\r\n             */\r\n            function core_sha1(x, len) {\r\n              /* append padding */\r\n              x[len >> 5] |= 0x80 << 24 - len % 32;\r\n              x[(len + 64 >> 9 << 4) + 15] = len;\r\n              var w = new Array(80);\r\n              var a = 1732584193;\r\n              var b = -271733879;\r\n              var c = -1732584194;\r\n              var d = 271733878;\r\n              var e = -1009589776;\r\n              var i, j, t, olda, oldb, oldc, oldd, olde;\r\n\r\n              for (i = 0; i < x.length; i += 16) {\r\n                olda = a;\r\n                oldb = b;\r\n                oldc = c;\r\n                oldd = d;\r\n                olde = e;\r\n\r\n                for (j = 0; j < 80; j++) {\r\n                  if (j < 16) {\r\n                    w[j] = x[i + j];\r\n                  } else {\r\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\r\n                  }\r\n\r\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\r\n                  e = d;\r\n                  d = c;\r\n                  c = rol(b, 30);\r\n                  b = a;\r\n                  a = t;\r\n                }\r\n\r\n                a = safe_add$1(a, olda);\r\n                b = safe_add$1(b, oldb);\r\n                c = safe_add$1(c, oldc);\r\n                d = safe_add$1(d, oldd);\r\n                e = safe_add$1(e, olde);\r\n              }\r\n\r\n              return [a, b, c, d, e];\r\n            }\r\n            /*\r\n             * Perform the appropriate triplet combination function for the current\r\n             * iteration\r\n             */\r\n\r\n\r\n            function sha1_ft(t, b, c, d) {\r\n              if (t < 20) {\r\n                return b & c | ~b & d;\r\n              }\r\n\r\n              if (t < 40) {\r\n                return b ^ c ^ d;\r\n              }\r\n\r\n              if (t < 60) {\r\n                return b & c | b & d | c & d;\r\n              }\r\n\r\n              return b ^ c ^ d;\r\n            }\r\n            /*\r\n             * Determine the appropriate additive constant for the current iteration\r\n             */\r\n\r\n\r\n            function sha1_kt(t) {\r\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\r\n            }\r\n            /*\r\n             * Calculate the HMAC-SHA1 of a key and some data\r\n             */\r\n\r\n\r\n            function core_hmac_sha1(key, data) {\r\n              var bkey = str2binb(key);\r\n\r\n              if (bkey.length > 16) {\r\n                bkey = core_sha1(bkey, key.length * 8);\r\n              }\r\n\r\n              var ipad = new Array(16),\r\n                  opad = new Array(16);\r\n\r\n              for (var i = 0; i < 16; i++) {\r\n                ipad[i] = bkey[i] ^ 0x36363636;\r\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\r\n              }\r\n\r\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\r\n              return core_sha1(opad.concat(hash), 512 + 160);\r\n            }\r\n            /*\r\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n             * to work around bugs in some JS interpreters.\r\n             */\r\n\r\n\r\n            function safe_add$1(x, y) {\r\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n              return msw << 16 | lsw & 0xFFFF;\r\n            }\r\n            /*\r\n             * Bitwise rotate a 32-bit number to the left.\r\n             */\r\n\r\n\r\n            function rol(num, cnt) {\r\n              return num << cnt | num >>> 32 - cnt;\r\n            }\r\n            /*\r\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\r\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\r\n             */\r\n\r\n\r\n            function str2binb(str) {\r\n              var bin = [];\r\n              var mask = 255;\r\n\r\n              for (var i = 0; i < str.length * 8; i += 8) {\r\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\r\n              }\r\n\r\n              return bin;\r\n            }\r\n            /*\r\n             * Convert an array of big-endian words to a base-64 string\r\n             */\r\n\r\n\r\n            function binb2b64(binarray) {\r\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n              var str = \"\";\r\n              var triplet, j;\r\n\r\n              for (var i = 0; i < binarray.length * 4; i += 3) {\r\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\r\n\r\n                for (j = 0; j < 4; j++) {\r\n                  if (i * 8 + j * 6 > binarray.length * 32) {\r\n                    str += \"=\";\r\n                  } else {\r\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\r\n                  }\r\n                }\r\n              }\r\n\r\n              return str;\r\n            }\r\n            /*\r\n             * Convert an array of big-endian words to a string\r\n             */\r\n\r\n\r\n            function binb2str(bin) {\r\n              var str = \"\";\r\n              var mask = 255;\r\n\r\n              for (var i = 0; i < bin.length * 32; i += 8) {\r\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\r\n              }\r\n\r\n              return str;\r\n            }\r\n            /*\r\n             * These are the functions you'll usually want to call\r\n             * They take string arguments and return either hex or base-64 encoded strings\r\n             */\r\n\r\n\r\n            var SHA1 = {\r\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\r\n                return binb2b64(core_hmac_sha1(key, data));\r\n              },\r\n              b64_sha1: function b64_sha1(s) {\r\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\r\n              },\r\n              binb2str: binb2str,\r\n              core_hmac_sha1: core_hmac_sha1,\r\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\r\n                return binb2str(core_hmac_sha1(key, data));\r\n              },\r\n              str_sha1: function str_sha1(s) {\r\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\r\n              }\r\n            };\r\n\r\n            var utils = {\r\n              utf16to8: function utf16to8(str) {\r\n                var i, c;\r\n                var out = \"\";\r\n                var len = str.length;\r\n\r\n                for (i = 0; i < len; i++) {\r\n                  c = str.charCodeAt(i);\r\n\r\n                  if (c >= 0x0000 && c <= 0x007F) {\r\n                    out += str.charAt(i);\r\n                  } else if (c > 0x07FF) {\r\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\r\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\r\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\r\n                  } else {\r\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\r\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\r\n                  }\r\n                }\r\n\r\n                return out;\r\n              },\r\n              addCookies: function addCookies(cookies) {\r\n                /* Parameters:\r\n                 *  (Object) cookies - either a map of cookie names\r\n                 *    to string values or to maps of cookie values.\r\n                 *\r\n                 * For example:\r\n                 * { \"myCookie\": \"1234\" }\r\n                 *\r\n                 * or:\r\n                 * { \"myCookie\": {\r\n                 *      \"value\": \"1234\",\r\n                 *      \"domain\": \".example.org\",\r\n                 *      \"path\": \"/\",\r\n                 *      \"expires\": expirationDate\r\n                 *      }\r\n                 *  }\r\n                 *\r\n                 *  These values get passed to Strophe.Connection via\r\n                 *   options.cookies\r\n                 */\r\n                cookies = cookies || {};\r\n\r\n                for (var cookieName in cookies) {\r\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\r\n                    var expires = '';\r\n                    var domain = '';\r\n                    var path = '';\r\n                    var cookieObj = cookies[cookieName];\r\n                    var isObj = _typeof(cookieObj) === \"object\";\r\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\r\n\r\n                    if (isObj) {\r\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\r\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\r\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\r\n                    }\r\n\r\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\r\n                  }\r\n                }\r\n              }\r\n            };\r\n\r\n            /** Function: $build\r\n             *  Create a Strophe.Builder.\r\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\r\n             *\r\n             *  Parameters:\r\n             *    (String) name - The root element name.\r\n             *    (Object) attrs - The attributes for the root element in object notation.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Builder object.\r\n             */\r\n\r\n            function $build(name, attrs) {\r\n              return new Strophe.Builder(name, attrs);\r\n            }\r\n            /** Function: $msg\r\n             *  Create a Strophe.Builder with a <message/> element as the root.\r\n             *\r\n             *  Parameters:\r\n             *    (Object) attrs - The <message/> element attributes in object notation.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Builder object.\r\n             */\r\n\r\n\r\n            function $msg(attrs) {\r\n              return new Strophe.Builder(\"message\", attrs);\r\n            }\r\n            /** Function: $iq\r\n             *  Create a Strophe.Builder with an <iq/> element as the root.\r\n             *\r\n             *  Parameters:\r\n             *    (Object) attrs - The <iq/> element attributes in object notation.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Builder object.\r\n             */\r\n\r\n\r\n            function $iq(attrs) {\r\n              return new Strophe.Builder(\"iq\", attrs);\r\n            }\r\n            /** Function: $pres\r\n             *  Create a Strophe.Builder with a <presence/> element as the root.\r\n             *\r\n             *  Parameters:\r\n             *    (Object) attrs - The <presence/> element attributes in object notation.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Builder object.\r\n             */\r\n\r\n\r\n            function $pres(attrs) {\r\n              return new Strophe.Builder(\"presence\", attrs);\r\n            }\r\n            /** Class: Strophe\r\n             *  An object container for all Strophe library functions.\r\n             *\r\n             *  This class is just a container for all the objects and constants\r\n             *  used in the library.  It is not meant to be instantiated, but to\r\n             *  provide a namespace for library objects, constants, and functions.\r\n             */\r\n\r\n\r\n            var Strophe = {\r\n              /** Constant: VERSION */\r\n              VERSION: \"@VERSION@\",\r\n\r\n              /** Constants: XMPP Namespace Constants\r\n               *  Common namespace constants from the XMPP RFCs and XEPs.\r\n               *\r\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\r\n               *  NS.BOSH - BOSH namespace from XEP 206.\r\n               *  NS.CLIENT - Main XMPP client namespace.\r\n               *  NS.AUTH - Legacy authentication namespace.\r\n               *  NS.ROSTER - Roster operations namespace.\r\n               *  NS.PROFILE - Profile namespace.\r\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\r\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\r\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\r\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\r\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\r\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\r\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\r\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\r\n               *  NS.XHTML - XHTML body namespace from XEP 71.\r\n               */\r\n              NS: {\r\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\r\n                BOSH: \"urn:xmpp:xbosh\",\r\n                CLIENT: \"jabber:client\",\r\n                AUTH: \"jabber:iq:auth\",\r\n                ROSTER: \"jabber:iq:roster\",\r\n                PROFILE: \"jabber:iq:profile\",\r\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\r\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\r\n                MUC: \"http://jabber.org/protocol/muc\",\r\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\r\n                STREAM: \"http://etherx.jabber.org/streams\",\r\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\r\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\r\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\r\n                VERSION: \"jabber:iq:version\",\r\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\r\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\r\n                XHTML: \"http://www.w3.org/1999/xhtml\"\r\n              },\r\n\r\n              /** Constants: XHTML_IM Namespace\r\n               *  contains allowed tags, tag attributes, and css properties.\r\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\r\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\r\n               *  allowed tags and their attributes.\r\n               */\r\n              XHTML: {\r\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\r\n                attributes: {\r\n                  'a': ['href'],\r\n                  'blockquote': ['style'],\r\n                  'br': [],\r\n                  'cite': ['style'],\r\n                  'em': [],\r\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\r\n                  'li': ['style'],\r\n                  'ol': ['style'],\r\n                  'p': ['style'],\r\n                  'span': ['style'],\r\n                  'strong': [],\r\n                  'ul': ['style'],\r\n                  'body': []\r\n                },\r\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\r\n\r\n                /** Function: XHTML.validTag\r\n                 *\r\n                 * Utility method to determine whether a tag is allowed\r\n                 * in the XHTML_IM namespace.\r\n                 *\r\n                 * XHTML tag names are case sensitive and must be lower case.\r\n                 */\r\n                validTag: function validTag(tag) {\r\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\r\n                    if (tag === Strophe.XHTML.tags[i]) {\r\n                      return true;\r\n                    }\r\n                  }\r\n\r\n                  return false;\r\n                },\r\n\r\n                /** Function: XHTML.validAttribute\r\n                 *\r\n                 * Utility method to determine whether an attribute is allowed\r\n                 * as recommended per XEP-0071\r\n                 *\r\n                 * XHTML attribute names are case sensitive and must be lower case.\r\n                 */\r\n                validAttribute: function validAttribute(tag, attribute) {\r\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\r\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\r\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\r\n                        return true;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  return false;\r\n                },\r\n                validCSS: function validCSS(style) {\r\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\r\n                    if (style === Strophe.XHTML.css[i]) {\r\n                      return true;\r\n                    }\r\n                  }\r\n\r\n                  return false;\r\n                }\r\n              },\r\n\r\n              /** Constants: Connection Status Constants\r\n               *  Connection status constants for use by the connection handler\r\n               *  callback.\r\n               *\r\n               *  Status.ERROR - An error has occurred\r\n               *  Status.CONNECTING - The connection is currently being made\r\n               *  Status.CONNFAIL - The connection attempt failed\r\n               *  Status.AUTHENTICATING - The connection is authenticating\r\n               *  Status.AUTHFAIL - The authentication attempt failed\r\n               *  Status.CONNECTED - The connection has succeeded\r\n               *  Status.DISCONNECTED - The connection has been terminated\r\n               *  Status.DISCONNECTING - The connection is currently being terminated\r\n               *  Status.ATTACHED - The connection has been attached\r\n               *  Status.REDIRECT - The connection has been redirected\r\n               *  Status.CONNTIMEOUT - The connection has timed out\r\n               */\r\n              Status: {\r\n                ERROR: 0,\r\n                CONNECTING: 1,\r\n                CONNFAIL: 2,\r\n                AUTHENTICATING: 3,\r\n                AUTHFAIL: 4,\r\n                CONNECTED: 5,\r\n                DISCONNECTED: 6,\r\n                DISCONNECTING: 7,\r\n                ATTACHED: 8,\r\n                REDIRECT: 9,\r\n                CONNTIMEOUT: 10,\r\n                BINDREQUIRED: 11\r\n              },\r\n              ErrorCondition: {\r\n                BAD_FORMAT: \"bad-format\",\r\n                CONFLICT: \"conflict\",\r\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\r\n                NO_AUTH_MECH: \"no-auth-mech\",\r\n                UNKNOWN_REASON: \"unknown\"\r\n              },\r\n\r\n              /** Constants: Log Level Constants\r\n               *  Logging level indicators.\r\n               *\r\n               *  LogLevel.DEBUG - Debug output\r\n               *  LogLevel.INFO - Informational output\r\n               *  LogLevel.WARN - Warnings\r\n               *  LogLevel.ERROR - Errors\r\n               *  LogLevel.FATAL - Fatal errors\r\n               */\r\n              LogLevel: {\r\n                DEBUG: 0,\r\n                INFO: 1,\r\n                WARN: 2,\r\n                ERROR: 3,\r\n                FATAL: 4\r\n              },\r\n\r\n              /** PrivateConstants: DOM Element Type Constants\r\n               *  DOM element types.\r\n               *\r\n               *  ElementType.NORMAL - Normal element.\r\n               *  ElementType.TEXT - Text data element.\r\n               *  ElementType.FRAGMENT - XHTML fragment element.\r\n               */\r\n              ElementType: {\r\n                NORMAL: 1,\r\n                TEXT: 3,\r\n                CDATA: 4,\r\n                FRAGMENT: 11\r\n              },\r\n\r\n              /** PrivateConstants: Timeout Values\r\n               *  Timeout values for error states.  These values are in seconds.\r\n               *  These should not be changed unless you know exactly what you are\r\n               *  doing.\r\n               *\r\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\r\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\r\n               *      This defaults to 1.1, and with default wait, 66 seconds.\r\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\r\n               *      Strophe can detect early failure, it will consider the request\r\n               *      failed if it doesn't return after\r\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\r\n               *      This defaults to 0.1, and with default wait, 6 seconds.\r\n               */\r\n              TIMEOUT: 1.1,\r\n              SECONDARY_TIMEOUT: 0.1,\r\n\r\n              /** Function: addNamespace\r\n               *  This function is used to extend the current namespaces in\r\n               *  Strophe.NS.  It takes a key and a value with the key being the\r\n               *  name of the new namespace, with its actual value.\r\n               *  For example:\r\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\r\n               *\r\n               *  Parameters:\r\n               *    (String) name - The name under which the namespace will be\r\n               *      referenced under Strophe.NS\r\n               *    (String) value - The actual namespace.\r\n               */\r\n              addNamespace: function addNamespace(name, value) {\r\n                Strophe.NS[name] = value;\r\n              },\r\n\r\n              /** Function: forEachChild\r\n               *  Map a function over some or all child elements of a given element.\r\n               *\r\n               *  This is a small convenience function for mapping a function over\r\n               *  some or all of the children of an element.  If elemName is null, all\r\n               *  children will be passed to the function, otherwise only children\r\n               *  whose tag names match elemName will be passed.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The element to operate on.\r\n               *    (String) elemName - The child element tag name filter.\r\n               *    (Function) func - The function to apply to each child.  This\r\n               *      function should take a single argument, a DOM element.\r\n               */\r\n              forEachChild: function forEachChild(elem, elemName, func) {\r\n                for (var i = 0; i < elem.childNodes.length; i++) {\r\n                  var childNode = elem.childNodes[i];\r\n\r\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\r\n                    func(childNode);\r\n                  }\r\n                }\r\n              },\r\n\r\n              /** Function: isTagEqual\r\n               *  Compare an element's tag name with a string.\r\n               *\r\n               *  This function is case sensitive.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) el - A DOM element.\r\n               *    (String) name - The element name.\r\n               *\r\n               *  Returns:\r\n               *    true if the element's tag name matches _el_, and false\r\n               *    otherwise.\r\n               */\r\n              isTagEqual: function isTagEqual(el, name) {\r\n                return el.tagName === name;\r\n              },\r\n\r\n              /** PrivateVariable: _xmlGenerator\r\n               *  _Private_ variable that caches a DOM document to\r\n               *  generate elements.\r\n               */\r\n              _xmlGenerator: null,\r\n\r\n              /** PrivateFunction: _makeGenerator\r\n               *  _Private_ function that creates a dummy XML DOM document to serve as\r\n               *  an element and text node generator.\r\n               */\r\n              _makeGenerator: function _makeGenerator() {\r\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\r\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\r\n                // less than 10 in the case of IE9 and below.\r\n\r\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\r\n                  doc = this._getIEXmlDom();\r\n                  doc.appendChild(doc.createElement('strophe'));\r\n                } else {\r\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\r\n                }\r\n\r\n                return doc;\r\n              },\r\n\r\n              /** Function: xmlGenerator\r\n               *  Get the DOM document to generate elements.\r\n               *\r\n               *  Returns:\r\n               *    The currently used DOM document.\r\n               */\r\n              xmlGenerator: function xmlGenerator() {\r\n                if (!Strophe._xmlGenerator) {\r\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\r\n                }\r\n\r\n                return Strophe._xmlGenerator;\r\n              },\r\n\r\n              /** PrivateFunction: _getIEXmlDom\r\n               *  Gets IE xml doc object\r\n               *\r\n               *  Returns:\r\n               *    A Microsoft XML DOM Object\r\n               *  See Also:\r\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\r\n               */\r\n              _getIEXmlDom: function _getIEXmlDom() {\r\n                var doc = null;\r\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\r\n\r\n                for (var d = 0; d < docStrings.length; d++) {\r\n                  if (doc === null) {\r\n                    try {\r\n                      doc = new ActiveXObject(docStrings[d]);\r\n                    } catch (e) {\r\n                      doc = null;\r\n                    }\r\n                  } else {\r\n                    break;\r\n                  }\r\n                }\r\n\r\n                return doc;\r\n              },\r\n\r\n              /** Function: xmlElement\r\n               *  Create an XML DOM element.\r\n               *\r\n               *  This function creates an XML DOM element correctly across all\r\n               *  implementations. Note that these are not HTML DOM elements, which\r\n               *  aren't appropriate for XMPP stanzas.\r\n               *\r\n               *  Parameters:\r\n               *    (String) name - The name for the element.\r\n               *    (Array|Object) attrs - An optional array or object containing\r\n               *      key/value pairs to use as element attributes. The object should\r\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\r\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\r\n               *    (String) text - The text child data for the element.\r\n               *\r\n               *  Returns:\r\n               *    A new XML DOM element.\r\n               */\r\n              xmlElement: function xmlElement(name) {\r\n                if (!name) {\r\n                  return null;\r\n                }\r\n\r\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\r\n                // there are more than two optional args\r\n\r\n                for (var a = 1; a < arguments.length; a++) {\r\n                  var arg = arguments[a];\r\n\r\n                  if (!arg) {\r\n                    continue;\r\n                  }\r\n\r\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\r\n                    node.appendChild(Strophe.xmlTextNode(arg));\r\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\r\n                    for (var i = 0; i < arg.length; i++) {\r\n                      var attr = arg[i];\r\n\r\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\r\n                        node.setAttribute(attr[0], attr[1]);\r\n                      }\r\n                    }\r\n                  } else if (_typeof(arg) === \"object\") {\r\n                    for (var k in arg) {\r\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\r\n                        node.setAttribute(k, arg[k]);\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n\r\n                return node;\r\n              },\r\n\r\n              /*  Function: xmlescape\r\n               *  Excapes invalid xml characters.\r\n               *\r\n               *  Parameters:\r\n               *     (String) text - text to escape.\r\n               *\r\n               *  Returns:\r\n               *      Escaped text.\r\n               */\r\n              xmlescape: function xmlescape(text) {\r\n                text = text.replace(/\\&/g, \"&amp;\");\r\n                text = text.replace(/</g, \"&lt;\");\r\n                text = text.replace(/>/g, \"&gt;\");\r\n                text = text.replace(/'/g, \"&apos;\");\r\n                text = text.replace(/\"/g, \"&quot;\");\r\n                return text;\r\n              },\r\n\r\n              /*  Function: xmlunescape\r\n              *  Unexcapes invalid xml characters.\r\n              *\r\n              *  Parameters:\r\n              *     (String) text - text to unescape.\r\n              *\r\n              *  Returns:\r\n              *      Unescaped text.\r\n              */\r\n              xmlunescape: function xmlunescape(text) {\r\n                text = text.replace(/\\&amp;/g, \"&\");\r\n                text = text.replace(/&lt;/g, \"<\");\r\n                text = text.replace(/&gt;/g, \">\");\r\n                text = text.replace(/&apos;/g, \"'\");\r\n                text = text.replace(/&quot;/g, \"\\\"\");\r\n                return text;\r\n              },\r\n\r\n              /** Function: xmlTextNode\r\n               *  Creates an XML DOM text node.\r\n               *\r\n               *  Provides a cross implementation version of document.createTextNode.\r\n               *\r\n               *  Parameters:\r\n               *    (String) text - The content of the text node.\r\n               *\r\n               *  Returns:\r\n               *    A new XML DOM text node.\r\n               */\r\n              xmlTextNode: function xmlTextNode(text) {\r\n                return Strophe.xmlGenerator().createTextNode(text);\r\n              },\r\n\r\n              /** Function: xmlHtmlNode\r\n               *  Creates an XML DOM html node.\r\n               *\r\n               *  Parameters:\r\n               *    (String) html - The content of the html node.\r\n               *\r\n               *  Returns:\r\n               *    A new XML DOM text node.\r\n               */\r\n              xmlHtmlNode: function xmlHtmlNode(html) {\r\n                var node; //ensure text is escaped\r\n\r\n                if (DOMParser) {\r\n                  var parser = new DOMParser();\r\n                  node = parser.parseFromString(html, \"text/xml\");\r\n                } else {\r\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\r\n                  node.async = \"false\";\r\n                  node.loadXML(html);\r\n                }\r\n\r\n                return node;\r\n              },\r\n\r\n              /** Function: getText\r\n               *  Get the concatenation of all text children of an element.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - A DOM element.\r\n               *\r\n               *  Returns:\r\n               *    A String with the concatenated text of all text element children.\r\n               */\r\n              getText: function getText(elem) {\r\n                if (!elem) {\r\n                  return null;\r\n                }\r\n\r\n                var str = \"\";\r\n\r\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\r\n                  str += elem.nodeValue;\r\n                }\r\n\r\n                for (var i = 0; i < elem.childNodes.length; i++) {\r\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\r\n                    str += elem.childNodes[i].nodeValue;\r\n                  }\r\n                }\r\n\r\n                return Strophe.xmlescape(str);\r\n              },\r\n\r\n              /** Function: copyElement\r\n               *  Copy an XML DOM element.\r\n               *\r\n               *  This function copies a DOM element and all its descendants and returns\r\n               *  the new copy.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - A DOM element.\r\n               *\r\n               *  Returns:\r\n               *    A new, copied DOM element tree.\r\n               */\r\n              copyElement: function copyElement(elem) {\r\n                var el;\r\n\r\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\r\n                  el = Strophe.xmlElement(elem.tagName);\r\n\r\n                  for (var i = 0; i < elem.attributes.length; i++) {\r\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\r\n                  }\r\n\r\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\r\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\r\n                  }\r\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\r\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\r\n                }\r\n\r\n                return el;\r\n              },\r\n\r\n              /** Function: createHtml\r\n               *  Copy an HTML DOM element into an XML DOM.\r\n               *\r\n               *  This function copies a DOM element and all its descendants and returns\r\n               *  the new copy.\r\n               *\r\n               *  Parameters:\r\n               *    (HTMLElement) elem - A DOM element.\r\n               *\r\n               *  Returns:\r\n               *    A new, copied DOM element tree.\r\n               */\r\n              createHtml: function createHtml(elem) {\r\n                var el;\r\n\r\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\r\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\r\n\r\n                  if (Strophe.XHTML.validTag(tag)) {\r\n                    try {\r\n                      el = Strophe.xmlElement(tag);\r\n\r\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\r\n                        var attribute = Strophe.XHTML.attributes[tag][i];\r\n                        var value = elem.getAttribute(attribute);\r\n\r\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\r\n                          continue;\r\n                        }\r\n\r\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\r\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\r\n                        } // filter out invalid css styles\r\n\r\n\r\n                        if (attribute === 'style') {\r\n                          var css = [];\r\n                          var cssAttrs = value.split(';');\r\n\r\n                          for (var j = 0; j < cssAttrs.length; j++) {\r\n                            var attr = cssAttrs[j].split(':');\r\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\r\n\r\n                            if (Strophe.XHTML.validCSS(cssName)) {\r\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\r\n                              css.push(cssName + ': ' + cssValue);\r\n                            }\r\n                          }\r\n\r\n                          if (css.length > 0) {\r\n                            value = css.join('; ');\r\n                            el.setAttribute(attribute, value);\r\n                          }\r\n                        } else {\r\n                          el.setAttribute(attribute, value);\r\n                        }\r\n                      }\r\n\r\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\r\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\r\n                      }\r\n                    } catch (e) {\r\n                      // invalid elements\r\n                      el = Strophe.xmlTextNode('');\r\n                    }\r\n                  } else {\r\n                    el = Strophe.xmlGenerator().createDocumentFragment();\r\n\r\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\r\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\r\n                    }\r\n                  }\r\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\r\n                  el = Strophe.xmlGenerator().createDocumentFragment();\r\n\r\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\r\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\r\n                  }\r\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\r\n                  el = Strophe.xmlTextNode(elem.nodeValue);\r\n                }\r\n\r\n                return el;\r\n              },\r\n\r\n              /** Function: escapeNode\r\n               *  Escape the node part (also called local part) of a JID.\r\n               *\r\n               *  Parameters:\r\n               *    (String) node - A node (or local part).\r\n               *\r\n               *  Returns:\r\n               *    An escaped node (or local part).\r\n               */\r\n              escapeNode: function escapeNode(node) {\r\n                if (typeof node !== \"string\") {\r\n                  return node;\r\n                }\r\n\r\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\r\n              },\r\n\r\n              /** Function: unescapeNode\r\n               *  Unescape a node part (also called local part) of a JID.\r\n               *\r\n               *  Parameters:\r\n               *    (String) node - A node (or local part).\r\n               *\r\n               *  Returns:\r\n               *    An unescaped node (or local part).\r\n               */\r\n              unescapeNode: function unescapeNode(node) {\r\n                if (typeof node !== \"string\") {\r\n                  return node;\r\n                }\r\n\r\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\r\n              },\r\n\r\n              /** Function: getNodeFromJid\r\n               *  Get the node portion of a JID String.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - A JID.\r\n               *\r\n               *  Returns:\r\n               *    A String containing the node.\r\n               */\r\n              getNodeFromJid: function getNodeFromJid(jid) {\r\n                if (jid.indexOf(\"@\") < 0) {\r\n                  return null;\r\n                }\r\n\r\n                return jid.split(\"@\")[0];\r\n              },\r\n\r\n              /** Function: getDomainFromJid\r\n               *  Get the domain portion of a JID String.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - A JID.\r\n               *\r\n               *  Returns:\r\n               *    A String containing the domain.\r\n               */\r\n              getDomainFromJid: function getDomainFromJid(jid) {\r\n                var bare = Strophe.getBareJidFromJid(jid);\r\n\r\n                if (bare.indexOf(\"@\") < 0) {\r\n                  return bare;\r\n                } else {\r\n                  var parts = bare.split(\"@\");\r\n                  parts.splice(0, 1);\r\n                  return parts.join('@');\r\n                }\r\n              },\r\n\r\n              /** Function: getResourceFromJid\r\n               *  Get the resource portion of a JID String.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - A JID.\r\n               *\r\n               *  Returns:\r\n               *    A String containing the resource.\r\n               */\r\n              getResourceFromJid: function getResourceFromJid(jid) {\r\n                if (!jid) {\r\n                  return null;\r\n                }\r\n\r\n                var s = jid.split(\"/\");\r\n\r\n                if (s.length < 2) {\r\n                  return null;\r\n                }\r\n\r\n                s.splice(0, 1);\r\n                return s.join('/');\r\n              },\r\n\r\n              /** Function: getBareJidFromJid\r\n               *  Get the bare JID from a JID String.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - A JID.\r\n               *\r\n               *  Returns:\r\n               *    A String containing the bare JID.\r\n               */\r\n              getBareJidFromJid: function getBareJidFromJid(jid) {\r\n                return jid ? jid.split(\"/\")[0] : null;\r\n              },\r\n\r\n              /** PrivateFunction: _handleError\r\n               *  _Private_ function that properly logs an error to the console\r\n               */\r\n              _handleError: function _handleError(e) {\r\n                if (typeof e.stack !== \"undefined\") {\r\n                  Strophe.fatal(e.stack);\r\n                }\r\n\r\n                if (e.sourceURL) {\r\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\r\n                } else if (e.fileName) {\r\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\r\n                } else {\r\n                  Strophe.fatal(\"error: \" + e.message);\r\n                }\r\n              },\r\n\r\n              /** Function: log\r\n               *  User overrideable logging function.\r\n               *\r\n               *  This function is called whenever the Strophe library calls any\r\n               *  of the logging functions.  The default implementation of this\r\n               *  function logs only fatal errors.  If client code wishes to handle the logging\r\n               *  messages, it should override this with\r\n               *  > Strophe.log = function (level, msg) {\r\n               *  >   (user code here)\r\n               *  > };\r\n               *\r\n               *  Please note that data sent and received over the wire is logged\r\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\r\n               *\r\n               *  The different levels and their meanings are\r\n               *\r\n               *    DEBUG - Messages useful for debugging purposes.\r\n               *    INFO - Informational messages.  This is mostly information like\r\n               *      'disconnect was called' or 'SASL auth succeeded'.\r\n               *    WARN - Warnings about potential problems.  This is mostly used\r\n               *      to report transient connection errors like request timeouts.\r\n               *    ERROR - Some error occurred.\r\n               *    FATAL - A non-recoverable fatal error occurred.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) level - The log level of the log message.  This will\r\n               *      be one of the values in Strophe.LogLevel.\r\n               *    (String) msg - The log message.\r\n               */\r\n              log: function log(level, msg) {\r\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\r\n                  window.console.error(msg);\r\n                }\r\n              },\r\n\r\n              /** Function: debug\r\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\r\n               *\r\n               *  Parameters:\r\n               *    (String) msg - The log message.\r\n               */\r\n              debug: function debug(msg) {\r\n                this.log(this.LogLevel.DEBUG, msg);\r\n              },\r\n\r\n              /** Function: info\r\n               *  Log a message at the Strophe.LogLevel.INFO level.\r\n               *\r\n               *  Parameters:\r\n               *    (String) msg - The log message.\r\n               */\r\n              info: function info(msg) {\r\n                this.log(this.LogLevel.INFO, msg);\r\n              },\r\n\r\n              /** Function: warn\r\n               *  Log a message at the Strophe.LogLevel.WARN level.\r\n               *\r\n               *  Parameters:\r\n               *    (String) msg - The log message.\r\n               */\r\n              warn: function warn(msg) {\r\n                this.log(this.LogLevel.WARN, msg);\r\n              },\r\n\r\n              /** Function: error\r\n               *  Log a message at the Strophe.LogLevel.ERROR level.\r\n               *\r\n               *  Parameters:\r\n               *    (String) msg - The log message.\r\n               */\r\n              error: function error(msg) {\r\n                this.log(this.LogLevel.ERROR, msg);\r\n              },\r\n\r\n              /** Function: fatal\r\n               *  Log a message at the Strophe.LogLevel.FATAL level.\r\n               *\r\n               *  Parameters:\r\n               *    (String) msg - The log message.\r\n               */\r\n              fatal: function fatal(msg) {\r\n                this.log(this.LogLevel.FATAL, msg);\r\n              },\r\n\r\n              /** Function: serialize\r\n               *  Render a DOM element and all descendants to a String.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - A DOM element.\r\n               *\r\n               *  Returns:\r\n               *    The serialized element tree as a String.\r\n               */\r\n              serialize: function serialize(elem) {\r\n                if (!elem) {\r\n                  return null;\r\n                }\r\n\r\n                if (typeof elem.tree === \"function\") {\r\n                  elem = elem.tree();\r\n                }\r\n\r\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\r\n                  return elem.attributes[i].nodeName;\r\n                });\r\n\r\n                names.sort();\r\n                var result = names.reduce(function (a, n) {\r\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\r\n                }, \"<\".concat(elem.nodeName));\r\n\r\n                if (elem.childNodes.length > 0) {\r\n                  result += \">\";\r\n\r\n                  for (var i = 0; i < elem.childNodes.length; i++) {\r\n                    var child = elem.childNodes[i];\r\n\r\n                    switch (child.nodeType) {\r\n                      case Strophe.ElementType.NORMAL:\r\n                        // normal element, so recurse\r\n                        result += Strophe.serialize(child);\r\n                        break;\r\n\r\n                      case Strophe.ElementType.TEXT:\r\n                        // text element to escape values\r\n                        result += Strophe.xmlescape(child.nodeValue);\r\n                        break;\r\n\r\n                      case Strophe.ElementType.CDATA:\r\n                        // cdata section so don't escape values\r\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\r\n                    }\r\n                  }\r\n\r\n                  result += \"</\" + elem.nodeName + \">\";\r\n                } else {\r\n                  result += \"/>\";\r\n                }\r\n\r\n                return result;\r\n              },\r\n\r\n              /** PrivateVariable: _requestId\r\n               *  _Private_ variable that keeps track of the request ids for\r\n               *  connections.\r\n               */\r\n              _requestId: 0,\r\n\r\n              /** PrivateVariable: Strophe.connectionPlugins\r\n               *  _Private_ variable Used to store plugin names that need\r\n               *  initialization on Strophe.Connection construction.\r\n               */\r\n              _connectionPlugins: {},\r\n\r\n              /** Function: addConnectionPlugin\r\n               *  Extends the Strophe.Connection object with the given plugin.\r\n               *\r\n               *  Parameters:\r\n               *    (String) name - The name of the extension.\r\n               *    (Object) ptype - The plugin's prototype.\r\n               */\r\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\r\n                Strophe._connectionPlugins[name] = ptype;\r\n              }\r\n            };\r\n            /** Class: Strophe.Builder\r\n             *  XML DOM builder.\r\n             *\r\n             *  This object provides an interface similar to JQuery but for building\r\n             *  DOM elements easily and rapidly.  All the functions except for toString()\r\n             *  and tree() return the object, so calls can be chained.  Here's an\r\n             *  example using the $iq() builder helper.\r\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\r\n             *  >     .c('query', {xmlns: 'strophe:example'})\r\n             *  >     .c('example')\r\n             *  >     .toString()\r\n             *\r\n             *  The above generates this XML fragment\r\n             *  > <iq to='you' from='me' type='get' id='1'>\r\n             *  >   <query xmlns='strophe:example'>\r\n             *  >     <example/>\r\n             *  >   </query>\r\n             *  > </iq>\r\n             *  The corresponding DOM manipulations to get a similar fragment would be\r\n             *  a lot more tedious and probably involve several helper variables.\r\n             *\r\n             *  Since adding children makes new operations operate on the child, up()\r\n             *  is provided to traverse up the tree.  To add two children, do\r\n             *  > builder.c('child1', ...).up().c('child2', ...)\r\n             *  The next operation on the Builder will be relative to the second child.\r\n             */\r\n\r\n            /** Constructor: Strophe.Builder\r\n             *  Create a Strophe.Builder object.\r\n             *\r\n             *  The attributes should be passed in object notation.  For example\r\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\r\n             *  or\r\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\r\n             *\r\n             *  Parameters:\r\n             *    (String) name - The name of the root element.\r\n             *    (Object) attrs - The attributes for the root element in object notation.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Builder.\r\n             */\r\n\r\n            Strophe.Builder = function (name, attrs) {\r\n              // Set correct namespace for jabber:client elements\r\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\r\n                if (attrs && !attrs.xmlns) {\r\n                  attrs.xmlns = Strophe.NS.CLIENT;\r\n                } else if (!attrs) {\r\n                  attrs = {\r\n                    xmlns: Strophe.NS.CLIENT\r\n                  };\r\n                }\r\n              } // Holds the tree being built.\r\n\r\n\r\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\r\n\r\n              this.node = this.nodeTree;\r\n            };\r\n\r\n            Strophe.Builder.prototype = {\r\n              /** Function: tree\r\n               *  Return the DOM tree.\r\n               *\r\n               *  This function returns the current DOM tree as an element object.  This\r\n               *  is suitable for passing to functions like Strophe.Connection.send().\r\n               *\r\n               *  Returns:\r\n               *    The DOM tree as a element object.\r\n               */\r\n              tree: function tree() {\r\n                return this.nodeTree;\r\n              },\r\n\r\n              /** Function: toString\r\n               *  Serialize the DOM tree to a String.\r\n               *\r\n               *  This function returns a string serialization of the current DOM\r\n               *  tree.  It is often used internally to pass data to a\r\n               *  Strophe.Request object.\r\n               *\r\n               *  Returns:\r\n               *    The serialized DOM tree in a String.\r\n               */\r\n              toString: function toString() {\r\n                return Strophe.serialize(this.nodeTree);\r\n              },\r\n\r\n              /** Function: up\r\n               *  Make the current parent element the new current element.\r\n               *\r\n               *  This function is often used after c() to traverse back up the tree.\r\n               *  For example, to add two children to the same element\r\n               *  > builder.c('child1', {}).up().c('child2', {});\r\n               *\r\n               *  Returns:\r\n               *    The Stophe.Builder object.\r\n               */\r\n              up: function up() {\r\n                this.node = this.node.parentNode;\r\n                return this;\r\n              },\r\n\r\n              /** Function: root\r\n               *  Make the root element the new current element.\r\n               *\r\n               *  When at a deeply nested element in the tree, this function can be used\r\n               *  to jump back to the root of the tree, instead of having to repeatedly\r\n               *  call up().\r\n               *\r\n               *  Returns:\r\n               *    The Stophe.Builder object.\r\n               */\r\n              root: function root() {\r\n                this.node = this.nodeTree;\r\n                return this;\r\n              },\r\n\r\n              /** Function: attrs\r\n               *  Add or modify attributes of the current element.\r\n               *\r\n               *  The attributes should be passed in object notation.  This function\r\n               *  does not move the current element pointer.\r\n               *\r\n               *  Parameters:\r\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\r\n               *\r\n               *  Returns:\r\n               *    The Strophe.Builder object.\r\n               */\r\n              attrs: function attrs(moreattrs) {\r\n                for (var k in moreattrs) {\r\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\r\n                    if (moreattrs[k] === undefined) {\r\n                      this.node.removeAttribute(k);\r\n                    } else {\r\n                      this.node.setAttribute(k, moreattrs[k]);\r\n                    }\r\n                  }\r\n                }\r\n\r\n                return this;\r\n              },\r\n\r\n              /** Function: c\r\n               *  Add a child to the current element and make it the new current\r\n               *  element.\r\n               *\r\n               *  This function moves the current element pointer to the child,\r\n               *  unless text is provided.  If you need to add another child, it\r\n               *  is necessary to use up() to go back to the parent in the tree.\r\n               *\r\n               *  Parameters:\r\n               *    (String) name - The name of the child.\r\n               *    (Object) attrs - The attributes of the child in object notation.\r\n               *    (String) text - The text to add to the child.\r\n               *\r\n               *  Returns:\r\n               *    The Strophe.Builder object.\r\n               */\r\n              c: function c(name, attrs, text) {\r\n                var child = Strophe.xmlElement(name, attrs, text);\r\n                this.node.appendChild(child);\r\n\r\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\r\n                  this.node = child;\r\n                }\r\n\r\n                return this;\r\n              },\r\n\r\n              /** Function: cnode\r\n               *  Add a child to the current element and make it the new current\r\n               *  element.\r\n               *\r\n               *  This function is the same as c() except that instead of using a\r\n               *  name and an attributes object to create the child it uses an\r\n               *  existing DOM element object.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - A DOM element.\r\n               *\r\n               *  Returns:\r\n               *    The Strophe.Builder object.\r\n               */\r\n              cnode: function cnode(elem) {\r\n                var impNode;\r\n                var xmlGen = Strophe.xmlGenerator();\r\n\r\n                try {\r\n                  impNode = xmlGen.importNode !== undefined;\r\n                } catch (e) {\r\n                  impNode = false;\r\n                }\r\n\r\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\r\n                this.node.appendChild(newElem);\r\n                this.node = newElem;\r\n                return this;\r\n              },\r\n\r\n              /** Function: t\r\n               *  Add a child text element.\r\n               *\r\n               *  This *does not* make the child the new current element since there\r\n               *  are no children of text elements.\r\n               *\r\n               *  Parameters:\r\n               *    (String) text - The text data to append to the current element.\r\n               *\r\n               *  Returns:\r\n               *    The Strophe.Builder object.\r\n               */\r\n              t: function t(text) {\r\n                var child = Strophe.xmlTextNode(text);\r\n                this.node.appendChild(child);\r\n                return this;\r\n              },\r\n\r\n              /** Function: h\r\n               *  Replace current element contents with the HTML passed in.\r\n               *\r\n               *  This *does not* make the child the new current element\r\n               *\r\n               *  Parameters:\r\n               *    (String) html - The html to insert as contents of current element.\r\n               *\r\n               *  Returns:\r\n               *    The Strophe.Builder object.\r\n               */\r\n              h: function h(html) {\r\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\r\n\r\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\r\n\r\n                var xhtml = Strophe.createHtml(fragment);\r\n\r\n                while (xhtml.childNodes.length > 0) {\r\n                  this.node.appendChild(xhtml.childNodes[0]);\r\n                }\r\n\r\n                return this;\r\n              }\r\n            };\r\n            /** PrivateClass: Strophe.Handler\r\n             *  _Private_ helper class for managing stanza handlers.\r\n             *\r\n             *  A Strophe.Handler encapsulates a user provided callback function to be\r\n             *  executed when matching stanzas are received by the connection.\r\n             *  Handlers can be either one-off or persistant depending on their\r\n             *  return value. Returning true will cause a Handler to remain active, and\r\n             *  returning false will remove the Handler.\r\n             *\r\n             *  Users will not use Strophe.Handler objects directly, but instead they\r\n             *  will use Strophe.Connection.addHandler() and\r\n             *  Strophe.Connection.deleteHandler().\r\n             */\r\n\r\n            /** PrivateConstructor: Strophe.Handler\r\n             *  Create and initialize a new Strophe.Handler.\r\n             *\r\n             *  Parameters:\r\n             *    (Function) handler - A function to be executed when the handler is run.\r\n             *    (String) ns - The namespace to match.\r\n             *    (String) name - The element name to match.\r\n             *    (String) type - The element type to match.\r\n             *    (String) id - The element id attribute to match.\r\n             *    (String) from - The element from attribute to match.\r\n             *    (Object) options - Handler options\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Handler object.\r\n             */\r\n\r\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\r\n              this.handler = handler;\r\n              this.ns = ns;\r\n              this.name = name;\r\n              this.type = type;\r\n              this.id = id;\r\n              this.options = options || {\r\n                'matchBareFromJid': false,\r\n                'ignoreNamespaceFragment': false\r\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\r\n\r\n              if (this.options.matchBare) {\r\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\r\n                this.options.matchBareFromJid = this.options.matchBare;\r\n                delete this.options.matchBare;\r\n              }\r\n\r\n              if (this.options.matchBareFromJid) {\r\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\r\n              } else {\r\n                this.from = from;\r\n              } // whether the handler is a user handler or a system handler\r\n\r\n\r\n              this.user = true;\r\n            };\r\n\r\n            Strophe.Handler.prototype = {\r\n              /** PrivateFunction: getNamespace\r\n               *  Returns the XML namespace attribute on an element.\r\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\r\n               *  URL fragment will be stripped.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The XML element with the namespace.\r\n               *\r\n               *  Returns:\r\n               *    The namespace, with optionally the fragment stripped.\r\n               */\r\n              getNamespace: function getNamespace(elem) {\r\n                var elNamespace = elem.getAttribute(\"xmlns\");\r\n\r\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\r\n                  elNamespace = elNamespace.split('#')[0];\r\n                }\r\n\r\n                return elNamespace;\r\n              },\r\n\r\n              /** PrivateFunction: namespaceMatch\r\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The XML element to test.\r\n               *\r\n               *  Returns:\r\n               *    true if the stanza matches and false otherwise.\r\n               */\r\n              namespaceMatch: function namespaceMatch(elem) {\r\n                var _this = this;\r\n\r\n                var nsMatch = false;\r\n\r\n                if (!this.ns) {\r\n                  return true;\r\n                } else {\r\n                  Strophe.forEachChild(elem, null, function (elem) {\r\n                    if (_this.getNamespace(elem) === _this.ns) {\r\n                      nsMatch = true;\r\n                    }\r\n                  });\r\n                  return nsMatch || this.getNamespace(elem) === this.ns;\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: isMatch\r\n               *  Tests if a stanza matches the Strophe.Handler.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The XML element to test.\r\n               *\r\n               *  Returns:\r\n               *    true if the stanza matches and false otherwise.\r\n               */\r\n              isMatch: function isMatch(elem) {\r\n                var from = elem.getAttribute('from');\r\n\r\n                if (this.options.matchBareFromJid) {\r\n                  from = Strophe.getBareJidFromJid(from);\r\n                }\r\n\r\n                var elem_type = elem.getAttribute(\"type\");\r\n\r\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\r\n                  return true;\r\n                }\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: run\r\n               *  Run the callback on a matching stanza.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The DOM element that triggered the\r\n               *      Strophe.Handler.\r\n               *\r\n               *  Returns:\r\n               *    A boolean indicating if the handler should remain active.\r\n               */\r\n              run: function run(elem) {\r\n                var result = null;\r\n\r\n                try {\r\n                  result = this.handler(elem);\r\n                } catch (e) {\r\n                  Strophe._handleError(e);\r\n\r\n                  throw e;\r\n                }\r\n\r\n                return result;\r\n              },\r\n\r\n              /** PrivateFunction: toString\r\n               *  Get a String representation of the Strophe.Handler object.\r\n               *\r\n               *  Returns:\r\n               *    A String.\r\n               */\r\n              toString: function toString() {\r\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\r\n              }\r\n            };\r\n            /** PrivateClass: Strophe.TimedHandler\r\n             *  _Private_ helper class for managing timed handlers.\r\n             *\r\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\r\n             *  should be called after a certain period of time or at regular\r\n             *  intervals.  The return value of the callback determines whether the\r\n             *  Strophe.TimedHandler will continue to fire.\r\n             *\r\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\r\n             *  they will use Strophe.Connection.addTimedHandler() and\r\n             *  Strophe.Connection.deleteTimedHandler().\r\n             */\r\n\r\n            /** PrivateConstructor: Strophe.TimedHandler\r\n             *  Create and initialize a new Strophe.TimedHandler object.\r\n             *\r\n             *  Parameters:\r\n             *    (Integer) period - The number of milliseconds to wait before the\r\n             *      handler is called.\r\n             *    (Function) handler - The callback to run when the handler fires.  This\r\n             *      function should take no arguments.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.TimedHandler object.\r\n             */\r\n\r\n            Strophe.TimedHandler = function (period, handler) {\r\n              this.period = period;\r\n              this.handler = handler;\r\n              this.lastCalled = new Date().getTime();\r\n              this.user = true;\r\n            };\r\n\r\n            Strophe.TimedHandler.prototype = {\r\n              /** PrivateFunction: run\r\n               *  Run the callback for the Strophe.TimedHandler.\r\n               *\r\n               *  Returns:\r\n               *    true if the Strophe.TimedHandler should be called again, and false\r\n               *      otherwise.\r\n               */\r\n              run: function run() {\r\n                this.lastCalled = new Date().getTime();\r\n                return this.handler();\r\n              },\r\n\r\n              /** PrivateFunction: reset\r\n               *  Reset the last called time for the Strophe.TimedHandler.\r\n               */\r\n              reset: function reset() {\r\n                this.lastCalled = new Date().getTime();\r\n              },\r\n\r\n              /** PrivateFunction: toString\r\n               *  Get a string representation of the Strophe.TimedHandler object.\r\n               *\r\n               *  Returns:\r\n               *    The string representation.\r\n               */\r\n              toString: function toString() {\r\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\r\n              }\r\n            };\r\n            /** Class: Strophe.Connection\r\n             *  XMPP Connection manager.\r\n             *\r\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\r\n             *  connection to an XMPP server and dispatches events to the user callbacks\r\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\r\n             *  and legacy authentication.\r\n             *\r\n             *  After creating a Strophe.Connection object, the user will typically\r\n             *  call connect() with a user supplied callback to handle connection level\r\n             *  events like authentication failure, disconnection, or connection\r\n             *  complete.\r\n             *\r\n             *  The user will also have several event handlers defined by using\r\n             *  addHandler() and addTimedHandler().  These will allow the user code to\r\n             *  respond to interesting stanzas or do something periodically with the\r\n             *  connection. These handlers will be active once authentication is\r\n             *  finished.\r\n             *\r\n             *  To send data to the connection, use send().\r\n             */\r\n\r\n            /** Constructor: Strophe.Connection\r\n             *  Create and initialize a Strophe.Connection object.\r\n             *\r\n             *  The transport-protocol for this connection will be chosen automatically\r\n             *  based on the given service parameter. URLs starting with \"ws://\" or\r\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\r\n             *  or without a protocol will use BOSH.\r\n             *\r\n             *  To make Strophe connect to the current host you can leave out the protocol\r\n             *  and host part and just pass the path, e.g.\r\n             *\r\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\r\n             *\r\n             *  Options common to both Websocket and BOSH:\r\n             *  ------------------------------------------\r\n             *\r\n             *  cookies:\r\n             *\r\n             *  The *cookies* option allows you to pass in cookies to be added to the\r\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\r\n             *  or in the websocket connection.\r\n             *\r\n             *  The passed in value must be a map of cookie names and string values.\r\n             *\r\n             *  > { \"myCookie\": {\r\n             *  >     \"value\": \"1234\",\r\n             *  >     \"domain\": \".example.org\",\r\n             *  >     \"path\": \"/\",\r\n             *  >     \"expires\": expirationDate\r\n             *  >     }\r\n             *  > }\r\n             *\r\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\r\n             *  Those cookies need to be set under those domains, for example they can be\r\n             *  set server-side by making a XHR call to that domain to ask it to set any\r\n             *  necessary cookies.\r\n             *\r\n             *  mechanisms:\r\n             *\r\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\r\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\r\n             *  support.\r\n             *\r\n             *  The value must be an array of objects with Strophe.SASLMechanism\r\n             *  prototypes.\r\n             *\r\n             *  If nothing is specified, then the following mechanisms (and their\r\n             *  priorities) are registered:\r\n             *\r\n             *      SCRAM-SHA1 - 70\r\n             *      DIGEST-MD5 - 60\r\n             *      PLAIN - 50\r\n             *      OAUTH-BEARER - 40\r\n             *      OAUTH-2 - 30\r\n             *      ANONYMOUS - 20\r\n             *      EXTERNAL - 10\r\n             *\r\n             *  explicitResourceBinding:\r\n             *\r\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\r\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\r\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\r\n             *\r\n             *  Making this step explicit allows client authors to first finish other\r\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\r\n             *  session, before binding the JID resource for this session.\r\n             *\r\n             *  WebSocket options:\r\n             *  ------------------\r\n             *\r\n             *  If you want to connect to the current host with a WebSocket connection you\r\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\r\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\r\n             *  for Secure WebSocket.\r\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\r\n             *\r\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\r\n             *\r\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\r\n             *  of the current site.\r\n             *\r\n             *  Also because downgrading security is not permitted by browsers, when using\r\n             *  relative URLs both BOSH and WebSocket connections will use their secure\r\n             *  variants if the current connection to the site is also secure (https).\r\n             *\r\n             *  BOSH options:\r\n             *  -------------\r\n             *\r\n             *  By adding \"sync\" to the options, you can control if requests will\r\n             *  be made synchronously or not. The default behaviour is asynchronous.\r\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\r\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\r\n             *\r\n             *  You can also toggle this on an already established connection.\r\n             *  > conn.options.sync = true;\r\n             *\r\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\r\n             *  included in the XMLHttpRequests made.\r\n             *\r\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\r\n             *  current BOSH session across interruptions such as webpage reloads.\r\n             *\r\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\r\n             *  \"restore\" is called it will check whether there are cached tokens with\r\n             *  which it can resume an existing session.\r\n             *\r\n             *  The *withCredentials* option should receive a Boolean value and is used to\r\n             *  indicate wether cookies should be included in ajax requests (by default\r\n             *  they're not).\r\n             *  Set this value to true if you are connecting to a BOSH service\r\n             *  and for some reason need to send cookies to it.\r\n             *  In order for this to work cross-domain, the server must also enable\r\n             *  credentials by setting the Access-Control-Allow-Credentials response header\r\n             *  to \"true\". For most usecases however this setting should be false (which\r\n             *  is the default).\r\n             *  Additionally, when using Access-Control-Allow-Credentials, the\r\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\r\n             *  instead must be restricted to actual domains.\r\n             *\r\n             *  The *contentType* option can be set to change the default Content-Type\r\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\r\n             *  CORS preflight requests that are sent to the server.\r\n             *\r\n             *  Parameters:\r\n             *    (String) service - The BOSH or WebSocket service URL.\r\n             *    (Object) options - A hash of configuration options\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Connection object.\r\n             */\r\n\r\n            Strophe.Connection = function (service, options) {\r\n              var _this2 = this;\r\n\r\n              // The service URL\r\n              this.service = service; // Configuration options\r\n\r\n              this.options = options || {};\r\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\r\n\r\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\r\n                this._proto = new Strophe.Websocket(this);\r\n              } else {\r\n                this._proto = new Strophe.Bosh(this);\r\n              }\r\n              /* The connected JID. */\r\n\r\n\r\n              this.jid = \"\";\r\n              /* the JIDs domain */\r\n\r\n              this.domain = null;\r\n              /* stream:features */\r\n\r\n              this.features = null; // SASL\r\n\r\n              this._sasl_data = {};\r\n              this.do_session = false;\r\n              this.do_bind = false; // handler lists\r\n\r\n              this.timedHandlers = [];\r\n              this.handlers = [];\r\n              this.removeTimeds = [];\r\n              this.removeHandlers = [];\r\n              this.addTimeds = [];\r\n              this.addHandlers = [];\r\n              this.protocolErrorHandlers = {\r\n                'HTTP': {},\r\n                'websocket': {}\r\n              };\r\n              this._idleTimeout = null;\r\n              this._disconnectTimeout = null;\r\n              this.authenticated = false;\r\n              this.connected = false;\r\n              this.disconnecting = false;\r\n              this.do_authentication = true;\r\n              this.paused = false;\r\n              this.restored = false;\r\n              this._data = [];\r\n              this._uniqueId = 0;\r\n              this._sasl_success_handler = null;\r\n              this._sasl_failure_handler = null;\r\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\r\n\r\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\r\n\r\n              this._idleTimeout = setTimeout(function () {\r\n                return _this2._onIdle();\r\n              }, 100);\r\n              utils.addCookies(this.options.cookies);\r\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\r\n\r\n              for (var k in Strophe._connectionPlugins) {\r\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\r\n                  var F = function F() {};\r\n\r\n                  F.prototype = Strophe._connectionPlugins[k];\r\n                  this[k] = new F();\r\n                  this[k].init(this);\r\n                }\r\n              }\r\n            };\r\n\r\n            Strophe.Connection.prototype = {\r\n              /** Function: reset\r\n               *  Reset the connection.\r\n               *\r\n               *  This function should be called after a connection is disconnected\r\n               *  before that connection is reused.\r\n               */\r\n              reset: function reset() {\r\n                this._proto._reset(); // SASL\r\n\r\n\r\n                this.do_session = false;\r\n                this.do_bind = false; // handler lists\r\n\r\n                this.timedHandlers = [];\r\n                this.handlers = [];\r\n                this.removeTimeds = [];\r\n                this.removeHandlers = [];\r\n                this.addTimeds = [];\r\n                this.addHandlers = [];\r\n                this.authenticated = false;\r\n                this.connected = false;\r\n                this.disconnecting = false;\r\n                this.restored = false;\r\n                this._data = [];\r\n                this._requests = [];\r\n                this._uniqueId = 0;\r\n              },\r\n\r\n              /** Function: pause\r\n               *  Pause the request manager.\r\n               *\r\n               *  This will prevent Strophe from sending any more requests to the\r\n               *  server.  This is very useful for temporarily pausing\r\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\r\n               *  This causes Strophe to send the data in a single request, saving\r\n               *  many request trips.\r\n               */\r\n              pause: function pause() {\r\n                this.paused = true;\r\n              },\r\n\r\n              /** Function: resume\r\n               *  Resume the request manager.\r\n               *\r\n               *  This resumes after pause() has been called.\r\n               */\r\n              resume: function resume() {\r\n                this.paused = false;\r\n              },\r\n\r\n              /** Function: getUniqueId\r\n               *  Generate a unique ID for use in <iq/> elements.\r\n               *\r\n               *  All <iq/> stanzas are required to have unique id attributes.  This\r\n               *  function makes creating these easy.  Each connection instance has\r\n               *  a counter which starts from zero, and the value of this counter\r\n               *  plus a colon followed by the suffix becomes the unique id. If no\r\n               *  suffix is supplied, the counter is used as the unique id.\r\n               *\r\n               *  Suffixes are used to make debugging easier when reading the stream\r\n               *  data, and their use is recommended.  The counter resets to 0 for\r\n               *  every new connection for the same reason.  For connections to the\r\n               *  same server that authenticate the same way, all the ids should be\r\n               *  the same, which makes it easy to see changes.  This is useful for\r\n               *  automated testing as well.\r\n               *\r\n               *  Parameters:\r\n               *    (String) suffix - A optional suffix to append to the id.\r\n               *\r\n               *  Returns:\r\n               *    A unique string to be used for the id attribute.\r\n               */\r\n              getUniqueId: function getUniqueId(suffix) {\r\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n                  var r = Math.random() * 16 | 0,\r\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\r\n                  return v.toString(16);\r\n                });\r\n\r\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\r\n                  return uuid + \":\" + suffix;\r\n                } else {\r\n                  return uuid + \"\";\r\n                }\r\n              },\r\n\r\n              /** Function: addProtocolErrorHandler\r\n               *  Register a handler function for when a protocol (websocker or HTTP)\r\n               *  error occurs.\r\n               *\r\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\r\n               *  Patches that handle websocket errors would be very welcome.\r\n               *\r\n               *  Parameters:\r\n               *    (String) protocol - 'HTTP' or 'websocket'\r\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\r\n               *    (Function) callback - Function that will fire on Http error\r\n               *\r\n               *  Example:\r\n               *  function onError(err_code){\r\n               *    //do stuff\r\n               *  }\r\n               *\r\n               *  let conn = Strophe.connect('http://example.com/http-bind');\r\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\r\n               *  // Triggers HTTP 500 error and onError handler will be called\r\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\r\n               */\r\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\r\n                this.protocolErrorHandlers[protocol][status_code] = callback;\r\n              },\r\n\r\n              /** Function: connect\r\n               *  Starts the connection process.\r\n               *\r\n               *  As the connection process proceeds, the user supplied callback will\r\n               *  be triggered multiple times with status updates.  The callback\r\n               *  should take two arguments - the status code and the error condition.\r\n               *\r\n               *  The status code will be one of the values in the Strophe.Status\r\n               *  constants.  The error condition will be one of the conditions\r\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\r\n               *\r\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\r\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\r\n               *  of the optional parameters.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - The user's JID.  This may be a bare JID,\r\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\r\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\r\n               *      process the provided password value as an access token).\r\n               *    (String) pass - The user's password.\r\n               *    (Function) callback - The connect callback function.\r\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n               *      time the server will wait before returning an empty result for\r\n               *      a request.  The default setting of 60 seconds is recommended.\r\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n               *      number of connections the server will hold at one time.  This\r\n               *      should almost always be set to 1 (the default).\r\n               *    (String) route - The optional route value.\r\n               *    (String) authcid - The optional alternative authentication identity\r\n               *      (username) if intending to impersonate another user.\r\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\r\n               *      with client certificates, then the authcid value is used to\r\n               *      determine whether an authorization JID (authzid) should be sent to\r\n               *      the server. The authzid should not be sent to the server if the\r\n               *      authzid and authcid are the same. So to prevent it from being sent\r\n               *      (for example when the JID is already contained in the client\r\n               *      certificate), set authcid to that same JID. See XEP-178 for more\r\n               *      details.\r\n               */\r\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\r\n                this.jid = jid;\r\n                /** Variable: authzid\r\n                 *  Authorization identity.\r\n                 */\r\n\r\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\r\n                /** Variable: authcid\r\n                 *  Authentication identity (User name).\r\n                 */\r\n\r\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\r\n                /** Variable: pass\r\n                 *  Authentication identity (User password).\r\n                 */\r\n\r\n                this.pass = pass;\r\n                /** Variable: servtype\r\n                 *  Digest MD5 compatibility.\r\n                 */\r\n\r\n                this.servtype = \"xmpp\";\r\n                this.connect_callback = callback;\r\n                this.disconnecting = false;\r\n                this.connected = false;\r\n                this.authenticated = false;\r\n                this.restored = false; // parse jid for domain\r\n\r\n                this.domain = Strophe.getDomainFromJid(this.jid);\r\n\r\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\r\n\r\n                this._proto._connect(wait, hold, route);\r\n              },\r\n\r\n              /** Function: attach\r\n               *  Attach to an already created and authenticated BOSH session.\r\n               *\r\n               *  This function is provided to allow Strophe to attach to BOSH\r\n               *  sessions which have been created externally, perhaps by a Web\r\n               *  application.  This is often used to support auto-login type features\r\n               *  without putting user credentials into the page.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - The full JID that is bound by the session.\r\n               *    (String) sid - The SID of the BOSH session.\r\n               *    (String) rid - The current RID of the BOSH session.  This RID\r\n               *      will be used by the next request.\r\n               *    (Function) callback The connect callback function.\r\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n               *      time the server will wait before returning an empty result for\r\n               *      a request.  The default setting of 60 seconds is recommended.\r\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\r\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n               *      number of connections the server will hold at one time.  This\r\n               *      should almost always be set to 1 (the default).\r\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n               *      allowed range of request ids that are valid.  The default is 5.\r\n               */\r\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\r\n                if (this._proto instanceof Strophe.Bosh) {\r\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\r\n                } else {\r\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\r\n                  error.name = 'StropheSessionError';\r\n                  throw error;\r\n                }\r\n              },\r\n\r\n              /** Function: restore\r\n               *  Attempt to restore a cached BOSH session.\r\n               *\r\n               *  This function is only useful in conjunction with providing the\r\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\r\n               *\r\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\r\n               *  RID (Request ID) and SID (Session ID) and then when this function is\r\n               *  called, it will attempt to restore the session from those cached\r\n               *  tokens.\r\n               *\r\n               *  This function must therefore be called instead of connect or attach.\r\n               *\r\n               *  For an example on how to use it, please see examples/restore.js\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\r\n               *    (Function) callback - The connect callback function.\r\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n               *      time the server will wait before returning an empty result for\r\n               *      a request.  The default setting of 60 seconds is recommended.\r\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n               *      number of connections the server will hold at one time.  This\r\n               *      should almost always be set to 1 (the default).\r\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n               *      allowed range of request ids that are valid.  The default is 5.\r\n               */\r\n              restore: function restore(jid, callback, wait, hold, wind) {\r\n                if (this._sessionCachingSupported()) {\r\n                  this._proto._restore(jid, callback, wait, hold, wind);\r\n                } else {\r\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\r\n                  error.name = 'StropheSessionError';\r\n                  throw error;\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _sessionCachingSupported\r\n               * Checks whether sessionStorage and JSON are supported and whether we're\r\n               * using BOSH.\r\n               */\r\n              _sessionCachingSupported: function _sessionCachingSupported() {\r\n                if (this._proto instanceof Strophe.Bosh) {\r\n                  if (!JSON) {\r\n                    return false;\r\n                  }\r\n\r\n                  try {\r\n                    sessionStorage.setItem('_strophe_', '_strophe_');\r\n                    sessionStorage.removeItem('_strophe_');\r\n                  } catch (e) {\r\n                    return false;\r\n                  }\r\n\r\n                  return true;\r\n                }\r\n\r\n                return false;\r\n              },\r\n\r\n              /** Function: xmlInput\r\n               *  User overrideable function that receives XML data coming into the\r\n               *  connection.\r\n               *\r\n               *  The default function does nothing.  User code can override this with\r\n               *  > Strophe.Connection.xmlInput = function (elem) {\r\n               *  >   (user code)\r\n               *  > };\r\n               *\r\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\r\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\r\n               *\r\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\r\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The XML data received by the connection.\r\n               */\r\n              xmlInput: function xmlInput(elem) {\r\n                return;\r\n              },\r\n\r\n              /** Function: xmlOutput\r\n               *  User overrideable function that receives XML data sent to the\r\n               *  connection.\r\n               *\r\n               *  The default function does nothing.  User code can override this with\r\n               *  > Strophe.Connection.xmlOutput = function (elem) {\r\n               *  >   (user code)\r\n               *  > };\r\n               *\r\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\r\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\r\n               *\r\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\r\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The XMLdata sent by the connection.\r\n               */\r\n              xmlOutput: function xmlOutput(elem) {\r\n                return;\r\n              },\r\n\r\n              /** Function: rawInput\r\n               *  User overrideable function that receives raw data coming into the\r\n               *  connection.\r\n               *\r\n               *  The default function does nothing.  User code can override this with\r\n               *  > Strophe.Connection.rawInput = function (data) {\r\n               *  >   (user code)\r\n               *  > };\r\n               *\r\n               *  Parameters:\r\n               *    (String) data - The data received by the connection.\r\n               */\r\n              rawInput: function rawInput(data) {\r\n                return;\r\n              },\r\n\r\n              /** Function: rawOutput\r\n               *  User overrideable function that receives raw data sent to the\r\n               *  connection.\r\n               *\r\n               *  The default function does nothing.  User code can override this with\r\n               *  > Strophe.Connection.rawOutput = function (data) {\r\n               *  >   (user code)\r\n               *  > };\r\n               *\r\n               *  Parameters:\r\n               *    (String) data - The data sent by the connection.\r\n               */\r\n              rawOutput: function rawOutput(data) {\r\n                return;\r\n              },\r\n\r\n              /** Function: nextValidRid\r\n               *  User overrideable function that receives the new valid rid.\r\n               *\r\n               *  The default function does nothing. User code can override this with\r\n               *  > Strophe.Connection.nextValidRid = function (rid) {\r\n               *  >    (user code)\r\n               *  > };\r\n               *\r\n               *  Parameters:\r\n               *    (Number) rid - The next valid rid\r\n               */\r\n              nextValidRid: function nextValidRid(rid) {\r\n                return;\r\n              },\r\n\r\n              /** Function: send\r\n               *  Send a stanza.\r\n               *\r\n               *  This function is called to push data onto the send queue to\r\n               *  go out over the wire.  Whenever a request is sent to the BOSH\r\n               *  server, all pending data is sent and the queue is flushed.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement |\r\n               *     [XMLElement] |\r\n               *     Strophe.Builder) elem - The stanza to send.\r\n               */\r\n              send: function send(elem) {\r\n                if (elem === null) {\r\n                  return;\r\n                }\r\n\r\n                if (typeof elem.sort === \"function\") {\r\n                  for (var i = 0; i < elem.length; i++) {\r\n                    this._queueData(elem[i]);\r\n                  }\r\n                } else if (typeof elem.tree === \"function\") {\r\n                  this._queueData(elem.tree());\r\n                } else {\r\n                  this._queueData(elem);\r\n                }\r\n\r\n                this._proto._send();\r\n              },\r\n\r\n              /** Function: flush\r\n               *  Immediately send any pending outgoing data.\r\n               *\r\n               *  Normally send() queues outgoing data until the next idle period\r\n               *  (100ms), which optimizes network use in the common cases when\r\n               *  several send()s are called in succession. flush() can be used to\r\n               *  immediately send all pending data.\r\n               */\r\n              flush: function flush() {\r\n                // cancel the pending idle period and run the idle function\r\n                // immediately\r\n                clearTimeout(this._idleTimeout);\r\n\r\n                this._onIdle();\r\n              },\r\n\r\n              /** Function: sendPresence\r\n               *  Helper function to send presence stanzas. The main benefit is for\r\n               *  sending presence stanzas for which you expect a responding presence\r\n               *  stanza with the same id (for example when leaving a chat room).\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The stanza to send.\r\n               *    (Function) callback - The callback function for a successful request.\r\n               *    (Function) errback - The callback function for a failed or timed\r\n               *      out request.  On timeout, the stanza will be null.\r\n               *    (Integer) timeout - The time specified in milliseconds for a\r\n               *      timeout to occur.\r\n               *\r\n               *  Returns:\r\n               *    The id used to send the presence.\r\n               */\r\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\r\n                var _this3 = this;\r\n\r\n                var timeoutHandler = null;\r\n\r\n                if (typeof elem.tree === \"function\") {\r\n                  elem = elem.tree();\r\n                }\r\n\r\n                var id = elem.getAttribute('id');\r\n\r\n                if (!id) {\r\n                  // inject id if not found\r\n                  id = this.getUniqueId(\"sendPresence\");\r\n                  elem.setAttribute(\"id\", id);\r\n                }\r\n\r\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\r\n                  var handler = this.addHandler(function (stanza) {\r\n                    // remove timeout handler if there is one\r\n                    if (timeoutHandler) {\r\n                      _this3.deleteTimedHandler(timeoutHandler);\r\n                    }\r\n\r\n                    if (stanza.getAttribute('type') === 'error') {\r\n                      if (errback) {\r\n                        errback(stanza);\r\n                      }\r\n                    } else if (callback) {\r\n                      callback(stanza);\r\n                    }\r\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\r\n\r\n                  if (timeout) {\r\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\r\n                      // get rid of normal handler\r\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\r\n\r\n\r\n                      if (errback) {\r\n                        errback(null);\r\n                      }\r\n\r\n                      return false;\r\n                    });\r\n                  }\r\n                }\r\n\r\n                this.send(elem);\r\n                return id;\r\n              },\r\n\r\n              /** Function: sendIQ\r\n               *  Helper function to send IQ stanzas.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The stanza to send.\r\n               *    (Function) callback - The callback function for a successful request.\r\n               *    (Function) errback - The callback function for a failed or timed\r\n               *      out request.  On timeout, the stanza will be null.\r\n               *    (Integer) timeout - The time specified in milliseconds for a\r\n               *      timeout to occur.\r\n               *\r\n               *  Returns:\r\n               *    The id used to send the IQ.\r\n              */\r\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\r\n                var _this4 = this;\r\n\r\n                var timeoutHandler = null;\r\n\r\n                if (typeof elem.tree === \"function\") {\r\n                  elem = elem.tree();\r\n                }\r\n\r\n                var id = elem.getAttribute('id');\r\n\r\n                if (!id) {\r\n                  // inject id if not found\r\n                  id = this.getUniqueId(\"sendIQ\");\r\n                  elem.setAttribute(\"id\", id);\r\n                }\r\n\r\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\r\n                  var handler = this.addHandler(function (stanza) {\r\n                    // remove timeout handler if there is one\r\n                    if (timeoutHandler) {\r\n                      _this4.deleteTimedHandler(timeoutHandler);\r\n                    }\r\n\r\n                    var iqtype = stanza.getAttribute('type');\r\n\r\n                    if (iqtype === 'result') {\r\n                      if (callback) {\r\n                        callback(stanza);\r\n                      }\r\n                    } else if (iqtype === 'error') {\r\n                      if (errback) {\r\n                        errback(stanza);\r\n                      }\r\n                    } else {\r\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\r\n                      error.name = \"StropheError\";\r\n                      throw error;\r\n                    }\r\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\r\n\r\n                  if (timeout) {\r\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\r\n                      // get rid of normal handler\r\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\r\n\r\n\r\n                      if (errback) {\r\n                        errback(null);\r\n                      }\r\n\r\n                      return false;\r\n                    });\r\n                  }\r\n                }\r\n\r\n                this.send(elem);\r\n                return id;\r\n              },\r\n\r\n              /** PrivateFunction: _queueData\r\n               *  Queue outgoing data for later sending.  Also ensures that the data\r\n               *  is a DOMElement.\r\n               */\r\n              _queueData: function _queueData(element) {\r\n                if (element === null || !element.tagName || !element.childNodes) {\r\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\r\n                  error.name = \"StropheError\";\r\n                  throw error;\r\n                }\r\n\r\n                this._data.push(element);\r\n              },\r\n\r\n              /** PrivateFunction: _sendRestart\r\n               *  Send an xmpp:restart stanza.\r\n               */\r\n              _sendRestart: function _sendRestart() {\r\n                var _this5 = this;\r\n\r\n                this._data.push(\"restart\");\r\n\r\n                this._proto._sendRestart();\r\n\r\n                this._idleTimeout = setTimeout(function () {\r\n                  return _this5._onIdle();\r\n                }, 100);\r\n              },\r\n\r\n              /** Function: addTimedHandler\r\n               *  Add a timed handler to the connection.\r\n               *\r\n               *  This function adds a timed handler.  The provided handler will\r\n               *  be called every period milliseconds until it returns false,\r\n               *  the connection is terminated, or the handler is removed.  Handlers\r\n               *  that wish to continue being invoked should return true.\r\n               *\r\n               *  Because of method binding it is necessary to save the result of\r\n               *  this function if you wish to remove a handler with\r\n               *  deleteTimedHandler().\r\n               *\r\n               *  Note that user handlers are not active until authentication is\r\n               *  successful.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) period - The period of the handler.\r\n               *    (Function) handler - The callback function.\r\n               *\r\n               *  Returns:\r\n               *    A reference to the handler that can be used to remove it.\r\n               */\r\n              addTimedHandler: function addTimedHandler(period, handler) {\r\n                var thand = new Strophe.TimedHandler(period, handler);\r\n                this.addTimeds.push(thand);\r\n                return thand;\r\n              },\r\n\r\n              /** Function: deleteTimedHandler\r\n               *  Delete a timed handler for a connection.\r\n               *\r\n               *  This function removes a timed handler from the connection.  The\r\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\r\n               *  but is the reference returned from addTimedHandler().\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.TimedHandler) handRef - The handler reference.\r\n               */\r\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\r\n                // this must be done in the Idle loop so that we don't change\r\n                // the handlers during iteration\r\n                this.removeTimeds.push(handRef);\r\n              },\r\n\r\n              /** Function: addHandler\r\n               *  Add a stanza handler for the connection.\r\n               *\r\n               *  This function adds a stanza handler to the connection.  The\r\n               *  handler callback will be called for any stanza that matches\r\n               *  the parameters.  Note that if multiple parameters are supplied,\r\n               *  they must all match for the handler to be invoked.\r\n               *\r\n               *  The handler will receive the stanza that triggered it as its argument.\r\n               *  *The handler should return true if it is to be invoked again;\r\n               *  returning false will remove the handler after it returns.*\r\n               *\r\n               *  As a convenience, the ns parameters applies to the top level element\r\n               *  and also any of its immediate children.  This is primarily to make\r\n               *  matching /iq/query elements easy.\r\n               *\r\n               *  Options\r\n               *  ~~~~~~~\r\n               *  With the options argument, you can specify boolean flags that affect how\r\n               *  matches are being done.\r\n               *\r\n               *  Currently two flags exist:\r\n               *\r\n               *  - matchBareFromJid:\r\n               *      When set to true, the from parameter and the\r\n               *      from attribute on the stanza will be matched as bare JIDs instead\r\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\r\n               *      value of options. The default value for matchBareFromJid is false.\r\n               *\r\n               *  - ignoreNamespaceFragment:\r\n               *      When set to true, a fragment specified on the stanza's namespace\r\n               *      URL will be ignored when it's matched with the one configured for\r\n               *      the handler.\r\n               *\r\n               *      This means that if you register like this:\r\n               *      >   connection.addHandler(\r\n               *      >       handler,\r\n               *      >       'http://jabber.org/protocol/muc',\r\n               *      >       null, null, null, null,\r\n               *      >       {'ignoreNamespaceFragment': true}\r\n               *      >   );\r\n               *\r\n               *      Then a stanza with XML namespace of\r\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\r\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\r\n               *      'http://jabber.org/protocol/muc' will be matched.\r\n               *\r\n               *  Deleting the handler\r\n               *  ~~~~~~~~~~~~~~~~~~~~\r\n               *  The return value should be saved if you wish to remove the handler\r\n               *  with deleteHandler().\r\n               *\r\n               *  Parameters:\r\n               *    (Function) handler - The user callback.\r\n               *    (String) ns - The namespace to match.\r\n               *    (String) name - The stanza name to match.\r\n               *    (String|Array) type - The stanza type (or types if an array) to match.\r\n               *    (String) id - The stanza id attribute to match.\r\n               *    (String) from - The stanza from attribute to match.\r\n               *    (String) options - The handler options\r\n               *\r\n               *  Returns:\r\n               *    A reference to the handler that can be used to remove it.\r\n               */\r\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\r\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\r\n                this.addHandlers.push(hand);\r\n                return hand;\r\n              },\r\n\r\n              /** Function: deleteHandler\r\n               *  Delete a stanza handler for a connection.\r\n               *\r\n               *  This function removes a stanza handler from the connection.  The\r\n               *  handRef parameter is *not* the function passed to addHandler(),\r\n               *  but is the reference returned from addHandler().\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Handler) handRef - The handler reference.\r\n               */\r\n              deleteHandler: function deleteHandler(handRef) {\r\n                // this must be done in the Idle loop so that we don't change\r\n                // the handlers during iteration\r\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\r\n                // prevent it from getting added\r\n\r\n                var i = this.addHandlers.indexOf(handRef);\r\n\r\n                if (i >= 0) {\r\n                  this.addHandlers.splice(i, 1);\r\n                }\r\n              },\r\n\r\n              /** Function: registerSASLMechanisms\r\n               *\r\n               * Register the SASL mechanisms which will be supported by this instance of\r\n               * Strophe.Connection (i.e. which this XMPP client will support).\r\n               *\r\n               *  Parameters:\r\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\r\n               *\r\n               */\r\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\r\n                this.mechanisms = {};\r\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\r\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\r\n              },\r\n\r\n              /** Function: registerSASLMechanism\r\n               *\r\n               * Register a single SASL mechanism, to be supported by this client.\r\n               *\r\n               *  Parameters:\r\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\r\n               *\r\n               */\r\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\r\n                this.mechanisms[mechanism.prototype.name] = mechanism;\r\n              },\r\n\r\n              /** Function: disconnect\r\n               *  Start the graceful disconnection process.\r\n               *\r\n               *  This function starts the disconnection process.  This process starts\r\n               *  by sending unavailable presence and sending BOSH body of type\r\n               *  terminate.  A timeout handler makes sure that disconnection happens\r\n               *  even if the BOSH server does not respond.\r\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\r\n               *  so the connection object won't generate successful requests (which were already opened).\r\n               *\r\n               *  The user supplied connection callback will be notified of the\r\n               *  progress as this process happens.\r\n               *\r\n               *  Parameters:\r\n               *    (String) reason - The reason the disconnect is occuring.\r\n               */\r\n              disconnect: function disconnect(reason) {\r\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\r\n\r\n                Strophe.warn(\"Disconnect was called because: \" + reason);\r\n\r\n                if (this.connected) {\r\n                  var pres = false;\r\n                  this.disconnecting = true;\r\n\r\n                  if (this.authenticated) {\r\n                    pres = $pres({\r\n                      'xmlns': Strophe.NS.CLIENT,\r\n                      'type': 'unavailable'\r\n                    });\r\n                  } // setup timeout handler\r\n\r\n\r\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\r\n\r\n                  this._proto._disconnect(pres);\r\n                } else {\r\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\r\n\r\n                  this._proto._abortAllRequests();\r\n\r\n                  this._doDisconnect();\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _changeConnectStatus\r\n               *  _Private_ helper function that makes sure plugins and the user's\r\n               *  callback are notified of connection status changes.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) status - the new connection status, one of the values\r\n               *      in Strophe.Status\r\n               *    (String) condition - the error condition or null\r\n               *    (XMLElement) elem - The triggering stanza.\r\n               */\r\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\r\n                // notify all plugins listening for status changes\r\n                for (var k in Strophe._connectionPlugins) {\r\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\r\n                    var plugin = this[k];\r\n\r\n                    if (plugin.statusChanged) {\r\n                      try {\r\n                        plugin.statusChanged(status, condition);\r\n                      } catch (err) {\r\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\r\n                      }\r\n                    }\r\n                  }\r\n                } // notify the user's callback\r\n\r\n\r\n                if (this.connect_callback) {\r\n                  try {\r\n                    this.connect_callback(status, condition, elem);\r\n                  } catch (e) {\r\n                    Strophe._handleError(e);\r\n\r\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\r\n                  }\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _doDisconnect\r\n               *  _Private_ function to disconnect.\r\n               *\r\n               *  This is the last piece of the disconnection logic.  This resets the\r\n               *  connection and alerts the user's connection callback.\r\n               */\r\n              _doDisconnect: function _doDisconnect(condition) {\r\n                if (typeof this._idleTimeout === \"number\") {\r\n                  clearTimeout(this._idleTimeout);\r\n                } // Cancel Disconnect Timeout\r\n\r\n\r\n                if (this._disconnectTimeout !== null) {\r\n                  this.deleteTimedHandler(this._disconnectTimeout);\r\n                  this._disconnectTimeout = null;\r\n                }\r\n\r\n                Strophe.debug(\"_doDisconnect was called\");\r\n\r\n                this._proto._doDisconnect();\r\n\r\n                this.authenticated = false;\r\n                this.disconnecting = false;\r\n                this.restored = false; // delete handlers\r\n\r\n                this.handlers = [];\r\n                this.timedHandlers = [];\r\n                this.removeTimeds = [];\r\n                this.removeHandlers = [];\r\n                this.addTimeds = [];\r\n                this.addHandlers = []; // tell the parent we disconnected\r\n\r\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\r\n\r\n                this.connected = false;\r\n              },\r\n\r\n              /** PrivateFunction: _dataRecv\r\n               *  _Private_ handler to processes incoming data from the the connection.\r\n               *\r\n               *  Except for _connect_cb handling the initial connection request,\r\n               *  this function handles the incoming data for all requests.  This\r\n               *  function also fires stanza handlers that match each incoming\r\n               *  stanza.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) req - The request that has data ready.\r\n               *    (string) req - The stanza a raw string (optiona).\r\n               */\r\n              _dataRecv: function _dataRecv(req, raw) {\r\n                var _this6 = this;\r\n\r\n                Strophe.debug(\"_dataRecv called\");\r\n\r\n                var elem = this._proto._reqToData(req);\r\n\r\n                if (elem === null) {\r\n                  return;\r\n                }\r\n\r\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\r\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\r\n                    this.xmlInput(elem.childNodes[0]);\r\n                  } else {\r\n                    this.xmlInput(elem);\r\n                  }\r\n                }\r\n\r\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\r\n                  if (raw) {\r\n                    this.rawInput(raw);\r\n                  } else {\r\n                    this.rawInput(Strophe.serialize(elem));\r\n                  }\r\n                } // remove handlers scheduled for deletion\r\n\r\n\r\n                while (this.removeHandlers.length > 0) {\r\n                  var hand = this.removeHandlers.pop();\r\n                  var i = this.handlers.indexOf(hand);\r\n\r\n                  if (i >= 0) {\r\n                    this.handlers.splice(i, 1);\r\n                  }\r\n                } // add handlers scheduled for addition\r\n\r\n\r\n                while (this.addHandlers.length > 0) {\r\n                  this.handlers.push(this.addHandlers.pop());\r\n                } // handle graceful disconnect\r\n\r\n\r\n                if (this.disconnecting && this._proto._emptyQueue()) {\r\n                  this._doDisconnect();\r\n\r\n                  return;\r\n                }\r\n\r\n                var type = elem.getAttribute(\"type\");\r\n\r\n                if (type !== null && type === \"terminate\") {\r\n                  // Don't process stanzas that come in after disconnect\r\n                  if (this.disconnecting) {\r\n                    return;\r\n                  } // an error occurred\r\n\r\n\r\n                  var cond = elem.getAttribute(\"condition\");\r\n                  var conflict = elem.getElementsByTagName(\"conflict\");\r\n\r\n                  if (cond !== null) {\r\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\r\n                      cond = \"conflict\";\r\n                    }\r\n\r\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\r\n                  } else {\r\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\r\n                  }\r\n\r\n                  this._doDisconnect(cond);\r\n\r\n                  return;\r\n                } // send each incoming stanza through the handler chain\r\n\r\n\r\n                Strophe.forEachChild(elem, null, function (child) {\r\n                  // process handlers\r\n                  var newList = _this6.handlers;\r\n                  _this6.handlers = [];\r\n\r\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\r\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\r\n                    // one of the handlers throws an exception\r\n\r\n                    try {\r\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\r\n                        if (_hand.run(child)) {\r\n                          _this6.handlers.push(_hand);\r\n                        }\r\n                      } else {\r\n                        _this6.handlers.push(_hand);\r\n                      }\r\n                    } catch (e) {\r\n                      // if the handler throws an exception, we consider it as false\r\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\r\n                    }\r\n                  }\r\n                });\r\n              },\r\n\r\n              /** Attribute: mechanisms\r\n               *  SASL Mechanisms available for Connection.\r\n               */\r\n              mechanisms: {},\r\n\r\n              /** PrivateFunction: _connect_cb\r\n               *  _Private_ handler for initial connection request.\r\n               *\r\n               *  This handler is used to process the initial connection request\r\n               *  response from the BOSH server. It is used to set up authentication\r\n               *  handlers and start the authentication process.\r\n               *\r\n               *  SASL authentication will be attempted if available, otherwise\r\n               *  the code will fall back to legacy authentication.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) req - The current request.\r\n               *    (Function) _callback - low level (xmpp) connect callback function.\r\n               *      Useful for plugins with their own xmpp connect callback (when they\r\n               *      want to do something special).\r\n               */\r\n              _connect_cb: function _connect_cb(req, _callback, raw) {\r\n                Strophe.debug(\"_connect_cb was called\");\r\n                this.connected = true;\r\n                var bodyWrap;\r\n\r\n                try {\r\n                  bodyWrap = this._proto._reqToData(req);\r\n                } catch (e) {\r\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\r\n                    throw e;\r\n                  }\r\n\r\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\r\n\r\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\r\n                }\r\n\r\n                if (!bodyWrap) {\r\n                  return;\r\n                }\r\n\r\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\r\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\r\n                    this.xmlInput(bodyWrap.childNodes[0]);\r\n                  } else {\r\n                    this.xmlInput(bodyWrap);\r\n                  }\r\n                }\r\n\r\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\r\n                  if (raw) {\r\n                    this.rawInput(raw);\r\n                  } else {\r\n                    this.rawInput(Strophe.serialize(bodyWrap));\r\n                  }\r\n                }\r\n\r\n                var conncheck = this._proto._connect_cb(bodyWrap);\r\n\r\n                if (conncheck === Strophe.Status.CONNFAIL) {\r\n                  return;\r\n                } // Check for the stream:features tag\r\n\r\n\r\n                var hasFeatures;\r\n\r\n                if (bodyWrap.getElementsByTagNameNS) {\r\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\r\n                } else {\r\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\r\n                }\r\n\r\n                if (!hasFeatures) {\r\n                  this._proto._no_auth_received(_callback);\r\n\r\n                  return;\r\n                }\r\n\r\n                var matched = [];\r\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\r\n\r\n                if (mechanisms.length > 0) {\r\n                  for (var i = 0; i < mechanisms.length; i++) {\r\n                    var mech = Strophe.getText(mechanisms[i]);\r\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\r\n                  }\r\n                }\r\n\r\n                if (matched.length === 0) {\r\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\r\n                    // There are no matching SASL mechanisms and also no legacy\r\n                    // auth available.\r\n                    this._proto._no_auth_received(_callback);\r\n\r\n                    return;\r\n                  }\r\n                }\r\n\r\n                if (this.do_authentication !== false) {\r\n                  this.authenticate(matched);\r\n                }\r\n              },\r\n\r\n              /** Function: sortMechanismsByPriority\r\n               *\r\n               *  Sorts an array of objects with prototype SASLMechanism according to\r\n               *  their priorities.\r\n               *\r\n               *  Parameters:\r\n               *    (Array) mechanisms - Array of SASL mechanisms.\r\n               *\r\n               */\r\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\r\n                // Sorting mechanisms according to priority.\r\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\r\n                  var higher = i;\r\n\r\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\r\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\r\n                      higher = j;\r\n                    }\r\n                  }\r\n\r\n                  if (higher !== i) {\r\n                    var swap = mechanisms[i];\r\n                    mechanisms[i] = mechanisms[higher];\r\n                    mechanisms[higher] = swap;\r\n                  }\r\n                }\r\n\r\n                return mechanisms;\r\n              },\r\n\r\n              /** Function: authenticate\r\n               * Set up authentication\r\n               *\r\n               *  Continues the initial connection request by setting up authentication\r\n               *  handlers and starting the authentication process.\r\n               *\r\n               *  SASL authentication will be attempted if available, otherwise\r\n               *  the code will fall back to legacy authentication.\r\n               *\r\n               *  Parameters:\r\n               *    (Array) matched - Array of SASL mechanisms supported.\r\n               *\r\n               */\r\n              authenticate: function authenticate(matched) {\r\n                if (!this._attemptSASLAuth(matched)) {\r\n                  this._attemptLegacyAuth();\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _attemptSASLAuth\r\n               *\r\n               *  Iterate through an array of SASL mechanisms and attempt authentication\r\n               *  with the highest priority (enabled) mechanism.\r\n               *\r\n               *  Parameters:\r\n               *    (Array) mechanisms - Array of SASL mechanisms.\r\n               *\r\n               *  Returns:\r\n               *    (Boolean) mechanism_found - true or false, depending on whether a\r\n               *          valid SASL mechanism was found with which authentication could be\r\n               *          started.\r\n               */\r\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\r\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\r\n                var mechanism_found = false;\r\n\r\n                for (var i = 0; i < mechanisms.length; ++i) {\r\n                  if (!mechanisms[i].prototype.test(this)) {\r\n                    continue;\r\n                  }\r\n\r\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\r\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\r\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\r\n                  this._sasl_mechanism = new mechanisms[i]();\r\n\r\n                  this._sasl_mechanism.onStart(this);\r\n\r\n                  var request_auth_exchange = $build(\"auth\", {\r\n                    'xmlns': Strophe.NS.SASL,\r\n                    'mechanism': this._sasl_mechanism.name\r\n                  });\r\n\r\n                  if (this._sasl_mechanism.isClientFirst) {\r\n                    var response = this._sasl_mechanism.onChallenge(this, null);\r\n\r\n                    request_auth_exchange.t(btoa(response));\r\n                  }\r\n\r\n                  this.send(request_auth_exchange.tree());\r\n                  mechanism_found = true;\r\n                  break;\r\n                }\r\n\r\n                return mechanism_found;\r\n              },\r\n\r\n              /** PrivateFunction: _sasl_challenge_cb\r\n               *  _Private_ handler for the SASL challenge\r\n               *\r\n               */\r\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\r\n                var challenge = atob(Strophe.getText(elem));\r\n\r\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\r\n\r\n                var stanza = $build('response', {\r\n                  'xmlns': Strophe.NS.SASL\r\n                });\r\n\r\n                if (response !== \"\") {\r\n                  stanza.t(btoa(response));\r\n                }\r\n\r\n                this.send(stanza.tree());\r\n                return true;\r\n              },\r\n\r\n              /** PrivateFunction: _attemptLegacyAuth\r\n               *\r\n               *  Attempt legacy (i.e. non-SASL) authentication.\r\n               */\r\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\r\n                if (Strophe.getNodeFromJid(this.jid) === null) {\r\n                  // we don't have a node, which is required for non-anonymous\r\n                  // client connections\r\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\r\n\r\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\r\n                } else {\r\n                  // Fall back to legacy authentication\r\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\r\n\r\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\r\n\r\n                  this.send($iq({\r\n                    'type': \"get\",\r\n                    'to': this.domain,\r\n                    'id': \"_auth_1\"\r\n                  }).c(\"query\", {\r\n                    xmlns: Strophe.NS.AUTH\r\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _onLegacyAuthIQResult\r\n               *  _Private_ handler for legacy authentication.\r\n               *\r\n               *  This handler is called in response to the initial <iq type='get'/>\r\n               *  for legacy authentication.  It builds an authentication <iq/> and\r\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\r\n               *  handle the result\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The stanza that triggered the callback.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\r\n                // build plaintext auth iq\r\n                var iq = $iq({\r\n                  type: \"set\",\r\n                  id: \"_auth_2\"\r\n                }).c('query', {\r\n                  xmlns: Strophe.NS.AUTH\r\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\r\n\r\n                if (!Strophe.getResourceFromJid(this.jid)) {\r\n                  // since the user has not supplied a resource, we pick\r\n                  // a default one here.  unlike other auth methods, the server\r\n                  // cannot do this for us.\r\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\r\n                }\r\n\r\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\r\n\r\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\r\n\r\n                this.send(iq.tree());\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _sasl_success_cb\r\n               *  _Private_ handler for succesful SASL authentication.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The matching stanza.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _sasl_success_cb: function _sasl_success_cb(elem) {\r\n                var _this7 = this;\r\n\r\n                if (this._sasl_data[\"server-signature\"]) {\r\n                  var serverSignature;\r\n                  var success = atob(Strophe.getText(elem));\r\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\r\n                  var matches = success.match(attribMatch);\r\n\r\n                  if (matches[1] === \"v\") {\r\n                    serverSignature = matches[2];\r\n                  }\r\n\r\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\r\n                    // remove old handlers\r\n                    this.deleteHandler(this._sasl_failure_handler);\r\n                    this._sasl_failure_handler = null;\r\n\r\n                    if (this._sasl_challenge_handler) {\r\n                      this.deleteHandler(this._sasl_challenge_handler);\r\n                      this._sasl_challenge_handler = null;\r\n                    }\r\n\r\n                    this._sasl_data = {};\r\n                    return this._sasl_failure_cb(null);\r\n                  }\r\n                }\r\n\r\n                Strophe.info(\"SASL authentication succeeded.\");\r\n\r\n                if (this._sasl_mechanism) {\r\n                  this._sasl_mechanism.onSuccess();\r\n                } // remove old handlers\r\n\r\n\r\n                this.deleteHandler(this._sasl_failure_handler);\r\n                this._sasl_failure_handler = null;\r\n\r\n                if (this._sasl_challenge_handler) {\r\n                  this.deleteHandler(this._sasl_challenge_handler);\r\n                  this._sasl_challenge_handler = null;\r\n                }\r\n\r\n                var streamfeature_handlers = [];\r\n\r\n                var wrapper = function wrapper(handlers, elem) {\r\n                  while (handlers.length) {\r\n                    _this7.deleteHandler(handlers.pop());\r\n                  }\r\n\r\n                  _this7._onStreamFeaturesAfterSASL(elem);\r\n\r\n                  return false;\r\n                };\r\n\r\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\r\n                  return wrapper(streamfeature_handlers, elem);\r\n                }, null, \"stream:features\", null, null));\r\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\r\n                  return wrapper(streamfeature_handlers, elem);\r\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\r\n\r\n                this._sendRestart();\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The matching stanza.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\r\n                // save stream:features for future usage\r\n                this.features = elem;\r\n\r\n                for (var i = 0; i < elem.childNodes.length; i++) {\r\n                  var child = elem.childNodes[i];\r\n\r\n                  if (child.nodeName === 'bind') {\r\n                    this.do_bind = true;\r\n                  }\r\n\r\n                  if (child.nodeName === 'session') {\r\n                    this.do_session = true;\r\n                  }\r\n                }\r\n\r\n                if (!this.do_bind) {\r\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\r\n\r\n                  return false;\r\n                } else if (!this.options.explicitResourceBinding) {\r\n                  this.bind();\r\n                } else {\r\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\r\n                }\r\n\r\n                return false;\r\n              },\r\n\r\n              /** Function: bind\r\n               *\r\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\r\n               *\r\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\r\n               *\r\n               *  If `explicitResourceBinding` was set to a truthy value in the options\r\n               *  passed to the Strophe.Connection constructor, then this function needs\r\n               *  to be called explicitly by the client author.\r\n               *\r\n               *  Otherwise it'll be called automatically as soon as the XMPP server\r\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\r\n               */\r\n              bind: function bind() {\r\n                if (!this.do_bind) {\r\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\r\n                  return;\r\n                }\r\n\r\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\r\n\r\n                var resource = Strophe.getResourceFromJid(this.jid);\r\n\r\n                if (resource) {\r\n                  this.send($iq({\r\n                    type: \"set\",\r\n                    id: \"_bind_auth_2\"\r\n                  }).c('bind', {\r\n                    xmlns: Strophe.NS.BIND\r\n                  }).c('resource', {}).t(resource).tree());\r\n                } else {\r\n                  this.send($iq({\r\n                    type: \"set\",\r\n                    id: \"_bind_auth_2\"\r\n                  }).c('bind', {\r\n                    xmlns: Strophe.NS.BIND\r\n                  }).tree());\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _onResourceBindIQ\r\n               *  _Private_ handler for binding result and session start.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The matching stanza.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\r\n                if (elem.getAttribute(\"type\") === \"error\") {\r\n                  Strophe.warn(\"Resource binding failed.\");\r\n                  var conflict = elem.getElementsByTagName(\"conflict\");\r\n                  var condition;\r\n\r\n                  if (conflict.length > 0) {\r\n                    condition = Strophe.ErrorCondition.CONFLICT;\r\n                  }\r\n\r\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\r\n\r\n                  return false;\r\n                } // TODO - need to grab errors\r\n\r\n\r\n                var bind = elem.getElementsByTagName(\"bind\");\r\n\r\n                if (bind.length > 0) {\r\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\r\n\r\n                  if (jidNode.length > 0) {\r\n                    this.jid = Strophe.getText(jidNode[0]);\r\n\r\n                    if (this.do_session) {\r\n                      this._establishSession();\r\n                    } else {\r\n                      this.authenticated = true;\r\n\r\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\r\n                    }\r\n                  }\r\n                } else {\r\n                  Strophe.warn(\"Resource binding failed.\");\r\n\r\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\r\n\r\n                  return false;\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _establishSession\r\n               *  Send IQ request to establish a session with the XMPP server.\r\n               *\r\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\r\n               *\r\n               *  Note: The protocol for session establishment has been determined as\r\n               *  unnecessary and removed in RFC-6121.\r\n               */\r\n              _establishSession: function _establishSession() {\r\n                if (!this.do_session) {\r\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\r\n                }\r\n\r\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\r\n\r\n                this.send($iq({\r\n                  type: \"set\",\r\n                  id: \"_session_auth_2\"\r\n                }).c('session', {\r\n                  xmlns: Strophe.NS.SESSION\r\n                }).tree());\r\n              },\r\n\r\n              /** PrivateFunction: _onSessionResultIQ\r\n               *  _Private_ handler for the server's IQ response to a client's session\r\n               *  request.\r\n               *\r\n               *  This sets Connection.authenticated to true on success, which\r\n               *  starts the processing of user handlers.\r\n               *\r\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\r\n               *\r\n               *  Note: The protocol for session establishment has been determined as\r\n               *  unnecessary and removed in RFC-6121.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The matching stanza.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\r\n                if (elem.getAttribute(\"type\") === \"result\") {\r\n                  this.authenticated = true;\r\n\r\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\r\n                } else if (elem.getAttribute(\"type\") === \"error\") {\r\n                  Strophe.warn(\"Session creation failed.\");\r\n\r\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\r\n\r\n                  return false;\r\n                }\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _sasl_failure_cb\r\n               *  _Private_ handler for SASL authentication failure.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The matching stanza.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\r\n                // delete unneeded handlers\r\n                if (this._sasl_success_handler) {\r\n                  this.deleteHandler(this._sasl_success_handler);\r\n                  this._sasl_success_handler = null;\r\n                }\r\n\r\n                if (this._sasl_challenge_handler) {\r\n                  this.deleteHandler(this._sasl_challenge_handler);\r\n                  this._sasl_challenge_handler = null;\r\n                }\r\n\r\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\r\n\r\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _auth2_cb\r\n               *  _Private_ handler to finish legacy authentication.\r\n               *\r\n               *  This handler is called when the result from the jabber:iq:auth\r\n               *  <iq/> stanza is returned.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The stanza that triggered the callback.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _auth2_cb: function _auth2_cb(elem) {\r\n                if (elem.getAttribute(\"type\") === \"result\") {\r\n                  this.authenticated = true;\r\n\r\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\r\n                } else if (elem.getAttribute(\"type\") === \"error\") {\r\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\r\n\r\n                  this.disconnect('authentication failed');\r\n                }\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _addSysTimedHandler\r\n               *  _Private_ function to add a system level timed handler.\r\n               *\r\n               *  This function is used to add a Strophe.TimedHandler for the\r\n               *  library code.  System timed handlers are allowed to run before\r\n               *  authentication is complete.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) period - The period of the handler.\r\n               *    (Function) handler - The callback function.\r\n               */\r\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\r\n                var thand = new Strophe.TimedHandler(period, handler);\r\n                thand.user = false;\r\n                this.addTimeds.push(thand);\r\n                return thand;\r\n              },\r\n\r\n              /** PrivateFunction: _addSysHandler\r\n               *  _Private_ function to add a system level stanza handler.\r\n               *\r\n               *  This function is used to add a Strophe.Handler for the\r\n               *  library code.  System stanza handlers are allowed to run before\r\n               *  authentication is complete.\r\n               *\r\n               *  Parameters:\r\n               *    (Function) handler - The callback function.\r\n               *    (String) ns - The namespace to match.\r\n               *    (String) name - The stanza name to match.\r\n               *    (String) type - The stanza type attribute to match.\r\n               *    (String) id - The stanza id attribute to match.\r\n               */\r\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\r\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\r\n                hand.user = false;\r\n                this.addHandlers.push(hand);\r\n                return hand;\r\n              },\r\n\r\n              /** PrivateFunction: _onDisconnectTimeout\r\n               *  _Private_ timeout handler for handling non-graceful disconnection.\r\n               *\r\n               *  If the graceful disconnect process does not complete within the\r\n               *  time allotted, this handler finishes the disconnect anyway.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\r\n                Strophe.debug(\"_onDisconnectTimeout was called\");\r\n\r\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\r\n\r\n                this._proto._onDisconnectTimeout(); // actually disconnect\r\n\r\n\r\n                this._doDisconnect();\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _onIdle\r\n               *  _Private_ handler to process events during idle cycle.\r\n               *\r\n               *  This handler is called every 100ms to fire timed handlers that\r\n               *  are ready and keep poll requests going.\r\n               */\r\n              _onIdle: function _onIdle() {\r\n                var _this8 = this;\r\n\r\n                // add timed handlers scheduled for addition\r\n                // NOTE: we add before remove in the case a timed handler is\r\n                // added and then deleted before the next _onIdle() call.\r\n                while (this.addTimeds.length > 0) {\r\n                  this.timedHandlers.push(this.addTimeds.pop());\r\n                } // remove timed handlers that have been scheduled for deletion\r\n\r\n\r\n                while (this.removeTimeds.length > 0) {\r\n                  var thand = this.removeTimeds.pop();\r\n                  var i = this.timedHandlers.indexOf(thand);\r\n\r\n                  if (i >= 0) {\r\n                    this.timedHandlers.splice(i, 1);\r\n                  }\r\n                } // call ready timed handlers\r\n\r\n\r\n                var now = new Date().getTime();\r\n                var newList = [];\r\n\r\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\r\n                  var _thand = this.timedHandlers[_i6];\r\n\r\n                  if (this.authenticated || !_thand.user) {\r\n                    var since = _thand.lastCalled + _thand.period;\r\n\r\n                    if (since - now <= 0) {\r\n                      if (_thand.run()) {\r\n                        newList.push(_thand);\r\n                      }\r\n                    } else {\r\n                      newList.push(_thand);\r\n                    }\r\n                  }\r\n                }\r\n\r\n                this.timedHandlers = newList;\r\n                clearTimeout(this._idleTimeout);\r\n\r\n                this._proto._onIdle(); // reactivate the timer only if connected\r\n\r\n\r\n                if (this.connected) {\r\n                  this._idleTimeout = setTimeout(function () {\r\n                    return _this8._onIdle();\r\n                  }, 100);\r\n                }\r\n              }\r\n            };\r\n            /** Class: Strophe.SASLMechanism\r\n             *\r\n             *  encapsulates SASL authentication mechanisms.\r\n             *\r\n             *  User code may override the priority for each mechanism or disable it completely.\r\n             *  See <priority> for information about changing priority and <test> for informatian on\r\n             *  how to disable a mechanism.\r\n             *\r\n             *  By default, all mechanisms are enabled and the priorities are\r\n             *\r\n             *      OAUTHBEARER - 60\r\n             *      SCRAM-SHA1 - 50\r\n             *      DIGEST-MD5 - 40\r\n             *      PLAIN - 30\r\n             *      ANONYMOUS - 20\r\n             *      EXTERNAL - 10\r\n             *\r\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\r\n             */\r\n\r\n            /**\r\n             * PrivateConstructor: Strophe.SASLMechanism\r\n             * SASL auth mechanism abstraction.\r\n             *\r\n             *  Parameters:\r\n             *    (String) name - SASL Mechanism name.\r\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\r\n             *    (Number) priority - Priority.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.SASLMechanism object.\r\n             */\r\n\r\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\r\n              /** PrivateVariable: name\r\n               *  Mechanism name.\r\n               */\r\n              this.name = name;\r\n              /** PrivateVariable: isClientFirst\r\n               *  If client sends response without initial server challenge.\r\n               */\r\n\r\n              this.isClientFirst = isClientFirst;\r\n              /** Variable: priority\r\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\r\n               *  Users may override this to prioritize mechanisms differently.\r\n               *\r\n               *  In the default configuration the priorities are\r\n               *\r\n               *  SCRAM-SHA1 - 40\r\n               *  DIGEST-MD5 - 30\r\n               *  Plain - 20\r\n               *\r\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\r\n               *\r\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\r\n               *\r\n               *  See <SASL mechanisms> for a list of available mechanisms.\r\n               *\r\n               */\r\n\r\n              this.priority = priority;\r\n            };\r\n\r\n            Strophe.SASLMechanism.prototype = {\r\n              /**\r\n               *  Function: test\r\n               *  Checks if mechanism able to run.\r\n               *  To disable a mechanism, make this return false;\r\n               *\r\n               *  To disable plain authentication run\r\n               *  > Strophe.SASLPlain.test = function() {\r\n               *  >   return false;\r\n               *  > }\r\n               *\r\n               *  See <SASL mechanisms> for a list of available mechanisms.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Connection) connection - Target Connection.\r\n               *\r\n               *  Returns:\r\n               *    (Boolean) If mechanism was able to run.\r\n               */\r\n              test: function test(connection) {\r\n                return true;\r\n              },\r\n\r\n              /** PrivateFunction: onStart\r\n               *  Called before starting mechanism on some connection.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Connection) connection - Target Connection.\r\n               */\r\n              onStart: function onStart(connection) {\r\n                this._connection = connection;\r\n              },\r\n\r\n              /** PrivateFunction: onChallenge\r\n               *  Called by protocol implementation on incoming challenge. If client is\r\n               *  first (isClientFirst === true) challenge will be null on the first call.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Connection) connection - Target Connection.\r\n               *    (String) challenge - current challenge to handle.\r\n               *\r\n               *  Returns:\r\n               *    (String) Mechanism response.\r\n               */\r\n              onChallenge: function onChallenge(connection, challenge) {\r\n                throw new Error(\"You should implement challenge handling!\");\r\n              },\r\n\r\n              /** PrivateFunction: onFailure\r\n               *  Protocol informs mechanism implementation about SASL failure.\r\n               */\r\n              onFailure: function onFailure() {\r\n                this._connection = null;\r\n              },\r\n\r\n              /** PrivateFunction: onSuccess\r\n               *  Protocol informs mechanism implementation about SASL success.\r\n               */\r\n              onSuccess: function onSuccess() {\r\n                this._connection = null;\r\n              }\r\n            };\r\n            /** Constants: SASL mechanisms\r\n             *  Available authentication mechanisms\r\n             *\r\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\r\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\r\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\r\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\r\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\r\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\r\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\r\n             */\r\n            // Building SASL callbacks\r\n\r\n            /** PrivateConstructor: SASLAnonymous\r\n             *  SASL ANONYMOUS authentication.\r\n             */\r\n\r\n            Strophe.SASLAnonymous = function () {};\r\n\r\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\r\n\r\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\r\n              return connection.authcid === null;\r\n            };\r\n            /** PrivateConstructor: SASLPlain\r\n             *  SASL PLAIN authentication.\r\n             */\r\n\r\n\r\n            Strophe.SASLPlain = function () {};\r\n\r\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\r\n\r\n            Strophe.SASLPlain.prototype.test = function (connection) {\r\n              return connection.authcid !== null;\r\n            };\r\n\r\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\r\n              var auth_str = connection.authzid;\r\n              auth_str = auth_str + \"\\0\";\r\n              auth_str = auth_str + connection.authcid;\r\n              auth_str = auth_str + \"\\0\";\r\n              auth_str = auth_str + connection.pass;\r\n              return utils.utf16to8(auth_str);\r\n            };\r\n            /** PrivateConstructor: SASLSHA1\r\n             *  SASL SCRAM SHA 1 authentication.\r\n             */\r\n\r\n\r\n            Strophe.SASLSHA1 = function () {};\r\n\r\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\r\n\r\n            Strophe.SASLSHA1.prototype.test = function (connection) {\r\n              return connection.authcid !== null;\r\n            };\r\n\r\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\r\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\r\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\r\n              auth_str += \",r=\";\r\n              auth_str += cnonce;\r\n              connection._sasl_data.cnonce = cnonce;\r\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\r\n              auth_str = \"n,,\" + auth_str;\r\n\r\n              this.onChallenge = function (connection, challenge) {\r\n                var nonce, salt, iter, Hi, U, U_old, i, k;\r\n                var responseText = \"c=biws,\";\r\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\r\n                var cnonce = connection._sasl_data.cnonce;\r\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\r\n\r\n                while (challenge.match(attribMatch)) {\r\n                  var matches = challenge.match(attribMatch);\r\n                  challenge = challenge.replace(matches[0], \"\");\r\n\r\n                  switch (matches[1]) {\r\n                    case \"r\":\r\n                      nonce = matches[2];\r\n                      break;\r\n\r\n                    case \"s\":\r\n                      salt = matches[2];\r\n                      break;\r\n\r\n                    case \"i\":\r\n                      iter = matches[2];\r\n                      break;\r\n                  }\r\n                }\r\n\r\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\r\n                  connection._sasl_data = {};\r\n                  return connection._sasl_failure_cb();\r\n                }\r\n\r\n                responseText += \"r=\" + nonce;\r\n                authMessage += responseText;\r\n                salt = atob(salt);\r\n                salt += \"\\x00\\x00\\x00\\x01\";\r\n                var pass = utils.utf16to8(connection.pass);\r\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\r\n\r\n                for (i = 1; i < iter; i++) {\r\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\r\n\r\n                  for (k = 0; k < 5; k++) {\r\n                    Hi[k] ^= U[k];\r\n                  }\r\n\r\n                  U_old = U;\r\n                }\r\n\r\n                Hi = SHA1.binb2str(Hi);\r\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\r\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\r\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\r\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\r\n\r\n                for (k = 0; k < 5; k++) {\r\n                  clientKey[k] ^= clientSignature[k];\r\n                }\r\n\r\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\r\n                return responseText;\r\n              };\r\n\r\n              return auth_str;\r\n            };\r\n            /** PrivateConstructor: SASLMD5\r\n             *  SASL DIGEST MD5 authentication.\r\n             */\r\n\r\n\r\n            Strophe.SASLMD5 = function () {};\r\n\r\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\r\n\r\n            Strophe.SASLMD5.prototype.test = function (connection) {\r\n              return connection.authcid !== null;\r\n            };\r\n            /** PrivateFunction: _quote\r\n             *  _Private_ utility function to backslash escape and quote strings.\r\n             *\r\n             *  Parameters:\r\n             *    (String) str - The string to be quoted.\r\n             *\r\n             *  Returns:\r\n             *    quoted string\r\n             */\r\n\r\n\r\n            Strophe.SASLMD5.prototype._quote = function (str) {\r\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\r\n            };\r\n\r\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\r\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\r\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\r\n              var realm = \"\";\r\n              var host = null;\r\n              var nonce = \"\";\r\n              var qop = \"\";\r\n\r\n              while (challenge.match(attribMatch)) {\r\n                var matches = challenge.match(attribMatch);\r\n                challenge = challenge.replace(matches[0], \"\");\r\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\r\n\r\n                switch (matches[1]) {\r\n                  case \"realm\":\r\n                    realm = matches[2];\r\n                    break;\r\n\r\n                  case \"nonce\":\r\n                    nonce = matches[2];\r\n                    break;\r\n\r\n                  case \"qop\":\r\n                    qop = matches[2];\r\n                    break;\r\n\r\n                  case \"host\":\r\n                    host = matches[2];\r\n                    break;\r\n                }\r\n              }\r\n\r\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\r\n\r\n              if (host !== null) {\r\n                digest_uri = digest_uri + \"/\" + host;\r\n              }\r\n\r\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\r\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\r\n              var A2 = 'AUTHENTICATE:' + digest_uri;\r\n              var responseText = \"\";\r\n              responseText += 'charset=utf-8,';\r\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\r\n              responseText += 'realm=' + this._quote(realm) + ',';\r\n              responseText += 'nonce=' + this._quote(nonce) + ',';\r\n              responseText += 'nc=00000001,';\r\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\r\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\r\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\r\n              responseText += 'qop=auth';\r\n\r\n              this.onChallenge = function () {\r\n                return \"\";\r\n              };\r\n\r\n              return responseText;\r\n            };\r\n            /** PrivateConstructor: SASLOAuthBearer\r\n             *  SASL OAuth Bearer authentication.\r\n             */\r\n\r\n\r\n            Strophe.SASLOAuthBearer = function () {};\r\n\r\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\r\n\r\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\r\n              return connection.pass !== null;\r\n            };\r\n\r\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\r\n              var auth_str = 'n,';\r\n\r\n              if (connection.authcid !== null) {\r\n                auth_str = auth_str + 'a=' + connection.authzid;\r\n              }\r\n\r\n              auth_str = auth_str + ',';\r\n              auth_str = auth_str + \"\\x01\";\r\n              auth_str = auth_str + 'auth=Bearer ';\r\n              auth_str = auth_str + connection.pass;\r\n              auth_str = auth_str + \"\\x01\";\r\n              auth_str = auth_str + \"\\x01\";\r\n              return utils.utf16to8(auth_str);\r\n            };\r\n            /** PrivateConstructor: SASLExternal\r\n             *  SASL EXTERNAL authentication.\r\n             *\r\n             *  The EXTERNAL mechanism allows a client to request the server to use\r\n             *  credentials established by means external to the mechanism to\r\n             *  authenticate the client. The external means may be, for instance,\r\n             *  TLS services.\r\n             */\r\n\r\n\r\n            Strophe.SASLExternal = function () {};\r\n\r\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\r\n\r\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\r\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\r\n               * authcid contained or implied in the client certificate is the JID (i.e.\r\n               * authzid) with which the user wants to log in as.\r\n               *\r\n               * To NOT send the authzid, the user should therefore set the authcid equal\r\n               * to the JID when instantiating a new Strophe.Connection object.\r\n               */\r\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\r\n            };\r\n            /** PrivateConstructor: SASLXOAuth2\r\n             *  SASL X-OAuth2 authentication.\r\n             */\r\n\r\n\r\n            Strophe.SASLXOAuth2 = function () {};\r\n\r\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\r\n\r\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\r\n              return connection.pass !== null;\r\n            };\r\n\r\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\r\n              var auth_str = \"\\0\";\r\n\r\n              if (connection.authcid !== null) {\r\n                auth_str = auth_str + connection.authzid;\r\n              }\r\n\r\n              auth_str = auth_str + \"\\0\";\r\n              auth_str = auth_str + connection.pass;\r\n              return utils.utf16to8(auth_str);\r\n            };\r\n            var core = {\r\n              'Strophe': Strophe,\r\n              '$build': $build,\r\n              '$iq': $iq,\r\n              '$msg': $msg,\r\n              '$pres': $pres,\r\n              'SHA1': SHA1,\r\n              'MD5': MD5,\r\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\r\n              'b64_sha1': SHA1.b64_sha1,\r\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\r\n              'str_sha1': SHA1.str_sha1\r\n            };\r\n\r\n            /*\r\n                This program is distributed under the terms of the MIT license.\r\n                Please see the LICENSE file for details.\r\n\r\n                Copyright 2006-2008, OGG, LLC\r\n            */\r\n            var Strophe$1 = core.Strophe;\r\n            var $build$1 = core.$build;\r\n            /** PrivateClass: Strophe.Request\r\n             *  _Private_ helper class that provides a cross implementation abstraction\r\n             *  for a BOSH related XMLHttpRequest.\r\n             *\r\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\r\n             *  information.  It is not meant to be used from user's code.\r\n             */\r\n\r\n            /** PrivateConstructor: Strophe.Request\r\n             *  Create and initialize a new Strophe.Request object.\r\n             *\r\n             *  Parameters:\r\n             *    (XMLElement) elem - The XML data to be sent in the request.\r\n             *    (Function) func - The function that will be called when the\r\n             *      XMLHttpRequest readyState changes.\r\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\r\n             *    (Integer) sends - The number of times this same request has been sent.\r\n             */\r\n\r\n            Strophe$1.Request = function (elem, func, rid, sends) {\r\n              this.id = ++Strophe$1._requestId;\r\n              this.xmlData = elem;\r\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\r\n              // from this one.\r\n\r\n              this.origFunc = func;\r\n              this.func = func;\r\n              this.rid = rid;\r\n              this.date = NaN;\r\n              this.sends = sends || 0;\r\n              this.abort = false;\r\n              this.dead = null;\r\n\r\n              this.age = function () {\r\n                if (!this.date) {\r\n                  return 0;\r\n                }\r\n\r\n                var now = new Date();\r\n                return (now - this.date) / 1000;\r\n              };\r\n\r\n              this.timeDead = function () {\r\n                if (!this.dead) {\r\n                  return 0;\r\n                }\r\n\r\n                var now = new Date();\r\n                return (now - this.dead) / 1000;\r\n              };\r\n\r\n              this.xhr = this._newXHR();\r\n            };\r\n\r\n            Strophe$1.Request.prototype = {\r\n              /** PrivateFunction: getResponse\r\n               *  Get a response from the underlying XMLHttpRequest.\r\n               *\r\n               *  This function attempts to get a response from the request and checks\r\n               *  for errors.\r\n               *\r\n               *  Throws:\r\n               *    \"parsererror\" - A parser error occured.\r\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\r\n               *\r\n               *  Returns:\r\n               *    The DOM element tree of the response.\r\n               */\r\n              getResponse: function getResponse() {\r\n                var node = null;\r\n\r\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\r\n                  node = this.xhr.responseXML.documentElement;\r\n\r\n                  if (node.tagName === \"parsererror\") {\r\n                    Strophe$1.error(\"invalid response received\");\r\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\r\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\r\n                    throw new Error(\"parsererror\");\r\n                  }\r\n                } else if (this.xhr.responseText) {\r\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\r\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\r\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\r\n\r\n                  if (!node) {\r\n                    throw new Error('Parsing produced null node');\r\n                  } else if (node.querySelector('parsererror')) {\r\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\r\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\r\n                    var error = new Error();\r\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\r\n                    throw error;\r\n                  }\r\n                }\r\n\r\n                return node;\r\n              },\r\n\r\n              /** PrivateFunction: _newXHR\r\n               *  _Private_ helper function to create XMLHttpRequests.\r\n               *\r\n               *  This function creates XMLHttpRequests across all implementations.\r\n               *\r\n               *  Returns:\r\n               *    A new XMLHttpRequest.\r\n               */\r\n              _newXHR: function _newXHR() {\r\n                var xhr = null;\r\n\r\n                if (window.XMLHttpRequest) {\r\n                  xhr = new XMLHttpRequest();\r\n\r\n                  if (xhr.overrideMimeType) {\r\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\r\n                  }\r\n                } else if (window.ActiveXObject) {\r\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n                } // use Function.bind() to prepend ourselves as an argument\r\n\r\n\r\n                xhr.onreadystatechange = this.func.bind(null, this);\r\n                return xhr;\r\n              }\r\n            };\r\n            /** Class: Strophe.Bosh\r\n             *  _Private_ helper class that handles BOSH Connections\r\n             *\r\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\r\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\r\n             */\r\n\r\n            /** File: bosh.js\r\n             *  A JavaScript library to enable BOSH in Strophejs.\r\n             *\r\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\r\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\r\n             *  More information on BOSH can be found in XEP 124.\r\n             */\r\n\r\n            /** PrivateConstructor: Strophe.Bosh\r\n             *  Create and initialize a Strophe.Bosh object.\r\n             *\r\n             *  Parameters:\r\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Bosh object.\r\n             */\r\n\r\n            Strophe$1.Bosh = function (connection) {\r\n              this._conn = connection;\r\n              /* request id for body tags */\r\n\r\n              this.rid = Math.floor(Math.random() * 4294967295);\r\n              /* The current session ID. */\r\n\r\n              this.sid = null; // default BOSH values\r\n\r\n              this.hold = 1;\r\n              this.wait = 60;\r\n              this.window = 5;\r\n              this.errors = 0;\r\n              this.inactivity = null;\r\n              this.lastResponseHeaders = null;\r\n              this._requests = [];\r\n            };\r\n\r\n            Strophe$1.Bosh.prototype = {\r\n              /** Variable: strip\r\n               *\r\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\r\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\r\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\r\n               *\r\n               *  > Strophe.Bosh.prototype.strip = \"body\";\r\n               *\r\n               *  This will enable stripping of the body tag in both\r\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\r\n               */\r\n              strip: null,\r\n\r\n              /** PrivateFunction: _buildBody\r\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\r\n               *\r\n               *  Returns:\r\n               *    A Strophe.Builder with a <body/> element.\r\n               */\r\n              _buildBody: function _buildBody() {\r\n                var bodyWrap = $build$1('body', {\r\n                  'rid': this.rid++,\r\n                  'xmlns': Strophe$1.NS.HTTPBIND\r\n                });\r\n\r\n                if (this.sid !== null) {\r\n                  bodyWrap.attrs({\r\n                    'sid': this.sid\r\n                  });\r\n                }\r\n\r\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\r\n                  this._cacheSession();\r\n                }\r\n\r\n                return bodyWrap;\r\n              },\r\n\r\n              /** PrivateFunction: _reset\r\n               *  Reset the connection.\r\n               *\r\n               *  This function is called by the reset function of the Strophe Connection\r\n               */\r\n              _reset: function _reset() {\r\n                this.rid = Math.floor(Math.random() * 4294967295);\r\n                this.sid = null;\r\n                this.errors = 0;\r\n\r\n                if (this._conn._sessionCachingSupported()) {\r\n                  window.sessionStorage.removeItem('strophe-bosh-session');\r\n                }\r\n\r\n                this._conn.nextValidRid(this.rid);\r\n              },\r\n\r\n              /** PrivateFunction: _connect\r\n               *  _Private_ function that initializes the BOSH connection.\r\n               *\r\n               *  Creates and sends the Request that initializes the BOSH connection.\r\n               */\r\n              _connect: function _connect(wait, hold, route) {\r\n                this.wait = wait || this.wait;\r\n                this.hold = hold || this.hold;\r\n                this.errors = 0;\r\n\r\n                var body = this._buildBody().attrs({\r\n                  \"to\": this._conn.domain,\r\n                  \"xml:lang\": \"en\",\r\n                  \"wait\": this.wait,\r\n                  \"hold\": this.hold,\r\n                  \"content\": \"text/xml; charset=utf-8\",\r\n                  \"ver\": \"1.6\",\r\n                  \"xmpp:version\": \"1.0\",\r\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\r\n                });\r\n\r\n                if (route) {\r\n                  body.attrs({\r\n                    'route': route\r\n                  });\r\n                }\r\n\r\n                var _connect_cb = this._conn._connect_cb;\r\n\r\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\r\n\r\n                this._throttledRequestHandler();\r\n              },\r\n\r\n              /** PrivateFunction: _attach\r\n               *  Attach to an already created and authenticated BOSH session.\r\n               *\r\n               *  This function is provided to allow Strophe to attach to BOSH\r\n               *  sessions which have been created externally, perhaps by a Web\r\n               *  application.  This is often used to support auto-login type features\r\n               *  without putting user credentials into the page.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - The full JID that is bound by the session.\r\n               *    (String) sid - The SID of the BOSH session.\r\n               *    (String) rid - The current RID of the BOSH session.  This RID\r\n               *      will be used by the next request.\r\n               *    (Function) callback The connect callback function.\r\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n               *      time the server will wait before returning an empty result for\r\n               *      a request.  The default setting of 60 seconds is recommended.\r\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\r\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n               *      number of connections the server will hold at one time.  This\r\n               *      should almost always be set to 1 (the default).\r\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n               *      allowed range of request ids that are valid.  The default is 5.\r\n               */\r\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\r\n                this._conn.jid = jid;\r\n                this.sid = sid;\r\n                this.rid = rid;\r\n                this._conn.connect_callback = callback;\r\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\r\n                this._conn.authenticated = true;\r\n                this._conn.connected = true;\r\n                this.wait = wait || this.wait;\r\n                this.hold = hold || this.hold;\r\n                this.window = wind || this.window;\r\n\r\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\r\n              },\r\n\r\n              /** PrivateFunction: _restore\r\n               *  Attempt to restore a cached BOSH session\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - The full JID that is bound by the session.\r\n               *      This parameter is optional but recommended, specifically in cases\r\n               *      where prebinded BOSH sessions are used where it's important to know\r\n               *      that the right session is being restored.\r\n               *    (Function) callback The connect callback function.\r\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n               *      time the server will wait before returning an empty result for\r\n               *      a request.  The default setting of 60 seconds is recommended.\r\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\r\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n               *      number of connections the server will hold at one time.  This\r\n               *      should almost always be set to 1 (the default).\r\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n               *      allowed range of request ids that are valid.  The default is 5.\r\n               */\r\n              _restore: function _restore(jid, callback, wait, hold, wind) {\r\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\r\n\r\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\r\n                // we compare only the domains:\r\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\r\n                  this._conn.restored = true;\r\n\r\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\r\n                } else {\r\n                  var error = new Error(\"_restore: no restoreable session.\");\r\n                  error.name = \"StropheSessionError\";\r\n                  throw error;\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _cacheSession\r\n               *  _Private_ handler for the beforeunload event.\r\n               *\r\n               *  This handler is used to process the Bosh-part of the initial request.\r\n               *  Parameters:\r\n               *    (Strophe.Request) bodyWrap - The received stanza.\r\n               */\r\n              _cacheSession: function _cacheSession() {\r\n                if (this._conn.authenticated) {\r\n                  if (this._conn.jid && this.rid && this.sid) {\r\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\r\n                      'jid': this._conn.jid,\r\n                      'rid': this.rid,\r\n                      'sid': this.sid\r\n                    }));\r\n                  }\r\n                } else {\r\n                  window.sessionStorage.removeItem('strophe-bosh-session');\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _connect_cb\r\n               *  _Private_ handler for initial connection request.\r\n               *\r\n               *  This handler is used to process the Bosh-part of the initial request.\r\n               *  Parameters:\r\n               *    (Strophe.Request) bodyWrap - The received stanza.\r\n               */\r\n              _connect_cb: function _connect_cb(bodyWrap) {\r\n                var typ = bodyWrap.getAttribute(\"type\");\r\n\r\n                if (typ !== null && typ === \"terminate\") {\r\n                  // an error occurred\r\n                  var cond = bodyWrap.getAttribute(\"condition\");\r\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\r\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\r\n\r\n                  if (cond !== null) {\r\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\r\n                      cond = \"conflict\";\r\n                    }\r\n\r\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\r\n                  } else {\r\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\r\n                  }\r\n\r\n                  this._conn._doDisconnect(cond);\r\n\r\n                  return Strophe$1.Status.CONNFAIL;\r\n                } // check to make sure we don't overwrite these if _connect_cb is\r\n                // called multiple times in the case of missing stream:features\r\n\r\n\r\n                if (!this.sid) {\r\n                  this.sid = bodyWrap.getAttribute(\"sid\");\r\n                }\r\n\r\n                var wind = bodyWrap.getAttribute('requests');\r\n\r\n                if (wind) {\r\n                  this.window = parseInt(wind, 10);\r\n                }\r\n\r\n                var hold = bodyWrap.getAttribute('hold');\r\n\r\n                if (hold) {\r\n                  this.hold = parseInt(hold, 10);\r\n                }\r\n\r\n                var wait = bodyWrap.getAttribute('wait');\r\n\r\n                if (wait) {\r\n                  this.wait = parseInt(wait, 10);\r\n                }\r\n\r\n                var inactivity = bodyWrap.getAttribute('inactivity');\r\n\r\n                if (inactivity) {\r\n                  this.inactivity = parseInt(inactivity, 10);\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _disconnect\r\n               *  _Private_ part of Connection.disconnect for Bosh\r\n               *\r\n               *  Parameters:\r\n               *    (Request) pres - This stanza will be sent before disconnecting.\r\n               */\r\n              _disconnect: function _disconnect(pres) {\r\n                this._sendTerminate(pres);\r\n              },\r\n\r\n              /** PrivateFunction: _doDisconnect\r\n               *  _Private_ function to disconnect.\r\n               *\r\n               *  Resets the SID and RID.\r\n               */\r\n              _doDisconnect: function _doDisconnect() {\r\n                this.sid = null;\r\n                this.rid = Math.floor(Math.random() * 4294967295);\r\n\r\n                if (this._conn._sessionCachingSupported()) {\r\n                  window.sessionStorage.removeItem('strophe-bosh-session');\r\n                }\r\n\r\n                this._conn.nextValidRid(this.rid);\r\n              },\r\n\r\n              /** PrivateFunction: _emptyQueue\r\n               * _Private_ function to check if the Request queue is empty.\r\n               *\r\n               *  Returns:\r\n               *    True, if there are no Requests queued, False otherwise.\r\n               */\r\n              _emptyQueue: function _emptyQueue() {\r\n                return this._requests.length === 0;\r\n              },\r\n\r\n              /** PrivateFunction: _callProtocolErrorHandlers\r\n               *  _Private_ function to call error handlers registered for HTTP errors.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) req - The request that is changing readyState.\r\n               */\r\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\r\n                var reqStatus = this._getRequestStatus(req);\r\n\r\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\r\n\r\n                if (err_callback) {\r\n                  err_callback.call(this, reqStatus);\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _hitError\r\n               *  _Private_ function to handle the error count.\r\n               *\r\n               *  Requests are resent automatically until their error count reaches\r\n               *  5.  Each time an error is encountered, this function is called to\r\n               *  increment the count and disconnect if the count is too high.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) reqStatus - The request status.\r\n               */\r\n              _hitError: function _hitError(reqStatus) {\r\n                this.errors++;\r\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\r\n\r\n                if (this.errors > 4) {\r\n                  this._conn._onDisconnectTimeout();\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _no_auth_received\r\n               *\r\n               * Called on stream start/restart when no stream:features\r\n               * has been received and sends a blank poll request.\r\n               */\r\n              _no_auth_received: function _no_auth_received(callback) {\r\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\r\n\r\n                if (callback) {\r\n                  callback = callback.bind(this._conn);\r\n                } else {\r\n                  callback = this._conn._connect_cb.bind(this._conn);\r\n                }\r\n\r\n                var body = this._buildBody();\r\n\r\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\r\n\r\n                this._throttledRequestHandler();\r\n              },\r\n\r\n              /** PrivateFunction: _onDisconnectTimeout\r\n               *  _Private_ timeout handler for handling non-graceful disconnection.\r\n               *\r\n               *  Cancels all remaining Requests and clears the queue.\r\n               */\r\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\r\n                this._abortAllRequests();\r\n              },\r\n\r\n              /** PrivateFunction: _abortAllRequests\r\n               *  _Private_ helper function that makes sure all pending requests are aborted.\r\n               */\r\n              _abortAllRequests: function _abortAllRequests() {\r\n                while (this._requests.length > 0) {\r\n                  var req = this._requests.pop();\r\n\r\n                  req.abort = true;\r\n                  req.xhr.abort();\r\n\r\n                  req.xhr.onreadystatechange = function () {};\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _onIdle\r\n               *  _Private_ handler called by Strophe.Connection._onIdle\r\n               *\r\n               *  Sends all queued Requests or polls with empty Request if there are none.\r\n               */\r\n              _onIdle: function _onIdle() {\r\n                var data = this._conn._data; // if no requests are in progress, poll\r\n\r\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\r\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\r\n                  data.push(null);\r\n                }\r\n\r\n                if (this._conn.paused) {\r\n                  return;\r\n                }\r\n\r\n                if (this._requests.length < 2 && data.length > 0) {\r\n                  var body = this._buildBody();\r\n\r\n                  for (var i = 0; i < data.length; i++) {\r\n                    if (data[i] !== null) {\r\n                      if (data[i] === \"restart\") {\r\n                        body.attrs({\r\n                          \"to\": this._conn.domain,\r\n                          \"xml:lang\": \"en\",\r\n                          \"xmpp:restart\": \"true\",\r\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\r\n                        });\r\n                      } else {\r\n                        body.cnode(data[i]).up();\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  delete this._conn._data;\r\n                  this._conn._data = [];\r\n\r\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\r\n\r\n                  this._throttledRequestHandler();\r\n                }\r\n\r\n                if (this._requests.length > 0) {\r\n                  var time_elapsed = this._requests[0].age();\r\n\r\n                  if (this._requests[0].dead !== null) {\r\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\r\n                      this._throttledRequestHandler();\r\n                    }\r\n                  }\r\n\r\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\r\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\r\n\r\n                    this._throttledRequestHandler();\r\n                  }\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _getRequestStatus\r\n               *\r\n               *  Returns the HTTP status code from a Strophe.Request\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) req - The Strophe.Request instance.\r\n               *    (Integer) def - The default value that should be returned if no\r\n               *          status value was found.\r\n               */\r\n              _getRequestStatus: function _getRequestStatus(req, def) {\r\n                var reqStatus;\r\n\r\n                if (req.xhr.readyState === 4) {\r\n                  try {\r\n                    reqStatus = req.xhr.status;\r\n                  } catch (e) {\r\n                    // ignore errors from undefined status attribute. Works\r\n                    // around a browser bug\r\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\r\n                  }\r\n                }\r\n\r\n                if (typeof reqStatus === \"undefined\") {\r\n                  reqStatus = typeof def === 'number' ? def : 0;\r\n                }\r\n\r\n                return reqStatus;\r\n              },\r\n\r\n              /** PrivateFunction: _onRequestStateChange\r\n               *  _Private_ handler for Strophe.Request state changes.\r\n               *\r\n               *  This function is called when the XMLHttpRequest readyState changes.\r\n               *  It contains a lot of error handling logic for the many ways that\r\n               *  requests can fail, and calls the request callback when requests\r\n               *  succeed.\r\n               *\r\n               *  Parameters:\r\n               *    (Function) func - The handler for the request.\r\n               *    (Strophe.Request) req - The request that is changing readyState.\r\n               */\r\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\r\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\r\n\r\n                if (req.abort) {\r\n                  req.abort = false;\r\n                  return;\r\n                }\r\n\r\n                if (req.xhr.readyState !== 4) {\r\n                  // The request is not yet complete\r\n                  return;\r\n                }\r\n\r\n                var reqStatus = this._getRequestStatus(req);\r\n\r\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\r\n\r\n                if (this.disconnecting && reqStatus >= 400) {\r\n                  this._hitError(reqStatus);\r\n\r\n                  this._callProtocolErrorHandlers(req);\r\n\r\n                  return;\r\n                }\r\n\r\n                var valid_request = reqStatus > 0 && reqStatus < 500;\r\n                var too_many_retries = req.sends > this._conn.maxRetries;\r\n\r\n                if (valid_request || too_many_retries) {\r\n                  // remove from internal queue\r\n                  this._removeRequest(req);\r\n\r\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\r\n                }\r\n\r\n                if (reqStatus === 200) {\r\n                  // request succeeded\r\n                  var reqIs0 = this._requests[0] === req;\r\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\r\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\r\n                  // restart the other - both will be in the first spot, as the\r\n                  // completed request has been removed from the queue already\r\n\r\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\r\n                    this._restartRequest(0);\r\n                  }\r\n\r\n                  this._conn.nextValidRid(Number(req.rid) + 1);\r\n\r\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\r\n                  func(req); // call handler\r\n\r\n                  this.errors = 0;\r\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\r\n                  // request failed\r\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\r\n\r\n                  this._hitError(reqStatus);\r\n\r\n                  this._callProtocolErrorHandlers(req);\r\n\r\n                  if (reqStatus >= 400 && reqStatus < 500) {\r\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\r\n\r\n                    this._conn._doDisconnect();\r\n                  }\r\n                } else {\r\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\r\n                }\r\n\r\n                if (!valid_request && !too_many_retries) {\r\n                  this._throttledRequestHandler();\r\n                } else if (too_many_retries && !this._conn.connected) {\r\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _processRequest\r\n               *  _Private_ function to process a request in the queue.\r\n               *\r\n               *  This function takes requests off the queue and sends them and\r\n               *  restarts dead requests.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) i - The index of the request in the queue.\r\n               */\r\n              _processRequest: function _processRequest(i) {\r\n                var _this = this;\r\n\r\n                var req = this._requests[i];\r\n\r\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\r\n\r\n\r\n                if (req.sends > this._conn.maxRetries) {\r\n                  this._conn._onDisconnectTimeout();\r\n\r\n                  return;\r\n                }\r\n\r\n                var time_elapsed = req.age();\r\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\r\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\r\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\r\n\r\n                if (primary_timeout || secondary_timeout || server_error) {\r\n                  if (secondary_timeout) {\r\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\r\n                  }\r\n\r\n                  req.abort = true;\r\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\r\n\r\n                  req.xhr.onreadystatechange = function () {};\r\n\r\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\r\n                  req = this._requests[i];\r\n                }\r\n\r\n                if (req.xhr.readyState === 0) {\r\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\r\n\r\n                  try {\r\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\r\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\r\n\r\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\r\n                      // IE9 doesn't have setRequestHeader\r\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\r\n                    }\r\n\r\n                    if (this._conn.options.withCredentials) {\r\n                      req.xhr.withCredentials = true;\r\n                    }\r\n                  } catch (e2) {\r\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\r\n\r\n                    if (!this._conn.connected) {\r\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\r\n                    }\r\n\r\n                    this._conn.disconnect();\r\n\r\n                    return;\r\n                  } // Fires the XHR request -- may be invoked immediately\r\n                  // or on a gradually expanding retry window for reconnects\r\n\r\n\r\n                  var sendFunc = function sendFunc() {\r\n                    req.date = new Date();\r\n\r\n                    if (_this._conn.options.customHeaders) {\r\n                      var headers = _this._conn.options.customHeaders;\r\n\r\n                      for (var header in headers) {\r\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\r\n                          req.xhr.setRequestHeader(header, headers[header]);\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    req.xhr.send(req.data);\r\n                  }; // Implement progressive backoff for reconnects --\r\n                  // First retry (send === 1) should also be instantaneous\r\n\r\n\r\n                  if (req.sends > 1) {\r\n                    // Using a cube of the retry number creates a nicely\r\n                    // expanding retry window\r\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\r\n                    setTimeout(function () {\r\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\r\n                      sendFunc();\r\n                    }, backoff);\r\n                  } else {\r\n                    sendFunc();\r\n                  }\r\n\r\n                  req.sends++;\r\n\r\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\r\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\r\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\r\n                    } else {\r\n                      this._conn.xmlOutput(req.xmlData);\r\n                    }\r\n                  }\r\n\r\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\r\n                    this._conn.rawOutput(req.data);\r\n                  }\r\n                } else {\r\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _removeRequest\r\n               *  _Private_ function to remove a request from the queue.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) req - The request to remove.\r\n               */\r\n              _removeRequest: function _removeRequest(req) {\r\n                Strophe$1.debug(\"removing request\");\r\n\r\n                for (var i = this._requests.length - 1; i >= 0; i--) {\r\n                  if (req === this._requests[i]) {\r\n                    this._requests.splice(i, 1);\r\n                  }\r\n                } // IE6 fails on setting to null, so set to empty function\r\n\r\n\r\n                req.xhr.onreadystatechange = function () {};\r\n\r\n                this._throttledRequestHandler();\r\n              },\r\n\r\n              /** PrivateFunction: _restartRequest\r\n               *  _Private_ function to restart a request that is presumed dead.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) i - The index of the request in the queue.\r\n               */\r\n              _restartRequest: function _restartRequest(i) {\r\n                var req = this._requests[i];\r\n\r\n                if (req.dead === null) {\r\n                  req.dead = new Date();\r\n                }\r\n\r\n                this._processRequest(i);\r\n              },\r\n\r\n              /** PrivateFunction: _reqToData\r\n               * _Private_ function to get a stanza out of a request.\r\n               *\r\n               * Tries to extract a stanza out of a Request Object.\r\n               * When this fails the current connection will be disconnected.\r\n               *\r\n               *  Parameters:\r\n               *    (Object) req - The Request.\r\n               *\r\n               *  Returns:\r\n               *    The stanza that was passed.\r\n               */\r\n              _reqToData: function _reqToData(req) {\r\n                try {\r\n                  return req.getResponse();\r\n                } catch (e) {\r\n                  if (e.message !== \"parsererror\") {\r\n                    throw e;\r\n                  }\r\n\r\n                  this._conn.disconnect(\"strophe-parsererror\");\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _sendTerminate\r\n               *  _Private_ function to send initial disconnect sequence.\r\n               *\r\n               *  This is the first step in a graceful disconnect.  It sends\r\n               *  the BOSH server a terminate body and includes an unavailable\r\n               *  presence if authentication has completed.\r\n               */\r\n              _sendTerminate: function _sendTerminate(pres) {\r\n                Strophe$1.debug(\"_sendTerminate was called\");\r\n\r\n                var body = this._buildBody().attrs({\r\n                  type: \"terminate\"\r\n                });\r\n\r\n                if (pres) {\r\n                  body.cnode(pres.tree());\r\n                }\r\n\r\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\r\n\r\n                this._requests.push(req);\r\n\r\n                this._throttledRequestHandler();\r\n              },\r\n\r\n              /** PrivateFunction: _send\r\n               *  _Private_ part of the Connection.send function for BOSH\r\n               *\r\n               * Just triggers the RequestHandler to send the messages that are in the queue\r\n               */\r\n              _send: function _send() {\r\n                var _this2 = this;\r\n\r\n                clearTimeout(this._conn._idleTimeout);\r\n\r\n                this._throttledRequestHandler();\r\n\r\n                this._conn._idleTimeout = setTimeout(function () {\r\n                  return _this2._conn._onIdle();\r\n                }, 100);\r\n              },\r\n\r\n              /** PrivateFunction: _sendRestart\r\n               *\r\n               *  Send an xmpp:restart stanza.\r\n               */\r\n              _sendRestart: function _sendRestart() {\r\n                this._throttledRequestHandler();\r\n\r\n                clearTimeout(this._conn._idleTimeout);\r\n              },\r\n\r\n              /** PrivateFunction: _throttledRequestHandler\r\n               *  _Private_ function to throttle requests to the connection window.\r\n               *\r\n               *  This function makes sure we don't send requests so fast that the\r\n               *  request ids overflow the connection window in the case that one\r\n               *  request died.\r\n               */\r\n              _throttledRequestHandler: function _throttledRequestHandler() {\r\n                if (!this._requests) {\r\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\r\n                } else {\r\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\r\n                }\r\n\r\n                if (!this._requests || this._requests.length === 0) {\r\n                  return;\r\n                }\r\n\r\n                if (this._requests.length > 0) {\r\n                  this._processRequest(0);\r\n                }\r\n\r\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\r\n                  this._processRequest(1);\r\n                }\r\n              }\r\n            };\r\n\r\n            /*\r\n                This program is distributed under the terms of the MIT license.\r\n                Please see the LICENSE file for details.\r\n\r\n                Copyright 2006-2008, OGG, LLC\r\n            */\r\n            var Strophe$2 = core.Strophe;\r\n            var $build$2 = core.$build;\r\n            /** Class: Strophe.WebSocket\r\n             *  _Private_ helper class that handles WebSocket Connections\r\n             *\r\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\r\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\r\n             */\r\n\r\n            /** File: websocket.js\r\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\r\n             *\r\n             *  This file implements XMPP over WebSockets for Strophejs.\r\n             *  If a Connection is established with a Websocket url (ws://...)\r\n             *  Strophe will use WebSockets.\r\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\r\n             *  http://tools.ietf.org/html/rfc7395\r\n             *\r\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\r\n             */\r\n\r\n            /** PrivateConstructor: Strophe.Websocket\r\n             *  Create and initialize a Strophe.WebSocket object.\r\n             *  Currently only sets the connection Object.\r\n             *\r\n             *  Parameters:\r\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.WebSocket object.\r\n             */\r\n\r\n            Strophe$2.Websocket = function (connection) {\r\n              this._conn = connection;\r\n              this.strip = \"wrapper\";\r\n              var service = connection.service;\r\n\r\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\r\n                // If the service is not an absolute URL, assume it is a path and put the absolute\r\n                // URL together from options, current URL and the path.\r\n                var new_service = \"\";\r\n\r\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\r\n                  new_service += \"ws\";\r\n                } else {\r\n                  new_service += \"wss\";\r\n                }\r\n\r\n                new_service += \"://\" + window.location.host;\r\n\r\n                if (service.indexOf(\"/\") !== 0) {\r\n                  new_service += window.location.pathname + service;\r\n                } else {\r\n                  new_service += service;\r\n                }\r\n\r\n                connection.service = new_service;\r\n              }\r\n            };\r\n\r\n            Strophe$2.Websocket.prototype = {\r\n              /** PrivateFunction: _buildStream\r\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\r\n               *\r\n               *  Returns:\r\n               *    A Strophe.Builder with a <stream> element.\r\n               */\r\n              _buildStream: function _buildStream() {\r\n                return $build$2(\"open\", {\r\n                  \"xmlns\": Strophe$2.NS.FRAMING,\r\n                  \"to\": this._conn.domain,\r\n                  \"version\": '1.0'\r\n                });\r\n              },\r\n\r\n              /** PrivateFunction: _check_streamerror\r\n               * _Private_ checks a message for stream:error\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) bodyWrap - The received stanza.\r\n               *    connectstatus - The ConnectStatus that will be set on error.\r\n               *  Returns:\r\n               *     true if there was a streamerror, false otherwise.\r\n               */\r\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\r\n                var errors;\r\n\r\n                if (bodyWrap.getElementsByTagNameNS) {\r\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\r\n                } else {\r\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\r\n                }\r\n\r\n                if (errors.length === 0) {\r\n                  return false;\r\n                }\r\n\r\n                var error = errors[0];\r\n                var condition = \"\";\r\n                var text = \"\";\r\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\r\n\r\n                for (var i = 0; i < error.childNodes.length; i++) {\r\n                  var e = error.childNodes[i];\r\n\r\n                  if (e.getAttribute(\"xmlns\") !== ns) {\r\n                    break;\r\n                  }\r\n\r\n                  if (e.nodeName === \"text\") {\r\n                    text = e.textContent;\r\n                  } else {\r\n                    condition = e.nodeName;\r\n                  }\r\n                }\r\n\r\n                var errorString = \"WebSocket stream error: \";\r\n\r\n                if (condition) {\r\n                  errorString += condition;\r\n                } else {\r\n                  errorString += \"unknown\";\r\n                }\r\n\r\n                if (text) {\r\n                  errorString += \" - \" + text;\r\n                }\r\n\r\n                Strophe$2.error(errorString); // close the connection on stream_error\r\n\r\n                this._conn._changeConnectStatus(connectstatus, condition);\r\n\r\n                this._conn._doDisconnect();\r\n\r\n                return true;\r\n              },\r\n\r\n              /** PrivateFunction: _reset\r\n               *  Reset the connection.\r\n               *\r\n               *  This function is called by the reset function of the Strophe Connection.\r\n               *  Is not needed by WebSockets.\r\n               */\r\n              _reset: function _reset() {\r\n                return;\r\n              },\r\n\r\n              /** PrivateFunction: _connect\r\n               *  _Private_ function called by Strophe.Connection.connect\r\n               *\r\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\r\n               *  Does nothing if there already is a WebSocket.\r\n               */\r\n              _connect: function _connect() {\r\n                // Ensure that there is no open WebSocket from a previous Connection.\r\n                this._closeSocket(); // Create the new WobSocket\r\n\r\n\r\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\r\n                this.socket.onopen = this._onOpen.bind(this);\r\n                this.socket.onerror = this._onError.bind(this);\r\n                this.socket.onclose = this._onClose.bind(this);\r\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\r\n              },\r\n\r\n              /** PrivateFunction: _connect_cb\r\n               *  _Private_ function called by Strophe.Connection._connect_cb\r\n               *\r\n               * checks for stream:error\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) bodyWrap - The received stanza.\r\n               */\r\n              _connect_cb: function _connect_cb(bodyWrap) {\r\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\r\n\r\n                if (error) {\r\n                  return Strophe$2.Status.CONNFAIL;\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _handleStreamStart\r\n               * _Private_ function that checks the opening <open /> tag for errors.\r\n               *\r\n               * Disconnects if there is an error and returns false, true otherwise.\r\n               *\r\n               *  Parameters:\r\n               *    (Node) message - Stanza containing the <open /> tag.\r\n               */\r\n              _handleStreamStart: function _handleStreamStart(message) {\r\n                var error = false; // Check for errors in the <open /> tag\r\n\r\n                var ns = message.getAttribute(\"xmlns\");\r\n\r\n                if (typeof ns !== \"string\") {\r\n                  error = \"Missing xmlns in <open />\";\r\n                } else if (ns !== Strophe$2.NS.FRAMING) {\r\n                  error = \"Wrong xmlns in <open />: \" + ns;\r\n                }\r\n\r\n                var ver = message.getAttribute(\"version\");\r\n\r\n                if (typeof ver !== \"string\") {\r\n                  error = \"Missing version in <open />\";\r\n                } else if (ver !== \"1.0\") {\r\n                  error = \"Wrong version in <open />: \" + ver;\r\n                }\r\n\r\n                if (error) {\r\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\r\n\r\n                  this._conn._doDisconnect();\r\n\r\n                  return false;\r\n                }\r\n\r\n                return true;\r\n              },\r\n\r\n              /** PrivateFunction: _connect_cb_wrapper\r\n               * _Private_ function that handles the first connection messages.\r\n               *\r\n               * On receiving an opening stream tag this callback replaces itself with the real\r\n               * message handler. On receiving a stream error the connection is terminated.\r\n               */\r\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\r\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\r\n                  // Strip the XML Declaration, if there is one\r\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\r\n                  if (data === '') return;\r\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\r\n\r\n                  this._conn.xmlInput(streamStart);\r\n\r\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\r\n\r\n\r\n                  if (this._handleStreamStart(streamStart)) {\r\n                    //_connect_cb will check for stream:error and disconnect on error\r\n                    this._connect_cb(streamStart);\r\n                  }\r\n                } else if (message.data.indexOf(\"<close \") === 0) {\r\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\r\n                  // Parse the raw string to an XML element\r\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\r\n\r\n                  this._conn.xmlInput(parsedMessage);\r\n\r\n                  this._conn.rawInput(message.data);\r\n\r\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\r\n\r\n                  if (see_uri) {\r\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\r\n\r\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\r\n\r\n                    if (isSecureRedirect) {\r\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\r\n\r\n                      this._conn.reset();\r\n\r\n                      this._conn.service = see_uri;\r\n\r\n                      this._connect();\r\n                    }\r\n                  } else {\r\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\r\n\r\n                    this._conn._doDisconnect();\r\n                  }\r\n                } else {\r\n                  var string = this._streamWrap(message.data);\r\n\r\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\r\n                  this.socket.onmessage = this._onMessage.bind(this);\r\n\r\n                  this._conn._connect_cb(elem, null, message.data);\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _disconnect\r\n               *  _Private_ function called by Strophe.Connection.disconnect\r\n               *\r\n               *  Disconnects and sends a last stanza if one is given\r\n               *\r\n               *  Parameters:\r\n               *    (Request) pres - This stanza will be sent before disconnecting.\r\n               */\r\n              _disconnect: function _disconnect(pres) {\r\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\r\n                  if (pres) {\r\n                    this._conn.send(pres);\r\n                  }\r\n\r\n                  var close = $build$2(\"close\", {\r\n                    \"xmlns\": Strophe$2.NS.FRAMING\r\n                  });\r\n\r\n                  this._conn.xmlOutput(close.tree());\r\n\r\n                  var closeString = Strophe$2.serialize(close);\r\n\r\n                  this._conn.rawOutput(closeString);\r\n\r\n                  try {\r\n                    this.socket.send(closeString);\r\n                  } catch (e) {\r\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\r\n                  }\r\n                }\r\n\r\n                this._conn._doDisconnect();\r\n              },\r\n\r\n              /** PrivateFunction: _doDisconnect\r\n               *  _Private_ function to disconnect.\r\n               *\r\n               *  Just closes the Socket for WebSockets\r\n               */\r\n              _doDisconnect: function _doDisconnect() {\r\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\r\n\r\n                this._closeSocket();\r\n              },\r\n\r\n              /** PrivateFunction _streamWrap\r\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\r\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\r\n               */\r\n              _streamWrap: function _streamWrap(stanza) {\r\n                return \"<wrapper>\" + stanza + '</wrapper>';\r\n              },\r\n\r\n              /** PrivateFunction: _closeSocket\r\n               *  _Private_ function to close the WebSocket.\r\n               *\r\n               *  Closes the socket if it is still open and deletes it\r\n               */\r\n              _closeSocket: function _closeSocket() {\r\n                if (this.socket) {\r\n                  try {\r\n                    this.socket.onclose = null;\r\n                    this.socket.onerror = null;\r\n                    this.socket.onmessage = null;\r\n                    this.socket.close();\r\n                  } catch (e) {\r\n                    Strophe$2.debug(e.message);\r\n                  }\r\n                }\r\n\r\n                this.socket = null;\r\n              },\r\n\r\n              /** PrivateFunction: _emptyQueue\r\n               * _Private_ function to check if the message queue is empty.\r\n               *\r\n               *  Returns:\r\n               *    True, because WebSocket messages are send immediately after queueing.\r\n               */\r\n              _emptyQueue: function _emptyQueue() {\r\n                return true;\r\n              },\r\n\r\n              /** PrivateFunction: _onClose\r\n               * _Private_ function to handle websockets closing.\r\n               *\r\n               * Nothing to do here for WebSockets\r\n               */\r\n              _onClose: function _onClose(e) {\r\n                if (this._conn.connected && !this._conn.disconnecting) {\r\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\r\n\r\n                  this._conn._doDisconnect();\r\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\r\n                  // in case the onError callback was not called (Safari 10 does not\r\n                  // call onerror when the initial connection fails) we need to\r\n                  // dispatch a CONNFAIL status update to be consistent with the\r\n                  // behavior on other browsers.\r\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\r\n\r\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\r\n\r\n                  this._conn._doDisconnect();\r\n                } else {\r\n                  Strophe$2.debug(\"Websocket closed\");\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _no_auth_received\r\n               *\r\n               * Called on stream start/restart when no stream:features\r\n               * has been received.\r\n               */\r\n              _no_auth_received: function _no_auth_received(callback) {\r\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\r\n\r\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\r\n\r\n                if (callback) {\r\n                  callback.call(this._conn);\r\n                }\r\n\r\n                this._conn._doDisconnect();\r\n              },\r\n\r\n              /** PrivateFunction: _onDisconnectTimeout\r\n               *  _Private_ timeout handler for handling non-graceful disconnection.\r\n               *\r\n               *  This does nothing for WebSockets\r\n               */\r\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\r\n\r\n              /** PrivateFunction: _abortAllRequests\r\n               *  _Private_ helper function that makes sure all pending requests are aborted.\r\n               */\r\n              _abortAllRequests: function _abortAllRequests() {},\r\n\r\n              /** PrivateFunction: _onError\r\n               * _Private_ function to handle websockets errors.\r\n               *\r\n               * Parameters:\r\n               * (Object) error - The websocket error.\r\n               */\r\n              _onError: function _onError(error) {\r\n                Strophe$2.error(\"Websocket error \" + error);\r\n\r\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\r\n\r\n                this._disconnect();\r\n              },\r\n\r\n              /** PrivateFunction: _onIdle\r\n               *  _Private_ function called by Strophe.Connection._onIdle\r\n               *\r\n               *  sends all queued stanzas\r\n               */\r\n              _onIdle: function _onIdle() {\r\n                var data = this._conn._data;\r\n\r\n                if (data.length > 0 && !this._conn.paused) {\r\n                  for (var i = 0; i < data.length; i++) {\r\n                    if (data[i] !== null) {\r\n                      var stanza = void 0;\r\n\r\n                      if (data[i] === \"restart\") {\r\n                        stanza = this._buildStream().tree();\r\n                      } else {\r\n                        stanza = data[i];\r\n                      }\r\n\r\n                      var rawStanza = Strophe$2.serialize(stanza);\r\n\r\n                      this._conn.xmlOutput(stanza);\r\n\r\n                      this._conn.rawOutput(rawStanza);\r\n\r\n                      this.socket.send(rawStanza);\r\n                    }\r\n                  }\r\n\r\n                  this._conn._data = [];\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _onMessage\r\n               * _Private_ function to handle websockets messages.\r\n               *\r\n               * This function parses each of the messages as if they are full documents.\r\n               * [TODO : We may actually want to use a SAX Push parser].\r\n               *\r\n               * Since all XMPP traffic starts with\r\n               *  <stream:stream version='1.0'\r\n               *                 xml:lang='en'\r\n               *                 xmlns='jabber:client'\r\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\r\n               *                 id='3697395463'\r\n               *                 from='SERVER'>\r\n               *\r\n               * The first stanza will always fail to be parsed.\r\n               *\r\n               * Additionally, the seconds stanza will always be <stream:features> with\r\n               * the stream NS defined in the previous stanza, so we need to 'force'\r\n               * the inclusion of the NS in this stanza.\r\n               *\r\n               * Parameters:\r\n               * (string) message - The websocket message.\r\n               */\r\n              _onMessage: function _onMessage(message) {\r\n                var elem; // check for closing stream\r\n\r\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\r\n\r\n                if (message.data === close) {\r\n                  this._conn.rawInput(close);\r\n\r\n                  this._conn.xmlInput(message);\r\n\r\n                  if (!this._conn.disconnecting) {\r\n                    this._conn._doDisconnect();\r\n                  }\r\n\r\n                  return;\r\n                } else if (message.data.search(\"<open \") === 0) {\r\n                  // This handles stream restarts\r\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\r\n\r\n                  if (!this._handleStreamStart(elem)) {\r\n                    return;\r\n                  }\r\n                } else {\r\n                  var data = this._streamWrap(message.data);\r\n\r\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\r\n                }\r\n\r\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\r\n                  return;\r\n                } //handle unavailable presence stanza before disconnecting\r\n\r\n\r\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\r\n                  this._conn.xmlInput(elem);\r\n\r\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\r\n                  // wait for the </stream:stream> tag before we close the connection\r\n\r\n\r\n                  return;\r\n                }\r\n\r\n                this._conn._dataRecv(elem, message.data);\r\n              },\r\n\r\n              /** PrivateFunction: _onOpen\r\n               * _Private_ function to handle websockets connection setup.\r\n               *\r\n               * The opening stream tag is sent here.\r\n               */\r\n              _onOpen: function _onOpen() {\r\n                Strophe$2.debug(\"Websocket open\");\r\n\r\n                var start = this._buildStream();\r\n\r\n                this._conn.xmlOutput(start.tree());\r\n\r\n                var startString = Strophe$2.serialize(start);\r\n\r\n                this._conn.rawOutput(startString);\r\n\r\n                this.socket.send(startString);\r\n              },\r\n\r\n              /** PrivateFunction: _reqToData\r\n               * _Private_ function to get a stanza out of a request.\r\n               *\r\n               * WebSockets don't use requests, so the passed argument is just returned.\r\n               *\r\n               *  Parameters:\r\n               *    (Object) stanza - The stanza.\r\n               *\r\n               *  Returns:\r\n               *    The stanza that was passed.\r\n               */\r\n              _reqToData: function _reqToData(stanza) {\r\n                return stanza;\r\n              },\r\n\r\n              /** PrivateFunction: _send\r\n               *  _Private_ part of the Connection.send function for WebSocket\r\n               *\r\n               * Just flushes the messages that are in the queue\r\n               */\r\n              _send: function _send() {\r\n                this._conn.flush();\r\n              },\r\n\r\n              /** PrivateFunction: _sendRestart\r\n               *\r\n               *  Send an xmpp:restart stanza.\r\n               */\r\n              _sendRestart: function _sendRestart() {\r\n                clearTimeout(this._conn._idleTimeout);\r\n\r\n                this._conn._onIdle.bind(this._conn)();\r\n              }\r\n            };\r\n\r\n            global$1.Strophe = core.Strophe;\r\n            global$1.$build = core.$build;\r\n            global$1.$iq = core.$iq;\r\n            global$1.$msg = core.$msg;\r\n            global$1.$pres = core.$pres;\r\n\r\n            return core;\r\n\r\n}));\r\n","import BrowserCapabilities from './BrowserCapabilities';\r\n\r\nexport default new BrowserCapabilities();\r\n","/* Copyright @ 2015-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Logger = require(\"./Logger\");\r\nvar LogCollector = require(\"./LogCollector\");\r\n\r\n/**\r\n * Definition of the log method\r\n * @name log_method\r\n * @function\r\n * @param {...*} log_args the arguments to be logged\r\n */\r\n/**\r\n * The logger's transport type definition.\r\n *\r\n * @typedef {object} LoggerTransport\r\n *\r\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\r\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\r\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\r\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\r\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\r\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\r\n */\r\n\r\n/**\r\n * Map with the created loggers with ID.\r\n */\r\nvar idLoggers = {};\r\n\r\n/**\r\n * Array with the loggers without id.\r\n */\r\nvar loggers = [];\r\n\r\n/**\r\n * Log level for the lbrary.\r\n */\r\nvar curLevel = Logger.levels.TRACE;\r\n\r\n\r\nmodule.exports = {\r\n    /**\r\n     * Adds given {@link LoggerTransport} instance to the list of global\r\n     * transports which means that it'll be used by all {@link Logger}s\r\n     * @param {LoggerTransport} transport\r\n     */\r\n    addGlobalTransport: function(transport) {\r\n        Logger.addGlobalTransport(transport);\r\n    },\r\n    /**\r\n     * Removes given {@link LoggerTransport} instance from the list of global\r\n     * transports\r\n     * @param {LoggerTransport} transport\r\n     */\r\n    removeGlobalTransport: function(transport) {\r\n        Logger.removeGlobalTransport(transport);\r\n    },\r\n    /**\r\n    * Sets global options which will be used by all loggers. Changing these\r\n    * works even after other loggers are created.\r\n    */\r\n    setGlobalOptions: function(options) {\r\n        Logger.setGlobalOptions(options);\r\n    },\r\n    /**\r\n     * Creates new logger.\r\n     * @arguments the same as Logger constructor\r\n     */\r\n    getLogger: function(id, transports, options) {\r\n        var logger = new Logger(curLevel, id, transports, options);\r\n        if(id) {\r\n            idLoggers[id] = idLoggers[id] || [];\r\n            idLoggers[id].push(logger);\r\n        } else {\r\n            loggers.push(logger);\r\n        }\r\n        return logger;\r\n    },\r\n    /**\r\n     * Changes the log level for the existing loggers by id.\r\n     * @param level the new log level.\r\n     * @param id if specified the level will be changed only for loggers with the\r\n     * same id. Otherwise the operation will affect all loggers that don't\r\n     * have id.\r\n     */\r\n    setLogLevelById: function(level, id) {\r\n        var l = id? (idLoggers[id] || []) : loggers;\r\n        for(var i = 0; i < l.length; i++) {\r\n            l[i].setLevel(level);\r\n        }\r\n    },\r\n    /**\r\n     * Changes the log level for all existing loggers.\r\n     * @param level the new log level.\r\n     */\r\n    setLogLevel: function (level) {\r\n        curLevel = level;\r\n        var i = 0;\r\n        for(; i < loggers.length; i++) {\r\n            loggers[i].setLevel(level);\r\n        }\r\n\r\n        for(var id in idLoggers) {\r\n            var l = idLoggers[id] || [];\r\n            for(i = 0; i < l.length; i++) {\r\n                l[i].setLevel(level);\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * The supported log levels.\r\n     */\r\n    levels: Logger.levels,\r\n    /**\r\n     * Exports the <tt>LogCollector</tt>.\r\n     */\r\n    LogCollector: LogCollector\r\n};\r\n","/**\r\n * The audio type.\r\n */\r\nexport const AUDIO = 'audio';\r\n\r\n/**\r\n * The presenter type.\r\n */\r\nexport const PRESENTER = 'presenter';\r\n\r\n/**\r\n * The video type.\r\n */\r\nexport const VIDEO = 'video';\r\n\r\nexport const MediaType = {\r\n    /**\r\n     * The audio type.\r\n     */\r\n    AUDIO : 'audio',\r\n\r\n    /**\r\n     * The presenter type.\r\n     */\r\n    PRESENTER : 'presenter',\r\n\r\n    /**\r\n     * The video type.\r\n     */\r\n    VIDEO : 'video'\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport browser from '../browser';\r\nimport ScriptUtil from '../util/ScriptUtil';\r\n\r\nimport analytics from './AnalyticsAdapter';\r\nimport CallStats from './CallStats';\r\nimport LocalStats from './LocalStatsCollector';\r\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\r\nimport RTPStats from './RTPStatsCollector';\r\nimport { CALLSTATS_SCRIPT_URL } from './constants';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * Stores all active {@link Statistics} instances.\r\n * @type {Set<Statistics>}\r\n */\r\nlet _instances;\r\n\r\n/**\r\n * True if callstats API is loaded\r\n */\r\nlet isCallstatsLoaded = false;\r\n\r\n/**\r\n * Since callstats.io is a third party, we cannot guarantee the quality of their\r\n * service. More specifically, their server may take noticeably long time to\r\n * respond. Consequently, it is in our best interest (in the sense that the\r\n * intergration of callstats.io is pretty important to us but not enough to\r\n * allow it to prevent people from joining a conference) to (1) start\r\n * downloading their API as soon as possible and (2) do the downloading\r\n * asynchronously.\r\n *\r\n * @param {StatisticsOptions} options - Options to use for downloading and\r\n * initializing callstats backend.\r\n */\r\nfunction loadCallStatsAPI(options) {\r\n    if (!isCallstatsLoaded) {\r\n        ScriptUtil.loadScript(\r\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\r\n            /* async */ true,\r\n            /* prepend */ true,\r\n            /* relativeURL */ undefined,\r\n            /* loadCallback */ () => _initCallStatsBackend(options)\r\n        );\r\n        isCallstatsLoaded = true;\r\n    }\r\n}\r\n\r\n/**\r\n * Initializes Callstats backend.\r\n *\r\n * @param {StatisticsOptions} options - The options to use for initializing\r\n * callstats backend.\r\n * @private\r\n */\r\nfunction _initCallStatsBackend(options) {\r\n    if (CallStats.isBackendInitialized()) {\r\n        return;\r\n    }\r\n\r\n    if (!CallStats.initBackend({\r\n        callStatsID: options.callStatsID,\r\n        callStatsSecret: options.callStatsSecret,\r\n        userName: options.userName,\r\n        aliasName: options.aliasName,\r\n        applicationName: options.applicationName,\r\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\r\n        confID: options.confID,\r\n        siteID: options.siteID\r\n    })) {\r\n        logger.error('CallStats Backend initialization failed bad');\r\n    }\r\n}\r\n\r\n/**\r\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\r\n * \"message\" and \"constraintName\". So we need to bundle additional information\r\n * from JitsiTrackError into error passed to callstats to preserve valuable\r\n * information about error.\r\n * @param {JitsiTrackError} error\r\n */\r\nfunction formatJitsiTrackErrorForCallStats(error) {\r\n    const err = new Error();\r\n\r\n    // Just copy original stack from error\r\n    err.stack = error.stack;\r\n\r\n    // Combine name from error's name plus (possibly) name of original GUM error\r\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\r\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\r\n\r\n    // Put all constraints into this field. For constraint failed errors we will\r\n    // still know which exactly constraint failed as it will be a part of\r\n    // message.\r\n    err.constraintName = error.gum && error.gum.constraints\r\n        ? JSON.stringify(error.gum.constraints) : '';\r\n\r\n    // Just copy error's message.\r\n    err.message = error.message;\r\n\r\n    return err;\r\n}\r\n\r\n/**\r\n * Init statistic options\r\n * @param options\r\n */\r\nStatistics.init = function(options) {\r\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\r\n    if (typeof options.pcStatsInterval === 'number') {\r\n        Statistics.pcStatsInterval = options.pcStatsInterval;\r\n    }\r\n\r\n    if (typeof options.audioLevelsInterval === 'number') {\r\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\r\n    }\r\n\r\n    if (typeof options.longTasksStatsInterval === 'number') {\r\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\r\n    }\r\n\r\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\r\n};\r\n\r\n/**\r\n * The options to configure Statistics.\r\n * @typedef {Object} StatisticsOptions\r\n * @property {string} applicationName - The application name to pass to\r\n * callstats.\r\n * @property {string} aliasName - The alias name to use when initializing callstats.\r\n * @property {string} userName - The user name to use when initializing callstats.\r\n * @property {string} confID - The callstats conference ID to use.\r\n * @property {string} callStatsID - Callstats credentials - the id.\r\n * @property {string} callStatsSecret - Callstats credentials - the secret.\r\n * @property {string} customScriptUrl - A custom lib url to use when downloading\r\n * callstats library.\r\n * @property {string} roomName - The room name we are currently in.\r\n */\r\n/**\r\n *\r\n * @param xmpp\r\n * @param {StatisticsOptions} options - The options to use creating the\r\n * Statistics.\r\n */\r\nexport default function Statistics(xmpp, options) {\r\n    /**\r\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\r\n     * collect RTP statistics for each peerconnection.\r\n     * @type {Map<string, RTPStats}\r\n     */\r\n    this.rtpStatsMap = new Map();\r\n    this.eventEmitter = new EventEmitter();\r\n    this.xmpp = xmpp;\r\n    this.options = options || {};\r\n\r\n    this.callStatsIntegrationEnabled\r\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\r\n\r\n            // Even though AppID and AppSecret may be specified, the integration\r\n            // of callstats.io may be disabled because of globally-disallowed\r\n            // requests to any third parties.\r\n            && (Statistics.disableThirdPartyRequests !== true);\r\n    if (this.callStatsIntegrationEnabled) {\r\n        this.callStatsApplicationLogsDisabled\r\n            = this.options.callStatsApplicationLogsDisabled;\r\n        if (browser.isReactNative()) {\r\n            _initCallStatsBackend(this.options);\r\n        } else {\r\n            loadCallStatsAPI(this.options);\r\n        }\r\n\r\n        if (!this.options.confID) {\r\n            logger.warn('\"confID\" is not defined');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores {@link CallStats} instances for each\r\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\r\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\r\n     * @type {Map<number, CallStats>}\r\n     */\r\n    this.callsStatsInstances = new Map();\r\n\r\n    Statistics.instances.add(this);\r\n}\r\nStatistics.audioLevelsEnabled = false;\r\nStatistics.audioLevelsInterval = 200;\r\nStatistics.pcStatsInterval = 10000;\r\nStatistics.disableThirdPartyRequests = false;\r\nStatistics.analytics = analytics;\r\n\r\nObject.defineProperty(Statistics, 'instances', {\r\n    /**\r\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\r\n     * initializes the Set to allow any Set polyfills to be applied.\r\n     * @type {Set<Statistics>}\r\n     */\r\n    get() {\r\n        if (!_instances) {\r\n            _instances = new Set();\r\n        }\r\n\r\n        return _instances;\r\n    }\r\n});\r\n\r\n/**\r\n * Starts collecting RTP stats for given peerconnection.\r\n * @param {TraceablePeerConnection} peerconnection\r\n */\r\nStatistics.prototype.startRemoteStats = function(peerconnection) {\r\n    this.stopRemoteStats(peerconnection);\r\n\r\n    try {\r\n        const rtpStats\r\n            = new RTPStats(\r\n                peerconnection,\r\n                Statistics.audioLevelsInterval,\r\n                Statistics.pcStatsInterval,\r\n                this.eventEmitter);\r\n\r\n        rtpStats.start(Statistics.audioLevelsEnabled);\r\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\r\n    } catch (e) {\r\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\r\n    }\r\n};\r\n\r\nStatistics.localStats = [];\r\n\r\nStatistics.startLocalStats = function(stream, callback) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\r\n        callback);\r\n\r\n    this.localStats.push(localStats);\r\n    localStats.start();\r\n};\r\n\r\nStatistics.prototype.addAudioLevelListener = function(listener) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\r\n};\r\n\r\nStatistics.prototype.removeAudioLevelListener = function(listener) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\r\n};\r\n\r\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\r\n};\r\n\r\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\r\n    this.eventEmitter.removeListener(\r\n        StatisticsEvents.BEFORE_DISPOSED, listener);\r\n};\r\n\r\nStatistics.prototype.addConnectionStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(\r\n        StatisticsEvents.CONNECTION_STATS,\r\n        listener);\r\n};\r\n\r\nStatistics.prototype.addByteSentStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\r\n        listener);\r\n};\r\n\r\n/**\r\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\r\n *\r\n * @param {Function} listener a function that would be called when notified.\r\n * @returns {void}\r\n */\r\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\r\n};\r\n\r\n/**\r\n * Creates an instance of {@link PerformanceObserverStats} and starts the\r\n * observer that records the stats periodically.\r\n *\r\n * @returns {void}\r\n */\r\nStatistics.prototype.attachLongTasksStats = function(conference) {\r\n    if (!browser.supportsPerformanceObserver()) {\r\n        logger.warn('Performance observer for long tasks not supported by browser!');\r\n\r\n        return;\r\n    }\r\n\r\n    this.performanceObserverStats = new PerformanceObserverStats(\r\n        this.eventEmitter,\r\n        Statistics.longTasksStatsInterval);\r\n\r\n    conference.on(\r\n        JitsiConferenceEvents.CONFERENCE_JOINED,\r\n        () => this.performanceObserverStats.startObserver());\r\n    conference.on(\r\n        JitsiConferenceEvents.CONFERENCE_LEFT,\r\n        () => this.performanceObserverStats.stopObserver());\r\n};\r\n\r\n/**\r\n * Obtains the current value of the LongTasks event statistics.\r\n *\r\n * @returns {Object|null} stats object if the observer has been\r\n * created, null otherwise.\r\n */\r\nStatistics.prototype.getLongTasksStats = function() {\r\n    return this.performanceObserverStats\r\n        ? this.performanceObserverStats.getLongTasksStats()\r\n        : null;\r\n};\r\n\r\n/**\r\n * Removes the given listener for the LONG_TASKS_STATS event.\r\n *\r\n * @param {Function} listener the listener we want to remove.\r\n * @returns {void}\r\n */\r\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.dispose = function() {\r\n    try {\r\n        // NOTE Before reading this please see the comment in stopCallStats...\r\n        //\r\n        // Here we prevent from emitting the event twice in case it will be\r\n        // triggered from stopCallStats.\r\n        // If the event is triggered from here it means that the logs will not\r\n        // be submitted anyway (because there is no CallStats instance), but\r\n        // we're doing that for the sake of some kind of consistency.\r\n        if (!this.callsStatsInstances.size) {\r\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\r\n        }\r\n        for (const callStats of this.callsStatsInstances.values()) {\r\n            this.stopCallStats(callStats.tpc);\r\n        }\r\n        for (const tpcId of this.rtpStatsMap.keys()) {\r\n            this._stopRemoteStats(tpcId);\r\n        }\r\n        if (this.eventEmitter) {\r\n            this.eventEmitter.removeAllListeners();\r\n        }\r\n    } finally {\r\n        Statistics.instances.delete(this);\r\n    }\r\n};\r\n\r\nStatistics.stopLocalStats = function(stream) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < Statistics.localStats.length; i++) {\r\n        if (Statistics.localStats[i].stream === stream) {\r\n            const localStats = Statistics.localStats.splice(i, 1);\r\n\r\n            localStats[0].stop();\r\n            break;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Stops remote RTP stats for given peerconnection ID.\r\n * @param {string} tpcId {@link TraceablePeerConnection.id}\r\n * @private\r\n */\r\nStatistics.prototype._stopRemoteStats = function(tpcId) {\r\n    const rtpStats = this.rtpStatsMap.get(tpcId);\r\n\r\n    if (rtpStats) {\r\n        rtpStats.stop();\r\n        this.rtpStatsMap.delete(tpcId);\r\n    }\r\n};\r\n\r\n/**\r\n * Stops collecting RTP stats for given peerconnection\r\n * @param {TraceablePeerConnection} tpc\r\n */\r\nStatistics.prototype.stopRemoteStats = function(tpc) {\r\n    this._stopRemoteStats(tpc.id);\r\n};\r\n\r\n// CALSTATS METHODS\r\n\r\n/**\r\n * Initializes the callstats.io API.\r\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\r\n * instance for which CalStats will be started.\r\n * @param {string} remoteUserID\r\n */\r\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\r\n    if (!this.callStatsIntegrationEnabled) {\r\n        return;\r\n    } else if (this.callsStatsInstances.has(tpc.id)) {\r\n        logger.error('CallStats instance for ${tpc} exists already');\r\n\r\n        return;\r\n    }\r\n\r\n    logger.info(`Starting CallStats for ${tpc}...`);\r\n\r\n    const newInstance\r\n        = new CallStats(\r\n            tpc,\r\n            {\r\n                confID: this.options.confID,\r\n                remoteUserID\r\n            });\r\n\r\n    this.callsStatsInstances.set(tpc.id, newInstance);\r\n};\r\n\r\n/**\r\n * Obtains the list of *all* {@link CallStats} instances collected from every\r\n * valid {@link Statistics} instance.\r\n * @return {Set<CallStats>}\r\n * @private\r\n */\r\nStatistics._getAllCallStatsInstances = function() {\r\n    const csInstances = new Set();\r\n\r\n    for (const statistics of Statistics.instances) {\r\n        for (const cs of statistics.callsStatsInstances.values()) {\r\n            csInstances.add(cs);\r\n        }\r\n    }\r\n\r\n    return csInstances;\r\n};\r\n\r\n/**\r\n * Removes the callstats.io instances.\r\n */\r\nStatistics.prototype.stopCallStats = function(tpc) {\r\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (callStatsInstance) {\r\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\r\n        // able to submit the last log batch from jitsi-meet to CallStats. After\r\n        // recent changes we dispose the CallStats earlier\r\n        // (before Statistics.dispose), so we need to emit this event here to\r\n        // give this last chance for final log batch submission.\r\n        //\r\n        // Eventually there should be a separate module called \"log storage\"\r\n        // which should emit proper events when it's underlying\r\n        // CallStats instance is going away.\r\n        if (this.callsStatsInstances.size === 1) {\r\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\r\n        }\r\n        this.callsStatsInstances.delete(tpc.id);\r\n\r\n        // The fabric needs to be terminated when being stopped\r\n        callStatsInstance.sendTerminateEvent();\r\n    }\r\n};\r\n\r\n/**\r\n * Returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n *\r\n * @returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n */\r\nStatistics.prototype.isCallstatsEnabled = function() {\r\n    return this.callStatsIntegrationEnabled;\r\n};\r\n\r\n/**\r\n * Logs either resume or hold event for the given peer connection.\r\n * @param {TraceablePeerConnection} tpc the connection for which event will be\r\n * reported\r\n * @param {boolean} isResume true for resume or false for hold\r\n */\r\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendResumeOrHoldEvent(isResume);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats and analytics (if present) for ice connection failed\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendIceConnectionFailedEvent();\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats for mute events\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n * @param {boolean} muted true for muted and false for not muted\r\n * @param {String} type \"audio\"/\"video\"\r\n */\r\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\r\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\r\n\r\n    CallStats.sendMuteEvent(muted, type, instance);\r\n};\r\n\r\n/**\r\n * Notifies CallStats for screen sharing events\r\n * @param start {boolean} true for starting screen sharing and\r\n * false for not stopping\r\n * @param {string|null} ssrc - optional ssrc value, used only when\r\n * starting screen sharing.\r\n */\r\nStatistics.prototype.sendScreenSharingEvent\r\n    = function(start, ssrc) {\r\n        for (const cs of this.callsStatsInstances.values()) {\r\n            cs.sendScreenSharingEvent(start, ssrc);\r\n        }\r\n    };\r\n\r\n/**\r\n * Notifies the statistics module that we are now the dominant speaker of the\r\n * conference.\r\n * @param {String} roomJid - The room jid where the speaker event occurred.\r\n */\r\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\r\n    for (const cs of this.callsStatsInstances.values()) {\r\n        cs.sendDominantSpeakerEvent();\r\n    }\r\n\r\n    // xmpp send dominant speaker event\r\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\r\n};\r\n\r\n/**\r\n * Notifies about active device.\r\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\r\n *      their data\r\n */\r\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\r\n    const globalSet = Statistics._getAllCallStatsInstances();\r\n\r\n    if (globalSet.size) {\r\n        for (const cs of globalSet) {\r\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\r\n        }\r\n    } else {\r\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\r\n    }\r\n};\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Lets the underlying statistics module know where is given SSRC rendered by\r\n * providing renderer tag ID.\r\n * @param {TraceablePeerConnection} tpc the connection to which the stream\r\n * belongs to\r\n * @param {number} ssrc the SSRC of the stream\r\n * @param {boolean} isLocal\r\n * @param {string} userId\r\n * @param {string} usageLabel  meaningful usage label of this stream like\r\n *        'microphone', 'camera' or 'screen'.\r\n * @param {string} containerId the id of media 'audio' or 'video' tag which\r\n *        renders the stream.\r\n */\r\nStatistics.prototype.associateStreamWithVideoTag = function(\r\n        tpc,\r\n        ssrc,\r\n        isLocal,\r\n        userId,\r\n        usageLabel,\r\n        containerId) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.associateStreamWithVideoTag(\r\n            ssrc,\r\n            isLocal,\r\n            userId,\r\n            usageLabel,\r\n            containerId);\r\n    }\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Notifies CallStats that getUserMedia failed.\r\n *\r\n * @param {Error} e error to send\r\n */\r\nStatistics.sendGetUserMediaFailed = function(e) {\r\n    const error\r\n        = e instanceof JitsiTrackError\r\n            ? formatJitsiTrackErrorForCallStats(e) : e;\r\n    const globalSet = Statistics._getAllCallStatsInstances();\r\n\r\n    if (globalSet.size) {\r\n        for (const cs of globalSet) {\r\n            CallStats.sendGetUserMediaFailed(error, cs);\r\n        }\r\n    } else {\r\n        CallStats.sendGetUserMediaFailed(error, null);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to create offer.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendCreateOfferFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to create answer.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\r\n */\r\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendCreateAnswerFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to set local description.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendSetLocalDescFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to set remote description.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendSetRemoteDescFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to add ICE candidate.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendAddIceCandidateFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Adds to CallStats an application log.\r\n *\r\n * @param {String} m a log message to send or an {Error} object to be reported\r\n */\r\nStatistics.sendLog = function(m) {\r\n    const globalSubSet = new Set();\r\n\r\n    // FIXME we don't want to duplicate logs over P2P instance, but\r\n    // here we should go over instances and call this method for each\r\n    // unique conference ID rather than selecting the first one.\r\n    // We don't have such use case though, so leaving as is for now.\r\n    for (const stats of Statistics.instances) {\r\n        if (stats.callStatsApplicationLogsDisabled) {\r\n            return;\r\n        }\r\n\r\n        if (stats.callsStatsInstances.size) {\r\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\r\n        }\r\n    }\r\n\r\n    if (globalSubSet.size) {\r\n        for (const csPerStats of globalSubSet) {\r\n            CallStats.sendApplicationLog(m, csPerStats);\r\n        }\r\n    } else {\r\n        CallStats.sendApplicationLog(m, null);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends the given feedback through CallStats.\r\n *\r\n * @param overall an integer between 1 and 5 indicating the user's rating.\r\n * @param comment the comment from the user.\r\n * @returns {Promise} Resolves when callstats feedback has been submitted\r\n * successfully.\r\n */\r\nStatistics.prototype.sendFeedback = function(overall, comment) {\r\n    // Statistics.analytics.sendEvent is currently fire and forget, without\r\n    // confirmation of successful send.\r\n    Statistics.analytics.sendEvent(\r\n        FEEDBACK,\r\n        {\r\n            rating: overall,\r\n            comment\r\n        });\r\n\r\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\r\n};\r\n\r\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\r\n\r\n/**\r\n * Reports global error to CallStats.\r\n *\r\n * @param {Error} error\r\n */\r\nStatistics.reportGlobalError = function(error) {\r\n    if (error instanceof JitsiTrackError && error.gum) {\r\n        Statistics.sendGetUserMediaFailed(error);\r\n    } else {\r\n        Statistics.sendLog(error);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends event to analytics and logs a message to the logger/console. Console\r\n * messages might also be logged to callstats automatically.\r\n *\r\n * @param {string | Object} event the event name, or an object which\r\n * represents the entire event.\r\n * @param {Object} properties properties to attach to the event (if an event\r\n * name as opposed to an event object is provided).\r\n */\r\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\r\n    if (!event) {\r\n        logger.warn('No event or event name given.');\r\n\r\n        return;\r\n    }\r\n\r\n    let eventToLog;\r\n\r\n    // Also support an API with a single object as an event.\r\n    if (typeof event === 'object') {\r\n        eventToLog = event;\r\n    } else {\r\n        eventToLog = {\r\n            name: event,\r\n            properties\r\n        };\r\n    }\r\n\r\n    logger.log(JSON.stringify(eventToLog));\r\n\r\n    // We do this last, because it may modify the object which is passed.\r\n    this.analytics.sendEvent(event, properties);\r\n};\r\n\r\n/**\r\n * Sends event to analytics.\r\n *\r\n * @param {string | Object} eventName the event name, or an object which\r\n * represents the entire event.\r\n * @param {Object} properties properties to attach to the event\r\n */\r\nStatistics.sendAnalytics = function(eventName, properties = {}) {\r\n    this.analytics.sendEvent(eventName, properties);\r\n};\r\n","const RTCEvents = {\r\n    /**\r\n     * Indicates error while create answer call.\r\n     */\r\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\r\n\r\n    /**\r\n     * Indicates error while create offer call.\r\n     */\r\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\r\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\r\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\r\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\r\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\r\n\r\n    /**\r\n     * Event emitted when the user granted a permission for the camera / mic.\r\n     * Used to keep track of the granted permissions on browsers which don't\r\n     * support the Permissions API.\r\n     */\r\n    GRANTED_PERMISSIONS: 'rtc.granted_permissions',\r\n\r\n    SENDER_VIDEO_CONSTRAINTS_CHANGED: 'rtc.sender_video_constraints_changed',\r\n\r\n    /**\r\n     * Event emitted when {@link RTC.setLastN} method is called to update with\r\n     * the new value set.\r\n     * The first argument is the value passed to {@link RTC.setLastN}.\r\n     */\r\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\r\n\r\n    /**\r\n     * Event emitted when ssrc for a local track is extracted and stored\r\n     * in {@link TraceablePeerConnection}.\r\n     * @param {JitsiLocalTrack} track which ssrc was updated\r\n     * @param {string} ssrc that was stored\r\n     */\r\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\r\n\r\n    /**\r\n     * The max enabled resolution of a local video track was changed.\r\n     */\r\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED: 'rtc.local_track_max_enabled_resolution_changed',\r\n\r\n    TRACK_ATTACHED: 'rtc.track_attached',\r\n\r\n    /**\r\n     * Event fired when we remote track is added to the conference.\r\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\r\n     **/\r\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\r\n\r\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\r\n    // (currently implemented for local tracks only)\r\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\r\n\r\n    /**\r\n     * Indicates that the remote track has been removed from the conference.\r\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\r\n     */\r\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\r\n\r\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\r\n    // (currently implemented for local tracks only)\r\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\r\n\r\n    /**\r\n     * Indicates error while set local description.\r\n     */\r\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\r\n\r\n    /**\r\n     * Indicates error while set remote description.\r\n     */\r\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\r\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\r\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\r\n\r\n    /**\r\n     * Indicates that the list with available devices will change.\r\n     */\r\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\r\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\r\n\r\n    /**\r\n     * Indicates that a message from another participant is received on\r\n     * data channel.\r\n     */\r\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\r\n\r\n    /**\r\n     * Designates an event indicating that the local ICE username fragment of\r\n     * the jingle session has changed.\r\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\r\n     * is the source of the event.\r\n     * The second argument is the actual \"ufrag\" string.\r\n     */\r\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\r\n\r\n    /**\r\n     * Designates an event indicating that the local ICE username fragment of\r\n     * the jingle session has changed.\r\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\r\n     * is the source of the event.\r\n     * The second argument is the actual \"ufrag\" string.\r\n     */\r\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\r\n};\r\n\r\nmodule.exports = RTCEvents;\r\n","/**\r\n * This class exports constants and factory methods related to the analytics\r\n * API provided by AnalyticsAdapter. In order for entries in a database to be\r\n * somewhat easily traceable back to the code which produced them, events sent\r\n * through analytics should be defined here.\r\n *\r\n * Since the AnalyticsAdapter API can be used in different ways, for some events\r\n * it is more convenient to just define the event name as a constant. For other\r\n * events a factory function is easier.\r\n *\r\n * A general approach for adding a new event:\r\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\r\n * operational.\r\n * 2. Determine whether the event is related to other existing events, and\r\n * which fields are desired to be set: name, action, actionSubject, source.\r\n * 3. If the name is sufficient (the other fields are not important), use a\r\n * constant. Otherwise use a factory function.\r\n *\r\n * Note that the AnalyticsAdapter uses the events passed to its functions for\r\n * its own purposes, and might modify them. Because of this, factory functions\r\n * should create new objects.\r\n *\r\n */\r\n\r\n/**\r\n * The constant which identifies an event of type \"operational\".\r\n * @type {string}\r\n */\r\nexport const TYPE_OPERATIONAL = 'operational';\r\n\r\n/**\r\n * The constant which identifies an event of type \"page\".\r\n * @type {string}\r\n */\r\nexport const TYPE_PAGE = 'page';\r\n\r\n/**\r\n * The constant which identifies an event of type \"track\".\r\n * @type {string}\r\n */\r\nexport const TYPE_TRACK = 'track';\r\n\r\n/**\r\n * The constant which identifies an event of type \"ui\".\r\n * @type {string}\r\n */\r\nexport const TYPE_UI = 'ui';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that the Jingle session\r\n * was restarted (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_RESTART = 'restart';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-accept\r\n * timed out (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-initiate\r\n * was received.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-initiate\r\n * not arrived within a timeout (the value is specified in\r\n * the {@link JingleSessionPC}.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\r\n\r\n/**\r\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\r\n * the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a transport-replace\r\n * was received.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TR_RECEIVED\r\n    = 'transport-replace.received';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a transport-replace\r\n * succeeded (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TR_SUCCESS\r\n    = 'transport-replace.success';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\r\n * because the mandatory requirements were not met.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_DECLINED = 'decline';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that a connection was\r\n * established (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_ESTABLISHED = 'established';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that something failed.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_FAILED = 'failed';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that a switch to\r\n * jitsi-videobridge happened.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\r\n\r\n/**\r\n * The name of an event which indicates an available device. We send one such\r\n * event per available device once when the available devices are first known,\r\n * and every time that they change\r\n * @type {string}\r\n *\r\n * Properties:\r\n *      audio_input_device_count: the number of audio input devices available at\r\n *          the time the event was sent.\r\n *      audio_output_device_count: the number of audio output devices available\r\n *          at the time the event was sent.\r\n *      video_input_device_count: the number of video input devices available at\r\n *          the time the event was sent.\r\n *      video_output_device_count: the number of video output devices available\r\n *          at the time the event was sent.\r\n *      device_id: an identifier of the device described in this event.\r\n *      device_group_id:\r\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\r\n *          'videooutput'.\r\n *      device_label: a string which describes the device.\r\n */\r\nexport const AVAILABLE_DEVICE = 'available.device';\r\n\r\n/**\r\n * This appears to be fired only in certain cases when the XMPP connection\r\n * disconnects (and it was intentional?). It is currently never observed to\r\n * fire in production.\r\n *\r\n * TODO: document\r\n *\r\n * Properties:\r\n *      message: an error message\r\n */\r\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\r\n\r\n/**\r\n * Indicates that the user of the application provided feedback in terms of a\r\n * rating (an integer from 1 to 5) and an optional comment.\r\n * Properties:\r\n *      value: the user's rating (an integer from 1 to 5)\r\n *      comment: the user's comment\r\n */\r\nexport const FEEDBACK = 'feedback';\r\n\r\n/**\r\n * Indicates the duration of a particular phase of the ICE connectivity\r\n * establishment.\r\n *\r\n * Properties:\r\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\r\n *      value: the duration in milliseconds.\r\n *      p2p: whether the associated ICE connection is p2p or towards a\r\n *          jitsi-videobridge\r\n *      initiator: whether the local Jingle peer is the initiator or responder\r\n *          in the Jingle session. XXX we probably actually care about the ICE\r\n *          role (controlling vs controlled), and we assume that this correlates\r\n *          with the Jingle initiator.\r\n */\r\nexport const ICE_DURATION = 'ice.duration';\r\n\r\n/**\r\n * Indicates the difference in milliseconds between the ICE establishment time\r\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\r\n * P2P connection took 10ms more than JVB connection to establish).\r\n *\r\n * Properties:\r\n *      value: the difference in establishment durations in milliseconds.\r\n *\r\n */\r\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\r\n    = 'ice.establishment.duration.diff';\r\n\r\n/**\r\n * Indicates that the ICE state has changed.\r\n *\r\n * Properties:\r\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\r\n *          'completed', etc).\r\n *      value: the time in milliseconds (as reported by\r\n *          window.performance.now()) that the state change occurred.\r\n *      p2p: whether the associated ICE connection is p2p or towards a\r\n *          jitsi-videobridge\r\n *      signalingState: The signaling state of the associated PeerConnection\r\n *      reconnect: whether the associated Jingle session is in the process of\r\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\r\n */\r\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\r\n\r\n/**\r\n * Indicates that no bytes have been sent for the track.\r\n *\r\n * Properties:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n */\r\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\r\n\r\n/**\r\n * Indicates that a track was unmuted (?).\r\n *\r\n * Properties:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n *      trackType: the type of the track ('local' or 'remote').\r\n *      value: TODO: document\r\n */\r\nexport const TRACK_UNMUTED = 'track.unmuted';\r\n\r\n/**\r\n * Creates an operational event which indicates that we have received a\r\n * \"bridge down\" event from jicofo.\r\n */\r\nexport const createBridgeDownEvent = function() {\r\n    const bridgeDown = 'bridge.down';\r\n\r\n    return {\r\n        action: bridgeDown,\r\n        actionSubject: bridgeDown,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that the XMPP connection failed\r\n * @param errorType TODO\r\n * @param errorMessage TODO\r\n * @param detail connection failed details.\r\n */\r\nexport const createConnectionFailedEvent\r\n    = function(errorType, errorMessage, details) {\r\n        return {\r\n            type: TYPE_OPERATIONAL,\r\n            action: 'connection.failed',\r\n            attributes: {\r\n                'error_type': errorType,\r\n                'error_message': errorMessage,\r\n                ...details\r\n            }\r\n        };\r\n    };\r\n\r\n/**\r\n * Creates a conference event.\r\n *\r\n * @param {string} action - The action of the event.\r\n * @param {Object} attributes - The attributes to be added to the event.\r\n * @returns {{type: string, source: string, action: string, attributes: object}}\r\n */\r\nexport function createConferenceEvent(action, attributes) {\r\n    return {\r\n        action,\r\n        attributes,\r\n        source: 'conference',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an operational event which indicates that a particular connection\r\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\r\n * state).\r\n *\r\n * @param stage the stage which was reached\r\n * @param attributes additional attributes for the event. This should be an\r\n * object with a \"value\" property indicating a timestamp in milliseconds\r\n * relative to the beginning of the document's lifetime.\r\n *\r\n */\r\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\r\n    const action = 'connection.stage.reached';\r\n\r\n    return {\r\n        action,\r\n        actionSubject: stage,\r\n        attributes,\r\n        source: action,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an operational event for the end-to-end round trip time to a\r\n * specific remote participant.\r\n * @param participantId the ID of the remote participant.\r\n * @param region the region of the remote participant\r\n * @param rtt the rtt\r\n */\r\nexport const createE2eRttEvent = function(participantId, region, rtt) {\r\n    const attributes = {\r\n        'participant_id': participantId,\r\n        region,\r\n        rtt\r\n    };\r\n\r\n    return {\r\n        attributes,\r\n        name: 'e2e_rtt',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that the focus has left the MUC.\r\n */\r\nexport const createFocusLeftEvent = function() {\r\n    const action = 'focus.left';\r\n\r\n    return {\r\n        action,\r\n        actionSubject: action,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event related to a getUserMedia call.\r\n *\r\n * @param action the type of the result that the event represents: 'error',\r\n * 'success', 'warning', etc.\r\n * @param attributes the attributes to attach to the event.\r\n * @returns {{type: string, source: string, name: string}}\r\n */\r\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        source: 'get.user.media',\r\n        action,\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event related to remote participant connection status changes.\r\n *\r\n * @param attributes the attributes to attach to the event.\r\n * @returns {{type: string, source: string, name: string}}\r\n */\r\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\r\n    const action = 'duration';\r\n\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        source: 'peer.conn.status',\r\n        action,\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event for a Jingle-related event.\r\n * @param action the action of the event\r\n * @param attributes attributes to add to the event.\r\n */\r\nexport const createJingleEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action,\r\n        source: 'jingle',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that a local track was not able to read\r\n * data from its source (a camera or a microphone).\r\n *\r\n * @param mediaType {String} the media type of the local track ('audio' or\r\n * 'video').\r\n */\r\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\r\n    return {\r\n        attributes: {\r\n            'media_type': mediaType,\r\n            value\r\n        },\r\n        action: 'track.no.data.from.source',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event for a p2p-related event.\r\n * @param action the action of the event\r\n * @param attributes attributes to add to the event.\r\n */\r\nexport const createP2PEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action,\r\n        source: 'p2p',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Indicates that we received a remote command to mute.\r\n */\r\nexport const createRemotelyMutedEvent = function() {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'remotely.muted'\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains RTP statistics such as RTT and packet loss.\r\n *\r\n * All average RTP stats are currently reported under 1 event name, but with\r\n * different properties that allows to distinguish between a P2P call, a\r\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\r\n *\r\n * The structure of the event is:\r\n *\r\n * {\r\n *      p2p: true,\r\n *      conferenceSize: 2,\r\n *      localCandidateType: \"relay\",\r\n *      remoteCandidateType: \"relay\",\r\n *      transportType: \"udp\",\r\n *\r\n *      // Average RTT of 200ms\r\n *      \"rtt.avg\": 200,\r\n *      \"rtt.samples\": \"[100, 200, 300]\",\r\n *\r\n *      // Average packet loss of 10%\r\n *      \"packet.loss.avg\": 10,\r\n *      \"packet.loss.samples\": '[5, 10, 15]'\r\n *\r\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\r\n *      // The e2e RTT through jvb is 15ms shorter:\r\n *      \"rtt.diff\": 15,\r\n *\r\n *      // End-to-end RTT through JVB is ms.\r\n *      \"end2end.rtt.avg\" = 100\r\n * }\r\n *\r\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\r\n * and not JSON arrays, as events' attributes can not be nested. The samples are\r\n * currently included for debug purposes only and can be removed anytime soon\r\n * from the structure.\r\n *\r\n * Also note that not all of values are present in each event, as values are\r\n * obtained and calculated as part of different process/event pipe. For example\r\n * {@link ConnectionAvgStats} instances are doing the reports for each\r\n * {@link TraceablePeerConnection} and work independently from the main stats\r\n * pipe.\r\n */\r\nexport const createRtpStatsEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'rtp.stats',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains the round trip time (RTT) to a set of\r\n * regions.\r\n *\r\n * @param attributes\r\n * @returns {{type: string, action: string, attributes: *}}\r\n */\r\nexport const createRttByRegionEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'rtt.by.region',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains the local and remote ICE candidate types\r\n * for the transport that is currently selected.\r\n *\r\n * @param attributes\r\n * @returns {{type: string, action: string, attributes: *}}\r\n */\r\nexport const createTransportStatsEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'transport.stats',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\r\n * the local audio levels and the remote audio levels that triggered the event).\r\n *\r\n * @param {string} userID - The user id of the affected participant.\r\n * @param {*} localAudioLevels - The local audio levels.\r\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\r\n */\r\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'audio.output.problem',\r\n        attributes: {\r\n            userID,\r\n            localAudioLevels,\r\n            remoteAudioLevels\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an event which contains an information related to the bridge channel close event.\r\n *\r\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\r\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\r\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\r\n */\r\nexport const createBridgeChannelClosedEvent = function(code, reason) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'bridge-channel.error',\r\n        attributes: {\r\n            code,\r\n            reason\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates the Time To First Media (TTFM).\r\n * It is measured in milliseconds relative to the beginning of the document's\r\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\r\n * the following:\r\n * 1. The delay due to getUserMedia()\r\n * 2. The period between the MUC being joined and the reception of the Jingle\r\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\r\n * session until there are at least 2 participants in the room.\r\n *\r\n * @param attributes the attributes to add to the event. Currently used fields:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n *      muted: whether the track has ever been muted (?)\r\n *      value: the TTMF in milliseconds.\r\n */\r\nexport const createTtfmEvent = function(attributes) {\r\n    return createConnectionStageReachedEvent('ttfm', attributes);\r\n};\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nconst logger = getLogger(__filename);\r\n\r\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport browser from '../browser';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nconst SDPUtil = {\r\n    filterSpecialChars(text) {\r\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\r\n        // \"\", etc.) \"contain\" special chars.\r\n        // eslint-disable-next-line no-useless-escape\r\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\r\n    },\r\n    iceparams(mediadesc, sessiondesc) {\r\n        let data = null;\r\n        let pwd, ufrag;\r\n\r\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\r\n                && (pwd\r\n                    = SDPUtil.findLine(\r\n                        mediadesc,\r\n                        'a=ice-pwd:',\r\n                        sessiondesc))) {\r\n            data = {\r\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\r\n                pwd: SDPUtil.parseICEPwd(pwd)\r\n            };\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseICEUfrag(line) {\r\n        return line.substring(12);\r\n    },\r\n    buildICEUfrag(frag) {\r\n        return `a=ice-ufrag:${frag}`;\r\n    },\r\n    parseICEPwd(line) {\r\n        return line.substring(10);\r\n    },\r\n    buildICEPwd(pwd) {\r\n        return `a=ice-pwd:${pwd}`;\r\n    },\r\n    parseMID(line) {\r\n        return line.substring(6);\r\n    },\r\n    parseMLine(line) {\r\n        const data = {};\r\n        const parts = line.substring(2).split(' ');\r\n\r\n        data.media = parts.shift();\r\n        data.port = parts.shift();\r\n        data.proto = parts.shift();\r\n        if (parts[parts.length - 1] === '') { // trailing whitespace\r\n            parts.pop();\r\n        }\r\n        data.fmt = parts;\r\n\r\n        return data;\r\n    },\r\n    buildMLine(mline) {\r\n        return (\r\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\r\n                mline.fmt.join(' ')}`);\r\n    },\r\n    parseRTPMap(line) {\r\n        const data = {};\r\n        let parts = line.substring(9).split(' ');\r\n\r\n        data.id = parts.shift();\r\n        parts = parts[0].split('/');\r\n        data.name = parts.shift();\r\n        data.clockrate = parts.shift();\r\n        data.channels = parts.length ? parts.shift() : '1';\r\n\r\n        return data;\r\n    },\r\n\r\n    /**\r\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\r\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\r\n     * @returns [SCTP port number, protocol, streams]\r\n     */\r\n    parseSCTPMap(line) {\r\n        const parts = line.substring(10).split(' ');\r\n        const sctpPort = parts[0];\r\n        const protocol = parts[1];\r\n\r\n        // Stream count is optional\r\n        const streamCount = parts.length > 2 ? parts[2] : null;\r\n\r\n\r\n        return [ sctpPort, protocol, streamCount ];// SCTP port\r\n    },\r\n    buildRTPMap(el) {\r\n        let line\r\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\r\n                el.getAttribute('clockrate')}`;\r\n\r\n        if (el.getAttribute('channels')\r\n            && el.getAttribute('channels') !== '1') {\r\n            line += `/${el.getAttribute('channels')}`;\r\n        }\r\n\r\n        return line;\r\n    },\r\n    parseCrypto(line) {\r\n        const data = {};\r\n        const parts = line.substring(9).split(' ');\r\n\r\n        data.tag = parts.shift();\r\n        data['crypto-suite'] = parts.shift();\r\n        data['key-params'] = parts.shift();\r\n        if (parts.length) {\r\n            data['session-params'] = parts.join(' ');\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseFingerprint(line) { // RFC 4572\r\n        const data = {};\r\n        const parts = line.substring(14).split(' ');\r\n\r\n        data.hash = parts.shift();\r\n        data.fingerprint = parts.shift();\r\n\r\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\r\n        return data;\r\n    },\r\n    parseFmtp(line) {\r\n        const data = [];\r\n        let parts = line.split(' ');\r\n\r\n        parts.shift();\r\n        parts = parts.join(' ').split(';');\r\n        for (let i = 0; i < parts.length; i++) {\r\n            let key = parts[i].split('=')[0];\r\n\r\n            while (key.length && key[0] === ' ') {\r\n                key = key.substring(1);\r\n            }\r\n            const value = parts[i].split('=')[1];\r\n\r\n            if (key && value) {\r\n                data.push({ name: key,\r\n                    value });\r\n            } else if (key) {\r\n                // rfc 4733 (DTMF) style stuff\r\n                data.push({ name: '',\r\n                    value: key });\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseICECandidate(line) {\r\n        const candidate = {};\r\n        const elems = line.split(' ');\r\n\r\n        candidate.foundation = elems[0].substring(12);\r\n        candidate.component = elems[1];\r\n        candidate.protocol = elems[2].toLowerCase();\r\n        candidate.priority = elems[3];\r\n        candidate.ip = elems[4];\r\n        candidate.port = elems[5];\r\n\r\n        // elems[6] => \"typ\"\r\n        candidate.type = elems[7];\r\n        candidate.generation = 0; // default value, may be overwritten below\r\n        for (let i = 8; i < elems.length; i += 2) {\r\n            switch (elems[i]) {\r\n            case 'raddr':\r\n                candidate['rel-addr'] = elems[i + 1];\r\n                break;\r\n            case 'rport':\r\n                candidate['rel-port'] = elems[i + 1];\r\n                break;\r\n            case 'generation':\r\n                candidate.generation = elems[i + 1];\r\n                break;\r\n            case 'tcptype':\r\n                candidate.tcptype = elems[i + 1];\r\n                break;\r\n            default: // TODO\r\n                logger.log(\r\n                    `parseICECandidate not translating \"${\r\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\r\n            }\r\n        }\r\n        candidate.network = '1';\r\n\r\n        // not applicable to SDP -- FIXME: should be unique, not just random\r\n        // eslint-disable-next-line newline-per-chained-call\r\n        candidate.id = Math.random().toString(36).substr(2, 10);\r\n\r\n        return candidate;\r\n    },\r\n    buildICECandidate(cand) {\r\n        let line = [\r\n            `a=candidate:${cand.foundation}`,\r\n            cand.component,\r\n            cand.protocol,\r\n            cand.priority,\r\n            cand.ip,\r\n            cand.port,\r\n            'typ',\r\n            cand.type\r\n        ].join(' ');\r\n\r\n        line += ' ';\r\n        switch (cand.type) {\r\n        case 'srflx':\r\n        case 'prflx':\r\n        case 'relay':\r\n            if (cand.hasOwnAttribute('rel-addr')\r\n                    && cand.hasOwnAttribute('rel-port')) {\r\n                line += 'raddr';\r\n                line += ' ';\r\n                line += cand['rel-addr'];\r\n                line += ' ';\r\n                line += 'rport';\r\n                line += ' ';\r\n                line += cand['rel-port'];\r\n                line += ' ';\r\n            }\r\n            break;\r\n        }\r\n        if (cand.hasOwnAttribute('tcptype')) {\r\n            line += 'tcptype';\r\n            line += ' ';\r\n            line += cand.tcptype;\r\n            line += ' ';\r\n        }\r\n        line += 'generation';\r\n        line += ' ';\r\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\r\n\r\n        return line;\r\n    },\r\n    parseSSRC(desc) {\r\n        // proprietary mapping of a=ssrc lines\r\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\r\n        // on google docs and parse according to that\r\n        const data = new Map();\r\n        const lines = desc.split('\\r\\n');\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\r\n                // FIXME: Use regex to smartly find the ssrc.\r\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\r\n\r\n                if (!data.get(ssrc)) {\r\n                    data.set(ssrc, []);\r\n                }\r\n\r\n                data.get(ssrc).push(lines[i]);\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseRTCPFB(line) {\r\n        const parts = line.substr(10).split(' ');\r\n        const data = {};\r\n\r\n        data.pt = parts.shift();\r\n        data.type = parts.shift();\r\n        data.params = parts;\r\n\r\n        return data;\r\n    },\r\n    parseExtmap(line) {\r\n        const parts = line.substr(9).split(' ');\r\n        const data = {};\r\n\r\n        data.value = parts.shift();\r\n        if (data.value.indexOf('/') === -1) {\r\n            data.direction = 'both';\r\n        } else {\r\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\r\n            data.value = data.value.substr(0, data.value.indexOf('/'));\r\n        }\r\n        data.uri = parts.shift();\r\n        data.params = parts;\r\n\r\n        return data;\r\n    },\r\n    findLine(haystack, needle, sessionpart) {\r\n        let lines = haystack.split('\\r\\n');\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, needle.length) === needle) {\r\n                return lines[i];\r\n            }\r\n        }\r\n        if (!sessionpart) {\r\n            return false;\r\n        }\r\n\r\n        // search session part\r\n        lines = sessionpart.split('\\r\\n');\r\n        for (let j = 0; j < lines.length; j++) {\r\n            if (lines[j].substring(0, needle.length) === needle) {\r\n                return lines[j];\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n    findLines(haystack, needle, sessionpart) {\r\n        let lines = haystack.split('\\r\\n');\r\n        const needles = [];\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, needle.length) === needle) {\r\n                needles.push(lines[i]);\r\n            }\r\n        }\r\n        if (needles.length || !sessionpart) {\r\n            return needles;\r\n        }\r\n\r\n        // search session part\r\n        lines = sessionpart.split('\\r\\n');\r\n        for (let j = 0; j < lines.length; j++) {\r\n            if (lines[j].substring(0, needle.length) === needle) {\r\n                needles.push(lines[j]);\r\n            }\r\n        }\r\n\r\n        return needles;\r\n    },\r\n    candidateToJingle(line) {\r\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\r\n        // generation 0\r\n        //      <candidate component=... foundation=... generation=... id=...\r\n        // ip=... network=... port=... priority=... protocol=... type=.../>\r\n        if (line.indexOf('candidate:') === 0) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            line = `a=${line}`;\r\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\r\n            logger.log(\r\n                'parseCandidate called with a line that is not a candidate'\r\n                    + ' line');\r\n            logger.log(line);\r\n\r\n            return null;\r\n        }\r\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\r\n            // eslint-disable-next-line no-param-reassign\r\n            line = line.substring(0, line.length - 2);\r\n        }\r\n        const candidate = {};\r\n        const elems = line.split(' ');\r\n\r\n        if (elems[6] !== 'typ') {\r\n            logger.log('did not find typ in the right place');\r\n            logger.log(line);\r\n\r\n            return null;\r\n        }\r\n        candidate.foundation = elems[0].substring(12);\r\n        candidate.component = elems[1];\r\n        candidate.protocol = elems[2].toLowerCase();\r\n        candidate.priority = elems[3];\r\n        candidate.ip = elems[4];\r\n        candidate.port = elems[5];\r\n\r\n        // elems[6] => \"typ\"\r\n        candidate.type = elems[7];\r\n\r\n        candidate.generation = '0'; // default, may be overwritten below\r\n        for (let i = 8; i < elems.length; i += 2) {\r\n            switch (elems[i]) {\r\n            case 'raddr':\r\n                candidate['rel-addr'] = elems[i + 1];\r\n                break;\r\n            case 'rport':\r\n                candidate['rel-port'] = elems[i + 1];\r\n                break;\r\n            case 'generation':\r\n                candidate.generation = elems[i + 1];\r\n                break;\r\n            case 'tcptype':\r\n                candidate.tcptype = elems[i + 1];\r\n                break;\r\n            default: // TODO\r\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\r\n            }\r\n        }\r\n        candidate.network = '1';\r\n\r\n        // not applicable to SDP -- FIXME: should be unique, not just random\r\n        // eslint-disable-next-line newline-per-chained-call\r\n        candidate.id = Math.random().toString(36).substr(2, 10);\r\n\r\n        return candidate;\r\n    },\r\n    candidateFromJingle(cand) {\r\n        let line = 'a=candidate:';\r\n\r\n        line += cand.getAttribute('foundation');\r\n        line += ' ';\r\n        line += cand.getAttribute('component');\r\n        line += ' ';\r\n\r\n        let protocol = cand.getAttribute('protocol');\r\n\r\n        // use tcp candidates for FF\r\n\r\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\r\n            protocol = 'tcp';\r\n        }\r\n\r\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\r\n        line += ' ';\r\n        line += cand.getAttribute('priority');\r\n        line += ' ';\r\n        line += cand.getAttribute('ip');\r\n        line += ' ';\r\n        line += cand.getAttribute('port');\r\n        line += ' ';\r\n        line += 'typ';\r\n        line += ` ${cand.getAttribute('type')}`;\r\n        line += ' ';\r\n        switch (cand.getAttribute('type')) {\r\n        case 'srflx':\r\n        case 'prflx':\r\n        case 'relay':\r\n            if (cand.getAttribute('rel-addr')\r\n                    && cand.getAttribute('rel-port')) {\r\n                line += 'raddr';\r\n                line += ' ';\r\n                line += cand.getAttribute('rel-addr');\r\n                line += ' ';\r\n                line += 'rport';\r\n                line += ' ';\r\n                line += cand.getAttribute('rel-port');\r\n                line += ' ';\r\n            }\r\n            break;\r\n        }\r\n        if (protocol.toLowerCase() === 'tcp') {\r\n            line += 'tcptype';\r\n            line += ' ';\r\n            line += cand.getAttribute('tcptype');\r\n            line += ' ';\r\n        }\r\n        line += 'generation';\r\n        line += ' ';\r\n        line += cand.getAttribute('generation') || '0';\r\n\r\n        return `${line}\\r\\n`;\r\n    },\r\n\r\n    /**\r\n     * Parse the 'most' primary video ssrc from the given m line\r\n     * @param {object} mLine object as parsed from transform.parse\r\n     * @return {number} the primary video ssrc from the given m line\r\n     */\r\n    parsePrimaryVideoSsrc(videoMLine) {\r\n        const numSsrcs = videoMLine.ssrcs\r\n            .map(ssrcInfo => ssrcInfo.id)\r\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\r\n            .length;\r\n        const numGroups\r\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\r\n\r\n        if (numSsrcs > 1 && numGroups === 0) {\r\n            // Ambiguous, can't figure out the primary\r\n            return;\r\n        }\r\n        let primarySsrc = null;\r\n\r\n        if (numSsrcs === 1) {\r\n            primarySsrc = videoMLine.ssrcs[0].id;\r\n        } else if (numSsrcs === 2) {\r\n            // Can figure it out if there's an FID group\r\n            const fidGroup\r\n                = videoMLine.ssrcGroups.find(\r\n                    group => group.semantics === 'FID');\r\n\r\n            if (fidGroup) {\r\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\r\n            }\r\n        } else if (numSsrcs >= 3) {\r\n            // Can figure it out if there's a sim group\r\n            const simGroup\r\n                = videoMLine.ssrcGroups.find(\r\n                    group => group.semantics === 'SIM');\r\n\r\n            if (simGroup) {\r\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\r\n            }\r\n        }\r\n\r\n        return primarySsrc;\r\n    },\r\n\r\n    /**\r\n     * Generate an ssrc\r\n     * @returns {number} an ssrc\r\n     */\r\n    generateSsrc() {\r\n        return RandomUtil.randomInt(1, 0xffffffff);\r\n    },\r\n\r\n    /**\r\n     * Get an attribute for the given ssrc with the given attributeName\r\n     *  from the given mline\r\n     * @param {object} mLine an mLine object as parsed from transform.parse\r\n     * @param {number} ssrc the ssrc for which an attribute is desired\r\n     * @param {string} attributeName the name of the desired attribute\r\n     * @returns {string} the value corresponding to the given ssrc\r\n     *  and attributeName\r\n     */\r\n    getSsrcAttribute(mLine, ssrc, attributeName) {\r\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\r\n            const ssrcLine = mLine.ssrcs[i];\r\n\r\n            if (ssrcLine.id === ssrc\r\n                && ssrcLine.attribute === attributeName) {\r\n                return ssrcLine.value;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Parses the ssrcs from the group sdp line and\r\n     *  returns them as a list of numbers\r\n     * @param {object} the ssrcGroup object as parsed from\r\n     *  sdp-transform\r\n     * @returns {list<number>} a list of the ssrcs in the group\r\n     *  parsed as numbers\r\n     */\r\n    parseGroupSsrcs(ssrcGroup) {\r\n        return ssrcGroup\r\n            .ssrcs\r\n            .split(' ')\r\n            .map(ssrcStr => parseInt(ssrcStr, 10));\r\n    },\r\n\r\n    /**\r\n     * Get the mline of the given type from the given sdp\r\n     * @param {object} sdp sdp as parsed from transform.parse\r\n     * @param {string} type the type of the desired mline (e.g. \"video\")\r\n     * @returns {object} a media object\r\n     */\r\n    getMedia(sdp, type) {\r\n        return sdp.media.find(m => m.type === type);\r\n    },\r\n\r\n    /**\r\n     * Extracts the ICE username fragment from an SDP string.\r\n     * @param {string} sdp the SDP in raw text format\r\n     */\r\n    getUfrag(sdp) {\r\n        const ufragLines\r\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\r\n\r\n        if (ufragLines.length > 0) {\r\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the given codecName as the preferred codec by moving it to the beginning\r\n     * of the payload types list (modifies the given mline in place). All instances\r\n     * of the codec are moved up.\r\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\r\n     * @param {string} codecName the name of the preferred codec\r\n     */\r\n    preferCodec(mline, codecName) {\r\n        if (!mline || !codecName) {\r\n            return;\r\n        }\r\n\r\n        const matchingPayloadTypes = mline.rtp\r\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\r\n            .map(rtp => rtp.payload);\r\n\r\n        if (matchingPayloadTypes) {\r\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\r\n            // payloads as a number, instead of a string, when there is only one payload.\r\n            const payloadTypes\r\n                = mline.payloads\r\n                .toString()\r\n                .split(' ')\r\n                .map(p => parseInt(p, 10));\r\n\r\n            for (const pt of matchingPayloadTypes.reverse()) {\r\n                const payloadIndex = payloadTypes.indexOf(pt);\r\n\r\n                payloadTypes.splice(payloadIndex, 1);\r\n                payloadTypes.unshift(pt);\r\n            }\r\n            mline.payloads = payloadTypes.join(' ');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Strips the given codec from the given mline. All related RTX payload\r\n     * types are also stripped. If the resulting mline would have no codecs,\r\n     * it's disabled.\r\n     *\r\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\r\n     * @param {string} codecName the name of the codec which will be stripped.\r\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\r\n     * stripped from the sdp when the passed codecName is H264.\r\n     */\r\n    stripCodec(mLine, codecName, highProfile = false) {\r\n        if (!mLine || !codecName) {\r\n            return;\r\n        }\r\n\r\n        const h264Pts = [];\r\n        let removePts = [];\r\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\r\n\r\n        for (const rtp of mLine.rtp) {\r\n            if (rtp.codec\r\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\r\n                if (stripH264HighCodec) {\r\n                    h264Pts.push(rtp.payload);\r\n                } else {\r\n                    removePts.push(rtp.payload);\r\n                }\r\n            }\r\n        }\r\n\r\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\r\n        if (stripH264HighCodec) {\r\n            removePts = mLine.fmtp\r\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\r\n                .map(item => item.payload);\r\n        }\r\n\r\n        if (removePts.length > 0) {\r\n            // We also need to remove the payload types that are related to RTX\r\n            // for the codecs we want to disable.\r\n            const rtxApts = removePts.map(item => `apt=${item}`);\r\n            const rtxPts = mLine.fmtp.filter(\r\n                item => rtxApts.indexOf(item.config) !== -1);\r\n\r\n            removePts.push(...rtxPts.map(item => item.payload));\r\n\r\n            // Call toString() on payloads to get around an issue within\r\n            // SDPTransform that sets payloads as a number, instead of a string,\r\n            // when there is only one payload.\r\n            const allPts = mLine.payloads\r\n                .toString()\r\n                .split(' ')\r\n                .map(Number);\r\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\r\n\r\n            if (keepPts.length === 0) {\r\n                // There are no other codecs, disable the stream.\r\n                mLine.port = 0;\r\n                mLine.direction = 'inactive';\r\n                mLine.payloads = '*';\r\n            } else {\r\n                mLine.payloads = keepPts.join(' ');\r\n            }\r\n\r\n            mLine.rtp = mLine.rtp.filter(\r\n                item => keepPts.indexOf(item.payload) !== -1);\r\n            mLine.fmtp = mLine.fmtp.filter(\r\n                item => keepPts.indexOf(item.payload) !== -1);\r\n            if (mLine.rtcpFb) {\r\n                mLine.rtcpFb = mLine.rtcpFb.filter(\r\n                    item => keepPts.indexOf(item.payload) !== -1);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default SDPUtil;\r\n","/* global module */\r\n/**\r\n * Enumeration of the video types\r\n * @type {{CAMERA: string, DESKTOP: string}}\r\n */\r\nconst VideoType = {\r\n    /**\r\n     * The camera video type.\r\n     */\r\n    CAMERA: 'camera',\r\n\r\n    /**\r\n     * The desktop video type.\r\n     */\r\n    DESKTOP: 'desktop'\r\n};\r\n\r\nmodule.exports = VideoType;\r\n","/* global\r\n          __filename,\r\n          MediaStreamTrack,\r\n          RTCIceCandidate: true,\r\n          RTCPeerConnection,\r\n          RTCSessionDescription: true\r\n*/\r\n\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport clonedeep from 'lodash.clonedeep';\r\n\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport Resolutions from '../../service/RTC/Resolutions';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport SDPUtil from '../xmpp/SDPUtil';\r\n\r\nimport screenObtainer from './ScreenObtainer';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Require adapter only for certain browsers. This is being done for\r\n// react-native, which has its own shims, and while browsers are being migrated\r\n// over to use adapter's shims.\r\nif (browser.usesAdapter()) {\r\n    require('webrtc-adapter');\r\n}\r\n\r\nconst eventEmitter = new EventEmitter();\r\n\r\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\r\n\r\n/**\r\n * Default resolution to obtain for video tracks if no resolution is specified.\r\n * This default is used for old gum flow only, as new gum flow uses\r\n * {@link DEFAULT_CONSTRAINTS}.\r\n */\r\nconst OLD_GUM_DEFAULT_RESOLUTION = 720;\r\n\r\n/**\r\n * Default devices to obtain when no specific devices are specified. This\r\n * default is used for old gum flow only.\r\n */\r\nconst OLD_GUM_DEFAULT_DEVICES = [ 'audio', 'video' ];\r\n\r\n/**\r\n * Default MediaStreamConstraints to use for calls to getUserMedia.\r\n *\r\n * @private\r\n */\r\nconst DEFAULT_CONSTRAINTS = {\r\n    video: {\r\n        height: {\r\n            ideal: 720,\r\n            max: 720,\r\n            min: 240\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * The default frame rate for Screen Sharing.\r\n */\r\nconst SS_DEFAULT_FRAME_RATE = 5;\r\n\r\n// Currently audio output device change is supported only in Chrome and\r\n// default output always has 'default' device ID\r\nlet audioOutputDeviceId = 'default'; // default device\r\n// whether user has explicitly set a device to use\r\nlet audioOutputChanged = false;\r\n\r\n// Disables all audio processing\r\nlet disableAP = false;\r\n\r\n// Disables Acoustic Echo Cancellation\r\nlet disableAEC = false;\r\n\r\n// Disables Noise Suppression\r\nlet disableNS = false;\r\n\r\n// Disables Automatic Gain Control\r\nlet disableAGC = false;\r\n\r\n// Disables Highpass Filter\r\nlet disableHPF = false;\r\n\r\nconst featureDetectionAudioEl = document.createElement('audio');\r\nconst isAudioOutputDeviceChangeAvailable\r\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\r\n\r\nlet availableDevices;\r\nlet availableDevicesPollTimer;\r\n\r\n/**\r\n * An empty function.\r\n */\r\nfunction emptyFuncton() {\r\n    // no-op\r\n}\r\n\r\n/**\r\n * Initialize wrapper function for enumerating devices.\r\n * TODO: remove this, it should no longer be needed.\r\n *\r\n * @returns {?Function}\r\n */\r\nfunction initEnumerateDevicesWithCallback() {\r\n    if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\r\n        return callback => {\r\n            navigator.mediaDevices.enumerateDevices()\r\n                .then(devices => {\r\n                    updateKnownDevices(devices);\r\n                    callback(devices);\r\n                }, () => {\r\n                    updateKnownDevices([]);\r\n                    callback([]);\r\n                });\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param constraints\r\n * @param isNewStyleConstraintsSupported\r\n * @param resolution\r\n */\r\nfunction setResolutionConstraints(\r\n        constraints,\r\n        isNewStyleConstraintsSupported,\r\n        resolution) {\r\n    if (Resolutions[resolution]) {\r\n        if (isNewStyleConstraintsSupported) {\r\n            constraints.video.width = {\r\n                ideal: Resolutions[resolution].width\r\n            };\r\n            constraints.video.height = {\r\n                ideal: Resolutions[resolution].height\r\n            };\r\n        }\r\n\r\n        constraints.video.mandatory.minWidth = Resolutions[resolution].width;\r\n        constraints.video.mandatory.minHeight = Resolutions[resolution].height;\r\n    }\r\n\r\n    if (constraints.video.mandatory.minWidth) {\r\n        constraints.video.mandatory.maxWidth\r\n            = constraints.video.mandatory.minWidth;\r\n    }\r\n\r\n    if (constraints.video.mandatory.minHeight) {\r\n        constraints.video.mandatory.maxHeight\r\n            = constraints.video.mandatory.minHeight;\r\n    }\r\n}\r\n\r\n/**\r\n * @param {string[]} um required user media types\r\n *\r\n * @param {Object} [options={}] optional parameters\r\n * @param {string} options.resolution\r\n * @param {number} options.bandwidth\r\n * @param {number} options.fps\r\n * @param {string} options.desktopStream\r\n * @param {string} options.cameraDeviceId\r\n * @param {string} options.micDeviceId\r\n * @param {CameraFacingMode} options.facingMode\r\n * @param {bool} firefox_fake_device\r\n * @param {Object} options.frameRate - used only for dekstop sharing.\r\n * @param {Object} options.frameRate.min - Minimum fps\r\n * @param {Object} options.frameRate.max - Maximum fps\r\n * @param {bool}   options.screenShareAudio - Used by electron clients to\r\n * enable system audio screen sharing.\r\n */\r\nfunction getConstraints(um, options = {}) {\r\n    const constraints = {\r\n        audio: false,\r\n        video: false\r\n    };\r\n\r\n    // Don't mix new and old style settings for Chromium as this leads\r\n    // to TypeError in new Chromium versions. @see\r\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=614716\r\n    // This is a temporary solution, in future we will fully split old and\r\n    // new style constraints when new versions of Chromium and Firefox will\r\n    // have stable support of new constraints format. For more information\r\n    // @see https://github.com/jitsi/lib-jitsi-meet/pull/136\r\n    const isNewStyleConstraintsSupported\r\n        = browser.isFirefox()\r\n            || browser.isSafari()\r\n            || browser.isReactNative();\r\n\r\n    if (um.indexOf('video') >= 0) {\r\n        // same behaviour as true\r\n        constraints.video = { mandatory: {},\r\n            optional: [] };\r\n\r\n        if (options.cameraDeviceId) {\r\n            if (isNewStyleConstraintsSupported) {\r\n                // New style of setting device id.\r\n                constraints.video.deviceId = options.cameraDeviceId;\r\n            }\r\n\r\n            // Old style.\r\n            constraints.video.mandatory.sourceId = options.cameraDeviceId;\r\n        } else {\r\n            // Prefer the front i.e. user-facing camera (to the back i.e.\r\n            // environment-facing camera, for example).\r\n            // TODO: Maybe use \"exact\" syntax if options.facingMode is defined,\r\n            // but this probably needs to be decided when updating other\r\n            // constraints, as we currently don't use \"exact\" syntax anywhere.\r\n            const facingMode = options.facingMode || CameraFacingMode.USER;\r\n\r\n            if (isNewStyleConstraintsSupported) {\r\n                constraints.video.facingMode = facingMode;\r\n            }\r\n            constraints.video.optional.push({\r\n                facingMode\r\n            });\r\n        }\r\n\r\n        if (options.minFps || options.maxFps || options.fps) {\r\n            // for some cameras it might be necessary to request 30fps\r\n            // so they choose 30fps mjpg over 10fps yuy2\r\n            if (options.minFps || options.fps) {\r\n                // Fall back to options.fps for backwards compatibility\r\n                options.minFps = options.minFps || options.fps;\r\n                constraints.video.mandatory.minFrameRate = options.minFps;\r\n            }\r\n            if (options.maxFps) {\r\n                constraints.video.mandatory.maxFrameRate = options.maxFps;\r\n            }\r\n        }\r\n\r\n        setResolutionConstraints(\r\n            constraints, isNewStyleConstraintsSupported, options.resolution);\r\n    }\r\n    if (um.indexOf('audio') >= 0) {\r\n        if (browser.isReactNative()) {\r\n            // The react-native-webrtc project that we're currently using\r\n            // expects the audio constraint to be a boolean.\r\n            constraints.audio = true;\r\n        } else if (browser.isFirefox()) {\r\n            if (options.micDeviceId) {\r\n                constraints.audio = {\r\n                    mandatory: {},\r\n                    deviceId: options.micDeviceId, // new style\r\n                    optional: [ {\r\n                        sourceId: options.micDeviceId // old style\r\n                    } ] };\r\n            } else {\r\n                constraints.audio = true;\r\n            }\r\n        } else {\r\n            // same behaviour as true\r\n            constraints.audio = { mandatory: {},\r\n                optional: [] };\r\n            if (options.micDeviceId) {\r\n                if (isNewStyleConstraintsSupported) {\r\n                    // New style of setting device id.\r\n                    constraints.audio.deviceId = options.micDeviceId;\r\n                }\r\n\r\n                // Old style.\r\n                constraints.audio.optional.push({\r\n                    sourceId: options.micDeviceId\r\n                });\r\n            }\r\n\r\n            // if it is good enough for hangouts...\r\n            constraints.audio.optional.push(\r\n                { echoCancellation: !disableAEC && !disableAP },\r\n                { googEchoCancellation: !disableAEC && !disableAP },\r\n                { googAutoGainControl: !disableAGC && !disableAP },\r\n                { googNoiseSuppression: !disableNS && !disableAP },\r\n                { googHighpassFilter: !disableHPF && !disableAP },\r\n                { googNoiseSuppression2: !disableNS && !disableAP },\r\n                { googEchoCancellation2: !disableAEC && !disableAP },\r\n                { googAutoGainControl2: !disableAGC && !disableAP }\r\n            );\r\n        }\r\n    }\r\n    if (um.indexOf('screen') >= 0) {\r\n        if (browser.isChrome()) {\r\n            constraints.video = {\r\n                mandatory: getSSConstraints({\r\n                    ...options,\r\n                    source: 'screen'\r\n                }),\r\n                optional: []\r\n            };\r\n\r\n        } else if (browser.isFirefox()) {\r\n            constraints.video = {\r\n                mozMediaSource: 'window',\r\n                mediaSource: 'window',\r\n                frameRate: options.frameRate || {\r\n                    min: SS_DEFAULT_FRAME_RATE,\r\n                    max: SS_DEFAULT_FRAME_RATE\r\n                }\r\n            };\r\n\r\n        } else {\r\n            const errmsg\r\n                = '\\'screen\\' WebRTC media source is supported only in Chrome'\r\n                    + ' and Firefox';\r\n\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n            logger.error(errmsg);\r\n        }\r\n    }\r\n    if (um.indexOf('desktop') >= 0) {\r\n        constraints.video = {\r\n            mandatory: getSSConstraints({\r\n                ...options,\r\n                source: 'desktop'\r\n            }),\r\n            optional: []\r\n        };\r\n\r\n        // Audio screen sharing for electron only works for screen type devices.\r\n        // i.e. when the user shares the whole desktop.\r\n        if (browser.isElectron() && options.screenShareAudio\r\n            && (options.desktopStream.indexOf('screen') >= 0)) {\r\n\r\n            // Provide constraints as described by the electron desktop capturer\r\n            // documentation here:\r\n            // https://www.electronjs.org/docs/api/desktop-capturer\r\n            // Note. The documentation specifies that chromeMediaSourceId should not be present\r\n            // which, in the case a users has multiple monitors, leads to them being shared all\r\n            // at once. However we tested with chromeMediaSourceId present and it seems to be\r\n            // working properly and also takes care of the previously mentioned issue.\r\n            constraints.audio = { mandatory: {\r\n                chromeMediaSource: constraints.video.mandatory.chromeMediaSource\r\n            } };\r\n        }\r\n    }\r\n\r\n    if (options.bandwidth) {\r\n        if (!constraints.video) {\r\n            // same behaviour as true\r\n            constraints.video = { mandatory: {},\r\n                optional: [] };\r\n        }\r\n        constraints.video.optional.push({ bandwidth: options.bandwidth });\r\n    }\r\n\r\n    // we turn audio for both audio and video tracks, the fake audio & video\r\n    // seems to work only when enabled in one getUserMedia call, we cannot get\r\n    // fake audio separate by fake video this later can be a problem with some\r\n    // of the tests\r\n    if (browser.isFirefox() && options.firefox_fake_device) {\r\n        // seems to be fixed now, removing this experimental fix, as having\r\n        // multiple audio tracks brake the tests\r\n        // constraints.audio = true;\r\n        constraints.fake = true;\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Creates a constraints object to be passed into a call to getUserMedia.\r\n *\r\n * @param {Array} um - An array of user media types to get. The accepted\r\n * types are \"video\", \"audio\", and \"desktop.\"\r\n * @param {Object} options - Various values to be added to the constraints.\r\n * @param {string} options.cameraDeviceId - The device id for the video\r\n * capture device to get video from.\r\n * @param {Object} options.constraints - Default constraints object to use\r\n * as a base for the returned constraints.\r\n * @param {Object} options.desktopStream - The desktop source id from which\r\n * to capture a desktop sharing video.\r\n * @param {string} options.facingMode - Which direction the camera is\r\n * pointing to.\r\n * @param {string} options.micDeviceId - The device id for the audio capture\r\n * device to get audio from.\r\n * @param {Object} options.frameRate - used only for dekstop sharing.\r\n * @param {Object} options.frameRate.min - Minimum fps\r\n * @param {Object} options.frameRate.max - Maximum fps\r\n * @private\r\n * @returns {Object}\r\n */\r\nfunction newGetConstraints(um = [], options = {}) {\r\n    // Create a deep copy of the constraints to avoid any modification of\r\n    // the passed in constraints object.\r\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\r\n\r\n    if (um.indexOf('video') >= 0) {\r\n        if (!constraints.video) {\r\n            constraints.video = {};\r\n        }\r\n\r\n        // Override the constraints on Safari because of the following webkit bug.\r\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\r\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\r\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\r\n        if (browser.isSafari()) {\r\n            if (constraints.video.height && constraints.video.height.ideal) {\r\n                constraints.video.height = { ideal: clonedeep(constraints.video.height.ideal) };\r\n            } else {\r\n                logger.warn('Ideal camera height missing, camera may not start properly');\r\n            }\r\n            if (constraints.video.width && constraints.video.width.ideal) {\r\n                constraints.video.width = { ideal: clonedeep(constraints.video.width.ideal) };\r\n            } else {\r\n                logger.warn('Ideal camera width missing, camera may not start properly');\r\n            }\r\n        }\r\n        if (options.cameraDeviceId) {\r\n            constraints.video.deviceId = options.cameraDeviceId;\r\n        } else {\r\n            const facingMode = options.facingMode || CameraFacingMode.USER;\r\n\r\n            constraints.video.facingMode = facingMode;\r\n        }\r\n    } else {\r\n        constraints.video = false;\r\n    }\r\n\r\n    if (um.indexOf('audio') >= 0) {\r\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\r\n            constraints.audio = {};\r\n        }\r\n\r\n        // Use the standard audio constraints on non-chromium browsers.\r\n        if (browser.isFirefox() || browser.isSafari()) {\r\n            constraints.audio = {\r\n                deviceId: options.micDeviceId,\r\n                autoGainControl: !disableAGC && !disableAP,\r\n                echoCancellation: !disableAEC && !disableAP,\r\n                noiseSuppression: !disableNS && !disableAP\r\n            };\r\n        } else {\r\n            // NOTE(brian): the new-style ('advanced' instead of 'optional')\r\n            // doesn't seem to carry through the googXXX constraints\r\n            // Changing back to 'optional' here (even with video using\r\n            // the 'advanced' style) allows them to be passed through\r\n            // but also requires the device id to capture to be set in optional\r\n            // as sourceId otherwise the constraints are considered malformed.\r\n            if (!constraints.audio.optional) {\r\n                constraints.audio.optional = [];\r\n            }\r\n            constraints.audio.optional.push(\r\n                { sourceId: options.micDeviceId },\r\n                { echoCancellation: !disableAEC && !disableAP },\r\n                { googEchoCancellation: !disableAEC && !disableAP },\r\n                { googAutoGainControl: !disableAGC && !disableAP },\r\n                { googNoiseSuppression: !disableNS && !disableAP },\r\n                { googHighpassFilter: !disableHPF && !disableAP },\r\n                { googNoiseSuppression2: !disableNS && !disableAP },\r\n                { googEchoCancellation2: !disableAEC && !disableAP },\r\n                { googAutoGainControl2: !disableAGC && !disableAP }\r\n            );\r\n        }\r\n    } else {\r\n        constraints.audio = false;\r\n    }\r\n\r\n    if (um.indexOf('desktop') >= 0) {\r\n        if (!constraints.video || typeof constraints.video === 'boolean') {\r\n            constraints.video = {};\r\n        }\r\n\r\n        constraints.video = {\r\n            mandatory: getSSConstraints({\r\n                ...options,\r\n                source: 'desktop'\r\n            })\r\n        };\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Generates GUM constraints for screen sharing.\r\n *\r\n * @param {Object} options - The options passed to\r\n * <tt>obtainAudioAndVideoPermissions</tt>.\r\n * @returns {Object} - GUM constraints.\r\n *\r\n * TODO: Currently only the new GUM flow and Chrome is using the method. We\r\n * should make it work for all use cases.\r\n */\r\nfunction getSSConstraints(options = {}) {\r\n    const {\r\n        desktopStream,\r\n        frameRate = {\r\n            min: SS_DEFAULT_FRAME_RATE,\r\n            max: SS_DEFAULT_FRAME_RATE\r\n        }\r\n    } = options;\r\n    const { max, min } = frameRate;\r\n\r\n    const constraints = {\r\n        chromeMediaSource: options.source,\r\n        maxWidth: window.screen.width,\r\n        maxHeight: window.screen.height\r\n    };\r\n\r\n    if (typeof min === 'number') {\r\n        constraints.minFrameRate = min;\r\n    }\r\n\r\n    if (typeof max === 'number') {\r\n        constraints.maxFrameRate = max;\r\n    }\r\n\r\n    if (typeof desktopStream !== 'undefined') {\r\n        constraints.chromeMediaSourceId = desktopStream;\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Generates constraints for screen sharing when using getDisplayMedia.\r\n * The constraints(MediaTrackConstraints) are applied to the resulting track.\r\n *\r\n * @returns {Object} - MediaTrackConstraints constraints.\r\n */\r\nfunction getTrackSSConstraints(options = {}) {\r\n    // we used to set height and width in the constraints, but this can lead\r\n    // to inconsistencies if the browser is on a lower resolution screen\r\n    // and we share a screen with bigger resolution, so they are now not set\r\n    const constraints = {\r\n        frameRate: SS_DEFAULT_FRAME_RATE\r\n    };\r\n    const { desktopSharingFrameRate } = options;\r\n\r\n    if (desktopSharingFrameRate && desktopSharingFrameRate.max) {\r\n        constraints.frameRate = desktopSharingFrameRate.max;\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Updates the granted permissions based on the options we requested and the\r\n * streams we received.\r\n * @param um the options we requested to getUserMedia.\r\n * @param stream the stream we received from calling getUserMedia.\r\n */\r\nfunction updateGrantedPermissions(um, stream) {\r\n    const audioTracksReceived\r\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\r\n    const videoTracksReceived\r\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\r\n    const grantedPermissions = {};\r\n\r\n    if (um.indexOf('video') !== -1) {\r\n        grantedPermissions.video = videoTracksReceived;\r\n    }\r\n    if (um.indexOf('audio') !== -1) {\r\n        grantedPermissions.audio = audioTracksReceived;\r\n    }\r\n\r\n    eventEmitter.emit(RTCEvents.GRANTED_PERMISSIONS, grantedPermissions);\r\n}\r\n\r\n/**\r\n * Checks if new list of available media devices differs from previous one.\r\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\r\n * @returns {boolean} - true if list is different, false otherwise.\r\n */\r\nfunction compareAvailableMediaDevices(newDevices) {\r\n    if (newDevices.length !== availableDevices.length) {\r\n        return true;\r\n    }\r\n\r\n    /* eslint-disable newline-per-chained-call */\r\n\r\n    return (\r\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\r\n            !== availableDevices\r\n                .map(mediaDeviceInfoToJSON).sort().join(''));\r\n\r\n    /* eslint-enable newline-per-chained-call */\r\n\r\n    /**\r\n     *\r\n     * @param info\r\n     */\r\n    function mediaDeviceInfoToJSON(info) {\r\n        return JSON.stringify({\r\n            kind: info.kind,\r\n            deviceId: info.deviceId,\r\n            groupId: info.groupId,\r\n            label: info.label,\r\n            facing: info.facing\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Sends analytics event with the passed device list.\r\n *\r\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\r\n * available devices.\r\n * @returns {void}\r\n */\r\nfunction sendDeviceListToAnalytics(deviceList) {\r\n    const audioInputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'audioinput').length;\r\n    const audioOutputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\r\n    const videoInputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'videoinput').length;\r\n    const videoOutputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'videooutput').length;\r\n\r\n    deviceList.forEach(device => {\r\n        const attributes = {\r\n            'audio_input_device_count': audioInputDeviceCount,\r\n            'audio_output_device_count': audioOutputDeviceCount,\r\n            'video_input_device_count': videoInputDeviceCount,\r\n            'video_output_device_count': videoOutputDeviceCount,\r\n            'device_id': device.deviceId,\r\n            'device_group_id': device.groupId,\r\n            'device_kind': device.kind,\r\n            'device_label': device.label\r\n        };\r\n\r\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Update known devices.\r\n *\r\n * @param {Array<Object>} pds - The new devices.\r\n * @returns {void}\r\n *\r\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\r\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\r\n * a row, which can cause async post devicechange processing to collide.\r\n */\r\nfunction updateKnownDevices(pds) {\r\n    if (compareAvailableMediaDevices(pds)) {\r\n        onMediaDevicesListChanged(pds);\r\n    }\r\n}\r\n\r\n/**\r\n * Event handler for the 'devicechange' event.\r\n *\r\n * @param {MediaDeviceInfo[]} devices - list of media devices.\r\n * @emits RTCEvents.DEVICE_LIST_CHANGED\r\n */\r\nfunction onMediaDevicesListChanged(devicesReceived) {\r\n    availableDevices = devicesReceived.slice(0);\r\n    logger.info(\r\n        'list of media devices has changed:',\r\n        availableDevices);\r\n\r\n    sendDeviceListToAnalytics(availableDevices);\r\n\r\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\r\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, devicesReceived);\r\n\r\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, devicesReceived);\r\n}\r\n\r\n/**\r\n * Handles the newly created Media Streams.\r\n * @param streams the new Media Streams\r\n * @param resolution the resolution of the video streams\r\n * @returns {*[]} object that describes the new streams\r\n */\r\nfunction handleLocalStream(streams, resolution) {\r\n    let audioStream, desktopStream, videoStream;\r\n    const res = [];\r\n\r\n    // XXX The function obtainAudioAndVideoPermissions has examined the type of\r\n    // the browser, its capabilities, etc. and has taken the decision whether to\r\n    // invoke getUserMedia per device (e.g. Firefox) or once for both audio and\r\n    // video (e.g. Chrome). In order to not duplicate the logic here, examine\r\n    // the specified streams and figure out what we've received based on\r\n    // obtainAudioAndVideoPermissions' decision.\r\n    if (streams) {\r\n        // As mentioned above, certian types of browser (e.g. Chrome) support\r\n        // (with a result which meets our requirements expressed bellow) calling\r\n        // getUserMedia once for both audio and video.\r\n        const audioVideo = streams.audioVideo;\r\n\r\n        if (audioVideo) {\r\n            const audioTracks = audioVideo.getAudioTracks();\r\n\r\n            if (audioTracks.length) {\r\n                audioStream = new MediaStream();\r\n                for (let i = 0; i < audioTracks.length; i++) {\r\n                    audioStream.addTrack(audioTracks[i]);\r\n                }\r\n            }\r\n\r\n            const videoTracks = audioVideo.getVideoTracks();\r\n\r\n            if (videoTracks.length) {\r\n                videoStream = new MediaStream();\r\n                for (let j = 0; j < videoTracks.length; j++) {\r\n                    videoStream.addTrack(videoTracks[j]);\r\n                }\r\n            }\r\n        } else {\r\n            // On other types of browser (e.g. Firefox) we choose (namely,\r\n            // obtainAudioAndVideoPermissions) to call getUserMedia per device\r\n            // (type).\r\n            audioStream = streams.audio;\r\n            videoStream = streams.video;\r\n        }\r\n\r\n        desktopStream = streams.desktop;\r\n    }\r\n\r\n    if (desktopStream) {\r\n        const { stream, sourceId, sourceType } = desktopStream;\r\n\r\n        res.push({\r\n            stream,\r\n            sourceId,\r\n            sourceType,\r\n            track: stream.getVideoTracks()[0],\r\n            mediaType: MediaType.VIDEO,\r\n            videoType: VideoType.DESKTOP\r\n        });\r\n    }\r\n    if (audioStream) {\r\n        res.push({\r\n            stream: audioStream,\r\n            track: audioStream.getAudioTracks()[0],\r\n            mediaType: MediaType.AUDIO,\r\n            videoType: null\r\n        });\r\n    }\r\n    if (videoStream) {\r\n        res.push({\r\n            stream: videoStream,\r\n            track: videoStream.getVideoTracks()[0],\r\n            mediaType: MediaType.VIDEO,\r\n            videoType: VideoType.CAMERA,\r\n            resolution\r\n        });\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n/**\r\n * Represents a default implementation of setting a <tt>MediaStream</tt> as the\r\n * source of a video element that tries to be browser-agnostic through feature\r\n * checking. Note though that it was not completely clear from the predating\r\n * browser-specific implementations what &quot;videoSrc&quot; was because one\r\n * implementation of {@link RTCUtils#getVideoSrc} would return\r\n * <tt>MediaStream</tt> (e.g. Firefox), another a <tt>string</tt> representation\r\n * of the <tt>URL</tt> of the <tt>MediaStream</tt> (e.g. Chrome) and the return\r\n * value was only used by {@link RTCUIHelper#getVideoId} which itself did not\r\n * appear to be used anywhere. Generally, the implementation will try to follow\r\n * the related standards i.e. work with the <tt>srcObject</tt> and <tt>src</tt>\r\n * properties of the specified <tt>element</tt> taking into account vender\r\n * prefixes.\r\n *\r\n * @param element the element whose video source/src is to be set to the\r\n * specified <tt>stream</tt>\r\n * @param {MediaStream} stream the <tt>MediaStream</tt> to set as the video\r\n * source/src of <tt>element</tt>\r\n */\r\nfunction defaultSetVideoSrc(element, stream) {\r\n    // srcObject\r\n    let srcObjectPropertyName = 'srcObject';\r\n\r\n    if (!(srcObjectPropertyName in element)) {\r\n        srcObjectPropertyName = 'mozSrcObject';\r\n        if (!(srcObjectPropertyName in element)) {\r\n            srcObjectPropertyName = null;\r\n        }\r\n    }\r\n    if (srcObjectPropertyName) {\r\n        element[srcObjectPropertyName] = stream;\r\n\r\n        return;\r\n    }\r\n\r\n    // src\r\n    let src;\r\n\r\n    if (stream) {\r\n        src = stream.jitsiObjectURL;\r\n\r\n        // Save the created URL for stream so we can reuse it and not keep\r\n        // creating URLs.\r\n        if (!src) {\r\n            stream.jitsiObjectURL = src = URL.createObjectURL(stream);\r\n        }\r\n    }\r\n    element.src = src || '';\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass RTCUtils extends Listenable {\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        super(eventEmitter);\r\n    }\r\n\r\n    /**\r\n     * Depending on the browser, sets difference instance methods for\r\n     * interacting with user media and adds methods to native WebRTC-related\r\n     * objects. Also creates an instance variable for peer connection\r\n     * constraints.\r\n     *\r\n     * @param {Object} options\r\n     * @returns {void}\r\n     */\r\n    init(options = {}) {\r\n        if (typeof options.disableAEC === 'boolean') {\r\n            disableAEC = options.disableAEC;\r\n            logger.info(`Disable AEC: ${disableAEC}`);\r\n        }\r\n        if (typeof options.disableNS === 'boolean') {\r\n            disableNS = options.disableNS;\r\n            logger.info(`Disable NS: ${disableNS}`);\r\n        }\r\n        if (typeof options.disableAP === 'boolean') {\r\n            disableAP = options.disableAP;\r\n            logger.info(`Disable AP: ${disableAP}`);\r\n        }\r\n        if (typeof options.disableAGC === 'boolean') {\r\n            disableAGC = options.disableAGC;\r\n            logger.info(`Disable AGC: ${disableAGC}`);\r\n        }\r\n        if (typeof options.disableHPF === 'boolean') {\r\n            disableHPF = options.disableHPF;\r\n            logger.info(`Disable HPF: ${disableHPF}`);\r\n        }\r\n\r\n        availableDevices = [];\r\n        window.clearInterval(availableDevicesPollTimer);\r\n        availableDevicesPollTimer = undefined;\r\n\r\n        this.enumerateDevices = initEnumerateDevicesWithCallback();\r\n\r\n        if (browser.usesNewGumFlow()) {\r\n            console.error(\"RTCUtils > usesNewGumFlow\")\r\n            this.RTCPeerConnectionType = RTCPeerConnection;\r\n\r\n            this.attachMediaStream\r\n                = wrapAttachMediaStream((element, stream) => {\r\n                    if (element) {\r\n                        element.srcObject = stream;\r\n                    }\r\n                });\r\n\r\n            this.getStreamID = ({ id }) => id;\r\n            this.getTrackID = ({ id }) => id;\r\n        } else if (browser.isChromiumBased() // this is chrome < 61\r\n                || browser.isReactNative()) {\r\n                    console.error(\"RTCUtils > isChromiumBased || isReactNative\")\r\n            this.RTCPeerConnectionType = RTCPeerConnection;\r\n\r\n            this.attachMediaStream\r\n                = wrapAttachMediaStream((element, stream) => {\r\n                    defaultSetVideoSrc(element, stream);\r\n\r\n                    return element;\r\n                });\r\n\r\n            this.getStreamID = function({ id }) {\r\n                // A. MediaStreams from FF endpoints have the characters '{' and\r\n                // '}' that make jQuery choke.\r\n                // B. The react-native-webrtc implementation that we use at the\r\n                // time of this writing returns a number for the id of\r\n                // MediaStream. Let's just say that a number contains no special\r\n                // characters.\r\n                return (\r\n                    typeof id === 'number'\r\n                        ? id\r\n                        : SDPUtil.filterSpecialChars(id));\r\n            };\r\n            this.getTrackID = ({ id }) => id;\r\n\r\n            if (!MediaStream.prototype.getVideoTracks) {\r\n                MediaStream.prototype.getVideoTracks = function() {\r\n                    return this.videoTracks;\r\n                };\r\n            }\r\n            if (!MediaStream.prototype.getAudioTracks) {\r\n                MediaStream.prototype.getAudioTracks = function() {\r\n                    return this.audioTracks;\r\n                };\r\n            }\r\n        } else {\r\n            console.error(\"RTCUtils > else\")\r\n            const message = 'Endpoint does not appear to be WebRTC-capable';\r\n\r\n            logger.error(message);\r\n            throw new Error(message);\r\n        }\r\n\r\n        this._initPCConstraints();\r\n\r\n        screenObtainer.init(\r\n            options,\r\n            this.getUserMediaWithConstraints.bind(this));\r\n\r\n        if (this.isDeviceListAvailable()) {\r\n            this.enumerateDevices(ds => {\r\n                availableDevices = ds.splice(0);\r\n\r\n                logger.debug('Available devices: ', availableDevices);\r\n                sendDeviceListToAnalytics(availableDevices);\r\n\r\n                eventEmitter.emit(\r\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\r\n                    availableDevices);\r\n\r\n                if (browser.supportsDeviceChangeEvent()) {\r\n                    navigator.mediaDevices.addEventListener(\r\n                        'devicechange',\r\n                        () => this.enumerateDevices(emptyFuncton));\r\n                } else {\r\n                    // Periodically poll enumerateDevices() method to check if\r\n                    // list of media devices has changed.\r\n                    availableDevicesPollTimer = window.setInterval(\r\n                        () => this.enumerateDevices(emptyFuncton),\r\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates instance objects for peer connection constraints both for p2p\r\n     * and outside of p2p.\r\n     */\r\n    _initPCConstraints() {\r\n        if (browser.isFirefox()) {\r\n            this.pcConstraints = {};\r\n        } else if (browser.isChromiumBased() || browser.isReactNative()) {\r\n            this.pcConstraints = { optional: [\r\n                { googHighStartBitrate: 0 },\r\n                { googPayloadPadding: true },\r\n                { googScreencastMinBitrate: 100 },\r\n                { googCpuOveruseDetection: true },\r\n                { googCpuOveruseEncodeUsage: true },\r\n                { googCpuUnderuseThreshold: 55 },\r\n                { googCpuOveruseThreshold: 85 }\r\n            ] };\r\n\r\n            this.p2pPcConstraints\r\n                = JSON.parse(JSON.stringify(this.pcConstraints));\r\n        }\r\n\r\n        this.p2pPcConstraints = this.p2pPcConstraints || this.pcConstraints;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n    * @param {string[]} um required user media types\r\n    * @param {Object} [options] optional parameters\r\n    * @param {string} options.resolution\r\n    * @param {number} options.bandwidth\r\n    * @param {number} options.fps\r\n    * @param {string} options.desktopStream\r\n    * @param {string} options.cameraDeviceId\r\n    * @param {string} options.micDeviceId\r\n    * @param {Object} options.frameRate - used only for dekstop sharing.\r\n    * @param {Object} options.frameRate.min - Minimum fps\r\n    * @param {Object} options.frameRate.max - Maximum fps\r\n    * @param {bool}   options.screenShareAudio - Used by electron clients to\r\n    * enable system audio screen sharing.\r\n    * @returns {Promise} Returns a media stream on success or a JitsiTrackError\r\n    * on failure.\r\n    **/\r\n    getUserMediaWithConstraints(um, options = {}) {\r\n        const constraints = getConstraints(um, options);\r\n\r\n        logger.info('Get media constraints', constraints);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            navigator.mediaDevices.getUserMedia(constraints)\r\n            .then(stream => {\r\n                logger.log('onUserMediaSuccess');\r\n                updateGrantedPermissions(um, stream);\r\n                resolve(stream);\r\n            })\r\n            .catch(error => {\r\n                logger.warn('Failed to get access to local media. '\r\n                    + ` ${error} ${constraints} `);\r\n                updateGrantedPermissions(um, undefined);\r\n                reject(new JitsiTrackError(error, constraints, um));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Acquires a media stream via getUserMedia that\r\n     * matches the given constraints\r\n     *\r\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\r\n     * @param {Object} constraints - Stream specifications to use.\r\n     * @returns {Promise}\r\n     */\r\n    _newGetUserMediaWithConstraints(umDevices, constraints = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            navigator.mediaDevices.getUserMedia(constraints)\r\n                .then(stream => {\r\n                    logger.log('onUserMediaSuccess');\r\n                    updateGrantedPermissions(umDevices, stream);\r\n                    resolve(stream);\r\n                })\r\n                .catch(error => {\r\n                    logger.warn('Failed to get access to local media. '\r\n                        + ` ${error} ${constraints} `);\r\n                    updateGrantedPermissions(umDevices, undefined);\r\n                    reject(new JitsiTrackError(error, constraints, umDevices));\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Acquire a display stream via the screenObtainer. This requires extra\r\n     * logic compared to use screenObtainer versus normal device capture logic\r\n     * in RTCUtils#_newGetUserMediaWithConstraints.\r\n     *\r\n     * @param {Object} options\r\n     * @param {string[]} options.desktopSharingSources\r\n     * @param {Object} options.desktopSharingFrameRate\r\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\r\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\r\n     * @returns {Promise} A promise which will be resolved with an object which\r\n     * contains the acquired display stream. If desktop sharing is not supported\r\n     * then a rejected promise will be returned.\r\n     */\r\n    _newGetDesktopMedia(options) {\r\n        if (!screenObtainer.isSupported() || !browser.supportsVideo()) {\r\n            return Promise.reject(\r\n                new Error('Desktop sharing is not supported!'));\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            screenObtainer.obtainStream(\r\n                this._parseDesktopSharingOptions(options),\r\n                stream => {\r\n                    resolve(stream);\r\n                },\r\n                error => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Creates the local MediaStreams.\r\n     * @param {Object} [options] optional parameters\r\n     * @param {Array} options.devices the devices that will be requested\r\n     * @param {string} options.resolution resolution constraints\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @param {Object} options.desktopSharingFrameRate\r\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\r\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\r\n     * @returns {*} Promise object that will receive the new JitsiTracks\r\n     */\r\n    obtainAudioAndVideoPermissions(options = {}) {\r\n        options.devices = options.devices || [ ...OLD_GUM_DEFAULT_DEVICES ];\r\n        options.resolution = options.resolution || OLD_GUM_DEFAULT_RESOLUTION;\r\n\r\n        const requestingDesktop = options.devices.includes('desktop');\r\n\r\n        if (requestingDesktop && !screenObtainer.isSupported()) {\r\n            return Promise.reject(\r\n                new Error('Desktop sharing is not supported!'));\r\n        }\r\n\r\n        return this._getAudioAndVideoStreams(options).then(streams =>\r\n            handleLocalStream(streams, options.resolution));\r\n    }\r\n\r\n    /**\r\n     * Performs one call to getUserMedia for audio and/or video and another call\r\n     * for desktop.\r\n     *\r\n     * @param {Object} options - An object describing how the gUM request should\r\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\r\n     * @returns {*} Promise object that will receive the new JitsiTracks on\r\n     * success or a JitsiTrackError on failure.\r\n     */\r\n    _getAudioAndVideoStreams(options) {\r\n        const requestingDesktop = options.devices.includes('desktop');\r\n\r\n        options.devices = options.devices.filter(device =>\r\n            device !== 'desktop');\r\n\r\n        const gumPromise = options.devices.length\r\n            ? this.getUserMediaWithConstraints(options.devices, options)\r\n            : Promise.resolve(null);\r\n\r\n        return gumPromise\r\n            .then(avStream => {\r\n                // If any requested devices are missing, call gum again in\r\n                // an attempt to obtain the actual error. For example, the\r\n                // requested video device is missing or permission was\r\n                // denied.\r\n                const missingTracks\r\n                    = this._getMissingTracks(options.devices, avStream);\r\n\r\n                if (missingTracks.length) {\r\n                    this.stopMediaStream(avStream);\r\n\r\n                    return this.getUserMediaWithConstraints(\r\n                        missingTracks, options)\r\n\r\n                        // GUM has already failed earlier and this success\r\n                        // handling should not be reached.\r\n                        .then(() => Promise.reject(new JitsiTrackError(\r\n                            { name: 'UnknownError' },\r\n                            getConstraints(options.devices, options),\r\n                            missingTracks)));\r\n                }\r\n\r\n                return avStream;\r\n            })\r\n            .then(audioVideo => {\r\n                if (!requestingDesktop) {\r\n                    return { audioVideo };\r\n                }\r\n\r\n                if (options.desktopSharingSourceDevice) {\r\n                    this.stopMediaStream(audioVideo);\r\n\r\n                    throw new Error('Using a camera as screenshare source is'\r\n                        + 'not supported on this browser.');\r\n                }\r\n\r\n                return new Promise((resolve, reject) => {\r\n                    screenObtainer.obtainStream(\r\n                        this._parseDesktopSharingOptions(options),\r\n                        desktop => resolve({\r\n                            audioVideo,\r\n                            desktop\r\n                        }),\r\n                        error => {\r\n                            if (audioVideo) {\r\n                                this.stopMediaStream(audioVideo);\r\n                            }\r\n                            reject(error);\r\n                        });\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Private utility for determining if the passed in MediaStream contains\r\n     * tracks of the type(s) specified in the requested devices.\r\n     *\r\n     * @param {string[]} requestedDevices - The track types that are expected to\r\n     * be includes in the stream.\r\n     * @param {MediaStream} stream - The MediaStream to check if it has the\r\n     * expected track types.\r\n     * @returns {string[]} An array of string with the missing track types. The\r\n     * array will be empty if all requestedDevices are found in the stream.\r\n     */\r\n    _getMissingTracks(requestedDevices = [], stream) {\r\n        const missingDevices = [];\r\n\r\n        const audioDeviceRequested = requestedDevices.includes('audio');\r\n        const audioTracksReceived\r\n            = stream && stream.getAudioTracks().length > 0;\r\n\r\n        if (audioDeviceRequested && !audioTracksReceived) {\r\n            missingDevices.push('audio');\r\n        }\r\n\r\n        const videoDeviceRequested = requestedDevices.includes('video');\r\n        const videoTracksReceived\r\n            = stream && stream.getVideoTracks().length > 0;\r\n\r\n        if (videoDeviceRequested && !videoTracksReceived) {\r\n            missingDevices.push('video');\r\n        }\r\n\r\n        return missingDevices;\r\n    }\r\n\r\n    /**\r\n     * Returns an object formatted for specifying desktop sharing parameters.\r\n     *\r\n     * @param {Object} options - Takes in the same options object as\r\n     * {@link obtainAudioAndVideoPermissions}.\r\n     * @returns {Object}\r\n     */\r\n    _parseDesktopSharingOptions(options) {\r\n        return {\r\n            desktopSharingSources: options.desktopSharingSources,\r\n            gumOptions: {\r\n                frameRate: options.desktopSharingFrameRate\r\n            },\r\n            trackOptions: getTrackSSConstraints(options)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets streams from specified device types. This function intentionally\r\n     * ignores errors for upstream to catch and handle instead.\r\n     *\r\n     * @param {Object} options - A hash describing what devices to get and\r\n     * relevant constraints.\r\n     * @param {string[]} options.devices - The types of media to capture. Valid\r\n     * values are \"desktop\", \"audio\", and \"video\".\r\n     * @param {Object} options.desktopSharingFrameRate\r\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\r\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\r\n     * @param {String} options.desktopSharingSourceDevice - The device id or\r\n     * label for a video input source that should be used for screensharing.\r\n     * @returns {Promise} The promise, when successful, will return an array of\r\n     * meta data for the requested device type, which includes the stream and\r\n     * track. If an error occurs, it will be deferred to the caller for\r\n     * handling.\r\n     */\r\n    newObtainAudioAndVideoPermissions(options) {\r\n        logger.info('Using the new gUM flow');\r\n\r\n        const mediaStreamsMetaData = [];\r\n\r\n        // Declare private functions to be used in the promise chain below.\r\n        // These functions are declared in the scope of this function because\r\n        // they are not being used anywhere else, so only this function needs to\r\n        // know about them.\r\n\r\n        /**\r\n         * Executes a request for desktop media if specified in options.\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        const maybeRequestDesktopDevice = function() {\r\n            const umDevices = options.devices || [];\r\n            const isDesktopDeviceRequested\r\n                = umDevices.indexOf('desktop') !== -1;\r\n\r\n            if (!isDesktopDeviceRequested) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            const {\r\n                desktopSharingSourceDevice,\r\n                desktopSharingSources,\r\n                desktopSharingFrameRate\r\n            } = options;\r\n\r\n            // Attempt to use a video input device as a screenshare source if\r\n            // the option is defined.\r\n            if (desktopSharingSourceDevice) {\r\n                const matchingDevice\r\n                    = availableDevices && availableDevices.find(device =>\r\n                        device.kind === 'videoinput'\r\n                            && (device.deviceId === desktopSharingSourceDevice\r\n                            || device.label === desktopSharingSourceDevice));\r\n\r\n                if (!matchingDevice) {\r\n                    return Promise.reject(new JitsiTrackError(\r\n                        { name: 'ConstraintNotSatisfiedError' },\r\n                        {},\r\n                        [ desktopSharingSourceDevice ]\r\n                    ));\r\n                }\r\n\r\n                const requestedDevices = [ 'video' ];\r\n\r\n                // Leverage the helper used by {@link _newGetDesktopMedia} to\r\n                // get constraints for the desktop stream.\r\n                const { gumOptions, trackOptions }\r\n                    = this._parseDesktopSharingOptions(options);\r\n\r\n                const constraints = {\r\n                    video: {\r\n                        ...gumOptions,\r\n                        deviceId: matchingDevice.deviceId\r\n                    }\r\n                };\r\n\r\n                return this._newGetUserMediaWithConstraints(\r\n                    requestedDevices, constraints)\r\n                    .then(stream => {\r\n                        const track = stream && stream.getTracks()[0];\r\n                        const applyConstrainsPromise\r\n                            = track && track.applyConstraints\r\n                                ? track.applyConstraints(trackOptions)\r\n                                : Promise.resolve();\r\n\r\n                        return applyConstrainsPromise\r\n                            .then(() => {\r\n                                return {\r\n                                    sourceType: 'device',\r\n                                    stream\r\n                                };\r\n                            });\r\n                    });\r\n            }\r\n\r\n            return this._newGetDesktopMedia({\r\n                desktopSharingSources,\r\n                desktopSharingFrameRate\r\n            });\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Creates a meta data object about the passed in desktopStream and\r\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\r\n         * returned later.\r\n         *\r\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\r\n         * capture.\r\n         * @returns {void}\r\n         */\r\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\r\n            if (!desktopStream) {\r\n                return;\r\n            }\r\n\r\n            const { stream, sourceId, sourceType } = desktopStream;\r\n\r\n            const desktopAudioTracks = stream.getAudioTracks();\r\n\r\n            if (desktopAudioTracks.length) {\r\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: desktopAudioStream,\r\n                    sourceId,\r\n                    sourceType,\r\n                    track: desktopAudioStream.getAudioTracks()[0]\r\n                });\r\n            }\r\n\r\n            const desktopVideoTracks = stream.getVideoTracks();\r\n\r\n            if (desktopVideoTracks.length) {\r\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: desktopVideoStream,\r\n                    sourceId,\r\n                    sourceType,\r\n                    track: desktopVideoStream.getVideoTracks()[0],\r\n                    videoType: VideoType.DESKTOP\r\n                });\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Executes a request for audio and/or video, as specified in options.\r\n         * By default both audio and video will be captured if options.devices\r\n         * is not defined.\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        const maybeRequestCaptureDevices = function() {\r\n            const umDevices = options.devices || [ 'audio', 'video' ];\r\n            const requestedCaptureDevices = umDevices.filter(device =>\r\n                device === 'audio'\r\n                || (device === 'video' && browser.supportsVideo()));\r\n\r\n            if (!requestedCaptureDevices.length) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            const constraints = newGetConstraints(\r\n                requestedCaptureDevices, options);\r\n\r\n            logger.info('Got media constraints: ', constraints);\r\n\r\n            return this._newGetUserMediaWithConstraints(\r\n                requestedCaptureDevices, constraints);\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Splits the passed in media stream into separate audio and video\r\n         * streams and creates meta data objects for each and pushes them to the\r\n         * internal array mediaStreamsMetaData to be returned later.\r\n         *\r\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\r\n         * video track.\r\n         * @returns {void}\r\n         */\r\n        const maybeCreateAndAddAVTracks = function(avStream) {\r\n            if (!avStream) {\r\n                return;\r\n            }\r\n\r\n            const audioTracks = avStream.getAudioTracks();\r\n\r\n            if (audioTracks.length) {\r\n                const audioStream = new MediaStream(audioTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: audioStream,\r\n                    track: audioStream.getAudioTracks()[0],\r\n                    effects: options.effects\r\n                });\r\n            }\r\n\r\n            const videoTracks = avStream.getVideoTracks();\r\n\r\n            if (videoTracks.length) {\r\n                const videoStream = new MediaStream(videoTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: videoStream,\r\n                    track: videoStream.getVideoTracks()[0],\r\n                    videoType: VideoType.CAMERA,\r\n                    effects: options.effects\r\n                });\r\n            }\r\n        };\r\n\r\n        return maybeRequestDesktopDevice()\r\n            .then(maybeCreateAndAddDesktopTrack)\r\n            .then(maybeRequestCaptureDevices)\r\n            .then(maybeCreateAndAddAVTracks)\r\n            .then(() => mediaStreamsMetaData)\r\n            .catch(error => {\r\n                mediaStreamsMetaData.forEach(({ stream }) => {\r\n                    this.stopMediaStream(stream);\r\n                });\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Checks whether it is possible to enumerate available cameras/microphones.\r\n     *\r\n     * @returns {boolean} {@code true} if the device listing is available;\r\n     * {@code false}, otherwise.\r\n     */\r\n    isDeviceListAvailable() {\r\n        return Boolean(\r\n            navigator.mediaDevices\r\n                && navigator.mediaDevices.enumerateDevices);\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @params {string} [deviceType] - type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        return deviceType === 'output' || deviceType === 'audiooutput'\r\n            ? isAudioOutputDeviceChangeAvailable\r\n            : true;\r\n    }\r\n\r\n    /**\r\n     * A method to handle stopping of the stream.\r\n     * One point to handle the differences in various implementations.\r\n     * @param mediaStream MediaStream object to stop.\r\n     */\r\n    stopMediaStream(mediaStream) {\r\n        if (!mediaStream) {\r\n            return;\r\n        }\r\n\r\n        mediaStream.getTracks().forEach(track => {\r\n            if (track.stop) {\r\n                track.stop();\r\n            }\r\n        });\r\n\r\n        // leave stop for implementation still using it\r\n        if (mediaStream.stop) {\r\n            mediaStream.stop();\r\n        }\r\n\r\n        // The MediaStream implementation of the react-native-webrtc project has\r\n        // an explicit release method that is to be invoked in order to release\r\n        // used resources such as memory.\r\n        if (mediaStream.release) {\r\n            mediaStream.release();\r\n        }\r\n\r\n        // if we have done createObjectURL, lets clean it\r\n        const url = mediaStream.jitsiObjectURL;\r\n\r\n        if (url) {\r\n            delete mediaStream.jitsiObjectURL;\r\n            URL.revokeObjectURL(url);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     * @returns {boolean}\r\n     */\r\n    isDesktopSharingEnabled() {\r\n        return screenObtainer.isSupported();\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\r\n     *      device\r\n     * @returns {Promise} - resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    setAudioOutputDevice(deviceId) {\r\n        if (!this.isDeviceChangeAvailable('output')) {\r\n            return Promise.reject(\r\n                new Error('Audio output device change is not supported'));\r\n        }\r\n\r\n        return featureDetectionAudioEl.setSinkId(deviceId)\r\n            .then(() => {\r\n                audioOutputDeviceId = deviceId;\r\n                audioOutputChanged = true;\r\n\r\n                logger.log(`Audio output device set to ${deviceId}`);\r\n\r\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                    deviceId);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, '' stands for default\r\n     * device\r\n     * @returns {string}\r\n     */\r\n    getAudioOutputDevice() {\r\n        return audioOutputDeviceId;\r\n    }\r\n\r\n    /**\r\n     * Returns list of available media devices if its obtained, otherwise an\r\n     * empty array is returned/\r\n     * @returns {Array} list of available media devices.\r\n     */\r\n    getCurrentlyAvailableMediaDevices() {\r\n        return availableDevices;\r\n    }\r\n\r\n    /**\r\n     * Returns event data for device to be reported to stats.\r\n     * @returns {MediaDeviceInfo} device.\r\n     */\r\n    getEventDataForActiveDevice(device) {\r\n        const deviceList = [];\r\n        const deviceData = {\r\n            'deviceId': device.deviceId,\r\n            'kind': device.kind,\r\n            'label': device.label,\r\n            'groupId': device.groupId\r\n        };\r\n\r\n        deviceList.push(deviceData);\r\n\r\n        return { deviceList };\r\n    }\r\n\r\n    /**\r\n     * Configures the given PeerConnection constraints to either enable or\r\n     * disable (according to the value of the 'enable' parameter) the\r\n     * 'googSuspendBelowMinBitrate' option.\r\n     * @param constraints the constraints on which to operate.\r\n     * @param enable {boolean} whether to enable or disable the suspend video\r\n     * option.\r\n     */\r\n    setSuspendVideo(constraints, enable) {\r\n        if (!constraints.optional) {\r\n            constraints.optional = [];\r\n        }\r\n\r\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\r\n        // that the elements of constraints.optional contain a single property).\r\n        constraints.optional\r\n            = constraints.optional.filter(\r\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\r\n\r\n        if (enable) {\r\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\r\n        }\r\n    }\r\n}\r\n\r\nconst rtcUtils = new RTCUtils();\r\n\r\n/**\r\n * Wraps original attachMediaStream function to set current audio output device\r\n * if this is supported.\r\n * @param {Function} origAttachMediaStream\r\n * @returns {Function}\r\n */\r\nfunction wrapAttachMediaStream(origAttachMediaStream) {\r\n    return function(element, stream) {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\r\n\r\n        if (stream\r\n                && rtcUtils.isDeviceChangeAvailable('output')\r\n                && stream.getAudioTracks\r\n                && stream.getAudioTracks().length\r\n\r\n                // we skip setting audio output if there was no explicit change\r\n                && audioOutputChanged) {\r\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\r\n                .catch(function(ex) {\r\n                    const err\r\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\r\n\r\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\r\n                        promise: this, // eslint-disable-line no-invalid-this\r\n                        reason: err\r\n                    });\r\n\r\n                    logger.warn(\r\n                        'Failed to set audio output device for the element.'\r\n                            + ' Default audio output device will be used'\r\n                            + ' instead',\r\n                        element,\r\n                        err);\r\n                });\r\n        }\r\n\r\n        return res;\r\n    };\r\n}\r\n\r\nexport default rtcUtils;\r\n","/**\r\n * This utility class defines custom onerror and onunhandledrejection functions.\r\n * The custom error handlers respect the previously-defined error handlers.\r\n * GlobalOnErrorHandler class provides utilities to add many custom error\r\n * handlers and to execute the error handlers directly.\r\n */\r\n\r\n\r\n/**\r\n * List with global error handlers that will be executed.\r\n */\r\nconst handlers = [];\r\n\r\n// If an old handler exists, also fire its events.\r\nconst oldOnErrorHandler = window.onerror;\r\n\r\n/**\r\n * Custom error handler that calls the old global error handler and executes\r\n * all handlers that were previously added.\r\n */\r\nfunction JitsiGlobalErrorHandler(...args) {\r\n    handlers.forEach(handler => handler(...args));\r\n    oldOnErrorHandler && oldOnErrorHandler(...args);\r\n}\r\n\r\n// If an old handler exists, also fire its events.\r\nconst oldOnUnhandledRejection = window.onunhandledrejection;\r\n\r\n/**\r\n * Custom handler that calls the old global handler and executes all handlers\r\n * that were previously added. This handler handles rejected Promises.\r\n */\r\nfunction JitsiGlobalUnhandledRejection(event) {\r\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\r\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\r\n}\r\n\r\n// Setting the custom error handlers.\r\nwindow.onerror = JitsiGlobalErrorHandler;\r\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\r\n\r\nconst GlobalOnErrorHandler = {\r\n    /**\r\n     * Adds new error handlers.\r\n     * @param handler the new handler.\r\n     */\r\n    addHandler(handler) {\r\n        handlers.push(handler);\r\n    },\r\n\r\n    /**\r\n     * Calls the global error handler if there is one.\r\n     * @param error the error to pass to the error handler\r\n     */\r\n    callErrorHandler(error) {\r\n        const errHandler = window.onerror;\r\n\r\n        if (!errHandler) {\r\n            return;\r\n        }\r\n        errHandler(null, null, null, null, error);\r\n    },\r\n\r\n    /**\r\n     * Calls the global rejection handler if there is one.\r\n     * @param error the error to pass to the rejection handler.\r\n     */\r\n    callUnhandledRejectionHandler(error) {\r\n        const errHandler = window.onunhandledrejection;\r\n\r\n        if (!errHandler) {\r\n            return;\r\n        }\r\n        errHandler(error);\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = GlobalOnErrorHandler;\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport { safeCounterIncrement } from '../util/MathUtil';\r\n\r\nimport BridgeChannel from './BridgeChannel';\r\nimport JitsiLocalTrack from './JitsiLocalTrack';\r\nimport RTCUtils from './RTCUtils';\r\nimport TraceablePeerConnection from './TraceablePeerConnection';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The counter used to generated id numbers assigned to peer connections\r\n * @type {number}\r\n */\r\nlet peerConnectionIdCounter = 0;\r\n\r\n/**\r\n * The counter used to generate id number for the local\r\n * <code>MediaStreamTrack</code>s.\r\n * @type {number}\r\n */\r\nlet rtcTrackIdCounter = 0;\r\n\r\n/**\r\n *\r\n * @param tracksInfo\r\n * @param options\r\n */\r\nfunction createLocalTracks(tracksInfo, options) {\r\n    const newTracks = [];\r\n    let deviceId = null;\r\n\r\n    tracksInfo.forEach(trackInfo => {\r\n        if (trackInfo.mediaType === MediaType.AUDIO) {\r\n            deviceId = options.micDeviceId;\r\n        } else if (trackInfo.videoType === VideoType.CAMERA) {\r\n            deviceId = options.cameraDeviceId;\r\n        }\r\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\r\n        const localTrack = new JitsiLocalTrack({\r\n            ...trackInfo,\r\n            deviceId,\r\n            facingMode: options.facingMode,\r\n            rtcId: rtcTrackIdCounter,\r\n            effects: options.effects\r\n        });\r\n\r\n        newTracks.push(localTrack);\r\n    });\r\n\r\n    return newTracks;\r\n}\r\n\r\n/**\r\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\r\n * about MedieaTracks.\r\n *\r\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\r\n * MediaTrack instances. Each can look like:\r\n * {{\r\n *     stream: MediaStream instance that holds a track with audio or video,\r\n *     track: MediaTrack within the MediaStream,\r\n *     videoType: \"camera\" or \"desktop\" or falsy,\r\n *     sourceId: ID of the desktopsharing source,\r\n *     sourceType: The desktopsharing source type,\r\n *     effects: Array of effect types\r\n * }}\r\n */\r\nfunction _newCreateLocalTracks(mediaStreamMetaData = []) {\r\n    return mediaStreamMetaData.map(metaData => {\r\n        const {\r\n            sourceId,\r\n            sourceType,\r\n            stream,\r\n            track,\r\n            videoType,\r\n            effects\r\n        } = metaData;\r\n\r\n        const { deviceId, facingMode } = track.getSettings();\r\n\r\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\r\n        // so RTC does not need to handle ID management. This move would be\r\n        // safer to do once the old createLocalTracks is removed.\r\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\r\n\r\n        return new JitsiLocalTrack({\r\n            deviceId,\r\n            facingMode,\r\n            mediaType: track.kind,\r\n            rtcId: rtcTrackIdCounter,\r\n            sourceId,\r\n            sourceType,\r\n            stream,\r\n            track,\r\n            videoType: videoType || null,\r\n            effects\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport default class RTC extends Listenable {\r\n    /**\r\n     *\r\n     * @param conference\r\n     * @param options\r\n     */\r\n    constructor(conference, options = {}) {\r\n        super();\r\n        this.conference = conference;\r\n\r\n        /**\r\n         * A map of active <tt>TraceablePeerConnection</tt>.\r\n         * @type {Map.<number, TraceablePeerConnection>}\r\n         */\r\n        this.peerConnections = new Map();\r\n\r\n        this.localTracks = [];\r\n\r\n        this.options = options;\r\n\r\n        // BridgeChannel instance.\r\n        // @private\r\n        // @type {BridgeChannel}\r\n        this._channel = null;\r\n\r\n        /**\r\n         * The value specified to the last invocation of setLastN before the\r\n         * channel completed opening. If non-null, the value will be sent\r\n         * through a channel (once) as soon as it opens and will then be\r\n         * discarded.\r\n         * @private\r\n         * @type {number}\r\n         */\r\n        this._lastN = -1;\r\n\r\n        /**\r\n         * Defines the last N endpoints list. It can be null or an array once\r\n         * initialised with a channel last N event.\r\n         * @type {Array<string>|null}\r\n         * @private\r\n         */\r\n        this._lastNEndpoints = null;\r\n\r\n        /*\r\n         * Holds the sender video constraints signaled from the bridge.\r\n         */\r\n        this._senderVideoConstraints = {};\r\n\r\n        /**\r\n         * The number representing the maximum video height the local client\r\n         * should receive from the bridge.\r\n         *\r\n         * @type {number|undefined}\r\n         * @private\r\n         */\r\n        this._maxFrameHeight = undefined;\r\n\r\n        /**\r\n         * The endpoint ID of currently pinned participant or <tt>null</tt> if\r\n         * no user is pinned.\r\n         * @type {string|null}\r\n         * @private\r\n         */\r\n        this._pinnedEndpoint = null;\r\n\r\n        /**\r\n         * The endpoint IDs of currently selected participants.\r\n         *\r\n         * @type {Array}\r\n         * @private\r\n         */\r\n        this._selectedEndpoints = [];\r\n\r\n        // The last N change listener.\r\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\r\n\r\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\r\n        this._updateAudioOutputForAudioTracks\r\n            = this._updateAudioOutputForAudioTracks.bind(this);\r\n\r\n        // Switch audio output device on all remote audio tracks. Local audio\r\n        // tracks handle this event by themselves.\r\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\r\n            RTCUtils.addListener(\r\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._updateAudioOutputForAudioTracks\r\n            );\r\n\r\n            RTCUtils.addListener(\r\n                RTCEvents.DEVICE_LIST_CHANGED,\r\n                this._onDeviceListChanged\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes any listeners and stored state from this {@code RTC} instance.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    destroy() {\r\n        RTCUtils.removeListener(\r\n            RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n            this._updateAudioOutputForAudioTracks\r\n        );\r\n\r\n        RTCUtils.removeListener(\r\n            RTCEvents.DEVICE_LIST_CHANGED,\r\n            this._onDeviceListChanged\r\n        );\r\n\r\n        this.removeListener(\r\n            RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n            this._lastNChangeListener\r\n        );\r\n\r\n        if (this._channelOpenListener) {\r\n            this.removeListener(\r\n                RTCEvents.DATA_CHANNEL_OPEN,\r\n                this._channelOpenListener\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exposes the private helper for converting a WebRTC MediaStream to a\r\n     * JitsiLocalTrack.\r\n     *\r\n     * @param {Array<Object>} tracksInfo\r\n     * @returns {Array<JitsiLocalTrack>}\r\n     */\r\n    static newCreateLocalTracks(tracksInfo) {\r\n        return _newCreateLocalTracks(tracksInfo);\r\n    }\r\n\r\n    /**\r\n     * Creates the local MediaStreams.\r\n     * @param {object} [options] Optional parameters.\r\n     * @param {array} options.devices The devices that will be requested.\r\n     * @param {string} options.resolution Resolution constraints.\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @returns {*} Promise object that will receive the new JitsiTracks\r\n     */\r\n    static obtainAudioAndVideoPermissions(options) {\r\n        const usesNewGumFlow = browser.usesNewGumFlow();\r\n        const obtainMediaPromise = usesNewGumFlow\r\n            ? RTCUtils.newObtainAudioAndVideoPermissions(options)\r\n            : RTCUtils.obtainAudioAndVideoPermissions(options);\r\n\r\n        return obtainMediaPromise.then(tracksInfo => {\r\n            if (usesNewGumFlow) {\r\n                return _newCreateLocalTracks(tracksInfo);\r\n            }\r\n\r\n            return createLocalTracks(tracksInfo, options);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes the bridge channel of this instance.\r\n     * At least one of both, peerconnection or wsUrl parameters, must be\r\n     * given.\r\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\r\n     * instance.\r\n     * @param {string} [wsUrl] WebSocket URL.\r\n     */\r\n    initializeBridgeChannel(peerconnection, wsUrl) {\r\n        this._channel = new BridgeChannel(\r\n            peerconnection, wsUrl, this.eventEmitter, this._senderVideoConstraintsChanged.bind(this));\r\n\r\n        this._channelOpenListener = () => {\r\n            // When the channel becomes available, tell the bridge about\r\n            // video selections so that it can do adaptive simulcast,\r\n            // we want the notification to trigger even if userJid\r\n            // is undefined, or null.\r\n            try {\r\n                this._channel.sendPinnedEndpointMessage(\r\n                    this._pinnedEndpoint);\r\n                this._channel.sendSelectedEndpointsMessage(\r\n                    this._selectedEndpoints);\r\n\r\n                if (typeof this._maxFrameHeight !== 'undefined') {\r\n                    this._channel.sendReceiverVideoConstraintMessage(\r\n                        this._maxFrameHeight);\r\n                }\r\n            } catch (error) {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(\r\n                    `Cannot send selected(${this._selectedEndpoint})`\r\n                    + `pinned(${this._pinnedEndpoint})`\r\n                    + `frameHeight(${this._maxFrameHeight}) endpoint message`,\r\n                    error);\r\n            }\r\n\r\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN,\r\n                this._channelOpenListener);\r\n            this._channelOpenListener = null;\r\n\r\n            // If setLastN was invoked before the bridge channel completed\r\n            // opening, apply the specified value now that the channel\r\n            // is open. NOTE that -1 is the default value assumed by both\r\n            // RTC module and the JVB.\r\n            if (this._lastN !== -1) {\r\n                this._channel.sendSetLastNMessage(this._lastN);\r\n            }\r\n        };\r\n\r\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN,\r\n            this._channelOpenListener);\r\n\r\n        // Add Last N change listener.\r\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n            this._lastNChangeListener);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the list of known audio and video devices has\r\n     * been updated. Attempts to update the known available audio output\r\n     * devices.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onDeviceListChanged() {\r\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\r\n    }\r\n\r\n    /**\r\n     * Notifies this instance that the sender video constraints signaled from the bridge have changed.\r\n     *\r\n     * @param {Object} senderVideoConstraints the sender video constraints from the bridge.\r\n     * @private\r\n     */\r\n    _senderVideoConstraintsChanged(senderVideoConstraints) {\r\n        logger.info(`Received remote max frame height of ${senderVideoConstraints} on the bridge channel`);\r\n        this._senderVideoConstraints = senderVideoConstraints;\r\n        this.eventEmitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * Receives events when Last N had changed.\r\n     * @param {array} lastNEndpoints The new Last N endpoints.\r\n     * @private\r\n     */\r\n    _onLastNChanged(lastNEndpoints = []) {\r\n        const oldLastNEndpoints = this._lastNEndpoints || [];\r\n        let leavingLastNEndpoints = [];\r\n        let enteringLastNEndpoints = [];\r\n\r\n        this._lastNEndpoints = lastNEndpoints;\r\n\r\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\r\n            id => !this.isInLastN(id));\r\n\r\n        enteringLastNEndpoints = lastNEndpoints.filter(\r\n            id => oldLastNEndpoints.indexOf(id) === -1);\r\n\r\n        this.conference.eventEmitter.emit(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            leavingLastNEndpoints,\r\n            enteringLastNEndpoints);\r\n    }\r\n\r\n    /**\r\n     * Should be called when current media session ends and after the\r\n     * PeerConnection has been closed using PeerConnection.close() method.\r\n     */\r\n    onCallEnded() {\r\n        if (this._channel) {\r\n            // The BridgeChannel is not explicitly closed as the PeerConnection\r\n            // is closed on call ended which triggers datachannel onclose\r\n            // events. If using a WebSocket, the channel must be closed since\r\n            // it is not managed by the PeerConnection.\r\n            // The reference is cleared to disable any logic related to the\r\n            // channel.\r\n            if (this._channel && this._channel.mode === 'websocket') {\r\n                this._channel.close();\r\n            }\r\n\r\n            this._channel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum video size the local participant should receive from\r\n     * remote participants. Will cache the value and send it through the channel\r\n     * once it is created.\r\n     *\r\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\r\n     * this receiver is willing to receive.\r\n     * @returns {void}\r\n     */\r\n    setReceiverVideoConstraint(maxFrameHeight) {\r\n        this._maxFrameHeight = maxFrameHeight;\r\n\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elects the participants with the given ids to be the selected\r\n     * participants in order to always receive video for this participant (even\r\n     * when last n is enabled). If there is no channel we store it and send it\r\n     * through the channel once it is created.\r\n     *\r\n     * @param {Array<string>} ids - The user ids.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails.\r\n     * @returns {void}\r\n     */\r\n    selectEndpoints(ids) {\r\n        this._selectedEndpoints = ids;\r\n\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendSelectedEndpointsMessage(ids);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elects the participant with the given id to be the pinned participant in\r\n     * order to always receive video for this participant (even when last n is\r\n     * enabled).\r\n     * @param {stirng} id The user id.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails.\r\n     */\r\n    pinEndpoint(id) {\r\n        // Cache the value if channel is missing, till we open it.\r\n        this._pinnedEndpoint = id;\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendPinnedEndpointMessage(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param eventType\r\n     * @param listener\r\n     */\r\n    static addListener(eventType, listener) {\r\n        RTCUtils.addListener(eventType, listener);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param eventType\r\n     * @param listener\r\n     */\r\n    static removeListener(eventType, listener) {\r\n        RTCUtils.removeListener(eventType, listener);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param options\r\n     */\r\n    static init(options = {}) {\r\n        this.options = options;\r\n\r\n        return RTCUtils.init(this.options);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>TraceablePeerConnection</tt>\r\n     * @param {SignalingLayer} signaling The signaling layer that will\r\n     *      provide information about the media or participants which is not\r\n     *      carried over SDP.\r\n     * @param {object} iceConfig An object describing the ICE config like\r\n     *      defined in the WebRTC specification.\r\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\r\n     *      in a peer to peer type of session.\r\n     * @param {object} options The config options.\r\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\r\n     * enabled on the PeerConnection.\r\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\r\n     *      the simulcast.\r\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\r\n     *      RTX.\r\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\r\n     *      disabled by removing it from the SDP.\r\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\r\n     *      preferred over other video codecs.\r\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\r\n     * @return {TraceablePeerConnection}\r\n     */\r\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\r\n        const pcConstraints = RTC.getPCConstraints(isP2P);\r\n\r\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\r\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\r\n\r\n            Statistics.analytics.addPermanentProperties(\r\n                { abtestSuspendVideo: options.abtestSuspendVideo });\r\n        }\r\n\r\n        // FIXME: We should rename iceConfig to pcConfig.\r\n\r\n        if (options.enableInsertableStreams) {\r\n            logger.debug('E2EE - setting insertable streams constraints');\r\n            iceConfig.encodedInsertableStreams = true;\r\n            iceConfig.forceEncodedAudioInsertableStreams = true; // legacy, to be removed in M88.\r\n            iceConfig.forceEncodedVideoInsertableStreams = true; // legacy, to be removed in M88.\r\n        }\r\n\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n        iceConfig.sdpSemantics = 'unified-plan';\r\n\r\n        if (browser.supportsSdpSemantics()) {\r\n            logger.debug('WebRTC application is running in plan-b mode');\r\n            pcConfig.sdpSemantics = 'plan-b';\r\n        }\r\n\r\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\r\n        // The default policy generates separate ice candidates for audio and video connections.\r\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\r\n        iceConfig.bundlePolicy = 'max-bundle';\r\n\r\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\r\n\r\n        const newConnection\r\n            = new TraceablePeerConnection(\r\n                this,\r\n                peerConnectionIdCounter,\r\n                signaling,\r\n                iceConfig, pcConstraints,\r\n                isP2P, options);\r\n\r\n        this.peerConnections.set(newConnection.id, newConnection);\r\n\r\n        return newConnection;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Removed given peer connection from this RTC module instance.\r\n     * @param {TraceablePeerConnection} traceablePeerConnection\r\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\r\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\r\n     * this RTC instance.\r\n     */\r\n    _removePeerConnection(traceablePeerConnection) {\r\n        const id = traceablePeerConnection.id;\r\n\r\n        if (this.peerConnections.has(id)) {\r\n            // NOTE Remote tracks are not removed here.\r\n            this.peerConnections.delete(id);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param track\r\n     */\r\n    addLocalTrack(track) {\r\n        if (!track) {\r\n            throw new Error('track must not be null nor undefined');\r\n        }\r\n\r\n        this.localTracks.push(track);\r\n\r\n        track.conference = this.conference;\r\n    }\r\n\r\n    /**\r\n     * Returns the current value for \"lastN\" - the amount of videos are going\r\n     * to be delivered. When set to -1 for unlimited or all available videos.\r\n     * @return {number}\r\n     */\r\n    getLastN() {\r\n        return this._lastN;\r\n    }\r\n\r\n    /**\r\n     * @return {Object} The sender video constraints signaled from the brridge.\r\n     */\r\n    getSenderVideoConstraints() {\r\n        return this._senderVideoConstraints;\r\n    }\r\n\r\n    /**\r\n     * Get local video track.\r\n     * @returns {JitsiLocalTrack|undefined}\r\n     */\r\n    getLocalVideoTrack() {\r\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\r\n\r\n\r\n        return localVideo.length ? localVideo[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Get local audio track.\r\n     * @returns {JitsiLocalTrack|undefined}\r\n     */\r\n    getLocalAudioTrack() {\r\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\r\n\r\n\r\n        return localAudio.length ? localAudio[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns the local tracks of the given media type, or all local tracks if\r\n     * no specific type is given.\r\n     * @param {MediaType} [mediaType] Optional media type filter.\r\n     * (audio or video).\r\n     */\r\n    getLocalTracks(mediaType) {\r\n        let tracks = this.localTracks.slice();\r\n\r\n        if (mediaType !== undefined) {\r\n            tracks = tracks.filter(\r\n                track => track.getType() === mediaType);\r\n        }\r\n\r\n        return tracks;\r\n    }\r\n\r\n    /**\r\n     * Obtains all remote tracks currently known to this RTC module instance.\r\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\r\n     *      by their media type if this argument is specified.\r\n     * @return {Array<JitsiRemoteTrack>}\r\n     */\r\n    getRemoteTracks(mediaType) {\r\n        let remoteTracks = [];\r\n\r\n        for (const tpc of this.peerConnections.values()) {\r\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\r\n\r\n            if (pcRemoteTracks) {\r\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\r\n            }\r\n        }\r\n\r\n        return remoteTracks;\r\n    }\r\n\r\n    /**\r\n     * Set mute for all local audio streams attached to the conference.\r\n     * @param value The mute value.\r\n     * @returns {Promise}\r\n     */\r\n    setAudioMute(value) {\r\n        const mutePromises = [];\r\n\r\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\r\n            // this is a Promise\r\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\r\n        });\r\n\r\n        // We return a Promise from all Promises so we can wait for their\r\n        // execution.\r\n        return Promise.all(mutePromises);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param track\r\n     */\r\n    removeLocalTrack(track) {\r\n        const pos = this.localTracks.indexOf(track);\r\n\r\n        if (pos === -1) {\r\n            return;\r\n        }\r\n\r\n        this.localTracks.splice(pos, 1);\r\n    }\r\n\r\n    /**\r\n     * Removes all JitsiRemoteTracks associated with given MUC nickname\r\n     * (resource part of the JID). Returns array of removed tracks.\r\n     *\r\n     * @param {string} Owner The resource part of the MUC JID.\r\n     * @returns {JitsiRemoteTrack[]}\r\n     */\r\n    removeRemoteTracks(owner) {\r\n        let removedTracks = [];\r\n\r\n        for (const tpc of this.peerConnections.values()) {\r\n            const pcRemovedTracks = tpc.removeRemoteTracks(owner);\r\n\r\n            removedTracks = removedTracks.concat(pcRemovedTracks);\r\n        }\r\n\r\n        logger.debug(\r\n            `Removed remote tracks for ${owner}`\r\n                + ` count: ${removedTracks.length}`);\r\n\r\n        return removedTracks;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    static getPCConstraints(isP2P) {\r\n        const pcConstraints\r\n            = isP2P ? RTCUtils.p2pPcConstraints : RTCUtils.pcConstraints;\r\n\r\n        if (!pcConstraints) {\r\n            return {};\r\n        }\r\n\r\n        return JSON.parse(JSON.stringify(pcConstraints));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param elSelector\r\n     * @param stream\r\n     */\r\n    static attachMediaStream(elSelector, stream) {\r\n        return RTCUtils.attachMediaStream(elSelector, stream);\r\n    }\r\n\r\n    /**\r\n     * Returns the id of the given stream.\r\n     * @param {MediaStream} stream\r\n     */\r\n    static getStreamID(stream) {\r\n        return RTCUtils.getStreamID(stream);\r\n    }\r\n\r\n    /**\r\n     * Returns the id of the given track.\r\n     * @param {MediaStreamTrack} track\r\n     */\r\n    static getTrackID(track) {\r\n        return RTCUtils.getTrackID(track);\r\n    }\r\n\r\n    /**\r\n     * Returns true if retrieving the the list of input devices is supported\r\n     * and false if not.\r\n     */\r\n    static isDeviceListAvailable() {\r\n        return RTCUtils.isDeviceListAvailable();\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @param {string} [deviceType] Type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    static isDeviceChangeAvailable(deviceType) {\r\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the current execution environment supports WebRTC (for\r\n     * use within this library).\r\n     *\r\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\r\n     * execution environment (for use within this library); {@code false},\r\n     * otherwise.\r\n     */\r\n    static isWebRtcSupported() {\r\n        return browser.isSupported();\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, '' stands for default\r\n     * device\r\n     * @returns {string}\r\n     */\r\n    static getAudioOutputDevice() {\r\n        return RTCUtils.getAudioOutputDevice();\r\n    }\r\n\r\n    /**\r\n     * Returns list of available media devices if its obtained, otherwise an\r\n     * empty array is returned/\r\n     * @returns {array} list of available media devices.\r\n     */\r\n    static getCurrentlyAvailableMediaDevices() {\r\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\r\n    }\r\n\r\n    /**\r\n     * Returns event data for device to be reported to stats.\r\n     * @returns {MediaDeviceInfo} device.\r\n     */\r\n    static getEventDataForActiveDevice(device) {\r\n        return RTCUtils.getEventDataForActiveDevice(device);\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId Id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices().\r\n     * @returns {Promise} resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    static setAudioOutputDevice(deviceId) {\r\n        return RTCUtils.setAudioOutputDevice(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\r\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\r\n     * \"mixed\" JVB stream.\r\n     *\r\n     * Clients that implement Unified Plan, such as Firefox use recvonly\r\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\r\n     * to Plan B where there are only 3 channels: audio, video and data.\r\n     *\r\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\r\n     * @returns {boolean}\r\n     */\r\n    static isUserStream(stream) {\r\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\r\n     * ID is considered a valid \"user\" stream which means that it's not a\r\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\r\n     *\r\n     * Clients that implement Unified Plan, such as Firefox use recvonly\r\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\r\n     * to Plan B where there are only 3 channels: audio, video and data.\r\n     *\r\n     * @param {string} streamId The id of WebRTC MediaStream.\r\n     * @returns {boolean}\r\n     */\r\n    static isUserStreamById(streamId) {\r\n        return streamId && streamId !== 'mixedmslabel'\r\n            && streamId !== 'default';\r\n    }\r\n\r\n    /**\r\n     * Allows to receive list of available cameras/microphones.\r\n     * @param {function} callback Would receive array of devices as an\r\n     *      argument.\r\n     */\r\n    static enumerateDevices(callback) {\r\n        RTCUtils.enumerateDevices(callback);\r\n    }\r\n\r\n    /**\r\n     * A method to handle stopping of the stream.\r\n     * One point to handle the differences in various implementations.\r\n     * @param {MediaStream} mediaStream MediaStream object to stop.\r\n     */\r\n    static stopMediaStream(mediaStream) {\r\n        RTCUtils.stopMediaStream(mediaStream);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     * @returns {boolean}\r\n     */\r\n    static isDesktopSharingEnabled() {\r\n        return RTCUtils.isDesktopSharingEnabled();\r\n    }\r\n\r\n    /**\r\n     * Closes the currently opened bridge channel.\r\n     */\r\n    closeBridgeChannel() {\r\n        if (this._channel) {\r\n            this._channel.close();\r\n            this._channel = null;\r\n\r\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n                this._lastNChangeListener);\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     *\r\n     * @param {TraceablePeerConnection} tpc\r\n     * @param {number} ssrc\r\n     * @param {number} audioLevel\r\n     * @param {boolean} isLocal\r\n     */\r\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\r\n        const track = tpc.getTrackBySSRC(ssrc);\r\n\r\n        if (!track) {\r\n            return;\r\n        } else if (!track.isAudioTrack()) {\r\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\r\n\r\n            return;\r\n        } else if (track.isLocal() !== isLocal) {\r\n            logger.error(\r\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\r\n        }\r\n\r\n        track.setAudioLevel(audioLevel, tpc);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Sends message via the bridge channel.\r\n     * @param {string} to The id of the endpoint that should receive the\r\n     *      message. If \"\" the message will be sent to all participants.\r\n     * @param {object} payload The payload of the message.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails or there is no data channel created.\r\n     */\r\n    sendChannelMessage(to, payload) {\r\n        if (this._channel) {\r\n            this._channel.sendMessage(to, payload);\r\n        } else {\r\n            throw new Error('Channel support is disabled!');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Selects a new value for \"lastN\". The requested amount of videos are going\r\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\r\n     * all available videos.\r\n     * @param {number} value the new value for lastN.\r\n     */\r\n    setLastN(value) {\r\n        if (this._lastN !== value) {\r\n            this._lastN = value;\r\n            if (this._channel && this._channel.isOpen()) {\r\n                this._channel.sendSetLastNMessage(value);\r\n            }\r\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates if the endpoint id is currently included in the last N.\r\n     * @param {string} id The endpoint id that we check for last N.\r\n     * @returns {boolean} true if the endpoint id is in the last N or if we\r\n     * don't have bridge channel support, otherwise we return false.\r\n     */\r\n    isInLastN(id) {\r\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\r\n            || this._lastNEndpoints.indexOf(id) > -1;\r\n    }\r\n\r\n    /**\r\n     * Updates the target audio output device for all remote audio tracks.\r\n     *\r\n     * @param {string} deviceId - The device id of the audio ouput device to\r\n     * use for all remote tracks.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _updateAudioOutputForAudioTracks(deviceId) {\r\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\r\n\r\n        for (const track of remoteAudioTracks) {\r\n            track.setAudioOutput(deviceId);\r\n        }\r\n    }\r\n}\r\n","/**\r\n * The errors for the JitsiTrack objects.\r\n */\r\n\r\n/**\r\n * An error which indicates that some of requested constraints in\r\n * getUserMedia call were not satisfied.\r\n */\r\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\r\n\r\n/**\r\n * A generic error which indicates an error occurred while selecting\r\n * a DesktopCapturerSource from the electron app.\r\n */\r\nexport const ELECTRON_DESKTOP_PICKER_ERROR\r\n    = 'gum.electron_desktop_picker_error';\r\n\r\n/**\r\n * An error which indicates a custom desktop picker could not be detected\r\n * for the electron app.\r\n */\r\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\r\n    = 'gum.electron_desktop_picker_not_found';\r\n\r\n/**\r\n * Generic getUserMedia error.\r\n */\r\nexport const GENERAL = 'gum.general';\r\n\r\n/**\r\n * An error which indicates that requested device was not found.\r\n */\r\nexport const NOT_FOUND = 'gum.not_found';\r\n\r\n/**\r\n * An error which indicates that user denied permission to share requested\r\n * device.\r\n */\r\nexport const PERMISSION_DENIED = 'gum.permission_denied';\r\n\r\n/**\r\n * Generic error for screensharing failure.\r\n */\r\nexport const SCREENSHARING_GENERIC_ERROR\r\n    = 'gum.screensharing_generic_error';\r\n\r\n/**\r\n * An error which indicates that user canceled screen sharing window\r\n * selection dialog.\r\n */\r\nexport const SCREENSHARING_USER_CANCELED\r\n    = 'gum.screensharing_user_canceled';\r\n\r\n/**\r\n * An error which indicates that track has been already disposed and cannot\r\n * be longer used.\r\n */\r\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\r\n\r\n/**\r\n * An error which indicates that track has no MediaStream associated.\r\n */\r\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\r\n\r\n/**\r\n * An error which indicates that requested video resolution is not supported\r\n * by a webcam.\r\n */\r\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\r\n","/**\r\n * The media track was removed to the conference.\r\n */\r\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\r\n\r\n/**\r\n * Audio levels of a this track was changed.\r\n * The first argument is a number with audio level value in range [0, 1].\r\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\r\n * connection which measured the audio level (one audio track can be added\r\n * to multiple peer connection at the same time). This argument is optional for\r\n * local tracks for which we can measure audio level without the peer\r\n * connection (the value will be <tt>undefined</tt>).\r\n *\r\n * NOTE The second argument should be treated as library internal and can be\r\n * removed at any time.\r\n */\r\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\r\n\r\n/**\r\n * The audio output of the track was changed.\r\n */\r\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\r\n\r\n/**\r\n * A media track mute status was changed.\r\n */\r\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\r\n\r\n/**\r\n * The video type(\"camera\" or \"desktop\") of the track was changed.\r\n */\r\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\r\n\r\n/**\r\n * Indicates that the track is not receiving any data even though we expect it\r\n * to receive data (i.e. the stream is not stopped).\r\n */\r\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\r\n\r\n/**\r\n * Indicates that the local audio track is not receiving any audio input from\r\n * the microphone that is currently selected.\r\n */\r\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\r\n","var parser = require('./parser');\r\nvar writer = require('./writer');\r\n\r\nexports.write = writer;\r\nexports.parse = parser.parse;\r\nexports.parseFmtpConfig = parser.parseFmtpConfig;\r\nexports.parseParams = parser.parseParams;\r\nexports.parsePayloads = parser.parsePayloads;\r\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\r\nexports.parseImageAttributes = parser.parseImageAttributes;\r\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\r\n","/**\r\n * The errors for the conference.\r\n */\r\n\r\n/**\r\n * Indicates that client must be authenticated to create the conference.\r\n */\r\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\r\n\r\n/**\r\n * Indicates that chat error occurred.\r\n */\r\nexport const CHAT_ERROR = 'conference.chatError';\r\n\r\n/**\r\n * Indicates that conference has been destroyed.\r\n */\r\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\r\n\r\n/**\r\n * Indicates that max users limit has been reached.\r\n */\r\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\r\n\r\n/**\r\n * Indicates that a connection error occurred when trying to join a conference.\r\n */\r\nexport const CONNECTION_ERROR = 'conference.connectionError';\r\n\r\n/**\r\n * Indicates that a connection error is due to not allowed,\r\n * occurred when trying to join a conference.\r\n */\r\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\r\n\r\n/**\r\n * Indicates that a connection error is due to not allowed,\r\n * occurred when trying to join a conference, only approved members are allowed to join.\r\n */\r\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\r\n\r\n/**\r\n * Indicates that a connection error is due to denied access to the room,\r\n * occurred after joining a lobby room and access is denied by the room moderators.\r\n */\r\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\r\n\r\n/**\r\n * Indicates that focus error happened.\r\n */\r\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\r\n\r\n/**\r\n * Indicates that focus left the conference.\r\n */\r\nexport const FOCUS_LEFT = 'conference.focusLeft';\r\n\r\n/**\r\n * Indicates that graceful shutdown happened.\r\n */\r\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\r\n\r\n/**\r\n * Indicates that the media connection has failed.\r\n */\r\nexport const ICE_FAILED = 'conference.iceFailed';\r\n\r\n/**\r\n * Indicates that the versions of the server side components are incompatible\r\n * with the client side.\r\n */\r\nexport const INCOMPATIBLE_SERVER_VERSIONS\r\n    = 'conference.incompatible_server_versions';\r\n\r\n/**\r\n * Indicates that offer/answer had failed.\r\n */\r\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\r\n\r\n/**\r\n * Indicates that password cannot be set for this conference.\r\n */\r\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\r\n\r\n/**\r\n * Indicates that a password is required in order to join the conference.\r\n */\r\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\r\n\r\n/**\r\n * Indicates that reservation system returned error.\r\n */\r\nexport const RESERVATION_ERROR = 'conference.reservationError';\r\n\r\n/**\r\n * Indicates that there is no available videobridge.\r\n */\r\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\r\n","// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nvar R = typeof Reflect === 'object' ? Reflect : null\r\nvar ReflectApply = R && typeof R.apply === 'function'\r\n  ? R.apply\r\n  : function ReflectApply(target, receiver, args) {\r\n    return Function.prototype.apply.call(target, receiver, args);\r\n  }\r\n\r\nvar ReflectOwnKeys\r\nif (R && typeof R.ownKeys === 'function') {\r\n  ReflectOwnKeys = R.ownKeys\r\n} else if (Object.getOwnPropertySymbols) {\r\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\r\n    return Object.getOwnPropertyNames(target)\r\n      .concat(Object.getOwnPropertySymbols(target));\r\n  };\r\n} else {\r\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\r\n    return Object.getOwnPropertyNames(target);\r\n  };\r\n}\r\n\r\nfunction ProcessEmitWarning(warning) {\r\n  if (console && console.warn) console.warn(warning);\r\n}\r\n\r\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\r\n  return value !== value;\r\n}\r\n\r\nfunction EventEmitter() {\r\n  EventEmitter.init.call(this);\r\n}\r\nmodule.exports = EventEmitter;\r\nmodule.exports.once = once;\r\n\r\n// Backwards-compat with node 0.10.x\r\nEventEmitter.EventEmitter = EventEmitter;\r\n\r\nEventEmitter.prototype._events = undefined;\r\nEventEmitter.prototype._eventsCount = 0;\r\nEventEmitter.prototype._maxListeners = undefined;\r\n\r\n// By default EventEmitters will print a warning if more than 10 listeners are\r\n// added to it. This is a useful default which helps finding memory leaks.\r\nvar defaultMaxListeners = 10;\r\n\r\nfunction checkListener(listener) {\r\n  if (typeof listener !== 'function') {\r\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\r\n  }\r\n}\r\n\r\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return defaultMaxListeners;\r\n  },\r\n  set: function(arg) {\r\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\r\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\r\n    }\r\n    defaultMaxListeners = arg;\r\n  }\r\n});\r\n\r\nEventEmitter.init = function() {\r\n\r\n  if (this._events === undefined ||\r\n      this._events === Object.getPrototypeOf(this)._events) {\r\n    this._events = Object.create(null);\r\n    this._eventsCount = 0;\r\n  }\r\n\r\n  this._maxListeners = this._maxListeners || undefined;\r\n};\r\n\r\n// Obviously not all Emitters should be limited to 10. This function allows\r\n// that to be increased. Set to zero for unlimited.\r\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\r\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\r\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\r\n  }\r\n  this._maxListeners = n;\r\n  return this;\r\n};\r\n\r\nfunction _getMaxListeners(that) {\r\n  if (that._maxListeners === undefined)\r\n    return EventEmitter.defaultMaxListeners;\r\n  return that._maxListeners;\r\n}\r\n\r\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\r\n  return _getMaxListeners(this);\r\n};\r\n\r\nEventEmitter.prototype.emit = function emit(type) {\r\n  var args = [];\r\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\r\n  var doError = (type === 'error');\r\n\r\n  var events = this._events;\r\n  if (events !== undefined)\r\n    doError = (doError && events.error === undefined);\r\n  else if (!doError)\r\n    return false;\r\n\r\n  // If there is no 'error' event listener then throw.\r\n  if (doError) {\r\n    var er;\r\n    if (args.length > 0)\r\n      er = args[0];\r\n    if (er instanceof Error) {\r\n      // Note: The comments on the `throw` lines are intentional, they show\r\n      // up in Node's output if this results in an unhandled exception.\r\n      throw er; // Unhandled 'error' event\r\n    }\r\n    // At least give some kind of context to the user\r\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\r\n    err.context = er;\r\n    throw err; // Unhandled 'error' event\r\n  }\r\n\r\n  var handler = events[type];\r\n\r\n  if (handler === undefined)\r\n    return false;\r\n\r\n  if (typeof handler === 'function') {\r\n    ReflectApply(handler, this, args);\r\n  } else {\r\n    var len = handler.length;\r\n    var listeners = arrayClone(handler, len);\r\n    for (var i = 0; i < len; ++i)\r\n      ReflectApply(listeners[i], this, args);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction _addListener(target, type, listener, prepend) {\r\n  var m;\r\n  var events;\r\n  var existing;\r\n\r\n  checkListener(listener);\r\n\r\n  events = target._events;\r\n  if (events === undefined) {\r\n    events = target._events = Object.create(null);\r\n    target._eventsCount = 0;\r\n  } else {\r\n    // To avoid recursion in the case that type === \"newListener\"! Before\r\n    // adding it to the listeners, first emit \"newListener\".\r\n    if (events.newListener !== undefined) {\r\n      target.emit('newListener', type,\r\n                  listener.listener ? listener.listener : listener);\r\n\r\n      // Re-assign `events` because a newListener handler could have caused the\r\n      // this._events to be assigned to a new object\r\n      events = target._events;\r\n    }\r\n    existing = events[type];\r\n  }\r\n\r\n  if (existing === undefined) {\r\n    // Optimize the case of one listener. Don't need the extra array object.\r\n    existing = events[type] = listener;\r\n    ++target._eventsCount;\r\n  } else {\r\n    if (typeof existing === 'function') {\r\n      // Adding the second element, need to change to array.\r\n      existing = events[type] =\r\n        prepend ? [listener, existing] : [existing, listener];\r\n      // If we've already got an array, just append.\r\n    } else if (prepend) {\r\n      existing.unshift(listener);\r\n    } else {\r\n      existing.push(listener);\r\n    }\r\n\r\n    // Check for listener leak\r\n    m = _getMaxListeners(target);\r\n    if (m > 0 && existing.length > m && !existing.warned) {\r\n      existing.warned = true;\r\n      // No error code for this since it is a Warning\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\r\n                          existing.length + ' ' + String(type) + ' listeners ' +\r\n                          'added. Use emitter.setMaxListeners() to ' +\r\n                          'increase limit');\r\n      w.name = 'MaxListenersExceededWarning';\r\n      w.emitter = target;\r\n      w.type = type;\r\n      w.count = existing.length;\r\n      ProcessEmitWarning(w);\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nEventEmitter.prototype.addListener = function addListener(type, listener) {\r\n  return _addListener(this, type, listener, false);\r\n};\r\n\r\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\r\n\r\nEventEmitter.prototype.prependListener =\r\n    function prependListener(type, listener) {\r\n      return _addListener(this, type, listener, true);\r\n    };\r\n\r\nfunction onceWrapper() {\r\n  if (!this.fired) {\r\n    this.target.removeListener(this.type, this.wrapFn);\r\n    this.fired = true;\r\n    if (arguments.length === 0)\r\n      return this.listener.call(this.target);\r\n    return this.listener.apply(this.target, arguments);\r\n  }\r\n}\r\n\r\nfunction _onceWrap(target, type, listener) {\r\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\r\n  var wrapped = onceWrapper.bind(state);\r\n  wrapped.listener = listener;\r\n  state.wrapFn = wrapped;\r\n  return wrapped;\r\n}\r\n\r\nEventEmitter.prototype.once = function once(type, listener) {\r\n  checkListener(listener);\r\n  this.on(type, _onceWrap(this, type, listener));\r\n  return this;\r\n};\r\n\r\nEventEmitter.prototype.prependOnceListener =\r\n    function prependOnceListener(type, listener) {\r\n      checkListener(listener);\r\n      this.prependListener(type, _onceWrap(this, type, listener));\r\n      return this;\r\n    };\r\n\r\n// Emits a 'removeListener' event if and only if the listener was removed.\r\nEventEmitter.prototype.removeListener =\r\n    function removeListener(type, listener) {\r\n      var list, events, position, i, originalListener;\r\n\r\n      checkListener(listener);\r\n\r\n      events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      list = events[type];\r\n      if (list === undefined)\r\n        return this;\r\n\r\n      if (list === listener || list.listener === listener) {\r\n        if (--this._eventsCount === 0)\r\n          this._events = Object.create(null);\r\n        else {\r\n          delete events[type];\r\n          if (events.removeListener)\r\n            this.emit('removeListener', type, list.listener || listener);\r\n        }\r\n      } else if (typeof list !== 'function') {\r\n        position = -1;\r\n\r\n        for (i = list.length - 1; i >= 0; i--) {\r\n          if (list[i] === listener || list[i].listener === listener) {\r\n            originalListener = list[i].listener;\r\n            position = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (position < 0)\r\n          return this;\r\n\r\n        if (position === 0)\r\n          list.shift();\r\n        else {\r\n          spliceOne(list, position);\r\n        }\r\n\r\n        if (list.length === 1)\r\n          events[type] = list[0];\r\n\r\n        if (events.removeListener !== undefined)\r\n          this.emit('removeListener', type, originalListener || listener);\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\r\n\r\nEventEmitter.prototype.removeAllListeners =\r\n    function removeAllListeners(type) {\r\n      var listeners, events, i;\r\n\r\n      events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      // not listening for removeListener, no need to emit\r\n      if (events.removeListener === undefined) {\r\n        if (arguments.length === 0) {\r\n          this._events = Object.create(null);\r\n          this._eventsCount = 0;\r\n        } else if (events[type] !== undefined) {\r\n          if (--this._eventsCount === 0)\r\n            this._events = Object.create(null);\r\n          else\r\n            delete events[type];\r\n        }\r\n        return this;\r\n      }\r\n\r\n      // emit removeListener for all listeners on all events\r\n      if (arguments.length === 0) {\r\n        var keys = Object.keys(events);\r\n        var key;\r\n        for (i = 0; i < keys.length; ++i) {\r\n          key = keys[i];\r\n          if (key === 'removeListener') continue;\r\n          this.removeAllListeners(key);\r\n        }\r\n        this.removeAllListeners('removeListener');\r\n        this._events = Object.create(null);\r\n        this._eventsCount = 0;\r\n        return this;\r\n      }\r\n\r\n      listeners = events[type];\r\n\r\n      if (typeof listeners === 'function') {\r\n        this.removeListener(type, listeners);\r\n      } else if (listeners !== undefined) {\r\n        // LIFO order\r\n        for (i = listeners.length - 1; i >= 0; i--) {\r\n          this.removeListener(type, listeners[i]);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nfunction _listeners(target, type, unwrap) {\r\n  var events = target._events;\r\n\r\n  if (events === undefined)\r\n    return [];\r\n\r\n  var evlistener = events[type];\r\n  if (evlistener === undefined)\r\n    return [];\r\n\r\n  if (typeof evlistener === 'function')\r\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\r\n\r\n  return unwrap ?\r\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\r\n}\r\n\r\nEventEmitter.prototype.listeners = function listeners(type) {\r\n  return _listeners(this, type, true);\r\n};\r\n\r\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\r\n  return _listeners(this, type, false);\r\n};\r\n\r\nEventEmitter.listenerCount = function(emitter, type) {\r\n  if (typeof emitter.listenerCount === 'function') {\r\n    return emitter.listenerCount(type);\r\n  } else {\r\n    return listenerCount.call(emitter, type);\r\n  }\r\n};\r\n\r\nEventEmitter.prototype.listenerCount = listenerCount;\r\nfunction listenerCount(type) {\r\n  var events = this._events;\r\n\r\n  if (events !== undefined) {\r\n    var evlistener = events[type];\r\n\r\n    if (typeof evlistener === 'function') {\r\n      return 1;\r\n    } else if (evlistener !== undefined) {\r\n      return evlistener.length;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nEventEmitter.prototype.eventNames = function eventNames() {\r\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\r\n};\r\n\r\nfunction arrayClone(arr, n) {\r\n  var copy = new Array(n);\r\n  for (var i = 0; i < n; ++i)\r\n    copy[i] = arr[i];\r\n  return copy;\r\n}\r\n\r\nfunction spliceOne(list, index) {\r\n  for (; index + 1 < list.length; index++)\r\n    list[index] = list[index + 1];\r\n  list.pop();\r\n}\r\n\r\nfunction unwrapListeners(arr) {\r\n  var ret = new Array(arr.length);\r\n  for (var i = 0; i < ret.length; ++i) {\r\n    ret[i] = arr[i].listener || arr[i];\r\n  }\r\n  return ret;\r\n}\r\n\r\nfunction once(emitter, name) {\r\n  return new Promise(function (resolve, reject) {\r\n    function eventListener() {\r\n      if (errorListener !== undefined) {\r\n        emitter.removeListener('error', errorListener);\r\n      }\r\n      resolve([].slice.call(arguments));\r\n    };\r\n    var errorListener;\r\n\r\n    // Adding an error listener is not optional because\r\n    // if an error is thrown on an event emitter we cannot\r\n    // guarantee that the actual event we are waiting will\r\n    // be fired. The result could be a silent way to create\r\n    // memory or file descriptor leaks, which is something\r\n    // we should avoid.\r\n    if (name !== 'error') {\r\n      errorListener = function errorListener(err) {\r\n        emitter.removeListener(name, eventListener);\r\n        reject(err);\r\n      };\r\n\r\n      emitter.once('error', errorListener);\r\n    }\r\n\r\n    emitter.once(name, eventListener);\r\n  });\r\n}\r\n","/* global $ */\r\n\r\nimport browser from '../browser';\r\n\r\nimport SDPUtil from './SDPUtil';\r\n\r\n/**\r\n *\r\n * @param sdp\r\n */\r\nexport default function SDP(sdp) {\r\n    const media = sdp.split('\\r\\nm=');\r\n\r\n    for (let i = 1, length = media.length; i < length; i++) {\r\n        let mediaI = `m=${media[i]}`;\r\n\r\n        if (i !== length - 1) {\r\n            mediaI += '\\r\\n';\r\n        }\r\n        media[i] = mediaI;\r\n    }\r\n    const session = `${media.shift()}\\r\\n`;\r\n\r\n    this.media = media;\r\n    this.raw = session + media.join('');\r\n    this.session = session;\r\n}\r\n\r\n/**\r\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\r\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\r\n * failure. The flag is used in the automated testing.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.failICE = false;\r\n\r\n/**\r\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.removeTcpCandidates = false;\r\n\r\n/**\r\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.removeUdpCandidates = false;\r\n\r\n/**\r\n * Returns map of MediaChannel mapped per channel idx.\r\n */\r\nSDP.prototype.getMediaSsrcMap = function() {\r\n    const mediaSSRCs = {};\r\n\r\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\r\n        const mid\r\n            = SDPUtil.parseMID(\r\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\r\n        const media = {\r\n            mediaindex,\r\n            mid,\r\n            ssrcs: {},\r\n            ssrcGroups: []\r\n        };\r\n\r\n        mediaSSRCs[mediaindex] = media;\r\n\r\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\r\n            const linessrc = line.substring(7).split(' ')[0];\r\n\r\n            // allocate new ChannelSsrc\r\n\r\n            if (!media.ssrcs[linessrc]) {\r\n                media.ssrcs[linessrc] = {\r\n                    ssrc: linessrc,\r\n                    lines: []\r\n                };\r\n            }\r\n            media.ssrcs[linessrc].lines.push(line);\r\n        });\r\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\r\n            const idx = line.indexOf(' ');\r\n            const semantics = line.substr(0, idx).substr(13);\r\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\r\n\r\n            if (ssrcs.length) {\r\n                media.ssrcGroups.push({\r\n                    semantics,\r\n                    ssrcs\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return mediaSSRCs;\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if this SDP contains given SSRC.\r\n * @param ssrc the ssrc to check.\r\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\r\n */\r\nSDP.prototype.containsSSRC = function(ssrc) {\r\n    // FIXME this code is really strange - improve it if you can\r\n    const medias = this.getMediaSsrcMap();\r\n    let result = false;\r\n\r\n    Object.keys(medias).forEach(mediaindex => {\r\n        if (result) {\r\n            return;\r\n        }\r\n        if (medias[mediaindex].ssrcs[ssrc]) {\r\n            result = true;\r\n        }\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\n// add content's to a jingle element\r\nSDP.prototype.toJingle = function(elem, thecreator) {\r\n    // https://xmpp.org/extensions/xep-0338.html\r\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\r\n        const parts = line.split(' ');\r\n        const semantics = parts.shift().substr(8);\r\n\r\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\r\n            semantics });\r\n        for (let j = 0; j < parts.length; j++) {\r\n            elem.c('content', { name: parts[j] }).up();\r\n        }\r\n        elem.up();\r\n    });\r\n\r\n    for (let i = 0; i < this.media.length; i++) {\r\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\r\n\r\n        if (!(mline.media === 'audio'\r\n              || mline.media === 'video'\r\n              || mline.media === 'application')) {\r\n            continue; // eslint-disable-line no-continue\r\n        }\r\n\r\n        let ssrc;\r\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\r\n\r\n        if (assrcline) {\r\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\r\n        } else {\r\n            ssrc = false;\r\n        }\r\n\r\n        elem.c('content', { creator: thecreator,\r\n            name: mline.media });\r\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\r\n\r\n        if (amidline) {\r\n            // prefer identifier from a=mid if present\r\n            const mid = SDPUtil.parseMID(amidline);\r\n\r\n            elem.attrs({ name: mid });\r\n        }\r\n\r\n        if (mline.media === 'audio' || mline.media === 'video') {\r\n            elem.c('description',\r\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\r\n                    media: mline.media });\r\n            if (ssrc) {\r\n                elem.attrs({ ssrc });\r\n            }\r\n            for (let j = 0; j < mline.fmt.length; j++) {\r\n                const rtpmap\r\n                    = SDPUtil.findLine(\r\n                        this.media[i],\r\n                        `a=rtpmap:${mline.fmt[j]}`);\r\n\r\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\r\n\r\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\r\n                // value=bar/>\r\n                const afmtpline\r\n                    = SDPUtil.findLine(\r\n                        this.media[i],\r\n                        `a=fmtp:${mline.fmt[j]}`);\r\n\r\n                if (afmtpline) {\r\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    for (let k = 0; k < fmtpParameters.length; k++) {\r\n                        elem.c('parameter', fmtpParameters[k]).up();\r\n                    }\r\n                }\r\n\r\n                // XEP-0293 -- map a=rtcp-fb\r\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\r\n\r\n                elem.up();\r\n            }\r\n\r\n            if (ssrc) {\r\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\r\n\r\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\r\n                    elem.c('source', {\r\n                        ssrc: availableSsrc,\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n\r\n                    ssrcParameters.forEach(ssrcSdpLine => {\r\n                        // get everything after first space\r\n                        const idx = ssrcSdpLine.indexOf(' ');\r\n                        const kv = ssrcSdpLine.substr(idx + 1);\r\n\r\n                        elem.c('parameter');\r\n                        if (kv.indexOf(':') === -1) {\r\n                            elem.attrs({ name: kv });\r\n                        } else {\r\n                            const name = kv.split(':', 2)[0];\r\n\r\n                            elem.attrs({ name });\r\n\r\n                            let v = kv.split(':', 2)[1];\r\n\r\n                            v = SDPUtil.filterSpecialChars(v);\r\n                            elem.attrs({ value: v });\r\n                        }\r\n                        elem.up();\r\n                    });\r\n\r\n                    elem.up();\r\n                }\r\n\r\n                // XEP-0339 handle ssrc-group attributes\r\n                const ssrcGroupLines\r\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\r\n\r\n                ssrcGroupLines.forEach(line => {\r\n                    const idx = line.indexOf(' ');\r\n                    const semantics = line.substr(0, idx).substr(13);\r\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\r\n\r\n                    if (ssrcs.length) {\r\n                        elem.c('ssrc-group', { semantics,\r\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\r\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\r\n                        elem.up();\r\n                    }\r\n                });\r\n            }\r\n\r\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid');\r\n\r\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\r\n                // Map a line which looks like \"a=rid:2 send\" to just\r\n                // the rid (\"2\")\r\n                const rids = ridLines\r\n                    .map(ridLine => ridLine.split(':')[1])\r\n                    .map(ridInfo => ridInfo.split(' ')[0]);\r\n\r\n                rids.forEach(rid => {\r\n                    elem.c('source', {\r\n                        rid,\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n                    elem.up();\r\n                });\r\n                const unifiedSimulcast\r\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast');\r\n\r\n                if (unifiedSimulcast) {\r\n                    elem.c('rid-group', {\r\n                        semantics: 'SIM',\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n                    rids.forEach(rid => {\r\n                        elem.c('source', { rid }).up();\r\n                    });\r\n                    elem.up();\r\n                }\r\n            }\r\n\r\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\r\n                elem.c('rtcp-mux').up();\r\n            }\r\n\r\n            // XEP-0293 -- map a=rtcp-fb:*\r\n            this.rtcpFbToJingle(i, elem, '*');\r\n\r\n            // XEP-0294\r\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\r\n\r\n            for (let j = 0; j < extmapLines.length; j++) {\r\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\r\n\r\n                elem.c('rtp-hdrext', {\r\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\r\n                    uri: extmap.uri,\r\n                    id: extmap.value\r\n                });\r\n\r\n                // eslint-disable-next-line max-depth\r\n                if (extmap.hasOwnProperty('direction')) {\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    switch (extmap.direction) {\r\n                    case 'sendonly':\r\n                        elem.attrs({ senders: 'responder' });\r\n                        break;\r\n                    case 'recvonly':\r\n                        elem.attrs({ senders: 'initiator' });\r\n                        break;\r\n                    case 'sendrecv':\r\n                        elem.attrs({ senders: 'both' });\r\n                        break;\r\n                    case 'inactive':\r\n                        elem.attrs({ senders: 'none' });\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // TODO: handle params\r\n                elem.up();\r\n            }\r\n            elem.up(); // end of description\r\n        }\r\n\r\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\r\n        this.transportToJingle(i, elem);\r\n\r\n        const m = this.media[i];\r\n\r\n        if (SDPUtil.findLine(m, 'a=sendrecv', this.session)) {\r\n            elem.attrs({ senders: 'both' });\r\n        } else if (SDPUtil.findLine(m, 'a=sendonly', this.session)) {\r\n            elem.attrs({ senders: 'initiator' });\r\n        } else if (SDPUtil.findLine(m, 'a=recvonly', this.session)) {\r\n            elem.attrs({ senders: 'responder' });\r\n        } else if (SDPUtil.findLine(m, 'a=inactive', this.session)) {\r\n            elem.attrs({ senders: 'none' });\r\n        }\r\n\r\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\r\n        // The port is automatically set to 0 when bundle-only is used.\r\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\r\n            // estos hack to reject an m-line\r\n            elem.attrs({ senders: 'rejected' });\r\n        }\r\n        elem.up(); // end of content\r\n    }\r\n    elem.up();\r\n\r\n    return elem;\r\n};\r\n\r\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\r\n    elem.c('transport');\r\n\r\n    // XEP-0343 DTLS/SCTP\r\n    const sctpmap\r\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\r\n\r\n    if (sctpmap) {\r\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\r\n\r\n        elem.c('sctpmap', {\r\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\r\n            number: sctpAttrs[0], /* SCTP port */\r\n            protocol: sctpAttrs[1] /* protocol */\r\n        });\r\n\r\n        // Optional stream count attribute\r\n        if (sctpAttrs.length > 2) {\r\n            elem.attrs({ streams: sctpAttrs[2] });\r\n        }\r\n        elem.up();\r\n    }\r\n\r\n    // XEP-0320\r\n    const fingerprints\r\n        = SDPUtil.findLines(\r\n            this.media[mediaindex],\r\n            'a=fingerprint:',\r\n            this.session);\r\n\r\n    fingerprints.forEach(line => {\r\n        const fingerprint = SDPUtil.parseFingerprint(line);\r\n\r\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\r\n        elem.c('fingerprint').t(fingerprint.fingerprint);\r\n        delete fingerprint.fingerprint;\r\n\r\n        const setupLine\r\n            = SDPUtil.findLine(\r\n                this.media[mediaindex],\r\n                'a=setup:',\r\n                this.session);\r\n\r\n        if (setupLine) {\r\n            fingerprint.setup = setupLine.substr(8);\r\n        }\r\n        elem.attrs(fingerprint);\r\n        elem.up(); // end of fingerprint\r\n    });\r\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\r\n\r\n    if (iceParameters) {\r\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n        elem.attrs(iceParameters);\r\n\r\n        // XEP-0176\r\n        const candidateLines\r\n            = SDPUtil.findLines(\r\n                this.media[mediaindex],\r\n                'a=candidate:',\r\n                this.session);\r\n\r\n        candidateLines.forEach(line => { // add any a=candidate lines\r\n            const candidate = SDPUtil.candidateToJingle(line);\r\n\r\n            if (this.failICE) {\r\n                candidate.ip = '1.1.1.1';\r\n            }\r\n            const protocol\r\n                = candidate && typeof candidate.protocol === 'string'\r\n                    ? candidate.protocol.toLowerCase()\r\n                    : '';\r\n\r\n            if ((this.removeTcpCandidates\r\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\r\n                || (this.removeUdpCandidates && protocol === 'udp')) {\r\n                return;\r\n            }\r\n            elem.c('candidate', candidate).up();\r\n        });\r\n    }\r\n    elem.up(); // end of transport\r\n};\r\n\r\n// XEP-0293\r\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\r\n    const lines\r\n        = SDPUtil.findLines(\r\n            this.media[mediaindex],\r\n            `a=rtcp-fb:${payloadtype}`);\r\n\r\n    lines.forEach(line => {\r\n        const feedback = SDPUtil.parseRTCPFB(line);\r\n\r\n        if (feedback.type === 'trr-int') {\r\n            elem.c('rtcp-fb-trr-int', {\r\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\r\n                value: feedback.params[0]\r\n            });\r\n            elem.up();\r\n        } else {\r\n            elem.c('rtcp-fb', {\r\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\r\n                type: feedback.type\r\n            });\r\n            if (feedback.params.length > 0) {\r\n                elem.attrs({ 'subtype': feedback.params[0] });\r\n            }\r\n            elem.up();\r\n        }\r\n    });\r\n};\r\n\r\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\r\n    let sdp = '';\r\n    const feedbackElementTrrInt\r\n        = elem.find(\r\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\r\n\r\n    if (feedbackElementTrrInt.length) {\r\n        sdp += 'a=rtcp-fb:* trr-int ';\r\n        if (feedbackElementTrrInt.attr('value')) {\r\n            sdp += feedbackElementTrrInt.attr('value');\r\n        } else {\r\n            sdp += '0';\r\n        }\r\n        sdp += '\\r\\n';\r\n    }\r\n\r\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\r\n\r\n    feedbackElements.each((_, fb) => {\r\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\r\n        if (fb.hasAttribute('subtype')) {\r\n            sdp += ` ${fb.getAttribute('subtype')}`;\r\n        }\r\n        sdp += '\\r\\n';\r\n    });\r\n\r\n    return sdp;\r\n};\r\n\r\n// construct an SDP from a jingle stanza\r\nSDP.prototype.fromJingle = function(jingle) {\r\n    const sessionId = Date.now();\r\n\r\n    // Use a unique session id for every TPC.\r\n    this.raw = 'v=0\\r\\n'\r\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\r\n        + 's=-\\r\\n'\r\n        + 't=0 0\\r\\n';\r\n\r\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\r\n    // #section-8\r\n    const groups\r\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\r\n\r\n    if (groups.length) {\r\n        groups.each((idx, group) => {\r\n            const contents\r\n                = $(group)\r\n                    .find('>content')\r\n                    .map((_, content) => content.getAttribute('name'))\r\n                    .get();\r\n\r\n            if (contents.length > 0) {\r\n                this.raw\r\n                    += `a=group:${\r\n                        group.getAttribute('semantics')\r\n                            || group.getAttribute('type')} ${\r\n                        contents.join(' ')}\\r\\n`;\r\n            }\r\n        });\r\n    }\r\n\r\n    this.session = this.raw;\r\n    jingle.find('>content').each((_, content) => {\r\n        const m = this.jingle2media($(content));\r\n\r\n        this.media.push(m);\r\n    });\r\n\r\n    // reconstruct msid-semantic -- apparently not necessary\r\n    /*\r\n     var msid = SDPUtil.parseSSRC(this.raw);\r\n     if (msid.hasOwnProperty('mslabel')) {\r\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\r\n     }\r\n     */\r\n\r\n    this.raw = this.session + this.media.join('');\r\n};\r\n\r\n// translate a jingle content element into an an SDP media part\r\nSDP.prototype.jingle2media = function(content) {\r\n    const desc = content.find('>description');\r\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\r\n    let sdp = '';\r\n    const sctp = transport.find(\r\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\r\n\r\n    const media = { media: desc.attr('media') };\r\n\r\n    media.port = '1';\r\n    if (content.attr('senders') === 'rejected') {\r\n        // estos hack to reject an m-line.\r\n        media.port = '0';\r\n    }\r\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\r\n        media.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\r\n    } else {\r\n        media.proto = 'RTP/AVPF';\r\n    }\r\n    if (sctp.length) {\r\n        sdp += `m=application ${media.port} DTLS/SCTP ${\r\n            sctp.attr('number')}\\r\\n`;\r\n        sdp += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\r\n\r\n        const streamCount = sctp.attr('streams');\r\n\r\n        if (streamCount) {\r\n            sdp += ` ${streamCount}\\r\\n`;\r\n        } else {\r\n            sdp += '\\r\\n';\r\n        }\r\n    } else {\r\n        media.fmt\r\n            = desc\r\n                .find('>payload-type')\r\n                .map((_, payloadType) => payloadType.getAttribute('id'))\r\n                .get();\r\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\r\n    }\r\n\r\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\r\n    if (!sctp.length) {\r\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\r\n    }\r\n\r\n    // XEP-0176 ICE parameters\r\n    if (transport.length) {\r\n        if (transport.attr('ufrag')) {\r\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\r\n        }\r\n        if (transport.attr('pwd')) {\r\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\r\n        }\r\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\r\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\r\n            sdp += ` ${$(fingerprint).text()}`;\r\n            sdp += '\\r\\n';\r\n            if (fingerprint.hasAttribute('setup')) {\r\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\r\n            }\r\n        });\r\n    }\r\n\r\n    // XEP-0176 ICE candidates\r\n    transport.find('>candidate')\r\n        .each((_, candidate) => {\r\n            let protocol = candidate.getAttribute('protocol');\r\n\r\n            protocol\r\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\r\n\r\n            if ((this.removeTcpCandidates\r\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\r\n                || (this.removeUdpCandidates && protocol === 'udp')) {\r\n                return;\r\n            } else if (this.failICE) {\r\n                candidate.setAttribute('ip', '1.1.1.1');\r\n            }\r\n\r\n            sdp += SDPUtil.candidateFromJingle(candidate);\r\n        });\r\n\r\n    switch (content.attr('senders')) {\r\n    case 'initiator':\r\n        sdp += 'a=sendonly\\r\\n';\r\n        break;\r\n    case 'responder':\r\n        sdp += 'a=recvonly\\r\\n';\r\n        break;\r\n    case 'none':\r\n        sdp += 'a=inactive\\r\\n';\r\n        break;\r\n    case 'both':\r\n        sdp += 'a=sendrecv\\r\\n';\r\n        break;\r\n    }\r\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\r\n\r\n    // <description><rtcp-mux/></description>\r\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\r\n    // though\r\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\r\n    if (desc.find('>rtcp-mux').length) {\r\n        sdp += 'a=rtcp-mux\\r\\n';\r\n    }\r\n\r\n    desc.find('>payload-type').each((_, payloadType) => {\r\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\r\n        if ($(payloadType).find('>parameter').length) {\r\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\r\n            sdp\r\n                += $(payloadType)\r\n                    .find('>parameter')\r\n                    .map((__, parameter) => {\r\n                        const name = parameter.getAttribute('name');\r\n\r\n                        return (\r\n                            (name ? `${name}=` : '')\r\n                                + parameter.getAttribute('value'));\r\n                    })\r\n                    .get()\r\n                    .join('; ');\r\n            sdp += '\\r\\n';\r\n        }\r\n\r\n        // xep-0293\r\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\r\n    });\r\n\r\n    // xep-0293\r\n    sdp += this.rtcpFbFromJingle(desc, '*');\r\n\r\n    // xep-0294\r\n    desc\r\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\r\n        .each((_, hdrExt) => {\r\n            sdp\r\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\r\n                    hdrExt.getAttribute('uri')}\\r\\n`;\r\n        });\r\n\r\n    // XEP-0339 handle ssrc-group attributes\r\n    desc\r\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n        .each((_, ssrcGroup) => {\r\n            const semantics = ssrcGroup.getAttribute('semantics');\r\n            const ssrcs\r\n                = $(ssrcGroup)\r\n                    .find('>source')\r\n                    .map((__, source) => source.getAttribute('ssrc'))\r\n                    .get();\r\n\r\n            if (ssrcs.length) {\r\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\r\n            }\r\n        });\r\n\r\n    // XEP-0339 handle source attributes\r\n    desc\r\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n        .each((_, source) => {\r\n            const ssrc = source.getAttribute('ssrc');\r\n\r\n            $(source)\r\n                .find('>parameter')\r\n                .each((__, parameter) => {\r\n                    const name = parameter.getAttribute('name');\r\n                    let value = parameter.getAttribute('value');\r\n\r\n                    value = SDPUtil.filterSpecialChars(value);\r\n                    sdp += `a=ssrc:${ssrc} ${name}`;\r\n                    if (value && value.length) {\r\n                        sdp += `:${value}`;\r\n                    }\r\n                    sdp += '\\r\\n';\r\n                });\r\n        });\r\n\r\n    return sdp;\r\n};\r\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\r\n\r\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\r\n\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\r\n    = 'Video resolution is not supported: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\r\n    = 'User canceled screen sharing prompt';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\r\n    = 'Unknown error from screensharing';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\r\n    = 'Unkown error from desktop picker';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\r\n    = 'Failed to detect desktop picker';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\r\n    = 'Generic getUserMedia error';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\r\n    = 'User denied permission to use device(s): ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\r\n    = 'Requested device(s) was/were not found: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\r\n    = 'Constraint could not be satisfied: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\r\n    = 'Track has been already disposed';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\r\n    = 'Track does not have an associated Media Stream';\r\n\r\n// FIXME: Using prototype inheritance because otherwise instanceof is not\r\n// working properly (see https://github.com/babel/babel/issues/3083)\r\n\r\n/**\r\n *\r\n * Represents an error that occurred to a JitsiTrack. Can represent various\r\n * types of errors. For error descriptions (@see JitsiTrackErrors).\r\n *\r\n * @extends Error\r\n *\r\n *\r\n * @constructor\r\n * @param {Object|string} error - error object or error name\r\n * @param {Object|string} (options) - getUserMedia constraints object or\r\n * error message\r\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\r\n * list of getUserMedia requested devices\r\n */\r\nfunction JitsiTrackError(error, options, devices) {\r\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\r\n        /**\r\n         * Additional information about original getUserMedia error\r\n         * and constraints.\r\n         * @type {{\r\n         *     error: Object,\r\n         *     constraints: Object,\r\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\r\n         * }}\r\n         */\r\n        this.gum = {\r\n            error,\r\n            constraints: options,\r\n            devices: devices && Array.isArray(devices)\r\n                ? devices.slice(0)\r\n                : undefined\r\n        };\r\n\r\n        switch (error.name) {\r\n        case 'NotAllowedError':\r\n        case 'PermissionDeniedError':\r\n        case 'SecurityError':\r\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\r\n            this.message\r\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                    + (this.gum.devices || []).join(', ');\r\n            break;\r\n        case 'DevicesNotFoundError':\r\n        case 'NotFoundError':\r\n            this.name = JitsiTrackErrors.NOT_FOUND;\r\n            this.message\r\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                    + (this.gum.devices || []).join(', ');\r\n            break;\r\n        case 'ConstraintNotSatisfiedError':\r\n        case 'OverconstrainedError': {\r\n            const constraintName = error.constraintName || error.constraint;\r\n\r\n            // we treat deviceId as unsupported resolution, as we want to\r\n            // retry and finally if everything fails to remove deviceId from\r\n            // mandatory constraints\r\n            if (options\r\n                    && options.video\r\n                    && (!devices || devices.indexOf('video') > -1)\r\n                    && (constraintName === 'minWidth'\r\n                        || constraintName === 'maxWidth'\r\n                        || constraintName === 'minHeight'\r\n                        || constraintName === 'maxHeight'\r\n                        || constraintName === 'width'\r\n                        || constraintName === 'height'\r\n                        || constraintName === 'deviceId')) {\r\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\r\n                this.message\r\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                        + getResolutionFromFailedConstraint(\r\n                            constraintName,\r\n                            options);\r\n            } else {\r\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\r\n                this.message\r\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                        + error.constraintName;\r\n            }\r\n            break;\r\n        }\r\n\r\n        default:\r\n            this.name = JitsiTrackErrors.GENERAL;\r\n            this.message\r\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\r\n            break;\r\n        }\r\n    } else if (typeof error === 'string') {\r\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\r\n            this.name = error;\r\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\r\n        } else {\r\n            // this is some generic error that do not fit any of our\r\n            // pre-defined errors, so don't give it any specific name, just\r\n            // store message\r\n            this.message = error;\r\n        }\r\n    } else {\r\n        throw new Error('Invalid arguments');\r\n    }\r\n\r\n    this.stack = error.stack || (new Error()).stack;\r\n}\r\n\r\nJitsiTrackError.prototype = Object.create(Error.prototype);\r\nJitsiTrackError.prototype.constructor = JitsiTrackError;\r\n\r\n/**\r\n * Gets failed resolution constraint from corresponding object.\r\n * @param {string} failedConstraintName\r\n * @param {Object} constraints\r\n * @returns {string|number}\r\n */\r\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\r\n    if (constraints && constraints.video && constraints.video.mandatory) {\r\n        switch (failedConstraintName) {\r\n        case 'width':\r\n            return constraints.video.mandatory.minWidth;\r\n        case 'height':\r\n            return constraints.video.mandatory.minHeight;\r\n        default:\r\n            return constraints.video.mandatory[failedConstraintName] || '';\r\n        }\r\n    }\r\n\r\n    return '';\r\n}\r\n\r\nexport default JitsiTrackError;\r\n","import EventEmitter from 'events';\r\n\r\n/**\r\n * The class implements basic event operations - add/remove listener.\r\n * NOTE: The purpose of the class is to be extended in order to add\r\n * this functionality to other classes.\r\n */\r\nexport default class Listenable {\r\n    /**\r\n     * Creates new instance.\r\n     * @param {EventEmitter} eventEmitter\r\n     * @constructor\r\n     */\r\n    constructor(eventEmitter = new EventEmitter()) {\r\n        this.eventEmitter = eventEmitter;\r\n\r\n        // aliases for addListener/removeListener\r\n        this.addEventListener = this.on = this.addListener;\r\n        this.removeEventListener = this.off = this.removeListener;\r\n    }\r\n\r\n    /**\r\n     * Adds new listener.\r\n     * @param {String} eventName the name of the event\r\n     * @param {Function} listener the listener.\r\n     * @returns {Function} - The unsubscribe function.\r\n     */\r\n    addListener(eventName, listener) {\r\n        this.eventEmitter.addListener(eventName, listener);\r\n\r\n        return () => this.removeEventListener(eventName, listener);\r\n    }\r\n\r\n    /**\r\n     * Removes listener.\r\n     * @param {String} eventName the name of the event that triggers the\r\n     * listener\r\n     * @param {Function} listener the listener.\r\n     */\r\n    removeListener(eventName, listener) {\r\n        this.eventEmitter.removeListener(eventName, listener);\r\n    }\r\n}\r\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\r\n// this values needs to be as they are becuse they are going to analytics,\r\n// callstats, etc.\r\n\r\nexport const CHROME = 'chrome';\r\n\r\nexport const OPERA = 'opera';\r\n\r\nexport const FIREFOX = 'firefox';\r\n\r\nexport const INTERNET_EXPLORER = 'iexplorer';\r\n\r\nexport const SAFARI = 'safari';\r\n\r\nexport const NWJS = 'nwjs';\r\n\r\nexport const ELECTRON = 'electron';\r\n\r\nexport const REACT_NATIVE = 'react-native';\r\n\r\nexport const UNKNOWN = 'unknown';\r\n","import Bowser from 'bowser';\r\n\r\nimport {\r\n    CHROME,\r\n    OPERA,\r\n    FIREFOX,\r\n    INTERNET_EXPLORER,\r\n    SAFARI,\r\n    NWJS,\r\n    ELECTRON,\r\n    REACT_NATIVE,\r\n    UNKNOWN\r\n} from './browsers';\r\n\r\n/**\r\n * Maps the names of the browsers from bowser to the internal names defined in\r\n * ./browsers.js\r\n */\r\nconst bowserNameToJitsiName = {\r\n    'Chrome': CHROME,\r\n    'Chromium': CHROME,\r\n    'Opera': OPERA,\r\n    'Firefox': FIREFOX,\r\n    'Internet Explorer': INTERNET_EXPLORER,\r\n    'Safari': SAFARI\r\n};\r\n\r\n/**\r\n * Detects a Chromium based environent.\r\n *\r\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\r\n * it too. We need to check explicitly for chromium based Edge first and then\r\n * detect other chromium based browsers.\r\n *\r\n * @returns {Object|undefined} - The name (CHROME) and version.\r\n */\r\nfunction _detectChromiumBased() {\r\n    const userAgent = navigator.userAgent;\r\n    const browserInfo = {\r\n        name: UNKNOWN,\r\n        version: undefined\r\n    };\r\n\r\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\r\n        // Edge is currenly supported only on desktop and android.\r\n        if (userAgent.match(/Edg(A?)/)) {\r\n            // Compare the underlying chromium version.\r\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\r\n\r\n            if (Number.parseInt(version, 10) > 72) {\r\n                browserInfo.name = CHROME;\r\n                browserInfo.version = version;\r\n            }\r\n        } else {\r\n            browserInfo.name = CHROME;\r\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\r\n        }\r\n    }\r\n\r\n    return browserInfo;\r\n}\r\n\r\n/**\r\n * Detects Electron environment.\r\n *\r\n * @returns {Object|undefined} - The name (ELECTRON) and version.\r\n */\r\nfunction _detectElectron() {\r\n    const userAgent = navigator.userAgent;\r\n\r\n    if (userAgent.match(/Electron/)) {\r\n        const version = userAgent.match(/Electron\\/([\\d.]+)/)[1];\r\n\r\n        return {\r\n            name: ELECTRON,\r\n            version\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Detects NWJS environment.\r\n *\r\n * @returns {Object|undefined} - The name (NWJS) and version.\r\n */\r\nfunction _detectNWJS() {\r\n    const userAgent = navigator.userAgent;\r\n\r\n    if (userAgent.match(/JitsiMeetNW/)) {\r\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\r\n\r\n        return {\r\n            name: NWJS,\r\n            version\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Detects React Native environment.\r\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\r\n */\r\nfunction _detectReactNative() {\r\n    const match\r\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\r\n    let version;\r\n\r\n    // If we're remote debugging a React Native app, it may be treated as\r\n    // Chrome. Check navigator.product as well and always return some version\r\n    // even if we can't get the real one.\r\n\r\n    if (match || navigator.product === 'ReactNative') {\r\n        let name;\r\n\r\n        if (match && match.length > 2) {\r\n            name = match[1];\r\n            version = match[2];\r\n        }\r\n        name || (name = 'react-native');\r\n        version || (version = 'unknown');\r\n\r\n        return {\r\n            name: REACT_NATIVE,\r\n            version\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Returns information about the current browser.\r\n * @param {Object} - The bowser instance.\r\n * @returns {Object} - The name and version of the browser.\r\n */\r\nfunction _detect(bowser) {\r\n    let browserInfo;\r\n    const detectors = [\r\n        _detectReactNative,\r\n        _detectElectron,\r\n        _detectNWJS\r\n    ];\r\n\r\n    // Try all browser detectors\r\n    for (let i = 0; i < detectors.length; i++) {\r\n        browserInfo = detectors[i]();\r\n        if (browserInfo) {\r\n            return browserInfo;\r\n        }\r\n    }\r\n\r\n    const name = bowser.getBrowserName();\r\n\r\n    if (name in bowserNameToJitsiName) {\r\n        return {\r\n            name: bowserNameToJitsiName[name],\r\n            version: bowser.getBrowserVersion()\r\n        };\r\n    }\r\n\r\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\r\n    browserInfo = _detectChromiumBased();\r\n    if (browserInfo) {\r\n        return browserInfo;\r\n    }\r\n\r\n    return {\r\n        name: UNKNOWN,\r\n        version: undefined\r\n    };\r\n}\r\n\r\n/**\r\n * Implements browser detection.\r\n */\r\nexport default class BrowserDetection {\r\n    /**\r\n     * Creates new BrowserDetection instance.\r\n     *\r\n     * @param {Object} [browserInfo] - Information about the browser.\r\n     * @param {string} browserInfo.name - The name of the browser.\r\n     * @param {string} browserInfo.version - The version of the browser.\r\n     */\r\n    constructor(browserInfo) {\r\n        let name, version;\r\n\r\n        this._bowser = Bowser.getParser(navigator.userAgent);\r\n        if (typeof browserInfo === 'undefined') {\r\n            const detectedBrowserInfo = _detect(this._bowser);\r\n\r\n            name = detectedBrowserInfo.name;\r\n            version = detectedBrowserInfo.version;\r\n        } else if (browserInfo.name in bowserNameToJitsiName) {\r\n            name = bowserNameToJitsiName[browserInfo.name];\r\n            version = browserInfo.version;\r\n        } else {\r\n            name = UNKNOWN;\r\n            version = undefined;\r\n        }\r\n\r\n        this._name = name;\r\n        this._version = version;\r\n    }\r\n\r\n    /**\r\n     * Gets current browser name.\r\n     * @returns {string}\r\n     */\r\n    getName() {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * Checks if current browser is Chrome.\r\n     * @returns {boolean}\r\n     */\r\n    isChrome() {\r\n        return this._name === CHROME;\r\n    }\r\n\r\n    /**\r\n     * Checks if current browser is Opera.\r\n     * @returns {boolean}\r\n     */\r\n    isOpera() {\r\n        return this._name === OPERA;\r\n    }\r\n\r\n    /**\r\n     * Checks if current browser is Firefox.\r\n     * @returns {boolean}\r\n     */\r\n    isFirefox() {\r\n        return this._name === FIREFOX;\r\n    }\r\n\r\n    /**\r\n     * Checks if current browser is Internet Explorer.\r\n     * @returns {boolean}\r\n     */\r\n    isIExplorer() {\r\n        return this._name === INTERNET_EXPLORER;\r\n    }\r\n\r\n    /**\r\n     * Checks if current browser is Safari.\r\n     * @returns {boolean}\r\n     */\r\n    isSafari() {\r\n        return this._name === SAFARI;\r\n    }\r\n\r\n    /**\r\n     * Checks if current environment is NWJS.\r\n     * @returns {boolean}\r\n     */\r\n    isNWJS() {\r\n        return this._name === NWJS;\r\n    }\r\n\r\n    /**\r\n     * Checks if current environment is Electron.\r\n     * @returns {boolean}\r\n     */\r\n    isElectron() {\r\n        return this._name === ELECTRON;\r\n    }\r\n\r\n    /**\r\n     * Checks if current environment is React Native.\r\n     * @returns {boolean}\r\n     */\r\n    isReactNative() {\r\n        return this._name === REACT_NATIVE;\r\n    }\r\n\r\n    /**\r\n     * Returns the version of the current browser.\r\n     * @returns {string}\r\n     */\r\n    getVersion() {\r\n        return this._version;\r\n    }\r\n\r\n    /**\r\n     * Check if the parsed browser matches the passed condition.\r\n     *\r\n     * @param {Object} checkTree - It's one or two layered object, which can include a\r\n     * platform or an OS on the first layer and should have browsers specs on the\r\n     * bottom layer.\r\n     * Eg. { chrome: '>71.1.0' }\r\n     *     { windows: { chrome: '<70.2' } }\r\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\r\n     * conditions, false if not and undefined when the browser is not defined in the\r\n     * checktree object or when the current browser's version is unknown.\r\n     * @private\r\n     */\r\n    _checkCondition(checkTree) {\r\n        if (this._version) {\r\n            return this._bowser.satisfies(checkTree);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compares the passed version with the current browser version.\r\n     *\r\n     * @param {*} version - The version to compare with. Anything different\r\n     * than string will be converted to string.\r\n     * @returns {boolean|undefined} - Returns true if the current version is\r\n     * greater than the passed version and false otherwise. Returns undefined if\r\n     * the current browser version is unknown.\r\n     */\r\n    isVersionGreaterThan(version) {\r\n        return this._checkCondition({ [this._name]: `>${version}` });\r\n    }\r\n\r\n    /**\r\n     * Compares the passed version with the current browser version.\r\n     *\r\n     * @param {*} version - The version to compare with. Anything different\r\n     * than string will be converted to string.\r\n     * @returns {boolean|undefined} - Returns true if the current version is\r\n     * lower than the passed version and false otherwise. Returns undefined if\r\n     * the current browser version is unknown.\r\n     */\r\n    isVersionLessThan(version) {\r\n        return this._checkCondition({ [this._name]: `<${version}` });\r\n    }\r\n\r\n    /**\r\n     * Compares the passed version with the current browser version.\r\n     *\r\n     * @param {*} version - The version to compare with. Anything different\r\n     * than string will be converted to string.\r\n     * @returns {boolean|undefined} - Returns true if the current version is\r\n     * equal to the passed version and false otherwise. Returns undefined if\r\n     * the current browser version is unknown.\r\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\r\n     */\r\n    isVersionEqualTo(version) {\r\n        return this._checkCondition({ [this._name]: `~${version}` });\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\n/**\r\n * Dummy implementation of Storage interface.\r\n */\r\nclass DummyLocalStorage extends EventEmitter {\r\n\r\n    /**\r\n     * The object used for storage.\r\n     */\r\n    _storage = {};\r\n\r\n    /**\r\n     * Empties all keys out of the storage.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    clear() {\r\n        this._storage = {};\r\n    }\r\n\r\n    /**\r\n     * Returns the number of data items stored in the Storage object.\r\n     *\r\n     * @returns {number} - The number of data items stored in the Storage object.\r\n     */\r\n    get length() {\r\n        return Object.keys(this._storage).length;\r\n    }\r\n\r\n    /**\r\n     * Will return that key's value associated to the passed key name.\r\n     *\r\n     * @param {string} keyName - The key name.\r\n     * @returns {*} - The key value.\r\n     */\r\n    getItem(keyName) {\r\n        return this._storage[keyName];\r\n    }\r\n\r\n    /**\r\n     * When passed a key name and value, will add that key to the storage,\r\n     * or update that key's value if it already exists.\r\n     *\r\n     * @param {string} keyName - The key name.\r\n     * @param {*} keyValue - The key value.\r\n     * @returns {void}\r\n     */\r\n    setItem(keyName, keyValue) {\r\n        this._storage[keyName] = keyValue;\r\n    }\r\n\r\n    /**\r\n     * When passed a key name, will remove that key from the storage.\r\n     *\r\n     * @param {string} keyName - The key name.\r\n     * @returns {void}\r\n     */\r\n    removeItem(keyName) {\r\n        delete this._storage[keyName];\r\n    }\r\n\r\n    /**\r\n     * When passed a number n, this method will return the name of the nth key in the storage.\r\n     *\r\n     * @param {number} idx - The index of the key.\r\n     * @returns {string} - The nth key name.\r\n     */\r\n    key(n) {\r\n        const keys = Object.keys(this._storage);\r\n\r\n        if (keys.length <= n) {\r\n            return undefined;\r\n        }\r\n\r\n        return keys[n];\r\n    }\r\n\r\n    /**\r\n     * Serializes the content of the storage.\r\n     *\r\n     * @returns {string} - The serialized content.\r\n     */\r\n    serialize() {\r\n        return JSON.stringify(this._storage);\r\n    }\r\n}\r\n\r\n/**\r\n * Wrapper class for browser's local storage object.\r\n */\r\nclass JitsiLocalStorage extends EventEmitter {\r\n    /**\r\n     * @constructor\r\n     * @param {Storage} storage browser's local storage object.\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        try {\r\n            this._storage = window.localStorage;\r\n            this._localStorageDisabled = false;\r\n        } catch (ignore) {\r\n            // localStorage throws an exception.\r\n        }\r\n\r\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\r\n            console.warn('Local storage is disabled.');\r\n            this._storage = new DummyLocalStorage();\r\n            this._localStorageDisabled = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if window.localStorage is disabled and false otherwise.\r\n     *\r\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\r\n     */\r\n    isLocalStorageDisabled() {\r\n        return this._localStorageDisabled;\r\n    }\r\n\r\n    /**\r\n     * Empties all keys out of the storage.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    clear() {\r\n        this._storage.clear();\r\n        this.emit('changed');\r\n    }\r\n\r\n    /**\r\n     * Returns the number of data items stored in the Storage object.\r\n     *\r\n     * @returns {number} - The number of data items stored in the Storage object.\r\n     */\r\n    get length() {\r\n        return this._storage.length;\r\n    }\r\n\r\n    /**\r\n     * Returns that passed key's value.\r\n     * @param {string} keyName the name of the key you want to retrieve\r\n     * the value of.\r\n     * @returns {String|null} the value of the key. If the key does not exist,\r\n     * null is returned.\r\n     */\r\n    getItem(keyName) {\r\n        return this._storage.getItem(keyName);\r\n    }\r\n\r\n    /**\r\n     * Adds a key to the storage, or update key's value if it already exists.\r\n     * @param {string} keyName - the name of the key you want to create/update.\r\n     * @param {string} keyValue - the value you want to give the key you are\r\n     * creating/updating.\r\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\r\n     */\r\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\r\n        this._storage.setItem(keyName, keyValue);\r\n\r\n        if (!dontEmitChangedEvent) {\r\n            this.emit('changed');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a key from the storage.\r\n     * @param {string} keyName the name of the key you want to remove.\r\n     */\r\n    removeItem(keyName) {\r\n        this._storage.removeItem(keyName);\r\n        this.emit('changed');\r\n    }\r\n\r\n    /**\r\n     * Returns the name of the nth key in the list, or null if n is greater\r\n     * than or equal to the number of key/value pairs in the object.\r\n     *\r\n     * @param {number} i - The index of the key in the list.\r\n     * @returns {string}\r\n     */\r\n    key(i) {\r\n        return this._storage.key(i);\r\n    }\r\n\r\n    /**\r\n     * Serializes the content of the storage.\r\n     *\r\n     * @returns {string} - The serialized content.\r\n     */\r\n    serialize() {\r\n        if (this.isLocalStorageDisabled) {\r\n            return this._storage.serialize();\r\n        }\r\n\r\n        const length = this._storage.length;\r\n        const localStorageContent = {};\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            const key = this._storage.key(i);\r\n\r\n            localStorageContent[key] = this._storage.getItem(key);\r\n        }\r\n\r\n        return JSON.stringify(localStorageContent);\r\n    }\r\n}\r\n\r\nexport const jitsiLocalStorage = new JitsiLocalStorage();\r\n","/**\r\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\r\n * versa.\r\n * @event\r\n * @type {boolean} - true when service has changed to active false otherwise.\r\n */\r\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\r\n\r\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\r\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\r\n * it starts receiving audio levels !== 0 after being in a state of no audio.\r\n * @event\r\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\r\n */\r\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\r\n\r\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\r\n * for a period of time, meaning that the device is either broken or hardware/software muted.\r\n * @event\r\n * @type {void}\r\n */\r\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\r\n\r\n/**\r\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\r\n *  @event\r\n *  @type {Object}\r\n */\r\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\r\n\r\n/**\r\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\r\n * The generated objects are of type Array<Object>, one score for each monitored device.\r\n * @event VAD_REPORT_PUBLISHED\r\n * @type Array<Object> with the following structure:\r\n * @property {Date} timestamp - Timestamp at which the compute took place.\r\n * @property {number} avgVAD - Average VAD score over monitored period of time.\r\n * @property {string} deviceId - Associate local audio device ID.\r\n */\r\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\r\n\r\n/**\r\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\r\n *\r\n * @event\r\n * @type {Object}\r\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\r\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\r\n * @property {string} deviceId - Device id of the associated track.\r\n */\r\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\r\n\r\n/**\r\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\r\n *\r\n *  @event\r\n *  @type {Object}\r\n */\r\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\r\n","/**\r\n * Notifies about audio level in RTP statistics by SSRC.\r\n *\r\n * @param ssrc - The synchronization source identifier (SSRC) of the\r\n * endpoint/participant whose audio level is being reported.\r\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\r\n * RTP statistics.\r\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\r\n * local endpoint/participant; otherwise, <tt>false</tt>.\r\n */\r\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\r\n\r\n/**\r\n * An event fired just before the statistics module gets disposes and it's\r\n * the last chance to submit some logs that will end up in stats services like\r\n * CallStats (if enabled).\r\n */\r\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\r\n\r\n/**\r\n * An event carrying all statistics by ssrc.\r\n */\r\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\r\n\r\n/**\r\n * An event carrying connection statistics.\r\n *\r\n * @param {object} connectionStats - The connection statistics carried by the\r\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\r\n * <tt>resolution</tt>, and <tt>transport</tt>.\r\n */\r\nexport const CONNECTION_STATS = 'statistics.connectionstats';\r\n\r\n/**\r\n * An event carrying performance stats.\r\n */\r\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\r\n","/**\r\n * Status that video SIP GW service is available.\r\n * @type {string}\r\n */\r\nexport const STATUS_AVAILABLE = 'available';\r\n\r\n/**\r\n * Status that video SIP GW service is not available.\r\n * @type {string}\r\n */\r\nexport const STATUS_UNDEFINED = 'undefined';\r\n\r\n/**\r\n * Status that video SIP GW service is available but there are no free nodes\r\n * at the moment to serve new requests.\r\n * @type {string}\r\n */\r\nexport const STATUS_BUSY = 'busy';\r\n\r\n/**\r\n * Video SIP GW session state, currently running.\r\n * @type {string}\r\n */\r\nexport const STATE_ON = 'on';\r\n\r\n/**\r\n * Video SIP GW session state, currently stopped and not running.\r\n * @type {string}\r\n */\r\nexport const STATE_OFF = 'off';\r\n\r\n/**\r\n * Video SIP GW session state, currently is starting.\r\n * @type {string}\r\n */\r\nexport const STATE_PENDING = 'pending';\r\n\r\n/**\r\n * Video SIP GW session state, has observed some issues and is retrying at the\r\n * moment.\r\n * @type {string}\r\n */\r\nexport const STATE_RETRYING = 'retrying';\r\n\r\n/**\r\n * Video SIP GW session state, tried to start but it failed.\r\n * @type {string}\r\n */\r\nexport const STATE_FAILED = 'failed';\r\n\r\n/**\r\n * Error on trying to create video SIP GW session in conference where\r\n * there is no room connection (hasn't joined or has left the room).\r\n * @type {string}\r\n */\r\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\r\n\r\n/**\r\n * Error on trying to create video SIP GW session with address for which\r\n * there is an already created session.\r\n * @type {string}\r\n */\r\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport browser from '../browser';\r\n\r\nconst logger = getLogger('FeatureFlags');\r\n\r\n/**\r\n * A global module for accessing information about different feature flags state.\r\n */\r\nclass FeatureFlags {\r\n    /**\r\n     * Configures the module.\r\n     *\r\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\r\n     */\r\n    init(flags) {\r\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\r\n        this._sendMultipleVideoStreams = Boolean(flags.sendMultipleVideoStreams);\r\n\r\n        // For Chromium, check if Unified plan is enabled.\r\n        this._usesUnifiedPlan = browser.usesUnifiedPlan()\r\n            && (!browser.isChromiumBased() || (flags.enableUnifiedOnChrome ? flags.enableUnifiedOnChrome : true));\r\n\r\n        logger.info(`Source name signaling: ${this._sourceNameSignaling},`\r\n            + ` Send multiple video streams: ${this._sendMultipleVideoStreams},`\r\n            + ` uses Unified plan: ${this._usesUnifiedPlan}`);\r\n    }\r\n\r\n    /**\r\n     * Checks if multiple local video streams support is enabled.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isMultiStreamSupportEnabled() {\r\n        return this._sourceNameSignaling && this._sendMultipleVideoStreams && this._usesUnifiedPlan;\r\n    }\r\n\r\n    /**\r\n     * Checks if the source name signaling is enabled.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isSourceNameSignalingEnabled() {\r\n        return this._sourceNameSignaling;\r\n    }\r\n}\r\n\r\nexport default new FeatureFlags();","/**\r\n * The events for the connection.\r\n */\r\n\r\n/**\r\n * Indicates that the connection has been disconnected. The event provides\r\n * the following parameters to its listeners:\r\n *\r\n * @param msg {string} a message associated with the disconnect such as the\r\n * last (known) error message\r\n */\r\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\r\n\r\n/**\r\n * Indicates that the connection has been established. The event provides\r\n * the following parameters to its listeners:\r\n *\r\n * @param id {string} the ID of the local endpoint/participant/peer (within\r\n * the context of the established connection)\r\n */\r\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\r\n\r\n/**\r\n * Indicates that the connection has been failed for some reason. The event\r\n * provides the following parameters to its listeners:\r\n *\r\n * @param errType {JitsiConnectionErrors} the type of error associated with\r\n * the failure\r\n * @param errReason {string} the error (message) associated with the failure\r\n * @param credentials {object} the credentials used to connect (if any)\r\n * @param errReasonDetails {object} an optional object with details about\r\n * the error, like shard moving, suspending. Used for analytics purposes.\r\n */\r\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\r\n\r\n/**\r\n * Indicates that the performed action cannot be executed because the\r\n * connection is not in the correct state(connected, disconnected, etc.)\r\n */\r\nexport const WRONG_STATE = 'connection.wrongState';\r\n\r\n/**\r\n * Indicates that the display name is required over this connection and need to be supplied when\r\n * joining the room.\r\n * There are cases like lobby room where display name is required.\r\n */\r\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\r\n","/* global module */\r\n/**\r\n * Enumeration of the codec mime types\r\n * @type {{H264: string, VP8: string, VP9: string}}\r\n */\r\nconst CodecMimeType = {\r\n    /**\r\n     * The h264 codec mime type\r\n     */\r\n    H264: 'h264',\r\n\r\n    /**\r\n     * The vp8 codec mime type.\r\n     */\r\n    VP8: 'vp8',\r\n\r\n    /**\r\n     * The vp9 codec mime type.\r\n     */\r\n    VP9: 'vp9'\r\n\r\n};\r\n\r\nmodule.exports = CodecMimeType;\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $msg, Strophe } from 'strophe.js';\r\nimport 'strophejs-plugin-disco';\r\n\r\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\r\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport browser from '../browser';\r\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nimport Caps from './Caps';\r\nimport XmppConnection from './XmppConnection';\r\nimport MucConnectionPlugin from './strophe.emuc';\r\nimport JingleConnectionPlugin from './strophe.jingle';\r\nimport initStropheLogger from './strophe.logger';\r\nimport RayoConnectionPlugin from './strophe.rayo';\r\nimport initStropheUtil from './strophe.util';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Creates XMPP connection.\r\n *\r\n * @param {Object} options\r\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\r\n * Prosody).\r\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\r\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\r\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\r\n * @returns {XmppConnection}\r\n */\r\nfunction createConnection({ enableWebsocketResume, serviceUrl = '/http-bind', token, websocketKeepAlive }) {\r\n    // Append token as URL param\r\n    if (token) {\r\n        // eslint-disable-next-line no-param-reassign\r\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\r\n    }\r\n\r\n    return new XmppConnection({\r\n        enableWebsocketResume,\r\n        serviceUrl,\r\n        websocketKeepAlive\r\n    });\r\n}\r\n\r\n/**\r\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\r\n * {@link XmppConnection} wrapper.\r\n *\r\n * @returns {void}\r\n */\r\nfunction initStropheNativePlugins() {\r\n    initStropheUtil();\r\n    initStropheLogger();\r\n}\r\n\r\n// FIXME: remove once we have a default config template. -saghul\r\n/**\r\n * A list of ice servers to use by default for P2P.\r\n */\r\nexport const DEFAULT_STUN_SERVERS = [\r\n    { urls: 'stun:stun.l.google.com:19302' },\r\n    { urls: 'stun:stun1.l.google.com:19302' },\r\n    { urls: 'stun:stun2.l.google.com:19302' }\r\n];\r\n\r\n/**\r\n * The name of the field used to recognize a chat message as carrying a JSON\r\n * payload from another endpoint.\r\n * If the json-message of a chat message contains a valid JSON object, and\r\n * the JSON has this key, then it is a valid json-message to be sent.\r\n */\r\nexport const JITSI_MEET_MUC_TYPE = 'type';\r\n\r\n/**\r\n *\r\n */\r\nexport default class XMPP extends Listenable {\r\n    /**\r\n     * FIXME describe all options\r\n     * @param {Object} options\r\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\r\n     * connection with the server.\r\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\r\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\r\n     * module try to resume the session in case the Websocket connection breaks.\r\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\r\n     * constructor for more details.\r\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\r\n     * @param token\r\n     */\r\n    constructor(options, token) {\r\n        super();\r\n        this.connection = null;\r\n        this.disconnectInProgress = false;\r\n        this.connectionTimes = {};\r\n        this.options = options;\r\n        this.token = token;\r\n        this.authenticatedUser = false;\r\n\r\n        initStropheNativePlugins();\r\n\r\n        this.connection = createConnection({\r\n            enableWebsocketResume: options.enableWebsocketResume,\r\n\r\n            // FIXME remove deprecated bosh option at some point\r\n            serviceUrl: options.serviceUrl || options.bosh,\r\n            token,\r\n            websocketKeepAlive: options.websocketKeepAlive\r\n        });\r\n\r\n        this._initStrophePlugins();\r\n\r\n        this.caps = new Caps(this.connection, this.options.clientNode);\r\n\r\n        // Initialize features advertised in disco-info\r\n        this.initFeaturesList();\r\n\r\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\r\n        // sounds like they would want that. A problem for them though may be if\r\n        // they wanted to utilize the connected connection in an unload handler\r\n        // of their own. However, it should be fairly easy for them to do that\r\n        // by registering their unload handler before us.\r\n        $(window).on('beforeunload unload', ev => {\r\n            this.disconnect(ev).catch(() => {\r\n                // ignore errors in order to not brake the unload.\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes the list of feature advertised through the disco-info\r\n     * mechanism.\r\n     */\r\n    initFeaturesList() {\r\n        // http://xmpp.org/extensions/xep-0167.html#support\r\n        // http://xmpp.org/extensions/xep-0176.html#support\r\n        this.caps.addFeature('urn:xmpp:jingle:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\r\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\r\n\r\n        // Disable RTX on Firefox because of https://bugzilla.mozilla.org/show_bug.cgi?id=1668028.\r\n        if (!(this.options.disableRtx || browser.isFirefox())) {\r\n            this.caps.addFeature('urn:ietf:rfc:4588');\r\n        }\r\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\r\n            this.caps.addFeature('http://jitsi.org/opus-red');\r\n        }\r\n\r\n        // this is dealt with by SDP O/A so we don't need to announce this\r\n        // XEP-0293\r\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\r\n        // XEP-0294\r\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\r\n\r\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\r\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\r\n\r\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\r\n\r\n        // Enable Lipsync ?\r\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\r\n            logger.info('Lip-sync enabled !');\r\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\r\n        }\r\n\r\n        if (this.connection.rayo) {\r\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\r\n        }\r\n\r\n        if (E2EEncryption.isSupported(this.options)) {\r\n            this.caps.addFeature('https://jitsi.org/meet/e2ee');\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getConnection() {\r\n        return this.connection;\r\n    }\r\n\r\n    /**\r\n     * Receive connection status changes and handles them.\r\n     *\r\n     * @param {Object} credentials\r\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\r\n     * connect method. For example, 'user@xmpp.com'.\r\n     * @param {string} credentials.password - The password passed to the connect\r\n     * method.\r\n     * @param {string} status - One of Strophe's connection status strings.\r\n     * @param {string} [msg] - The connection error message provided by Strophe.\r\n     */\r\n    connectionHandler(credentials = {}, status, msg) {\r\n        const now = window.performance.now();\r\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\r\n\r\n        this.connectionTimes[statusStr] = now;\r\n        logger.log(\r\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\r\n            now);\r\n\r\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\r\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\r\n            this.connection.jingle.getStunAndTurnCredentials();\r\n\r\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\r\n\r\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\r\n            this._resetState();\r\n\r\n            // Schedule ping ?\r\n            const pingJid = this.connection.domain;\r\n\r\n            // FIXME no need to do it again on stream resume\r\n            this.caps.getFeaturesAndIdentities(pingJid)\r\n                .then(({ features, identities }) => {\r\n                    if (!features.has(Strophe.NS.PING)) {\r\n                        logger.error(\r\n                            `Ping NOT supported by ${pingJid} - please enable ping in your XMPP server config`);\r\n                    }\r\n\r\n                    // check for speakerstats\r\n                    identities.forEach(identity => {\r\n                        if (identity.type === 'speakerstats') {\r\n                            this.speakerStatsComponentAddress = identity.name;\r\n                        }\r\n\r\n                        if (identity.type === 'conference_duration') {\r\n                            this.conferenceDurationComponentAddress = identity.name;\r\n                        }\r\n\r\n                        if (identity.type === 'lobbyrooms') {\r\n                            this.lobbySupported = true;\r\n                            identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\r\n                                .then(({ features: f }) => {\r\n                                    f.forEach(fr => {\r\n                                        if (fr.endsWith('#displayname_required')) {\r\n                                            this.eventEmitter.emit(\r\n                                                JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\r\n                                        }\r\n                                    });\r\n                                })\r\n                                .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\r\n                        }\r\n                    });\r\n\r\n                    if (this.speakerStatsComponentAddress\r\n                        || this.conferenceDurationComponentAddress) {\r\n                        this.connection.addHandler(\r\n                            this._onPrivateMessage.bind(this), null,\r\n                            'message', null, null);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    const errmsg = 'Feature discovery error';\r\n\r\n                    GlobalOnErrorHandler.callErrorHandler(\r\n                        new Error(`${errmsg}: ${error}`));\r\n                    logger.error(errmsg, error);\r\n                });\r\n\r\n            if (credentials.password) {\r\n                this.authenticatedUser = true;\r\n            }\r\n            if (this.connection && this.connection.connected\r\n                && Strophe.getResourceFromJid(this.connection.jid)) {\r\n                // .connected is true while connecting?\r\n                // this.connection.send($pres());\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\r\n                    Strophe.getResourceFromJid(this.connection.jid));\r\n            }\r\n        } else if (status === Strophe.Status.CONNFAIL) {\r\n            if (msg === 'x-strophe-bad-non-anon-jid') {\r\n                this.anonymousConnectionFailed = true;\r\n            } else {\r\n                this.connectionFailed = true;\r\n            }\r\n            this.lastErrorMsg = msg;\r\n            if (msg === 'giving-up') {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\r\n            }\r\n        } else if (status === Strophe.Status.ERROR) {\r\n            this.lastErrorMsg = msg;\r\n        } else if (status === Strophe.Status.DISCONNECTED) {\r\n            // Stop ping interval\r\n            this.connection.ping.stopInterval();\r\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\r\n            const errMsg = msg || this.lastErrorMsg;\r\n\r\n            if (this.anonymousConnectionFailed) {\r\n                // prompt user for username and password\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\r\n            } else if (this.connectionFailed) {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.OTHER_ERROR,\r\n                    errMsg,\r\n                    undefined, /* credentials */\r\n                    this._getConnectionFailedReasonDetails());\r\n            } else if (wasIntentionalDisconnect) {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\r\n            } else {\r\n                // XXX if Strophe drops the connection while not being asked to,\r\n                // it means that most likely some serious error has occurred.\r\n                // One currently known case is when a BOSH request fails for\r\n                // more than 4 times. The connection is dropped without\r\n                // supplying a reason(error message/event) through the API.\r\n                logger.error('XMPP connection dropped!');\r\n\r\n                // XXX if the last request error is within 5xx range it means it\r\n                // was a server failure\r\n                const lastErrorStatus = Strophe.getLastErrorStatus();\r\n\r\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConnectionEvents.CONNECTION_FAILED,\r\n                        JitsiConnectionErrors.SERVER_ERROR,\r\n                        errMsg || 'server-error',\r\n                        /* credentials */ undefined,\r\n                        this._getConnectionFailedReasonDetails());\r\n                } else {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConnectionEvents.CONNECTION_FAILED,\r\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\r\n                        errMsg || 'connection-dropped-error',\r\n                        /* credentials */ undefined,\r\n                        this._getConnectionFailedReasonDetails());\r\n                }\r\n            }\r\n        } else if (status === Strophe.Status.AUTHFAIL) {\r\n            // wrong password or username, prompt user\r\n            this.eventEmitter.emit(\r\n                JitsiConnectionEvents.CONNECTION_FAILED,\r\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\r\n                msg,\r\n                credentials);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     */\r\n    _connect(jid, password) {\r\n        // connection.connect() starts the connection process.\r\n        //\r\n        // As the connection process proceeds, the user supplied callback will\r\n        // be triggered multiple times with status updates. The callback should\r\n        // take two arguments - the status code and the error condition.\r\n        //\r\n        // The status code will be one of the values in the Strophe.Status\r\n        // constants. The error condition will be one of the conditions defined\r\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\r\n        //\r\n        // The Parameters wait, hold and route are optional and only relevant\r\n        // for BOSH connections. Please see XEP 124 for a more detailed\r\n        // explanation of the optional parameters.\r\n        //\r\n        // Connection status constants for use by the connection handler\r\n        // callback.\r\n        //\r\n        //  Status.ERROR - An error has occurred (websockets specific)\r\n        //  Status.CONNECTING - The connection is currently being made\r\n        //  Status.CONNFAIL - The connection attempt failed\r\n        //  Status.AUTHENTICATING - The connection is authenticating\r\n        //  Status.AUTHFAIL - The authentication attempt failed\r\n        //  Status.CONNECTED - The connection has succeeded\r\n        //  Status.DISCONNECTED - The connection has been terminated\r\n        //  Status.DISCONNECTING - The connection is currently being terminated\r\n        //  Status.ATTACHED - The connection has been attached\r\n\r\n        this._resetState();\r\n        this.connection.connect(\r\n            jid,\r\n            password,\r\n            this.connectionHandler.bind(this, {\r\n                jid,\r\n                password\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Attach to existing connection. Can be used for optimizations. For\r\n     * example: if the connection is created on the server we can attach to it\r\n     * and start using it.\r\n     *\r\n     * @param options {object} connecting options - rid, sid, jid and password.\r\n     */\r\n    attach(options) {\r\n        this._resetState();\r\n        const now = this.connectionTimes.attaching = window.performance.now();\r\n\r\n        logger.log('(TIME) Strophe Attaching:\\t', now);\r\n        this.connection.attach(options.jid, options.sid,\r\n            parseInt(options.rid, 10) + 1,\r\n            this.connectionHandler.bind(this, {\r\n                jid: options.jid,\r\n                password: options.password\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Resets any state/flag before starting a new connection.\r\n     * @private\r\n     */\r\n    _resetState() {\r\n        this.anonymousConnectionFailed = false;\r\n        this.connectionFailed = false;\r\n        this.lastErrorMsg = undefined;\r\n        this.disconnectInProgress = undefined;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     */\r\n    connect(jid, password) {\r\n        if (!jid) {\r\n            const { anonymousdomain, domain } = this.options.hosts;\r\n            let configDomain = anonymousdomain || domain;\r\n\r\n            // Force authenticated domain if room is appended with '?login=true'\r\n            // or if we're joining with the token\r\n\r\n            // FIXME Do not rely on window.location because (1) React Native\r\n            // does not have a window.location by default and (2) here we cannot\r\n            // know for sure that query/search has not be stripped from\r\n            // window.location by the time the following executes.\r\n            const { location } = window;\r\n\r\n            if (anonymousdomain) {\r\n                const search = location && location.search;\r\n\r\n                if ((search && search.indexOf('login=true') !== -1)\r\n                        || this.token) {\r\n                    configDomain = domain;\r\n                }\r\n            }\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            jid = configDomain || (location && location.hostname);\r\n        }\r\n\r\n        return this._connect(jid, password);\r\n    }\r\n\r\n    /**\r\n     * Joins or creates a muc with the provided jid, created from the passed\r\n     * in room name and muc host and onCreateResource result.\r\n     *\r\n     * @param {string} roomName - The name of the muc to join.\r\n     * @param {Object} options - Configuration for how to join the muc.\r\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\r\n     * is to be added to the jid.\r\n     * @returns {Promise} Resolves with an instance of a strophe muc.\r\n     */\r\n    createRoom(roomName, options, onCreateResource) {\r\n        // There are cases (when using subdomain) where muc can hold an uppercase part\r\n        let roomjid = `${roomName}@${options.customDomain\r\n            ? options.customDomain : this.options.hosts.muc.toLowerCase()}/`;\r\n\r\n        const mucNickname = onCreateResource\r\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\r\n            : RandomUtil.randomHexString(8).toLowerCase();\r\n\r\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\r\n        roomjid += mucNickname;\r\n\r\n        return this.connection.emuc.createRoom(roomjid, null, options);\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the participant associated with the Strophe connection.\r\n     *\r\n     * @returns {string} The jid of the participant.\r\n     */\r\n    getJid() {\r\n        return this.connection.jid;\r\n    }\r\n\r\n    /**\r\n     * Returns the logs from strophe.jingle.\r\n     * @returns {Object}\r\n     */\r\n    getJingleLog() {\r\n        const jingle = this.connection.jingle;\r\n\r\n\r\n        return jingle ? jingle.getLog() : {};\r\n    }\r\n\r\n    /**\r\n     * Returns the logs from strophe.\r\n     */\r\n    getXmppLog() {\r\n        return (this.connection.logger || {}).log || null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    dial(...args) {\r\n        this.connection.rayo.dial(...args);\r\n    }\r\n\r\n    /**\r\n     * Pings the server.\r\n     * @param timeout how many ms before a timeout should occur.\r\n     * @returns {Promise} resolved on ping success and reject on an error or\r\n     * a timeout.\r\n     */\r\n    ping(timeout) {\r\n        return new Promise((resolve, reject) => {\r\n            this.connection.ping\r\n                    .ping(this.connection.domain, resolve, reject, timeout);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getSessions() {\r\n        return this.connection.jingle.sessions;\r\n    }\r\n\r\n    /**\r\n     * Disconnects this from the XMPP server (if this is connected).\r\n     *\r\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\r\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\r\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\r\n     */\r\n    disconnect(ev) {\r\n        if (this.disconnectInProgress) {\r\n            return this.disconnectInProgress;\r\n        } else if (!this.connection) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this.disconnectInProgress = new Promise(resolve => {\r\n            const disconnectListener = (credentials, status) => {\r\n                if (status === Strophe.Status.DISCONNECTED) {\r\n                    resolve();\r\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\r\n                }\r\n            };\r\n\r\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\r\n        });\r\n\r\n        this._cleanupXmppConnection(ev);\r\n\r\n        return this.disconnectInProgress;\r\n    }\r\n\r\n    /**\r\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\r\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\r\n     *\r\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\r\n     * (e.g. beforeunload, unload).\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _cleanupXmppConnection(ev) {\r\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\r\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\r\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\r\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\r\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\r\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\r\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\r\n        // possible.\r\n        !this.connection.isUsingWebSocket && this.connection.flush();\r\n\r\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\r\n            const evType = ev.type;\r\n\r\n            if (evType === 'beforeunload' || evType === 'unload') {\r\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\r\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\r\n                // depending on whether we want to run with it for some time.\r\n                this.connection.options.sync = true;\r\n\r\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\r\n                if (this.connection.sendUnavailableBeacon()) {\r\n\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.connection.disconnect();\r\n\r\n        if (this.connection.options.sync !== true) {\r\n            this.connection.flush();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    _initStrophePlugins() {\r\n        const iceConfig = {\r\n            jvb: { iceServers: [ ] },\r\n            p2p: { iceServers: [ ] }\r\n        };\r\n\r\n        const p2pStunServers = (this.options.p2p\r\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\r\n\r\n        if (Array.isArray(p2pStunServers)) {\r\n            logger.info('P2P STUN servers: ', p2pStunServers);\r\n            iceConfig.p2p.iceServers = p2pStunServers;\r\n        }\r\n\r\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\r\n            logger.info('P2P ICE transport policy: ',\r\n                this.options.p2p.iceTransportPolicy);\r\n\r\n            iceConfig.p2p.iceTransportPolicy\r\n                = this.options.p2p.iceTransportPolicy;\r\n        }\r\n\r\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\r\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\r\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\r\n    }\r\n\r\n    /**\r\n     * Returns details about connection failure. Shard change or is it after\r\n     * suspend.\r\n     * @returns {object} contains details about a connection failure.\r\n     * @private\r\n     */\r\n    _getConnectionFailedReasonDetails() {\r\n        const details = {};\r\n\r\n        // check for moving between shard if information is available\r\n        if (this.options.deploymentInfo\r\n            && this.options.deploymentInfo.shard\r\n            && this.connection.lastResponseHeaders) {\r\n\r\n            // split headers by line\r\n            const headersArr = this.connection.lastResponseHeaders\r\n                .trim().split(/[\\r\\n]+/);\r\n            const headers = {};\r\n\r\n            headersArr.forEach(line => {\r\n                const parts = line.split(': ');\r\n                const header = parts.shift();\r\n                const value = parts.join(': ');\r\n\r\n                headers[header] = value;\r\n            });\r\n\r\n            /* eslint-disable camelcase */\r\n            details.shard_changed\r\n                = this.options.deploymentInfo.shard\r\n                    !== headers['x-jitsi-shard'];\r\n            /* eslint-enable camelcase */\r\n        }\r\n\r\n        /* eslint-disable camelcase */\r\n        // check for possible suspend\r\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\r\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\r\n        /* eslint-enable camelcase */\r\n\r\n        return details;\r\n    }\r\n\r\n    /**\r\n     * Notifies speaker stats component if available that we are the new\r\n     * dominant speaker in the conference.\r\n     * @param {String} roomJid - The room jid where the speaker event occurred.\r\n     */\r\n    sendDominantSpeakerEvent(roomJid) {\r\n        // no speaker stats component advertised\r\n        if (!this.speakerStatsComponentAddress || !roomJid) {\r\n            return;\r\n        }\r\n\r\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\r\n\r\n        msg.c('speakerstats', {\r\n            xmlns: 'http://jitsi.org/jitmeet',\r\n            room: roomJid })\r\n            .up();\r\n\r\n        this.connection.send(msg);\r\n    }\r\n\r\n    /**\r\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\r\n     * parsing it and checking if it has a field called 'type'.\r\n     *\r\n     * @param {string} jsonString check if this string is a valid json string\r\n     * and contains the special structure.\r\n     * @returns {boolean, object} if given object is a valid JSON string, return\r\n     * the json object. Otherwise, returns false.\r\n     */\r\n    tryParseJSONAndVerify(jsonString) {\r\n        try {\r\n            const json = JSON.parse(jsonString);\r\n\r\n            // Handle non-exception-throwing cases:\r\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\r\n            // hence the type-checking,\r\n            // but... JSON.parse(null) returns null, and\r\n            // typeof null === \"object\",\r\n            // so we must check for that, too.\r\n            // Thankfully, null is falsey, so this suffices:\r\n            if (json && typeof json === 'object') {\r\n                const type = json[JITSI_MEET_MUC_TYPE];\r\n\r\n                if (typeof type !== 'undefined') {\r\n                    return json;\r\n                }\r\n\r\n                logger.debug('parsing valid json but does not have correct '\r\n                    + 'structure', 'topic: ', type);\r\n            }\r\n        } catch (e) {\r\n            logger.error(e);\r\n\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * A private message is received, message that is not addressed to the muc.\r\n     * We expect private message coming from plugins component if it is\r\n     * enabled and running.\r\n     *\r\n     * @param {string} msg - The message.\r\n     */\r\n    _onPrivateMessage(msg) {\r\n        const from = msg.getAttribute('from');\r\n\r\n        if (!(from === this.speakerStatsComponentAddress\r\n            || from === this.conferenceDurationComponentAddress)) {\r\n            return true;\r\n        }\r\n\r\n        const jsonMessage = $(msg).find('>json-message')\r\n            .text();\r\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\r\n\r\n        if (parsedJson\r\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats'\r\n            && parsedJson.users) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\r\n        }\r\n\r\n        if (parsedJson\r\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration'\r\n            && parsedJson.created_timestamp) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","\r\n/**\r\n * The method will increase the given number by 1. If the given counter is equal\r\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\r\n * 1.\r\n * @param {number} number - An integer counter value to be incremented.\r\n * @return {number} the next counter value increased by 1 (see the description\r\n * above for exception).\r\n */\r\nexport function safeCounterIncrement(number) {\r\n    let nextValue = number;\r\n\r\n    if (number >= Number.MAX_SAFE_INTEGER) {\r\n        nextValue = 0;\r\n    }\r\n\r\n    return nextValue + 1;\r\n}\r\n\r\n/**\r\n * Calculates the average value of am Array of numbers.\r\n *\r\n * @param {Float32Array} valueArray - Array of numbers.\r\n * @returns {number} - Number array average.\r\n */\r\nexport function calculateAverage(valueArray) {\r\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\r\n}\r\n\r\n/**\r\n * Calculates a unique hash for a given string similar to Java's\r\n * implementation of String.hashCode()\r\n *\r\n * @param {String} string - String whose hash has to be calculated.\r\n * @returns {number} - Unique hash code calculated.\r\n */\r\nexport function hashString(string) {\r\n    let hash = 0;\r\n\r\n    for (let i = 0; i < string.length; i++) {\r\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\r\n\r\n        /* eslint-disable no-bitwise */\r\n        hash = hash & hash; // Convert to 32bit integer\r\n    }\r\n\r\n    return Math.abs(hash);\r\n}\r\n\r\n/**\r\n * Returns only the positive values from an array of numbers.\r\n *\r\n * @param {Float32Array} valueArray - Array of vad scores.\r\n * @returns {Array} - Array of positive numbers.\r\n */\r\nexport function filterPositiveValues(valueArray) {\r\n    return valueArray.filter(value => value >= 0);\r\n}\r\n\r\n/**\r\n * This class calculates a simple running average that continually changes\r\n * as more data points are collected and added.\r\n */\r\nexport class RunningAverage {\r\n    /**\r\n     * Creates an instance of the running average calculator.\r\n     */\r\n    constructor() {\r\n        this.average = 0;\r\n        this.n = 0;\r\n    }\r\n\r\n    /**\r\n     * Adds a new data point to the existing set of values and recomputes\r\n     * the running average.\r\n     * @param {number} value\r\n     * @returns {void}\r\n     */\r\n    addNext(value) {\r\n        if (typeof value !== 'number') {\r\n            return;\r\n        }\r\n        this.n += 1;\r\n        this.average = this.average + ((value - this.average) / this.n);\r\n    }\r\n\r\n    /**\r\n     * Obtains the average value for the current subset of values.\r\n     * @returns {number} - computed average.\r\n     */\r\n    getAverage() {\r\n        return this.average;\r\n    }\r\n}\r\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nimport UsernameGenerator from '../util/UsernameGenerator';\r\n\r\nlet _callStatsUserName;\r\n\r\nlet _machineId;\r\n\r\n/**\r\n *\r\n */\r\nexport default {\r\n\r\n    /**\r\n     * The storage used to store the settings.\r\n     */\r\n    _storage: jitsiLocalStorage,\r\n\r\n    /**\r\n     * Initializes the Settings class.\r\n     *\r\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\r\n     * used for storing data instead of jitsiLocalStorage if specified.\r\n     */\r\n    init(externalStorage) {\r\n        this._storage = externalStorage || jitsiLocalStorage;\r\n    },\r\n\r\n    /**\r\n     * Returns fake username for callstats\r\n     * @returns {string} fake username for callstats\r\n     */\r\n    get callStatsUserName() {\r\n        if (!_callStatsUserName) {\r\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\r\n            if (!_callStatsUserName) {\r\n                _callStatsUserName = generateCallStatsUserName();\r\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\r\n            }\r\n        }\r\n\r\n        return _callStatsUserName;\r\n    },\r\n\r\n    /**\r\n     * Returns current machine id.\r\n     * @returns {string} machine id\r\n     */\r\n    get machineId() {\r\n        if (!_machineId) {\r\n            _machineId = this._storage.getItem('jitsiMeetId');\r\n            if (!_machineId) {\r\n                _machineId = generateJitsiMeetId();\r\n                this._storage.setItem('jitsiMeetId', _machineId);\r\n            }\r\n        }\r\n\r\n        return _machineId;\r\n    },\r\n\r\n    /**\r\n     * Returns current session id.\r\n     * @returns {string} current session id\r\n     */\r\n    get sessionId() {\r\n        // We may update sessionId in localStorage from another JitsiConference\r\n        // instance and that's why we should always re-read it.\r\n        return this._storage.getItem('sessionId');\r\n    },\r\n\r\n    /**\r\n     * Save current session id.\r\n     * @param {string} sessionId session id\r\n     */\r\n    set sessionId(sessionId) {\r\n        if (sessionId) {\r\n            this._storage.setItem('sessionId', sessionId);\r\n        } else {\r\n            this._storage.removeItem('sessionId');\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Generate fake username for callstats.\r\n * @returns {string} fake random username\r\n */\r\nfunction generateCallStatsUserName() {\r\n    const username = UsernameGenerator.generateUsername();\r\n\r\n    logger.log('generated callstats uid', username);\r\n\r\n    return username;\r\n}\r\n\r\n/**\r\n * Generate unique id.\r\n * @returns {string} random unique id\r\n */\r\nfunction generateJitsiMeetId() {\r\n    const jitsiMeetId = generateUniqueId();\r\n\r\n    logger.log('generated id', jitsiMeetId);\r\n\r\n    return jitsiMeetId;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction generateUniqueId() {\r\n    return _p8() + _p8() + _p8() + _p8();\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction _p8() {\r\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\r\n}\r\n","import * as transform from 'sdp-transform';\r\n\r\n/**\r\n * Parses the primary SSRC of given SSRC group.\r\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\r\n * @return {Number} the primary SSRC number\r\n */\r\nexport function parsePrimarySSRC(group) {\r\n    return parseInt(group.ssrcs.split(' ')[0], 10);\r\n}\r\n\r\n/**\r\n * Parses the secondary SSRC of given SSRC group.\r\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\r\n * @return {Number} the secondary SSRC number\r\n */\r\nexport function parseSecondarySSRC(group) {\r\n    return parseInt(group.ssrcs.split(' ')[1], 10);\r\n}\r\n\r\n/**\r\n * Tells how many distinct SSRCs are contained in given media line.\r\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\r\n * @return {number}\r\n */\r\nfunction _getSSRCCount(mLine) {\r\n    if (!mLine.ssrcs) {\r\n        return 0;\r\n    }\r\n\r\n    return mLine.ssrcs\r\n        .map(ssrcInfo => ssrcInfo.id)\r\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\r\n        .length;\r\n}\r\n\r\n/**\r\n * A wrapper around 'sdp-transform' media description object which provides\r\n * utility methods for common SDP/SSRC related operations.\r\n */\r\nclass MLineWrap {\r\n\r\n    /**\r\n     * Creates new <tt>MLineWrap</t>>\r\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\r\n     * lib.\r\n     */\r\n    constructor(mLine) {\r\n        if (!mLine) {\r\n            throw new Error('mLine is undefined');\r\n        }\r\n\r\n        this.mLine = mLine;\r\n    }\r\n\r\n    /**\r\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\r\n     * one will be preassigned.\r\n     *\r\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\r\n     * objects.\r\n     */\r\n    get ssrcs() {\r\n        if (!this.mLine.ssrcs) {\r\n            this.mLine.ssrcs = [];\r\n        }\r\n\r\n        return this.mLine.ssrcs;\r\n    }\r\n\r\n    /**\r\n     * Setter for the mLine's \"ssrcs\" array.\r\n     *\r\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\r\n     * objects.\r\n     */\r\n    set ssrcs(ssrcs) {\r\n        this.mLine.ssrcs = ssrcs;\r\n    }\r\n\r\n    /**\r\n     * Returns the direction of the underlying media description.\r\n     * @return {string} the media direction name as defined in the SDP.\r\n     */\r\n    get direction() {\r\n        return this.mLine.direction;\r\n    }\r\n\r\n    /**\r\n     * Modifies the direction of the underlying media description.\r\n     * @param {string} direction the new direction to be set\r\n     */\r\n    set direction(direction) {\r\n        this.mLine.direction = direction;\r\n    }\r\n\r\n    /**\r\n     * Exposes the SSRC group array of the underlying media description object.\r\n     * @return {Array.<Object>}\r\n     */\r\n    get ssrcGroups() {\r\n        if (!this.mLine.ssrcGroups) {\r\n            this.mLine.ssrcGroups = [];\r\n        }\r\n\r\n        return this.mLine.ssrcGroups;\r\n    }\r\n\r\n    /**\r\n     * Modifies the SSRC groups array of the underlying media description\r\n     * object.\r\n     * @param {Array.<Object>} ssrcGroups\r\n     */\r\n    set ssrcGroups(ssrcGroups) {\r\n        this.mLine.ssrcGroups = ssrcGroups;\r\n    }\r\n\r\n    /**\r\n     * Obtains value from SSRC attribute.\r\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\r\n     * found\r\n     * @param {string} attrName the name of the SSRC attribute to be found.\r\n     * @return {string|undefined} the value of SSRC attribute or\r\n     * <tt>undefined</tt> if no such attribute exists.\r\n     */\r\n    getSSRCAttrValue(ssrcNumber, attrName) {\r\n        const attribute = this.ssrcs.find(\r\n            ssrcObj => ssrcObj.id === ssrcNumber\r\n            && ssrcObj.attribute === attrName);\r\n\r\n\r\n        return attribute && attribute.value;\r\n    }\r\n\r\n    /**\r\n     * Removes all attributes for given SSRC number.\r\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\r\n     * removed.\r\n     */\r\n    removeSSRC(ssrcNum) {\r\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcs\r\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\r\n    }\r\n\r\n    /**\r\n     * Adds SSRC attribute\r\n     * @param {object} ssrcObj the SSRC attribute object as defined in\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    addSSRCAttribute(ssrcObj) {\r\n        this.ssrcs.push(ssrcObj);\r\n    }\r\n\r\n    /**\r\n     * Finds a SSRC group matching both semantics and SSRCs in order.\r\n     * @param {string} semantics the name of the semantics\r\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\r\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\r\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\r\n     * not found.\r\n     */\r\n    findGroup(semantics, ssrcs) {\r\n        return this.ssrcGroups.find(\r\n            group =>\r\n                group.semantics === semantics\r\n                    && (!ssrcs || ssrcs === group.ssrcs));\r\n    }\r\n\r\n    /**\r\n     * Finds all groups matching given semantic's name.\r\n     * @param {string} semantics the name of the semantics\r\n     * @return {Array.<object>} an array of SSRC group objects as defined by\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    findGroups(semantics) {\r\n        return this.ssrcGroups.filter(\r\n            group => group.semantics === semantics);\r\n    }\r\n\r\n    /**\r\n     * Finds all groups matching given semantic's name and group's primary SSRC.\r\n     * @param {string} semantics the name of the semantics\r\n     * @param {number} primarySSRC the primary SSRC number to be matched\r\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\r\n     */\r\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\r\n        return this.ssrcGroups.find(\r\n            group => group.semantics === semantics\r\n                && parsePrimarySSRC(group) === primarySSRC);\r\n    }\r\n\r\n    /**\r\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\r\n     * the first SSRC object with any 'msid' value.\r\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\r\n     * lib.\r\n     */\r\n    findSSRCByMSID(msid) {\r\n        return this.ssrcs.find(\r\n            ssrcObj => ssrcObj.attribute === 'msid'\r\n                && (msid === null || ssrcObj.value === msid));\r\n    }\r\n\r\n    /**\r\n     * Gets the SSRC count for the underlying media description.\r\n     * @return {number}\r\n     */\r\n    getSSRCCount() {\r\n        return _getSSRCCount(this.mLine);\r\n    }\r\n\r\n    /**\r\n     * Checks whether the underlying media description contains any SSRC groups.\r\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\r\n     * <tt>false</tt> otherwise.\r\n     */\r\n    containsAnySSRCGroups() {\r\n        return this.mLine.ssrcGroups !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Finds the primary video SSRC.\r\n     * @returns {number|undefined} the primary video ssrc\r\n     * @throws Error if the underlying media description is not a video\r\n     */\r\n    getPrimaryVideoSsrc() {\r\n        const mediaType = this.mLine.type;\r\n\r\n        if (mediaType !== 'video') {\r\n            throw new Error(\r\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\r\n        }\r\n\r\n        const numSsrcs = _getSSRCCount(this.mLine);\r\n\r\n        if (numSsrcs === 1) {\r\n            // Not using \"ssrcs\" getter on purpose here\r\n            return this.mLine.ssrcs[0].id;\r\n        }\r\n\r\n        // Look for a SIM, FID, or FEC-FR group\r\n        if (this.mLine.ssrcGroups) {\r\n            const simGroup = this.findGroup('SIM');\r\n\r\n            if (simGroup) {\r\n                return parsePrimarySSRC(simGroup);\r\n            }\r\n            const fidGroup = this.findGroup('FID');\r\n\r\n            if (fidGroup) {\r\n                return parsePrimarySSRC(fidGroup);\r\n            }\r\n            const fecGroup = this.findGroup('FEC-FR');\r\n\r\n            if (fecGroup) {\r\n                return parsePrimarySSRC(fecGroup);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Obtains RTX SSRC from the underlying video description (the\r\n     * secondary SSRC of the first \"FID\" group found)\r\n     * @param {number} primarySsrc the video ssrc for which to find the\r\n     * corresponding rtx ssrc\r\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\r\n     * one)\r\n     */\r\n    getRtxSSRC(primarySsrc) {\r\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\r\n\r\n\r\n        return fidGroup && parseSecondarySSRC(fidGroup);\r\n    }\r\n\r\n    /**\r\n     * Obtains all SSRCs contained in the underlying media description.\r\n     * @return {Array.<number>} an array with all SSRC as numbers.\r\n     */\r\n    getSSRCs() {\r\n        return this.ssrcs\r\n            .map(ssrcInfo => ssrcInfo.id)\r\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\r\n    }\r\n\r\n    /**\r\n     * Obtains primary video SSRCs.\r\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\r\n     * @throws Error if the wrapped media description is not a video.\r\n     */\r\n    getPrimaryVideoSSRCs() {\r\n        const mediaType = this.mLine.type;\r\n\r\n        if (mediaType !== 'video') {\r\n            throw new Error(\r\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\r\n        }\r\n\r\n        const videoSSRCs = this.getSSRCs();\r\n\r\n        for (const ssrcGroupInfo of this.ssrcGroups) {\r\n            // Right now, FID and FEC-FR groups are the only ones we parse to\r\n            // disqualify streams.  If/when others arise we'll\r\n            // need to add support for them here\r\n            if (ssrcGroupInfo.semantics === 'FID'\r\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\r\n                // secondary streams should be filtered out\r\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\r\n\r\n                videoSSRCs.splice(\r\n                    videoSSRCs.indexOf(secondarySsrc), 1);\r\n            }\r\n        }\r\n\r\n        return videoSSRCs;\r\n    }\r\n\r\n    /**\r\n     * Dumps all SSRC groups of this media description to JSON.\r\n     */\r\n    dumpSSRCGroups() {\r\n        return JSON.stringify(this.mLine.ssrcGroups);\r\n    }\r\n\r\n    /**\r\n     * Removes all SSRC groups which contain given SSRC number at any position.\r\n     * @param {number} ssrc the SSRC for which all matching groups are to be\r\n     * removed.\r\n     */\r\n    removeGroupsWithSSRC(ssrc) {\r\n        if (!this.mLine.ssrcGroups) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\r\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\r\n    }\r\n\r\n    /**\r\n     * Removes groups that match given semantics.\r\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\r\n     */\r\n    removeGroupsBySemantics(semantics) {\r\n        if (!this.mLine.ssrcGroups) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcGroups\r\n            = this.mLine.ssrcGroups\r\n                .filter(groupInfo => groupInfo.semantics !== semantics);\r\n    }\r\n\r\n    /**\r\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\r\n     * @param {number} oldSSRC the old SSRC number\r\n     * @param {number} newSSRC the new SSRC number\r\n     */\r\n    replaceSSRC(oldSSRC, newSSRC) {\r\n        if (this.mLine.ssrcs) {\r\n            this.mLine.ssrcs.forEach(ssrcInfo => {\r\n                if (ssrcInfo.id === oldSSRC) {\r\n                    ssrcInfo.id = newSSRC;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds given SSRC group to this media description.\r\n     * @param {object} group the SSRC group object as defined by\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    addSSRCGroup(group) {\r\n        this.ssrcGroups.push(group);\r\n    }\r\n}\r\n\r\n/**\r\n * Utility class for SDP manipulation using the 'sdp-transform' library.\r\n *\r\n * Typical use usage scenario:\r\n *\r\n * const transformer = new SdpTransformWrap(rawSdp);\r\n * const videoMLine = transformer.selectMedia('video);\r\n * if (videoMLine) {\r\n *     videoMLiner.addSSRCAttribute({\r\n *         id: 2342343,\r\n *         attribute: \"cname\",\r\n *         value: \"someCname\"\r\n *     });\r\n *     rawSdp = transformer.toRawSdp();\r\n * }\r\n */\r\nexport class SdpTransformWrap {\r\n\r\n    /**\r\n     * Creates new instance and parses the raw SDP into objects using\r\n     * 'sdp-transform' lib.\r\n     * @param {string} rawSDP the SDP in raw text format.\r\n     */\r\n    constructor(rawSDP) {\r\n        this.parsedSDP = transform.parse(rawSDP);\r\n    }\r\n\r\n    /**\r\n     * Selects the first media SDP of given name.\r\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\r\n     * 'data'.\r\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\r\n     * line or <tt>null</tt> if not found. The object returned references\r\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\r\n     * (it's not a copy).\r\n     */\r\n    selectMedia(mediaType) {\r\n        const selectedMLine\r\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\r\n\r\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\r\n    }\r\n\r\n    /**\r\n     * Converts the currently stored SDP state in this instance to raw text SDP\r\n     * format.\r\n     * @return {string}\r\n     */\r\n    toRawSDP() {\r\n        return transform.write(this.parsedSDP);\r\n    }\r\n}\r\n","/**\r\n * Indicates that the local connection statistics were updated.\r\n */\r\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\r\n\r\n/**\r\n * Indicates that the connection statistics for a particular remote participant\r\n * were updated.\r\n */\r\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\r\n","export const SignalingEvents = {\r\n    /**\r\n     * Event triggered when participant's muted status changes.\r\n     *\r\n     * @param {string} endpointId the track owner's identifier (MUC nickname)\r\n     * @param {MediaType} mediaType \"audio\" or \"video\"\r\n     * @param {boolean} isMuted the new muted state\r\n     */\r\n    PEER_MUTED_CHANGED : 'signaling.peerMuted',\r\n\r\n    /**\r\n     * Event triggered when participant's video type changes.\r\n     *\r\n     * @param {string} endpointId the video owner's ID (MUC nickname)\r\n     * @param {VideoType} videoType the new value\r\n     */\r\n    PEER_VIDEO_TYPE_CHANGED : 'signaling.peerVideoType',\r\n\r\n    /**\r\n     * Event triggered when source's muted status changes.\r\n     *\r\n     * @param {string} sourceName - The name of the source.\r\n     * @param {boolean} isMuted - The new muted state.\r\n     */\r\n    SOURCE_MUTED_CHANGED : 'signaling.sourceMuted',\r\n\r\n    /**\r\n     * Event triggered when source's video type changes.\r\n     *\r\n     * @param {string} source - The name of the source.\r\n     * @param {VideoType} videoType - The new value.\r\n     */\r\n    SOURCE_VIDEO_TYPE_CHANGED : 'signaling.sourceVideoType'\r\n}\r\n\r\n// exported for backward compatibility\r\nexport const PEER_MUTED_CHANGED = SignalingEvents.PEER_MUTED_CHANGED;\r\nexport const PEER_VIDEO_TYPE_CHANGED = SignalingEvents.PEER_VIDEO_TYPE_CHANGED;\r\nexport const SOURCE_MUTED_CHANGED = SignalingEvents.SOURCE_MUTED_CHANGED;\r\nexport const SOURCE_VIDEO_TYPE_CHANGED = SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED;","/**\r\n * The pending Jingle session state which means the session as defined in\r\n * XEP-0166(before 'session-invite/session-accept' took place).\r\n *\r\n * @type {string}\r\n */\r\nexport const PENDING = 'pending';\r\n\r\n/**\r\n * The active Jingle session state as defined in XEP-0166\r\n * (after 'session-invite'/'session-accept').\r\n *\r\n * @type {string}\r\n */\r\nexport const ACTIVE = 'active';\r\n\r\n/**\r\n * The ended Jingle session state as defined in XEP-0166\r\n * (after 'session-terminate').\r\n * @type {string}\r\n */\r\nexport const ENDED = 'ended';\r\n","/**\r\n * The know jingle actions that can be sent and should be acted upon by\r\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\r\n */\r\nexport const ACTIONS = {\r\n    ACCEPT: 'session-accept',\r\n    CONNECTION_ERROR: 'connection-error-encountered',\r\n    INITIATE: 'session-initiate',\r\n    TERMINATE: 'session-terminate',\r\n    TRANSPORT_INFO: 'transport-info',\r\n    UNAVAILABLE: 'unavailable'\r\n};\r\n","const Resolutions = {\r\n    '1080': {\r\n        width: 1920,\r\n        height: 1080,\r\n        order: 8\r\n    },\r\n    'fullhd': {\r\n        width: 1920,\r\n        height: 1080,\r\n        order: 8\r\n    },\r\n    '720': {\r\n        width: 1280,\r\n        height: 720,\r\n        order: 7\r\n    },\r\n    'hd': {\r\n        width: 1280,\r\n        height: 720,\r\n        order: 7\r\n    },\r\n    '960': {\r\n        width: 960,\r\n        height: 720,\r\n        order: 6\r\n    },\r\n    '540': {\r\n        width: 960,\r\n        height: 540,\r\n        order: 5\r\n    },\r\n    'qhd': {\r\n        width: 960,\r\n        height: 540,\r\n        order: 5\r\n    },\r\n\r\n    // 16:9 resolution first.\r\n    '360': {\r\n        width: 640,\r\n        height: 360,\r\n        order: 4\r\n    },\r\n    '640': {\r\n        width: 640,\r\n        height: 480,\r\n        order: 3\r\n    },\r\n    'vga': {\r\n        width: 640,\r\n        height: 480,\r\n        order: 3\r\n    },\r\n\r\n    // 16:9 resolution first.\r\n    '180': {\r\n        width: 320,\r\n        height: 180,\r\n        order: 2\r\n    },\r\n    '320': {\r\n        width: 320,\r\n        height: 240,\r\n        order: 1\r\n    }\r\n};\r\n\r\nmodule.exports = Resolutions;\r\n","/* global callstats */\r\n\r\nimport browser from '../browser';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * We define enumeration of wrtcFuncNames as we need them before\r\n * callstats is initialized to queue events.\r\n * @const\r\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\r\n */\r\nconst wrtcFuncNames = {\r\n    createOffer: 'createOffer',\r\n    createAnswer: 'createAnswer',\r\n    setLocalDescription: 'setLocalDescription',\r\n    setRemoteDescription: 'setRemoteDescription',\r\n    addIceCandidate: 'addIceCandidate',\r\n    getUserMedia: 'getUserMedia',\r\n    iceConnectionFailure: 'iceConnectionFailure',\r\n    signalingError: 'signalingError',\r\n    applicationLog: 'applicationLog'\r\n};\r\n\r\n/**\r\n * We define enumeration of fabricEvent as we need them before\r\n * callstats is initialized to queue events.\r\n * @const\r\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\r\n */\r\nconst fabricEvent = {\r\n    fabricHold: 'fabricHold',\r\n    fabricResume: 'fabricResume',\r\n    audioMute: 'audioMute',\r\n    audioUnmute: 'audioUnmute',\r\n    videoPause: 'videoPause',\r\n    videoResume: 'videoResume',\r\n    fabricUsageEvent: 'fabricUsageEvent',\r\n    fabricStats: 'fabricStats',\r\n    fabricTerminated: 'fabricTerminated',\r\n    screenShareStart: 'screenShareStart',\r\n    screenShareStop: 'screenShareStop',\r\n    dominantSpeaker: 'dominantSpeaker',\r\n    activeDeviceList: 'activeDeviceList'\r\n};\r\n\r\n/**\r\n * The user id to report to callstats as destination.\r\n * @type {string}\r\n */\r\nconst DEFAULT_REMOTE_USER = 'jitsi';\r\n\r\n/**\r\n * Type of pending reports, can be event or an error.\r\n * @type {{ERROR: string, EVENT: string}}\r\n */\r\nconst reportType = {\r\n    ERROR: 'error',\r\n    EVENT: 'event',\r\n    MST_WITH_USERID: 'mstWithUserID'\r\n};\r\n\r\n/**\r\n * Set of currently existing {@link CallStats} instances.\r\n * @type {Set<CallStats>}\r\n */\r\nlet _fabrics;\r\n\r\n/**\r\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\r\n * reports one peer connection the the CallStats backend and is allocated with\r\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\r\n * reporting various events. A fabric is considered disposed when\r\n * {@link CallStats.sendTerminateEvent} is executed.\r\n *\r\n * Currently only one backend instance can be created ever and it's done using\r\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\r\n * explicitly shutdown the backend, but it's supposed to close it's connection\r\n * automatically, after all fabrics have been terminated.\r\n */\r\nexport default class CallStats {\r\n    /**\r\n     * A callback passed to {@link callstats.addNewFabric}.\r\n     * @param {string} error 'success' means ok\r\n     * @param {string} msg some more details\r\n     * @private\r\n     */\r\n    static _addNewFabricCallback(error, msg) {\r\n        if (CallStats.backend && error !== 'success') {\r\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback passed to {@link callstats.initialize} (backend initialization)\r\n     * @param {string} error 'success' means ok\r\n     * @param {String} msg\r\n     * @private\r\n     */\r\n    static _initCallback(error, msg) {\r\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\r\n\r\n        // there is no lib, nothing to report to\r\n        if (error !== 'success') {\r\n            return;\r\n        }\r\n\r\n        CallStats.backendInitialized = true;\r\n\r\n        // I hate that\r\n        let atLeastOneFabric = false;\r\n        let defaultInstance = null;\r\n\r\n        for (const callStatsInstance of CallStats.fabrics.values()) {\r\n            if (!callStatsInstance.hasFabric) {\r\n                logger.debug('addNewFabric - initCallback');\r\n                if (callStatsInstance._addNewFabric()) {\r\n                    atLeastOneFabric = true;\r\n                    if (!defaultInstance) {\r\n                        defaultInstance = callStatsInstance;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!atLeastOneFabric) {\r\n            return;\r\n        }\r\n\r\n        CallStats._emptyReportQueue(defaultInstance);\r\n    }\r\n\r\n    /**\r\n     * Empties report queue.\r\n     *\r\n     * @param {CallStats} csInstance - The callstats instance.\r\n     * @private\r\n     */\r\n    static _emptyReportQueue(csInstance) {\r\n        // There is no conference ID nor a PeerConnection available when some of\r\n        // the events are scheduled on the reportsQueue, so those will be\r\n        // reported on the first initialized fabric.\r\n        const defaultConfID = csInstance.confID;\r\n        const defaultPC = csInstance.peerconnection;\r\n\r\n        // notify callstats about failures if there were any\r\n        for (const report of CallStats.reportsQueue) {\r\n            if (report.type === reportType.ERROR) {\r\n                const errorData = report.data;\r\n\r\n                CallStats._reportError(\r\n                    csInstance,\r\n                    errorData.type,\r\n                    errorData.error,\r\n                    errorData.pc || defaultPC);\r\n            } else if (report.type === reportType.EVENT) {\r\n                // if we have and event to report and we failed to add\r\n                // fabric this event will not be reported anyway, returning\r\n                // an error\r\n                const eventData = report.data;\r\n\r\n                CallStats.backend.sendFabricEvent(\r\n                    report.pc || defaultPC,\r\n                    eventData.event,\r\n                    defaultConfID,\r\n                    eventData.eventData);\r\n            } else if (report.type === reportType.MST_WITH_USERID) {\r\n                const data = report.data;\r\n\r\n                CallStats.backend.associateMstWithUserID(\r\n                    report.pc || defaultPC,\r\n                    data.callStatsId,\r\n                    defaultConfID,\r\n                    data.ssrc,\r\n                    data.usageLabel,\r\n                    data.containerId\r\n                );\r\n            }\r\n        }\r\n        CallStats.reportsQueue.length = 0;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Reports an error to callstats.\r\n     *\r\n     * @param {CallStats} [cs]\r\n     * @param type the type of the error, which will be one of the wrtcFuncNames\r\n     * @param error the error\r\n     * @param pc the peerconnection\r\n     * @private\r\n     */\r\n    static _reportError(cs, type, error, pc) {\r\n        let _error = error;\r\n\r\n        if (!_error) {\r\n            logger.warn('No error is passed!');\r\n            _error = new Error('Unknown error');\r\n        }\r\n        if (CallStats.backendInitialized && cs) {\r\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                type: reportType.ERROR,\r\n                data: {\r\n                    error: _error,\r\n                    pc,\r\n                    type\r\n                }\r\n            });\r\n        }\r\n\r\n        // else just ignore it\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Reports an error to callstats.\r\n     *\r\n     * @param {CallStats} cs\r\n     * @param event the type of the event, which will be one of the fabricEvent\r\n     * @param eventData additional data to pass to event\r\n     * @private\r\n     */\r\n    static _reportEvent(cs, event, eventData) {\r\n        const pc = cs && cs.peerconnection;\r\n        const confID = cs && cs.confID;\r\n\r\n        if (CallStats.backendInitialized && cs) {\r\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                confID,\r\n                pc,\r\n                type: reportType.EVENT,\r\n                data: { event,\r\n                    eventData }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wraps some of the CallStats API method and logs their calls with\r\n     * arguments on the debug logging level. Also wraps some of the backend\r\n     * methods execution into try catch blocks to not crash the app in case\r\n     * there is a problem with the backend itself.\r\n     * @param {callstats} theBackend\r\n     * @private\r\n     */\r\n    static _traceAndCatchBackendCalls(theBackend) {\r\n        const tryCatchMethods = [\r\n            'associateMstWithUserID',\r\n            'sendFabricEvent',\r\n            'sendUserFeedback'\r\n\r\n            // 'reportError', - this one needs special handling - see code below\r\n        ];\r\n\r\n        for (const methodName of tryCatchMethods) {\r\n            const originalMethod = theBackend[methodName];\r\n\r\n            theBackend[methodName] = function(...theArguments) {\r\n                try {\r\n                    return originalMethod.apply(theBackend, theArguments);\r\n                } catch (e) {\r\n                    GlobalOnErrorHandler.callErrorHandler(e);\r\n                }\r\n            };\r\n        }\r\n        const debugMethods = [\r\n            'associateMstWithUserID',\r\n            'sendFabricEvent',\r\n            'sendUserFeedback'\r\n\r\n            // 'reportError', - this one needs special handling - see code below\r\n        ];\r\n\r\n        for (const methodName of debugMethods) {\r\n            const originalMethod = theBackend[methodName];\r\n\r\n            theBackend[methodName] = function(...theArguments) {\r\n                logger.debug(methodName, theArguments);\r\n                originalMethod.apply(theBackend, theArguments);\r\n            };\r\n        }\r\n        const originalReportError = theBackend.reportError;\r\n\r\n        /* eslint-disable max-params */\r\n        theBackend.reportError = function(pc, cs, type, ...args) {\r\n            // Logs from the logger are submitted on the applicationLog event\r\n            // \"type\". Logging the arguments on the logger will create endless\r\n            // loop, because it will put all the logs to the logger queue again.\r\n            if (type === wrtcFuncNames.applicationLog) {\r\n                // NOTE otherArguments are not logged to the console on purpose\r\n                // to not log the whole log batch\r\n                // FIXME check the current logging level (currently not exposed\r\n                // by the logger implementation)\r\n                // NOTE it is not safe to log whole objects on react-native as\r\n                // those contain too many circular references and may crash\r\n                // the app.\r\n                if (!browser.isReactNative()) {\r\n                    console && console.debug('reportError', pc, cs, type);\r\n                }\r\n            } else {\r\n                logger.debug('reportError', pc, cs, type, ...args);\r\n            }\r\n            try {\r\n                originalReportError.call(theBackend, pc, cs, type, ...args);\r\n            } catch (exception) {\r\n                if (type === wrtcFuncNames.applicationLog) {\r\n                    console && console.error('reportError', exception);\r\n                } else {\r\n                    GlobalOnErrorHandler.callErrorHandler(exception);\r\n                }\r\n            }\r\n        };\r\n\r\n        /* eslint-enable max-params */\r\n    }\r\n\r\n    /**\r\n     * Returns the Set with the currently existing {@link CallStats} instances.\r\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\r\n     * @type {Set<CallStats>}\r\n     */\r\n    static get fabrics() {\r\n        if (!_fabrics) {\r\n            _fabrics = new Set();\r\n        }\r\n\r\n        return _fabrics;\r\n    }\r\n\r\n    /**\r\n     * Initializes the CallStats backend. Should be called only if\r\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\r\n     * @param {object} options\r\n     * @param {String} options.callStatsID CallStats credentials - ID\r\n     * @param {String} options.callStatsSecret CallStats credentials - secret\r\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\r\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\r\n     * @param {string} options.userName the <tt>userName</tt> part of\r\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\r\n     *\r\n     */\r\n    static initBackend(options) {\r\n        if (CallStats.backend) {\r\n            throw new Error('CallStats backend has been initialized already!');\r\n        }\r\n        try {\r\n            const CallStatsBackend = callstats;\r\n\r\n            CallStats.backend = new CallStatsBackend();\r\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\r\n            CallStats.userID = {\r\n                aliasName: options.aliasName,\r\n                userName: options.userName\r\n            };\r\n            CallStats.callStatsID = options.callStatsID;\r\n            CallStats.callStatsSecret = options.callStatsSecret;\r\n\r\n            let configParams;\r\n\r\n            if (options.applicationName) {\r\n                configParams = {\r\n                    applicationVersion:\r\n                        `${options.applicationName} (${\r\n                            browser.getName()})`\r\n                };\r\n            }\r\n\r\n            if (options.confID) {\r\n                // we first check is there a tenant in the confID\r\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\r\n\r\n                // if there is no tenant, we will just set '/'\r\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\r\n            }\r\n\r\n            // userID is generated or given by the origin server\r\n            CallStats.backend.initialize(\r\n                CallStats.callStatsID,\r\n                CallStats.callStatsSecret,\r\n                CallStats.userID,\r\n                CallStats._initCallback,\r\n                undefined,\r\n                configParams);\r\n\r\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\r\n\r\n            if (getWiFiStatsMethod) {\r\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\r\n\r\n                getWiFiStatsMethod().then(result => {\r\n                    if (result) {\r\n                        logger.info('Reported wifi addresses:'\r\n                            , JSON.parse(result).addresses);\r\n                    }\r\n                })\r\n                .catch(() => {});// eslint-disable-line no-empty-function\r\n            }\r\n\r\n            return true;\r\n        } catch (e) {\r\n            // The callstats.io API failed to initialize (e.g. because its\r\n            // download did not succeed in general or on time). Further attempts\r\n            // to utilize it cannot possibly succeed.\r\n            GlobalOnErrorHandler.callErrorHandler(e);\r\n            CallStats.backend = null;\r\n            logger.error(e);\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the CallStats backend has been created. It does not mean that\r\n     * it has been initialized, but only that the API instance has been\r\n     * allocated successfully.\r\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\r\n     * otherwise\r\n     */\r\n    static isBackendInitialized() {\r\n        return Boolean(CallStats.backend);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats about active device.\r\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\r\n     * their data\r\n     * @param {CallStats} cs callstats instance related to the event\r\n     */\r\n    static sendActiveDeviceListEvent(devicesData, cs) {\r\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that there is a log we want to report.\r\n     *\r\n     * @param {Error} e error to send or {String} message\r\n     * @param {CallStats} cs callstats instance related to the error (optional)\r\n     */\r\n    static sendApplicationLog(e, cs) {\r\n        try {\r\n            CallStats._reportError(\r\n                cs,\r\n                wrtcFuncNames.applicationLog,\r\n                e,\r\n                cs && cs.peerconnection);\r\n        } catch (error) {\r\n            // If sendApplicationLog fails it should not be printed to\r\n            // the logger, because it will try to push the logs again\r\n            // (through sendApplicationLog) and an endless loop is created.\r\n            if (console && (typeof console.error === 'function')) {\r\n                // FIXME send analytics event as well\r\n                console.error('sendApplicationLog failed', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the given feedback through CallStats.\r\n     *\r\n     * @param {string} conferenceID the conference ID for which the feedback\r\n     * will be reported.\r\n     * @param overall an integer between 1 and 5 indicating the\r\n     * user feedback\r\n     * @param comment detailed feedback from the user.\r\n     */\r\n    static sendFeedback(conferenceID, overall, comment) {\r\n        return new Promise((resolve, reject) => {\r\n            if (CallStats.backend) {\r\n                CallStats.backend.sendUserFeedback(\r\n                    conferenceID,\r\n                    {\r\n                        userID: CallStats.userID,\r\n                        overall,\r\n                        comment\r\n                    },\r\n                    (status, message) => {\r\n                        if (status === 'success') {\r\n                            resolve(message);\r\n                        } else {\r\n                            reject(message);\r\n                        }\r\n                    });\r\n            } else {\r\n                const reason = 'Failed to submit feedback to CallStats - no backend';\r\n\r\n                logger.error(reason);\r\n                reject(reason);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that getUserMedia failed.\r\n     *\r\n     * @param {Error} e error to send\r\n     * @param {CallStats} cs callstats instance related to the error (optional)\r\n     */\r\n    static sendGetUserMediaFailed(e, cs) {\r\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for mute events\r\n     * @param mute {boolean} true for muted and false for not muted\r\n     * @param type {String} \"audio\"/\"video\"\r\n     * @param {CallStats} cs callstats instance related to the event\r\n     */\r\n    static sendMuteEvent(mute, type, cs) {\r\n        let event;\r\n\r\n        if (type === 'video') {\r\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\r\n        } else {\r\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\r\n        }\r\n\r\n        CallStats._reportEvent(cs, event);\r\n    }\r\n\r\n    /**\r\n     * Creates new CallStats instance that handles all callstats API calls for\r\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\r\n     * one CallStats fabric added with 'addFabric' API method for the\r\n     * {@link TraceablePeerConnection} instance passed in the constructor.\r\n     * @param {TraceablePeerConnection} tpc\r\n     * @param {Object} options\r\n     * @param {string} options.confID the conference ID that wil be used to\r\n     * report the session.\r\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\r\n     * which given <tt>tpc</tt> is connected.\r\n     */\r\n    constructor(tpc, options) {\r\n        this.confID = options.confID;\r\n        this.tpc = tpc;\r\n        this.peerconnection = tpc.peerconnection;\r\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\r\n        this.hasFabric = false;\r\n\r\n        CallStats.fabrics.add(this);\r\n\r\n        if (CallStats.backendInitialized) {\r\n            this._addNewFabric();\r\n\r\n            // if this is the first fabric let's try to empty the\r\n            // report queue. Reports all events that we recorded between\r\n            // backend initialization and receiving the first fabric\r\n            if (CallStats.fabrics.size === 1) {\r\n                CallStats._emptyReportQueue(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\r\n     * the peer connection associated with this instance.\r\n     * @return {boolean} true if the call was successful or false otherwise.\r\n     */\r\n    _addNewFabric() {\r\n        logger.info('addNewFabric', this.remoteUserID);\r\n        try {\r\n            const fabricAttributes = {\r\n                remoteEndpointType:\r\n                    this.tpc.isP2P\r\n                        ? CallStats.backend.endpointType.peer\r\n                        : CallStats.backend.endpointType.server\r\n            };\r\n            const ret\r\n                = CallStats.backend.addNewFabric(\r\n                    this.peerconnection,\r\n                    this.remoteUserID,\r\n                    CallStats.backend.fabricUsage.multiplex,\r\n                    this.confID,\r\n                    fabricAttributes,\r\n                    CallStats._addNewFabricCallback);\r\n\r\n            this.hasFabric = true;\r\n\r\n            const success = ret.status === 'success';\r\n\r\n            if (!success) {\r\n                logger.error('callstats fabric not initilized', ret.message);\r\n            }\r\n\r\n            return success;\r\n\r\n        } catch (error) {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Lets CallStats module know where is given SSRC rendered by providing\r\n     * renderer tag ID.\r\n     * If the lib is not initialized yet queue the call for later, when it's\r\n     * ready.\r\n     * @param {number} ssrc the SSRC of the stream\r\n     * @param {boolean} isLocal indicates whether this the stream is local\r\n     * @param {string|null} streamEndpointId if the stream is not local the it\r\n     * needs to contain the stream owner's ID\r\n     * @param {string} usageLabel meaningful usage label of this stream like\r\n     *        'microphone', 'camera' or 'screen'.\r\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\r\n     *        renders the stream.\r\n     */\r\n    associateStreamWithVideoTag(\r\n            ssrc,\r\n            isLocal,\r\n            streamEndpointId,\r\n            usageLabel,\r\n            containerId) {\r\n        if (!CallStats.backend) {\r\n            return;\r\n        }\r\n\r\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\r\n\r\n        if (CallStats.backendInitialized) {\r\n            CallStats.backend.associateMstWithUserID(\r\n                this.peerconnection,\r\n                callStatsId,\r\n                this.confID,\r\n                ssrc,\r\n                usageLabel,\r\n                containerId);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                type: reportType.MST_WITH_USERID,\r\n                pc: this.peerconnection,\r\n                data: {\r\n                    callStatsId,\r\n                    containerId,\r\n                    ssrc,\r\n                    usageLabel\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Notifies CallStats that we are the new dominant speaker in the\r\n     * conference.\r\n     */\r\n    sendDominantSpeakerEvent() {\r\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that the fabric for the underlying peerconnection was\r\n     * closed and no evens should be reported, after this call.\r\n     */\r\n    sendTerminateEvent() {\r\n        if (CallStats.backendInitialized) {\r\n            CallStats.backend.sendFabricEvent(\r\n                this.peerconnection,\r\n                CallStats.backend.fabricEvent.fabricTerminated,\r\n                this.confID);\r\n        }\r\n        CallStats.fabrics.delete(this);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for ice connection failed\r\n     */\r\n    sendIceConnectionFailedEvent() {\r\n        CallStats._reportError(\r\n            this,\r\n            wrtcFuncNames.iceConnectionFailure,\r\n            null,\r\n            this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to create offer.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendCreateOfferFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to create answer.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendCreateAnswerFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Sends either resume or hold event for the fabric associated with\r\n     * the underlying peerconnection.\r\n     * @param {boolean} isResume true to resume or false to hold\r\n     */\r\n    sendResumeOrHoldEvent(isResume) {\r\n        CallStats._reportEvent(\r\n            this,\r\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for screen sharing events\r\n     * @param {boolean} start true for starting screen sharing and\r\n     * false for not stopping\r\n     * @param {string|null} ssrc - optional ssrc value, used only when\r\n     * starting screen sharing.\r\n     */\r\n    sendScreenSharingEvent(start, ssrc) {\r\n        let eventData;\r\n\r\n        if (ssrc) {\r\n            eventData = { ssrc };\r\n        }\r\n\r\n        CallStats._reportEvent(\r\n            this,\r\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\r\n            eventData);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to set local description.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendSetLocalDescFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to set remote description.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendSetRemoteDescFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to add ICE candidate.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendAddIceCandidateFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\r\n    }\r\n}\r\n\r\n/**\r\n * The CallStats API backend instance\r\n * @type {callstats}\r\n */\r\nCallStats.backend = null;\r\n\r\n// some errors/events may happen before CallStats init\r\n// in this case we accumulate them in this array\r\n// and send them to callstats on init\r\nCallStats.reportsQueue = [];\r\n\r\n/**\r\n * Whether the library was successfully initialized(the backend) using its\r\n * initialize method.\r\n * @type {boolean}\r\n */\r\nCallStats.backendInitialized = false;\r\n\r\n/**\r\n * Part of the CallStats credentials - application ID\r\n * @type {string}\r\n */\r\nCallStats.callStatsID = null;\r\n\r\n/**\r\n * Part of the CallStats credentials - application secret\r\n * @type {string}\r\n */\r\nCallStats.callStatsSecret = null;\r\n\r\n/**\r\n * Local CallStats user ID structure. Can be set only once when\r\n * {@link backend} is initialized, so it's static for the time being.\r\n * See CallStats API for more info:\r\n * https://www.callstats.io/api/#userid\r\n * @type {object}\r\n */\r\nCallStats.userID = null;\r\n","import Listenable from '../util/Listenable';\r\n\r\n/**\r\n * Creates ConnectionPlugin class that extends the passed class.\r\n * @param {Class} base the definition of the class that will be extended by\r\n * ConnectionPlugin\r\n */\r\nfunction getConnectionPluginDefinition(base = class {}) {\r\n    /**\r\n     * Base class for strophe connection plugins.\r\n     */\r\n    return class extends base {\r\n        /**\r\n         *\r\n         */\r\n        constructor(...args) {\r\n            super(...args);\r\n            this.connection = null;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param connection\r\n         */\r\n        init(connection) {\r\n            this.connection = connection;\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * ConnectionPlugin class.\r\n */\r\nexport default getConnectionPluginDefinition();\r\n\r\n/**\r\n * ConnectionPlugin class that extends Listenable.\r\n */\r\nexport const ConnectionPluginListenable\r\n    = getConnectionPluginDefinition(Listenable);\r\n","/**\r\n * @const\r\n */\r\nconst ALPHANUM\r\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n/**\r\n * Hexadecimal digits.\r\n * @const\r\n */\r\nconst HEX_DIGITS = '0123456789abcdef';\r\n\r\n/**\r\n * Generates random int within the range [min, max]\r\n * @param min the minimum value for the generated number\r\n * @param max the maximum value for the generated number\r\n * @returns random int number\r\n */\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * Get random element from array or string.\r\n * @param {Array|string} arr source\r\n * @returns array element or string character\r\n */\r\nfunction randomElement(arr) {\r\n    return arr[randomInt(0, arr.length - 1)];\r\n}\r\n\r\n/**\r\n * Generate random alphanumeric string.\r\n * @param {number} length expected string length\r\n * @returns {string} random string of specified length\r\n */\r\nfunction randomAlphanumStr(length) {\r\n    let result = '';\r\n\r\n    for (let i = 0; i < length; i += 1) {\r\n        result += randomElement(ALPHANUM);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Exported interface.\r\n */\r\nconst RandomUtil = {\r\n    /**\r\n     * Returns a random hex digit.\r\n     * @returns {*}\r\n     */\r\n    randomHexDigit() {\r\n        return randomElement(HEX_DIGITS);\r\n    },\r\n\r\n    /**\r\n     * Returns a random string of hex digits with length 'len'.\r\n     * @param len the length.\r\n     */\r\n    randomHexString(len) {\r\n        let ret = '';\r\n\r\n        while (len--) { // eslint-disable-line no-param-reassign\r\n            ret += this.randomHexDigit();\r\n        }\r\n\r\n        return ret;\r\n    },\r\n    randomElement,\r\n    randomAlphanumStr,\r\n    randomInt\r\n};\r\n\r\nmodule.exports = RandomUtil;\r\n","/**\r\n * The errors for the connection.\r\n */\r\n\r\n/**\r\n * Indicates that the connection was dropped with an error which was most likely\r\n * caused by some networking issues. The dropped term in this context means that\r\n * the connection was closed unexpectedly (not on user's request).\r\n *\r\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\r\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\r\n * could also happen when BOSH request is sent to the server with the session-id\r\n * that is not know to the server. But this should not happen in lib-jitsi-meet\r\n * case as long as the service is configured correctly (there is no bug).\r\n */\r\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\r\n\r\n/**\r\n * Not specified errors.\r\n */\r\nexport const OTHER_ERROR = 'connection.otherError';\r\n\r\n/**\r\n * Indicates that a password is required in order to join the conference.\r\n */\r\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\r\n\r\n/**\r\n * Indicates that the connection was dropped, because of too many 5xx HTTP\r\n * errors on BOSH requests.\r\n */\r\nexport const SERVER_ERROR = 'connection.serverError';\r\n","/**\r\n * lodash (Custom Build) <https://lodash.com/>\r\n * Build: `lodash modularize exports=\"npm\" -o ./`\r\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\r\n * Released under MIT license <https://lodash.com/license>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n */\r\n\r\n/** Used as the size to enable large array optimizations. */\r\nvar LARGE_ARRAY_SIZE = 200;\r\n\r\n/** Used to stand-in for `undefined` hash values. */\r\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n/** `Object#toString` result references. */\r\nvar argsTag = '[object Arguments]',\r\n    arrayTag = '[object Array]',\r\n    boolTag = '[object Boolean]',\r\n    dateTag = '[object Date]',\r\n    errorTag = '[object Error]',\r\n    funcTag = '[object Function]',\r\n    genTag = '[object GeneratorFunction]',\r\n    mapTag = '[object Map]',\r\n    numberTag = '[object Number]',\r\n    objectTag = '[object Object]',\r\n    promiseTag = '[object Promise]',\r\n    regexpTag = '[object RegExp]',\r\n    setTag = '[object Set]',\r\n    stringTag = '[object String]',\r\n    symbolTag = '[object Symbol]',\r\n    weakMapTag = '[object WeakMap]';\r\n\r\nvar arrayBufferTag = '[object ArrayBuffer]',\r\n    dataViewTag = '[object DataView]',\r\n    float32Tag = '[object Float32Array]',\r\n    float64Tag = '[object Float64Array]',\r\n    int8Tag = '[object Int8Array]',\r\n    int16Tag = '[object Int16Array]',\r\n    int32Tag = '[object Int32Array]',\r\n    uint8Tag = '[object Uint8Array]',\r\n    uint8ClampedTag = '[object Uint8ClampedArray]',\r\n    uint16Tag = '[object Uint16Array]',\r\n    uint32Tag = '[object Uint32Array]';\r\n\r\n/**\r\n * Used to match `RegExp`\r\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\r\n */\r\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\r\n\r\n/** Used to match `RegExp` flags from their coerced string values. */\r\nvar reFlags = /\\w*$/;\r\n\r\n/** Used to detect host constructors (Safari). */\r\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\r\n\r\n/** Used to detect unsigned integer values. */\r\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n/** Used to identify `toStringTag` values supported by `_.clone`. */\r\nvar cloneableTags = {};\r\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\r\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\r\ncloneableTags[boolTag] = cloneableTags[dateTag] =\r\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\r\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\r\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\r\ncloneableTags[numberTag] = cloneableTags[objectTag] =\r\ncloneableTags[regexpTag] = cloneableTags[setTag] =\r\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\r\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\r\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\r\ncloneableTags[errorTag] = cloneableTags[funcTag] =\r\ncloneableTags[weakMapTag] = false;\r\n\r\n/** Detect free variable `global` from Node.js. */\r\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\r\n\r\n/** Detect free variable `self`. */\r\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n\r\n/** Used as a reference to the global object. */\r\nvar root = freeGlobal || freeSelf || Function('return this')();\r\n\r\n/** Detect free variable `exports`. */\r\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\r\n\r\n/** Detect free variable `module`. */\r\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\r\n\r\n/** Detect the popular CommonJS extension `module.exports`. */\r\nvar moduleExports = freeModule && freeModule.exports === freeExports;\r\n\r\n/**\r\n * Adds the key-value `pair` to `map`.\r\n *\r\n * @private\r\n * @param {Object} map The map to modify.\r\n * @param {Array} pair The key-value pair to add.\r\n * @returns {Object} Returns `map`.\r\n */\r\nfunction addMapEntry(map, pair) {\r\n  // Don't return `map.set` because it's not chainable in IE 11.\r\n  map.set(pair[0], pair[1]);\r\n  return map;\r\n}\r\n\r\n/**\r\n * Adds `value` to `set`.\r\n *\r\n * @private\r\n * @param {Object} set The set to modify.\r\n * @param {*} value The value to add.\r\n * @returns {Object} Returns `set`.\r\n */\r\nfunction addSetEntry(set, value) {\r\n  // Don't return `set.add` because it's not chainable in IE 11.\r\n  set.add(value);\r\n  return set;\r\n}\r\n\r\n/**\r\n * A specialized version of `_.forEach` for arrays without support for\r\n * iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction arrayEach(array, iteratee) {\r\n  var index = -1,\r\n      length = array ? array.length : 0;\r\n\r\n  while (++index < length) {\r\n    if (iteratee(array[index], index, array) === false) {\r\n      break;\r\n    }\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * Appends the elements of `values` to `array`.\r\n *\r\n * @private\r\n * @param {Array} array The array to modify.\r\n * @param {Array} values The values to append.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction arrayPush(array, values) {\r\n  var index = -1,\r\n      length = values.length,\r\n      offset = array.length;\r\n\r\n  while (++index < length) {\r\n    array[offset + index] = values[index];\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * A specialized version of `_.reduce` for arrays without support for\r\n * iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @param {*} [accumulator] The initial value.\r\n * @param {boolean} [initAccum] Specify using the first element of `array` as\r\n *  the initial value.\r\n * @returns {*} Returns the accumulated value.\r\n */\r\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\r\n  var index = -1,\r\n      length = array ? array.length : 0;\r\n\r\n  if (initAccum && length) {\r\n    accumulator = array[++index];\r\n  }\r\n  while (++index < length) {\r\n    accumulator = iteratee(accumulator, array[index], index, array);\r\n  }\r\n  return accumulator;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.times` without support for iteratee shorthands\r\n * or max array length checks.\r\n *\r\n * @private\r\n * @param {number} n The number of times to invoke `iteratee`.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns the array of results.\r\n */\r\nfunction baseTimes(n, iteratee) {\r\n  var index = -1,\r\n      result = Array(n);\r\n\r\n  while (++index < n) {\r\n    result[index] = iteratee(index);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the value at `key` of `object`.\r\n *\r\n * @private\r\n * @param {Object} [object] The object to query.\r\n * @param {string} key The key of the property to get.\r\n * @returns {*} Returns the property value.\r\n */\r\nfunction getValue(object, key) {\r\n  return object == null ? undefined : object[key];\r\n}\r\n\r\n/**\r\n * Checks if `value` is a host object in IE < 9.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\r\n */\r\nfunction isHostObject(value) {\r\n  // Many host objects are `Object` objects that can coerce to strings\r\n  // despite having improperly defined `toString` methods.\r\n  var result = false;\r\n  if (value != null && typeof value.toString != 'function') {\r\n    try {\r\n      result = !!(value + '');\r\n    } catch (e) {}\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Converts `map` to its key-value pairs.\r\n *\r\n * @private\r\n * @param {Object} map The map to convert.\r\n * @returns {Array} Returns the key-value pairs.\r\n */\r\nfunction mapToArray(map) {\r\n  var index = -1,\r\n      result = Array(map.size);\r\n\r\n  map.forEach(function(value, key) {\r\n    result[++index] = [key, value];\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a unary function that invokes `func` with its argument transformed.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {Function} transform The argument transform.\r\n * @returns {Function} Returns the new function.\r\n */\r\nfunction overArg(func, transform) {\r\n  return function(arg) {\r\n    return func(transform(arg));\r\n  };\r\n}\r\n\r\n/**\r\n * Converts `set` to an array of its values.\r\n *\r\n * @private\r\n * @param {Object} set The set to convert.\r\n * @returns {Array} Returns the values.\r\n */\r\nfunction setToArray(set) {\r\n  var index = -1,\r\n      result = Array(set.size);\r\n\r\n  set.forEach(function(value) {\r\n    result[++index] = value;\r\n  });\r\n  return result;\r\n}\r\n\r\n/** Used for built-in method references. */\r\nvar arrayProto = Array.prototype,\r\n    funcProto = Function.prototype,\r\n    objectProto = Object.prototype;\r\n\r\n/** Used to detect overreaching core-js shims. */\r\nvar coreJsData = root['__core-js_shared__'];\r\n\r\n/** Used to detect methods masquerading as native. */\r\nvar maskSrcKey = (function() {\r\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\r\n  return uid ? ('Symbol(src)_1.' + uid) : '';\r\n}());\r\n\r\n/** Used to resolve the decompiled source of functions. */\r\nvar funcToString = funcProto.toString;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar objectToString = objectProto.toString;\r\n\r\n/** Used to detect if a method is native. */\r\nvar reIsNative = RegExp('^' +\r\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\r\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\r\n);\r\n\r\n/** Built-in value references. */\r\nvar Buffer = moduleExports ? root.Buffer : undefined,\r\n    Symbol = root.Symbol,\r\n    Uint8Array = root.Uint8Array,\r\n    getPrototype = overArg(Object.getPrototypeOf, Object),\r\n    objectCreate = Object.create,\r\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\r\n    splice = arrayProto.splice;\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\r\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\r\n    nativeKeys = overArg(Object.keys, Object);\r\n\r\n/* Built-in method references that are verified to be native. */\r\nvar DataView = getNative(root, 'DataView'),\r\n    Map = getNative(root, 'Map'),\r\n    Promise = getNative(root, 'Promise'),\r\n    Set = getNative(root, 'Set'),\r\n    WeakMap = getNative(root, 'WeakMap'),\r\n    nativeCreate = getNative(Object, 'create');\r\n\r\n/** Used to detect maps, sets, and weakmaps. */\r\nvar dataViewCtorString = toSource(DataView),\r\n    mapCtorString = toSource(Map),\r\n    promiseCtorString = toSource(Promise),\r\n    setCtorString = toSource(Set),\r\n    weakMapCtorString = toSource(WeakMap);\r\n\r\n/** Used to convert symbols to primitives and strings. */\r\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\r\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\r\n\r\n/**\r\n * Creates a hash object.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction Hash(entries) {\r\n  var index = -1,\r\n      length = entries ? entries.length : 0;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the hash.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf Hash\r\n */\r\nfunction hashClear() {\r\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the hash.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf Hash\r\n * @param {Object} hash The hash to modify.\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction hashDelete(key) {\r\n  return this.has(key) && delete this.__data__[key];\r\n}\r\n\r\n/**\r\n * Gets the hash value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf Hash\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction hashGet(key) {\r\n  var data = this.__data__;\r\n  if (nativeCreate) {\r\n    var result = data[key];\r\n    return result === HASH_UNDEFINED ? undefined : result;\r\n  }\r\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\r\n}\r\n\r\n/**\r\n * Checks if a hash value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf Hash\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction hashHas(key) {\r\n  var data = this.__data__;\r\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\r\n}\r\n\r\n/**\r\n * Sets the hash `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Hash\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the hash instance.\r\n */\r\nfunction hashSet(key, value) {\r\n  var data = this.__data__;\r\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\r\n  return this;\r\n}\r\n\r\n// Add methods to `Hash`.\r\nHash.prototype.clear = hashClear;\r\nHash.prototype['delete'] = hashDelete;\r\nHash.prototype.get = hashGet;\r\nHash.prototype.has = hashHas;\r\nHash.prototype.set = hashSet;\r\n\r\n/**\r\n * Creates an list cache object.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction ListCache(entries) {\r\n  var index = -1,\r\n      length = entries ? entries.length : 0;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the list cache.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf ListCache\r\n */\r\nfunction listCacheClear() {\r\n  this.__data__ = [];\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the list cache.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction listCacheDelete(key) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  if (index < 0) {\r\n    return false;\r\n  }\r\n  var lastIndex = data.length - 1;\r\n  if (index == lastIndex) {\r\n    data.pop();\r\n  } else {\r\n    splice.call(data, index, 1);\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Gets the list cache value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction listCacheGet(key) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  return index < 0 ? undefined : data[index][1];\r\n}\r\n\r\n/**\r\n * Checks if a list cache value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf ListCache\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction listCacheHas(key) {\r\n  return assocIndexOf(this.__data__, key) > -1;\r\n}\r\n\r\n/**\r\n * Sets the list cache `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the list cache instance.\r\n */\r\nfunction listCacheSet(key, value) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  if (index < 0) {\r\n    data.push([key, value]);\r\n  } else {\r\n    data[index][1] = value;\r\n  }\r\n  return this;\r\n}\r\n\r\n// Add methods to `ListCache`.\r\nListCache.prototype.clear = listCacheClear;\r\nListCache.prototype['delete'] = listCacheDelete;\r\nListCache.prototype.get = listCacheGet;\r\nListCache.prototype.has = listCacheHas;\r\nListCache.prototype.set = listCacheSet;\r\n\r\n/**\r\n * Creates a map cache object to store key-value pairs.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction MapCache(entries) {\r\n  var index = -1,\r\n      length = entries ? entries.length : 0;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the map.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf MapCache\r\n */\r\nfunction mapCacheClear() {\r\n  this.__data__ = {\r\n    'hash': new Hash,\r\n    'map': new (Map || ListCache),\r\n    'string': new Hash\r\n  };\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the map.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction mapCacheDelete(key) {\r\n  return getMapData(this, key)['delete'](key);\r\n}\r\n\r\n/**\r\n * Gets the map value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction mapCacheGet(key) {\r\n  return getMapData(this, key).get(key);\r\n}\r\n\r\n/**\r\n * Checks if a map value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf MapCache\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction mapCacheHas(key) {\r\n  return getMapData(this, key).has(key);\r\n}\r\n\r\n/**\r\n * Sets the map `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the map cache instance.\r\n */\r\nfunction mapCacheSet(key, value) {\r\n  getMapData(this, key).set(key, value);\r\n  return this;\r\n}\r\n\r\n// Add methods to `MapCache`.\r\nMapCache.prototype.clear = mapCacheClear;\r\nMapCache.prototype['delete'] = mapCacheDelete;\r\nMapCache.prototype.get = mapCacheGet;\r\nMapCache.prototype.has = mapCacheHas;\r\nMapCache.prototype.set = mapCacheSet;\r\n\r\n/**\r\n * Creates a stack cache object to store key-value pairs.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction Stack(entries) {\r\n  this.__data__ = new ListCache(entries);\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the stack.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf Stack\r\n */\r\nfunction stackClear() {\r\n  this.__data__ = new ListCache;\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the stack.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction stackDelete(key) {\r\n  return this.__data__['delete'](key);\r\n}\r\n\r\n/**\r\n * Gets the stack value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction stackGet(key) {\r\n  return this.__data__.get(key);\r\n}\r\n\r\n/**\r\n * Checks if a stack value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf Stack\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction stackHas(key) {\r\n  return this.__data__.has(key);\r\n}\r\n\r\n/**\r\n * Sets the stack `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the stack cache instance.\r\n */\r\nfunction stackSet(key, value) {\r\n  var cache = this.__data__;\r\n  if (cache instanceof ListCache) {\r\n    var pairs = cache.__data__;\r\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\r\n      pairs.push([key, value]);\r\n      return this;\r\n    }\r\n    cache = this.__data__ = new MapCache(pairs);\r\n  }\r\n  cache.set(key, value);\r\n  return this;\r\n}\r\n\r\n// Add methods to `Stack`.\r\nStack.prototype.clear = stackClear;\r\nStack.prototype['delete'] = stackDelete;\r\nStack.prototype.get = stackGet;\r\nStack.prototype.has = stackHas;\r\nStack.prototype.set = stackSet;\r\n\r\n/**\r\n * Creates an array of the enumerable property names of the array-like `value`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @param {boolean} inherited Specify returning inherited property names.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction arrayLikeKeys(value, inherited) {\r\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\r\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\r\n  var result = (isArray(value) || isArguments(value))\r\n    ? baseTimes(value.length, String)\r\n    : [];\r\n\r\n  var length = result.length,\r\n      skipIndexes = !!length;\r\n\r\n  for (var key in value) {\r\n    if ((inherited || hasOwnProperty.call(value, key)) &&\r\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\r\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * for equality comparisons.\r\n *\r\n * @private\r\n * @param {Object} object The object to modify.\r\n * @param {string} key The key of the property to assign.\r\n * @param {*} value The value to assign.\r\n */\r\nfunction assignValue(object, key, value) {\r\n  var objValue = object[key];\r\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\r\n      (value === undefined && !(key in object))) {\r\n    object[key] = value;\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the index at which the `key` is found in `array` of key-value pairs.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {*} key The key to search for.\r\n * @returns {number} Returns the index of the matched value, else `-1`.\r\n */\r\nfunction assocIndexOf(array, key) {\r\n  var length = array.length;\r\n  while (length--) {\r\n    if (eq(array[length][0], key)) {\r\n      return length;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.assign` without support for multiple sources\r\n * or `customizer` functions.\r\n *\r\n * @private\r\n * @param {Object} object The destination object.\r\n * @param {Object} source The source object.\r\n * @returns {Object} Returns `object`.\r\n */\r\nfunction baseAssign(object, source) {\r\n  return object && copyObject(source, keys(source), object);\r\n}\r\n\r\n/**\r\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\r\n * traversed objects.\r\n *\r\n * @private\r\n * @param {*} value The value to clone.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @param {boolean} [isFull] Specify a clone including symbols.\r\n * @param {Function} [customizer] The function to customize cloning.\r\n * @param {string} [key] The key of `value`.\r\n * @param {Object} [object] The parent object of `value`.\r\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\r\n * @returns {*} Returns the cloned value.\r\n */\r\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\r\n  var result;\r\n  if (customizer) {\r\n    result = object ? customizer(value, key, object, stack) : customizer(value);\r\n  }\r\n  if (result !== undefined) {\r\n    return result;\r\n  }\r\n  if (!isObject(value)) {\r\n    return value;\r\n  }\r\n  var isArr = isArray(value);\r\n  if (isArr) {\r\n    result = initCloneArray(value);\r\n    if (!isDeep) {\r\n      return copyArray(value, result);\r\n    }\r\n  } else {\r\n    var tag = getTag(value),\r\n        isFunc = tag == funcTag || tag == genTag;\r\n\r\n    if (isBuffer(value)) {\r\n      return cloneBuffer(value, isDeep);\r\n    }\r\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\r\n      if (isHostObject(value)) {\r\n        return object ? value : {};\r\n      }\r\n      result = initCloneObject(isFunc ? {} : value);\r\n      if (!isDeep) {\r\n        return copySymbols(value, baseAssign(result, value));\r\n      }\r\n    } else {\r\n      if (!cloneableTags[tag]) {\r\n        return object ? value : {};\r\n      }\r\n      result = initCloneByTag(value, tag, baseClone, isDeep);\r\n    }\r\n  }\r\n  // Check for circular references and return its corresponding clone.\r\n  stack || (stack = new Stack);\r\n  var stacked = stack.get(value);\r\n  if (stacked) {\r\n    return stacked;\r\n  }\r\n  stack.set(value, result);\r\n\r\n  if (!isArr) {\r\n    var props = isFull ? getAllKeys(value) : keys(value);\r\n  }\r\n  arrayEach(props || value, function(subValue, key) {\r\n    if (props) {\r\n      key = subValue;\r\n      subValue = value[key];\r\n    }\r\n    // Recursively populate clone (susceptible to call stack limits).\r\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.create` without support for assigning\r\n * properties to the created object.\r\n *\r\n * @private\r\n * @param {Object} prototype The object to inherit from.\r\n * @returns {Object} Returns the new object.\r\n */\r\nfunction baseCreate(proto) {\r\n  return isObject(proto) ? objectCreate(proto) : {};\r\n}\r\n\r\n/**\r\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\r\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\r\n * symbols of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {Function} keysFunc The function to get the keys of `object`.\r\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\r\n * @returns {Array} Returns the array of property names and symbols.\r\n */\r\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\r\n  var result = keysFunc(object);\r\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\r\n}\r\n\r\n/**\r\n * The base implementation of `getTag`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the `toStringTag`.\r\n */\r\nfunction baseGetTag(value) {\r\n  return objectToString.call(value);\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isNative` without bad shim checks.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a native function,\r\n *  else `false`.\r\n */\r\nfunction baseIsNative(value) {\r\n  if (!isObject(value) || isMasked(value)) {\r\n    return false;\r\n  }\r\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\r\n  return pattern.test(toSource(value));\r\n}\r\n\r\n/**\r\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction baseKeys(object) {\r\n  if (!isPrototype(object)) {\r\n    return nativeKeys(object);\r\n  }\r\n  var result = [];\r\n  for (var key in Object(object)) {\r\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a clone of  `buffer`.\r\n *\r\n * @private\r\n * @param {Buffer} buffer The buffer to clone.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Buffer} Returns the cloned buffer.\r\n */\r\nfunction cloneBuffer(buffer, isDeep) {\r\n  if (isDeep) {\r\n    return buffer.slice();\r\n  }\r\n  var result = new buffer.constructor(buffer.length);\r\n  buffer.copy(result);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a clone of `arrayBuffer`.\r\n *\r\n * @private\r\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\r\n * @returns {ArrayBuffer} Returns the cloned array buffer.\r\n */\r\nfunction cloneArrayBuffer(arrayBuffer) {\r\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\r\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a clone of `dataView`.\r\n *\r\n * @private\r\n * @param {Object} dataView The data view to clone.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the cloned data view.\r\n */\r\nfunction cloneDataView(dataView, isDeep) {\r\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\r\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\r\n}\r\n\r\n/**\r\n * Creates a clone of `map`.\r\n *\r\n * @private\r\n * @param {Object} map The map to clone.\r\n * @param {Function} cloneFunc The function to clone values.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the cloned map.\r\n */\r\nfunction cloneMap(map, isDeep, cloneFunc) {\r\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\r\n  return arrayReduce(array, addMapEntry, new map.constructor);\r\n}\r\n\r\n/**\r\n * Creates a clone of `regexp`.\r\n *\r\n * @private\r\n * @param {Object} regexp The regexp to clone.\r\n * @returns {Object} Returns the cloned regexp.\r\n */\r\nfunction cloneRegExp(regexp) {\r\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\r\n  result.lastIndex = regexp.lastIndex;\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a clone of `set`.\r\n *\r\n * @private\r\n * @param {Object} set The set to clone.\r\n * @param {Function} cloneFunc The function to clone values.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the cloned set.\r\n */\r\nfunction cloneSet(set, isDeep, cloneFunc) {\r\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\r\n  return arrayReduce(array, addSetEntry, new set.constructor);\r\n}\r\n\r\n/**\r\n * Creates a clone of the `symbol` object.\r\n *\r\n * @private\r\n * @param {Object} symbol The symbol object to clone.\r\n * @returns {Object} Returns the cloned symbol object.\r\n */\r\nfunction cloneSymbol(symbol) {\r\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\r\n}\r\n\r\n/**\r\n * Creates a clone of `typedArray`.\r\n *\r\n * @private\r\n * @param {Object} typedArray The typed array to clone.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the cloned typed array.\r\n */\r\nfunction cloneTypedArray(typedArray, isDeep) {\r\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\r\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\r\n}\r\n\r\n/**\r\n * Copies the values of `source` to `array`.\r\n *\r\n * @private\r\n * @param {Array} source The array to copy values from.\r\n * @param {Array} [array=[]] The array to copy values to.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction copyArray(source, array) {\r\n  var index = -1,\r\n      length = source.length;\r\n\r\n  array || (array = Array(length));\r\n  while (++index < length) {\r\n    array[index] = source[index];\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * Copies properties of `source` to `object`.\r\n *\r\n * @private\r\n * @param {Object} source The object to copy properties from.\r\n * @param {Array} props The property identifiers to copy.\r\n * @param {Object} [object={}] The object to copy properties to.\r\n * @param {Function} [customizer] The function to customize copied values.\r\n * @returns {Object} Returns `object`.\r\n */\r\nfunction copyObject(source, props, object, customizer) {\r\n  object || (object = {});\r\n\r\n  var index = -1,\r\n      length = props.length;\r\n\r\n  while (++index < length) {\r\n    var key = props[index];\r\n\r\n    var newValue = customizer\r\n      ? customizer(object[key], source[key], key, object, source)\r\n      : undefined;\r\n\r\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\r\n  }\r\n  return object;\r\n}\r\n\r\n/**\r\n * Copies own symbol properties of `source` to `object`.\r\n *\r\n * @private\r\n * @param {Object} source The object to copy symbols from.\r\n * @param {Object} [object={}] The object to copy symbols to.\r\n * @returns {Object} Returns `object`.\r\n */\r\nfunction copySymbols(source, object) {\r\n  return copyObject(source, getSymbols(source), object);\r\n}\r\n\r\n/**\r\n * Creates an array of own enumerable property names and symbols of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names and symbols.\r\n */\r\nfunction getAllKeys(object) {\r\n  return baseGetAllKeys(object, keys, getSymbols);\r\n}\r\n\r\n/**\r\n * Gets the data for `map`.\r\n *\r\n * @private\r\n * @param {Object} map The map to query.\r\n * @param {string} key The reference key.\r\n * @returns {*} Returns the map data.\r\n */\r\nfunction getMapData(map, key) {\r\n  var data = map.__data__;\r\n  return isKeyable(key)\r\n    ? data[typeof key == 'string' ? 'string' : 'hash']\r\n    : data.map;\r\n}\r\n\r\n/**\r\n * Gets the native function at `key` of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {string} key The key of the method to get.\r\n * @returns {*} Returns the function if it's native, else `undefined`.\r\n */\r\nfunction getNative(object, key) {\r\n  var value = getValue(object, key);\r\n  return baseIsNative(value) ? value : undefined;\r\n}\r\n\r\n/**\r\n * Creates an array of the own enumerable symbol properties of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of symbols.\r\n */\r\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\r\n\r\n/**\r\n * Gets the `toStringTag` of `value`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the `toStringTag`.\r\n */\r\nvar getTag = baseGetTag;\r\n\r\n// Fallback for data views, maps, sets, and weak maps in IE 11,\r\n// for data views in Edge < 14, and promises in Node.js.\r\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\r\n    (Map && getTag(new Map) != mapTag) ||\r\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\r\n    (Set && getTag(new Set) != setTag) ||\r\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\r\n  getTag = function(value) {\r\n    var result = objectToString.call(value),\r\n        Ctor = result == objectTag ? value.constructor : undefined,\r\n        ctorString = Ctor ? toSource(Ctor) : undefined;\r\n\r\n    if (ctorString) {\r\n      switch (ctorString) {\r\n        case dataViewCtorString: return dataViewTag;\r\n        case mapCtorString: return mapTag;\r\n        case promiseCtorString: return promiseTag;\r\n        case setCtorString: return setTag;\r\n        case weakMapCtorString: return weakMapTag;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Initializes an array clone.\r\n *\r\n * @private\r\n * @param {Array} array The array to clone.\r\n * @returns {Array} Returns the initialized clone.\r\n */\r\nfunction initCloneArray(array) {\r\n  var length = array.length,\r\n      result = array.constructor(length);\r\n\r\n  // Add properties assigned by `RegExp#exec`.\r\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\r\n    result.index = array.index;\r\n    result.input = array.input;\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Initializes an object clone.\r\n *\r\n * @private\r\n * @param {Object} object The object to clone.\r\n * @returns {Object} Returns the initialized clone.\r\n */\r\nfunction initCloneObject(object) {\r\n  return (typeof object.constructor == 'function' && !isPrototype(object))\r\n    ? baseCreate(getPrototype(object))\r\n    : {};\r\n}\r\n\r\n/**\r\n * Initializes an object clone based on its `toStringTag`.\r\n *\r\n * **Note:** This function only supports cloning values with tags of\r\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\r\n *\r\n * @private\r\n * @param {Object} object The object to clone.\r\n * @param {string} tag The `toStringTag` of the object to clone.\r\n * @param {Function} cloneFunc The function to clone values.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the initialized clone.\r\n */\r\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\r\n  var Ctor = object.constructor;\r\n  switch (tag) {\r\n    case arrayBufferTag:\r\n      return cloneArrayBuffer(object);\r\n\r\n    case boolTag:\r\n    case dateTag:\r\n      return new Ctor(+object);\r\n\r\n    case dataViewTag:\r\n      return cloneDataView(object, isDeep);\r\n\r\n    case float32Tag: case float64Tag:\r\n    case int8Tag: case int16Tag: case int32Tag:\r\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\r\n      return cloneTypedArray(object, isDeep);\r\n\r\n    case mapTag:\r\n      return cloneMap(object, isDeep, cloneFunc);\r\n\r\n    case numberTag:\r\n    case stringTag:\r\n      return new Ctor(object);\r\n\r\n    case regexpTag:\r\n      return cloneRegExp(object);\r\n\r\n    case setTag:\r\n      return cloneSet(object, isDeep, cloneFunc);\r\n\r\n    case symbolTag:\r\n      return cloneSymbol(object);\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if `value` is a valid array-like index.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n */\r\nfunction isIndex(value, length) {\r\n  length = length == null ? MAX_SAFE_INTEGER : length;\r\n  return !!length &&\r\n    (typeof value == 'number' || reIsUint.test(value)) &&\r\n    (value > -1 && value % 1 == 0 && value < length);\r\n}\r\n\r\n/**\r\n * Checks if `value` is suitable for use as unique object key.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\r\n */\r\nfunction isKeyable(value) {\r\n  var type = typeof value;\r\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\r\n    ? (value !== '__proto__')\r\n    : (value === null);\r\n}\r\n\r\n/**\r\n * Checks if `func` has its source masked.\r\n *\r\n * @private\r\n * @param {Function} func The function to check.\r\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\r\n */\r\nfunction isMasked(func) {\r\n  return !!maskSrcKey && (maskSrcKey in func);\r\n}\r\n\r\n/**\r\n * Checks if `value` is likely a prototype object.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\r\n */\r\nfunction isPrototype(value) {\r\n  var Ctor = value && value.constructor,\r\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\r\n\r\n  return value === proto;\r\n}\r\n\r\n/**\r\n * Converts `func` to its source code.\r\n *\r\n * @private\r\n * @param {Function} func The function to process.\r\n * @returns {string} Returns the source code.\r\n */\r\nfunction toSource(func) {\r\n  if (func != null) {\r\n    try {\r\n      return funcToString.call(func);\r\n    } catch (e) {}\r\n    try {\r\n      return (func + '');\r\n    } catch (e) {}\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * This method is like `_.clone` except that it recursively clones `value`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 1.0.0\r\n * @category Lang\r\n * @param {*} value The value to recursively clone.\r\n * @returns {*} Returns the deep cloned value.\r\n * @see _.clone\r\n * @example\r\n *\r\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\r\n *\r\n * var deep = _.cloneDeep(objects);\r\n * console.log(deep[0] === objects[0]);\r\n * // => false\r\n */\r\nfunction cloneDeep(value) {\r\n  return baseClone(value, true, true);\r\n}\r\n\r\n/**\r\n * Performs a\r\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * comparison between two values to determine if they are equivalent.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to compare.\r\n * @param {*} other The other value to compare.\r\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n * @example\r\n *\r\n * var object = { 'a': 1 };\r\n * var other = { 'a': 1 };\r\n *\r\n * _.eq(object, object);\r\n * // => true\r\n *\r\n * _.eq(object, other);\r\n * // => false\r\n *\r\n * _.eq('a', 'a');\r\n * // => true\r\n *\r\n * _.eq('a', Object('a'));\r\n * // => false\r\n *\r\n * _.eq(NaN, NaN);\r\n * // => true\r\n */\r\nfunction eq(value, other) {\r\n  return value === other || (value !== value && other !== other);\r\n}\r\n\r\n/**\r\n * Checks if `value` is likely an `arguments` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n *  else `false`.\r\n * @example\r\n *\r\n * _.isArguments(function() { return arguments; }());\r\n * // => true\r\n *\r\n * _.isArguments([1, 2, 3]);\r\n * // => false\r\n */\r\nfunction isArguments(value) {\r\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\r\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\r\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\r\n}\r\n\r\n/**\r\n * Checks if `value` is classified as an `Array` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\r\n * @example\r\n *\r\n * _.isArray([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArray(document.body.children);\r\n * // => false\r\n *\r\n * _.isArray('abc');\r\n * // => false\r\n *\r\n * _.isArray(_.noop);\r\n * // => false\r\n */\r\nvar isArray = Array.isArray;\r\n\r\n/**\r\n * Checks if `value` is array-like. A value is considered array-like if it's\r\n * not a function and has a `value.length` that's an integer greater than or\r\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n * @example\r\n *\r\n * _.isArrayLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArrayLike(document.body.children);\r\n * // => true\r\n *\r\n * _.isArrayLike('abc');\r\n * // => true\r\n *\r\n * _.isArrayLike(_.noop);\r\n * // => false\r\n */\r\nfunction isArrayLike(value) {\r\n  return value != null && isLength(value.length) && !isFunction(value);\r\n}\r\n\r\n/**\r\n * This method is like `_.isArrayLike` except that it also checks if `value`\r\n * is an object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an array-like object,\r\n *  else `false`.\r\n * @example\r\n *\r\n * _.isArrayLikeObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArrayLikeObject(document.body.children);\r\n * // => true\r\n *\r\n * _.isArrayLikeObject('abc');\r\n * // => false\r\n *\r\n * _.isArrayLikeObject(_.noop);\r\n * // => false\r\n */\r\nfunction isArrayLikeObject(value) {\r\n  return isObjectLike(value) && isArrayLike(value);\r\n}\r\n\r\n/**\r\n * Checks if `value` is a buffer.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.3.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\r\n * @example\r\n *\r\n * _.isBuffer(new Buffer(2));\r\n * // => true\r\n *\r\n * _.isBuffer(new Uint8Array(2));\r\n * // => false\r\n */\r\nvar isBuffer = nativeIsBuffer || stubFalse;\r\n\r\n/**\r\n * Checks if `value` is classified as a `Function` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n * @example\r\n *\r\n * _.isFunction(_);\r\n * // => true\r\n *\r\n * _.isFunction(/abc/);\r\n * // => false\r\n */\r\nfunction isFunction(value) {\r\n  // The use of `Object#toString` avoids issues with the `typeof` operator\r\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\r\n  var tag = isObject(value) ? objectToString.call(value) : '';\r\n  return tag == funcTag || tag == genTag;\r\n}\r\n\r\n/**\r\n * Checks if `value` is a valid array-like length.\r\n *\r\n * **Note:** This method is loosely based on\r\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\r\n * @example\r\n *\r\n * _.isLength(3);\r\n * // => true\r\n *\r\n * _.isLength(Number.MIN_VALUE);\r\n * // => false\r\n *\r\n * _.isLength(Infinity);\r\n * // => false\r\n *\r\n * _.isLength('3');\r\n * // => false\r\n */\r\nfunction isLength(value) {\r\n  return typeof value == 'number' &&\r\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\r\n}\r\n\r\n/**\r\n * Checks if `value` is the\r\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n * @example\r\n *\r\n * _.isObject({});\r\n * // => true\r\n *\r\n * _.isObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObject(_.noop);\r\n * // => true\r\n *\r\n * _.isObject(null);\r\n * // => false\r\n */\r\nfunction isObject(value) {\r\n  var type = typeof value;\r\n  return !!value && (type == 'object' || type == 'function');\r\n}\r\n\r\n/**\r\n * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n * and has a `typeof` result of \"object\".\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n * @example\r\n *\r\n * _.isObjectLike({});\r\n * // => true\r\n *\r\n * _.isObjectLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObjectLike(_.noop);\r\n * // => false\r\n *\r\n * _.isObjectLike(null);\r\n * // => false\r\n */\r\nfunction isObjectLike(value) {\r\n  return !!value && typeof value == 'object';\r\n}\r\n\r\n/**\r\n * Creates an array of the own enumerable property names of `object`.\r\n *\r\n * **Note:** Non-object values are coerced to objects. See the\r\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\r\n * for more details.\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category Object\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n * @example\r\n *\r\n * function Foo() {\r\n *   this.a = 1;\r\n *   this.b = 2;\r\n * }\r\n *\r\n * Foo.prototype.c = 3;\r\n *\r\n * _.keys(new Foo);\r\n * // => ['a', 'b'] (iteration order is not guaranteed)\r\n *\r\n * _.keys('hi');\r\n * // => ['0', '1']\r\n */\r\nfunction keys(object) {\r\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\r\n}\r\n\r\n/**\r\n * This method returns a new empty array.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.13.0\r\n * @category Util\r\n * @returns {Array} Returns the new empty array.\r\n * @example\r\n *\r\n * var arrays = _.times(2, _.stubArray);\r\n *\r\n * console.log(arrays);\r\n * // => [[], []]\r\n *\r\n * console.log(arrays[0] === arrays[1]);\r\n * // => false\r\n */\r\nfunction stubArray() {\r\n  return [];\r\n}\r\n\r\n/**\r\n * This method returns `false`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.13.0\r\n * @category Util\r\n * @returns {boolean} Returns `false`.\r\n * @example\r\n *\r\n * _.times(2, _.stubFalse);\r\n * // => [false, false]\r\n */\r\nfunction stubFalse() {\r\n  return false;\r\n}\r\n\r\nmodule.exports = cloneDeep;\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $pres, Strophe } from 'strophe.js';\r\nimport 'strophejs-plugin-stream-management';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport ResumeTask from './ResumeTask';\r\nimport LastSuccessTracker from './StropheLastSuccess';\r\nimport PingConnectionPlugin from './strophe.ping';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\r\n */\r\nexport default class XmppConnection extends Listenable {\r\n    /**\r\n     * The list of {@link XmppConnection} events.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    static get Events() {\r\n        return {\r\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * The list of Xmpp connection statuses.\r\n     *\r\n     * @returns {Strophe.Status}\r\n     */\r\n    static get Status() {\r\n        return Strophe.Status;\r\n    }\r\n\r\n    /**\r\n     * Initializes new connection instance.\r\n     *\r\n     * @param {Object} options\r\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\r\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\r\n     * It will enable automatically by default if supported by the XMPP server.\r\n     * @param {Number} [options.websocketKeepAlive=240000] - The websocket keep alive interval. It's 4 minutes by\r\n     * default with jitter. Pass -1 to disable. The actual interval equation is:\r\n     * jitterDelay = (interval * 0.2) + (0.8 * interval * Math.random())\r\n     * The keep alive is HTTP GET request to the {@link options.serviceUrl}.\r\n     */\r\n    constructor({ enableWebsocketResume, websocketKeepAlive, serviceUrl }) {\r\n        super();\r\n        this._options = {\r\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\r\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 4 * 60 * 1000 : Number(websocketKeepAlive)\r\n        };\r\n\r\n        this._stropheConn = new Strophe.Connection(serviceUrl);\r\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\r\n\r\n        // The default maxRetries is 5, which is too long.\r\n        this._stropheConn.maxRetries = 3;\r\n\r\n        this._lastSuccessTracker = new LastSuccessTracker();\r\n        this._lastSuccessTracker.startTracking(this, this._stropheConn);\r\n\r\n        this._resumeTask = new ResumeTask(this._stropheConn);\r\n\r\n        /**\r\n         * @typedef DeferredSendIQ Object\r\n         * @property {Element} iq - The IQ to send.\r\n         * @property {function} resolve - The resolve method of the deferred Promise.\r\n         * @property {function} reject - The reject method of the deferred Promise.\r\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\r\n         */\r\n        /**\r\n         * Deferred IQs to be sent upon reconnect.\r\n         * @type {Array<DeferredSendIQ>}\r\n         * @private\r\n         */\r\n        this._deferredIQs = [];\r\n\r\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\r\n        // is broken (WebSocket/TCP connection not closed gracefully).\r\n        this.addConnectionPlugin(\r\n            'ping',\r\n            new PingConnectionPlugin({\r\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded()\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * A getter for the connected state.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    get connected() {\r\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\r\n\r\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\r\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\r\n    }\r\n\r\n    /**\r\n     * Retrieves the feature discovery plugin instance.\r\n     *\r\n     * @returns {Strophe.Connection.disco}\r\n     */\r\n    get disco() {\r\n        return this._stropheConn.disco;\r\n    }\r\n\r\n    /**\r\n     * A getter for the disconnecting state.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    get disconnecting() {\r\n        return this._stropheConn.disconnecting === true;\r\n    }\r\n\r\n    /**\r\n     * A getter for the domain.\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    get domain() {\r\n        return this._stropheConn.domain;\r\n    }\r\n\r\n    /**\r\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\r\n     * for BOSH.\r\n     * @returns {boolean}\r\n     */\r\n    get isUsingWebSocket() {\r\n        return this._usesWebsocket;\r\n    }\r\n\r\n    /**\r\n     * A getter for the JID.\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    get jid() {\r\n        return this._stropheConn.jid;\r\n    }\r\n\r\n    /**\r\n     * Returns headers for the last BOSH response received.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get lastResponseHeaders() {\r\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\r\n    }\r\n\r\n    /**\r\n     * A getter for the logger plugin instance.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    get logger() {\r\n        return this._stropheConn.logger;\r\n    }\r\n\r\n    /**\r\n     * A getter for the connection options.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    get options() {\r\n        return this._stropheConn.options;\r\n    }\r\n\r\n    /**\r\n     * A getter for the service URL.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get service() {\r\n        return this._stropheConn.service;\r\n    }\r\n\r\n    /**\r\n     * Returns the current connection status.\r\n     *\r\n     * @returns {Strophe.Status}\r\n     */\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * Adds a connection plugin to this instance.\r\n     *\r\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\r\n     * instance.\r\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\r\n     */\r\n    addConnectionPlugin(name, plugin) {\r\n        this[name] = plugin;\r\n        plugin.init(this);\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.addHandler}\r\n     *\r\n     * @returns {void}\r\n     */\r\n    addHandler(...args) {\r\n        this._stropheConn.addHandler(...args);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\r\n     * See {@link Strophe.Connection.attach} for the params description.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    attach(jid, sid, rid, callback, ...args) {\r\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\r\n    }\r\n\r\n    /**\r\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\r\n     * See {@link Strophe.Connection.connect} for the params description.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    connect(jid, pass, callback, ...args) {\r\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Handles {@link Strophe.Status} updates for the current connection.\r\n     *\r\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\r\n     * the connect methods.\r\n     * @param {Strophe.Status} status - The new connection status.\r\n     * @param {*} args - The rest of the arguments passed by Strophe.\r\n     * @private\r\n     */\r\n    _stropheConnectionCb(targetCallback, status, ...args) {\r\n        this._status = status;\r\n\r\n        let blockCallback = false;\r\n\r\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\r\n            this._maybeEnableStreamResume();\r\n            this._maybeStartWSKeepAlive();\r\n            this._processDeferredIQs();\r\n            this._resumeTask.cancel();\r\n            this.ping.startInterval(this.domain);\r\n        } else if (status === Strophe.Status.DISCONNECTED) {\r\n            this.ping.stopInterval();\r\n\r\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\r\n            blockCallback = this._tryResumingConnection();\r\n            if (!blockCallback) {\r\n                clearTimeout(this._wsKeepAlive);\r\n            }\r\n        }\r\n\r\n        if (!blockCallback) {\r\n            targetCallback(status, ...args);\r\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the list of IQs and rejects deferred Promises with an error.\r\n     *\r\n     * @private\r\n     */\r\n    _clearDeferredIQs() {\r\n        for (const deferred of this._deferredIQs) {\r\n            deferred.reject(new Error('disconnect'));\r\n        }\r\n        this._deferredIQs = [];\r\n    }\r\n\r\n    /**\r\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    closeWebsocket() {\r\n        if (this._stropheConn && this._stropheConn._proto) {\r\n            this._stropheConn._proto._closeSocket();\r\n            this._stropheConn._proto._onClose(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.disconnect}.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    disconnect(...args) {\r\n        this._resumeTask.cancel();\r\n        clearTimeout(this._wsKeepAlive);\r\n        this._clearDeferredIQs();\r\n        this._stropheConn.disconnect(...args);\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.flush}.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    flush(...args) {\r\n        this._stropheConn.flush(...args);\r\n    }\r\n\r\n    /**\r\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\r\n     *\r\n     * @returns {number|null}\r\n     */\r\n    getTimeSinceLastSuccess() {\r\n        return this._lastSuccessTracker.getTimeSinceLastSuccess();\r\n    }\r\n\r\n    /**\r\n     * Requests a resume token from the server if enabled and all requirements are met.\r\n     *\r\n     * @private\r\n     */\r\n    _maybeEnableStreamResume() {\r\n        if (!this._options.enableWebsocketResume) {\r\n\r\n            return;\r\n        }\r\n\r\n        const { streamManagement } = this._stropheConn;\r\n\r\n        if (!this.isUsingWebSocket) {\r\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\r\n        } else if (!streamManagement) {\r\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\r\n        } else if (!streamManagement.isSupported()) {\r\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\r\n        } else if (!streamManagement.getResumeToken()) {\r\n            logger.info('Enabling XEP-0198 stream management');\r\n            streamManagement.enable(/* resume */ true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the Websocket keep alive if enabled.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _maybeStartWSKeepAlive() {\r\n        const { websocketKeepAlive } = this._options;\r\n\r\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\r\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\r\n            clearTimeout(this._wsKeepAlive);\r\n\r\n            const intervalWithJitter\r\n                = /* base */ (websocketKeepAlive * 0.2) + /* jitter */ (Math.random() * 0.8 * websocketKeepAlive);\r\n\r\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\r\n\r\n            this._wsKeepAlive = setTimeout(() => {\r\n                const url = this.service.replace('wss://', 'https://').replace('ws://', 'http://');\r\n\r\n                fetch(url).catch(\r\n                    error => {\r\n                        logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\r\n                    })\r\n                    .then(() => this._maybeStartWSKeepAlive());\r\n            }, intervalWithJitter);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _processDeferredIQs() {\r\n        for (const deferred of this._deferredIQs) {\r\n            if (deferred.iq) {\r\n                clearTimeout(deferred.timeout);\r\n\r\n                const timeLeft = Date.now() - deferred.start;\r\n\r\n                this.sendIQ(\r\n                    deferred.iq,\r\n                    result => deferred.resolve(result),\r\n                    error => deferred.reject(error),\r\n                    timeLeft);\r\n            }\r\n        }\r\n\r\n        this._deferredIQs = [];\r\n    }\r\n\r\n    /**\r\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\r\n     *\r\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\r\n     * @returns {void}\r\n     */\r\n    send(stanza) {\r\n        if (!this.connected) {\r\n            throw new Error('Not connected');\r\n        }\r\n        this._stropheConn.send(stanza);\r\n    }\r\n\r\n    /**\r\n     * Helper function to send IQ stanzas.\r\n     *\r\n     * @param {Element} elem - The stanza to send.\r\n     * @param {Function} callback - The callback function for a successful request.\r\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\r\n     * be null.\r\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\r\n     * @returns {number} - The id used to send the IQ.\r\n     */\r\n    sendIQ(elem, callback, errback, timeout) {\r\n        if (!this.connected) {\r\n            errback('Not connected');\r\n\r\n            return;\r\n        }\r\n\r\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\r\n    }\r\n\r\n    /**\r\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\r\n     * which would fail immediately if disconnected).\r\n     *\r\n     * @param {Element} iq - The IQ to send.\r\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\r\n     * included, which means that the IQ may never be sent and still fail with a timeout.\r\n     */\r\n    sendIQ2(iq, { timeout }) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.connected) {\r\n                this.sendIQ(\r\n                    iq,\r\n                    result => resolve(result),\r\n                    error => reject(error),\r\n                    timeout);\r\n            } else {\r\n                const deferred = {\r\n                    iq,\r\n                    resolve,\r\n                    reject,\r\n                    start: Date.now(),\r\n                    timeout: setTimeout(() => {\r\n                        // clears the IQ on timeout and invalidates the deferred task\r\n                        deferred.iq = undefined;\r\n\r\n                        // Strophe calls with undefined on timeout\r\n                        reject(undefined);\r\n                    }, timeout)\r\n                };\r\n\r\n                this._deferredIQs.push(deferred);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called by the ping plugin when ping fails too many times.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _onPingErrorThresholdExceeded() {\r\n        if (this.isUsingWebSocket) {\r\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\r\n            this.closeWebsocket();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\r\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\r\n     *\r\n     * @param {Element} elem - The stanza to send.\r\n     * @param {Function} callback - The callback function for a successful request.\r\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\r\n     * be null.\r\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\r\n     * @returns {number} - The id used to send the presence.\r\n     */\r\n    sendPresence(elem, callback, errback, timeout) {\r\n        if (!this.connected) {\r\n            errback('Not connected');\r\n\r\n            return;\r\n        }\r\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\r\n    }\r\n\r\n    /**\r\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\r\n     *\r\n     * @returns {boolean} - true if the beacon was sent.\r\n     */\r\n    sendUnavailableBeacon() {\r\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\r\n            return false;\r\n        }\r\n\r\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\r\n        this._stropheConn.disconnecting = true;\r\n\r\n        const body = this._stropheConn._proto._buildBody()\r\n            .attrs({\r\n                type: 'terminate'\r\n            });\r\n        const pres = $pres({\r\n            xmlns: Strophe.NS.CLIENT,\r\n            type: 'unavailable'\r\n        });\r\n\r\n        body.cnode(pres.tree());\r\n\r\n        const res = navigator.sendBeacon(\r\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\r\n            Strophe.serialize(body.tree()));\r\n\r\n        logger.info(`Successfully send unavailable beacon ${res}`);\r\n\r\n        this._stropheConn._proto._abortAllRequests();\r\n        this._stropheConn._doDisconnect();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\r\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\r\n     * the token is present it means the connection can be resumed.\r\n     *\r\n     * @private\r\n     * @returns {boolean}\r\n     */\r\n    _tryResumingConnection() {\r\n        const { streamManagement } = this._stropheConn;\r\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\r\n\r\n        if (resumeToken) {\r\n            this._resumeTask.schedule();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","/**\r\n * The possible camera facing modes. For now support only 'user' and\r\n * 'environment' because 'left' and 'right' are not used anywhere in our\r\n * projects at the time of this writing. For more information please refer to\r\n * https://w3c.github.io/mediacapture-main/getusermedia.html\r\n * #def-constraint-facingMode.\r\n *\r\n * @enum {string}\r\n */\r\nconst CameraFacingMode = {\r\n    /**\r\n     * The mode which specifies the environment-facing camera.\r\n     */\r\n    ENVIRONMENT: 'environment',\r\n\r\n    /**\r\n     * The mode which specifies the user-facing camera.\r\n     */\r\n    USER: 'user'\r\n};\r\n\r\nmodule.exports = CameraFacingMode;\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || new Function(\"return this\")();\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\r\n * Lodash (Custom Build) <https://lodash.com/>\r\n * Build: `lodash modularize exports=\"npm\" -o ./`\r\n * Copyright JS Foundation and other contributors <https://js.foundation/>\r\n * Released under MIT license <https://lodash.com/license>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n */\r\n\r\n/** Used as the size to enable large array optimizations. */\r\nvar LARGE_ARRAY_SIZE = 200;\r\n\r\n/** Used to stand-in for `undefined` hash values. */\r\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\r\n\r\n/** Used to compose bitmasks for value comparisons. */\r\nvar COMPARE_PARTIAL_FLAG = 1,\r\n    COMPARE_UNORDERED_FLAG = 2;\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n/** `Object#toString` result references. */\r\nvar argsTag = '[object Arguments]',\r\n    arrayTag = '[object Array]',\r\n    asyncTag = '[object AsyncFunction]',\r\n    boolTag = '[object Boolean]',\r\n    dateTag = '[object Date]',\r\n    errorTag = '[object Error]',\r\n    funcTag = '[object Function]',\r\n    genTag = '[object GeneratorFunction]',\r\n    mapTag = '[object Map]',\r\n    numberTag = '[object Number]',\r\n    nullTag = '[object Null]',\r\n    objectTag = '[object Object]',\r\n    promiseTag = '[object Promise]',\r\n    proxyTag = '[object Proxy]',\r\n    regexpTag = '[object RegExp]',\r\n    setTag = '[object Set]',\r\n    stringTag = '[object String]',\r\n    symbolTag = '[object Symbol]',\r\n    undefinedTag = '[object Undefined]',\r\n    weakMapTag = '[object WeakMap]';\r\n\r\nvar arrayBufferTag = '[object ArrayBuffer]',\r\n    dataViewTag = '[object DataView]',\r\n    float32Tag = '[object Float32Array]',\r\n    float64Tag = '[object Float64Array]',\r\n    int8Tag = '[object Int8Array]',\r\n    int16Tag = '[object Int16Array]',\r\n    int32Tag = '[object Int32Array]',\r\n    uint8Tag = '[object Uint8Array]',\r\n    uint8ClampedTag = '[object Uint8ClampedArray]',\r\n    uint16Tag = '[object Uint16Array]',\r\n    uint32Tag = '[object Uint32Array]';\r\n\r\n/**\r\n * Used to match `RegExp`\r\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\r\n */\r\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\r\n\r\n/** Used to detect host constructors (Safari). */\r\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\r\n\r\n/** Used to detect unsigned integer values. */\r\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n/** Used to identify `toStringTag` values of typed arrays. */\r\nvar typedArrayTags = {};\r\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\r\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\r\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\r\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\r\ntypedArrayTags[uint32Tag] = true;\r\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\r\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\r\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\r\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\r\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\r\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\r\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\r\ntypedArrayTags[weakMapTag] = false;\r\n\r\n/** Detect free variable `global` from Node.js. */\r\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\r\n\r\n/** Detect free variable `self`. */\r\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n\r\n/** Used as a reference to the global object. */\r\nvar root = freeGlobal || freeSelf || Function('return this')();\r\n\r\n/** Detect free variable `exports`. */\r\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\r\n\r\n/** Detect free variable `module`. */\r\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\r\n\r\n/** Detect the popular CommonJS extension `module.exports`. */\r\nvar moduleExports = freeModule && freeModule.exports === freeExports;\r\n\r\n/** Detect free variable `process` from Node.js. */\r\nvar freeProcess = moduleExports && freeGlobal.process;\r\n\r\n/** Used to access faster Node.js helpers. */\r\nvar nodeUtil = (function() {\r\n  try {\r\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\r\n  } catch (e) {}\r\n}());\r\n\r\n/* Node.js helper references. */\r\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\r\n\r\n/**\r\n * A specialized version of `_.filter` for arrays without support for\r\n * iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} predicate The function invoked per iteration.\r\n * @returns {Array} Returns the new filtered array.\r\n */\r\nfunction arrayFilter(array, predicate) {\r\n  var index = -1,\r\n      length = array == null ? 0 : array.length,\r\n      resIndex = 0,\r\n      result = [];\r\n\r\n  while (++index < length) {\r\n    var value = array[index];\r\n    if (predicate(value, index, array)) {\r\n      result[resIndex++] = value;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Appends the elements of `values` to `array`.\r\n *\r\n * @private\r\n * @param {Array} array The array to modify.\r\n * @param {Array} values The values to append.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction arrayPush(array, values) {\r\n  var index = -1,\r\n      length = values.length,\r\n      offset = array.length;\r\n\r\n  while (++index < length) {\r\n    array[offset + index] = values[index];\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * A specialized version of `_.some` for arrays without support for iteratee\r\n * shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} predicate The function invoked per iteration.\r\n * @returns {boolean} Returns `true` if any element passes the predicate check,\r\n *  else `false`.\r\n */\r\nfunction arraySome(array, predicate) {\r\n  var index = -1,\r\n      length = array == null ? 0 : array.length;\r\n\r\n  while (++index < length) {\r\n    if (predicate(array[index], index, array)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.times` without support for iteratee shorthands\r\n * or max array length checks.\r\n *\r\n * @private\r\n * @param {number} n The number of times to invoke `iteratee`.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns the array of results.\r\n */\r\nfunction baseTimes(n, iteratee) {\r\n  var index = -1,\r\n      result = Array(n);\r\n\r\n  while (++index < n) {\r\n    result[index] = iteratee(index);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.unary` without support for storing metadata.\r\n *\r\n * @private\r\n * @param {Function} func The function to cap arguments for.\r\n * @returns {Function} Returns the new capped function.\r\n */\r\nfunction baseUnary(func) {\r\n  return function(value) {\r\n    return func(value);\r\n  };\r\n}\r\n\r\n/**\r\n * Checks if a `cache` value for `key` exists.\r\n *\r\n * @private\r\n * @param {Object} cache The cache to query.\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction cacheHas(cache, key) {\r\n  return cache.has(key);\r\n}\r\n\r\n/**\r\n * Gets the value at `key` of `object`.\r\n *\r\n * @private\r\n * @param {Object} [object] The object to query.\r\n * @param {string} key The key of the property to get.\r\n * @returns {*} Returns the property value.\r\n */\r\nfunction getValue(object, key) {\r\n  return object == null ? undefined : object[key];\r\n}\r\n\r\n/**\r\n * Converts `map` to its key-value pairs.\r\n *\r\n * @private\r\n * @param {Object} map The map to convert.\r\n * @returns {Array} Returns the key-value pairs.\r\n */\r\nfunction mapToArray(map) {\r\n  var index = -1,\r\n      result = Array(map.size);\r\n\r\n  map.forEach(function(value, key) {\r\n    result[++index] = [key, value];\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a unary function that invokes `func` with its argument transformed.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {Function} transform The argument transform.\r\n * @returns {Function} Returns the new function.\r\n */\r\nfunction overArg(func, transform) {\r\n  return function(arg) {\r\n    return func(transform(arg));\r\n  };\r\n}\r\n\r\n/**\r\n * Converts `set` to an array of its values.\r\n *\r\n * @private\r\n * @param {Object} set The set to convert.\r\n * @returns {Array} Returns the values.\r\n */\r\nfunction setToArray(set) {\r\n  var index = -1,\r\n      result = Array(set.size);\r\n\r\n  set.forEach(function(value) {\r\n    result[++index] = value;\r\n  });\r\n  return result;\r\n}\r\n\r\n/** Used for built-in method references. */\r\nvar arrayProto = Array.prototype,\r\n    funcProto = Function.prototype,\r\n    objectProto = Object.prototype;\r\n\r\n/** Used to detect overreaching core-js shims. */\r\nvar coreJsData = root['__core-js_shared__'];\r\n\r\n/** Used to resolve the decompiled source of functions. */\r\nvar funcToString = funcProto.toString;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n\r\n/** Used to detect methods masquerading as native. */\r\nvar maskSrcKey = (function() {\r\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\r\n  return uid ? ('Symbol(src)_1.' + uid) : '';\r\n}());\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar nativeObjectToString = objectProto.toString;\r\n\r\n/** Used to detect if a method is native. */\r\nvar reIsNative = RegExp('^' +\r\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\r\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\r\n);\r\n\r\n/** Built-in value references. */\r\nvar Buffer = moduleExports ? root.Buffer : undefined,\r\n    Symbol = root.Symbol,\r\n    Uint8Array = root.Uint8Array,\r\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\r\n    splice = arrayProto.splice,\r\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\r\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\r\n    nativeKeys = overArg(Object.keys, Object);\r\n\r\n/* Built-in method references that are verified to be native. */\r\nvar DataView = getNative(root, 'DataView'),\r\n    Map = getNative(root, 'Map'),\r\n    Promise = getNative(root, 'Promise'),\r\n    Set = getNative(root, 'Set'),\r\n    WeakMap = getNative(root, 'WeakMap'),\r\n    nativeCreate = getNative(Object, 'create');\r\n\r\n/** Used to detect maps, sets, and weakmaps. */\r\nvar dataViewCtorString = toSource(DataView),\r\n    mapCtorString = toSource(Map),\r\n    promiseCtorString = toSource(Promise),\r\n    setCtorString = toSource(Set),\r\n    weakMapCtorString = toSource(WeakMap);\r\n\r\n/** Used to convert symbols to primitives and strings. */\r\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\r\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\r\n\r\n/**\r\n * Creates a hash object.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction Hash(entries) {\r\n  var index = -1,\r\n      length = entries == null ? 0 : entries.length;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the hash.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf Hash\r\n */\r\nfunction hashClear() {\r\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\r\n  this.size = 0;\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the hash.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf Hash\r\n * @param {Object} hash The hash to modify.\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction hashDelete(key) {\r\n  var result = this.has(key) && delete this.__data__[key];\r\n  this.size -= result ? 1 : 0;\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the hash value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf Hash\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction hashGet(key) {\r\n  var data = this.__data__;\r\n  if (nativeCreate) {\r\n    var result = data[key];\r\n    return result === HASH_UNDEFINED ? undefined : result;\r\n  }\r\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\r\n}\r\n\r\n/**\r\n * Checks if a hash value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf Hash\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction hashHas(key) {\r\n  var data = this.__data__;\r\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\r\n}\r\n\r\n/**\r\n * Sets the hash `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Hash\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the hash instance.\r\n */\r\nfunction hashSet(key, value) {\r\n  var data = this.__data__;\r\n  this.size += this.has(key) ? 0 : 1;\r\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\r\n  return this;\r\n}\r\n\r\n// Add methods to `Hash`.\r\nHash.prototype.clear = hashClear;\r\nHash.prototype['delete'] = hashDelete;\r\nHash.prototype.get = hashGet;\r\nHash.prototype.has = hashHas;\r\nHash.prototype.set = hashSet;\r\n\r\n/**\r\n * Creates an list cache object.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction ListCache(entries) {\r\n  var index = -1,\r\n      length = entries == null ? 0 : entries.length;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the list cache.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf ListCache\r\n */\r\nfunction listCacheClear() {\r\n  this.__data__ = [];\r\n  this.size = 0;\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the list cache.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction listCacheDelete(key) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  if (index < 0) {\r\n    return false;\r\n  }\r\n  var lastIndex = data.length - 1;\r\n  if (index == lastIndex) {\r\n    data.pop();\r\n  } else {\r\n    splice.call(data, index, 1);\r\n  }\r\n  --this.size;\r\n  return true;\r\n}\r\n\r\n/**\r\n * Gets the list cache value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction listCacheGet(key) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  return index < 0 ? undefined : data[index][1];\r\n}\r\n\r\n/**\r\n * Checks if a list cache value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf ListCache\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction listCacheHas(key) {\r\n  return assocIndexOf(this.__data__, key) > -1;\r\n}\r\n\r\n/**\r\n * Sets the list cache `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the list cache instance.\r\n */\r\nfunction listCacheSet(key, value) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  if (index < 0) {\r\n    ++this.size;\r\n    data.push([key, value]);\r\n  } else {\r\n    data[index][1] = value;\r\n  }\r\n  return this;\r\n}\r\n\r\n// Add methods to `ListCache`.\r\nListCache.prototype.clear = listCacheClear;\r\nListCache.prototype['delete'] = listCacheDelete;\r\nListCache.prototype.get = listCacheGet;\r\nListCache.prototype.has = listCacheHas;\r\nListCache.prototype.set = listCacheSet;\r\n\r\n/**\r\n * Creates a map cache object to store key-value pairs.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction MapCache(entries) {\r\n  var index = -1,\r\n      length = entries == null ? 0 : entries.length;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the map.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf MapCache\r\n */\r\nfunction mapCacheClear() {\r\n  this.size = 0;\r\n  this.__data__ = {\r\n    'hash': new Hash,\r\n    'map': new (Map || ListCache),\r\n    'string': new Hash\r\n  };\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the map.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction mapCacheDelete(key) {\r\n  var result = getMapData(this, key)['delete'](key);\r\n  this.size -= result ? 1 : 0;\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the map value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction mapCacheGet(key) {\r\n  return getMapData(this, key).get(key);\r\n}\r\n\r\n/**\r\n * Checks if a map value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf MapCache\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction mapCacheHas(key) {\r\n  return getMapData(this, key).has(key);\r\n}\r\n\r\n/**\r\n * Sets the map `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the map cache instance.\r\n */\r\nfunction mapCacheSet(key, value) {\r\n  var data = getMapData(this, key),\r\n      size = data.size;\r\n\r\n  data.set(key, value);\r\n  this.size += data.size == size ? 0 : 1;\r\n  return this;\r\n}\r\n\r\n// Add methods to `MapCache`.\r\nMapCache.prototype.clear = mapCacheClear;\r\nMapCache.prototype['delete'] = mapCacheDelete;\r\nMapCache.prototype.get = mapCacheGet;\r\nMapCache.prototype.has = mapCacheHas;\r\nMapCache.prototype.set = mapCacheSet;\r\n\r\n/**\r\n *\r\n * Creates an array cache object to store unique values.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [values] The values to cache.\r\n */\r\nfunction SetCache(values) {\r\n  var index = -1,\r\n      length = values == null ? 0 : values.length;\r\n\r\n  this.__data__ = new MapCache;\r\n  while (++index < length) {\r\n    this.add(values[index]);\r\n  }\r\n}\r\n\r\n/**\r\n * Adds `value` to the array cache.\r\n *\r\n * @private\r\n * @name add\r\n * @memberOf SetCache\r\n * @alias push\r\n * @param {*} value The value to cache.\r\n * @returns {Object} Returns the cache instance.\r\n */\r\nfunction setCacheAdd(value) {\r\n  this.__data__.set(value, HASH_UNDEFINED);\r\n  return this;\r\n}\r\n\r\n/**\r\n * Checks if `value` is in the array cache.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf SetCache\r\n * @param {*} value The value to search for.\r\n * @returns {number} Returns `true` if `value` is found, else `false`.\r\n */\r\nfunction setCacheHas(value) {\r\n  return this.__data__.has(value);\r\n}\r\n\r\n// Add methods to `SetCache`.\r\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\r\nSetCache.prototype.has = setCacheHas;\r\n\r\n/**\r\n * Creates a stack cache object to store key-value pairs.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction Stack(entries) {\r\n  var data = this.__data__ = new ListCache(entries);\r\n  this.size = data.size;\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the stack.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf Stack\r\n */\r\nfunction stackClear() {\r\n  this.__data__ = new ListCache;\r\n  this.size = 0;\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the stack.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction stackDelete(key) {\r\n  var data = this.__data__,\r\n      result = data['delete'](key);\r\n\r\n  this.size = data.size;\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the stack value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction stackGet(key) {\r\n  return this.__data__.get(key);\r\n}\r\n\r\n/**\r\n * Checks if a stack value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf Stack\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction stackHas(key) {\r\n  return this.__data__.has(key);\r\n}\r\n\r\n/**\r\n * Sets the stack `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the stack cache instance.\r\n */\r\nfunction stackSet(key, value) {\r\n  var data = this.__data__;\r\n  if (data instanceof ListCache) {\r\n    var pairs = data.__data__;\r\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\r\n      pairs.push([key, value]);\r\n      this.size = ++data.size;\r\n      return this;\r\n    }\r\n    data = this.__data__ = new MapCache(pairs);\r\n  }\r\n  data.set(key, value);\r\n  this.size = data.size;\r\n  return this;\r\n}\r\n\r\n// Add methods to `Stack`.\r\nStack.prototype.clear = stackClear;\r\nStack.prototype['delete'] = stackDelete;\r\nStack.prototype.get = stackGet;\r\nStack.prototype.has = stackHas;\r\nStack.prototype.set = stackSet;\r\n\r\n/**\r\n * Creates an array of the enumerable property names of the array-like `value`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @param {boolean} inherited Specify returning inherited property names.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction arrayLikeKeys(value, inherited) {\r\n  var isArr = isArray(value),\r\n      isArg = !isArr && isArguments(value),\r\n      isBuff = !isArr && !isArg && isBuffer(value),\r\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\r\n      skipIndexes = isArr || isArg || isBuff || isType,\r\n      result = skipIndexes ? baseTimes(value.length, String) : [],\r\n      length = result.length;\r\n\r\n  for (var key in value) {\r\n    if ((inherited || hasOwnProperty.call(value, key)) &&\r\n        !(skipIndexes && (\r\n           // Safari 9 has enumerable `arguments.length` in strict mode.\r\n           key == 'length' ||\r\n           // Node.js 0.10 has enumerable non-index properties on buffers.\r\n           (isBuff && (key == 'offset' || key == 'parent')) ||\r\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\r\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\r\n           // Skip index properties.\r\n           isIndex(key, length)\r\n        ))) {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the index at which the `key` is found in `array` of key-value pairs.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {*} key The key to search for.\r\n * @returns {number} Returns the index of the matched value, else `-1`.\r\n */\r\nfunction assocIndexOf(array, key) {\r\n  var length = array.length;\r\n  while (length--) {\r\n    if (eq(array[length][0], key)) {\r\n      return length;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n/**\r\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\r\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\r\n * symbols of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {Function} keysFunc The function to get the keys of `object`.\r\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\r\n * @returns {Array} Returns the array of property names and symbols.\r\n */\r\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\r\n  var result = keysFunc(object);\r\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\r\n}\r\n\r\n/**\r\n * The base implementation of `getTag` without fallbacks for buggy environments.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the `toStringTag`.\r\n */\r\nfunction baseGetTag(value) {\r\n  if (value == null) {\r\n    return value === undefined ? undefinedTag : nullTag;\r\n  }\r\n  return (symToStringTag && symToStringTag in Object(value))\r\n    ? getRawTag(value)\r\n    : objectToString(value);\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isArguments`.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n */\r\nfunction baseIsArguments(value) {\r\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isEqual` which supports partial comparisons\r\n * and tracks traversed objects.\r\n *\r\n * @private\r\n * @param {*} value The value to compare.\r\n * @param {*} other The other value to compare.\r\n * @param {boolean} bitmask The bitmask flags.\r\n *  1 - Unordered comparison\r\n *  2 - Partial comparison\r\n * @param {Function} [customizer] The function to customize comparisons.\r\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\r\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n */\r\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\r\n  if (value === other) {\r\n    return true;\r\n  }\r\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\r\n    return value !== value && other !== other;\r\n  }\r\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\r\n}\r\n\r\n/**\r\n * A specialized version of `baseIsEqual` for arrays and objects which performs\r\n * deep comparisons and tracks traversed objects enabling objects with circular\r\n * references to be compared.\r\n *\r\n * @private\r\n * @param {Object} object The object to compare.\r\n * @param {Object} other The other object to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\r\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n */\r\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\r\n  var objIsArr = isArray(object),\r\n      othIsArr = isArray(other),\r\n      objTag = objIsArr ? arrayTag : getTag(object),\r\n      othTag = othIsArr ? arrayTag : getTag(other);\r\n\r\n  objTag = objTag == argsTag ? objectTag : objTag;\r\n  othTag = othTag == argsTag ? objectTag : othTag;\r\n\r\n  var objIsObj = objTag == objectTag,\r\n      othIsObj = othTag == objectTag,\r\n      isSameTag = objTag == othTag;\r\n\r\n  if (isSameTag && isBuffer(object)) {\r\n    if (!isBuffer(other)) {\r\n      return false;\r\n    }\r\n    objIsArr = true;\r\n    objIsObj = false;\r\n  }\r\n  if (isSameTag && !objIsObj) {\r\n    stack || (stack = new Stack);\r\n    return (objIsArr || isTypedArray(object))\r\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\r\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\r\n  }\r\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\r\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\r\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\r\n\r\n    if (objIsWrapped || othIsWrapped) {\r\n      var objUnwrapped = objIsWrapped ? object.value() : object,\r\n          othUnwrapped = othIsWrapped ? other.value() : other;\r\n\r\n      stack || (stack = new Stack);\r\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\r\n    }\r\n  }\r\n  if (!isSameTag) {\r\n    return false;\r\n  }\r\n  stack || (stack = new Stack);\r\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isNative` without bad shim checks.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a native function,\r\n *  else `false`.\r\n */\r\nfunction baseIsNative(value) {\r\n  if (!isObject(value) || isMasked(value)) {\r\n    return false;\r\n  }\r\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\r\n  return pattern.test(toSource(value));\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n */\r\nfunction baseIsTypedArray(value) {\r\n  return isObjectLike(value) &&\r\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\r\n}\r\n\r\n/**\r\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction baseKeys(object) {\r\n  if (!isPrototype(object)) {\r\n    return nativeKeys(object);\r\n  }\r\n  var result = [];\r\n  for (var key in Object(object)) {\r\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * A specialized version of `baseIsEqualDeep` for arrays with support for\r\n * partial deep comparisons.\r\n *\r\n * @private\r\n * @param {Array} array The array to compare.\r\n * @param {Array} other The other array to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} stack Tracks traversed `array` and `other` objects.\r\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\r\n */\r\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\r\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\r\n      arrLength = array.length,\r\n      othLength = other.length;\r\n\r\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\r\n    return false;\r\n  }\r\n  // Assume cyclic values are equal.\r\n  var stacked = stack.get(array);\r\n  if (stacked && stack.get(other)) {\r\n    return stacked == other;\r\n  }\r\n  var index = -1,\r\n      result = true,\r\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\r\n\r\n  stack.set(array, other);\r\n  stack.set(other, array);\r\n\r\n  // Ignore non-index properties.\r\n  while (++index < arrLength) {\r\n    var arrValue = array[index],\r\n        othValue = other[index];\r\n\r\n    if (customizer) {\r\n      var compared = isPartial\r\n        ? customizer(othValue, arrValue, index, other, array, stack)\r\n        : customizer(arrValue, othValue, index, array, other, stack);\r\n    }\r\n    if (compared !== undefined) {\r\n      if (compared) {\r\n        continue;\r\n      }\r\n      result = false;\r\n      break;\r\n    }\r\n    // Recursively compare arrays (susceptible to call stack limits).\r\n    if (seen) {\r\n      if (!arraySome(other, function(othValue, othIndex) {\r\n            if (!cacheHas(seen, othIndex) &&\r\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\r\n              return seen.push(othIndex);\r\n            }\r\n          })) {\r\n        result = false;\r\n        break;\r\n      }\r\n    } else if (!(\r\n          arrValue === othValue ||\r\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\r\n        )) {\r\n      result = false;\r\n      break;\r\n    }\r\n  }\r\n  stack['delete'](array);\r\n  stack['delete'](other);\r\n  return result;\r\n}\r\n\r\n/**\r\n * A specialized version of `baseIsEqualDeep` for comparing objects of\r\n * the same `toStringTag`.\r\n *\r\n * **Note:** This function only supports comparing values with tags of\r\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\r\n *\r\n * @private\r\n * @param {Object} object The object to compare.\r\n * @param {Object} other The other object to compare.\r\n * @param {string} tag The `toStringTag` of the objects to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} stack Tracks traversed `object` and `other` objects.\r\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n */\r\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\r\n  switch (tag) {\r\n    case dataViewTag:\r\n      if ((object.byteLength != other.byteLength) ||\r\n          (object.byteOffset != other.byteOffset)) {\r\n        return false;\r\n      }\r\n      object = object.buffer;\r\n      other = other.buffer;\r\n\r\n    case arrayBufferTag:\r\n      if ((object.byteLength != other.byteLength) ||\r\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\r\n        return false;\r\n      }\r\n      return true;\r\n\r\n    case boolTag:\r\n    case dateTag:\r\n    case numberTag:\r\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\r\n      // Invalid dates are coerced to `NaN`.\r\n      return eq(+object, +other);\r\n\r\n    case errorTag:\r\n      return object.name == other.name && object.message == other.message;\r\n\r\n    case regexpTag:\r\n    case stringTag:\r\n      // Coerce regexes to strings and treat strings, primitives and objects,\r\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\r\n      // for more details.\r\n      return object == (other + '');\r\n\r\n    case mapTag:\r\n      var convert = mapToArray;\r\n\r\n    case setTag:\r\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\r\n      convert || (convert = setToArray);\r\n\r\n      if (object.size != other.size && !isPartial) {\r\n        return false;\r\n      }\r\n      // Assume cyclic values are equal.\r\n      var stacked = stack.get(object);\r\n      if (stacked) {\r\n        return stacked == other;\r\n      }\r\n      bitmask |= COMPARE_UNORDERED_FLAG;\r\n\r\n      // Recursively compare objects (susceptible to call stack limits).\r\n      stack.set(object, other);\r\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\r\n      stack['delete'](object);\r\n      return result;\r\n\r\n    case symbolTag:\r\n      if (symbolValueOf) {\r\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\r\n      }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * A specialized version of `baseIsEqualDeep` for objects with support for\r\n * partial deep comparisons.\r\n *\r\n * @private\r\n * @param {Object} object The object to compare.\r\n * @param {Object} other The other object to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} stack Tracks traversed `object` and `other` objects.\r\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n */\r\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\r\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\r\n      objProps = getAllKeys(object),\r\n      objLength = objProps.length,\r\n      othProps = getAllKeys(other),\r\n      othLength = othProps.length;\r\n\r\n  if (objLength != othLength && !isPartial) {\r\n    return false;\r\n  }\r\n  var index = objLength;\r\n  while (index--) {\r\n    var key = objProps[index];\r\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\r\n      return false;\r\n    }\r\n  }\r\n  // Assume cyclic values are equal.\r\n  var stacked = stack.get(object);\r\n  if (stacked && stack.get(other)) {\r\n    return stacked == other;\r\n  }\r\n  var result = true;\r\n  stack.set(object, other);\r\n  stack.set(other, object);\r\n\r\n  var skipCtor = isPartial;\r\n  while (++index < objLength) {\r\n    key = objProps[index];\r\n    var objValue = object[key],\r\n        othValue = other[key];\r\n\r\n    if (customizer) {\r\n      var compared = isPartial\r\n        ? customizer(othValue, objValue, key, other, object, stack)\r\n        : customizer(objValue, othValue, key, object, other, stack);\r\n    }\r\n    // Recursively compare objects (susceptible to call stack limits).\r\n    if (!(compared === undefined\r\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\r\n          : compared\r\n        )) {\r\n      result = false;\r\n      break;\r\n    }\r\n    skipCtor || (skipCtor = key == 'constructor');\r\n  }\r\n  if (result && !skipCtor) {\r\n    var objCtor = object.constructor,\r\n        othCtor = other.constructor;\r\n\r\n    // Non `Object` object instances with different constructors are not equal.\r\n    if (objCtor != othCtor &&\r\n        ('constructor' in object && 'constructor' in other) &&\r\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\r\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\r\n      result = false;\r\n    }\r\n  }\r\n  stack['delete'](object);\r\n  stack['delete'](other);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates an array of own enumerable property names and symbols of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names and symbols.\r\n */\r\nfunction getAllKeys(object) {\r\n  return baseGetAllKeys(object, keys, getSymbols);\r\n}\r\n\r\n/**\r\n * Gets the data for `map`.\r\n *\r\n * @private\r\n * @param {Object} map The map to query.\r\n * @param {string} key The reference key.\r\n * @returns {*} Returns the map data.\r\n */\r\nfunction getMapData(map, key) {\r\n  var data = map.__data__;\r\n  return isKeyable(key)\r\n    ? data[typeof key == 'string' ? 'string' : 'hash']\r\n    : data.map;\r\n}\r\n\r\n/**\r\n * Gets the native function at `key` of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {string} key The key of the method to get.\r\n * @returns {*} Returns the function if it's native, else `undefined`.\r\n */\r\nfunction getNative(object, key) {\r\n  var value = getValue(object, key);\r\n  return baseIsNative(value) ? value : undefined;\r\n}\r\n\r\n/**\r\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the raw `toStringTag`.\r\n */\r\nfunction getRawTag(value) {\r\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\r\n      tag = value[symToStringTag];\r\n\r\n  try {\r\n    value[symToStringTag] = undefined;\r\n    var unmasked = true;\r\n  } catch (e) {}\r\n\r\n  var result = nativeObjectToString.call(value);\r\n  if (unmasked) {\r\n    if (isOwn) {\r\n      value[symToStringTag] = tag;\r\n    } else {\r\n      delete value[symToStringTag];\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates an array of the own enumerable symbols of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of symbols.\r\n */\r\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\r\n  if (object == null) {\r\n    return [];\r\n  }\r\n  object = Object(object);\r\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\r\n    return propertyIsEnumerable.call(object, symbol);\r\n  });\r\n};\r\n\r\n/**\r\n * Gets the `toStringTag` of `value`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the `toStringTag`.\r\n */\r\nvar getTag = baseGetTag;\r\n\r\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\r\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\r\n    (Map && getTag(new Map) != mapTag) ||\r\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\r\n    (Set && getTag(new Set) != setTag) ||\r\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\r\n  getTag = function(value) {\r\n    var result = baseGetTag(value),\r\n        Ctor = result == objectTag ? value.constructor : undefined,\r\n        ctorString = Ctor ? toSource(Ctor) : '';\r\n\r\n    if (ctorString) {\r\n      switch (ctorString) {\r\n        case dataViewCtorString: return dataViewTag;\r\n        case mapCtorString: return mapTag;\r\n        case promiseCtorString: return promiseTag;\r\n        case setCtorString: return setTag;\r\n        case weakMapCtorString: return weakMapTag;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Checks if `value` is a valid array-like index.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n */\r\nfunction isIndex(value, length) {\r\n  length = length == null ? MAX_SAFE_INTEGER : length;\r\n  return !!length &&\r\n    (typeof value == 'number' || reIsUint.test(value)) &&\r\n    (value > -1 && value % 1 == 0 && value < length);\r\n}\r\n\r\n/**\r\n * Checks if `value` is suitable for use as unique object key.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\r\n */\r\nfunction isKeyable(value) {\r\n  var type = typeof value;\r\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\r\n    ? (value !== '__proto__')\r\n    : (value === null);\r\n}\r\n\r\n/**\r\n * Checks if `func` has its source masked.\r\n *\r\n * @private\r\n * @param {Function} func The function to check.\r\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\r\n */\r\nfunction isMasked(func) {\r\n  return !!maskSrcKey && (maskSrcKey in func);\r\n}\r\n\r\n/**\r\n * Checks if `value` is likely a prototype object.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\r\n */\r\nfunction isPrototype(value) {\r\n  var Ctor = value && value.constructor,\r\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\r\n\r\n  return value === proto;\r\n}\r\n\r\n/**\r\n * Converts `value` to a string using `Object.prototype.toString`.\r\n *\r\n * @private\r\n * @param {*} value The value to convert.\r\n * @returns {string} Returns the converted string.\r\n */\r\nfunction objectToString(value) {\r\n  return nativeObjectToString.call(value);\r\n}\r\n\r\n/**\r\n * Converts `func` to its source code.\r\n *\r\n * @private\r\n * @param {Function} func The function to convert.\r\n * @returns {string} Returns the source code.\r\n */\r\nfunction toSource(func) {\r\n  if (func != null) {\r\n    try {\r\n      return funcToString.call(func);\r\n    } catch (e) {}\r\n    try {\r\n      return (func + '');\r\n    } catch (e) {}\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * Performs a\r\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * comparison between two values to determine if they are equivalent.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to compare.\r\n * @param {*} other The other value to compare.\r\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n * @example\r\n *\r\n * var object = { 'a': 1 };\r\n * var other = { 'a': 1 };\r\n *\r\n * _.eq(object, object);\r\n * // => true\r\n *\r\n * _.eq(object, other);\r\n * // => false\r\n *\r\n * _.eq('a', 'a');\r\n * // => true\r\n *\r\n * _.eq('a', Object('a'));\r\n * // => false\r\n *\r\n * _.eq(NaN, NaN);\r\n * // => true\r\n */\r\nfunction eq(value, other) {\r\n  return value === other || (value !== value && other !== other);\r\n}\r\n\r\n/**\r\n * Checks if `value` is likely an `arguments` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n *  else `false`.\r\n * @example\r\n *\r\n * _.isArguments(function() { return arguments; }());\r\n * // => true\r\n *\r\n * _.isArguments([1, 2, 3]);\r\n * // => false\r\n */\r\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\r\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\r\n    !propertyIsEnumerable.call(value, 'callee');\r\n};\r\n\r\n/**\r\n * Checks if `value` is classified as an `Array` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\r\n * @example\r\n *\r\n * _.isArray([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArray(document.body.children);\r\n * // => false\r\n *\r\n * _.isArray('abc');\r\n * // => false\r\n *\r\n * _.isArray(_.noop);\r\n * // => false\r\n */\r\nvar isArray = Array.isArray;\r\n\r\n/**\r\n * Checks if `value` is array-like. A value is considered array-like if it's\r\n * not a function and has a `value.length` that's an integer greater than or\r\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n * @example\r\n *\r\n * _.isArrayLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArrayLike(document.body.children);\r\n * // => true\r\n *\r\n * _.isArrayLike('abc');\r\n * // => true\r\n *\r\n * _.isArrayLike(_.noop);\r\n * // => false\r\n */\r\nfunction isArrayLike(value) {\r\n  return value != null && isLength(value.length) && !isFunction(value);\r\n}\r\n\r\n/**\r\n * Checks if `value` is a buffer.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.3.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\r\n * @example\r\n *\r\n * _.isBuffer(new Buffer(2));\r\n * // => true\r\n *\r\n * _.isBuffer(new Uint8Array(2));\r\n * // => false\r\n */\r\nvar isBuffer = nativeIsBuffer || stubFalse;\r\n\r\n/**\r\n * Performs a deep comparison between two values to determine if they are\r\n * equivalent.\r\n *\r\n * **Note:** This method supports comparing arrays, array buffers, booleans,\r\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\r\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\r\n * by their own, not inherited, enumerable properties. Functions and DOM\r\n * nodes are compared by strict equality, i.e. `===`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to compare.\r\n * @param {*} other The other value to compare.\r\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n * @example\r\n *\r\n * var object = { 'a': 1 };\r\n * var other = { 'a': 1 };\r\n *\r\n * _.isEqual(object, other);\r\n * // => true\r\n *\r\n * object === other;\r\n * // => false\r\n */\r\nfunction isEqual(value, other) {\r\n  return baseIsEqual(value, other);\r\n}\r\n\r\n/**\r\n * Checks if `value` is classified as a `Function` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n * @example\r\n *\r\n * _.isFunction(_);\r\n * // => true\r\n *\r\n * _.isFunction(/abc/);\r\n * // => false\r\n */\r\nfunction isFunction(value) {\r\n  if (!isObject(value)) {\r\n    return false;\r\n  }\r\n  // The use of `Object#toString` avoids issues with the `typeof` operator\r\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\r\n  var tag = baseGetTag(value);\r\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\r\n}\r\n\r\n/**\r\n * Checks if `value` is a valid array-like length.\r\n *\r\n * **Note:** This method is loosely based on\r\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\r\n * @example\r\n *\r\n * _.isLength(3);\r\n * // => true\r\n *\r\n * _.isLength(Number.MIN_VALUE);\r\n * // => false\r\n *\r\n * _.isLength(Infinity);\r\n * // => false\r\n *\r\n * _.isLength('3');\r\n * // => false\r\n */\r\nfunction isLength(value) {\r\n  return typeof value == 'number' &&\r\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\r\n}\r\n\r\n/**\r\n * Checks if `value` is the\r\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n * @example\r\n *\r\n * _.isObject({});\r\n * // => true\r\n *\r\n * _.isObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObject(_.noop);\r\n * // => true\r\n *\r\n * _.isObject(null);\r\n * // => false\r\n */\r\nfunction isObject(value) {\r\n  var type = typeof value;\r\n  return value != null && (type == 'object' || type == 'function');\r\n}\r\n\r\n/**\r\n * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n * and has a `typeof` result of \"object\".\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n * @example\r\n *\r\n * _.isObjectLike({});\r\n * // => true\r\n *\r\n * _.isObjectLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObjectLike(_.noop);\r\n * // => false\r\n *\r\n * _.isObjectLike(null);\r\n * // => false\r\n */\r\nfunction isObjectLike(value) {\r\n  return value != null && typeof value == 'object';\r\n}\r\n\r\n/**\r\n * Checks if `value` is classified as a typed array.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n * @example\r\n *\r\n * _.isTypedArray(new Uint8Array);\r\n * // => true\r\n *\r\n * _.isTypedArray([]);\r\n * // => false\r\n */\r\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\r\n\r\n/**\r\n * Creates an array of the own enumerable property names of `object`.\r\n *\r\n * **Note:** Non-object values are coerced to objects. See the\r\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\r\n * for more details.\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category Object\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n * @example\r\n *\r\n * function Foo() {\r\n *   this.a = 1;\r\n *   this.b = 2;\r\n * }\r\n *\r\n * Foo.prototype.c = 3;\r\n *\r\n * _.keys(new Foo);\r\n * // => ['a', 'b'] (iteration order is not guaranteed)\r\n *\r\n * _.keys('hi');\r\n * // => ['0', '1']\r\n */\r\nfunction keys(object) {\r\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\r\n}\r\n\r\n/**\r\n * This method returns a new empty array.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.13.0\r\n * @category Util\r\n * @returns {Array} Returns the new empty array.\r\n * @example\r\n *\r\n * var arrays = _.times(2, _.stubArray);\r\n *\r\n * console.log(arrays);\r\n * // => [[], []]\r\n *\r\n * console.log(arrays[0] === arrays[1]);\r\n * // => false\r\n */\r\nfunction stubArray() {\r\n  return [];\r\n}\r\n\r\n/**\r\n * This method returns `false`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.13.0\r\n * @category Util\r\n * @returns {boolean} Returns `false`.\r\n * @example\r\n *\r\n * _.times(2, _.stubFalse);\r\n * // => [false, false]\r\n */\r\nfunction stubFalse() {\r\n  return false;\r\n}\r\n\r\nmodule.exports = isEqual;\r\n","\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\r\nimport browser from '../browser';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\nlet gumFunction = null;\r\n\r\n/**\r\n * Handles obtaining a stream from a screen capture on different browsers.\r\n */\r\nconst ScreenObtainer = {\r\n    /**\r\n     * If not <tt>null</tt> it means that the initialization process is still in\r\n     * progress. It is used to make desktop stream request wait and continue\r\n     * after it's done.\r\n     * {@type Promise|null}\r\n     */\r\n\r\n    obtainStream: null,\r\n\r\n    /**\r\n     * Initializes the function used to obtain a screen capture\r\n     * (this.obtainStream).\r\n     *\r\n     * @param {object} options\r\n     * @param {Function} gum GUM method\r\n     */\r\n    init(options = {}, gum) {\r\n        this.options = options;\r\n        gumFunction = gum;\r\n\r\n        this.obtainStream = this._createObtainStreamMethod();\r\n\r\n        if (!this.obtainStream) {\r\n            logger.info('Desktop sharing disabled');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns a method which will be used to obtain the screen sharing stream\r\n     * (based on the browser type).\r\n     *\r\n     * @returns {Function}\r\n     * @private\r\n     */\r\n    _createObtainStreamMethod() {\r\n        if (browser.isNWJS()) {\r\n            return (_, onSuccess, onFailure) => {\r\n                window.JitsiMeetNW.obtainDesktopStream(\r\n                    onSuccess,\r\n                    (error, constraints) => {\r\n                        let jitsiError;\r\n\r\n                        // FIXME:\r\n                        // This is very very dirty fix for recognising that the\r\n                        // user have clicked the cancel button from the Desktop\r\n                        // sharing pick window. The proper solution would be to\r\n                        // detect this in the NWJS application by checking the\r\n                        // streamId === \"\". Even better solution would be to\r\n                        // stop calling GUM from the NWJS app and just pass the\r\n                        // streamId to lib-jitsi-meet. This way the desktop\r\n                        // sharing implementation for NWJS and chrome extension\r\n                        // will be the same and lib-jitsi-meet will be able to\r\n                        // control the constraints, check the streamId, etc.\r\n                        //\r\n                        // I cannot find documentation about \"InvalidStateError\"\r\n                        // but this is what we are receiving from GUM when the\r\n                        // streamId for the desktop sharing is \"\".\r\n\r\n                        if (error && error.name === 'InvalidStateError') {\r\n                            jitsiError = new JitsiTrackError(\r\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\r\n                            );\r\n                        } else {\r\n                            jitsiError = new JitsiTrackError(\r\n                                error, constraints, [ 'desktop' ]);\r\n                        }\r\n                        (typeof onFailure === 'function')\r\n                            && onFailure(jitsiError);\r\n                    });\r\n            };\r\n        } else if (browser.isElectron()) {\r\n            return this.obtainScreenOnElectron;\r\n        } else if (browser.supportsGetDisplayMedia()) {\r\n            return this.obtainScreenFromGetDisplayMedia;\r\n        }\r\n        logger.log('Screen sharing not supported on ', browser.getName());\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Checks whether obtaining a screen capture is supported in the current\r\n     * environment.\r\n     * @returns {boolean}\r\n     */\r\n    isSupported() {\r\n        return this.obtainStream !== null;\r\n    },\r\n\r\n    /**\r\n     * Obtains a screen capture stream on Electron.\r\n     *\r\n     * @param {Object} [options] - Screen sharing options.\r\n     * @param {Array<string>} [options.desktopSharingSources] - Array with the\r\n     * sources that have to be displayed in the desktop picker window ('screen',\r\n     * 'window', etc.).\r\n     * @param onSuccess - Success callback.\r\n     * @param onFailure - Failure callback.\r\n     */\r\n    obtainScreenOnElectron(options = {}, onSuccess, onFailure) {\r\n        if (window.JitsiMeetScreenObtainer\r\n            && window.JitsiMeetScreenObtainer.openDesktopPicker) {\r\n            const { desktopSharingSources, gumOptions } = options;\r\n\r\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\r\n                {\r\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\r\n                },\r\n                (streamId, streamType, screenShareAudio = false) =>\r\n                    onGetStreamResponse(\r\n                        {\r\n                            response: {\r\n                                streamId,\r\n                                streamType,\r\n                                screenShareAudio\r\n                            },\r\n                            gumOptions\r\n                        },\r\n                        onSuccess,\r\n                        onFailure\r\n                    ),\r\n                err => onFailure(new JitsiTrackError(\r\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\r\n                    err\r\n                ))\r\n            );\r\n        } else {\r\n            onFailure(new JitsiTrackError(\r\n                JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Obtains a screen capture stream using getDisplayMedia.\r\n     *\r\n     * @param callback - The success callback.\r\n     * @param errorCallback - The error callback.\r\n     */\r\n    obtainScreenFromGetDisplayMedia(options, callback, errorCallback) {\r\n        logger.info('Using getDisplayMedia for screen sharing');\r\n\r\n        let getDisplayMedia;\r\n\r\n        if (navigator.getDisplayMedia) {\r\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\r\n        } else {\r\n            // eslint-disable-next-line max-len\r\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\r\n        }\r\n\r\n        getDisplayMedia({\r\n            video: true,\r\n            audio: true,\r\n            cursor: 'always'\r\n        })\r\n            .then(stream => {\r\n                let applyConstraintsPromise;\r\n\r\n                if (stream\r\n                    && stream.getTracks()\r\n                    && stream.getTracks().length > 0) {\r\n                    const videoTrack = stream.getVideoTracks()[0];\r\n\r\n                    // Apply video track constraint.\r\n                    if (videoTrack) {\r\n                        applyConstraintsPromise = videoTrack.applyConstraints(options.trackOptions);\r\n                    }\r\n                } else {\r\n                    applyConstraintsPromise = Promise.resolve();\r\n                }\r\n\r\n                applyConstraintsPromise.then(() =>\r\n                    callback({\r\n                        stream,\r\n                        sourceId: stream.id\r\n                    }));\r\n            })\r\n            .catch(error => {\r\n                const errorDetails = {\r\n                    errorName: error && error.name,\r\n                    errorMsg: error && error.message,\r\n                    errorStack: error && error.stack\r\n                };\r\n\r\n                logger.error('getDisplayMedia error', errorDetails);\r\n\r\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\r\n                    // On Chrome this is the only thing different between error returned when user cancels\r\n                    // and when no permission was given on the OS level.\r\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\r\n\r\n                    return;\r\n                }\r\n\r\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\r\n            });\r\n    }\r\n};\r\n\r\n/**\r\n * Handles response from external application / extension and calls GUM to\r\n * receive the desktop streams or reports error.\r\n * @param {object} options\r\n * @param {object} options.response\r\n * @param {string} options.response.streamId - the streamId for the desktop\r\n * stream.\r\n * @param {bool}   options.response.screenShareAudio - Used by electron clients to\r\n * enable system audio screen sharing.\r\n * @param {string} options.response.error - error to be reported.\r\n * @param {object} options.gumOptions - options passed to GUM.\r\n * @param {Function} onSuccess - callback for success.\r\n * @param {Function} onFailure - callback for failure.\r\n * @param {object} gumOptions - options passed to GUM.\r\n */\r\nfunction onGetStreamResponse(\r\n        options = {\r\n            response: {},\r\n            gumOptions: {}\r\n        },\r\n        onSuccess,\r\n        onFailure) {\r\n    const { streamId, streamType, screenShareAudio, error } = options.response || {};\r\n\r\n    if (streamId) {\r\n        const gumOptions = {\r\n            desktopStream: streamId,\r\n            screenShareAudio,\r\n            ...options.gumOptions\r\n        };\r\n\r\n        gumFunction([ 'desktop' ], gumOptions)\r\n            .then(stream => onSuccess({\r\n                stream,\r\n                sourceId: streamId,\r\n                sourceType: streamType\r\n            }), onFailure);\r\n    } else {\r\n        // As noted in Chrome Desktop Capture API:\r\n        // If user didn't select any source (i.e. canceled the prompt)\r\n        // then the callback is called with an empty streamId.\r\n        if (streamId === '') {\r\n            onFailure(new JitsiTrackError(\r\n                JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\r\n\r\n            return;\r\n        }\r\n\r\n        onFailure(new JitsiTrackError(\r\n            JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR,\r\n            error));\r\n    }\r\n}\r\n\r\nexport default ScreenObtainer;\r\n","const currentExecutingScript = require('current-executing-script');\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Implements utility functions which facilitate the dealing with scripts such\r\n * as the download and execution of a JavaScript file.\r\n */\r\nconst ScriptUtil = {\r\n    /**\r\n     * Loads a script from a specific source.\r\n     *\r\n     * @param src the source from the which the script is to be (down)loaded\r\n     * @param async true to asynchronously load the script or false to\r\n     * synchronously load the script\r\n     * @param prepend true to schedule the loading of the script as soon as\r\n     * possible or false to schedule the loading of the script at the end of the\r\n     * scripts known at the time\r\n     * @param relativeURL whether we need load the library from url relative\r\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\r\n     * library from different location than the app that is using it\r\n     * @param loadCallback on load callback function\r\n     * @param errorCallback callback to be called on error loading the script\r\n     */\r\n    loadScript(\r\n            src,\r\n            async,\r\n            prepend,\r\n            relativeURL,\r\n            loadCallback,\r\n            errorCallback) {\r\n        const d = document;\r\n        const tagName = 'script';\r\n        const script = d.createElement(tagName);\r\n        const referenceNode = d.getElementsByTagName(tagName)[0];\r\n\r\n        script.async = async;\r\n\r\n        if (relativeURL) {\r\n            // finds the src url of the current loaded script\r\n            // and use it as base of the src supplied argument\r\n            const scriptEl = currentExecutingScript();\r\n\r\n            if (scriptEl) {\r\n                const scriptSrc = scriptEl.src;\r\n                const baseScriptSrc\r\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\r\n\r\n                if (scriptSrc && baseScriptSrc) {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    src = baseScriptSrc + src;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (loadCallback) {\r\n            script.onload = loadCallback;\r\n        }\r\n        if (errorCallback) {\r\n            script.onerror = errorCallback;\r\n        }\r\n\r\n        script.src = src;\r\n        if (prepend) {\r\n            referenceNode.parentNode.insertBefore(script, referenceNode);\r\n        } else {\r\n            referenceNode.parentNode.appendChild(script);\r\n        }\r\n    }\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\nmodule.exports = ScriptUtil;\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Default value of 500 milliseconds for\r\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\r\n *\r\n * @type {number}\r\n */\r\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\r\n\r\n/**\r\n * Default value of 2000 milliseconds for\r\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\r\n *\r\n * @type {number}\r\n */\r\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\r\n\r\n/**\r\n * The time to wait a track to be restored. Track which was out of lastN\r\n * should be inactive and when entering lastN it becomes restoring and when\r\n * data is received from bridge it will become active, but if no data is\r\n * received for some time we set status of that participant connection to\r\n * interrupted.\r\n * @type {number}\r\n */\r\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\r\n\r\n/**\r\n * Participant connection statuses.\r\n *\r\n * @type {{\r\n *      ACTIVE: string,\r\n *      INACTIVE: string,\r\n *      INTERRUPTED: string,\r\n *      RESTORING: string\r\n * }}\r\n */\r\nexport const ParticipantConnectionStatus = {\r\n    /**\r\n     * Status indicating that connection is currently active.\r\n     */\r\n    ACTIVE: 'active',\r\n\r\n    /**\r\n     * Status indicating that connection is currently inactive.\r\n     * Inactive means the connection was stopped on purpose from the bridge,\r\n     * like exiting lastN or adaptivity decided to drop video because of not\r\n     * enough bandwidth.\r\n     */\r\n    INACTIVE: 'inactive',\r\n\r\n    /**\r\n     * Status indicating that connection is currently interrupted.\r\n     */\r\n    INTERRUPTED: 'interrupted',\r\n\r\n    /**\r\n     * Status indicating that connection is currently restoring.\r\n     */\r\n    RESTORING: 'restoring'\r\n};\r\n\r\n/**\r\n * Class is responsible for emitting\r\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\r\n */\r\nexport default class ParticipantConnectionStatusHandler {\r\n    /* eslint-disable max-params*/\r\n    /**\r\n     * Calculates the new {@link ParticipantConnectionStatus} based on\r\n     * the values given for some specific remote user. It is assumed that\r\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\r\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\r\n     * data from the user for the last 15 seconds.\r\n     * @param {boolean} isInLastN indicates whether the user is in the last N\r\n     * set. When set to false it means that JVB is not sending any video for\r\n     * the user.\r\n     * @param {boolean} isRestoringTimedout if true it means that the user has\r\n     * been outside of last N too long to be considered\r\n     * {@link ParticipantConnectionStatus.RESTORING}.\r\n     * @param {boolean} isVideoMuted true if the user is video muted and we\r\n     * should not expect to receive any video.\r\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\r\n     * frozen detection then it will be set to true when the video track is\r\n     * frozen. If the current browser does not support frozen detection the it's\r\n     * always false.\r\n     * @return {ParticipantConnectionStatus} the new connection status for\r\n     * the user for whom the values above were provided.\r\n     * @private\r\n     */\r\n    static _getNewStateForJvbMode(\r\n            isConnectionActiveByJvb,\r\n            isInLastN,\r\n            isRestoringTimedout,\r\n            isVideoMuted,\r\n            isVideoTrackFrozen) {\r\n        if (!isConnectionActiveByJvb) {\r\n            // when there is a connection problem signaled from jvb\r\n            // it means no media was flowing for at least 15secs, so both audio\r\n            // and video are most likely interrupted\r\n            return ParticipantConnectionStatus.INTERRUPTED;\r\n        } else if (isVideoMuted) {\r\n            // If the connection is active according to JVB and the user is\r\n            // video muted there is no way for the connection to be inactive,\r\n            // because the detection logic below only makes sense for video.\r\n            return ParticipantConnectionStatus.ACTIVE;\r\n        }\r\n\r\n        // Logic when isVideoTrackFrozen is supported\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n            if (!isVideoTrackFrozen) {\r\n                // If the video is playing we're good\r\n                return ParticipantConnectionStatus.ACTIVE;\r\n            } else if (isInLastN) {\r\n                return isRestoringTimedout\r\n                    ? ParticipantConnectionStatus.INTERRUPTED\r\n                    : ParticipantConnectionStatus.RESTORING;\r\n            }\r\n\r\n            return ParticipantConnectionStatus.INACTIVE;\r\n        }\r\n\r\n        // Because this browser is incapable of detecting frozen video we must\r\n        // rely on the lastN value\r\n        return isInLastN\r\n            ? ParticipantConnectionStatus.ACTIVE\r\n            : ParticipantConnectionStatus.INACTIVE;\r\n    }\r\n\r\n    /* eslint-enable max-params*/\r\n\r\n    /**\r\n     * In P2P mode we don't care about any values coming from the JVB and\r\n     * the connection status can be only active or interrupted.\r\n     * @param {boolean} isVideoMuted the user if video muted\r\n     * @param {boolean} isVideoTrackFrozen true if the video track for\r\n     * the remote user is currently frozen. If the current browser does not\r\n     * support video frozen detection then it's always false.\r\n     * @return {ParticipantConnectionStatus}\r\n     * @private\r\n     */\r\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\r\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\r\n            // There's no way to detect problems in P2P when there's no video\r\n            // track frozen detection...\r\n            return ParticipantConnectionStatus.ACTIVE;\r\n        }\r\n\r\n        return isVideoMuted || !isVideoTrackFrozen\r\n            ? ParticipantConnectionStatus.ACTIVE\r\n            : ParticipantConnectionStatus.INTERRUPTED;\r\n    }\r\n\r\n    /**\r\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\r\n     *\r\n     * @constructor\r\n     * @param {RTC} rtc the RTC service instance\r\n     * @param {JitsiConference} conference parent conference instance\r\n     * @param {Object} options\r\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\r\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\r\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\r\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\r\n     */\r\n    constructor(rtc, conference, options) {\r\n        this.rtc = rtc;\r\n        this.conference = conference;\r\n\r\n        /**\r\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\r\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\r\n         * window.setTimeout.\r\n         * @type {Object.<string, number>}\r\n         */\r\n        this.trackTimers = {};\r\n\r\n        /**\r\n         * This map holds the endpoint connection status received from the JVB\r\n         * (as it might be different than the one stored in JitsiParticipant).\r\n         * Required for getting back in sync when remote video track is removed.\r\n         * @type {Object.<string, boolean>}\r\n         */\r\n        this.connStatusFromJvb = { };\r\n\r\n        /**\r\n         * If video track frozen detection through RTC mute event is supported,\r\n         * we wait some time until video track is considered frozen. But because\r\n         * when the user falls out of last N it is expected for the video to\r\n         * freeze this timeout must be significantly reduced in \"out of last N\"\r\n         * case.\r\n         *\r\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\r\n         * user is not in last N.\r\n         * @type {number}\r\n         */\r\n        this.outOfLastNTimeout\r\n            = typeof options.outOfLastNTimeout === 'number'\r\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\r\n\r\n        /**\r\n         * How long we're going to wait after the RTC video track muted event\r\n         * for the corresponding signalling mute event, before the connection\r\n         * interrupted is fired. The default value is\r\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\r\n         *\r\n         * @type {number} amount of time in milliseconds\r\n         */\r\n        this.rtcMuteTimeout\r\n            = typeof options.rtcMuteTimeout === 'number'\r\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\r\n\r\n        /**\r\n         * This map holds a timestamp indicating  when participant's video track\r\n         * was RTC muted (it is assumed that each participant can have only 1\r\n         * video track at a time). The purpose of storing the timestamp is to\r\n         * avoid the transition to disconnected status in case of legitimate\r\n         * video mute operation where the signalling video muted event can\r\n         * arrive shortly after RTC muted event.\r\n         *\r\n         * The key is participant's ID which is the same as endpoint id in\r\n         * the Colibri conference allocated on the JVB.\r\n         *\r\n         * The value is a timestamp measured in milliseconds obtained with\r\n         * <tt>Date.now()</tt>.\r\n         *\r\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\r\n         *       implemented in JitsiLocalTrack by extending the event to\r\n         *       the remote track and allowing to set different timeout for\r\n         *       local and remote tracks.\r\n         *\r\n         * @type {Object.<string, number>}\r\n         */\r\n        this.rtcMutedTimestamp = { };\r\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\r\n\r\n        /**\r\n         * This map holds the timestamps indicating when participant's video\r\n         * entered lastN set. Participants entering lastN will have connection\r\n         * status restoring and when we start receiving video will become\r\n         * active, but if video is not received for certain time\r\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\r\n         * will become interrupted.\r\n         *\r\n         * @type {Map<string, number>}\r\n         */\r\n        this.enteredLastNTimestamp = new Map();\r\n\r\n        /**\r\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\r\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\r\n         * scheduled using window.setTimeout.\r\n         *\r\n         * @type {Map<string, number>}\r\n         */\r\n        this.restoringTimers = new Map();\r\n\r\n        /**\r\n         * A map that holds the current connection status (along with all the internal events that happen\r\n         * while in that state).\r\n         *\r\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\r\n         */\r\n        this.connectionStatusMap = new Map();\r\n    }\r\n\r\n    /**\r\n     * Gets the video frozen timeout for given user.\r\n     * @param {string} id endpoint/participant ID\r\n     * @return {number} how long are we going to wait since RTC video muted\r\n     * even, before a video track is considered frozen.\r\n     * @private\r\n     */\r\n    _getVideoFrozenTimeout(id) {\r\n        return this.rtc.isInLastN(id)\r\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\r\n    }\r\n\r\n    /**\r\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\r\n     * listeners.\r\n     */\r\n    init() {\r\n\r\n        this._onEndpointConnStatusChanged\r\n            = this.onEndpointConnStatusChanged.bind(this);\r\n\r\n        this.rtc.addListener(\r\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n            this._onEndpointConnStatusChanged);\r\n\r\n        // Handles P2P status changes\r\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\r\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\r\n\r\n        // Used to send analytics events for the participant that left the call.\r\n        this._onUserLeft = this.onUserLeft.bind(this);\r\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\r\n        // events for video type tracks when they stop receiving data which is\r\n        // often a sign that remote user is having connectivity issues\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n\r\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\r\n            this.rtc.addListener(\r\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\r\n\r\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\r\n            this.rtc.addListener(\r\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\r\n\r\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\r\n            // event handlers\r\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\r\n            this.conference.on(\r\n                JitsiConferenceEvents.TRACK_ADDED,\r\n                this._onRemoteTrackAdded);\r\n\r\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\r\n            this.conference.on(\r\n                JitsiConferenceEvents.TRACK_REMOVED,\r\n                this._onRemoteTrackRemoved);\r\n\r\n            // Listened which will be bound to JitsiRemoteTrack to listen for\r\n            // signalling mute/unmute events.\r\n            this._onSignallingMuteChanged\r\n                = this.onSignallingMuteChanged.bind(this);\r\n\r\n            // Used to send an analytics event when the video type changes.\r\n            this._onTrackVideoTypeChanged\r\n                = this.onTrackVideoTypeChanged.bind(this);\r\n        }\r\n\r\n        this._onLastNChanged = this._onLastNChanged.bind(this);\r\n        this.conference.on(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            this._onLastNChanged);\r\n\r\n        this._onLastNValueChanged\r\n            = this.refreshConnectionStatusForAll.bind(this);\r\n        this.rtc.on(\r\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\r\n    }\r\n\r\n    /**\r\n     * Removes all event listeners and disposes of all resources held by this\r\n     * instance.\r\n     */\r\n    dispose() {\r\n\r\n        this.rtc.removeListener(\r\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n            this._onEndpointConnStatusChanged);\r\n\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n            this.rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_MUTE,\r\n                this._onTrackRtcMuted);\r\n            this.rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_UNMUTE,\r\n                this._onTrackRtcUnmuted);\r\n\r\n            this.conference.off(\r\n                JitsiConferenceEvents.TRACK_ADDED,\r\n                this._onRemoteTrackAdded);\r\n            this.conference.off(\r\n                JitsiConferenceEvents.TRACK_REMOVED,\r\n                this._onRemoteTrackRemoved);\r\n        }\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            this._onLastNChanged);\r\n\r\n        this.rtc.removeListener(\r\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n        const participantIds = Object.keys(this.trackTimers);\r\n\r\n        for (const participantId of participantIds) {\r\n            this.clearTimeout(participantId);\r\n            this.clearRtcMutedTimestamp(participantId);\r\n        }\r\n\r\n        for (const id in this.connectionStatusMap) {\r\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\r\n                this.onUserLeft(id);\r\n            }\r\n        }\r\n\r\n        // Clear RTC connection status cache\r\n        this.connStatusFromJvb = {};\r\n    }\r\n\r\n    /**\r\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\r\n     * notification over the data channel from the bridge about endpoint's\r\n     * connection status update.\r\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\r\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\r\n     */\r\n    onEndpointConnStatusChanged(endpointId, isActive) {\r\n\r\n        logger.debug(\r\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\r\n                endpointId}: ${isActive}`);\r\n\r\n        // Filter out events for the local JID for now\r\n        if (endpointId !== this.conference.myUserId()) {\r\n            // Store the status received over the data channels\r\n            this.connStatusFromJvb[endpointId] = isActive;\r\n            this.figureOutConnectionStatus(endpointId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes connection status.\r\n     * @param {JitsiParticipant} participant\r\n     * @param newStatus\r\n     */\r\n    _changeConnectionStatus(participant, newStatus) {\r\n        if (participant.getConnectionStatus() !== newStatus) {\r\n\r\n            const endpointId = participant.getId();\r\n\r\n            participant._setConnectionStatus(newStatus);\r\n\r\n            logger.debug(\r\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\r\n                    newStatus}`);\r\n\r\n            // Log the event on CallStats\r\n            Statistics.sendLog(\r\n                JSON.stringify({\r\n                    id: 'peer.conn.status',\r\n                    participant: endpointId,\r\n                    status: newStatus\r\n                }));\r\n\r\n\r\n            this.conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\r\n                endpointId, newStatus);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the postponed \"connection interrupted\" event which was previously\r\n     * scheduled as a timeout on RTC 'onmute' event.\r\n     *\r\n     * @param {string} participantId - The participant for which the \"connection\r\n     * interrupted\" timeout was scheduled.\r\n     */\r\n    clearTimeout(participantId) {\r\n        if (this.trackTimers[participantId]) {\r\n            window.clearTimeout(this.trackTimers[participantId]);\r\n            this.trackTimers[participantId] = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the timestamp of the RTC muted event for participant's video track\r\n     * @param {string} participantId the id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     */\r\n    clearRtcMutedTimestamp(participantId) {\r\n        this.rtcMutedTimestamp[participantId] = null;\r\n    }\r\n\r\n    /**\r\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\r\n     * a new one is added to the conference.\r\n     *\r\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\r\n     * the conference.\r\n     */\r\n    onRemoteTrackAdded(remoteTrack) {\r\n        if (!remoteTrack.isLocal()\r\n                && remoteTrack.getType() === MediaType.VIDEO) {\r\n\r\n            logger.debug(\r\n                `Detector on remote track added for: ${\r\n                    remoteTrack.getParticipantId()}`);\r\n\r\n            remoteTrack.on(\r\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n                this._onSignallingMuteChanged);\r\n            remoteTrack.on(\r\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\r\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all event listeners bound to the remote video track and clears\r\n     * any related timeouts.\r\n     *\r\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\r\n     * removed from the conference.\r\n     */\r\n    onRemoteTrackRemoved(remoteTrack) {\r\n        if (!remoteTrack.isLocal()\r\n                && remoteTrack.getType() === MediaType.VIDEO) {\r\n\r\n            const endpointId = remoteTrack.getParticipantId();\r\n\r\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\r\n\r\n            remoteTrack.off(\r\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n                this._onSignallingMuteChanged);\r\n\r\n            this.clearTimeout(endpointId);\r\n            this.clearRtcMutedTimestamp(endpointId);\r\n\r\n            this.figureOutConnectionStatus(endpointId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if given participant's video is considered frozen.\r\n     * @param {JitsiParticipant} participant - The participant.\r\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\r\n     * participant or <tt>false</tt> when it's either not considered frozen\r\n     * (yet) or if freeze detection is not supported by the current browser.\r\n     *\r\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\r\n     *       implemented in JitsiLocalTrack by extending the event to\r\n     *       the remote track and allowing to set different timeout for\r\n     *       local and remote tracks.\r\n     *\r\n     */\r\n    isVideoTrackFrozen(participant) {\r\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\r\n            return false;\r\n        }\r\n\r\n        const id = participant.getId();\r\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\r\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\r\n        const timeout = this._getVideoFrozenTimeout(id);\r\n\r\n        return hasAnyVideoRTCMuted\r\n            && typeof rtcMutedTimestamp === 'number'\r\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\r\n    }\r\n\r\n    /**\r\n     * Goes over every participant and updates connectivity status.\r\n     * Should be called when a parameter which affects all of the participants\r\n     * is changed (P2P for example).\r\n     */\r\n    refreshConnectionStatusForAll() {\r\n        const participants = this.conference.getParticipants();\r\n\r\n        for (const participant of participants) {\r\n            this.figureOutConnectionStatus(participant.getId());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Figures out (and updates) the current connectivity status for\r\n     * the participant identified by the given id.\r\n     *\r\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\r\n     */\r\n    figureOutConnectionStatus(id) {\r\n        const participant = this.conference.getParticipantById(id);\r\n\r\n        if (!participant) {\r\n            // Probably the participant is no longer in the conference\r\n            // (at the time of writing this code, participant is\r\n            // detached from the conference and TRACK_REMOVED events are\r\n            // fired),\r\n            // so we don't care, but let's print a log message for debugging purposes.\r\n            logger.debug(`figure out conn status - no participant for: ${id}`);\r\n\r\n            return;\r\n        }\r\n\r\n        const inP2PMode = this.conference.isP2PActive();\r\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\r\n        const audioOnlyMode = this.rtc.getLastN() === 0;\r\n\r\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\r\n        // any detection based on video playback or the last N.\r\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\r\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\r\n        const isInLastN = this.rtc.isInLastN(id);\r\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\r\n\r\n        if (typeof isConnActiveByJvb !== 'boolean') {\r\n            // If no status was received from the JVB it means that it's active\r\n            // (the bridge does not send notification unless there is a problem)\r\n            logger.debug('Assuming connection active by JVB - no notification');\r\n            isConnActiveByJvb = true;\r\n        }\r\n\r\n        const newState\r\n            = inP2PMode\r\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\r\n                    isVideoMuted,\r\n                    isVideoTrackFrozen)\r\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\r\n                    isConnActiveByJvb,\r\n                    isInLastN,\r\n                    isRestoringTimedOut,\r\n                    isVideoMuted,\r\n                    isVideoTrackFrozen);\r\n\r\n        // if the new state is not restoring clear timers and timestamps\r\n        // that we use to track the restoring state\r\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\r\n            this._clearRestoringTimer(id);\r\n        }\r\n\r\n        logger.debug(\r\n            `Figure out conn status for ${id}, is video muted: ${\r\n                isVideoMuted} is active(jvb): ${\r\n                isConnActiveByJvb} video track frozen: ${\r\n                isVideoTrackFrozen} p2p mode: ${\r\n                inP2PMode} is in last N: ${\r\n                isInLastN} currentStatus => newStatus: ${\r\n                participant.getConnectionStatus()} => ${newState}`);\r\n\r\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\r\n\r\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\r\n        // since the last time this code block run).\r\n        if (!('p2p' in oldConnectionStatus)\r\n            || !('connectionStatus' in oldConnectionStatus)\r\n            || oldConnectionStatus.p2p !== inP2PMode\r\n            || oldConnectionStatus.connectionStatus !== newState) {\r\n\r\n            const nowMs = Date.now();\r\n\r\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\r\n\r\n            this.connectionStatusMap[id] = {\r\n                ...oldConnectionStatus,\r\n                connectionStatus: newState,\r\n                p2p: inP2PMode,\r\n                startedMs: nowMs\r\n            };\r\n\r\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\r\n            // video type is not in oldConnectionStatus.\r\n            if (!('videoType' in this.connectionStatusMap[id])) {\r\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n\r\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\r\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\r\n                }\r\n            }\r\n        }\r\n        this._changeConnectionStatus(participant, newState);\r\n    }\r\n\r\n    /**\r\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\r\n     * in the INTERRUPTED state) and sends a participant connection status event.\r\n     * @param {string} id - The jid of the participant.\r\n     * @param {Number} nowMs - The current time (in millis).\r\n     * @returns {void}\r\n     */\r\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\r\n        const participantConnectionStatus = this.connectionStatusMap[id];\r\n\r\n        if (participantConnectionStatus\r\n            && 'startedMs' in participantConnectionStatus\r\n            && 'videoType' in participantConnectionStatus\r\n            && 'connectionStatus' in participantConnectionStatus\r\n            && 'p2p' in participantConnectionStatus) {\r\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\r\n            Statistics.sendAnalytics(\r\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On change in Last N set check all leaving and entering participants to\r\n     * change their corresponding statuses.\r\n     *\r\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\r\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\r\n     * @private\r\n     */\r\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\r\n        const now = Date.now();\r\n\r\n        logger.debug(\r\n            'leaving/entering lastN', leavingLastN, enteringLastN, now);\r\n\r\n        for (const id of leavingLastN) {\r\n            this.enteredLastNTimestamp.delete(id);\r\n            this._clearRestoringTimer(id);\r\n            this.figureOutConnectionStatus(id);\r\n        }\r\n        for (const id of enteringLastN) {\r\n            // store the timestamp this id is entering lastN\r\n            this.enteredLastNTimestamp.set(id, now);\r\n            this.figureOutConnectionStatus(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the restoring timer for participant's video track and the\r\n     * timestamp for entering lastN.\r\n     *\r\n     * @param {string} participantId - The id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     */\r\n    _clearRestoringTimer(participantId) {\r\n        const rTimer = this.restoringTimers.get(participantId);\r\n\r\n        if (rTimer) {\r\n            clearTimeout(rTimer);\r\n            this.restoringTimers.delete(participantId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a track had stayed enough in restoring state, compares\r\n     * current time and the time the track entered in lastN. If it hasn't\r\n     * timedout and there is no timer added, add new timer in order to give it\r\n     * more time to become active or mark it as interrupted on next check.\r\n     *\r\n     * @param {string} participantId - The id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\r\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\r\n     * set its status to interrupted.\r\n     * @private\r\n     */\r\n    _isRestoringTimedout(participantId) {\r\n        const enteredLastNTimestamp\r\n            = this.enteredLastNTimestamp.get(participantId);\r\n\r\n        if (enteredLastNTimestamp\r\n            && (Date.now() - enteredLastNTimestamp)\r\n                >= DEFAULT_RESTORING_TIMEOUT) {\r\n            return true;\r\n        }\r\n\r\n        // still haven't reached timeout, if there is no timer scheduled,\r\n        // schedule one so we can track the restoring state and change it after\r\n        // reaching the timeout\r\n        const rTimer = this.restoringTimers.get(participantId);\r\n\r\n        if (!rTimer) {\r\n            this.restoringTimers.set(participantId, setTimeout(\r\n                () => this.figureOutConnectionStatus(participantId),\r\n                DEFAULT_RESTORING_TIMEOUT));\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sends a last/final participant connection status event for the participant that left the conference.\r\n     * @param {string} id - The id of the participant that left the conference.\r\n     * @returns {void}\r\n     */\r\n    onUserLeft(id) {\r\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\r\n        delete this.connectionStatusMap[id];\r\n    }\r\n\r\n    /**\r\n     * Handles RTC 'onmute' event for the video track.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\r\n     * will be processed.\r\n     */\r\n    onTrackRtcMuted(track) {\r\n        const participantId = track.getParticipantId();\r\n        const participant = this.conference.getParticipantById(participantId);\r\n\r\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\r\n        if (!participant) {\r\n            logger.error(`No participant for id: ${participantId}`);\r\n\r\n            return;\r\n        }\r\n        this.rtcMutedTimestamp[participantId] = Date.now();\r\n        if (!participant.isVideoMuted()) {\r\n            // If the user is not muted according to the signalling we'll give\r\n            // it some time, before the connection interrupted event is\r\n            // triggered.\r\n            this.clearTimeout(participantId);\r\n\r\n            // The timeout is reduced when user is not in the last N\r\n            const timeout = this._getVideoFrozenTimeout(participantId);\r\n\r\n            this.trackTimers[participantId] = window.setTimeout(() => {\r\n                logger.debug(\r\n                    `Set RTC mute timeout for: ${participantId}\\\r\n                     of ${timeout} ms`);\r\n                this.clearTimeout(participantId);\r\n                this.figureOutConnectionStatus(participantId);\r\n            }, timeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles RTC 'onunmute' event for the video track.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\r\n     * event will be processed.\r\n     */\r\n    onTrackRtcUnmuted(track) {\r\n        const participantId = track.getParticipantId();\r\n\r\n        logger.debug(\r\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\r\n\r\n        this.clearTimeout(participantId);\r\n        this.clearRtcMutedTimestamp(participantId);\r\n\r\n        this.figureOutConnectionStatus(participantId);\r\n    }\r\n\r\n    /**\r\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The remote video track for which\r\n     * the signalling mute/unmute event will be processed.\r\n     */\r\n    onSignallingMuteChanged(track) {\r\n        const participantId = track.getParticipantId();\r\n\r\n        logger.debug(\r\n            `Detector on track signalling mute changed: ${participantId}`,\r\n            track.isMuted());\r\n\r\n        this.figureOutConnectionStatus(participantId);\r\n    }\r\n\r\n    /**\r\n     * Sends a participant connection status event as a result of the video type\r\n     * changing.\r\n     * @param {JitsiRemoteTrack} track - The track.\r\n     * @param {VideoType} type - The video type.\r\n     * @returns {void}\r\n     */\r\n    onTrackVideoTypeChanged(track, type) {\r\n        const id = track.getParticipantId();\r\n        const nowMs = Date.now();\r\n\r\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\r\n\r\n        this.connectionStatusMap[id] = {\r\n            ...this.connectionStatusMap[id] || {},\r\n            videoType: type,\r\n            startedMs: nowMs\r\n        };\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Module provides information about the current status of the internet\r\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\r\n * online/offline, but rather it relies on the information supplied by the app\r\n * that uses it. By default the online state is assumed and the lib acts as if\r\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\r\n */\r\nexport class NetworkInfo extends Listenable {\r\n    /**\r\n     * Creates new {@link NetworkInfo} instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._current = {\r\n            isOnline: true\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Updates the network info state.\r\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\r\n     */\r\n    updateNetworkInfo({ isOnline }) {\r\n        logger.debug('updateNetworkInfo', { isOnline });\r\n        this._current = {\r\n            isOnline: isOnline === true\r\n        };\r\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\r\n    }\r\n\r\n    /**\r\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\r\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\r\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\r\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\r\n     * @returns {boolean}\r\n     */\r\n    isOnline() {\r\n        return this._current.isOnline === true;\r\n    }\r\n}\r\n\r\nconst networkInfo = new NetworkInfo();\r\n\r\nexport default networkInfo;\r\n","/* eslint-env node */\r\n'use strict';\r\n\r\n// SDP helpers.\r\nvar SDPUtils = {};\r\n\r\n// Generate an alphanumeric identifier for cname or mids.\r\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\r\nSDPUtils.generateIdentifier = function() {\r\n  return Math.random().toString(36).substr(2, 10);\r\n};\r\n\r\n// The RTCP CNAME used by all peerconnections from the same JS.\r\nSDPUtils.localCName = SDPUtils.generateIdentifier();\r\n\r\n// Splits SDP into lines, dealing with both CRLF and LF.\r\nSDPUtils.splitLines = function(blob) {\r\n  return blob.trim().split('\\n').map(function(line) {\r\n    return line.trim();\r\n  });\r\n};\r\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\r\nSDPUtils.splitSections = function(blob) {\r\n  var parts = blob.split('\\nm=');\r\n  return parts.map(function(part, index) {\r\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\r\n  });\r\n};\r\n\r\n// returns the session description.\r\nSDPUtils.getDescription = function(blob) {\r\n  var sections = SDPUtils.splitSections(blob);\r\n  return sections && sections[0];\r\n};\r\n\r\n// returns the individual media sections.\r\nSDPUtils.getMediaSections = function(blob) {\r\n  var sections = SDPUtils.splitSections(blob);\r\n  sections.shift();\r\n  return sections;\r\n};\r\n\r\n// Returns lines that start with a certain prefix.\r\nSDPUtils.matchPrefix = function(blob, prefix) {\r\n  return SDPUtils.splitLines(blob).filter(function(line) {\r\n    return line.indexOf(prefix) === 0;\r\n  });\r\n};\r\n\r\n// Parses an ICE candidate line. Sample input:\r\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\r\n// rport 55996\"\r\nSDPUtils.parseCandidate = function(line) {\r\n  var parts;\r\n  // Parse both variants.\r\n  if (line.indexOf('a=candidate:') === 0) {\r\n    parts = line.substring(12).split(' ');\r\n  } else {\r\n    parts = line.substring(10).split(' ');\r\n  }\r\n\r\n  var candidate = {\r\n    foundation: parts[0],\r\n    component: parseInt(parts[1], 10),\r\n    protocol: parts[2].toLowerCase(),\r\n    priority: parseInt(parts[3], 10),\r\n    ip: parts[4],\r\n    address: parts[4], // address is an alias for ip.\r\n    port: parseInt(parts[5], 10),\r\n    // skip parts[6] == 'typ'\r\n    type: parts[7]\r\n  };\r\n\r\n  for (var i = 8; i < parts.length; i += 2) {\r\n    switch (parts[i]) {\r\n      case 'raddr':\r\n        candidate.relatedAddress = parts[i + 1];\r\n        break;\r\n      case 'rport':\r\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\r\n        break;\r\n      case 'tcptype':\r\n        candidate.tcpType = parts[i + 1];\r\n        break;\r\n      case 'ufrag':\r\n        candidate.ufrag = parts[i + 1]; // for backward compability.\r\n        candidate.usernameFragment = parts[i + 1];\r\n        break;\r\n      default: // extension handling, in particular ufrag\r\n        candidate[parts[i]] = parts[i + 1];\r\n        break;\r\n    }\r\n  }\r\n  return candidate;\r\n};\r\n\r\n// Translates a candidate object into SDP candidate attribute.\r\nSDPUtils.writeCandidate = function(candidate) {\r\n  var sdp = [];\r\n  sdp.push(candidate.foundation);\r\n  sdp.push(candidate.component);\r\n  sdp.push(candidate.protocol.toUpperCase());\r\n  sdp.push(candidate.priority);\r\n  sdp.push(candidate.address || candidate.ip);\r\n  sdp.push(candidate.port);\r\n\r\n  var type = candidate.type;\r\n  sdp.push('typ');\r\n  sdp.push(type);\r\n  if (type !== 'host' && candidate.relatedAddress &&\r\n      candidate.relatedPort) {\r\n    sdp.push('raddr');\r\n    sdp.push(candidate.relatedAddress);\r\n    sdp.push('rport');\r\n    sdp.push(candidate.relatedPort);\r\n  }\r\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\r\n    sdp.push('tcptype');\r\n    sdp.push(candidate.tcpType);\r\n  }\r\n  if (candidate.usernameFragment || candidate.ufrag) {\r\n    sdp.push('ufrag');\r\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\r\n  }\r\n  return 'candidate:' + sdp.join(' ');\r\n};\r\n\r\n// Parses an ice-options line, returns an array of option tags.\r\n// a=ice-options:foo bar\r\nSDPUtils.parseIceOptions = function(line) {\r\n  return line.substr(14).split(' ');\r\n};\r\n\r\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\r\n// a=rtpmap:111 opus/48000/2\r\nSDPUtils.parseRtpMap = function(line) {\r\n  var parts = line.substr(9).split(' ');\r\n  var parsed = {\r\n    payloadType: parseInt(parts.shift(), 10) // was: id\r\n  };\r\n\r\n  parts = parts[0].split('/');\r\n\r\n  parsed.name = parts[0];\r\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\r\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\r\n  // legacy alias, got renamed back to channels in ORTC.\r\n  parsed.numChannels = parsed.channels;\r\n  return parsed;\r\n};\r\n\r\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\r\n// RTCRtpCodecParameters.\r\nSDPUtils.writeRtpMap = function(codec) {\r\n  var pt = codec.payloadType;\r\n  if (codec.preferredPayloadType !== undefined) {\r\n    pt = codec.preferredPayloadType;\r\n  }\r\n  var channels = codec.channels || codec.numChannels || 1;\r\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\r\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\r\n};\r\n\r\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\r\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\r\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\r\nSDPUtils.parseExtmap = function(line) {\r\n  var parts = line.substr(9).split(' ');\r\n  return {\r\n    id: parseInt(parts[0], 10),\r\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\r\n    uri: parts[1]\r\n  };\r\n};\r\n\r\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\r\n// RTCRtpHeaderExtension.\r\nSDPUtils.writeExtmap = function(headerExtension) {\r\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\r\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\r\n        ? '/' + headerExtension.direction\r\n        : '') +\r\n      ' ' + headerExtension.uri + '\\r\\n';\r\n};\r\n\r\n// Parses an ftmp line, returns dictionary. Sample input:\r\n// a=fmtp:96 vbr=on;cng=on\r\n// Also deals with vbr=on; cng=on\r\nSDPUtils.parseFmtp = function(line) {\r\n  var parsed = {};\r\n  var kv;\r\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\r\n  for (var j = 0; j < parts.length; j++) {\r\n    kv = parts[j].trim().split('=');\r\n    parsed[kv[0].trim()] = kv[1];\r\n  }\r\n  return parsed;\r\n};\r\n\r\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\r\nSDPUtils.writeFmtp = function(codec) {\r\n  var line = '';\r\n  var pt = codec.payloadType;\r\n  if (codec.preferredPayloadType !== undefined) {\r\n    pt = codec.preferredPayloadType;\r\n  }\r\n  if (codec.parameters && Object.keys(codec.parameters).length) {\r\n    var params = [];\r\n    Object.keys(codec.parameters).forEach(function(param) {\r\n      if (codec.parameters[param]) {\r\n        params.push(param + '=' + codec.parameters[param]);\r\n      } else {\r\n        params.push(param);\r\n      }\r\n    });\r\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\r\n  }\r\n  return line;\r\n};\r\n\r\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\r\n// a=rtcp-fb:98 nack rpsi\r\nSDPUtils.parseRtcpFb = function(line) {\r\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\r\n  return {\r\n    type: parts.shift(),\r\n    parameter: parts.join(' ')\r\n  };\r\n};\r\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\r\nSDPUtils.writeRtcpFb = function(codec) {\r\n  var lines = '';\r\n  var pt = codec.payloadType;\r\n  if (codec.preferredPayloadType !== undefined) {\r\n    pt = codec.preferredPayloadType;\r\n  }\r\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\r\n    // FIXME: special handling for trr-int?\r\n    codec.rtcpFeedback.forEach(function(fb) {\r\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\r\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\r\n          '\\r\\n';\r\n    });\r\n  }\r\n  return lines;\r\n};\r\n\r\n// Parses an RFC 5576 ssrc media attribute. Sample input:\r\n// a=ssrc:3735928559 cname:something\r\nSDPUtils.parseSsrcMedia = function(line) {\r\n  var sp = line.indexOf(' ');\r\n  var parts = {\r\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\r\n  };\r\n  var colon = line.indexOf(':', sp);\r\n  if (colon > -1) {\r\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\r\n    parts.value = line.substr(colon + 1);\r\n  } else {\r\n    parts.attribute = line.substr(sp + 1);\r\n  }\r\n  return parts;\r\n};\r\n\r\nSDPUtils.parseSsrcGroup = function(line) {\r\n  var parts = line.substr(13).split(' ');\r\n  return {\r\n    semantics: parts.shift(),\r\n    ssrcs: parts.map(function(ssrc) {\r\n      return parseInt(ssrc, 10);\r\n    })\r\n  };\r\n};\r\n\r\n// Extracts the MID (RFC 5888) from a media section.\r\n// returns the MID or undefined if no mid line was found.\r\nSDPUtils.getMid = function(mediaSection) {\r\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\r\n  if (mid) {\r\n    return mid.substr(6);\r\n  }\r\n};\r\n\r\nSDPUtils.parseFingerprint = function(line) {\r\n  var parts = line.substr(14).split(' ');\r\n  return {\r\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\r\n    value: parts[1]\r\n  };\r\n};\r\n\r\n// Extracts DTLS parameters from SDP media section or sessionpart.\r\n// FIXME: for consistency with other functions this should only\r\n//   get the fingerprint line as input. See also getIceParameters.\r\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\r\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=fingerprint:');\r\n  // Note: a=setup line is ignored since we use the 'auto' role.\r\n  // Note2: 'algorithm' is not case sensitive except in Edge.\r\n  return {\r\n    role: 'auto',\r\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\r\n  };\r\n};\r\n\r\n// Serializes DTLS parameters to SDP.\r\nSDPUtils.writeDtlsParameters = function(params, setupType) {\r\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\r\n  params.fingerprints.forEach(function(fp) {\r\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\r\n  });\r\n  return sdp;\r\n};\r\n\r\n// Parses a=crypto lines into\r\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\r\nSDPUtils.parseCryptoLine = function(line) {\r\n  var parts = line.substr(9).split(' ');\r\n  return {\r\n    tag: parseInt(parts[0], 10),\r\n    cryptoSuite: parts[1],\r\n    keyParams: parts[2],\r\n    sessionParams: parts.slice(3),\r\n  };\r\n};\r\n\r\nSDPUtils.writeCryptoLine = function(parameters) {\r\n  return 'a=crypto:' + parameters.tag + ' ' +\r\n    parameters.cryptoSuite + ' ' +\r\n    (typeof parameters.keyParams === 'object'\r\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\r\n      : parameters.keyParams) +\r\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\r\n    '\\r\\n';\r\n};\r\n\r\n// Parses the crypto key parameters into\r\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\r\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\r\n  if (keyParams.indexOf('inline:') !== 0) {\r\n    return null;\r\n  }\r\n  var parts = keyParams.substr(7).split('|');\r\n  return {\r\n    keyMethod: 'inline',\r\n    keySalt: parts[0],\r\n    lifeTime: parts[1],\r\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\r\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\r\n  };\r\n};\r\n\r\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\r\n  return keyParams.keyMethod + ':'\r\n    + keyParams.keySalt +\r\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\r\n    (keyParams.mkiValue && keyParams.mkiLength\r\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\r\n      : '');\r\n};\r\n\r\n// Extracts all SDES paramters.\r\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\r\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=crypto:');\r\n  return lines.map(SDPUtils.parseCryptoLine);\r\n};\r\n\r\n// Parses ICE information from SDP media section or sessionpart.\r\n// FIXME: for consistency with other functions this should only\r\n//   get the ice-ufrag and ice-pwd lines as input.\r\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\r\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=ice-ufrag:')[0];\r\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=ice-pwd:')[0];\r\n  if (!(ufrag && pwd)) {\r\n    return null;\r\n  }\r\n  return {\r\n    usernameFragment: ufrag.substr(12),\r\n    password: pwd.substr(10),\r\n  };\r\n};\r\n\r\n// Serializes ICE parameters to SDP.\r\nSDPUtils.writeIceParameters = function(params) {\r\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\r\n      'a=ice-pwd:' + params.password + '\\r\\n';\r\n};\r\n\r\n// Parses the SDP media section and returns RTCRtpParameters.\r\nSDPUtils.parseRtpParameters = function(mediaSection) {\r\n  var description = {\r\n    codecs: [],\r\n    headerExtensions: [],\r\n    fecMechanisms: [],\r\n    rtcp: []\r\n  };\r\n  var lines = SDPUtils.splitLines(mediaSection);\r\n  var mline = lines[0].split(' ');\r\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\r\n    var pt = mline[i];\r\n    var rtpmapline = SDPUtils.matchPrefix(\r\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\r\n    if (rtpmapline) {\r\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\r\n      var fmtps = SDPUtils.matchPrefix(\r\n        mediaSection, 'a=fmtp:' + pt + ' ');\r\n      // Only the first a=fmtp:<pt> is considered.\r\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\r\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\r\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\r\n        .map(SDPUtils.parseRtcpFb);\r\n      description.codecs.push(codec);\r\n      // parse FEC mechanisms from rtpmap lines.\r\n      switch (codec.name.toUpperCase()) {\r\n        case 'RED':\r\n        case 'ULPFEC':\r\n          description.fecMechanisms.push(codec.name.toUpperCase());\r\n          break;\r\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\r\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\r\n  });\r\n  // FIXME: parse rtcp.\r\n  return description;\r\n};\r\n\r\n// Generates parts of the SDP media section describing the capabilities /\r\n// parameters.\r\nSDPUtils.writeRtpDescription = function(kind, caps) {\r\n  var sdp = '';\r\n\r\n  // Build the mline.\r\n  sdp += 'm=' + kind + ' ';\r\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\r\n  sdp += ' UDP/TLS/RTP/SAVPF ';\r\n  sdp += caps.codecs.map(function(codec) {\r\n    if (codec.preferredPayloadType !== undefined) {\r\n      return codec.preferredPayloadType;\r\n    }\r\n    return codec.payloadType;\r\n  }).join(' ') + '\\r\\n';\r\n\r\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\r\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\r\n\r\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\r\n  caps.codecs.forEach(function(codec) {\r\n    sdp += SDPUtils.writeRtpMap(codec);\r\n    sdp += SDPUtils.writeFmtp(codec);\r\n    sdp += SDPUtils.writeRtcpFb(codec);\r\n  });\r\n  var maxptime = 0;\r\n  caps.codecs.forEach(function(codec) {\r\n    if (codec.maxptime > maxptime) {\r\n      maxptime = codec.maxptime;\r\n    }\r\n  });\r\n  if (maxptime > 0) {\r\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\r\n  }\r\n  sdp += 'a=rtcp-mux\\r\\n';\r\n\r\n  if (caps.headerExtensions) {\r\n    caps.headerExtensions.forEach(function(extension) {\r\n      sdp += SDPUtils.writeExtmap(extension);\r\n    });\r\n  }\r\n  // FIXME: write fecMechanisms.\r\n  return sdp;\r\n};\r\n\r\n// Parses the SDP media section and returns an array of\r\n// RTCRtpEncodingParameters.\r\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\r\n  var encodingParameters = [];\r\n  var description = SDPUtils.parseRtpParameters(mediaSection);\r\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\r\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\r\n\r\n  // filter a=ssrc:... cname:, ignore PlanB-msid\r\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\r\n    .map(function(line) {\r\n      return SDPUtils.parseSsrcMedia(line);\r\n    })\r\n    .filter(function(parts) {\r\n      return parts.attribute === 'cname';\r\n    });\r\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\r\n  var secondarySsrc;\r\n\r\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\r\n    .map(function(line) {\r\n      var parts = line.substr(17).split(' ');\r\n      return parts.map(function(part) {\r\n        return parseInt(part, 10);\r\n      });\r\n    });\r\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\r\n    secondarySsrc = flows[0][1];\r\n  }\r\n\r\n  description.codecs.forEach(function(codec) {\r\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\r\n      var encParam = {\r\n        ssrc: primarySsrc,\r\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\r\n      };\r\n      if (primarySsrc && secondarySsrc) {\r\n        encParam.rtx = {ssrc: secondarySsrc};\r\n      }\r\n      encodingParameters.push(encParam);\r\n      if (hasRed) {\r\n        encParam = JSON.parse(JSON.stringify(encParam));\r\n        encParam.fec = {\r\n          ssrc: primarySsrc,\r\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\r\n        };\r\n        encodingParameters.push(encParam);\r\n      }\r\n    }\r\n  });\r\n  if (encodingParameters.length === 0 && primarySsrc) {\r\n    encodingParameters.push({\r\n      ssrc: primarySsrc\r\n    });\r\n  }\r\n\r\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\r\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\r\n  if (bandwidth.length) {\r\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\r\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\r\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\r\n      // use formula from JSEP to convert b=AS to TIAS value.\r\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\r\n          - (50 * 40 * 8);\r\n    } else {\r\n      bandwidth = undefined;\r\n    }\r\n    encodingParameters.forEach(function(params) {\r\n      params.maxBitrate = bandwidth;\r\n    });\r\n  }\r\n  return encodingParameters;\r\n};\r\n\r\n// parses http://draft.ortc.org/#rtcrtcpparameters*\r\nSDPUtils.parseRtcpParameters = function(mediaSection) {\r\n  var rtcpParameters = {};\r\n\r\n  // Gets the first SSRC. Note tha with RTX there might be multiple\r\n  // SSRCs.\r\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\r\n    .map(function(line) {\r\n      return SDPUtils.parseSsrcMedia(line);\r\n    })\r\n    .filter(function(obj) {\r\n      return obj.attribute === 'cname';\r\n    })[0];\r\n  if (remoteSsrc) {\r\n    rtcpParameters.cname = remoteSsrc.value;\r\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\r\n  }\r\n\r\n  // Edge uses the compound attribute instead of reducedSize\r\n  // compound is !reducedSize\r\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\r\n  rtcpParameters.reducedSize = rsize.length > 0;\r\n  rtcpParameters.compound = rsize.length === 0;\r\n\r\n  // parses the rtcp-mux attrіbute.\r\n  // Note that Edge does not support unmuxed RTCP.\r\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\r\n  rtcpParameters.mux = mux.length > 0;\r\n\r\n  return rtcpParameters;\r\n};\r\n\r\n// parses either a=msid: or a=ssrc:... msid lines and returns\r\n// the id of the MediaStream and MediaStreamTrack.\r\nSDPUtils.parseMsid = function(mediaSection) {\r\n  var parts;\r\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\r\n  if (spec.length === 1) {\r\n    parts = spec[0].substr(7).split(' ');\r\n    return {stream: parts[0], track: parts[1]};\r\n  }\r\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\r\n    .map(function(line) {\r\n      return SDPUtils.parseSsrcMedia(line);\r\n    })\r\n    .filter(function(msidParts) {\r\n      return msidParts.attribute === 'msid';\r\n    });\r\n  if (planB.length > 0) {\r\n    parts = planB[0].value.split(' ');\r\n    return {stream: parts[0], track: parts[1]};\r\n  }\r\n};\r\n\r\n// SCTP\r\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\r\n// to draft-ietf-mmusic-sctp-sdp-05\r\nSDPUtils.parseSctpDescription = function(mediaSection) {\r\n  var mline = SDPUtils.parseMLine(mediaSection);\r\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\r\n  var maxMessageSize;\r\n  if (maxSizeLine.length > 0) {\r\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\r\n  }\r\n  if (isNaN(maxMessageSize)) {\r\n    maxMessageSize = 65536;\r\n  }\r\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\r\n  if (sctpPort.length > 0) {\r\n    return {\r\n      port: parseInt(sctpPort[0].substr(12), 10),\r\n      protocol: mline.fmt,\r\n      maxMessageSize: maxMessageSize\r\n    };\r\n  }\r\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\r\n  if (sctpMapLines.length > 0) {\r\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]\r\n      .substr(10)\r\n      .split(' ');\r\n    return {\r\n      port: parseInt(parts[0], 10),\r\n      protocol: parts[1],\r\n      maxMessageSize: maxMessageSize\r\n    };\r\n  }\r\n};\r\n\r\n// SCTP\r\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\r\n// support by now receiving in this format, unless we originally parsed\r\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\r\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\r\nSDPUtils.writeSctpDescription = function(media, sctp) {\r\n  var output = [];\r\n  if (media.protocol !== 'DTLS/SCTP') {\r\n    output = [\r\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\r\n      'c=IN IP4 0.0.0.0\\r\\n',\r\n      'a=sctp-port:' + sctp.port + '\\r\\n'\r\n    ];\r\n  } else {\r\n    output = [\r\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\r\n      'c=IN IP4 0.0.0.0\\r\\n',\r\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'\r\n    ];\r\n  }\r\n  if (sctp.maxMessageSize !== undefined) {\r\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\r\n  }\r\n  return output.join('');\r\n};\r\n\r\n// Generate a session ID for SDP.\r\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\r\n// recommends using a cryptographically random +ve 64-bit value\r\n// but right now this should be acceptable and within the right range\r\nSDPUtils.generateSessionId = function() {\r\n  return Math.random().toString().substr(2, 21);\r\n};\r\n\r\n// Write boilder plate for start of SDP\r\n// sessId argument is optional - if not supplied it will\r\n// be generated randomly\r\n// sessVersion is optional and defaults to 2\r\n// sessUser is optional and defaults to 'thisisadapterortc'\r\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\r\n  var sessionId;\r\n  var version = sessVer !== undefined ? sessVer : 2;\r\n  if (sessId) {\r\n    sessionId = sessId;\r\n  } else {\r\n    sessionId = SDPUtils.generateSessionId();\r\n  }\r\n  var user = sessUser || 'thisisadapterortc';\r\n  // FIXME: sess-id should be an NTP timestamp.\r\n  return 'v=0\\r\\n' +\r\n      'o=' + user + ' ' + sessionId + ' ' + version +\r\n        ' IN IP4 127.0.0.1\\r\\n' +\r\n      's=-\\r\\n' +\r\n      't=0 0\\r\\n';\r\n};\r\n\r\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\r\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\r\n\r\n  // Map ICE parameters (ufrag, pwd) to SDP.\r\n  sdp += SDPUtils.writeIceParameters(\r\n    transceiver.iceGatherer.getLocalParameters());\r\n\r\n  // Map DTLS parameters to SDP.\r\n  sdp += SDPUtils.writeDtlsParameters(\r\n    transceiver.dtlsTransport.getLocalParameters(),\r\n    type === 'offer' ? 'actpass' : 'active');\r\n\r\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\r\n\r\n  if (transceiver.direction) {\r\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\r\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\r\n    sdp += 'a=sendrecv\\r\\n';\r\n  } else if (transceiver.rtpSender) {\r\n    sdp += 'a=sendonly\\r\\n';\r\n  } else if (transceiver.rtpReceiver) {\r\n    sdp += 'a=recvonly\\r\\n';\r\n  } else {\r\n    sdp += 'a=inactive\\r\\n';\r\n  }\r\n\r\n  if (transceiver.rtpSender) {\r\n    // spec.\r\n    var msid = 'msid:' + stream.id + ' ' +\r\n        transceiver.rtpSender.track.id + '\\r\\n';\r\n    sdp += 'a=' + msid;\r\n\r\n    // for Chrome.\r\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\r\n        ' ' + msid;\r\n    if (transceiver.sendEncodingParameters[0].rtx) {\r\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n          ' ' + msid;\r\n      sdp += 'a=ssrc-group:FID ' +\r\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\r\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n          '\\r\\n';\r\n    }\r\n  }\r\n  // FIXME: this should be written by writeRtpDescription.\r\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\r\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\r\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\r\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\r\n  }\r\n  return sdp;\r\n};\r\n\r\n// Gets the direction from the mediaSection or the sessionpart.\r\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\r\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\r\n  var lines = SDPUtils.splitLines(mediaSection);\r\n  for (var i = 0; i < lines.length; i++) {\r\n    switch (lines[i]) {\r\n      case 'a=sendrecv':\r\n      case 'a=sendonly':\r\n      case 'a=recvonly':\r\n      case 'a=inactive':\r\n        return lines[i].substr(2);\r\n      default:\r\n        // FIXME: What should happen here?\r\n    }\r\n  }\r\n  if (sessionpart) {\r\n    return SDPUtils.getDirection(sessionpart);\r\n  }\r\n  return 'sendrecv';\r\n};\r\n\r\nSDPUtils.getKind = function(mediaSection) {\r\n  var lines = SDPUtils.splitLines(mediaSection);\r\n  var mline = lines[0].split(' ');\r\n  return mline[0].substr(2);\r\n};\r\n\r\nSDPUtils.isRejected = function(mediaSection) {\r\n  return mediaSection.split(' ', 2)[1] === '0';\r\n};\r\n\r\nSDPUtils.parseMLine = function(mediaSection) {\r\n  var lines = SDPUtils.splitLines(mediaSection);\r\n  var parts = lines[0].substr(2).split(' ');\r\n  return {\r\n    kind: parts[0],\r\n    port: parseInt(parts[1], 10),\r\n    protocol: parts[2],\r\n    fmt: parts.slice(3).join(' ')\r\n  };\r\n};\r\n\r\nSDPUtils.parseOLine = function(mediaSection) {\r\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\r\n  var parts = line.substr(2).split(' ');\r\n  return {\r\n    username: parts[0],\r\n    sessionId: parts[1],\r\n    sessionVersion: parseInt(parts[2], 10),\r\n    netType: parts[3],\r\n    addressType: parts[4],\r\n    address: parts[5]\r\n  };\r\n};\r\n\r\n// a very naive interpretation of a valid SDP.\r\nSDPUtils.isValidSDP = function(blob) {\r\n  if (typeof blob !== 'string' || blob.length === 0) {\r\n    return false;\r\n  }\r\n  var lines = SDPUtils.splitLines(blob);\r\n  for (var i = 0; i < lines.length; i++) {\r\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\r\n      return false;\r\n    }\r\n    // TODO: check the modifier a bit more.\r\n  }\r\n  return true;\r\n};\r\n\r\n// Expose public methods.\r\nif (typeof module === 'object') {\r\n  module.exports = SDPUtils;\r\n}\r\n","/**\r\n * A collection of utility functions for taking in XML and parsing it to return\r\n * certain values.\r\n */\r\nexport default {\r\n    /**\r\n     * Parses the presence update of the focus and returns an object with the\r\n     * statuses related to recording.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {Object} The current presence values related to recording.\r\n     */\r\n    getFocusRecordingUpdate(presence) {\r\n        const jibriStatus = presence\r\n            && presence.getElementsByTagName('jibri-recording-status')[0];\r\n\r\n        if (!jibriStatus) {\r\n            return;\r\n        }\r\n\r\n        return {\r\n            error: jibriStatus.getAttribute('failure_reason'),\r\n            initiator: jibriStatus.getAttribute('initiator'),\r\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\r\n            sessionID: jibriStatus.getAttribute('session_id'),\r\n            status: jibriStatus.getAttribute('status')\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Parses the presence update from a hidden domain participant and returns\r\n     * an object with the statuses related to recording.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {Object} The current presence values related to recording.\r\n     */\r\n    getHiddenDomainUpdate(presence) {\r\n        const liveStreamViewURLContainer\r\n            = presence.getElementsByTagName('live-stream-view-url')[0];\r\n        const liveStreamViewURL = liveStreamViewURLContainer\r\n            && liveStreamViewURLContainer.textContent;\r\n        const modeContainer\r\n            = presence.getElementsByTagName('mode')[0];\r\n        const mode = modeContainer\r\n            && modeContainer.textContent\r\n            && modeContainer.textContent.toLowerCase();\r\n        const sessionIDContainer\r\n            = presence.getElementsByTagName('session_id')[0];\r\n        const sessionID\r\n            = sessionIDContainer && sessionIDContainer.textContent;\r\n\r\n        return {\r\n            liveStreamViewURL,\r\n            mode,\r\n            sessionID\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Returns the recording session ID from a successful IQ.\r\n     *\r\n     * @param {Node} response - The response from the IQ.\r\n     * @returns {string} The session ID of the recording session.\r\n     */\r\n    getSessionIdFromIq(response) {\r\n        const jibri = response && response.getElementsByTagName('jibri')[0];\r\n\r\n        return jibri && jibri.getAttribute('session_id');\r\n    },\r\n\r\n    /**\r\n     * Returns the recording session ID from a presence, if it exists.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {string|undefined} The session ID of the recording session.\r\n     */\r\n    getSessionId(presence) {\r\n        const sessionIdContainer\r\n            = presence.getElementsByTagName('session_id')[0];\r\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\r\n\r\n        return sessionId;\r\n    },\r\n\r\n    /**\r\n     * Returns whether or not a presence is from the focus.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {boolean} True if the presence is from the focus.\r\n     */\r\n    isFromFocus(presence) {\r\n        return presence.getAttribute('from').includes('focus');\r\n    }\r\n};\r\n","/* global __filename, Olm */\r\n\r\nimport base64js from 'base64-js';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport Deferred from '../util/Deferred';\r\nimport Listenable from '../util/Listenable';\r\nimport { JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nconst REQ_TIMEOUT = 5 * 1000;\r\nconst OLM_MESSAGE_TYPE = 'olm';\r\nconst OLM_MESSAGE_TYPES = {\r\n    ERROR: 'error',\r\n    KEY_INFO: 'key-info',\r\n    KEY_INFO_ACK: 'key-info-ack',\r\n    SESSION_ACK: 'session-ack',\r\n    SESSION_INIT: 'session-init'\r\n};\r\n\r\nconst kOlmData = Symbol('OlmData');\r\n\r\nconst OlmAdapterEvents = {\r\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\r\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\r\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\r\n};\r\n\r\n/**\r\n * This class implements an End-to-End Encrypted communication channel between every two peers\r\n * in the conference. This channel uses libolm to achieve E2EE.\r\n *\r\n * The created channel is then used to exchange the secret key that each participant will use\r\n * to encrypt the actual media (see {@link E2EEContext}).\r\n *\r\n * A simple JSON message based protocol is implemented, which follows a request - response model:\r\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\r\n *                 by the participant who just joined, to everyone else.\r\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\r\n *                encrypted data, more specifically the sender's current key.\r\n * - key-info: Includes the sender's most up to date key information.\r\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\r\n *                 the sender's key information, if available.\r\n * - error: Indicates a request processing error has occurred.\r\n *\r\n * These requessts and responses are transport independent. Currently they are sent using XMPP\r\n * MUC private messages.\r\n */\r\nexport class OlmAdapter extends Listenable {\r\n    /**\r\n     * Creates an adapter instance for the given conference.\r\n     */\r\n    constructor(conference) {\r\n        super();\r\n\r\n        this._conf = conference;\r\n        this._init = new Deferred();\r\n        this._key = undefined;\r\n        this._keyIndex = -1;\r\n        this._reqs = new Map();\r\n\r\n        if (OlmAdapter.isSupported()) {\r\n            this._bootstrapOlm();\r\n\r\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\r\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_JOINED, this._onConferenceJoined.bind(this));\r\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\r\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\r\n        } else {\r\n            this._init.reject(new Error('Olm not supported'));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates if olm is supported on the current platform.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    static isSupported() {\r\n        return typeof window.Olm !== 'undefined';\r\n    }\r\n\r\n    /**\r\n     * Updates the current participant key and distributes it to all participants in the conference\r\n     * by sending a key-info message.\r\n     *\r\n     * @param {Uint8Array|boolean} key - The new key.\r\n     * @returns {number}\r\n     */\r\n    async updateCurrentKey(key) {\r\n        this._key = key;\r\n\r\n        return this._keyIndex;\r\n    }\r\n\r\n    /**\r\n     * Updates the current participant key and distributes it to all participants in the conference\r\n     * by sending a key-info message.\r\n     *\r\n     * @param {Uint8Array|boolean} key - The new key.\r\n     * @retrns {Promise<Number>}\r\n     */\r\n    async updateKey(key) {\r\n        // Store it locally for new sessions.\r\n        this._key = key;\r\n        this._keyIndex++;\r\n\r\n        // Broadcast it.\r\n        const promises = [];\r\n\r\n        for (const participant of this._conf.getParticipants()) {\r\n            const pId = participant.getId();\r\n            const olmData = this._getParticipantOlmData(participant);\r\n\r\n            // TODO: skip those who don't support E2EE.\r\n\r\n            if (!olmData.session) {\r\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\r\n\r\n                // eslint-disable-next-line no-continue\r\n                continue;\r\n            }\r\n\r\n            const uuid = uuidv4();\r\n            const data = {\r\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                olm: {\r\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\r\n                    data: {\r\n                        ciphertext: this._encryptKeyInfo(olmData.session),\r\n                        uuid\r\n                    }\r\n                }\r\n            };\r\n            const d = new Deferred();\r\n\r\n            d.setRejectTimeout(REQ_TIMEOUT);\r\n            d.catch(() => {\r\n                this._reqs.delete(uuid);\r\n            });\r\n            this._reqs.set(uuid, d);\r\n            promises.push(d);\r\n\r\n            this._sendMessage(data, pId);\r\n        }\r\n\r\n        await Promise.allSettled(promises);\r\n\r\n        // TODO: retry failed ones?\r\n\r\n        return this._keyIndex;\r\n    }\r\n\r\n    /**\r\n     * Internal helper to bootstrap the olm library.\r\n     *\r\n     * @returns {Promise<void>}\r\n     * @private\r\n     */\r\n    async _bootstrapOlm() {\r\n        logger.debug('Initializing Olm...');\r\n\r\n        try {\r\n            await Olm.init();\r\n\r\n            this._olmAccount = new Olm.Account();\r\n            this._olmAccount.create();\r\n\r\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\r\n\r\n            this._idKey = idKeys.curve25519;\r\n\r\n            logger.debug('Olm initialized!');\r\n            this._init.resolve();\r\n            this.eventEmitter.emit(OlmAdapterEvents.OLM_ID_KEY_READY, this._idKey);\r\n        } catch (e) {\r\n            logger.error('Failed to initialize Olm', e);\r\n            this._init.reject(e);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Internal helper for encrypting the current key information for a given participant.\r\n     *\r\n     * @param {Olm.Session} session - Participant's session.\r\n     * @returns {string} - The encrypted text with the key information.\r\n     * @private\r\n     */\r\n    _encryptKeyInfo(session) {\r\n        const keyInfo = {};\r\n\r\n        if (this._key !== undefined) {\r\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\r\n            keyInfo.keyIndex = this._keyIndex;\r\n        }\r\n\r\n        return session.encrypt(JSON.stringify(keyInfo));\r\n    }\r\n\r\n    /**\r\n     * Internal helper for getting the olm related data associated with a participant.\r\n     *\r\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\r\n     * @returns {Object}\r\n     * @private\r\n     */\r\n    _getParticipantOlmData(participant) {\r\n        participant[kOlmData] = participant[kOlmData] || {};\r\n\r\n        return participant[kOlmData];\r\n    }\r\n\r\n    /**\r\n     * Handles the conference joined event. Upon joining a conference, the participant\r\n     * who just joined will start new olm sessions with every other participant.\r\n     *\r\n     * @private\r\n     */\r\n    async _onConferenceJoined() {\r\n        logger.debug('Conference joined');\r\n\r\n        await this._init;\r\n\r\n        const promises = [];\r\n\r\n        // Establish a 1-to-1 Olm session with every participant in the conference.\r\n        // We are forcing the last user to join the conference to start the exchange\r\n        // so we can send some pre-established secrets in the ACK.\r\n        for (const participant of this._conf.getParticipants()) {\r\n            promises.push(this._sendSessionInit(participant));\r\n        }\r\n\r\n        await Promise.allSettled(promises);\r\n\r\n        // TODO: retry failed ones.\r\n        // TODO: skip participants which don't support E2EE.\r\n    }\r\n\r\n    /**\r\n     * Handles leaving the conference, cleaning up olm sessions.\r\n     *\r\n     * @private\r\n     */\r\n    async _onConferenceLeft() {\r\n        logger.debug('Conference left');\r\n\r\n        await this._init;\r\n\r\n        for (const participant of this._conf.getParticipants()) {\r\n            this._onParticipantLeft(participant.getId(), participant);\r\n        }\r\n\r\n        if (this._olmAccount) {\r\n            this._olmAccount.free();\r\n            this._olmAccount = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Main message handler. Handles 1-to-1 messages received from other participants\r\n     * and send the appropriate replies.\r\n     *\r\n     * @private\r\n     */\r\n    async _onEndpointMessageReceived(participant, payload) {\r\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\r\n            return;\r\n        }\r\n\r\n        if (!payload.olm) {\r\n            logger.warn('Incorrectly formatted message');\r\n\r\n            return;\r\n        }\r\n\r\n        await this._init;\r\n\r\n        const msg = payload.olm;\r\n        const pId = participant.getId();\r\n        const olmData = this._getParticipantOlmData(participant);\r\n\r\n        switch (msg.type) {\r\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\r\n            if (olmData.session) {\r\n                logger.warn(`Participant ${pId} already has a session`);\r\n\r\n                this._sendError(participant, 'Session already established');\r\n            } else {\r\n                // Create a session for communicating with this participant.\r\n\r\n                const session = new Olm.Session();\r\n\r\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\r\n                olmData.session = session;\r\n\r\n                // Send ACK\r\n                const ack = {\r\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                    olm: {\r\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\r\n                        data: {\r\n                            ciphertext: this._encryptKeyInfo(session),\r\n                            uuid: msg.data.uuid\r\n                        }\r\n                    }\r\n                };\r\n\r\n                this._sendMessage(ack, pId);\r\n\r\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\r\n            }\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\r\n            if (olmData.session) {\r\n                logger.warn(`Participant ${pId} already has a session`);\r\n\r\n                this._sendError(participant, 'No session found');\r\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\r\n                const { ciphertext } = msg.data;\r\n                const d = this._reqs.get(msg.data.uuid);\r\n                const session = new Olm.Session();\r\n\r\n                session.create_inbound(this._olmAccount, ciphertext.body);\r\n\r\n                // Remove OT keys that have been used to setup this session.\r\n                this._olmAccount.remove_one_time_keys(session);\r\n\r\n                // Decrypt first message.\r\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\r\n\r\n                olmData.session = session;\r\n                olmData.pendingSessionUuid = undefined;\r\n\r\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\r\n\r\n                this._reqs.delete(msg.data.uuid);\r\n                d.resolve();\r\n\r\n                const json = safeJsonParse(data);\r\n\r\n                if (json.key) {\r\n                    const key = base64js.toByteArray(json.key);\r\n                    const keyIndex = json.keyIndex;\r\n\r\n                    olmData.lastKey = key;\r\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\r\n                }\r\n            } else {\r\n                logger.warn('Received ACK with the wrong UUID');\r\n\r\n                this._sendError(participant, 'Invalid UUID');\r\n            }\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.ERROR: {\r\n            logger.error(msg.data.error);\r\n\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\r\n            if (olmData.session) {\r\n                const { ciphertext } = msg.data;\r\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\r\n                const json = safeJsonParse(data);\r\n\r\n                if (json.key !== undefined && json.keyIndex !== undefined) {\r\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\r\n                    const keyIndex = json.keyIndex;\r\n\r\n                    if (!isEqual(olmData.lastKey, key)) {\r\n                        olmData.lastKey = key;\r\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\r\n                    }\r\n\r\n                    // Send ACK.\r\n                    const ack = {\r\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                        olm: {\r\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\r\n                            data: {\r\n                                ciphertext: this._encryptKeyInfo(olmData.session),\r\n                                uuid: msg.data.uuid\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    this._sendMessage(ack, pId);\r\n                }\r\n            } else {\r\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\r\n\r\n                this._sendError(participant, 'No session found while processing key-info');\r\n            }\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\r\n            if (olmData.session) {\r\n                const { ciphertext } = msg.data;\r\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\r\n                const json = safeJsonParse(data);\r\n\r\n                if (json.key !== undefined && json.keyIndex !== undefined) {\r\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\r\n                    const keyIndex = json.keyIndex;\r\n\r\n                    if (!isEqual(olmData.lastKey, key)) {\r\n                        olmData.lastKey = key;\r\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\r\n                    }\r\n                }\r\n\r\n                const d = this._reqs.get(msg.data.uuid);\r\n\r\n                this._reqs.delete(msg.data.uuid);\r\n                d.resolve();\r\n            } else {\r\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\r\n\r\n                this._sendError(participant, 'No session found while processing key-info-ack');\r\n            }\r\n            break;\r\n        }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\r\n     *\r\n     * @private\r\n     */\r\n    _onParticipantLeft(id, participant) {\r\n        logger.debug(`Participant ${id} left`);\r\n\r\n        const olmData = this._getParticipantOlmData(participant);\r\n\r\n        if (olmData.session) {\r\n            olmData.session.free();\r\n            olmData.session = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds and sends an error message to the target participant.\r\n     *\r\n     * @param {JitsiParticipant} participant - The target participant.\r\n     * @param {string} error - The error message.\r\n     * @returns {void}\r\n     */\r\n    _sendError(participant, error) {\r\n        const pId = participant.getId();\r\n        const err = {\r\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n            olm: {\r\n                type: OLM_MESSAGE_TYPES.ERROR,\r\n                data: {\r\n                    error\r\n                }\r\n            }\r\n        };\r\n\r\n        this._sendMessage(err, pId);\r\n    }\r\n\r\n    /**\r\n     * Internal helper to send the given object to the given participant ID.\r\n     * This function merely exists so the transport can be easily swapped.\r\n     * Currently messages are transmitted via XMPP MUC private messages.\r\n     *\r\n     * @param {object} data - The data that will be sent to the target participant.\r\n     * @param {string} participantId - ID of the target participant.\r\n     */\r\n    _sendMessage(data, participantId) {\r\n        this._conf.sendMessage(data, participantId);\r\n    }\r\n\r\n    /**\r\n     * Builds and sends the session-init request to the target participant.\r\n     *\r\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\r\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\r\n     * @private\r\n     */\r\n    _sendSessionInit(participant) {\r\n        const pId = participant.getId();\r\n        const olmData = this._getParticipantOlmData(participant);\r\n\r\n        if (olmData.session) {\r\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\r\n\r\n            return Promise.reject();\r\n        }\r\n\r\n        if (olmData.pendingSessionUuid !== undefined) {\r\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\r\n\r\n            return Promise.reject();\r\n        }\r\n\r\n        // Generate a One Time Key.\r\n        this._olmAccount.generate_one_time_keys(1);\r\n\r\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\r\n        const otKey = Object.values(otKeys.curve25519)[0];\r\n\r\n        if (!otKey) {\r\n            return Promise.reject(new Error('No one-time-keys generated'));\r\n        }\r\n\r\n        // Mark the OT keys (one really) as published so they are not reused.\r\n        this._olmAccount.mark_keys_as_published();\r\n\r\n        const uuid = uuidv4();\r\n        const init = {\r\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n            olm: {\r\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\r\n                data: {\r\n                    idKey: this._idKey,\r\n                    otKey,\r\n                    uuid\r\n                }\r\n            }\r\n        };\r\n\r\n        const d = new Deferred();\r\n\r\n        d.setRejectTimeout(REQ_TIMEOUT);\r\n        d.catch(() => {\r\n            this._reqs.delete(uuid);\r\n            olmData.pendingSessionUuid = undefined;\r\n        });\r\n        this._reqs.set(uuid, d);\r\n\r\n        this._sendMessage(init, pId);\r\n\r\n        // Store the UUID for matching with the ACK.\r\n        olmData.pendingSessionUuid = uuid;\r\n\r\n        return d;\r\n    }\r\n}\r\n\r\nOlmAdapter.events = OlmAdapterEvents;\r\n\r\n/**\r\n * Helper to ensure JSON parsing always returns an object.\r\n *\r\n * @param {string} data - The data that needs to be parsed.\r\n * @returns {object} - Parsed data or empty object in case of failure.\r\n */\r\nfunction safeJsonParse(data) {\r\n    try {\r\n        return JSON.parse(data);\r\n    } catch (e) {\r\n        return {};\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport debounce from 'lodash.debounce';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport browser from '../browser';\r\n\r\nimport E2EEContext from './E2EEContext';\r\nimport { OlmAdapter } from './OlmAdapter';\r\nimport { importKey, ratchet } from './crypto-utils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Period which we'll wait before updating / rotating our keys when a participant\r\n// joins or leaves.\r\nconst DEBOUNCE_PERIOD = 5000;\r\n\r\n/**\r\n * This module integrates {@link E2EEContext} with {@link JitsiConference} in order to enable E2E encryption.\r\n */\r\nexport class E2EEncryption {\r\n    /**\r\n     * A constructor.\r\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\r\n     */\r\n    constructor(conference) {\r\n        this.conference = conference;\r\n\r\n        this._conferenceJoined = false;\r\n        this._enabled = false;\r\n        this._initialized = false;\r\n        this._key = undefined;\r\n\r\n        this._e2eeCtx = new E2EEContext();\r\n        this._olmAdapter = new OlmAdapter(conference);\r\n\r\n        // Debounce key rotation / ratcheting to avoid a storm of messages.\r\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\r\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\r\n\r\n        // Participant join / leave operations. Used for key advancement / rotation.\r\n        //\r\n\r\n        this.conference.on(\r\n            JitsiConferenceEvents.CONFERENCE_JOINED,\r\n            () => {\r\n                this._conferenceJoined = true;\r\n            });\r\n        this.conference.on(\r\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\r\n            this._onParticipantPropertyChanged.bind(this));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this._onParticipantJoined.bind(this));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this._onParticipantLeft.bind(this));\r\n\r\n        // Conference media events in order to attach the encryptor / decryptor.\r\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\r\n        // added instead of shenanigans around conference track events and track muted.\r\n        //\r\n\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n            this._onMediaSessionStarted.bind(this));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.TRACK_ADDED,\r\n            track => track.isLocal() && this._onLocalTrackAdded(track));\r\n        this.conference.rtc.on(\r\n            RTCEvents.REMOTE_TRACK_ADDED,\r\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\r\n            this._trackMuteChanged.bind(this));\r\n\r\n        // Olm signalling events.\r\n        this._olmAdapter.on(\r\n            OlmAdapter.events.OLM_ID_KEY_READY,\r\n            this._onOlmIdKeyReady.bind(this));\r\n        this._olmAdapter.on(\r\n            OlmAdapter.events.PARTICIPANT_E2EE_CHANNEL_READY,\r\n            this._onParticipantE2EEChannelReady.bind(this));\r\n        this._olmAdapter.on(\r\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\r\n            this._onParticipantKeyUpdated.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Indicates if E2EE is supported in the current platform.\r\n     *\r\n     * @param {object} config - Global configuration.\r\n     * @returns {boolean}\r\n     */\r\n    static isSupported(config) {\r\n        return browser.supportsInsertableStreams()\r\n            && OlmAdapter.isSupported()\r\n            && !(config.testing && config.testing.disableE2EE);\r\n    }\r\n\r\n    /**\r\n     * Indicates whether E2EE is currently enabled or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isEnabled() {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * Enables / disables End-To-End encryption.\r\n     *\r\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\r\n     * @returns {void}\r\n     */\r\n    setEnabled(enabled) {\r\n        if (enabled === this._enabled) {\r\n            return;\r\n        }\r\n\r\n        this._enabled = enabled;\r\n\r\n        if (!this._initialized && enabled) {\r\n            // Need to re-create the peerconnections in order to apply the insertable streams constraint.\r\n            // TODO: this was necessary due to some audio issues when indertable streams are used\r\n            // even though encryption is not performed. This should be fixed in the browser eventually.\r\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1103280\r\n            this.conference._restartMediaSessions();\r\n\r\n            this._initialized = true;\r\n        }\r\n\r\n        // Generate a random key in case we are enabling.\r\n        this._key = enabled ? this._generateKey() : false;\r\n\r\n        // Send it to others using the E2EE olm channel.\r\n        this._olmAdapter.updateKey(this._key).then(index => {\r\n            // Set our key so we begin encrypting.\r\n            this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates a new 256 bit random key.\r\n     *\r\n     * @returns {Uint8Array}\r\n     * @private\r\n     */\r\n    _generateKey() {\r\n        return window.crypto.getRandomValues(new Uint8Array(32));\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\r\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\r\n     * @private\r\n     */\r\n    _onLocalTrackAdded(track) {\r\n        for (const session of this.conference._getMediaSessions()) {\r\n            this._setupSenderE2EEForTrack(session, track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setups E2E encryption for the new session.\r\n     * @param {JingleSessionPC} session - the new media session.\r\n     * @private\r\n     */\r\n    _onMediaSessionStarted(session) {\r\n        const localTracks = this.conference.getLocalTracks();\r\n\r\n        for (const track of localTracks) {\r\n            this._setupSenderE2EEForTrack(session, track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Publushes our own Olmn id key in presence.\r\n     * @private\r\n     */\r\n    _onOlmIdKeyReady(idKey) {\r\n        logger.debug(`Olm id key ready: ${idKey}`);\r\n\r\n        // Publish it in presence.\r\n        this.conference.setLocalParticipantProperty('e2ee.idKey', idKey);\r\n    }\r\n\r\n    /**\r\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\r\n     * @private\r\n     */\r\n    _onParticipantJoined(id) {\r\n        logger.debug(`Participant ${id} joined`);\r\n\r\n        if (this._conferenceJoined && this._enabled) {\r\n            this._ratchetKey();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rotates the current key when a participant leaves the conference.\r\n     * @private\r\n     */\r\n    _onParticipantLeft(id) {\r\n        logger.debug(`Participant ${id} left`);\r\n\r\n        this._e2eeCtx.cleanup(id);\r\n\r\n        if (this._enabled) {\r\n            this._rotateKey();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event posted when the E2EE signalling channel has been established with the given participant.\r\n     * @private\r\n     */\r\n    _onParticipantE2EEChannelReady(id) {\r\n        logger.debug(`E2EE channel with participant ${id} is ready`);\r\n    }\r\n\r\n    /**\r\n     * Handles an update in a participant's key.\r\n     *\r\n     * @param {string} id - The participant ID.\r\n     * @param {Uint8Array | boolean} key - The new key for the participant.\r\n     * @param {Number} index - The new key's index.\r\n     * @private\r\n     */\r\n    _onParticipantKeyUpdated(id, key, index) {\r\n        logger.debug(`Participant ${id} updated their key`);\r\n\r\n        this._e2eeCtx.setKey(id, key, index);\r\n    }\r\n\r\n    /**\r\n     * Handles an update in a participant's presence property.\r\n     *\r\n     * @param {JitsiParticipant} participant - The participant.\r\n     * @param {string} name - The name of the property that changed.\r\n     * @param {*} oldValue - The property's previous value.\r\n     * @param {*} newValue - The property's new value.\r\n     * @private\r\n     */\r\n    _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\r\n        switch (name) {\r\n        case 'e2ee.idKey':\r\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Advances the current key by using ratcheting.\r\n     *\r\n     * @private\r\n     */\r\n    async _ratchetKeyImpl() {\r\n        logger.debug('Ratchetting key');\r\n\r\n        const material = await importKey(this._key);\r\n        const newKey = await ratchet(material);\r\n\r\n        this._key = new Uint8Array(newKey);\r\n\r\n        const index = await this._olmAdapter.updateCurrentKey(this._key);\r\n\r\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\r\n    }\r\n\r\n    /**\r\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\r\n     * to all participants and once they all received it, start using it.\r\n     *\r\n     * @private\r\n     */\r\n    async _rotateKeyImpl() {\r\n        logger.debug('Rotating key');\r\n\r\n        this._key = this._generateKey();\r\n        const index = await this._olmAdapter.updateKey(this._key);\r\n\r\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE for the receiving side.\r\n     *\r\n     * @private\r\n     */\r\n    _setupReceiverE2EEForTrack(tpc, track) {\r\n        if (!this._enabled) {\r\n            return;\r\n        }\r\n\r\n        const receiver = tpc.findReceiverForTrack(track.track);\r\n\r\n        if (receiver) {\r\n            this._e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\r\n        } else {\r\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE for the sending side.\r\n     *\r\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\r\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\r\n     * @private\r\n     */\r\n    _setupSenderE2EEForTrack(session, track) {\r\n        if (!this._enabled) {\r\n            return;\r\n        }\r\n\r\n        const pc = session.peerconnection;\r\n        const sender = pc && pc.findSenderForTrack(track.track);\r\n\r\n        if (sender) {\r\n            this._e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\r\n        } else {\r\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE on the sender that is created for the unmuted local video track.\r\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\r\n     * @private\r\n     */\r\n    _trackMuteChanged(track) {\r\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\r\n            for (const session of this.conference._getMediaSessions()) {\r\n                this._setupSenderE2EEForTrack(session, track);\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* global __filename, $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport {\r\n    ICE_DURATION,\r\n    ICE_STATE_CHANGED\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport AsyncQueue from '../util/AsyncQueue';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport { integerHash } from '../util/StringUtils';\r\n\r\nimport browser from './../browser';\r\nimport JingleSession from './JingleSession';\r\nimport * as JingleSessionState from './JingleSessionState';\r\nimport MediaSessionEvents from './MediaSessionEvents';\r\nimport SDP from './SDP';\r\nimport SDPDiffer from './SDPDiffer';\r\nimport SDPUtil from './SDPUtil';\r\nimport SignalingLayerImpl from './SignalingLayerImpl';\r\nimport XmppConnection from './XmppConnection';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Constant tells how long we're going to wait for IQ response, before timeout\r\n * error is  triggered.\r\n * @type {number}\r\n */\r\nconst IQ_TIMEOUT = 10000;\r\n\r\n/*\r\n * The default number of samples (per stat) to keep when webrtc stats gathering\r\n * is enabled in TraceablePeerConnection.\r\n */\r\nconst DEFAULT_MAX_STATS = 300;\r\n\r\n/**\r\n * @typedef {Object} JingleSessionPCOptions\r\n * @property {Object} abTesting - A/B testing related options (ask George).\r\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\r\n * video test ?(ask George).\r\n * @property {boolean} disableH264 - Described in the config.js[1].\r\n * @property {boolean} disableRtx - Described in the config.js[1].\r\n * @property {boolean} disableSimulcast - Described in the config.js[1].\r\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\r\n * on the PeerConnection.\r\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\r\n * @property {boolean} failICE - it's an option used in the tests. Set to\r\n * <tt>true</tt> to block any real candidates and make the ICE fail.\r\n * @property {boolean} gatherStats - Described in the config.js[1].\r\n * @property {object} p2p - Peer to peer related options (FIXME those could be\r\n * fetched from config.p2p on the upper level).\r\n * @property {boolean} p2p.disableH264 - Described in the config.js[1].\r\n * @property {boolean} p2p.preferH264 - Described in the config.js[1].\r\n * @property {boolean} preferH264 - Described in the config.js[1].\r\n * @property {Object} testing - Testing and/or experimental options.\r\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\r\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\r\n *\r\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\r\n */\r\n/**\r\n *\r\n */\r\nexport default class JingleSessionPC extends JingleSession {\r\n    /**\r\n     * Parses 'senders' attribute of the video content.\r\n     * @param {jQuery} jingleContents\r\n     * @return {string|null} one of the values of content \"senders\" attribute\r\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\r\n     * invalid then <tt>null</tt> will be returned.\r\n     * @private\r\n     */\r\n    static parseVideoSenders(jingleContents) {\r\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\r\n\r\n        if (videoContents.length) {\r\n            const senders = videoContents[0].getAttribute('senders');\r\n\r\n            if (senders === 'both'\r\n                || senders === 'initiator'\r\n                || senders === 'responder'\r\n                || senders === 'none') {\r\n                return senders;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parses the video max frame height value out of the 'content-modify' IQ.\r\n     *\r\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\r\n     * @returns {Number|null}\r\n     */\r\n    static parseMaxFrameHeight(jingleContents) {\r\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\r\n\r\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>JingleSessionPC</tt>\r\n     * @param {string} sid the Jingle Session ID - random string which\r\n     * identifies the session\r\n     * @param {string} localJid our JID\r\n     * @param {string} remoteJid remote peer JID\r\n     * @param {XmppConnection} connection - The XMPP connection instance.\r\n     * @param mediaConstraints the media constraints object passed to\r\n     * createOffer/Answer, as defined by the WebRTC standard\r\n     * @param iceConfig the ICE servers config object as defined by the WebRTC\r\n     * standard.\r\n     * @param {boolean} isP2P indicates whether this instance is\r\n     * meant to be used in a direct, peer to peer connection or <tt>false</tt>\r\n     * if it's a JVB connection.\r\n     * @param {boolean} isInitiator indicates if it will be the side which\r\n     * initiates the session.\r\n     * @constructor\r\n     *\r\n     * @implements {SignalingLayer}\r\n     */\r\n    constructor(\r\n            sid,\r\n            localJid,\r\n            remoteJid,\r\n            connection,\r\n            mediaConstraints,\r\n            iceConfig,\r\n            isP2P,\r\n            isInitiator) {\r\n        super(\r\n            sid,\r\n            localJid,\r\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\r\n\r\n        /**\r\n         * The bridge session's identifier. One Jingle session can during\r\n         * it's lifetime participate in multiple bridge sessions managed by\r\n         * Jicofo. A new bridge session is started whenever Jicofo sends\r\n         * 'session-initiate' or 'transport-replace'.\r\n         *\r\n         * @type {?string}\r\n         * @private\r\n         */\r\n        this._bridgeSessionId = null;\r\n\r\n        /**\r\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\r\n         * used to update Jicofo once the XMPP connection goes back online.\r\n         * @type {SDP|undefined}\r\n         * @private\r\n         */\r\n        this._cachedOldLocalSdp = undefined;\r\n\r\n        /**\r\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\r\n         * used to update Jicofo once the XMPP connection goes back online.\r\n         * @type {SDP|undefined}\r\n         * @private\r\n         */\r\n        this._cachedNewLocalSdp = undefined;\r\n\r\n        /**\r\n         * Stores result of {@link window.performance.now()} at the time when\r\n         * ICE enters 'checking' state.\r\n         * @type {number|null} null if no value has been stored yet\r\n         * @private\r\n         */\r\n        this._iceCheckingStartedTimestamp = null;\r\n\r\n        /**\r\n         * Stores result of {@link window.performance.now()} at the time when\r\n         * first ICE candidate is spawned by the peerconnection to mark when\r\n         * ICE gathering started. That's, because ICE gathering state changed\r\n         * events are not supported by most of the browsers, so we try something\r\n         * that will work everywhere. It may not be as accurate, but given that\r\n         * 'host' candidate usually comes first, the delay should be minimal.\r\n         * @type {number|null} null if no value has been stored yet\r\n         * @private\r\n         */\r\n        this._gatheringStartedTimestamp = null;\r\n\r\n        /**\r\n         * Local preference for the receive video max frame height.\r\n         *\r\n         * @type {Number|undefined}\r\n         */\r\n        this.localRecvMaxFrameHeight = undefined;\r\n\r\n        /**\r\n         * Indicates whether or not this session is willing to send/receive\r\n         * video media. When set to <tt>false</tt> the underlying peer\r\n         * connection will disable local video transfer and the remote peer will\r\n         * be will be asked to stop sending video via 'content-modify' IQ\r\n         * (the senders attribute of video contents will be adjusted\r\n         * accordingly). Note that this notification is sent only in P2P\r\n         * session, because Jicofo does not support it yet. Obviously when\r\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\r\n         * notification will be sent to resume video transfer on the remote\r\n         * side.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._localVideoActive = true;\r\n\r\n        /**\r\n         * Indicates whether or not the remote peer has video transfer active.\r\n         * When set to <tt>true</tt> it means that remote peer is neither\r\n         * sending nor willing to receive video. In such case we'll ask\r\n         * our peerconnection to stop sending video by calling\r\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\r\n         * <tt>false</tt>.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._remoteVideoActive = true;\r\n\r\n        /**\r\n         * Marks that ICE gathering duration has been reported already. That\r\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\r\n         * conference migration/ICE restart).\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._gatheringReported = false;\r\n\r\n        this.lasticecandidate = false;\r\n        this.closed = false;\r\n\r\n        /**\r\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\r\n         * a peer to peer type of session.\r\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\r\n         * session or <tt>false</tt> if it's a JVB session\r\n         */\r\n        this.isP2P = isP2P;\r\n\r\n        /**\r\n         * Remote preference for the receive video max frame height.\r\n         *\r\n         * @type {Number|undefined}\r\n         */\r\n        this.remoteRecvMaxFrameHeight = undefined;\r\n\r\n        /**\r\n         * The signaling layer implementation.\r\n         * @type {SignalingLayerImpl}\r\n         */\r\n        this.signalingLayer = new SignalingLayerImpl();\r\n\r\n        /**\r\n         * The queue used to serialize operations done on the peerconnection.\r\n         *\r\n         * @type {AsyncQueue}\r\n         */\r\n        this.modificationQueue = new AsyncQueue();\r\n\r\n        /**\r\n         * Flag used to guarantee that the connection established event is\r\n         * triggered just once.\r\n         * @type {boolean}\r\n         */\r\n        this.wasConnected = false;\r\n\r\n        /**\r\n         * Keeps track of how long (in ms) it took from ICE start to ICE\r\n         * connect.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.establishmentDuration = undefined;\r\n\r\n        this._xmppListeners = [];\r\n        this._xmppListeners.push(\r\n            connection.addEventListener(\r\n                XmppConnection.Events.CONN_STATUS_CHANGED,\r\n                this.onXmppStatusChanged.bind(this))\r\n        );\r\n\r\n        this._removeSenderVideoConstraintsChangeListener = undefined;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Checks whether or not this session instance is still operational.\r\n     * @private\r\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\r\n     */\r\n    _assertNotEnded() {\r\n        return this.state !== JingleSessionState.ENDED;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @param {JingleSessionPCOptions} options  - a set of config options.\r\n     */\r\n    doInitialize(options) {\r\n        this.failICE = Boolean(options.failICE);\r\n        this.lasticecandidate = false;\r\n        this.options = options;\r\n\r\n        /**\r\n         * {@code true} if reconnect is in progress.\r\n         * @type {boolean}\r\n         */\r\n        this.isReconnect = false;\r\n\r\n        /**\r\n         * Set to {@code true} if the connection was ever stable\r\n         * @type {boolean}\r\n         */\r\n        this.wasstable = false;\r\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\r\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\r\n\r\n        const pcOptions = { disableRtx: options.disableRtx };\r\n\r\n        if (options.gatherStats) {\r\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\r\n        }\r\n        pcOptions.capScreenshareBitrate = false;\r\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\r\n        pcOptions.videoQuality = options.videoQuality;\r\n\r\n        // codec preference options for jvb connection.\r\n        if (pcOptions.videoQuality) {\r\n            pcOptions.disabledCodec = pcOptions.videoQuality.disabledCodec;\r\n            pcOptions.preferredCodec = pcOptions.videoQuality.preferredCodec;\r\n        }\r\n\r\n        if (this.isP2P) {\r\n            // simulcast needs to be disabled for P2P (121) calls\r\n            pcOptions.disableSimulcast = true;\r\n            pcOptions.disableH264 = options.p2p && options.p2p.disableH264;\r\n            pcOptions.preferH264 = options.p2p && options.p2p.preferH264;\r\n\r\n            // codec preference options for p2p.\r\n            if (options.p2p) {\r\n                // Do not negotiate H246 codec when insertable streams is used because of issues like this -\r\n                // https://bugs.chromium.org/p/webrtc/issues/detail?id=11886\r\n                pcOptions.disabledCodec = options.enableInsertableStreams\r\n                    ? CodecMimeType.H264\r\n                    : options.p2p.disabledCodec;\r\n                pcOptions.preferredCodec = options.p2p.preferredCodec;\r\n            }\r\n\r\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\r\n\r\n            if (typeof abtestSuspendVideo !== 'undefined') {\r\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\r\n            }\r\n        } else {\r\n            // H264 does not support simulcast, so it needs to be disabled.\r\n            pcOptions.disableSimulcast\r\n                = options.disableSimulcast\r\n                    || (options.preferH264 && !options.disableH264);\r\n            pcOptions.preferH264 = options.preferH264;\r\n\r\n            // disable simulcast for screenshare and set the max bitrate to\r\n            // 500Kbps if the testing flag is present in config.js.\r\n            if (options.testing\r\n                && options.testing.capScreenshareBitrate\r\n                && typeof options.testing.capScreenshareBitrate === 'number') {\r\n                pcOptions.capScreenshareBitrate\r\n                    = Math.random()\r\n                    < options.testing.capScreenshareBitrate;\r\n\r\n                // add the capScreenshareBitrate to the permanent properties so\r\n                // that it's included with every event that we send to the\r\n                // analytics backend.\r\n                Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\r\n            }\r\n        }\r\n\r\n        if (options.startSilent) {\r\n            pcOptions.startSilent = true;\r\n        }\r\n\r\n        this.peerconnection\r\n            = this.rtc.createPeerConnection(\r\n                    this.signalingLayer,\r\n                    this.iceConfig,\r\n                    this.isP2P,\r\n                    pcOptions);\r\n\r\n        this.peerconnection.onicecandidate = ev => {\r\n            if (!ev) {\r\n                // There was an incomplete check for ev before which left\r\n                // the last line of the function unprotected from a potential\r\n                // throw of an exception. Consequently, it may be argued that\r\n                // the check is unnecessary. Anyway, I'm leaving it and making\r\n                // the check complete.\r\n                return;\r\n            }\r\n\r\n            // XXX this is broken, candidate is not parsed.\r\n            const candidate = ev.candidate;\r\n            const now = window.performance.now();\r\n\r\n            if (candidate) {\r\n                if (this._gatheringStartedTimestamp === null) {\r\n                    this._gatheringStartedTimestamp = now;\r\n                }\r\n\r\n                // Discard candidates of disabled protocols.\r\n                let protocol = candidate.protocol;\r\n\r\n                if (typeof protocol === 'string') {\r\n                    protocol = protocol.toLowerCase();\r\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\r\n                        if (this.webrtcIceTcpDisable) {\r\n                            return;\r\n                        }\r\n                    } else if (protocol === 'udp') {\r\n                        if (this.webrtcIceUdpDisable) {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (!this._gatheringReported) {\r\n                // End of gathering\r\n                Statistics.sendAnalytics(\r\n                    ICE_DURATION,\r\n                    {\r\n                        phase: 'gathering',\r\n                        value: now - this._gatheringStartedTimestamp,\r\n                        p2p: this.isP2P,\r\n                        initiator: this.isInitiator\r\n                    });\r\n                this._gatheringReported = true;\r\n            }\r\n            this.sendIceCandidate(candidate);\r\n        };\r\n\r\n        // Note there is a change in the spec about closed:\r\n        // This value moved into the RTCPeerConnectionState enum in\r\n        // the May 13, 2016 draft of the specification, as it reflects the state\r\n        // of the RTCPeerConnection, not the signaling connection. You now\r\n        // detect a closed connection by checking for connectionState to be\r\n        // \"closed\" instead.\r\n        // I suppose at some point this will be moved to onconnectionstatechange\r\n        this.peerconnection.onsignalingstatechange = () => {\r\n            if (this.peerconnection.signalingState === 'stable') {\r\n                this.wasstable = true;\r\n            } else if (this.peerconnection.signalingState === 'closed'\r\n                || this.peerconnection.connectionState === 'closed') {\r\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * The oniceconnectionstatechange event handler contains the code to\r\n         * execute when the iceconnectionstatechange event, of type Event,\r\n         * is received by this RTCPeerConnection. Such an event is sent when\r\n         * the value of RTCPeerConnection.iceConnectionState changes.\r\n         */\r\n        this.peerconnection.oniceconnectionstatechange = () => {\r\n            const now = window.performance.now();\r\n\r\n            if (!this.isP2P) {\r\n                this.room.connectionTimes[\r\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\r\n                    = now;\r\n            }\r\n            logger.log(\r\n                `(TIME) ICE ${this.peerconnection.iceConnectionState}`\r\n                    + ` P2P? ${this.isP2P}:\\t`,\r\n                now);\r\n\r\n            Statistics.sendAnalytics(\r\n                ICE_STATE_CHANGED,\r\n                {\r\n                    p2p: this.isP2P,\r\n                    state: this.peerconnection.iceConnectionState,\r\n                    'signaling_state': this.peerconnection.signalingState,\r\n                    reconnect: this.isReconnect,\r\n                    value: now\r\n                });\r\n\r\n            this.room.eventEmitter.emit(\r\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\r\n                this,\r\n                this.peerconnection.iceConnectionState);\r\n            switch (this.peerconnection.iceConnectionState) {\r\n            case 'checking':\r\n                this._iceCheckingStartedTimestamp = now;\r\n                break;\r\n            case 'connected':\r\n                // Informs interested parties that the connection has been\r\n                // restored.\r\n                if (this.peerconnection.signalingState === 'stable') {\r\n                    if (this.isReconnect) {\r\n                        this.room.eventEmitter.emit(\r\n                            XMPPEvents.CONNECTION_RESTORED, this);\r\n                    }\r\n                }\r\n\r\n                if (!this.wasConnected && this.wasstable) {\r\n\r\n                    Statistics.sendAnalytics(\r\n                        ICE_DURATION,\r\n                        {\r\n                            phase: 'checking',\r\n                            value: now - this._iceCheckingStartedTimestamp,\r\n                            p2p: this.isP2P,\r\n                            initiator: this.isInitiator\r\n                        });\r\n\r\n                    // Switch between ICE gathering and ICE checking whichever\r\n                    // started first (scenarios are different for initiator\r\n                    // vs responder)\r\n                    const iceStarted\r\n                        = Math.min(\r\n                            this._iceCheckingStartedTimestamp,\r\n                            this._gatheringStartedTimestamp);\r\n\r\n                    this.establishmentDuration = now - iceStarted;\r\n\r\n                    Statistics.sendAnalytics(\r\n                        ICE_DURATION,\r\n                        {\r\n                            phase: 'establishment',\r\n                            value: this.establishmentDuration,\r\n                            p2p: this.isP2P,\r\n                            initiator: this.isInitiator\r\n                        });\r\n\r\n                    this.wasConnected = true;\r\n                    this.room.eventEmitter.emit(\r\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\r\n                }\r\n                this.isReconnect = false;\r\n                break;\r\n            case 'disconnected':\r\n                this.isReconnect = true;\r\n\r\n                // Informs interested parties that the connection has been\r\n                // interrupted.\r\n                if (this.wasstable) {\r\n                    this.room.eventEmitter.emit(\r\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\r\n                }\r\n                break;\r\n            case 'failed':\r\n                this.room.eventEmitter.emit(\r\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\r\n                break;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * The negotiationneeded event is fired whenever we shake the media on the\r\n         * RTCPeerConnection object.\r\n         */\r\n        this.peerconnection.onnegotiationneeded = () => {\r\n            const state = this.peerconnection.signalingState;\r\n            const remoteDescription = this.peerconnection.remoteDescription;\r\n\r\n            if (browser.usesUnifiedPlan() && state === 'stable'\r\n                && remoteDescription && typeof remoteDescription.sdp === 'string') {\r\n                logger.debug(`onnegotiationneeded fired on ${this.peerconnection} in state: ${state}`);\r\n                const workFunction = finishedCallback => {\r\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                    this._renegotiate()\r\n                        .then(() => {\r\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\r\n                            finishedCallback();\r\n                        },\r\n                        finishedCallback /* will be called with en error */);\r\n                };\r\n\r\n                this.modificationQueue.push(\r\n                    workFunction,\r\n                    error => {\r\n                        if (error) {\r\n                            logger.error('onnegotiationneeded error', error);\r\n                        } else {\r\n                            logger.debug('onnegotiationneeded executed - OK');\r\n                        }\r\n                    });\r\n            }\r\n        };\r\n\r\n        // The signaling layer will bind it's listeners at this point\r\n        this.signalingLayer.setChatRoom(this.room);\r\n\r\n        if (!this.isP2P && options.enableLayerSuspension) {\r\n            // If this is the bridge session, we'll listen for\r\n            // SENDER_VIDEO_CONSTRAINTS_CHANGED events and notify the peer connection\r\n            this._removeSenderVideoConstraintsChangeListener = this.rtc.addListener(\r\n                RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, () => {\r\n                    this.eventEmitter.emit(\r\n                        MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remote preference for receive video max frame height.\r\n     *\r\n     * @returns {Number|undefined}\r\n     */\r\n    getRemoteRecvMaxFrameHeight() {\r\n        if (this.isP2P) {\r\n            return this.remoteRecvMaxFrameHeight;\r\n        }\r\n\r\n        return this.options.enableLayerSuspension ? this.rtc.getSenderVideoConstraints().idealHeight : undefined;\r\n    }\r\n\r\n    /**\r\n     * Sends given candidate in Jingle 'transport-info' message.\r\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\r\n     * @private\r\n     */\r\n    sendIceCandidate(candidate) {\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\r\n            const ice\r\n                = SDPUtil.iceparams(\r\n                    localSDP.media[candidate.sdpMLineIndex], localSDP.session);\r\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\r\n\r\n            if (!(ice && jcand)) {\r\n                const errorMesssage = 'failed to get ice && jcand';\r\n\r\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\r\n                logger.error(errorMesssage);\r\n\r\n                return;\r\n            }\r\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n\r\n            if (this.usedrip) {\r\n                if (this.dripContainer.length === 0) {\r\n                    // start 20ms callout\r\n                    setTimeout(() => {\r\n                        if (this.dripContainer.length === 0) {\r\n                            return;\r\n                        }\r\n                        this.sendIceCandidates(this.dripContainer);\r\n                        this.dripContainer = [];\r\n                    }, 20);\r\n                }\r\n                this.dripContainer.push(candidate);\r\n            } else {\r\n                this.sendIceCandidates([ candidate ]);\r\n            }\r\n        } else {\r\n            logger.log('sendIceCandidate: last candidate.');\r\n\r\n            // FIXME: remember to re-think in ICE-restart\r\n            this.lasticecandidate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends given candidates in Jingle 'transport-info' message.\r\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\r\n     * candidate instances\r\n     * @private\r\n     */\r\n    sendIceCandidates(candidates) {\r\n        if (!this._assertNotEnded('sendIceCandidates')) {\r\n\r\n            return;\r\n        }\r\n\r\n        logger.log('sendIceCandidates', candidates);\r\n        const cand = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-info',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid });\r\n\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\r\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\r\n            const mline\r\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\r\n\r\n            if (cands.length > 0) {\r\n                const ice\r\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\r\n\r\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n                cand.c('content', {\r\n                    creator: this.initiatorJid === this.localJid\r\n                        ? 'initiator' : 'responder',\r\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\r\n                }).c('transport', ice);\r\n                for (let i = 0; i < cands.length; i++) {\r\n                    const candidate\r\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\r\n\r\n                    // Mangle ICE candidate if 'failICE' test option is enabled\r\n\r\n                    if (this.failICE) {\r\n                        candidate.ip = '1.1.1.1';\r\n                    }\r\n                    cand.c('candidate', candidate).up();\r\n                }\r\n\r\n                // add fingerprint\r\n                const fingerprintLine\r\n                    = SDPUtil.findLine(\r\n                        localSDP.media[mid],\r\n                        'a=fingerprint:', localSDP.session);\r\n\r\n                if (fingerprintLine) {\r\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\r\n\r\n                    tmp.required = true;\r\n                    cand.c(\r\n                        'fingerprint',\r\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\r\n                        .t(tmp.fingerprint);\r\n                    delete tmp.fingerprint;\r\n                    cand.attrs(tmp);\r\n                    cand.up();\r\n                }\r\n                cand.up(); // transport\r\n                cand.up(); // content\r\n            }\r\n        }\r\n\r\n        // might merge last-candidate notification into this, but it is called\r\n        // a lot later. See webrtc issue #2340\r\n        // logger.log('was this the last candidate', this.lasticecandidate);\r\n        this.connection.sendIQ(\r\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\r\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\r\n     * that the ICE connection has entered the failed state. It can then\r\n     * choose to re-create JVB channels and send 'transport-replace' to\r\n     * retry the connection.\r\n     */\r\n    sendIceFailedNotification() {\r\n        const sessionInfo\r\n            = $iq({\r\n                to: this.remoteJid,\r\n                type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'session-info',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid })\r\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\r\n            .t('failed')\r\n            .up();\r\n\r\n        this._bridgeSessionId\r\n            && sessionInfo.c(\r\n                'bridge-session', {\r\n                    xmlns: 'http://jitsi.org/protocol/focus',\r\n                    id: this._bridgeSessionId\r\n                });\r\n\r\n        this.connection.sendIQ2(\r\n            sessionInfo, {\r\n                /*\r\n                 * This message will be often sent when there are connectivity\r\n                 * issues, so make it slightly longer than Prosody's default BOSH\r\n                 * inactivity timeout of 60 seconds.\r\n                 */\r\n                timeout: 65\r\n            })\r\n            .catch(this.newJingleErrorHandler(sessionInfo));\r\n    }\r\n\r\n    /**\r\n     * {@inheritDoc}\r\n     */\r\n    addIceCandidates(elem) {\r\n        if (this.peerconnection.signalingState === 'closed') {\r\n            logger.warn('Ignored add ICE candidate when in closed state');\r\n\r\n            return;\r\n        }\r\n\r\n        const iceCandidates = [];\r\n\r\n        elem.find('>content>transport>candidate')\r\n            .each((idx, candidate) => {\r\n                let line = SDPUtil.candidateFromJingle(candidate);\r\n\r\n                line = line.replace('\\r\\n', '').replace('a=', '');\r\n\r\n                // FIXME this code does not care to handle\r\n                // non-bundle transport\r\n                const rtcCandidate = new RTCIceCandidate({\r\n                    sdpMLineIndex: 0,\r\n\r\n                    // FF comes up with more complex names like audio-23423,\r\n                    // Given that it works on both Chrome and FF without\r\n                    // providing it, let's leave it like this for the time\r\n                    // being...\r\n                    // sdpMid: 'audio',\r\n                    sdpMid: '',\r\n                    candidate: line\r\n                });\r\n\r\n                iceCandidates.push(rtcCandidate);\r\n            });\r\n\r\n        if (!iceCandidates.length) {\r\n            logger.error(\r\n                'No ICE candidates to add ?', elem[0] && elem[0].outerHTML);\r\n\r\n            return;\r\n        }\r\n\r\n        // We want to have this task queued, so that we know it is executed,\r\n        // after the initial sRD/sLD offer/answer cycle was done (based on\r\n        // the assumption that candidates are spawned after the offer/answer\r\n        // and XMPP preserves order).\r\n        const workFunction = finishedCallback => {\r\n            for (const iceCandidate of iceCandidates) {\r\n                this.peerconnection.addIceCandidate(iceCandidate)\r\n                    .then(\r\n                        () => logger.debug('addIceCandidate ok!'),\r\n                        err => logger.error('addIceCandidate failed!', err));\r\n            }\r\n\r\n            finishedCallback();\r\n        };\r\n\r\n        logger.debug(\r\n            `Queued add (${iceCandidates.length}) ICE candidates task...`);\r\n        this.modificationQueue.push(workFunction);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param contents\r\n     */\r\n    readSsrcInfo(contents) {\r\n        const ssrcs\r\n            = $(contents).find(\r\n                '>description>'\r\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n        ssrcs.each((i, ssrcElement) => {\r\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\r\n\r\n            if (this.isP2P) {\r\n                // In P2P all SSRCs are owner by the remote peer\r\n                this.signalingLayer.setSSRCOwner(\r\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\r\n            } else {\r\n                $(ssrcElement)\r\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\r\n                    .each((i3, ssrcInfoElement) => {\r\n                        const owner = ssrcInfoElement.getAttribute('owner');\r\n\r\n                        if (owner && owner.length) {\r\n                            if (isNaN(ssrc) || ssrc < 0) {\r\n                                logger.warn(\r\n                                    `Invalid SSRC ${ssrc} value received`\r\n                                        + ` for ${owner}`);\r\n                            } else {\r\n                                this.signalingLayer.setSSRCOwner(\r\n                                    ssrc,\r\n                                    Strophe.getResourceFromJid(owner));\r\n                            }\r\n                        }\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\r\n     * the recvonly video stream.\r\n     * @deprecated\r\n     */\r\n    generateRecvonlySsrc() {\r\n        if (this.peerconnection) {\r\n            this.peerconnection.generateRecvonlySsrc();\r\n        } else {\r\n            logger.error(\r\n                'Unable to generate recvonly SSRC - no peerconnection');\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Accepts incoming Jingle 'session-initiate' and should send\r\n     * 'session-accept' in result.\r\n     * @param jingleOffer jQuery selector pointing to the jingle element of\r\n     * the offer IQ\r\n     * @param success callback called when we accept incoming session\r\n     * successfully and receive RESULT packet to 'session-accept' sent.\r\n     * @param failure function(error) called if for any reason we fail to accept\r\n     * the incoming offer. 'error' argument can be used to log some details\r\n     * about the error.\r\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\r\n     * the local tracks that will be added, before the offer/answer cycle\r\n     * executes. We allow the localTracks to optionally be passed in so that\r\n     * the addition of the local tracks and the processing of the initial offer\r\n     * can all be done atomically. We want to make sure that any other\r\n     * operations which originate in the XMPP Jingle messages related with\r\n     * this session to be executed with an assumption that the initial\r\n     * offer/answer cycle has been executed already.\r\n     */\r\n    acceptOffer(jingleOffer, success, failure, localTracks) {\r\n        this.setOfferAnswerCycle(\r\n            jingleOffer,\r\n            () => {\r\n                // FIXME we may not care about RESULT packet for session-accept\r\n                // then we should either call 'success' here immediately or\r\n                // modify sendSessionAccept method to do that\r\n                this.sendSessionAccept(success, failure);\r\n            },\r\n            failure,\r\n            localTracks);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\r\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\r\n     * added, before the offer/answer cycle executes (for the local track\r\n     * addition to be an atomic operation together with the offer/answer).\r\n     */\r\n    invite(localTracks = []) {\r\n        if (!this.isInitiator) {\r\n            throw new Error('Trying to invite from the responder session');\r\n        }\r\n        const workFunction = finishedCallback => {\r\n            const addTracks = [];\r\n\r\n            for (const localTrack of localTracks) {\r\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\r\n            }\r\n\r\n            Promise.all(addTracks)\r\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\r\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\r\n                .then(() => {\r\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\r\n                    // the transformation chain.\r\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\r\n                })\r\n                .then(() => finishedCallback(), error => finishedCallback(error));\r\n        };\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error('invite error', error);\r\n                } else {\r\n                    logger.debug('invite executed - OK');\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sends 'session-initiate' to the remote peer.\r\n     *\r\n     * NOTE this method is synchronous and we're not waiting for the RESULT\r\n     * response which would delay the startup process.\r\n     *\r\n     * @param {string} offerSdp  - The local session description which will be\r\n     * used to generate an offer.\r\n     * @private\r\n     */\r\n    sendSessionInitiate(offerSdp) {\r\n        let init = $iq({\r\n            to: this.remoteJid,\r\n            type: 'set'\r\n        }).c('jingle', {\r\n            xmlns: 'urn:xmpp:jingle:1',\r\n            action: 'session-initiate',\r\n            initiator: this.initiatorJid,\r\n            sid: this.sid\r\n        });\r\n\r\n        new SDP(offerSdp).toJingle(\r\n            init,\r\n            this.isInitiator ? 'initiator' : 'responder');\r\n        init = init.tree();\r\n        logger.info('Session-initiate: ', init);\r\n        this.connection.sendIQ(init,\r\n            () => {\r\n                logger.info('Got RESULT for \"session-initiate\"');\r\n            },\r\n            error => {\r\n                logger.error('\"session-initiate\" error', error);\r\n            },\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sets the answer received from the remote peer.\r\n     * @param jingleAnswer\r\n     */\r\n    setAnswer(jingleAnswer) {\r\n        if (!this.isInitiator) {\r\n            throw new Error('Trying to set an answer on the responder session');\r\n        }\r\n        this.setOfferAnswerCycle(\r\n            jingleAnswer,\r\n            () => {\r\n                logger.info('setAnswer - succeeded');\r\n            },\r\n            error => {\r\n                logger.error('setAnswer failed: ', error);\r\n            });\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\r\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\r\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\r\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\r\n     *        of the offer (or answer) IQ\r\n     * @param success callback called when sRD/sLD cycle finishes successfully.\r\n     * @param failure callback called with an error object as an argument if we\r\n     *        fail at any point during setRD, createAnswer, setLD.\r\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\r\n     * the local tracks that will be added, before the offer/answer cycle\r\n     * executes (for the local track addition to be an atomic operation together\r\n     * with the offer/answer).\r\n     */\r\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\r\n        const workFunction = finishedCallback => {\r\n            const addTracks = [];\r\n\r\n            for (const track of localTracks) {\r\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\r\n            }\r\n\r\n            const newRemoteSdp\r\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\r\n            const oldLocalSdp\r\n                = this.peerconnection.localDescription.sdp;\r\n\r\n            const bridgeSession\r\n                = $(jingleOfferAnswerIq)\r\n                    .find('>bridge-session['\r\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\r\n            const bridgeSessionId = bridgeSession.attr('id');\r\n\r\n            if (bridgeSessionId !== this._bridgeSessionId) {\r\n                this._bridgeSessionId = bridgeSessionId;\r\n            }\r\n\r\n            Promise.all(addTracks)\r\n                .then(() => this._renegotiate(newRemoteSdp.raw))\r\n                .then(() => {\r\n                    if (this.state === JingleSessionState.PENDING) {\r\n                        this.state = JingleSessionState.ACTIVE;\r\n\r\n                        // #1 Sync up video transfer active/inactive only after\r\n                        // the initial O/A cycle. We want to adjust the video\r\n                        // media direction only in the local SDP and the Jingle\r\n                        // contents direction included in the initial\r\n                        // offer/answer is mapped to the remote SDP. Jingle\r\n                        // 'content-modify' IQ is processed in a way that it\r\n                        // will only modify local SDP when remote peer is no\r\n                        // longer interested in receiving video content.\r\n                        // Changing media direction in the remote SDP will mess\r\n                        // up our SDP translation chain (simulcast, video mute,\r\n                        // RTX etc.)\r\n                        //\r\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\r\n                        if (this.isP2P\r\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\r\n                            this.sendContentModify();\r\n                        }\r\n                    }\r\n\r\n                    // Old local SDP will be available when we're setting answer\r\n                    // for the first time, but not when offer and it's fine\r\n                    // since we're generating an answer now it will contain all\r\n                    // our SSRCs\r\n                    if (oldLocalSdp) {\r\n                        const newLocalSdp\r\n                            = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.notifyMySSRCUpdate(\r\n                            new SDP(oldLocalSdp), newLocalSdp);\r\n                    }\r\n                })\r\n                .then(() => finishedCallback(), error => finishedCallback(error));\r\n        };\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                error ? failure(error) : success();\r\n            });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Although it states \"replace transport\" it does accept full Jingle offer\r\n     * which should contain new ICE transport details.\r\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\r\n     *        transport info.\r\n     * @param success callback called when we succeed to accept new offer.\r\n     * @param failure function(error) called when we fail to accept new offer.\r\n     */\r\n    replaceTransport(jingleOfferElem, success, failure) {\r\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\r\n\r\n        // We need to first reject the 'data' section to have the SCTP stack\r\n        // cleaned up to signal the known data channel is now invalid. After\r\n        // that the original offer is set to have the SCTP connection\r\n        // established with the new bridge.\r\n        const originalOffer = jingleOfferElem.clone();\r\n\r\n        jingleOfferElem\r\n            .find('>content[name=\\'data\\']')\r\n            .attr('senders', 'rejected');\r\n\r\n        // Remove all remote sources in order to reset the client's state\r\n        // for the remote MediaStreams. When a conference is moved to\r\n        // another bridge it will start streaming with a sequence number\r\n        // that is not in sync with the most recently seen by the client.\r\n        // The symptoms include frozen or black video and lots of \"failed to\r\n        // unprotect SRTP packets\" in Chrome logs.\r\n        jingleOfferElem\r\n            .find('>content>description>source')\r\n            .remove();\r\n        jingleOfferElem\r\n            .find('>content>description>ssrc-group')\r\n            .remove();\r\n\r\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\r\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\r\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\r\n        // fingerprint has changed by setting an all zeros key.\r\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\r\n\r\n        newFingerprint.attr('hash', 'sha-1');\r\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\r\n\r\n        // First set an offer with a rejected 'data' section\r\n        this.setOfferAnswerCycle(\r\n            jingleOfferElem,\r\n            () => {\r\n                // Now set the original offer(with the 'data' section)\r\n                this.setOfferAnswerCycle(\r\n                    originalOffer,\r\n                    () => {\r\n                        const localSDP\r\n                            = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.sendTransportAccept(localSDP, success, failure);\r\n\r\n                        this.room.eventEmitter.emit(\r\n                            XMPPEvents.ICE_RESTART_SUCCESS,\r\n                            this,\r\n                            originalOffer);\r\n                    },\r\n                    failure);\r\n            },\r\n            failure\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'session-accept' message.\r\n     * @param {function()} success callback called when we receive 'RESULT'\r\n     *        packet for the 'session-accept'\r\n     * @param {function(error)} failure called when we receive an error response\r\n     *        or when the request has timed out.\r\n     * @private\r\n     */\r\n    sendSessionAccept(success, failure) {\r\n        // NOTE: since we're just reading from it, we don't need to be within\r\n        //  the modification queue to access the local description\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n        let accept = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'session-accept',\r\n                initiator: this.initiatorJid,\r\n                responder: this.responderJid,\r\n                sid: this.sid });\r\n\r\n        if (this.webrtcIceTcpDisable) {\r\n            localSDP.removeTcpCandidates = true;\r\n        }\r\n        if (this.webrtcIceUdpDisable) {\r\n            localSDP.removeUdpCandidates = true;\r\n        }\r\n        if (this.failICE) {\r\n            localSDP.failICE = true;\r\n        }\r\n        localSDP.toJingle(\r\n            accept,\r\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder',\r\n            null);\r\n\r\n        // Calling tree() to print something useful\r\n        accept = accept.tree();\r\n        logger.info('Sending session-accept', accept);\r\n        this.connection.sendIQ(accept,\r\n            success,\r\n            this.newJingleErrorHandler(accept, error => {\r\n                failure(error);\r\n\r\n                // 'session-accept' is a critical timeout and we'll\r\n                // have to restart\r\n                this.room.eventEmitter.emit(\r\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\r\n            }),\r\n            IQ_TIMEOUT);\r\n\r\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\r\n        // fingerprint and setup) ASAP in order to start the connection\r\n        // establishment.\r\n        //\r\n        // FIXME Flushing the connection at this point triggers an issue with\r\n        // BOSH request handling in Prosody on slow connections.\r\n        //\r\n        // The problem is that this request will be quite large and it may take\r\n        // time before it reaches Prosody. In the meantime Strophe may decide\r\n        // to send the next one. And it was observed that a small request with\r\n        // 'transport-info' usually follows this one. It does reach Prosody\r\n        // before the previous one was completely received. 'rid' on the server\r\n        // is increased and Prosody ignores the request with 'session-accept'.\r\n        // It will never reach Jicofo and everything in the request table is\r\n        // lost. Removing the flush does not guarantee it will never happen, but\r\n        // makes it much less likely('transport-info' is bundled with\r\n        // 'session-accept' and any immediate requests).\r\n        //\r\n        // this.connection.flush();\r\n    }\r\n\r\n    /**\r\n     * Will send 'content-modify' IQ in order to ask the remote peer to\r\n     * either stop or resume sending video media or to adjust sender's video constraints.\r\n     * @private\r\n     */\r\n    sendContentModify() {\r\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\r\n        const senders = this._localVideoActive ? 'both' : 'none';\r\n\r\n        let sessionModify\r\n            = $iq({\r\n                to: this.remoteJid,\r\n                type: 'set'\r\n            })\r\n                .c('jingle', {\r\n                    xmlns: 'urn:xmpp:jingle:1',\r\n                    action: 'content-modify',\r\n                    initiator: this.initiatorJid,\r\n                    sid: this.sid\r\n                })\r\n                .c('content', {\r\n                    name: 'video',\r\n                    senders\r\n                });\r\n\r\n        if (typeof maxFrameHeight !== 'undefined') {\r\n            sessionModify = sessionModify\r\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\r\n                .t(maxFrameHeight);\r\n        }\r\n\r\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\r\n\r\n        this.connection.sendIQ(\r\n            sessionModify,\r\n            null,\r\n            this.newJingleErrorHandler(sessionModify),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\r\n     * the remote party.\r\n     *\r\n     * @param {Number} maxFrameHeight - the new value to set.\r\n     */\r\n    setReceiverVideoConstraint(maxFrameHeight) {\r\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\r\n\r\n        this.localRecvMaxFrameHeight = maxFrameHeight;\r\n\r\n        if (this.isP2P) {\r\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\r\n            // be synced after offer/answer.\r\n            if (this.state === JingleSessionState.ACTIVE) {\r\n                this.sendContentModify();\r\n            }\r\n        } else {\r\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'transport-accept' message which is a response to\r\n     * 'transport-replace'.\r\n     * @param localSDP the 'SDP' object with local session description\r\n     * @param success callback called when we receive 'RESULT' packet for\r\n     *        'transport-replace'\r\n     * @param failure function(error) called when we receive an error response\r\n     *        or when the request has timed out.\r\n     * @private\r\n     */\r\n    sendTransportAccept(localSDP, success, failure) {\r\n        let transportAccept = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-accept',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            });\r\n\r\n        localSDP.media.forEach((medialines, idx) => {\r\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\r\n\r\n            transportAccept.c('content',\r\n                {\r\n                    creator:\r\n                        this.initiatorJid === this.localJid\r\n                            ? 'initiator'\r\n                            : 'responder',\r\n                    name: mline.media\r\n                }\r\n            );\r\n            localSDP.transportToJingle(idx, transportAccept);\r\n            transportAccept.up();\r\n        });\r\n\r\n        // Calling tree() to print something useful to the logger\r\n        transportAccept = transportAccept.tree();\r\n        logger.info('Sending transport-accept: ', transportAccept);\r\n\r\n        this.connection.sendIQ(transportAccept,\r\n            success,\r\n            this.newJingleErrorHandler(transportAccept, failure),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'transport-reject' message which is a response to\r\n     * 'transport-replace'.\r\n     * @param success callback called when we receive 'RESULT' packet for\r\n     *        'transport-replace'\r\n     * @param failure function(error) called when we receive an error response\r\n     *        or when the request has timed out.\r\n     *\r\n     * FIXME method should be marked as private, but there's some spaghetti that\r\n     *       needs to be fixed prior doing that\r\n     */\r\n    sendTransportReject(success, failure) {\r\n        // Send 'transport-reject', so that the focus will\r\n        // know that we've failed\r\n        let transportReject = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-reject',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            });\r\n\r\n        transportReject = transportReject.tree();\r\n        logger.info('Sending \\'transport-reject', transportReject);\r\n\r\n        this.connection.sendIQ(transportReject,\r\n            success,\r\n            this.newJingleErrorHandler(transportReject, failure),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum bitrates on the local video track. Bitrate values from\r\n     * videoQuality settings in config.js will be used for configuring the sender.\r\n     * @returns {Promise<void>} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n    setSenderMaxBitrates() {\r\n        if (this._assertNotEnded()) {\r\n            return this.peerconnection.setMaxBitRate();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Sets the resolution constraint on the local camera track.\r\n     * @param {number} maxFrameHeight - The user preferred max frame height.\r\n     * @returns {Promise} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n    setSenderVideoConstraint(maxFrameHeight) {\r\n        if (this._assertNotEnded()) {\r\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\r\n\r\n            return this.peerconnection.setSenderVideoConstraint(maxFrameHeight);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Sets the degradation preference on the video sender. This setting determines if\r\n     * resolution or framerate will be preferred when bandwidth or cpu is constrained.\r\n     * @returns {Promise<void>} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n    setSenderVideoDegradationPreference() {\r\n        if (this._assertNotEnded()) {\r\n            return this.peerconnection.setSenderVideoDegradationPreference();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    terminate(success, failure, options) {\r\n        if (this.state === JingleSessionState.ENDED) {\r\n            return;\r\n        }\r\n\r\n        if (!options || Boolean(options.sendSessionTerminate)) {\r\n            let sessionTerminate\r\n                = $iq({\r\n                    to: this.remoteJid,\r\n                    type: 'set'\r\n                })\r\n                    .c('jingle', {\r\n                        xmlns: 'urn:xmpp:jingle:1',\r\n                        action: 'session-terminate',\r\n                        initiator: this.initiatorJid,\r\n                        sid: this.sid\r\n                    })\r\n                    .c('reason')\r\n                    .c((options && options.reason) || 'success')\r\n                    .up();\r\n\r\n            if (options && options.reasonDescription) {\r\n                sessionTerminate\r\n                    .c('text')\r\n                    .t(options.reasonDescription)\r\n                    .up()\r\n                    .up();\r\n            } else {\r\n                sessionTerminate.up();\r\n            }\r\n\r\n            this._bridgeSessionId\r\n                && sessionTerminate.c(\r\n                    'bridge-session', {\r\n                        xmlns: 'http://jitsi.org/protocol/focus',\r\n                        id: this._bridgeSessionId,\r\n                        restart: options && options.requestRestart === true\r\n                    }).up();\r\n\r\n            // Calling tree() to print something useful\r\n            sessionTerminate = sessionTerminate.tree();\r\n            logger.info('Sending session-terminate', sessionTerminate);\r\n            this.connection.sendIQ(\r\n                sessionTerminate,\r\n                success,\r\n                this.newJingleErrorHandler(sessionTerminate, failure),\r\n                IQ_TIMEOUT);\r\n        } else {\r\n            logger.info(`Skipped sending session-terminate for ${this}`);\r\n        }\r\n\r\n        // this should result in 'onTerminated' being called by strope.jingle.js\r\n        this.connection.jingle.terminate(this.sid);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param reasonCondition\r\n     * @param reasonText\r\n     */\r\n    onTerminated(reasonCondition, reasonText) {\r\n        // Do something with reason and reasonCondition when we start to care\r\n        // this.reasonCondition = reasonCondition;\r\n        // this.reasonText = reasonText;\r\n        logger.info(`Session terminated ${this}`, reasonCondition, reasonText);\r\n\r\n        this._xmppListeners.forEach(removeListener => removeListener());\r\n        this._xmppListeners = [];\r\n\r\n        if (this._removeSenderVideoConstraintsChangeListener) {\r\n            this._removeSenderVideoConstraintsChangeListener();\r\n        }\r\n\r\n        this.close();\r\n    }\r\n\r\n    /**\r\n     * Handles XMPP connection state changes.\r\n     *\r\n     * @param {XmppConnection.Status} status - The new status.\r\n     */\r\n    onXmppStatusChanged(status) {\r\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\r\n            logger.info('Sending SSRC update on reconnect');\r\n            this.notifyMySSRCUpdate(\r\n                this._cachedOldLocalSdp,\r\n                this._cachedNewLocalSdp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse the information from the xml sourceAddElem and translate it\r\n     *  into sdp lines\r\n     * @param {jquery xml element} sourceAddElem the source-add\r\n     *  element from jingle\r\n     * @param {SDP object} currentRemoteSdp the current remote\r\n     *  sdp (as of this new source-add)\r\n     * @returns {list} a list of SDP line strings that should\r\n     *  be added to the remote SDP\r\n     */\r\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\r\n        const addSsrcInfo = [];\r\n\r\n        $(sourceAddElem).each((i1, content) => {\r\n            const name = $(content).attr('name');\r\n            let lines = '';\r\n\r\n            $(content)\r\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n                .each(function() {\r\n                    // eslint-disable-next-line no-invalid-this\r\n                    const semantics = this.getAttribute('semantics');\r\n                    const ssrcs\r\n                        = $(this) // eslint-disable-line no-invalid-this\r\n                            .find('>source')\r\n                            .map(function() {\r\n                                // eslint-disable-next-line no-invalid-this\r\n                                return this.getAttribute('ssrc');\r\n                            })\r\n                            .get();\r\n\r\n                    if (ssrcs.length) {\r\n                        lines\r\n                            += `a=ssrc-group:${semantics} ${\r\n                                ssrcs.join(' ')}\\r\\n`;\r\n                    }\r\n                });\r\n\r\n            // handles both >source and >description>source\r\n            const tmp\r\n                = $(content).find(\r\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n            /* eslint-disable no-invalid-this */\r\n            tmp.each(function() {\r\n                const ssrc = $(this).attr('ssrc');\r\n\r\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\r\n                    logger.warn(\r\n                        `Source-add request for existing SSRC: ${ssrc}`);\r\n\r\n                    return;\r\n                }\r\n\r\n                // eslint-disable-next-line newline-per-chained-call\r\n                $(this).find('>parameter').each(function() {\r\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\r\n                    if ($(this).attr('value') && $(this).attr('value').length) {\r\n                        lines += `:${$(this).attr('value')}`;\r\n                    }\r\n                    lines += '\\r\\n';\r\n                });\r\n            });\r\n\r\n            /* eslint-enable no-invalid-this */\r\n            currentRemoteSdp.media.forEach((media, i2) => {\r\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\r\n                    return;\r\n                }\r\n                if (!addSsrcInfo[i2]) {\r\n                    addSsrcInfo[i2] = '';\r\n                }\r\n                addSsrcInfo[i2] += lines;\r\n            });\r\n        });\r\n\r\n        return addSsrcInfo;\r\n    }\r\n\r\n    /**\r\n     * Handles a Jingle source-add message for this Jingle session.\r\n     * @param elem An array of Jingle \"content\" elements.\r\n     */\r\n    addRemoteStream(elem) {\r\n        this._addOrRemoveRemoteStream(true /* add */, elem);\r\n    }\r\n\r\n    /**\r\n     * Handles a Jingle source-remove message for this Jingle session.\r\n     * @param elem An array of Jingle \"content\" elements.\r\n     */\r\n    removeRemoteStream(elem) {\r\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\r\n    }\r\n\r\n    /**\r\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\r\n     *\r\n     * @param {string} id Endpoint id of the participant that has left the call.\r\n     * @returns {void}\r\n     */\r\n     removeRemoteStreamsOnLeave(id) {\r\n        const workFunction = finishCallback => {\r\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\r\n\r\n            if (removeSsrcInfo.length) {\r\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\r\n\r\n                this._renegotiate(newRemoteSdp.raw)\r\n                    .then(() => {\r\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\r\n                        finishCallback();\r\n                    })\r\n                    .catch(err => finishCallback(err));\r\n            } else {\r\n                finishCallback();\r\n            }\r\n        };\r\n\r\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\r\n                } else {\r\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\r\n     * Jingle session.\r\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\r\n     * otherwise.\r\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\r\n     * @private\r\n     */\r\n    _addOrRemoveRemoteStream(isAdd, elem) {\r\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\r\n\r\n        if (isAdd) {\r\n            this.readSsrcInfo(elem);\r\n        }\r\n\r\n        const workFunction = finishedCallback => {\r\n            if (!this.peerconnection.localDescription\r\n                || !this.peerconnection.localDescription.sdp) {\r\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\r\n\r\n                logger.error(errMsg);\r\n                finishedCallback(errMsg);\r\n\r\n                return;\r\n            }\r\n\r\n            logger.log(`Processing ${logPrefix}`);\r\n            logger.log(\r\n                'ICE connection state: ',\r\n                this.peerconnection.iceConnectionState);\r\n\r\n            const oldLocalSdp\r\n                = new SDP(this.peerconnection.localDescription.sdp);\r\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\r\n            const addOrRemoveSsrcInfo\r\n                = isAdd\r\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\r\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\r\n            const newRemoteSdp\r\n                = isAdd\r\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\r\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\r\n\r\n            this._renegotiate(newRemoteSdp.raw)\r\n                .then(() => {\r\n                    const newLocalSdp\r\n                        = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                    logger.log(\r\n                        `${logPrefix} - OK, SDPs: `, oldLocalSdp, newLocalSdp);\r\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\r\n                    finishedCallback();\r\n                }, error => {\r\n                    logger.error(`${logPrefix} failed:`, error);\r\n                    finishedCallback(error);\r\n                });\r\n        };\r\n\r\n        // Queue and execute\r\n        this.modificationQueue.push(workFunction);\r\n    }\r\n\r\n    /**\r\n     * Takes in a jingle offer iq, returns the new sdp offer\r\n     * @param {jquery xml element} offerIq the incoming offer\r\n     * @returns {SDP object} the jingle offer translated to SDP\r\n     */\r\n    _processNewJingleOfferIq(offerIq) {\r\n        const remoteSdp = new SDP('');\r\n\r\n        if (this.webrtcIceTcpDisable) {\r\n            remoteSdp.removeTcpCandidates = true;\r\n        }\r\n        if (this.webrtcIceUdpDisable) {\r\n            remoteSdp.removeUdpCandidates = true;\r\n        }\r\n        if (this.failICE) {\r\n            remoteSdp.failICE = true;\r\n        }\r\n\r\n        remoteSdp.fromJingle(offerIq);\r\n        this.readSsrcInfo($(offerIq).find('>content'));\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Remove the given ssrc lines from the current remote sdp\r\n     * @param {list} removeSsrcInfo a list of SDP line strings that\r\n     *  should be removed from the remote SDP\r\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\r\n     *  in removeSsrcInfo\r\n     */\r\n    _processRemoteRemoveSource(removeSsrcInfo) {\r\n        const remoteSdp = browser.usesPlanB()\r\n            ? new SDP(this.peerconnection.remoteDescription.sdp)\r\n            : new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\r\n\r\n        removeSsrcInfo.forEach((lines, idx) => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            lines = lines.split('\\r\\n');\r\n            lines.pop(); // remove empty last element;\r\n            if (browser.usesPlanB()) {\r\n                lines.forEach(line => {\r\n                    remoteSdp.media[idx]\r\n                        = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\r\n                });\r\n            } else {\r\n                lines.forEach(line => {\r\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\r\n\r\n                    if (mid > -1) {\r\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\r\n\r\n                        // Change the direction to \"inactive\" only on Firefox. Audio fails on\r\n                        // Safari (possibly Chrome in unified plan mode) when we try to re-use inactive\r\n                        // m-lines due to a webkit bug.\r\n                        // https://bugs.webkit.org/show_bug.cgi?id=211181\r\n                        if (browser.isFirefox()) {\r\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace('a=sendonly', 'a=inactive');\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Add the given ssrc lines to the current remote sdp\r\n     * @param {list} addSsrcInfo a list of SDP line strings that\r\n     *  should be added to the remote SDP\r\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\r\n     *  in removeSsrcInfo\r\n     */\r\n    _processRemoteAddSource(addSsrcInfo) {\r\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\r\n\r\n        addSsrcInfo.forEach((lines, idx) => {\r\n            remoteSdp.media[idx] += lines;\r\n        });\r\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Do a new o/a flow using the existing remote description\r\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\r\n     *  to use.  If not provided, the remote sdp from the\r\n     *  peerconnection will be used\r\n     * @returns {Promise} promise which resolves when the\r\n     *  o/a flow is complete with no arguments or\r\n     *  rejects with an error {string}\r\n     */\r\n    _renegotiate(optionalRemoteSdp) {\r\n        if (this.peerconnection.signalingState === 'closed') {\r\n            const error = new Error('Attempted to renegotiate in state closed');\r\n\r\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        const remoteSdp\r\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\r\n\r\n        if (!remoteSdp) {\r\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\r\n\r\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        const remoteDescription = new RTCSessionDescription({\r\n            type: this.isInitiator ? 'answer' : 'offer',\r\n            sdp: remoteSdp\r\n        });\r\n\r\n        if (this.isInitiator) {\r\n            return this._initiatorRenegotiate(remoteDescription);\r\n        }\r\n\r\n        return this._responderRenegotiate(remoteDescription);\r\n    }\r\n\r\n    /**\r\n     * Renegotiate cycle implementation for the responder case.\r\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\r\n     * which will be used as remote description in the cycle.\r\n     * @private\r\n     */\r\n    _responderRenegotiate(remoteDescription) {\r\n        logger.debug('Renegotiate: setting remote description');\r\n\r\n        return this.peerconnection.setRemoteDescription(remoteDescription)\r\n            .then(() => {\r\n                logger.debug('Renegotiate: creating answer');\r\n\r\n                return this.peerconnection.createAnswer(this.mediaConstraints)\r\n                    .then(answer => {\r\n                        logger.debug('Renegotiate: setting local description');\r\n\r\n                        return this.peerconnection.setLocalDescription(answer);\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Renegotiate cycle implementation for the initiator's case.\r\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\r\n     * which will be used as remote description in the cycle.\r\n     * @private\r\n     */\r\n    _initiatorRenegotiate(remoteDescription) {\r\n        logger.debug('Renegotiate: creating offer');\r\n\r\n        return this.peerconnection.createOffer(this.mediaConstraints)\r\n            .then(offer => {\r\n                logger.debug('Renegotiate: setting local description');\r\n\r\n                return this.peerconnection.setLocalDescription(offer)\r\n                    .then(() => {\r\n                        logger.debug(\r\n                            'Renegotiate: setting remote description');\r\n\r\n                        // eslint-disable-next-line max-len\r\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\r\n     * offer/answer cycle after both operations are done. Either\r\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\r\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\r\n     * <tt>oldTrack</tt>\r\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\r\n     * replaced\r\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\r\n     * @returns {Promise} which resolves once the replacement is complete\r\n     *  with no arguments or rejects with an error {string}\r\n     */\r\n    replaceTrack(oldTrack, newTrack) {\r\n        const workFunction = finishedCallback => {\r\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\r\n\r\n            if (browser.usesPlanB()) {\r\n                // NOTE the code below assumes that no more than 1 video track\r\n                // can be added to the peer connection.\r\n                // Transition from camera to desktop share\r\n                // or transition from one camera source to another.\r\n                if (this.peerconnection.options.capScreenshareBitrate\r\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\r\n                    // Clearing current primary SSRC will make\r\n                    // the SdpConsistency generate a new one which will result\r\n                    // with:\r\n                    // 1. source-remove for the old video stream.\r\n                    // 2. source-add for the new video stream.\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n                }\r\n\r\n                // Transition from no video to video (unmute).\r\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\r\n                    // Clearing current primary SSRC will make\r\n                    // the SdpConsistency generate a new one which will result\r\n                    // with:\r\n                    // 1. source-remove for the recvonly\r\n                    // 2. source-add for the new video stream\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n\r\n                // Transition from video to no video\r\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\r\n                    // Clearing current primary SSRC and generating the recvonly\r\n                    // will result in:\r\n                    // 1. source-remove for the old video stream\r\n                    // 2. source-add for the recvonly stream\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n                    this.peerconnection.generateRecvonlySsrc();\r\n                }\r\n            }\r\n\r\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\r\n                .then(shouldRenegotiate => {\r\n                    let promise = Promise.resolve();\r\n\r\n                    if (shouldRenegotiate\r\n                        && (oldTrack || newTrack)\r\n                        && this.state === JingleSessionState.ACTIVE) {\r\n                        promise = this._renegotiate().then(() => {\r\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\r\n                        });\r\n                    }\r\n\r\n                    return promise.then(() => {\r\n                        if (newTrack && newTrack.isVideoTrack()) {\r\n                            // FIXME set all sender parameters in one go?\r\n                            // Set the degradation preference on the new video sender.\r\n                            return this.peerconnection.setSenderVideoDegradationPreference()\r\n\r\n                                // Apply the cached video constraints on the new video sender.\r\n                                .then(() => this.peerconnection.setSenderVideoConstraint())\r\n                                .then(() => this.peerconnection.setMaxBitRate());\r\n                        }\r\n                    });\r\n                })\r\n                .then(() => finishedCallback(), error => finishedCallback(error));\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        logger.error('Replace track error:', error);\r\n                        reject(error);\r\n                    } else {\r\n                        logger.info('Replace track done!');\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parse the information from the xml sourceRemoveElem and translate it\r\n     *  into sdp lines\r\n     * @param {jquery xml element} sourceRemoveElem the source-remove\r\n     *  element from jingle\r\n     * @param {SDP object} currentRemoteSdp the current remote\r\n     *  sdp (as of this new source-remove)\r\n     * @returns {list} a list of SDP line strings that should\r\n     *  be removed from the remote SDP\r\n     */\r\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\r\n        const removeSsrcInfo = [];\r\n\r\n        $(sourceRemoveElem).each((i1, content) => {\r\n            const name = $(content).attr('name');\r\n            let lines = '';\r\n\r\n            $(content)\r\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n                .each(function() {\r\n                    /* eslint-disable no-invalid-this */\r\n                    const semantics = this.getAttribute('semantics');\r\n                    const ssrcs\r\n                        = $(this)\r\n                            .find('>source')\r\n                            .map(function() {\r\n                                return this.getAttribute('ssrc');\r\n                            })\r\n                            .get();\r\n\r\n                    if (ssrcs.length) {\r\n                        lines\r\n                            += `a=ssrc-group:${semantics} ${\r\n                                ssrcs.join(' ')}\\r\\n`;\r\n                    }\r\n\r\n                    /* eslint-enable no-invalid-this */\r\n                });\r\n            const ssrcs = [];\r\n\r\n            // handles both >source and >description>source versions\r\n            const tmp\r\n                = $(content).find(\r\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n            tmp.each(function() {\r\n                // eslint-disable-next-line no-invalid-this\r\n                const ssrc = $(this).attr('ssrc');\r\n\r\n                ssrcs.push(ssrc);\r\n            });\r\n            currentRemoteSdp.media.forEach((media, i2) => {\r\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\r\n                    return;\r\n                }\r\n                if (!removeSsrcInfo[i2]) {\r\n                    removeSsrcInfo[i2] = '';\r\n                }\r\n                ssrcs.forEach(ssrc => {\r\n                    const ssrcLines\r\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\r\n\r\n                    if (ssrcLines.length) {\r\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\r\n                    }\r\n                });\r\n                removeSsrcInfo[i2] += lines;\r\n            });\r\n        });\r\n\r\n        return removeSsrcInfo;\r\n    }\r\n\r\n    /**\r\n     * Will print an error if there is any difference, between the SSRCs given\r\n     * in the <tt>oldSDP</tt> and the ones currently described in\r\n     * the peerconnection's local description.\r\n     * @param {string} operationName the operation's name which will be printed\r\n     * in the error message.\r\n     * @param {SDP} oldSDP the old local SDP which will be compared with\r\n     * the current one.\r\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\r\n     * otherwise.\r\n     * @private\r\n     */\r\n    _verifyNoSSRCChanged(operationName, oldSDP) {\r\n        const currentLocalSDP\r\n            = new SDP(this.peerconnection.localDescription.sdp);\r\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\r\n        const addedMedia = sdpDiff.getNewMedia();\r\n\r\n        if (Object.keys(addedMedia).length) {\r\n            logger.error(\r\n                `${this} - some SSRC were added on ${operationName}`,\r\n                addedMedia);\r\n\r\n            return false;\r\n        }\r\n\r\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\r\n        const removedMedia = sdpDiff.getNewMedia();\r\n\r\n        if (Object.keys(removedMedia).length) {\r\n            logger.error(\r\n                `${this} - some SSRCs were removed on ${operationName}`,\r\n                removedMedia);\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Adds local track back to this session, as part of the unmute operation.\r\n     * @param {JitsiLocalTrack} track\r\n     * @return {Promise} a promise that will resolve once the local track is\r\n     * added back to this session and renegotiation succeeds. Will be rejected\r\n     * with a <tt>string</tt> that provides some error details in case something\r\n     * goes wrong.\r\n     */\r\n    addTrackAsUnmute(track) {\r\n        return this._addRemoveTrackAsMuteUnmute(\r\n            false /* add as unmute */, track)\r\n            .then(() => {\r\n                // Apply the video constraints, max bitrates and degradation preference on\r\n                // the video sender if needed.\r\n                if (track.isVideoTrack() && browser.doesVideoMuteByStreamRemove()) {\r\n                    return this.setSenderMaxBitrates()\r\n                        .then(() => this.setSenderVideoDegradationPreference())\r\n                        .then(() => this.setSenderVideoConstraint());\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Remove local track as part of the mute operation.\r\n     * @param {JitsiLocalTrack} track the local track to be removed\r\n     * @return {Promise} a promise which will be resolved once the local track\r\n     * is removed from this session and the renegotiation is performed.\r\n     * The promise will be rejected with a <tt>string</tt> that the describes\r\n     * the error if anything goes wrong.\r\n     */\r\n    removeTrackAsMute(track) {\r\n        return this._addRemoveTrackAsMuteUnmute(\r\n            true /* remove as mute */, track);\r\n    }\r\n\r\n    /**\r\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\r\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\r\n     * <tt>false</tt> for \"add as unmute\".\r\n     * @param {JitsiLocalTrack} track the track that will be added/removed\r\n     * @private\r\n     */\r\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\r\n        if (!track) {\r\n            return Promise.reject('invalid \"track\" argument value');\r\n        }\r\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\r\n        const workFunction = finishedCallback => {\r\n            const tpc = this.peerconnection;\r\n\r\n            if (!tpc) {\r\n                finishedCallback(\r\n                    `Error:  tried ${operationName} track with no active peer`\r\n                        + 'connection');\r\n\r\n                return;\r\n            }\r\n            const oldLocalSDP = tpc.localDescription.sdp;\r\n            const operationPromise\r\n                = isMute\r\n                    ? tpc.removeTrackMute(track)\r\n                    : tpc.addTrackUnmute(track);\r\n\r\n            operationPromise\r\n                .then(shouldRenegotiate => {\r\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\r\n                        this._renegotiate()\r\n                            .then(() => {\r\n                                // The results are ignored, as this check failure is not\r\n                                // enough to fail the whole operation. It will log\r\n                                // an error inside.\r\n                                this._verifyNoSSRCChanged(\r\n                                    operationName, new SDP(oldLocalSDP));\r\n                                finishedCallback();\r\n                            });\r\n                    } else {\r\n                        finishedCallback();\r\n                    }\r\n                },\r\n                finishedCallback /* will be called with an error */);\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Resumes or suspends media transfer over the underlying peer connection.\r\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\r\n     * transfer or <tt>false</tt> to suspend audio media transmission.\r\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\r\n     * transfer or <tt>false</tt> to suspend video media transmission.\r\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\r\n     * the operation is done. It will be rejected with an error description as\r\n     * a string in case anything goes wrong.\r\n     */\r\n    setMediaTransferActive(audioActive, videoActive) {\r\n        if (!this.peerconnection) {\r\n            return Promise.reject(\r\n                'Can not modify transfer active state,'\r\n                    + ' before \"initialize\" is called');\r\n        }\r\n\r\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\r\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\r\n\r\n        logger.info(`Queued make ${logVideoStr}, ${logAudioStr} task...`);\r\n\r\n        const workFunction = finishedCallback => {\r\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\r\n\r\n            // Because the value is modified on the queue it's impossible to\r\n            // check it's final value reliably prior to submitting the task.\r\n            // The rule here is that the last submitted state counts.\r\n            // Check the values here to avoid unnecessary renegotiation cycle.\r\n            const audioActiveChanged\r\n                = this.peerconnection.setAudioTransferActive(audioActive);\r\n\r\n            if (this._localVideoActive !== videoActive) {\r\n                this._localVideoActive = videoActive;\r\n\r\n                // Do only for P2P - Jicofo will reply with 'bad-request'\r\n                // We don't want to send 'content-modify', before the initial\r\n                // O/A (state === JingleSessionState.ACTIVE), because that will\r\n                // mess up video media direction in the remote SDP.\r\n                // 'content-modify' when processed only affects the media\r\n                // direction in the local SDP. We're doing that, because setting\r\n                // 'inactive' on video media in remote SDP will mess up our SDP\r\n                // translation chain (simulcast, RTX, video mute etc.).\r\n                if (this.isP2P && isSessionActive) {\r\n                    this.sendContentModify();\r\n                }\r\n            }\r\n\r\n            const pcVideoActiveChanged\r\n                = this.peerconnection.setVideoTransferActive(\r\n                    this._localVideoActive && this._remoteVideoActive);\r\n\r\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\r\n            // direction\r\n            if (isSessionActive\r\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\r\n                this._renegotiate()\r\n                    .then(\r\n                        finishedCallback,\r\n                        finishedCallback /* will be called with an error */);\r\n            } else {\r\n                finishedCallback();\r\n            }\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Will put and execute on the queue a session modify task. Currently it\r\n     * only checks the senders attribute of the video content in order to figure\r\n     * out if the remote peer has video in the inactive state (stored locally\r\n     * in {@link _remoteVideoActive} - see field description for more info).\r\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\r\n     * element of the session modify IQ.\r\n     * @see {@link _remoteVideoActive}\r\n     * @see {@link _localVideoActive}\r\n     */\r\n    modifyContents(jingleContents) {\r\n        const newVideoSenders\r\n            = JingleSessionPC.parseVideoSenders(jingleContents);\r\n        const newMaxFrameHeight\r\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\r\n\r\n        // frame height is optional in our content-modify protocol\r\n        if (newMaxFrameHeight) {\r\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\r\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\r\n            this.eventEmitter.emit(\r\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\r\n        }\r\n\r\n        if (newVideoSenders === null) {\r\n            logger.error(\r\n                `${this} - failed to parse video \"senders\" attribute in`\r\n                    + '\"content-modify\" action');\r\n\r\n            return;\r\n        }\r\n\r\n        const workFunction = finishedCallback => {\r\n            if (this._assertNotEnded('content-modify')\r\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\r\n                // Will do the sRD/sLD cycle to update SDPs and adjust\r\n                // the media direction\r\n                this._renegotiate()\r\n                    .then(finishedCallback, finishedCallback /* (error) */);\r\n            } else {\r\n                finishedCallback();\r\n            }\r\n        };\r\n\r\n        logger.debug(\r\n            `${this} queued \"content-modify\" task`\r\n                + `(video senders=\"${newVideoSenders}\")`);\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error('\"content-modify\" failed', error);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\r\n     * to apply it for {@link _remoteVideoActive}.\r\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\r\n     * Jingle video content element advertised by remote peer.\r\n     * @return {boolean} <tt>true</tt> if the change affected state of\r\n     * the underlying peerconnection and renegotiation is required for\r\n     * the changes to take effect.\r\n     * @private\r\n     */\r\n    _modifyRemoteVideoActive(remoteVideoSenders) {\r\n        const isRemoteVideoActive\r\n            = remoteVideoSenders === 'both'\r\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\r\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\r\n\r\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\r\n            logger.debug(\r\n                `${this} new remote video active: ${isRemoteVideoActive}`);\r\n            this._remoteVideoActive = isRemoteVideoActive;\r\n        }\r\n\r\n        return this.peerconnection.setVideoTransferActive(\r\n            this._localVideoActive && this._remoteVideoActive);\r\n    }\r\n\r\n    /**\r\n     * Figures out added/removed ssrcs and send update IQs.\r\n     * @param oldSDP SDP object for old description.\r\n     * @param newSDP SDP object for new description.\r\n     */\r\n    notifyMySSRCUpdate(oldSDP, newSDP) {\r\n\r\n        if (this.state !== JingleSessionState.ACTIVE) {\r\n            logger.warn(`Skipping SSRC update in '${this.state} ' state.`);\r\n\r\n            return;\r\n        }\r\n\r\n        if (!this.connection.connected) {\r\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\r\n            if (!this._cachedOldLocalSdp) {\r\n                this._cachedOldLocalSdp = oldSDP;\r\n            }\r\n            this._cachedNewLocalSdp = newSDP;\r\n            logger.warn('Not sending SSRC update while the signaling is disconnected');\r\n\r\n            return;\r\n        }\r\n\r\n        this._cachedOldLocalSdp = undefined;\r\n        this._cachedNewLocalSdp = undefined;\r\n\r\n        // send source-remove IQ.\r\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\r\n        const remove = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'source-remove',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            }\r\n            );\r\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\r\n\r\n        if (removedAnySSRCs) {\r\n            logger.info('Sending source-remove', remove.tree());\r\n            this.connection.sendIQ(\r\n                remove, null,\r\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\r\n        } else {\r\n            logger.log('removal not necessary');\r\n        }\r\n\r\n        // send source-add IQ.\r\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\r\n        const add = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'source-add',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            }\r\n            );\r\n\r\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\r\n\r\n        if (containsNewSSRCs) {\r\n            logger.info('Sending source-add', add.tree());\r\n            this.connection.sendIQ(\r\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\r\n        } else {\r\n            logger.log('addition not necessary');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method returns function(errorResponse) which is a callback to be passed\r\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\r\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\r\n     * structure is as follows:\r\n     * {\r\n     *  code: {XMPP error response code}\r\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\r\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\r\n     *  source: {request.tree() that provides original request}\r\n     *  session: {this JingleSessionPC.toString()}\r\n     * }\r\n     * @param request Strophe IQ instance which is the request to be dumped into\r\n     *        the error structure\r\n     * @param failureCb function(error) called when error response was returned\r\n     *        or when a timeout has occurred.\r\n     * @returns {function(this:JingleSessionPC)}\r\n     */\r\n    newJingleErrorHandler(request, failureCb) {\r\n        return errResponse => {\r\n\r\n            const error = {};\r\n\r\n            // Get XMPP error code and condition(reason)\r\n            const errorElSel = $(errResponse).find('error');\r\n\r\n            if (errorElSel.length) {\r\n                error.code = errorElSel.attr('code');\r\n                const errorReasonSel = $(errResponse).find('error :first');\r\n\r\n                if (errorReasonSel.length) {\r\n                    error.reason = errorReasonSel[0].tagName;\r\n                }\r\n\r\n                const errorMsgSel = errorElSel.find('>text');\r\n\r\n                if (errorMsgSel.length) {\r\n                    error.msg = errorMsgSel.text();\r\n                }\r\n            }\r\n\r\n            if (!errResponse) {\r\n                error.reason = 'timeout';\r\n            }\r\n\r\n            error.session = this.toString();\r\n\r\n            if (failureCb) {\r\n                failureCb(error);\r\n            } else if (this.state === JingleSessionState.ENDED\r\n                        && error.reason === 'item-not-found') {\r\n                // When remote peer decides to terminate the session, but it\r\n                // still have few messages on the queue for processing,\r\n                // it will first send us 'session-terminate' (we enter ENDED)\r\n                // and then follow with 'item-not-found' for the queued requests\r\n                // We don't want to have that logged on error level.\r\n                logger.debug(`Jingle error: ${JSON.stringify(error)}`);\r\n            } else {\r\n                GlobalOnErrorHandler.callErrorHandler(\r\n                    new Error(\r\n                        `Jingle error: ${JSON.stringify(error)}`));\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the ice connection state for the peer connection.\r\n     * @returns the ice connection state for the peer connection.\r\n     */\r\n    getIceConnectionState() {\r\n        return this.peerconnection.getConnectionState();\r\n    }\r\n\r\n    /**\r\n     * Closes the peerconnection.\r\n     */\r\n    close() {\r\n        this.state = JingleSessionState.ENDED;\r\n        this.establishmentDuration = undefined;\r\n\r\n        if (this.peerconnection) {\r\n            this.peerconnection.onicecandidate = null;\r\n            this.peerconnection.oniceconnectionstatechange = null;\r\n            this.peerconnection.onnegotiationneeded = null;\r\n            this.peerconnection.onsignalingstatechange = null;\r\n        }\r\n\r\n        // Remove any pending tasks from the queue\r\n        this.modificationQueue.clear();\r\n\r\n        this.modificationQueue.push(finishCallback => {\r\n            // The signaling layer will remove it's listeners\r\n            this.signalingLayer.setChatRoom(null);\r\n\r\n            // do not try to close if already closed.\r\n            this.peerconnection && this.peerconnection.close();\r\n            finishCallback();\r\n        });\r\n\r\n        // No more tasks can go in after the close task\r\n        this.modificationQueue.shutdown();\r\n    }\r\n\r\n    /**\r\n     * Converts to string with minor summary.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `JingleSessionPC[p2p=${this.isP2P},`\r\n                    + `initiator=${this.isInitiator},sid=${this.sid}]`;\r\n    }\r\n\r\n    /**\r\n     * If the A/B test for suspend video is disabled according to the room's\r\n     * configuration, returns undefined. Otherwise returns a boolean which\r\n     * indicates whether the suspend video option should be enabled or disabled.\r\n     * @param {JingleSessionPCOptions} options - The config options.\r\n     */\r\n    _abtestSuspendVideoEnabled({ abTesting }) {\r\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\r\n            return;\r\n        }\r\n\r\n        // We want the two participants in a P2P call to agree on the value of\r\n        // the \"suspend\" option. We use the JID of the initiator, because it is\r\n        // both randomly selected and agreed upon by both participants.\r\n        const jid = this._getInitiatorJid();\r\n\r\n        return integerHash(jid) % 2 === 0;\r\n    }\r\n}\r\n","export default {\r\n    /**\r\n     * Event triggered when the remote party signals it's receive video max frame height.\r\n     */\r\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\r\n};\r\n","/**\r\n * The events for the media devices.\r\n */\r\n\r\n/**\r\n * Indicates that the list of available media devices has been changed. The\r\n * event provides the following parameters to its listeners:\r\n *\r\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\r\n *  MediaDeviceInfo-like objects that are currently connected.\r\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\r\n */\r\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\r\n\r\n/**\r\n * Indicates that the environment is currently showing permission prompt to\r\n * access camera and/or microphone. The event provides the following\r\n * parameters to its listeners:\r\n *\r\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\r\n *  |'react-native'|'android'} environmentType - type of browser or\r\n *  other execution environment.\r\n */\r\nexport const PERMISSION_PROMPT_IS_SHOWN\r\n    = 'mediaDevices.permissionPromptIsShown';\r\n","'use strict'\r\n\r\nexports.byteLength = byteLength\r\nexports.toByteArray = toByteArray\r\nexports.fromByteArray = fromByteArray\r\n\r\nvar lookup = []\r\nvar revLookup = []\r\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\r\n\r\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\r\nfor (var i = 0, len = code.length; i < len; ++i) {\r\n  lookup[i] = code[i]\r\n  revLookup[code.charCodeAt(i)] = i\r\n}\r\n\r\n// Support decoding URL-safe base64 strings, as Node.js does.\r\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\r\nrevLookup['-'.charCodeAt(0)] = 62\r\nrevLookup['_'.charCodeAt(0)] = 63\r\n\r\nfunction getLens (b64) {\r\n  var len = b64.length\r\n\r\n  if (len % 4 > 0) {\r\n    throw new Error('Invalid string. Length must be a multiple of 4')\r\n  }\r\n\r\n  // Trim off extra bytes after placeholder bytes are found\r\n  // See: https://github.com/beatgammit/base64-js/issues/42\r\n  var validLen = b64.indexOf('=')\r\n  if (validLen === -1) validLen = len\r\n\r\n  var placeHoldersLen = validLen === len\r\n    ? 0\r\n    : 4 - (validLen % 4)\r\n\r\n  return [validLen, placeHoldersLen]\r\n}\r\n\r\n// base64 is 4/3 + up to two characters of the original data\r\nfunction byteLength (b64) {\r\n  var lens = getLens(b64)\r\n  var validLen = lens[0]\r\n  var placeHoldersLen = lens[1]\r\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\r\n}\r\n\r\nfunction _byteLength (b64, validLen, placeHoldersLen) {\r\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\r\n}\r\n\r\nfunction toByteArray (b64) {\r\n  var tmp\r\n  var lens = getLens(b64)\r\n  var validLen = lens[0]\r\n  var placeHoldersLen = lens[1]\r\n\r\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\r\n\r\n  var curByte = 0\r\n\r\n  // if there are placeholders, only get up to the last complete 4 chars\r\n  var len = placeHoldersLen > 0\r\n    ? validLen - 4\r\n    : validLen\r\n\r\n  var i\r\n  for (i = 0; i < len; i += 4) {\r\n    tmp =\r\n      (revLookup[b64.charCodeAt(i)] << 18) |\r\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\r\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\r\n      revLookup[b64.charCodeAt(i + 3)]\r\n    arr[curByte++] = (tmp >> 16) & 0xFF\r\n    arr[curByte++] = (tmp >> 8) & 0xFF\r\n    arr[curByte++] = tmp & 0xFF\r\n  }\r\n\r\n  if (placeHoldersLen === 2) {\r\n    tmp =\r\n      (revLookup[b64.charCodeAt(i)] << 2) |\r\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\r\n    arr[curByte++] = tmp & 0xFF\r\n  }\r\n\r\n  if (placeHoldersLen === 1) {\r\n    tmp =\r\n      (revLookup[b64.charCodeAt(i)] << 10) |\r\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\r\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\r\n    arr[curByte++] = (tmp >> 8) & 0xFF\r\n    arr[curByte++] = tmp & 0xFF\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\nfunction tripletToBase64 (num) {\r\n  return lookup[num >> 18 & 0x3F] +\r\n    lookup[num >> 12 & 0x3F] +\r\n    lookup[num >> 6 & 0x3F] +\r\n    lookup[num & 0x3F]\r\n}\r\n\r\nfunction encodeChunk (uint8, start, end) {\r\n  var tmp\r\n  var output = []\r\n  for (var i = start; i < end; i += 3) {\r\n    tmp =\r\n      ((uint8[i] << 16) & 0xFF0000) +\r\n      ((uint8[i + 1] << 8) & 0xFF00) +\r\n      (uint8[i + 2] & 0xFF)\r\n    output.push(tripletToBase64(tmp))\r\n  }\r\n  return output.join('')\r\n}\r\n\r\nfunction fromByteArray (uint8) {\r\n  var tmp\r\n  var len = uint8.length\r\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\r\n  var parts = []\r\n  var maxChunkLength = 16383 // must be multiple of 3\r\n\r\n  // go through the array every three bytes, we'll deal with trailing stuff later\r\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\r\n    parts.push(encodeChunk(\r\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\r\n    ))\r\n  }\r\n\r\n  // pad the end with zeros, but make sure to not forget the extra bytes\r\n  if (extraBytes === 1) {\r\n    tmp = uint8[len - 1]\r\n    parts.push(\r\n      lookup[tmp >> 2] +\r\n      lookup[(tmp << 4) & 0x3F] +\r\n      '=='\r\n    )\r\n  } else if (extraBytes === 2) {\r\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\r\n    parts.push(\r\n      lookup[tmp >> 10] +\r\n      lookup[(tmp >> 4) & 0x3F] +\r\n      lookup[(tmp << 2) & 0x3F] +\r\n      '='\r\n    )\r\n  }\r\n\r\n  return parts.join('')\r\n}\r\n","import SDPUtil from './SDPUtil';\r\n\r\n// this could be useful in Array.prototype.\r\n/**\r\n *\r\n * @param array1\r\n * @param array2\r\n */\r\nfunction arrayEquals(array1, array2) {\r\n    // if the other array is a falsy value, return\r\n    if (!array2) {\r\n        return false;\r\n    }\r\n\r\n    // compare lengths - can save a lot of time\r\n    if (array1.length !== array2.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0, l = array1.length; i < l; i++) {\r\n        // Check if we have nested arrays\r\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\r\n            // recurse into the nested arrays\r\n            if (!array1[i].equals(array2[i])) {\r\n                return false;\r\n            }\r\n        } else if (array1[i] !== array2[i]) {\r\n            // Warning - two different object instances will never be\r\n            // equal: {x:20} != {x:20}\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n *\r\n * @param mySDP\r\n * @param otherSDP\r\n */\r\nexport default function SDPDiffer(mySDP, otherSDP) {\r\n    this.mySDP = mySDP;\r\n    this.otherSDP = otherSDP;\r\n    if (!mySDP) {\r\n        throw new Error('\"mySDP\" is undefined!');\r\n    } else if (!otherSDP) {\r\n        throw new Error('\"otherSDP\" is undefined!');\r\n    }\r\n}\r\n\r\n/**\r\n * Returns map of MediaChannel that contains media contained in\r\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\r\n */\r\nSDPDiffer.prototype.getNewMedia = function() {\r\n\r\n    const myMedias = this.mySDP.getMediaSsrcMap();\r\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\r\n    const newMedia = {};\r\n\r\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\r\n        const myMedia = myMedias[othersMediaIdx];\r\n        const othersMedia = othersMedias[othersMediaIdx];\r\n\r\n        if (!myMedia && othersMedia) {\r\n            // Add whole channel\r\n            newMedia[othersMediaIdx] = othersMedia;\r\n\r\n            return;\r\n        }\r\n\r\n        // Look for new ssrcs across the channel\r\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\r\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\r\n                // Allocate channel if we've found ssrc that doesn't exist in\r\n                // our channel\r\n                if (!newMedia[othersMediaIdx]) {\r\n                    newMedia[othersMediaIdx] = {\r\n                        mediaindex: othersMedia.mediaindex,\r\n                        mid: othersMedia.mid,\r\n                        ssrcs: {},\r\n                        ssrcGroups: []\r\n                    };\r\n                }\r\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\r\n            } else if (othersMedia.ssrcs[ssrc].lines\r\n                        && myMedia.ssrcs[ssrc].lines) {\r\n                // we want to detect just changes in adding/removing msid\r\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\r\n                    line => line.indexOf('msid') !== -1) !== undefined;\r\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\r\n                    line => line.indexOf('msid') !== -1) !== undefined;\r\n\r\n                if (myContainMsid !== newContainMsid) {\r\n                    if (!newMedia[othersMediaIdx]) {\r\n                        newMedia[othersMediaIdx] = {\r\n                            mediaindex: othersMedia.mediaindex,\r\n                            mid: othersMedia.mid,\r\n                            ssrcs: {},\r\n                            ssrcGroups: []\r\n                        };\r\n                    }\r\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\r\n                        = othersMedia.ssrcs[ssrc];\r\n                }\r\n            }\r\n        });\r\n\r\n        // Look for new ssrc groups across the channels\r\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\r\n\r\n            // try to match the other ssrc-group with an ssrc-group of ours\r\n            let matched = false;\r\n\r\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\r\n                const mySsrcGroup = myMedia.ssrcGroups[i];\r\n\r\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\r\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\r\n\r\n                    matched = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!matched) {\r\n                // Allocate channel if we've found an ssrc-group that doesn't\r\n                // exist in our channel\r\n\r\n                if (!newMedia[othersMediaIdx]) {\r\n                    newMedia[othersMediaIdx] = {\r\n                        mediaindex: othersMedia.mediaindex,\r\n                        mid: othersMedia.mid,\r\n                        ssrcs: {},\r\n                        ssrcGroups: []\r\n                    };\r\n                }\r\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\r\n            }\r\n        });\r\n    });\r\n\r\n    return newMedia;\r\n};\r\n\r\n/**\r\n * TODO: document!\r\n */\r\nSDPDiffer.prototype.toJingle = function(modify) {\r\n    const sdpMediaSsrcs = this.getNewMedia();\r\n\r\n    let modified = false;\r\n\r\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\r\n        modified = true;\r\n        const media = sdpMediaSsrcs[mediaindex];\r\n\r\n        modify.c('content', { name: media.mid });\r\n\r\n        modify.c('description',\r\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\r\n                media: media.mid });\r\n\r\n        // FIXME: not completely sure this operates on blocks and / or handles\r\n        // different ssrcs correctly\r\n        // generate sources from lines\r\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\r\n            const mediaSsrc = media.ssrcs[ssrcNum];\r\n\r\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\r\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\r\n\r\n            // iterate over ssrc lines\r\n            mediaSsrc.lines.forEach(line => {\r\n                const idx = line.indexOf(' ');\r\n                const kv = line.substr(idx + 1);\r\n\r\n                modify.c('parameter');\r\n                if (kv.indexOf(':') === -1) {\r\n                    modify.attrs({ name: kv });\r\n                } else {\r\n                    const nv = kv.split(':', 2);\r\n                    const name = nv[0];\r\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\r\n\r\n                    modify.attrs({ name });\r\n                    modify.attrs({ value });\r\n                }\r\n                modify.up(); // end of parameter\r\n            });\r\n            modify.up(); // end of source\r\n        });\r\n\r\n        // generate source groups from lines\r\n        media.ssrcGroups.forEach(ssrcGroup => {\r\n            if (ssrcGroup.ssrcs.length) {\r\n\r\n                modify.c('ssrc-group', {\r\n                    semantics: ssrcGroup.semantics,\r\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                });\r\n\r\n                ssrcGroup.ssrcs.forEach(ssrc => {\r\n                    modify.c('source', { ssrc })\r\n                        .up(); // end of source\r\n                });\r\n                modify.up(); // end of ssrc-group\r\n            }\r\n        });\r\n\r\n        modify.up(); // end of description\r\n        modify.up(); // end of content\r\n    });\r\n\r\n    return modified;\r\n};\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport transform from 'sdp-transform';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport browser from '../browser';\r\n\r\nconst logger = getLogger(__filename);\r\nconst SIM_LAYER_1_RID = '1';\r\nconst SIM_LAYER_2_RID = '2';\r\nconst SIM_LAYER_3_RID = '3';\r\n\r\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\r\n\r\n/**\r\n * Handles track related operations on TraceablePeerConnection when browser is\r\n * running in unified plan mode.\r\n */\r\nexport class TPCUtils {\r\n    /**\r\n     * Creates a new instance for a given TraceablePeerConnection\r\n     *\r\n     * @param peerconnection - the tpc instance for which we have utility functions.\r\n     * @param videoBitrates - the bitrates to be configured on the video senders for\r\n     * different resolutions both in unicast and simulcast mode.\r\n     */\r\n    constructor(peerconnection, videoBitrates) {\r\n        this.pc = peerconnection;\r\n        this.videoBitrates = videoBitrates;\r\n\r\n        /**\r\n         * The startup configuration for the stream encodings that are applicable to\r\n         * the video stream when a new sender is created on the peerconnection. The initial\r\n         * config takes into account the differences in browser's simulcast implementation.\r\n         *\r\n         * Encoding parameters:\r\n         * active - determine the on/off state of a particular encoding.\r\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\r\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\r\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\r\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\r\n         *  original resolution of the captured video.\r\n         */\r\n        this.localStreamEncodingsConfig = [\r\n            {\r\n                active: true,\r\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.high : this.videoBitrates.low,\r\n                rid: SIM_LAYER_1_RID,\r\n                scaleResolutionDownBy: browser.isFirefox() ? 1.0 : 4.0\r\n            },\r\n            {\r\n                active: true,\r\n                maxBitrate: this.videoBitrates.standard,\r\n                rid: SIM_LAYER_2_RID,\r\n                scaleResolutionDownBy: 2.0\r\n            },\r\n            {\r\n                active: true,\r\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.low : this.videoBitrates.high,\r\n                rid: SIM_LAYER_3_RID,\r\n                scaleResolutionDownBy: browser.isFirefox() ? 4.0 : 1.0\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\r\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\r\n     * plan since we have only one FID group per media description.\r\n     * @param {Object} description the webRTC session description instance for the remote\r\n     * description.\r\n     * @private\r\n     */\r\n    ensureCorrectOrderOfSsrcs(description) {\r\n        const parsedSdp = transform.parse(description.sdp);\r\n\r\n        parsedSdp.media.forEach(mLine => {\r\n            if (mLine.type === 'audio') {\r\n                return;\r\n            }\r\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\r\n                return;\r\n            }\r\n            let reorderedSsrcs = [];\r\n\r\n            const ssrcs = new Set();\r\n\r\n            mLine.ssrcGroups.map(group =>\r\n                group.ssrcs\r\n                    .split(' ')\r\n                    .filter(Boolean)\r\n                    .forEach(ssrc => ssrcs.add(ssrc))\r\n            );\r\n\r\n            ssrcs.forEach(ssrc => {\r\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\r\n\r\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\r\n            });\r\n            mLine.ssrcs = reorderedSsrcs;\r\n        });\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: transform.write(parsedSdp)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Obtains stream encodings that need to be configured on the given track based\r\n     * on the track media type and the simulcast setting.\r\n     * @param {JitsiLocalTrack} localTrack\r\n     */\r\n    _getStreamEncodings(localTrack) {\r\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\r\n            return this.localStreamEncodingsConfig;\r\n        }\r\n\r\n        return localTrack.isVideoTrack()\r\n            ? [ {\r\n                active: true,\r\n                maxBitrate: this.videoBitrates.high\r\n            } ]\r\n            : [ { active: true } ];\r\n    }\r\n\r\n    /**\r\n     * Takes in a *unified plan* offer and inserts the appropriate\r\n     * parameters for adding simulcast receive support.\r\n     * @param {Object} desc - A session description object\r\n     * @param {String} desc.type - the type (offer/answer)\r\n     * @param {String} desc.sdp - the sdp content\r\n     *\r\n     * @return {Object} A session description (same format as above) object\r\n     * with its sdp field modified to advertise simulcast receive support\r\n     */\r\n    insertUnifiedPlanSimulcastReceive(desc) {\r\n        // a=simulcast line is not needed on browsers where\r\n        // we munge SDP for turning on simulcast. Remove this check\r\n        // when we move to RID/MID based simulcast on all browsers.\r\n        if (browser.usesSdpMungingForSimulcast()) {\r\n            return desc;\r\n        }\r\n        const sdp = transform.parse(desc.sdp);\r\n        const idx = sdp.media.findIndex(mline => mline.type === 'video');\r\n\r\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\r\n            // Make sure we don't have the simulcast recv line on video descriptions other than the\r\n            // the first video description.\r\n            sdp.media.forEach((mline, i) => {\r\n                if (mline.type === 'video' && i !== idx) {\r\n                    sdp.media[i].rids = undefined;\r\n                    sdp.media[i].simulcast = undefined;\r\n\r\n                    // eslint-disable-next-line camelcase\r\n                    sdp.media[i].simulcast_03 = undefined;\r\n                }\r\n            });\r\n\r\n            return new RTCSessionDescription({\r\n                type: desc.type,\r\n                sdp: transform.write(sdp)\r\n            });\r\n        }\r\n\r\n        // In order of highest to lowest spatial quality\r\n        sdp.media[idx].rids = [\r\n            {\r\n                id: SIM_LAYER_1_RID,\r\n                direction: 'recv'\r\n            },\r\n            {\r\n                id: SIM_LAYER_2_RID,\r\n                direction: 'recv'\r\n            },\r\n            {\r\n                id: SIM_LAYER_3_RID,\r\n                direction: 'recv'\r\n            }\r\n        ];\r\n\r\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\r\n        // eslint-disable-next-line max-len\r\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\r\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\r\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\r\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\r\n\r\n        // eslint-disable-next-line camelcase\r\n        sdp.media[idx].simulcast_03 = {\r\n            value: simulcastLine\r\n        };\r\n\r\n        return new RTCSessionDescription({\r\n            type: desc.type,\r\n            sdp: transform.write(sdp)\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\r\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\r\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer\r\n    * in a p2p connection.\r\n    * @returns {void}\r\n    */\r\n    addTrack(localTrack, isInitiator) {\r\n        const track = localTrack.getTrack();\r\n\r\n        if (isInitiator) {\r\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\r\n            // to the peerconnection before a session-initiate is sent over to the peer.\r\n            const transceiverInit = {\r\n                direction: 'sendrecv',\r\n                streams: [ localTrack.getOriginalStream() ],\r\n                sendEncodings: []\r\n            };\r\n\r\n            if (!browser.isFirefox()) {\r\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\r\n            }\r\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\r\n        } else {\r\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\r\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\r\n            // unused \"recv-only\" transceiver.\r\n            this.pc.peerconnection.addTrack(track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\r\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    addTrackUnmute(localTrack) {\r\n        const mediaType = localTrack.getType();\r\n        const track = localTrack.getTrack();\r\n\r\n        // The assumption here is that the first transceiver of the specified\r\n        // media type is that of the local track.\r\n        const transceiver = this.pc.peerconnection.getTransceivers()\r\n            .find(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\r\n\r\n        if (!transceiver) {\r\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\r\n        }\r\n        logger.debug(`Adding ${localTrack} on ${this.pc}`);\r\n\r\n        // If the client starts with audio/video muted setting, the transceiver direction\r\n        // will be set to 'recvonly'. Use addStream here so that a MSID is generated for the stream.\r\n        if (transceiver.direction === 'recvonly') {\r\n            const stream = localTrack.getOriginalStream();\r\n\r\n            if (stream) {\r\n                this.pc.peerconnection.addStream(localTrack.getOriginalStream());\r\n\r\n                return this.setEncodings(localTrack).then(() => {\r\n                    this.pc.localTracks.set(localTrack.rtcId, localTrack);\r\n                    transceiver.direction = 'sendrecv';\r\n                });\r\n            }\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return transceiver.sender.replaceTrack(track);\r\n    }\r\n\r\n    /**\r\n     * Obtains the current local video track's height constraints based on the\r\n     * initial stream encodings configuration on the sender and the resolution\r\n     * of the current local track added to the peerconnection.\r\n     * @param {MediaStreamTrack} localTrack local video track\r\n     * @returns {Array[number]} an array containing the resolution heights of\r\n     * simulcast streams configured on the video sender.\r\n     */\r\n    getLocalStreamHeightConstraints(localTrack) {\r\n        // React-native hasn't implemented MediaStreamTrack getSettings yet.\r\n        if (browser.isReactNative()) {\r\n            return null;\r\n        }\r\n\r\n        const localVideoHeightConstraints = [];\r\n        const height = localTrack.getSettings().height;\r\n\r\n        for (const encoding of this.localStreamEncodingsConfig) {\r\n            localVideoHeightConstraints.push(height / encoding.scaleResolutionDownBy);\r\n        }\r\n\r\n        return localVideoHeightConstraints;\r\n    }\r\n\r\n    /**\r\n     * Removes the track from the RTCRtpSender as part of the mute operation.\r\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    removeTrackMute(localTrack) {\r\n        const mediaType = localTrack.getType();\r\n        const transceiver = this.pc.peerconnection.getTransceivers()\r\n            .find(t => t.sender && t.sender.track && t.sender.track.id === localTrack.getTrackId());\r\n\r\n        if (!transceiver) {\r\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\r\n        }\r\n\r\n        logger.debug(`Removing ${localTrack} on ${this.pc}`);\r\n\r\n        return transceiver.sender.replaceTrack(null);\r\n    }\r\n\r\n    /**\r\n     * Replaces the existing track on a RTCRtpSender with the given track.\r\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\r\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    replaceTrack(oldTrack, newTrack) {\r\n        if (oldTrack && newTrack) {\r\n            const mediaType = newTrack.getType();\r\n            const stream = newTrack.getOriginalStream();\r\n\r\n            // Ignore cases when the track is replaced while the device is in a muted state,like\r\n            // replacing camera when video muted or replacing mic when audio muted. These JitsiLocalTracks\r\n            // do not have a mediastream attached. Replace track will be called again when the device is\r\n            // unmuted and the track will be replaced on the peerconnection then.\r\n            if (!stream) {\r\n                this.pc.localTracks.delete(oldTrack.rtcId);\r\n                this.pc.localTracks.set(newTrack.rtcId, newTrack);\r\n\r\n                return Promise.resolve();\r\n            }\r\n            const track = mediaType === MediaType.AUDIO\r\n                ? stream.getAudioTracks()[0]\r\n                : stream.getVideoTracks()[0];\r\n            const transceiver = this.pc.peerconnection.getTransceivers()\r\n                .find(t => t.receiver.track.kind === mediaType && !t.stopped);\r\n\r\n            if (!transceiver) {\r\n                return Promise.reject(new Error('replace track failed'));\r\n            }\r\n            logger.debug(`Replacing ${oldTrack} with ${newTrack} on ${this.pc}`);\r\n\r\n            return transceiver.sender.replaceTrack(track)\r\n                .then(() => {\r\n                    const ssrc = this.pc.localSSRCs.get(oldTrack.rtcId);\r\n\r\n                    this.pc.localTracks.delete(oldTrack.rtcId);\r\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\r\n                    this.pc._addedStreams = this.pc._addedStreams.filter(s => s !== stream);\r\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\r\n\r\n                    this.pc._addedStreams.push(stream);\r\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\r\n                    this.pc.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\r\n                        newTrack,\r\n                        this.pc._extractPrimarySSRC(ssrc));\r\n                });\r\n        } else if (oldTrack && !newTrack) {\r\n            return this.removeTrackMute(oldTrack)\r\n                .then(() => {\r\n                    this.pc.localTracks.delete(oldTrack.rtcId);\r\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\r\n                });\r\n        } else if (newTrack && !oldTrack) {\r\n            const ssrc = this.pc.localSSRCs.get(newTrack.rtcId);\r\n\r\n            return this.addTrackUnmute(newTrack)\r\n                .then(() => {\r\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\r\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Enables/disables audio transmission on the peer connection. When\r\n    * disabled the audio transceiver direction will be set to 'inactive'\r\n    * which means that no data will be sent nor accepted, but\r\n    * the connection should be kept alive.\r\n    * @param {boolean} active - true to enable audio media transmission or\r\n    * false to disable.\r\n    * @returns {void}\r\n    */\r\n    setAudioTransferActive(active) {\r\n        this.setMediaTransferActive(MediaType.AUDIO, active);\r\n    }\r\n\r\n    /**\r\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\r\n     * @param {JitsiLocalTrack} track - the current track in use for which\r\n     * the encodings are to be set.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    setEncodings(track) {\r\n        const transceiver = this.pc.peerconnection.getTransceivers()\r\n            .find(t => t.sender && t.sender.track && t.sender.track.kind === track.getType());\r\n        const parameters = transceiver.sender.getParameters();\r\n\r\n        parameters.encodings = this._getStreamEncodings(track);\r\n\r\n        return transceiver.sender.setParameters(parameters);\r\n    }\r\n\r\n    /**\r\n     * Enables/disables media transmission on the peerconnection by changing the direction\r\n     * on the transceiver for the specified media type.\r\n     * @param {String} mediaType - 'audio' or 'video'\r\n     * @param {boolean} active - true to enable media transmission or false\r\n     * to disable.\r\n     * @returns {void}\r\n     */\r\n    setMediaTransferActive(mediaType, active) {\r\n        const transceivers = this.pc.peerconnection.getTransceivers()\r\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\r\n        const localTracks = this.pc.getLocalTracks(mediaType);\r\n\r\n        logger.info(`${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer on ${this.pc}`);\r\n        transceivers.forEach((transceiver, idx) => {\r\n            if (active) {\r\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\r\n                if (idx === 0 && localTracks.length) {\r\n                    transceiver.direction = 'sendrecv';\r\n                } else {\r\n                    transceiver.direction = 'recvonly';\r\n                }\r\n            } else {\r\n                transceiver.direction = 'inactive';\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Enables/disables video media transmission on the peer connection. When\r\n    * disabled the SDP video media direction in the local SDP will be adjusted to\r\n    * 'inactive' which means that no data will be sent nor accepted, but\r\n    * the connection should be kept alive.\r\n    * @param {boolean} active - true to enable video media transmission or\r\n    * false to disable.\r\n    * @returns {void}\r\n    */\r\n    setVideoTransferActive(active) {\r\n        this.setMediaTransferActive(MediaType.VIDEO, active);\r\n    }\r\n}\r\n","// shim for using process in browser\r\nvar process = module.exports = {};\r\n\r\n// cached from whatever global is present so that test runners that stub it\r\n// don't break things.  But we need to wrap it in a try catch in case it is\r\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\r\n// function because try/catches deoptimize in certain engines.\r\n\r\nvar cachedSetTimeout;\r\nvar cachedClearTimeout;\r\n\r\nfunction defaultSetTimout() {\r\n    throw new Error('setTimeout has not been defined');\r\n}\r\nfunction defaultClearTimeout () {\r\n    throw new Error('clearTimeout has not been defined');\r\n}\r\n(function () {\r\n    try {\r\n        if (typeof setTimeout === 'function') {\r\n            cachedSetTimeout = setTimeout;\r\n        } else {\r\n            cachedSetTimeout = defaultSetTimout;\r\n        }\r\n    } catch (e) {\r\n        cachedSetTimeout = defaultSetTimout;\r\n    }\r\n    try {\r\n        if (typeof clearTimeout === 'function') {\r\n            cachedClearTimeout = clearTimeout;\r\n        } else {\r\n            cachedClearTimeout = defaultClearTimeout;\r\n        }\r\n    } catch (e) {\r\n        cachedClearTimeout = defaultClearTimeout;\r\n    }\r\n} ())\r\nfunction runTimeout(fun) {\r\n    if (cachedSetTimeout === setTimeout) {\r\n        //normal enviroments in sane situations\r\n        return setTimeout(fun, 0);\r\n    }\r\n    // if setTimeout wasn't available but was latter defined\r\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\r\n        cachedSetTimeout = setTimeout;\r\n        return setTimeout(fun, 0);\r\n    }\r\n    try {\r\n        // when when somebody has screwed with setTimeout but no I.E. maddness\r\n        return cachedSetTimeout(fun, 0);\r\n    } catch(e){\r\n        try {\r\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\r\n            return cachedSetTimeout.call(null, fun, 0);\r\n        } catch(e){\r\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\r\n            return cachedSetTimeout.call(this, fun, 0);\r\n        }\r\n    }\r\n\r\n\r\n}\r\nfunction runClearTimeout(marker) {\r\n    if (cachedClearTimeout === clearTimeout) {\r\n        //normal enviroments in sane situations\r\n        return clearTimeout(marker);\r\n    }\r\n    // if clearTimeout wasn't available but was latter defined\r\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\r\n        cachedClearTimeout = clearTimeout;\r\n        return clearTimeout(marker);\r\n    }\r\n    try {\r\n        // when when somebody has screwed with setTimeout but no I.E. maddness\r\n        return cachedClearTimeout(marker);\r\n    } catch (e){\r\n        try {\r\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\r\n            return cachedClearTimeout.call(null, marker);\r\n        } catch (e){\r\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\r\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\r\n            return cachedClearTimeout.call(this, marker);\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\nvar queue = [];\r\nvar draining = false;\r\nvar currentQueue;\r\nvar queueIndex = -1;\r\n\r\nfunction cleanUpNextTick() {\r\n    if (!draining || !currentQueue) {\r\n        return;\r\n    }\r\n    draining = false;\r\n    if (currentQueue.length) {\r\n        queue = currentQueue.concat(queue);\r\n    } else {\r\n        queueIndex = -1;\r\n    }\r\n    if (queue.length) {\r\n        drainQueue();\r\n    }\r\n}\r\n\r\nfunction drainQueue() {\r\n    if (draining) {\r\n        return;\r\n    }\r\n    var timeout = runTimeout(cleanUpNextTick);\r\n    draining = true;\r\n\r\n    var len = queue.length;\r\n    while(len) {\r\n        currentQueue = queue;\r\n        queue = [];\r\n        while (++queueIndex < len) {\r\n            if (currentQueue) {\r\n                currentQueue[queueIndex].run();\r\n            }\r\n        }\r\n        queueIndex = -1;\r\n        len = queue.length;\r\n    }\r\n    currentQueue = null;\r\n    draining = false;\r\n    runClearTimeout(timeout);\r\n}\r\n\r\nprocess.nextTick = function (fun) {\r\n    var args = new Array(arguments.length - 1);\r\n    if (arguments.length > 1) {\r\n        for (var i = 1; i < arguments.length; i++) {\r\n            args[i - 1] = arguments[i];\r\n        }\r\n    }\r\n    queue.push(new Item(fun, args));\r\n    if (queue.length === 1 && !draining) {\r\n        runTimeout(drainQueue);\r\n    }\r\n};\r\n\r\n// v8 likes predictible objects\r\nfunction Item(fun, array) {\r\n    this.fun = fun;\r\n    this.array = array;\r\n}\r\nItem.prototype.run = function () {\r\n    this.fun.apply(null, this.array);\r\n};\r\nprocess.title = 'browser';\r\nprocess.browser = true;\r\nprocess.env = {};\r\nprocess.argv = [];\r\nprocess.version = ''; // empty string to avoid regexp issues\r\nprocess.versions = {};\r\n\r\nfunction noop() {}\r\n\r\nprocess.on = noop;\r\nprocess.addListener = noop;\r\nprocess.once = noop;\r\nprocess.off = noop;\r\nprocess.removeListener = noop;\r\nprocess.removeAllListeners = noop;\r\nprocess.emit = noop;\r\nprocess.prependListener = noop;\r\nprocess.prependOnceListener = noop;\r\n\r\nprocess.listeners = function (name) { return [] }\r\n\r\nprocess.binding = function (name) {\r\n    throw new Error('process.binding is not supported');\r\n};\r\n\r\nprocess.cwd = function () { return '/' };\r\nprocess.chdir = function (dir) {\r\n    throw new Error('process.chdir is not supported');\r\n};\r\nprocess.umask = function() { return 0; };\r\n","/**\r\n * Provides statistics for the local stream.\r\n */\r\n\r\n/**\r\n * Size of the webaudio analyzer buffer.\r\n * @type {number}\r\n */\r\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\r\n\r\n/**\r\n * Value of the webaudio analyzer smoothing time parameter.\r\n * @type {number}\r\n */\r\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\r\n\r\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\r\n\r\nlet context = null;\r\n\r\nif (window.AudioContext) {\r\n    context = new AudioContext();\r\n\r\n    // XXX Not all browsers define a suspend method on AudioContext. As the\r\n    // invocation is at the (ES6 module) global execution level, it breaks the\r\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\r\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\r\n    // example, Google Chrome 40 on Android does not define the method but we\r\n    // still want to be able to load the lib-jitsi-meet library there and\r\n    // display a page which notifies the user that the Web app is not supported\r\n    // there.\r\n    context.suspend && context.suspend();\r\n}\r\n\r\n/**\r\n * Converts time domain data array to audio level.\r\n * @param samples the time domain data array.\r\n * @returns {number} the audio level\r\n */\r\nfunction timeDomainDataToAudioLevel(samples) {\r\n\r\n    let maxVolume = 0;\r\n\r\n    const length = samples.length;\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        if (maxVolume < samples[i]) {\r\n            maxVolume = samples[i];\r\n        }\r\n    }\r\n\r\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\r\n}\r\n\r\n/**\r\n * Animates audio level change\r\n * @param newLevel the new audio level\r\n * @param lastLevel the last audio level\r\n * @returns {Number} the audio level to be set\r\n */\r\nfunction animateLevel(newLevel, lastLevel) {\r\n    let value = 0;\r\n    const diff = lastLevel - newLevel;\r\n\r\n    if (diff > 0.2) {\r\n        value = lastLevel - 0.2;\r\n    } else if (diff < -0.4) {\r\n        value = lastLevel + 0.4;\r\n    } else {\r\n        value = newLevel;\r\n    }\r\n\r\n    return parseFloat(value.toFixed(3));\r\n}\r\n\r\n\r\n/**\r\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\r\n *\r\n * @param stream the local stream\r\n * @param interval stats refresh interval given in ms.\r\n * @param callback function that receives the audio levels.\r\n * @constructor\r\n */\r\nexport default function LocalStatsCollector(stream, interval, callback) {\r\n    this.stream = stream;\r\n    this.intervalId = null;\r\n    this.intervalMilis = interval;\r\n    this.audioLevel = 0;\r\n    this.callback = callback;\r\n}\r\n\r\n/**\r\n * Starts the collecting the statistics.\r\n */\r\nLocalStatsCollector.prototype.start = function() {\r\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\r\n        return;\r\n    }\r\n    context.resume();\r\n    const analyser = context.createAnalyser();\r\n\r\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\r\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\r\n\r\n    const source = context.createMediaStreamSource(this.stream);\r\n\r\n    source.connect(analyser);\r\n\r\n    this.intervalId = setInterval(\r\n        () => {\r\n            const array = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n            analyser.getByteTimeDomainData(array);\r\n            const audioLevel = timeDomainDataToAudioLevel(array);\r\n\r\n            // Set the audio levels always as NoAudioSignalDetection now\r\n            // uses audio levels from LocalStatsCollector and waits for\r\n            // atleast 4 secs for a no audio signal before displaying the\r\n            // notification on the UI.\r\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\r\n            this.callback(this.audioLevel);\r\n        },\r\n        this.intervalMilis\r\n    );\r\n};\r\n\r\n/**\r\n * Stops collecting the statistics.\r\n */\r\nLocalStatsCollector.prototype.stop = function() {\r\n    if (this.intervalId) {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Checks if the environment has the necessary conditions to support\r\n * collecting stats from local streams.\r\n *\r\n * @returns {boolean}\r\n */\r\nLocalStatsCollector.isLocalStatsSupported = function() {\r\n    return Boolean(context);\r\n};\r\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\r\n","/* global $ */\r\n\r\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Listenable from '../util/Listenable';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * The property\r\n */\r\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\r\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\r\nconst HASH = 'sha-1';\r\n\r\nexport const ERROR_FEATURE_VERSION_MISMATCH = 'Feature version mismatch';\r\n\r\n/**\r\n *\r\n * @param a\r\n * @param b\r\n */\r\nfunction compareIdentities(a, b) {\r\n    let res = 0;\r\n\r\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\r\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\r\n    );\r\n\r\n    return res;\r\n}\r\n\r\n/**\r\n * Produces a sha-1 from provided identity and features values.\r\n *\r\n * @param {Array<Object>} identities - The identity objects.\r\n * @param {Array<string>} features - The features.\r\n * @returns {string}\r\n */\r\nfunction generateSha(identities, features) {\r\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\r\n        (accumulatedValue, identity) => `${\r\n            IDENTITY_PROPERTIES.reduce(\r\n                (tmp, key, idx) =>\r\n                    tmp\r\n                        + (idx === 0 ? '' : '/')\r\n                        + (identity[key] ? identity[key] : ''),\r\n                '')\r\n        }<`, '');\r\n    const sortedFeatures = features.sort().reduce(\r\n        (tmp, feature) => `${tmp + feature}<`, '');\r\n\r\n    return b64_sha1(sortedIdentities + sortedFeatures);\r\n}\r\n\r\n/**\r\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\r\n */\r\nexport default class Caps extends Listenable {\r\n    /**\r\n     * Constructs new Caps instance.\r\n     * @param {Strophe.Connection} connection the strophe connection object\r\n     * @param {String} node the value of the node attribute of the \"c\" xml node\r\n     * that will be sent to the other participants\r\n     */\r\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\r\n        super();\r\n        this.node = node;\r\n        this.disco = connection.disco;\r\n        if (!this.disco) {\r\n            throw new Error(\r\n                'Missing strophe-plugins '\r\n                + '(disco plugin is required)!');\r\n        }\r\n\r\n        this.versionToCapabilities = Object.create(null);\r\n        this.jidToVersion = Object.create(null);\r\n        this.version = '';\r\n        this.rooms = new Set();\r\n\r\n        const emuc = connection.emuc;\r\n\r\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\r\n            room => this._addChatRoom(room));\r\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\r\n            room => this._removeChatRoom(room));\r\n        Object.keys(emuc.rooms).forEach(jid => {\r\n            this._addChatRoom(emuc.rooms[jid]);\r\n        });\r\n\r\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\r\n        this.disco.addFeature(Strophe.NS.CAPS);\r\n        connection.addHandler(this._handleCaps.bind(this), Strophe.NS.CAPS);\r\n\r\n        this._onMucMemberLeft = this._removeJidToVersionEntry.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Adds new feature to the list of supported features for the local\r\n     * participant\r\n     * @param {String} feature the name of the feature.\r\n     * @param {boolean} submit if true - new presence with updated \"c\" node\r\n     * will be sent.\r\n     */\r\n    addFeature(feature, submit = false) {\r\n        this.disco.addFeature(feature);\r\n        this._generateVersion();\r\n        if (submit) {\r\n            this.submit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a feature from the list of supported features for the local\r\n     * participant\r\n     * @param {String} feature the name of the feature.\r\n     * @param {boolean} submit if true - new presence with updated \"c\" node\r\n     * will be sent.\r\n     */\r\n    removeFeature(feature, submit = false) {\r\n        this.disco.removeFeature(feature);\r\n        this._generateVersion();\r\n        if (submit) {\r\n            this.submit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends new presence stanza for every room from the list of rooms.\r\n     */\r\n    submit() {\r\n        this.rooms.forEach(room => room.sendPresence());\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for a participant.\r\n     * @param {String} jid the jid of the participant\r\n     * @param {int} timeout the timeout in ms for reply from the participant.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeatures(jid, timeout = 5000) {\r\n        const user\r\n            = jid in this.jidToVersion ? this.jidToVersion[jid] : null;\r\n\r\n        if (!user || !(user.version in this.versionToCapabilities)) {\r\n            const node = user ? `${user.node}#${user.version}` : null;\r\n\r\n            return this._getDiscoInfo(jid, node, timeout)\r\n                .then(({ features, identities }) => {\r\n                    if (user) {\r\n                        const sha = generateSha(\r\n                            Array.from(identities),\r\n                            Array.from(features)\r\n                        );\r\n                        const receivedNode = `${user.node}#${sha}`;\r\n\r\n                        if (receivedNode === node) {\r\n                            this.versionToCapabilities[receivedNode] = features;\r\n\r\n                            return features;\r\n                        }\r\n\r\n                        // Check once if it has been cached asynchronously.\r\n                        if (this.versionToCapabilities[receivedNode]) {\r\n                            return this.versionToCapabilities[receivedNode];\r\n                        }\r\n\r\n                        logger.error(`Expected node ${node} but received ${\r\n                            receivedNode}`);\r\n\r\n                        return Promise.reject(ERROR_FEATURE_VERSION_MISMATCH);\r\n                    }\r\n\r\n                    return features;\r\n                });\r\n        }\r\n\r\n        return Promise.resolve(this.versionToCapabilities[user.version]);\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for a host.\r\n     * @param {String} jid the jid of the host\r\n     * @param {int} timeout the timeout in ms for reply from the host.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\r\n        return this._getDiscoInfo(jid, node, timeout);\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features and identities for a host.\r\n     * @param {String} jid the jid of the host\r\n     * @param {String|null} node the node to query\r\n     * @param {int} timeout the timeout in ms for reply from the host.\r\n     * @returns {Promise<Object>}\r\n     * @private\r\n     */\r\n    _getDiscoInfo(jid, node, timeout) {\r\n        return new Promise((resolve, reject) =>\r\n            this.disco.info(jid, node, response => {\r\n                const features = new Set();\r\n                const identities = new Set();\r\n\r\n                $(response)\r\n                    .find('>query>feature')\r\n                    .each(\r\n                        (_, el) => features.add(el.getAttribute('var')));\r\n                $(response)\r\n                    .find('>query>identity')\r\n                    .each(\r\n                        (_, el) => identities.add({\r\n                            type: el.getAttribute('type'),\r\n                            name: el.getAttribute('name'),\r\n                            category: el.getAttribute('category')\r\n                        }));\r\n                resolve({\r\n                    features,\r\n                    identities });\r\n            }, reject, timeout)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\r\n     * and adds \"c\" element to the presences of the room.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _addChatRoom(room) {\r\n        this.rooms.add(room);\r\n        room.addListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\r\n        this._fixChatRoomPresenceMap(room);\r\n    }\r\n\r\n    /**\r\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\r\n     * added from the Caps class.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _removeChatRoom(room) {\r\n        this.rooms.delete(room);\r\n        room.removeListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\r\n    }\r\n\r\n    /**\r\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _fixChatRoomPresenceMap(room) {\r\n        room.addToPresence('c', {\r\n            attributes: {\r\n                xmlns: Strophe.NS.CAPS,\r\n                hash: HASH,\r\n                node: this.node,\r\n                ver: this.version\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles this.version changes.\r\n     */\r\n    _notifyVersionChanged() {\r\n        // update the version for all rooms\r\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\r\n    }\r\n\r\n    /**\r\n     * Generates the value for the \"ver\" attribute.\r\n     */\r\n    _generateVersion() {\r\n        this.version\r\n            = generateSha(this.disco._identities, this.disco._features);\r\n\r\n        this._notifyVersionChanged();\r\n    }\r\n\r\n    /**\r\n     * Parses the \"c\" xml node from presence.\r\n     * @param {DOMElement} stanza the presence packet\r\n     */\r\n    _handleCaps(stanza) {\r\n        const from = stanza.getAttribute('from');\r\n        const caps = stanza.querySelector('c');\r\n        const version = caps.getAttribute('ver');\r\n        const node = caps.getAttribute('node');\r\n        const oldVersion = this.jidToVersion[from];\r\n\r\n        this.jidToVersion[from] = { version,\r\n            node };\r\n        if (oldVersion && oldVersion.version !== version) {\r\n            this.eventEmitter.emit(XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\r\n                from);\r\n        }\r\n\r\n        // return true to not remove the handler from Strophe\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Removes entry from this.jidToVersion map.\r\n     * @param {String} jid the jid to be removed.\r\n     */\r\n    _removeJidToVersionEntry(jid) {\r\n        if (jid in this.jidToVersion) {\r\n            delete this.jidToVersion[jid];\r\n        }\r\n    }\r\n}\r\n","/* global $, __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport Lobby from './Lobby';\r\nimport XmppConnection from './XmppConnection';\r\nimport Moderator from './moderator';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nexport const parser = {\r\n    packet2JSON(xmlElement, nodes) {\r\n        for (const child of Array.from(xmlElement.children)) {\r\n            const node = {\r\n                attributes: {},\r\n                children: [],\r\n                tagName: child.tagName\r\n            };\r\n\r\n            for (const attr of Array.from(child.attributes)) {\r\n                node.attributes[attr.name] = attr.value;\r\n            }\r\n            const text = Strophe.getText(child);\r\n\r\n            if (text) {\r\n                // Using Strophe.getText will do work for traversing all direct\r\n                // child text nodes but returns an escaped value, which is not\r\n                // desirable at this point.\r\n                node.value = Strophe.xmlunescape(text);\r\n            }\r\n            nodes.push(node);\r\n            this.packet2JSON(child, node.children);\r\n        }\r\n    },\r\n    json2packet(nodes, packet) {\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            if (node) {\r\n                packet.c(node.tagName, node.attributes);\r\n                if (node.value) {\r\n                    packet.t(node.value);\r\n                }\r\n                if (node.children) {\r\n                    this.json2packet(node.children, packet);\r\n                }\r\n                packet.up();\r\n            }\r\n        }\r\n\r\n        // packet.up();\r\n    }\r\n};\r\n\r\n/**\r\n * Returns array of JS objects from the presence JSON associated with the passed\r\n / nodeName\r\n * @param pres the presence JSON\r\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\r\n */\r\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\r\n    const res = [];\r\n\r\n    for (let i = 0; i < pres.length; i++) {\r\n        if (pres[i].tagName === nodeName) {\r\n            res.push(pres[i]);\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\r\n// of chaining function calls, allow long function call chains.\r\n/* eslint-disable newline-per-chained-call */\r\n\r\n/**\r\n * Array of affiliations that are allowed in members only room.\r\n * @type {string[]}\r\n */\r\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\r\n\r\n/**\r\n *\r\n */\r\nexport default class ChatRoom extends Listenable {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param {XmppConnection} connection - The XMPP connection instance.\r\n     * @param jid\r\n     * @param password\r\n     * @param XMPP\r\n     * @param options\r\n     * @param {boolean} options.disableFocus - when set to {@code false} will\r\n     * not invite Jicofo into the room.\r\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\r\n     * This is intended to be used only for lobby rooms.\r\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\r\n     */\r\n    constructor(connection, jid, password, XMPP, options) {\r\n        super();\r\n        this.xmpp = XMPP;\r\n        this.connection = connection;\r\n        this.roomjid = Strophe.getBareJidFromJid(jid);\r\n        this.myroomjid = jid;\r\n        this.password = password;\r\n        logger.info(`Joined MUC as ${this.myroomjid}`);\r\n        this.members = {};\r\n        this.presMap = {};\r\n        this.presHandlers = {};\r\n        this._removeConnListeners = [];\r\n        this.joined = false;\r\n        this.role = null;\r\n        this.focusMucJid = null;\r\n        this.noBridgeAvailable = false;\r\n        this.options = options || {};\r\n        this.moderator\r\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\r\n                connection: this.xmpp.options,\r\n                conference: this.options\r\n            });\r\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\r\n            this.lobby = new Lobby(this);\r\n        }\r\n        this.initPresenceMap(options);\r\n        this.lastPresences = {};\r\n        this.phoneNumber = null;\r\n        this.phonePin = null;\r\n        this.connectionTimes = {};\r\n        this.participantPropertyListener = null;\r\n\r\n        this.locked = false;\r\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     */\r\n    initPresenceMap(options = {}) {\r\n        this.presMap.to = this.myroomjid;\r\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\r\n        this.presMap.nodes = [];\r\n\r\n        if (options.statsId) {\r\n            this.presMap.nodes.push({\r\n                'tagName': 'stats-id',\r\n                'value': options.statsId\r\n            });\r\n        }\r\n\r\n        // We need to broadcast 'videomuted' status from the beginning, cause\r\n        // Jicofo makes decisions based on that. Initialize it with 'false'\r\n        // here.\r\n        this.addVideoInfoToPresence(false);\r\n\r\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\r\n            this.presMap.nodes.push({\r\n                'tagName': 'region',\r\n                'attributes': {\r\n                    id: options.deploymentInfo.userRegion,\r\n                    xmlns: 'http://jitsi.org/jitsi-meet'\r\n                }\r\n            });\r\n        }\r\n\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    getLastPresence(mucNick) {\r\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\r\n    }\r\n\r\n    /**\r\n     * Joins the chat room.\r\n     * @param {string} password - Password to unlock room on joining.\r\n     * @param {Object} customJoinPresenceExtensions - Key values object to be used\r\n     * for the initial presence, they key will be an xmpp node and its text is the value,\r\n     * and those will be added to the initial <x xmlns='http://jabber.org/protocol/muc'/>\r\n     * @returns {Promise} - resolved when join completes. At the time of this\r\n     * writing it's never rejected.\r\n     */\r\n    join(password, customJoinPresenceExtensions) {\r\n        this.password = password;\r\n\r\n        return new Promise(resolve => {\r\n            this.options.disableFocus\r\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\r\n\r\n            const preJoin\r\n                = this.options.disableFocus\r\n                    ? Promise.resolve()\r\n                    : this.moderator.allocateConferenceFocus();\r\n\r\n            preJoin.then(() => {\r\n                this.sendPresence(true, customJoinPresenceExtensions);\r\n                this._removeConnListeners.push(\r\n                    this.connection.addEventListener(\r\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\r\n                        this.onConnStatusChanged.bind(this))\r\n                );\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param fromJoin - Whether this is initial presence to join the room.\r\n     * @param customJoinPresenceExtensions - Object of key values to be added to the initial presence only.\r\n     */\r\n    sendPresence(fromJoin, customJoinPresenceExtensions) {\r\n        const to = this.presMap.to;\r\n\r\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\r\n            // Too early to send presence - not initialized\r\n            return;\r\n        }\r\n\r\n        const pres = $pres({ to });\r\n\r\n        // xep-0045 defines: \"including in the initial presence stanza an empty\r\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\r\n        // namespace\" and subsequent presences should not include that or it can\r\n        // be considered as joining, and server can send us the message history\r\n        // for the room on every presence\r\n        if (fromJoin) {\r\n            pres.c('x', { xmlns: this.presMap.xns });\r\n\r\n            if (this.password) {\r\n                pres.c('password').t(this.password).up();\r\n            }\r\n            if (customJoinPresenceExtensions) {\r\n                Object.keys(customJoinPresenceExtensions).forEach(key => {\r\n                    pres.c(key).t(customJoinPresenceExtensions[key]).up();\r\n                });\r\n            }\r\n            pres.up();\r\n        }\r\n\r\n        parser.json2packet(this.presMap.nodes, pres);\r\n\r\n        // we store time we last synced presence state\r\n        this.presenceSyncTime = Date.now();\r\n\r\n        this.connection.send(pres);\r\n        if (fromJoin) {\r\n            // XXX We're pressed for time here because we're beginning a complex\r\n            // and/or lengthy conference-establishment process which supposedly\r\n            // involves multiple RTTs. We don't have the time to wait for\r\n            // Strophe to decide to send our IQ.\r\n            this.connection.flush();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the presence unavailable, signaling the server\r\n     * we want to leave the room.\r\n     */\r\n    doLeave() {\r\n        logger.log('do leave', this.myroomjid);\r\n        const pres = $pres({ to: this.myroomjid,\r\n            type: 'unavailable' });\r\n\r\n        this.presMap.length = 0;\r\n\r\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\r\n        // means that there may not be enough time to send the unavailable\r\n        // presence. Switching Strophe to synchronous sending is not much of an\r\n        // option because it may lead to a noticeable delay in navigating away\r\n        // from the current location. As a compromise, we will try to increase\r\n        // the chances of sending the unavailable presence within the short time\r\n        // span that we have upon unloading by invoking flush() on the\r\n        // connection. We flush() once before sending/queuing the unavailable\r\n        // presence in order to attemtp to have the unavailable presence at the\r\n        // top of the send queue. We flush() once more after sending/queuing the\r\n        // unavailable presence in order to attempt to have it sent as soon as\r\n        // possible.\r\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\r\n        !this.connection.isUsingWebSocket && this.connection.flush();\r\n        this.connection.send(pres);\r\n        this.connection.flush();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    discoRoomInfo() {\r\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\r\n\r\n        const getInfo\r\n            = $iq({\r\n                type: 'get',\r\n                to: this.roomjid\r\n            })\r\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\r\n\r\n        this.connection.sendIQ(getInfo, result => {\r\n            const locked\r\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\r\n                    .length\r\n                    === 1;\r\n\r\n            if (locked !== this.locked) {\r\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\r\n                this.locked = locked;\r\n            }\r\n\r\n            const meetingIdValEl\r\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\r\n\r\n            if (meetingIdValEl.length) {\r\n                this.setMeetingId(meetingIdValEl.text());\r\n            } else {\r\n                logger.warn('No meeting ID from backend');\r\n            }\r\n\r\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\r\n\r\n            const lobbyRoomField\r\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\r\n\r\n            if (this.lobby) {\r\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\r\n            }\r\n\r\n            if (membersOnly !== this.membersOnlyEnabled) {\r\n                this.membersOnlyEnabled = membersOnly;\r\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\r\n            }\r\n\r\n        }, error => {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n            logger.error('Error getting room info: ', error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the meeting unique Id (received from the backend).\r\n     *\r\n     * @param {string} meetingId - The new meetings id.\r\n     * @returns {void}\r\n     */\r\n    setMeetingId(meetingId) {\r\n        if (this.meetingId !== meetingId) {\r\n            if (this.meetingId) {\r\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\r\n            }\r\n            this.meetingId = meetingId;\r\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    createNonAnonymousRoom() {\r\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\r\n\r\n        if (this.options.disableDiscoInfo) {\r\n            return;\r\n        }\r\n\r\n        const getForm = $iq({ type: 'get',\r\n            to: this.roomjid })\r\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\r\n            .c('x', { xmlns: 'jabber:x:data',\r\n                type: 'submit' });\r\n\r\n        this.connection.sendIQ(getForm, form => {\r\n            if (!$(form).find(\r\n                    '>query>x[xmlns=\"jabber:x:data\"]'\r\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\r\n                const errmsg = 'non-anonymous rooms not supported';\r\n\r\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n                logger.error(errmsg);\r\n\r\n                return;\r\n            }\r\n\r\n            const formSubmit = $iq({ to: this.roomjid,\r\n                type: 'set' })\r\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\r\n\r\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\r\n                type: 'submit' });\r\n\r\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\r\n                .c('value')\r\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\r\n\r\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\r\n                .c('value').t('anyone').up().up();\r\n\r\n            this.connection.sendIQ(formSubmit);\r\n\r\n        }, error => {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n            logger.error('Error getting room configuration form: ', error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles Xmpp Connection status updates.\r\n     *\r\n     * @param {Strophe.Status} status - The Strophe connection status.\r\n     */\r\n    onConnStatusChanged(status) {\r\n        // Send cached presence when the XMPP connection is re-established.\r\n        if (status === XmppConnection.Status.CONNECTED) {\r\n            this.sendPresence();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresence(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const member = {};\r\n        const statusEl = pres.getElementsByTagName('status')[0];\r\n\r\n        if (statusEl) {\r\n            member.status = statusEl.textContent || '';\r\n        }\r\n        let hasStatusUpdate = false;\r\n        let hasVersionUpdate = false;\r\n        const xElement\r\n            = pres.getElementsByTagNameNS(\r\n                'http://jabber.org/protocol/muc#user', 'x')[0];\r\n        const mucUserItem\r\n            = xElement && xElement.getElementsByTagName('item')[0];\r\n\r\n        member.affiliation\r\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\r\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\r\n\r\n        // Focus recognition\r\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\r\n\r\n        member.jid = jid;\r\n        member.isFocus\r\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\r\n        member.isHiddenDomain\r\n            = jid && jid.indexOf('@') > 0\r\n                && this.options.hiddenDomain\r\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\r\n\r\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\r\n            fromHiddenDomain: member.isHiddenDomain,\r\n            presence: pres\r\n        });\r\n\r\n        const xEl = pres.querySelector('x');\r\n\r\n        if (xEl) {\r\n            xEl.remove();\r\n        }\r\n\r\n        const nodes = [];\r\n\r\n        parser.packet2JSON(pres, nodes);\r\n        this.lastPresences[from] = nodes;\r\n\r\n        // process nodes to extract data needed for MUC_JOINED and\r\n        // MUC_MEMBER_JOINED events\r\n        const extractIdentityInformation = node => {\r\n            const identity = {};\r\n            const userInfo = node.children.find(c => c.tagName === 'user');\r\n\r\n            if (userInfo) {\r\n                identity.user = {};\r\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\r\n                    const child\r\n                        = userInfo.children.find(c => c.tagName === tag);\r\n\r\n                    if (child) {\r\n                        identity.user[tag] = child.value;\r\n                    }\r\n                }\r\n            }\r\n            const groupInfo = node.children.find(c => c.tagName === 'group');\r\n\r\n            if (groupInfo) {\r\n                identity.group = groupInfo.value;\r\n            }\r\n\r\n            return identity;\r\n        };\r\n\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            switch (node.tagName) {\r\n            case 'bot': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n                const { type } = attributes;\r\n\r\n                member.botType = type;\r\n                break;\r\n            }\r\n            case 'nick':\r\n                member.nick = node.value;\r\n                break;\r\n            case 'userId':\r\n                member.id = node.value;\r\n                break;\r\n            case 'stats-id':\r\n                member.statsID = node.value;\r\n                break;\r\n            case 'identity':\r\n                member.identity = extractIdentityInformation(node);\r\n                break;\r\n            case 'stat': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n                const { name } = attributes;\r\n\r\n                if (name === 'version') {\r\n                    member.version = attributes.value;\r\n                }\r\n                break;\r\n            }\r\n            }\r\n        }\r\n\r\n        if (from === this.myroomjid) {\r\n            const newRole\r\n                = member.affiliation === 'owner' ? member.role : 'none';\r\n\r\n            if (this.role !== newRole) {\r\n                this.role = newRole;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\r\n                    this.role);\r\n            }\r\n            if (!this.joined) {\r\n                this.joined = true;\r\n                const now = this.connectionTimes['muc.joined']\r\n                    = window.performance.now();\r\n\r\n                logger.log('(TIME) MUC joined:\\t', now);\r\n\r\n                // set correct initial state of locked\r\n                if (this.password) {\r\n                    this.locked = true;\r\n                }\r\n\r\n                // Re-send presence in case any presence updates were added,\r\n                // but blocked from sending, during the join process.\r\n                // send the presence only if there was a modification after we had synced it\r\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\r\n                    this.sendPresence();\r\n                }\r\n\r\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\r\n\r\n                // Now let's check the disco-info to retrieve the\r\n                // meeting Id if any\r\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\r\n            }\r\n        } else if (jid === undefined) {\r\n            logger.info('Ignoring member with undefined JID');\r\n        } else if (this.members[from] === undefined) {\r\n            // new participant\r\n            this.members[from] = member;\r\n            logger.log('entered', from, member);\r\n            hasStatusUpdate = member.status !== undefined;\r\n            hasVersionUpdate = member.version !== undefined;\r\n            if (member.isFocus) {\r\n                this._initFocus(from, jid);\r\n            } else {\r\n                // identity is being added to member joined, so external\r\n                // services can be notified for that (currently identity is\r\n                // not used inside library)\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_MEMBER_JOINED,\r\n                    from,\r\n                    member.nick,\r\n                    member.role,\r\n                    member.isHiddenDomain,\r\n                    member.statsID,\r\n                    member.status,\r\n                    member.identity,\r\n                    member.botType,\r\n                    member.jid);\r\n\r\n                // we are reporting the status with the join\r\n                // so we do not want a second event about status update\r\n                hasStatusUpdate = false;\r\n            }\r\n        } else {\r\n            // Presence update for existing participant\r\n            // Watch role change:\r\n            const memberOfThis = this.members[from];\r\n\r\n            if (memberOfThis.role !== member.role) {\r\n                memberOfThis.role = member.role;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\r\n            }\r\n\r\n            // affiliation changed\r\n            if (memberOfThis.affiliation !== member.affiliation) {\r\n                memberOfThis.affiliation = member.affiliation;\r\n            }\r\n\r\n            // fire event that botType had changed\r\n            if (memberOfThis.botType !== member.botType) {\r\n                memberOfThis.botType = member.botType;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\r\n                    from,\r\n                    member.botType);\r\n            }\r\n\r\n            if (member.isFocus) {\r\n                // From time to time first few presences of the focus are not\r\n                // containing it's jid. That way we can mark later the focus\r\n                // member instead of not marking it at all and not starting the\r\n                // conference.\r\n                // FIXME: Maybe there is a better way to handle this issue. It\r\n                // seems there is some period of time in prosody that the\r\n                // configuration form is received but not applied. And if any\r\n                // participant joins during that period of time the first\r\n                // presence from the focus won't contain\r\n                // <item jid=\"focus...\" />.\r\n                memberOfThis.isFocus = true;\r\n                this._initFocus(from, jid);\r\n            }\r\n\r\n            // store the new display name\r\n            if (member.displayName) {\r\n                memberOfThis.displayName = member.displayName;\r\n            }\r\n\r\n            // update stored status message to be able to detect changes\r\n            if (memberOfThis.status !== member.status) {\r\n                hasStatusUpdate = true;\r\n                memberOfThis.status = member.status;\r\n            }\r\n\r\n            if (memberOfThis.version !== member.version) {\r\n                hasVersionUpdate = true;\r\n                memberOfThis.version = member.version;\r\n            }\r\n        }\r\n\r\n        // after we had fired member or room joined events, lets fire events\r\n        // for the rest info we got in presence\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            switch (node.tagName) {\r\n            case 'nick':\r\n                if (!member.isFocus) {\r\n                    const displayName\r\n                        = this.xmpp.options.displayJids\r\n                            ? Strophe.getResourceFromJid(from)\r\n                            : member.nick;\r\n\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\r\n                        from,\r\n                        displayName);\r\n                }\r\n                break;\r\n            case 'bridgeNotAvailable':\r\n                if (member.isFocus && !this.noBridgeAvailable) {\r\n                    this.noBridgeAvailable = true;\r\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\r\n                }\r\n                break;\r\n            case 'conference-properties':\r\n                if (member.isFocus) {\r\n                    const properties = {};\r\n\r\n                    for (let j = 0; j < node.children.length; j++) {\r\n                        const { attributes } = node.children[j];\r\n\r\n                        if (attributes && attributes.key) {\r\n                            properties[attributes.key] = attributes.value;\r\n                        }\r\n                    }\r\n\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\r\n                }\r\n                break;\r\n            case 'transcription-status': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n\r\n                const { status } = attributes;\r\n\r\n                if (status && status !== this.transcriptionStatus) {\r\n                    this.transcriptionStatus = status;\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\r\n                        status\r\n                    );\r\n                }\r\n\r\n\r\n                break;\r\n            }\r\n            case 'call-control': {\r\n                const att = node.attributes;\r\n\r\n                if (!att) {\r\n                    break;\r\n                }\r\n                this.phoneNumber = att.phone || null;\r\n                this.phonePin = att.pin || null;\r\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\r\n                break;\r\n            }\r\n            default:\r\n                this.processNode(node, from);\r\n            }\r\n        }\r\n\r\n        // Trigger status message update if necessary\r\n        if (hasStatusUpdate) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.PRESENCE_STATUS,\r\n                from,\r\n                member.status);\r\n        }\r\n\r\n        if (hasVersionUpdate) {\r\n            logger.info(`Received version for ${jid}: ${member.version}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize some properties when the focus participant is verified.\r\n     * @param from jid of the focus\r\n     * @param mucJid the jid of the focus in the muc\r\n     */\r\n    _initFocus(from, mucJid) {\r\n        this.focusMucJid = from;\r\n\r\n        logger.info(`Ignore focus: ${from}, real JID: ${mucJid}`);\r\n        this.xmpp.caps.getFeatures(mucJid, 15000).then(features => {\r\n            this.focusFeatures = features;\r\n            logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\r\n        }, error => {\r\n            logger.error('Failed to discover Jicofo features', error && error.message);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the special listener to be used for \"command\"s whose name starts\r\n     * with \"jitsi_participant_\".\r\n     */\r\n    setParticipantPropertyListener(listener) {\r\n        this.participantPropertyListener = listener;\r\n    }\r\n\r\n    /**\r\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\r\n     * @returns {boolean}\r\n     */\r\n    supportsRestartByTerminate() {\r\n        return this.focusFeatures\r\n            ? this.focusFeatures.has('https://jitsi.org/meet/jicofo/terminate-restart')\r\n            : false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param node\r\n     * @param from\r\n     */\r\n    processNode(node, from) {\r\n        // make sure we catch all errors coming from any handler\r\n        // otherwise we can remove the presence handler from strophe\r\n        try {\r\n            let tagHandlers = this.presHandlers[node.tagName];\r\n\r\n            if (node.tagName.startsWith('jitsi_participant_')) {\r\n                tagHandlers = [ this.participantPropertyListener ];\r\n            }\r\n\r\n            if (tagHandlers) {\r\n                tagHandlers.forEach(handler => {\r\n                    handler(node, Strophe.getResourceFromJid(from), from);\r\n                });\r\n            }\r\n        } catch (e) {\r\n            GlobalOnErrorHandler.callErrorHandler(e);\r\n            logger.error(`Error processing:${node.tagName} node.`, e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send text message to the other participants in the conference\r\n     * @param message\r\n     * @param elementName\r\n     * @param nickname\r\n     */\r\n    sendMessage(message, elementName, nickname) {\r\n        const msg = $msg({ to: this.roomjid,\r\n            type: 'groupchat' });\r\n\r\n        // We are adding the message in a packet extension. If this element\r\n        // is different from 'body', we add a custom namespace.\r\n        // e.g. for 'json-message' extension of message stanza.\r\n        if (elementName === 'body') {\r\n            msg.c(elementName, message).up();\r\n        } else {\r\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\r\n                .up();\r\n        }\r\n        if (nickname) {\r\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\r\n                .t(nickname)\r\n                .up()\r\n                .up();\r\n        }\r\n        this.connection.send(msg);\r\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Send private text message to another participant of the conference\r\n     * @param id id/muc resource of the receiver\r\n     * @param message\r\n     * @param elementName\r\n     * @param nickname\r\n     */\r\n    sendPrivateMessage(id, message, elementName, nickname) {\r\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\r\n            type: 'chat' });\r\n\r\n        // We are adding the message in packet. If this element is different\r\n        // from 'body', we add our custom namespace for the same.\r\n        // e.g. for 'json-message' message extension.\r\n        if (elementName === 'body') {\r\n            msg.c(elementName, message).up();\r\n        } else {\r\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\r\n                .up();\r\n        }\r\n        if (nickname) {\r\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\r\n                .t(nickname)\r\n                .up()\r\n                .up();\r\n        }\r\n\r\n        this.connection.send(msg);\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\r\n    }\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param subject\r\n     */\r\n    setSubject(subject) {\r\n        const msg = $msg({ to: this.roomjid,\r\n            type: 'groupchat' });\r\n\r\n        msg.c('subject', subject);\r\n        this.connection.send(msg);\r\n    }\r\n\r\n    /**\r\n     * Called when participant leaves.\r\n     * @param jid the jid of the participant that leaves\r\n     * @param skipEvents optional params to skip any events, including check\r\n     * whether this is the focus that left\r\n     */\r\n    onParticipantLeft(jid, skipEvents) {\r\n        delete this.lastPresences[jid];\r\n\r\n        if (skipEvents) {\r\n            return;\r\n        }\r\n\r\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\r\n\r\n        this.moderator.onMucMemberLeft(jid);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     * @param from\r\n     */\r\n    onPresenceUnavailable(pres, from) {\r\n        // ignore presence\r\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\r\n            return true;\r\n        }\r\n\r\n        // room destroyed ?\r\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\r\n\r\n        if (destroySelect.length) {\r\n            let reason;\r\n            const reasonSelect\r\n                = $(pres).find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n                        + '>destroy>reason');\r\n\r\n            if (reasonSelect.length) {\r\n                reason = reasonSelect.text();\r\n            }\r\n\r\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\r\n            this.connection.emuc.doLeave(this.roomjid);\r\n\r\n            return true;\r\n        }\r\n\r\n        // Status code 110 indicates that this notification is \"self-presence\".\r\n        const isSelfPresence\r\n            = $(pres)\r\n                .find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\r\n                        + 'status[code=\"110\"]')\r\n                .length;\r\n        const isKick\r\n            = $(pres)\r\n                .find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n                        + '>status[code=\"307\"]')\r\n                .length;\r\n        const membersKeys = Object.keys(this.members);\r\n\r\n        if (isKick) {\r\n            const actorSelect\r\n                = $(pres)\r\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\r\n\r\n            let actorNick;\r\n\r\n            if (actorSelect.length) {\r\n                actorNick = actorSelect.attr('nick');\r\n            }\r\n\r\n            // we first fire the kicked so we can show the participant\r\n            // who kicked, before notifying that participant left\r\n            // we fire kicked for us and for any participant kicked\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.KICKED,\r\n                isSelfPresence,\r\n                actorNick,\r\n                Strophe.getResourceFromJid(from));\r\n        }\r\n\r\n        if (isSelfPresence) {\r\n            // If the status code is 110 this means we're leaving and we would\r\n            // like to remove everyone else from our view, so we trigger the\r\n            // event.\r\n            membersKeys.forEach(jid => {\r\n                const member = this.members[jid];\r\n\r\n                delete this.members[jid];\r\n                this.onParticipantLeft(jid, member.isFocus);\r\n            });\r\n            this.connection.emuc.doLeave(this.roomjid);\r\n\r\n            // we fire muc_left only if this is not a kick,\r\n            // kick has both statuses 110 and 307.\r\n            if (!isKick) {\r\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\r\n            }\r\n        } else {\r\n            delete this.members[from];\r\n            this.onParticipantLeft(from, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param msg\r\n     * @param from\r\n     */\r\n    onMessage(msg, from) {\r\n        const nick\r\n            = $(msg).find('>nick[xmlns=\"http://jabber.org/protocol/nick\"]')\r\n                .text()\r\n            || Strophe.getResourceFromJid(from);\r\n\r\n        const type = msg.getAttribute('type');\r\n\r\n        if (type === 'error') {\r\n            const errorMsg = $(msg).find('>error>text').text();\r\n\r\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\r\n\r\n            return true;\r\n        }\r\n\r\n        const txt = $(msg).find('>body').text();\r\n        const subject = $(msg).find('>subject');\r\n\r\n        if (subject.length) {\r\n            const subjectText = subject.text();\r\n\r\n            if (subjectText || subjectText === '') {\r\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\r\n\t\t\t\t//Bizwell. by.jhhan\r\n\t\t\t\ttry {\r\n\t\t\t\t\tdocument.title = `${subjectText} | ${interfaceConfig.APP_NAME}`;\r\n\t\t\t\t} catch (e) {}\r\n                logger.log(`Subject is changed to ${subjectText}`);\r\n            }\r\n        }\r\n\r\n        // xep-0203 delay\r\n        let stamp = $(msg).find('>delay').attr('stamp');\r\n\r\n        if (!stamp) {\r\n            // or xep-0091 delay, UTC timestamp\r\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\r\n\r\n            if (stamp) {\r\n                // the format is CCYYMMDDThh:mm:ss\r\n                const dateParts\r\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\r\n\r\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\r\n            }\r\n        }\r\n\r\n        if (from === this.roomjid) {\r\n            let invite;\r\n\r\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\r\n                this.discoRoomInfo();\r\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\r\n                        && invite.length) {\r\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\r\n                let password;\r\n\r\n                if (passwordSelect && passwordSelect.length) {\r\n                    password = passwordSelect.text();\r\n                }\r\n\r\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\r\n                    from, invite.attr('from'), txt, password);\r\n            }\r\n        }\r\n\r\n        const jsonMessage = $(msg).find('>json-message').text();\r\n\r\n        if (jsonMessage) {\r\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\r\n\r\n            // We emit this event if the message is a valid json, and is not\r\n            // delivered after a delay, i.e. stamp is undefined.\r\n            // e.g. - subtitles should not be displayed if delayed.\r\n            if (parsedJson && stamp === undefined) {\r\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\r\n                    from, parsedJson);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (txt) {\r\n            if (type === 'chat') {\r\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\r\n                        from, nick, txt, this.myroomjid, stamp);\r\n            } else if (type === 'groupchat') {\r\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\r\n                        from, nick, txt, this.myroomjid, stamp);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     * @param from\r\n     */\r\n    onPresenceError(pres, from) {\r\n        if ($(pres)\r\n                .find(\r\n                    '>error[type=\"auth\"]'\r\n                        + '>not-authorized['\r\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\r\n                .length) {\r\n            logger.log('on password required', from);\r\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\r\n        } else if ($(pres)\r\n                .find(\r\n                    '>error[type=\"cancel\"]'\r\n                        + '>not-allowed['\r\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\r\n                .length) {\r\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\r\n\r\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\r\n                // enter the room by replying with 'not-authorized'. This would\r\n                // result in reconnection from authorized domain.\r\n                // We're either missing Jicofo/Prosody config for anonymous\r\n                // domains or something is wrong.\r\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\r\n\r\n            } else {\r\n                logger.warn('onPresError ', pres);\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\r\n            }\r\n        } else if ($(pres).find('>error>service-unavailable').length) {\r\n            logger.warn('Maximum users limit for the room has been reached',\r\n                pres);\r\n            //Bizwell. error message 넘김. by.jhhan\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR, $(pres).find('>error>text').text());\r\n        } else if ($(pres)\r\n            .find(\r\n                '>error[type=\"auth\"]'\r\n                + '>registration-required['\r\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\r\n\r\n            // let's extract the lobby jid from the custom field\r\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\r\n            let lobbyRoomJid;\r\n\r\n            if (lobbyRoomNode.length) {\r\n                lobbyRoomJid = lobbyRoomNode.text();\r\n            }\r\n\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\r\n        } else {\r\n            logger.warn('onPresError ', pres);\r\n            //Bizwell. error message 넘김. by.jhhan\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR, $(pres).find('>error>text').text());\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param affiliation\r\n     */\r\n    setAffiliation(jid, affiliation) {\r\n        const grantIQ = $iq({\r\n            to: this.roomjid,\r\n            type: 'set'\r\n        })\r\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n        .c('item', {\r\n            affiliation,\r\n            nick: Strophe.getResourceFromJid(jid)\r\n        })\r\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\r\n        .up().up().up();\r\n\r\n        this.connection.sendIQ(\r\n            grantIQ,\r\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\r\n            error => logger.log('Set affiliation of participant error: ', error));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     */\r\n    kick(jid) {\r\n        const kickIQ = $iq({ to: this.roomjid,\r\n            type: 'set' })\r\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\r\n                role: 'none' })\r\n            .c('reason').t('You have been kicked.').up().up().up();\r\n\r\n        this.connection.sendIQ(\r\n            kickIQ,\r\n            result => logger.log('Kick participant with jid: ', jid, result),\r\n            error => logger.log('Kick participant error: ', error));\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @param onNotSupported\r\n     */\r\n    lockRoom(key, onSuccess, onError, onNotSupported) {\r\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\r\n        this.connection.sendIQ(\r\n            $iq({\r\n                to: this.roomjid,\r\n                type: 'get'\r\n            })\r\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\r\n            res => {\r\n                if ($(res)\r\n                        .find(\r\n                            '>query>x[xmlns=\"jabber:x:data\"]'\r\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\r\n                        .length) {\r\n                    const formsubmit\r\n                        = $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set'\r\n                        })\r\n                            .c('query', {\r\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\r\n                            });\r\n\r\n                    formsubmit.c('x', {\r\n                        xmlns: 'jabber:x:data',\r\n                        type: 'submit'\r\n                    });\r\n                    formsubmit\r\n                        .c('field', { 'var': 'FORM_TYPE' })\r\n                        .c('value')\r\n                        .t('http://jabber.org/protocol/muc#roomconfig')\r\n                        .up()\r\n                        .up();\r\n                    formsubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\r\n                        .c('value')\r\n                        .t(key)\r\n                        .up()\r\n                        .up();\r\n                    formsubmit\r\n                        .c('field',\r\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\r\n                        .c('value')\r\n                        .t(key === null || key.length === 0 ? '0' : '1')\r\n                        .up()\r\n                        .up();\r\n\r\n                    // if members only enabled\r\n                    if (this.membersOnlyEnabled) {\r\n                        formsubmit\r\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\r\n                            .c('value')\r\n                            .t('true')\r\n                            .up()\r\n                            .up();\r\n                    }\r\n\r\n                    // Fixes a bug in prosody 0.9.+\r\n                    // https://prosody.im/issues/issue/373\r\n                    formsubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\r\n                        .c('value')\r\n                        .t('anyone')\r\n                        .up()\r\n                        .up();\r\n\r\n                    this.connection.sendIQ(formsubmit, onSuccess, onError);\r\n                } else {\r\n                    onNotSupported();\r\n                }\r\n            },\r\n            onError);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Turns off or on the members only config for the main room.\r\n     *\r\n     * @param {boolean} enabled - Whether to turn it on or off.\r\n     * @param onSuccess - optional callback.\r\n     * @param onError - optional callback.\r\n     */\r\n    setMembersOnly(enabled, onSuccess, onError) {\r\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\r\n            // first grant membership to all that are in the room\r\n            // currently there is a bug in prosody where it handles only the first item\r\n            // that's why we will send iq per member\r\n            Object.values(this.members).forEach(m => {\r\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\r\n                    this.xmpp.connection.sendIQ(\r\n                        $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set' })\r\n                        .c('query', {\r\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n                        .c('item', {\r\n                            'affiliation': 'member',\r\n                            'jid': m.jid\r\n                        }).up().up());\r\n                }\r\n            });\r\n        }\r\n\r\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\r\n\r\n        this.xmpp.connection.sendIQ(\r\n            $iq({\r\n                to: this.roomjid,\r\n                type: 'get'\r\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\r\n            res => {\r\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\r\n                    const formToSubmit\r\n                        = $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set'\r\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\r\n\r\n                    formToSubmit.c('x', {\r\n                        xmlns: 'jabber:x:data',\r\n                        type: 'submit'\r\n                    });\r\n                    formToSubmit\r\n                        .c('field', { 'var': 'FORM_TYPE' })\r\n                        .c('value')\r\n                        .t('http://jabber.org/protocol/muc#roomconfig')\r\n                        .up()\r\n                        .up();\r\n                    formToSubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\r\n                        .c('value')\r\n                        .t(enabled ? 'true' : 'false')\r\n                        .up()\r\n                        .up();\r\n\r\n                    // if room is locked from other participant or we are locking it\r\n                    if (this.locked) {\r\n                        formToSubmit\r\n                            .c('field',\r\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\r\n                            .c('value')\r\n                            .t('1')\r\n                            .up()\r\n                            .up();\r\n                    }\r\n\r\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\r\n                } else {\r\n                    errorCallback(new Error('Setting members only room not supported!'));\r\n                }\r\n            },\r\n            errorCallback);\r\n    }\r\n\r\n    /**\r\n     * Adds the key to the presence map, overriding any previous value.\r\n     * @param key\r\n     * @param values\r\n     */\r\n    addToPresence(key, values) {\r\n        values.tagName = key;\r\n        this.removeFromPresence(key);\r\n        this.presMap.nodes.push(values);\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    /**\r\n     * Retrieves a value from the presence map.\r\n     *\r\n     * @param {string} key - The key to find the value for.\r\n     * @returns {Object?}\r\n     */\r\n    getFromPresence(key) {\r\n        return this.presMap.nodes.find(node => key === node.tagName);\r\n    }\r\n\r\n    /**\r\n     * Removes a key from the presence map.\r\n     * @param key\r\n     */\r\n    removeFromPresence(key) {\r\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\r\n\r\n        this.presMap.nodes = nodes;\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param name\r\n     * @param handler\r\n     */\r\n    addPresenceListener(name, handler) {\r\n        if (typeof handler !== 'function') {\r\n            throw new Error('\"handler\" is not a function');\r\n        }\r\n        let tagHandlers = this.presHandlers[name];\r\n\r\n        if (!tagHandlers) {\r\n            this.presHandlers[name] = tagHandlers = [];\r\n        }\r\n        if (tagHandlers.indexOf(handler) === -1) {\r\n            tagHandlers.push(handler);\r\n        } else {\r\n            logger.warn(\r\n                `Trying to add the same handler more than once for: ${name}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param name\r\n     * @param handler\r\n     */\r\n    removePresenceListener(name, handler) {\r\n        const tagHandlers = this.presHandlers[name];\r\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\r\n\r\n        // eslint-disable-next-line no-negated-condition\r\n        if (handlerIdx !== -1) {\r\n            tagHandlers.splice(handlerIdx, 1);\r\n        } else {\r\n            logger.warn(`Handler for: ${name} was not registered`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\r\n     * focus.\r\n     * @param mucJid the full MUC address of the user to be checked.\r\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\r\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\r\n     * the MUC then <tt>null</tt> is returned.\r\n     */\r\n    isFocus(mucJid) {\r\n        const member = this.members[mucJid];\r\n\r\n        if (member) {\r\n            return member.isFocus;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    isModerator() {\r\n        return this.role === 'moderator';\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param peerJid\r\n     */\r\n    getMemberRole(peerJid) {\r\n        if (this.members[peerJid]) {\r\n            return this.members[peerJid].role;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     * @param callback\r\n     */\r\n    setVideoMute(mute, callback) {\r\n        this.sendVideoInfoPresence(mute);\r\n        if (callback) {\r\n            callback(mute);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     * @param callback\r\n     */\r\n    setAudioMute(mute, callback) {\r\n        return this.sendAudioInfoPresence(mute, callback);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    addAudioInfoToPresence(mute) {\r\n        this.addToPresence(\r\n            'audiomuted',\r\n            {\r\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/audio' },\r\n                value: mute.toString()\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     * @param callback\r\n     */\r\n    sendAudioInfoPresence(mute, callback) {\r\n        this.addAudioInfoToPresence(mute);\r\n\r\n        // FIXME resend presence on CONNECTED\r\n        this.sendPresence();\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    addVideoInfoToPresence(mute) {\r\n        this.addToPresence(\r\n            'videomuted',\r\n            {\r\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/video' },\r\n                value: mute.toString()\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    sendVideoInfoPresence(mute) {\r\n        this.addVideoInfoToPresence(mute);\r\n        this.sendPresence();\r\n    }\r\n\r\n    /**\r\n     * Obtains the info about given media advertised in the MUC presence of\r\n     * the participant identified by the given endpoint JID.\r\n     * @param {string} endpointId the endpoint ID mapped to the participant\r\n     * which corresponds to MUC nickname.\r\n     * @param {MediaType} mediaType the type of the media for which presence\r\n     * info will be obtained.\r\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\r\n     * info or <tt>null</tt> either if there is no presence available or if\r\n     * the media type given is invalid.\r\n     */\r\n    getMediaPresenceInfo(endpointId, mediaType) {\r\n        // Will figure out current muted status by looking up owner's presence\r\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\r\n\r\n        if (!pres) {\r\n            // No presence available\r\n            return null;\r\n        }\r\n        const data = {\r\n            muted: false, // unmuted by default\r\n            videoType: undefined // no video type by default\r\n        };\r\n        let mutedNode = null;\r\n\r\n        if (mediaType === MediaType.AUDIO) {\r\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\r\n        } else if (mediaType === MediaType.VIDEO) {\r\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\r\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\r\n\r\n            if (videoTypeNode.length > 0) {\r\n                data.videoType = videoTypeNode[0].value;\r\n            }\r\n        } else {\r\n            logger.error(`Unsupported media type: ${mediaType}`);\r\n\r\n            return null;\r\n        }\r\n\r\n        data.muted = mutedNode.length > 0 && mutedNode[0].value === 'true';\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the SIP calls are supported and false otherwise\r\n     */\r\n    isSIPCallingSupported() {\r\n        if (this.moderator) {\r\n            return this.moderator.isSipGatewayEnabled();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Dials a number.\r\n     * @param number the number\r\n     */\r\n    dial(number) {\r\n        return this.connection.rayo.dial(number, 'fromnumber',\r\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\r\n            this.focusMucJid);\r\n    }\r\n\r\n    /**\r\n     * Hangup an existing call\r\n     */\r\n    hangup() {\r\n        return this.connection.rayo.hangup();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Lobby}\r\n     */\r\n    getLobby() {\r\n        return this.lobby;\r\n    }\r\n\r\n    /**\r\n     * Returns the phone number for joining the conference.\r\n     */\r\n    getPhoneNumber() {\r\n        return this.phoneNumber;\r\n    }\r\n\r\n    /**\r\n     * Returns the pin for joining the conference with phone.\r\n     */\r\n    getPhonePin() {\r\n        return this.phonePin;\r\n    }\r\n\r\n    /**\r\n     * Returns the meeting unique ID if any came from backend.\r\n     *\r\n     * @returns {string} - The meeting ID.\r\n     */\r\n    getMeetingId() {\r\n        return this.meetingId;\r\n    }\r\n\r\n    /**\r\n     * Mutes remote participant.\r\n     * @param jid of the participant\r\n     * @param mute\r\n     */\r\n    muteParticipant(jid, mute) {\r\n        logger.info('set mute', mute);\r\n        const iqToFocus = $iq(\r\n            { to: this.focusMucJid,\r\n                type: 'set' })\r\n            .c('mute', {\r\n                xmlns: 'http://jitsi.org/jitmeet/audio',\r\n                jid\r\n            })\r\n            .t(mute.toString())\r\n            .up();\r\n\r\n        this.connection.sendIQ(\r\n            iqToFocus,\r\n            result => logger.log('set mute', result),\r\n            error => logger.log('set mute error', error));\r\n    }\r\n\r\n    /**\r\n     * TODO: Document\r\n     * @param iq\r\n     */\r\n    onMute(iq) {\r\n        const from = iq.getAttribute('from');\r\n\r\n        if (from !== this.focusMucJid) {\r\n            logger.warn('Ignored mute from non focus peer');\r\n\r\n            return;\r\n        }\r\n        const mute = $(iq).find('mute');\r\n\r\n        if (mute.length && mute.text() === 'true') {\r\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\r\n        } else {\r\n            // XXX Why do we support anything but muting? Why do we encode the\r\n            // value in the text of the element? Why do we use a separate XML\r\n            // namespace?\r\n            logger.warn('Ignoring a mute request which does not explicitly '\r\n                + 'specify a positive mute command.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clean any listeners or resources, executed on leaving.\r\n     */\r\n    clean() {\r\n        this._removeConnListeners.forEach(remove => remove());\r\n        this._removeConnListeners = [];\r\n\r\n        this.joined = false;\r\n    }\r\n\r\n    /**\r\n     * Leaves the room. Closes the jingle session.\r\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\r\n     * less than 5s after sending presence unavailable. Otherwise the promise is\r\n     * rejected.\r\n     */\r\n    leave() {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\r\n            const eventEmitter = this.eventEmitter;\r\n\r\n            this.clean();\r\n\r\n            /**\r\n             *\r\n             * @param doReject\r\n             */\r\n            function onMucLeft(doReject = false) {\r\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\r\n                clearTimeout(timeout);\r\n                if (doReject) {\r\n                    // the timeout expired\r\n                    reject(new Error('The timeout for the confirmation about '\r\n                        + 'leaving the room expired.'));\r\n                } else {\r\n                    resolve();\r\n                }\r\n            }\r\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\r\n            this.doLeave();\r\n        });\r\n    }\r\n}\r\n\r\n/* eslint-enable newline-per-chained-call */\r\n","/**\r\n * The transciption is on.\r\n *\r\n * @type {String}\r\n */\r\nexport const ON = 'on';\r\n\r\n/**\r\n * The transciption is off.\r\n *\r\n * @type {String}\r\n */\r\nexport const OFF = 'off';\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport { MediaType } from '../../service/RTC/MediaType';\r\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\r\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\r\nimport { VideoType } from '../../service/RTC/VideoType';\r\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\n\r\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\r\n\r\n/**\r\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\r\n * the data from the MUC presence.\r\n */\r\nexport default class SignalingLayerImpl extends SignalingLayer {\r\n    /**\r\n     * Creates new instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * A map that stores SSRCs of remote streams. And is used only locally\r\n         * We store the mapping when jingle is received, and later is used\r\n         * onaddstream webrtc event where we have only the ssrc\r\n         * FIXME: This map got filled and never cleaned and can grow during long\r\n         * conference\r\n         * @type {Map<number, string>} maps SSRC number to jid\r\n         */\r\n        this.ssrcOwners = new Map();\r\n\r\n        /**\r\n         *\r\n         * @type {ChatRoom|null}\r\n         */\r\n        this.chatRoom = null;\r\n\r\n        /**\r\n         * @type {Map<SourceName, SourceInfo>}\r\n         * @private\r\n         */\r\n        this._localSourceState = { };\r\n\r\n        /**\r\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\r\n         * @private\r\n         */\r\n        this._remoteSourceState = { };\r\n\r\n        /**\r\n         * A map that stores the source name of a track identified by it's ssrc.\r\n         * We store the mapping when jingle is received, and later is used\r\n         * onaddstream webrtc event where we have only the ssrc\r\n         * FIXME: This map got filled and never cleaned and can grow during long\r\n         * conference\r\n         * @type {Map<number, string>} maps SSRC number to source name\r\n         */\r\n        this._sourceNames = new Map();\r\n    }\r\n\r\n    /**\r\n     * Adds <SourceInfo> element to the local presence.\r\n     *\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _addLocalSourceInfoToPresence() {\r\n        if (this.chatRoom) {\r\n            return this.chatRoom.addOrReplaceInPresence(\r\n                SOURCE_INFO_PRESENCE_ELEMENT,\r\n                { value: JSON.stringify(this._localSourceState) });\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\r\n     * is used by this endpoint.\r\n     *\r\n     * @param {EndpointId} endpointId\r\n     * @returns {boolean}\r\n     */\r\n    _doesEndpointSendNewSourceInfo(endpointId) {\r\n        const presence = this.chatRoom?.getLastPresence(endpointId);\r\n\r\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\r\n    }\r\n\r\n    /**\r\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\r\n     * @param {ChatRoom} room\r\n     */\r\n    setChatRoom(room) {\r\n        const oldChatRoom = this.chatRoom;\r\n\r\n        this.chatRoom = room;\r\n        if (oldChatRoom) {\r\n            oldChatRoom.removePresenceListener(\r\n                'audiomuted', this._audioMuteHandler);\r\n            oldChatRoom.removePresenceListener(\r\n                'videomuted', this._videoMuteHandler);\r\n            oldChatRoom.removePresenceListener(\r\n                'videoType', this._videoTypeHandler);\r\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                this._sourceInfoHandler\r\n                    && oldChatRoom.removePresenceListener(\r\n                        SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\r\n                this._memberLeftHandler\r\n                    && oldChatRoom.removeEventListener(\r\n                        XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\r\n            }\r\n        }\r\n        if (room) {\r\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                this._bindChatRoomEventHandlers(room);\r\n                this._addLocalSourceInfoToPresence();\r\n            } else {\r\n                // TODO the logic below has been duplicated in _bindChatRoomEventHandlers, clean this up once\r\n                //  the new impl has been tested well enough\r\n                // SignalingEvents\r\n                this._audioMuteHandler = (node, from) => {\r\n                    this.eventEmitter.emit(\r\n                        SignalingEvents.PEER_MUTED_CHANGED,\r\n                        from, MediaType.AUDIO, node.value === 'true');\r\n                };\r\n                room.addPresenceListener('audiomuted', this._audioMuteHandler);\r\n\r\n                this._videoMuteHandler = (node, from) => {\r\n                    this.eventEmitter.emit(\r\n                        SignalingEvents.PEER_MUTED_CHANGED,\r\n                        from, MediaType.VIDEO, node.value === 'true');\r\n                };\r\n                room.addPresenceListener('videomuted', this._videoMuteHandler);\r\n\r\n                this._videoTypeHandler = (node, from) => {\r\n                    this.eventEmitter.emit(\r\n                        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\r\n                        from, node.value);\r\n                };\r\n                room.addPresenceListener('videoType', this._videoTypeHandler);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds event listeners to the chat room instance.\r\n     * @param {ChatRoom} room\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _bindChatRoomEventHandlers(room) {\r\n        const emitAudioMutedEvent = (endpointId, muted) => {\r\n            this.eventEmitter.emit(\r\n                SignalingEvents.PEER_MUTED_CHANGED,\r\n                endpointId,\r\n                MediaType.AUDIO,\r\n                muted);\r\n        };\r\n        const emitVideoMutedEvent = (endpointId, muted) => {\r\n            this.eventEmitter.emit(\r\n                SignalingEvents.PEER_MUTED_CHANGED,\r\n                endpointId,\r\n                MediaType.VIDEO,\r\n                muted);\r\n        };\r\n\r\n        // SignalingEvents\r\n        this._audioMuteHandler = (node, from) => {\r\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\r\n                emitAudioMutedEvent(from, node.value === 'true');\r\n            }\r\n        };\r\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\r\n\r\n        this._videoMuteHandler = (node, from) => {\r\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\r\n                emitVideoMutedEvent(from, node.value === 'true');\r\n            }\r\n        };\r\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\r\n\r\n        const emitVideoTypeEvent = (endpointId, videoType) => {\r\n            this.eventEmitter.emit(\r\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\r\n                endpointId, videoType);\r\n        };\r\n\r\n        this._videoTypeHandler = (node, from) => {\r\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\r\n                emitVideoTypeEvent(from, node.value);\r\n            }\r\n        };\r\n\r\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\r\n            room.addPresenceListener('videoType', this._videoTypeHandler);\r\n        }\r\n\r\n        this._sourceInfoHandler = (node, mucNick) => {\r\n            const endpointId = mucNick;\r\n            const { value } = node;\r\n            const sourceInfoJSON = JSON.parse(value);\r\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\r\n            const endpointSourceState\r\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\r\n\r\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\r\n                const mediaType = getMediaTypeFromSourceName(sourceName);\r\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\r\n                const oldSourceState = endpointSourceState[sourceName]\r\n                    || (endpointSourceState[sourceName] = { sourceName });\r\n\r\n                if (oldSourceState.muted !== newMutedState) {\r\n                    oldSourceState.muted = newMutedState;\r\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\r\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_MUTED_CHANGED, sourceName, newMutedState);\r\n                    }\r\n                }\r\n\r\n                // Assume a default videoType of 'camera' for video sources.\r\n                const newVideoType = mediaType === MediaType.VIDEO\r\n                    ? (sourceInfoJSON[sourceName].videoType ? sourceInfoJSON[sourceName].videoType : VideoType.CAMERA)\r\n                    : undefined;\r\n\r\n                if (oldSourceState.videoType !== newVideoType) {\r\n                    oldSourceState.videoType = newVideoType;\r\n\r\n                    // Since having a mix of eps that do/don't support multi-stream in the same call is supported, emit\r\n                    // SOURCE_VIDEO_TYPE_CHANGED event when the remote source changes videoType.\r\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\r\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED, sourceName, newVideoType);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Cleanup removed source names\r\n            const newSourceNames = Object.keys(sourceInfoJSON);\r\n\r\n            for (const sourceName of Object.keys(endpointSourceState)) {\r\n                if (newSourceNames.indexOf(sourceName) === -1) {\r\n                    delete endpointSourceState[sourceName];\r\n                }\r\n            }\r\n        };\r\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\r\n\r\n        // Cleanup when participant leaves\r\n        this._memberLeftHandler = jid => {\r\n            const endpointId = Strophe.getResourceFromJid(jid);\r\n\r\n            delete this._remoteSourceState[endpointId];\r\n\r\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                for (const [ key, value ] of this.ssrcOwners.entries()) {\r\n                    if (value === endpointId) {\r\n                        delete this._sourceNames[key];\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\r\n    }\r\n\r\n    /**\r\n     * Finds the first source of given media type for the given endpoint.\r\n     * @param endpointId\r\n     * @param mediaType\r\n     * @returns {SourceInfo|null}\r\n     * @private\r\n     */\r\n    _findEndpointSourceInfoForMediaType(endpointId, mediaType) {\r\n        const remoteSourceState = this._remoteSourceState[endpointId];\r\n\r\n        if (!remoteSourceState) {\r\n            return null;\r\n        }\r\n\r\n        for (const sourceInfo of Object.values(remoteSourceState)) {\r\n            const _mediaType = getMediaTypeFromSourceName(sourceInfo.sourceName);\r\n\r\n            if (_mediaType === mediaType) {\r\n                return sourceInfo;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getPeerMediaInfo(owner, mediaType, sourceName) {\r\n        const legacyGetPeerMediaInfo = () => {\r\n            if (this.chatRoom) {\r\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\r\n            }\r\n            logger.error('Requested peer media info, before room was set');\r\n        };\r\n        const lastPresence = this.chatRoom.getLastPresence(owner);\r\n\r\n        if (!lastPresence) {\r\n            throw new Error(`getPeerMediaInfo - no presence stored for: ${owner}`);\r\n        }\r\n\r\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n            if (!this._doesEndpointSendNewSourceInfo(owner)) {\r\n                return legacyGetPeerMediaInfo();\r\n            }\r\n\r\n            if (sourceName) {\r\n                return this.getPeerSourceInfo(owner, sourceName);\r\n            }\r\n\r\n            /**\r\n             * @type {PeerMediaInfo}\r\n             */\r\n            const mediaInfo = {};\r\n            const endpointMediaSource = this._findEndpointSourceInfoForMediaType(owner, mediaType);\r\n\r\n            // The defaults are provided only, because getPeerMediaInfo is a legacy method. This will be eventually\r\n            // changed into a getSourceInfo method which returns undefined if there's no source. Also there will be\r\n            // no mediaType argument there.\r\n            if (mediaType === MediaType.AUDIO) {\r\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\r\n            } else if (mediaType === MediaType.VIDEO) {\r\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\r\n                mediaInfo.videoType = endpointMediaSource ? endpointMediaSource.videoType : undefined;\r\n\r\n                const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\r\n\r\n                if (codecTypeNode.length > 0) {\r\n                    mediaInfo.codecType = codecTypeNode[0].value;\r\n                }\r\n            } else {\r\n                throw new Error(`Unsupported media type: ${mediaType}`);\r\n            }\r\n\r\n            return mediaInfo;\r\n        }\r\n\r\n        return legacyGetPeerMediaInfo();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getPeerSourceInfo(owner, sourceName) {\r\n        const mediaInfo = {\r\n            muted: true, // muted by default\r\n            videoType: VideoType.CAMERA // 'camera' by default\r\n        };\r\n\r\n        return this._remoteSourceState[owner]\r\n            ? (this._remoteSourceState[owner][sourceName] ? this._remoteSourceState[owner][sourceName] : mediaInfo)\r\n            : undefined;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getSSRCOwner(ssrc) {\r\n        return this.ssrcOwners.get(ssrc);\r\n    }\r\n\r\n    /**\r\n     * Set an SSRC owner.\r\n     * @param {number} ssrc an SSRC to be owned\r\n     * @param {string} endpointId owner's ID (MUC nickname)\r\n     * @throws TypeError if <tt>ssrc</tt> is not a number\r\n     */\r\n    setSSRCOwner(ssrc, endpointId) {\r\n        if (typeof ssrc !== 'number') {\r\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\r\n        }\r\n\r\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\r\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\r\n        const existingOwner = this.ssrcOwners.get(ssrc);\r\n\r\n        if (existingOwner && existingOwner !== endpointId) {\r\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\r\n        }\r\n        this.ssrcOwners.set(ssrc, endpointId);\r\n    }\r\n\r\n    /**\r\n     * Adjusts muted status of given track.\r\n     *\r\n     * @param {SourceName} sourceName - the name of the track's source.\r\n     * @param {boolean} muted - the new muted status.\r\n     * @returns {boolean}\r\n     */\r\n    setTrackMuteStatus(sourceName, muted) {\r\n        if (!this._localSourceState[sourceName]) {\r\n            this._localSourceState[sourceName] = {};\r\n        }\r\n\r\n        this._localSourceState[sourceName].muted = muted;\r\n\r\n        if (this.chatRoom) {\r\n            // FIXME This only adjusts the presence, but doesn't actually send it. Here we temporarily rely on\r\n            // the legacy signaling part to send the presence. Remember to add \"send presence\" here when the legacy\r\n            // signaling is removed.\r\n            return this._addLocalSourceInfoToPresence();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sets track's video type.\r\n     * @param {SourceName} sourceName - the track's source name.\r\n     * @param {VideoType} videoType - the new video type.\r\n     * @returns {boolean}\r\n     */\r\n    setTrackVideoType(sourceName, videoType) {\r\n        if (!this._localSourceState[sourceName]) {\r\n            this._localSourceState[sourceName] = {};\r\n        }\r\n\r\n        if (this._localSourceState[sourceName].videoType !== videoType) {\r\n            // Include only if not a camera (default)\r\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\r\n\r\n            // NOTE this doesn't send the actual presence, because is called from the same place where the legacy video\r\n            // type is emitted which does the actual sending. A send presence statement needs to be added when\r\n            // the legacy part is removed.\r\n            return this._addLocalSourceInfoToPresence();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getTrackSourceName(ssrc) {\r\n        return this._sourceNames.get(ssrc);\r\n    }\r\n\r\n    /**\r\n     * Saves the source name for a track identified by it's ssrc.\r\n     * @param {number} ssrc the ssrc of the target track.\r\n     * @param {SourceName} sourceName the track's source name to save.\r\n     * @throws TypeError if <tt>ssrc</tt> is not a number\r\n     */\r\n    setTrackSourceName(ssrc, sourceName) {\r\n        if (typeof ssrc !== 'number') {\r\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\r\n        }\r\n\r\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\r\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\r\n        const existingName = this._sourceNames.get(ssrc);\r\n\r\n        if (existingName && existingName !== sourceName) {\r\n            logger.error(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\r\n        }\r\n\r\n        this._sourceNames.set(ssrc, sourceName);\r\n    }\r\n\r\n}","/* global __filename, module */\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport browser from '../browser';\r\n\r\nimport RTCUtils from './RTCUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Maps our handler types to MediaStreamTrack properties.\r\n */\r\nconst trackHandler2Prop = {\r\n    'track_mute': 'onmute', // Not supported on FF\r\n    'track_unmute': 'onunmute',\r\n    'track_ended': 'onended'\r\n};\r\n\r\n/**\r\n * Represents a single media track (either audio or video).\r\n */\r\nexport default class JitsiTrack extends EventEmitter {\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Represents a single media track (either audio or video).\r\n     * @constructor\r\n     * @param conference the rtc instance\r\n     * @param stream the WebRTC MediaStream instance\r\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\r\n     * the given <tt>stream</tt>.\r\n     * @param streamInactiveHandler the function that will handle\r\n     *        onended/oninactive events of the stream.\r\n     * @param trackMediaType the media type of the JitsiTrack\r\n     * @param videoType the VideoType for this track if any\r\n     */\r\n    constructor(\r\n            conference,\r\n            stream,\r\n            track,\r\n            streamInactiveHandler,\r\n            trackMediaType,\r\n            videoType) {\r\n        super();\r\n\r\n        // aliases for addListener/removeListener\r\n        this.addEventListener = this.addListener;\r\n        this.removeEventListener = this.off = this.removeListener;\r\n\r\n        /**\r\n         * Array with the HTML elements that are displaying the streams.\r\n         * @type {Array}\r\n         */\r\n        this.containers = [];\r\n        this.conference = conference;\r\n        this.audioLevel = -1;\r\n        this.type = trackMediaType;\r\n        this.track = track;\r\n        this.videoType = videoType;\r\n        this.handlers = new Map();\r\n\r\n        /**\r\n         * Indicates whether this JitsiTrack has been disposed. If true, this\r\n         * JitsiTrack is to be considered unusable and operations involving it\r\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\r\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\r\n         * @type {boolean}\r\n         */\r\n        this.disposed = false;\r\n\r\n        /**\r\n         * The inactive handler which will be triggered when the underlying\r\n         * <tt>MediaStream</tt> ends.\r\n         *\r\n         * @private\r\n         * @type {Function}\r\n         */\r\n        this._streamInactiveHandler = streamInactiveHandler;\r\n\r\n        this._setStream(stream);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\r\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\r\n     * a onended event on the MediaStreamTrack.\r\n     * @param {Function} handler the handler\r\n     */\r\n    _addMediaStreamInactiveHandler(handler) {\r\n        if (browser.isFirefox()) {\r\n            this.track.onended = handler;\r\n        } else {\r\n            this.stream.oninactive = handler;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\r\n     * depending on the passed type.\r\n     * @param {string} type the type of the handler that is going to be set\r\n     * @param {Function} handler the handler.\r\n     */\r\n    _setHandler(type, handler) {\r\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\r\n            logger.error(`Invalid handler type ${type}`);\r\n\r\n            return;\r\n        }\r\n        if (handler) {\r\n            this.handlers.set(type, handler);\r\n        } else {\r\n            this.handlers.delete(type);\r\n        }\r\n\r\n        if (this.stream) {\r\n            for (const track of this.stream.getTracks()) {\r\n                track[trackHandler2Prop[type]] = handler;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unregisters all event handlers bound to the underlying media stream/track\r\n     * @private\r\n     */\r\n    _unregisterHandlers() {\r\n        if (!this.stream) {\r\n            logger.warn(\r\n                `${this}: unable to unregister handlers - no stream object`);\r\n\r\n            return;\r\n        }\r\n\r\n        for (const type of this.handlers.keys()) {\r\n            // FIXME Why only video tracks?\r\n            for (const videoTrack of this.stream.getVideoTracks()) {\r\n                videoTrack[trackHandler2Prop[type]] = undefined;\r\n            }\r\n        }\r\n        if (this._streamInactiveHandler) {\r\n            this._addMediaStreamInactiveHandler(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the stream property of JitsiTrack object and sets all stored\r\n     * handlers to it.\r\n     *\r\n     * @param {MediaStream} stream the new stream.\r\n     * @protected\r\n     */\r\n    _setStream(stream) {\r\n        if (this.stream === stream) {\r\n            return;\r\n        }\r\n\r\n        this.stream = stream;\r\n\r\n        // TODO Practically, that's like the opposite of _unregisterHandlers\r\n        // i.e. may be abstracted into a function/method called\r\n        // _registerHandlers for clarity and easing the maintenance of the two\r\n        // pieces of source code.\r\n        if (this.stream) {\r\n            for (const type of this.handlers.keys()) {\r\n                this._setHandler(type, this.handlers.get(type));\r\n            }\r\n            if (this._streamInactiveHandler) {\r\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the type (audio or video) of this track.\r\n     */\r\n    getType() {\r\n        return this.type;\r\n    }\r\n\r\n    /**\r\n     * Check if this is an audio track.\r\n     */\r\n    isAudioTrack() {\r\n        return this.getType() === MediaType.AUDIO;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\r\n     * according to it's 'muted' field status.\r\n     * @return {boolean} <tt>true</tt> if the underlying\r\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\r\n     */\r\n    isWebRTCTrackMuted() {\r\n        return this.track && this.track.muted;\r\n    }\r\n\r\n    /**\r\n     * Check if this is a video track.\r\n     */\r\n    isVideoTrack() {\r\n        return this.getType() === MediaType.VIDEO;\r\n    }\r\n\r\n    /**\r\n     * Checks whether this is a local track.\r\n     * @abstract\r\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\r\n     */\r\n    isLocal() {\r\n        throw new Error('Not implemented by subclass');\r\n    }\r\n\r\n    /**\r\n     * Check whether this is a local audio track.\r\n     *\r\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\r\n     */\r\n    isLocalAudioTrack() {\r\n        return this.isAudioTrack() && this.isLocal();\r\n    }\r\n\r\n    /**\r\n     * Returns the WebRTC MediaStream instance.\r\n     */\r\n    getOriginalStream() {\r\n        return this.stream;\r\n    }\r\n\r\n    /**\r\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\r\n     * @returns {String|null}\r\n     */\r\n    getStreamId() {\r\n        return this.stream ? this.stream.id : null;\r\n    }\r\n\r\n    /**\r\n     * Return the underlying WebRTC MediaStreamTrack\r\n     * @returns {MediaStreamTrack}\r\n     */\r\n    getTrack() {\r\n        return this.track;\r\n    }\r\n\r\n    /**\r\n     * Return the underlying WebRTC MediaStreamTrack label\r\n     * @returns {string}\r\n     */\r\n    getTrackLabel() {\r\n        return this.track.label;\r\n    }\r\n\r\n    /**\r\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\r\n     * @returns {String|null}\r\n     */\r\n    getTrackId() {\r\n        return this.track ? this.track.id : null;\r\n    }\r\n\r\n    /**\r\n     * Return meaningful usage label for this track depending on it's media and\r\n     * eventual video type.\r\n     * @returns {string}\r\n     */\r\n    getUsageLabel() {\r\n        if (this.isAudioTrack()) {\r\n            return 'mic';\r\n        }\r\n\r\n        return this.videoType ? this.videoType : 'default';\r\n    }\r\n\r\n    /**\r\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\r\n     * @param container the video/audio container to which this stream is\r\n     *        attached and for which event will be fired.\r\n     * @private\r\n     */\r\n    _maybeFireTrackAttached(container) {\r\n        if (this.conference && container) {\r\n            this.conference._onTrackAttach(this, container);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attaches the MediaStream of this track to an HTML container.\r\n     * Adds the container to the list of containers that are displaying the\r\n     * track.\r\n     *\r\n     * @param container the HTML container which can be 'video' or 'audio'\r\n     * element.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    attach(container) {\r\n        if (this.stream) {\r\n            this._onTrackAttach(container);\r\n            RTCUtils.attachMediaStream(container, this.stream);\r\n        }\r\n        this.containers.push(container);\r\n        this._maybeFireTrackAttached(container);\r\n        this._attachTTFMTracker(container);\r\n    }\r\n\r\n    /**\r\n     * Removes this JitsiTrack from the passed HTML container.\r\n     *\r\n     * @param container the HTML container to detach from this JitsiTrack. If\r\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\r\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\r\n     * which this JitsiTrack is currently attached.\r\n     */\r\n    detach(container) {\r\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\r\n            const c = cs[i];\r\n\r\n            if (!container) {\r\n                this._onTrackDetach(c);\r\n                RTCUtils.attachMediaStream(c, null);\r\n            }\r\n            if (!container || c === container) {\r\n                cs.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        if (container) {\r\n            this._onTrackDetach(container);\r\n            RTCUtils.attachMediaStream(container, null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been attached to a new container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been detached from a container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Attach time to first media tracker only if there is conference and only\r\n     * for the first element.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Removes attached event listeners.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    dispose() {\r\n        this.removeAllListeners();\r\n\r\n        this.disposed = true;\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Returns true if this is a video track and the source of the video is a\r\n     * screen capture as opposed to a camera.\r\n     */\r\n    isScreenSharing() {\r\n        // FIXME: Should be fixed or removed.\r\n    }\r\n\r\n    /**\r\n     * Returns id of the track.\r\n     * @returns {string|null} id of the track or null if this is fake track.\r\n     */\r\n    getId() {\r\n        if (this.stream) {\r\n            return RTCUtils.getStreamID(this.stream);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the MediaStream is active/not ended.\r\n     * When there is no check for active we don't have information and so\r\n     * will return that stream is active (in case of FF).\r\n     * @returns {boolean} whether MediaStream is active.\r\n     */\r\n    isActive() {\r\n        if (typeof this.stream.active !== 'undefined') {\r\n            return this.stream.active;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio level for the stream\r\n     * @param {number} audioLevel value between 0 and 1\r\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\r\n     * is source for the audio level. It can be <tt>undefined</tt> for\r\n     * a local track if the audio level was measured outside of the\r\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\r\n     */\r\n    setAudioLevel(audioLevel, tpc) {\r\n        let newAudioLevel = audioLevel;\r\n\r\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\r\n        // remote tracks, browser reports last known audio levels even when the remote user is\r\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\r\n        // Remote tracks have the tpc info present while local tracks do not.\r\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\r\n            newAudioLevel = 0;\r\n        }\r\n\r\n        if (this.audioLevel !== newAudioLevel) {\r\n            this.audioLevel = newAudioLevel;\r\n            this.emit(\r\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                newAudioLevel,\r\n                tpc);\r\n\r\n        // LocalStatsCollector reports a value of 0.008 for muted mics\r\n        // and a value of 0 when there is no audio input.\r\n        } else if (this.audioLevel === 0\r\n            && newAudioLevel === 0\r\n            && this.isLocal()\r\n            && !this.isWebRTCTrackMuted()) {\r\n            this.emit(\r\n                JitsiTrackEvents.NO_AUDIO_INPUT,\r\n                newAudioLevel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the msid of the stream attached to the JitsiTrack object or null\r\n     * if no stream is attached.\r\n     */\r\n    getMSID() {\r\n        const streamId = this.getStreamId();\r\n        const trackId = this.getTrackId();\r\n\r\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\r\n    }\r\n\r\n    /**\r\n     * Sets new audio output device for track's DOM elements. Video tracks are\r\n     * ignored.\r\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\r\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\r\n     * @returns {Promise}\r\n     */\r\n    setAudioOutput(audioOutputDeviceId) {\r\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\r\n            return Promise.reject(\r\n                new Error('Audio output device change is not supported'));\r\n        }\r\n\r\n        // All audio communication is done through audio tracks, so ignore\r\n        // changing audio output for video tracks at all.\r\n        if (this.isVideoTrack()) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return (\r\n            Promise.all(\r\n                this.containers.map(\r\n                    element =>\r\n                        element.setSinkId(audioOutputDeviceId)\r\n                            .catch(error => {\r\n                                logger.warn(\r\n                                    'Failed to change audio output device on'\r\n                                        + ' element. Default or previously set'\r\n                                        + ' audio output device will be used.',\r\n                                    element,\r\n                                    error);\r\n                                throw error;\r\n                            }))\r\n            )\r\n                .then(() => {\r\n                    this.emit(\r\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\r\n                        audioOutputDeviceId);\r\n                }));\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport RTC from '../RTC/RTC';\r\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\r\n\r\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\r\n\r\n/**\r\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\r\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\r\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\r\n * score is published to consumers via an EventEmitter.\r\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\r\n *\r\n * @fires VAD_SCORE_PUBLISHED\r\n */\r\nexport default class TrackVADEmitter extends EventEmitter {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\r\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\r\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\r\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\r\n     */\r\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\r\n        super();\r\n\r\n        /**\r\n         * Sample rate of the ScriptProcessorNode.\r\n         */\r\n        this._procNodeSampleRate = procNodeSampleRate;\r\n\r\n        /**\r\n         * VAD Processor that allows us to calculate VAD score for PCM samples\r\n         */\r\n        this._vadProcessor = vadProcessor;\r\n\r\n        /**\r\n         * The JitsiLocalTrack instance.\r\n         */\r\n        this._localTrack = jitsiLocalTrack;\r\n\r\n        /**\r\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\r\n         */\r\n        this._bufferResidue = new Float32Array([]);\r\n\r\n        /**\r\n         * The AudioContext instance with the preferred sample frequency.\r\n         */\r\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\r\n\r\n        /**\r\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\r\n         * saves a couple of function calls.\r\n         */\r\n        this._vadSampleSize = vadProcessor.getSampleLength();\r\n\r\n        /**\r\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\r\n         * sample rate.\r\n         */\r\n        this._onAudioProcess = this._onAudioProcess.bind(this);\r\n\r\n        this._initializeAudioContext();\r\n    }\r\n\r\n    /**\r\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\r\n     *\r\n     * @param {string} micDeviceId - Target microphone device id.\r\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\r\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\r\n     * The processor needs to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\r\n     */\r\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\r\n        return RTC.obtainAudioAndVideoPermissions({\r\n            devices: [ 'audio' ],\r\n            micDeviceId\r\n        }).then(localTrack => {\r\n            // We only expect one audio track when specifying a device id.\r\n            if (!localTrack[0]) {\r\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\r\n            }\r\n\r\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\r\n\r\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\r\n            // life cycle is handled by whoever created this instance.\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets up the audio graph in the AudioContext.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _initializeAudioContext() {\r\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\r\n\r\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\r\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\r\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\r\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\r\n        // with audio worklet when it's mature enough and has more browser support.\r\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\r\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\r\n    }\r\n\r\n    /**\r\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\r\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\r\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\r\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\r\n     *\r\n     *\r\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\r\n     * @returns {void}\r\n     * @fires VAD_SCORE_PUBLISHED\r\n     */\r\n    _onAudioProcess(audioEvent) {\r\n        // Prepend the residue PCM buffer from the previous process callback.\r\n        const inData = audioEvent.inputBuffer.getChannelData(0);\r\n        const completeInData = [ ...this._bufferResidue, ...inData ];\r\n        const sampleTimestamp = Date.now();\r\n\r\n        let i = 0;\r\n\r\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\r\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\r\n\r\n            // The VAD processor might change the values inside the array so we make a copy.\r\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\r\n\r\n            this.emit(VAD_SCORE_PUBLISHED, {\r\n                timestamp: sampleTimestamp,\r\n                score: vadScore,\r\n                pcmData: pcmSample,\r\n                deviceId: this._localTrack.getDeviceId()\r\n            });\r\n        }\r\n\r\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\r\n    }\r\n\r\n    /**\r\n     * Connects the nodes in the AudioContext to start the flow of audio data.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _connectAudioGraph() {\r\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\r\n        this._audioSource.connect(this._audioProcessingNode);\r\n        this._audioProcessingNode.connect(this._audioContext.destination);\r\n    }\r\n\r\n    /**\r\n     * Disconnects the nodes in the AudioContext.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _disconnectAudioGraph() {\r\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\r\n        // resulting in calls with and uninitialized context.\r\n        // eslint-disable-next-line no-empty-function\r\n        this._audioProcessingNode.onaudioprocess = () => {};\r\n        this._audioProcessingNode.disconnect();\r\n        this._audioSource.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Cleanup potentially acquired resources.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _cleanupResources() {\r\n        this._disconnectAudioGraph();\r\n        this._localTrack.stopStream();\r\n    }\r\n\r\n    /**\r\n     * Get the associated track device ID.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getDeviceId() {\r\n        return this._localTrack.getDeviceId();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the associated track label.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getTrackLabel() {\r\n        return this._localTrack.getDeviceLabel();\r\n    }\r\n\r\n    /**\r\n     * Start the emitter by connecting the audio graph.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    start() {\r\n        this._connectAudioGraph();\r\n    }\r\n\r\n    /**\r\n     * Stops the emitter by disconnecting the audio graph.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        this._disconnectAudioGraph();\r\n        this._bufferResidue = [];\r\n    }\r\n\r\n    /**\r\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\r\n     *\r\n     * @returns {void}\r\n     */\r\n    destroy() {\r\n        if (this._destroyed) {\r\n            return;\r\n        }\r\n\r\n        this._cleanupResources();\r\n        this._destroyed = true;\r\n    }\r\n}\r\n","/**\r\n * Adapter that creates AudioContext objects depending on the browser.\r\n *\r\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\r\n */\r\nexport function createAudioContext(options) {\r\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\r\n\r\n    if (!AudioContextImpl) {\r\n        return undefined;\r\n    }\r\n\r\n    return new AudioContextImpl(options);\r\n}\r\n","/**\r\n * Indicates that the end-to-end round-trip-time for a participant has changed.\r\n */\r\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\r\n","\r\n/**\r\n * Promise-like object which can be passed around for resolving it later. It\r\n * implements the \"thenable\" interface, so it can be used wherever a Promise\r\n * could be used.\r\n *\r\n * In addition a \"reject on timeout\" functionality is provided.\r\n */\r\nexport default class Deferred {\r\n    /**\r\n     * Instantiates a Deferred object.\r\n     */\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = (...args) => {\r\n                this.clearRejectTimeout();\r\n                resolve(...args);\r\n            };\r\n            this.reject = (...args) => {\r\n                this.clearRejectTimeout();\r\n                reject(...args);\r\n            };\r\n        });\r\n        this.then = this.promise.then.bind(this.promise);\r\n        this.catch = this.promise.catch.bind(this.promise);\r\n    }\r\n\r\n    /**\r\n     * Clears the reject timeout.\r\n     */\r\n    clearRejectTimeout() {\r\n        clearTimeout(this._timeout);\r\n    }\r\n\r\n    /**\r\n     * Rejects the promise after the given timeout.\r\n     */\r\n    setRejectTimeout(ms) {\r\n        this._timeout = setTimeout(() => {\r\n            this.reject(new Error('timeout'));\r\n        }, ms);\r\n    }\r\n}\r\n","\r\nimport Listenable from '../../modules/util/Listenable';\r\n\r\n/**\r\n * An object that carries the info about specific media type advertised by\r\n * participant in the signaling channel.\r\n * @typedef {Object} PeerMediaInfo\r\n * @property {boolean} muted indicates if the media is currently muted\r\n * @property {VideoType|undefined} videoType the type of the video if applicable\r\n */\r\n\r\n/**\r\n * Interface used to expose the information carried over the signaling channel\r\n * which is not available to the RTC module in the media SDP.\r\n *\r\n * @interface SignalingLayer\r\n */\r\nexport default class SignalingLayer extends Listenable {\r\n\r\n    /**\r\n     * Obtains the endpoint ID for given SSRC.\r\n     * @param {number} ssrc the SSRC number.\r\n     * @return {string|null} the endpoint ID for given media SSRC.\r\n     */\r\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n    /**\r\n     * Obtains the info about given media advertised in the MUC presence of\r\n     * the participant identified by the given MUC JID.\r\n     * @param {string} owner the MUC jid of the participant for whom\r\n     * {@link PeerMediaInfo} will be obtained.\r\n     * @param {MediaType} mediaType the type of the media for which presence\r\n     * info will be obtained.\r\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\r\n     * info or <tt>null</tt> either if there is no presence available for given\r\n     * JID or if the media type given is invalid.\r\n     */\r\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n    getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\r\n        const firstLetterOfMediaType = mediaType.substring(0, 1);\r\n    \r\n        return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\r\n    }\r\n}\r\n\r\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\r\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\r\n\r\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\r\n}\r\n\r\nexport function getMediaTypeFromSourceName(sourceName) {\r\n    const firstLetterOfMediaTypeIdx = sourceName.indexOf('-') + 1;\r\n\r\n    if (firstLetterOfMediaTypeIdx <= 0) {\r\n        throw new Error(`Invalid source name: ${sourceName}`);\r\n    }\r\n\r\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\r\n\r\n    for (const type of Object.values(MediaType)) {\r\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\r\n            return type;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Invalid source name: ${sourceName}`);\r\n}\r\n","/**\r\n * A model for keeping track of each user's total\r\n * time as a dominant speaker. The model also\r\n * keeps track of the user's last known name\r\n * in case the user has left the meeting,\r\n * which is also tracked.\r\n */\r\nclass SpeakerStats {\r\n    /**\r\n     * Initializes a new SpeakerStats instance.\r\n     *\r\n     * @constructor\r\n     * @param {string} userId - The id of the user being tracked.\r\n     * @param {string} displayName - The name of the user being tracked.\r\n     * @param {boolean} isLocalStats - True if the stats model tracks\r\n     * the local user.\r\n     * @returns {void}\r\n     */\r\n    constructor(userId, displayName, isLocalStats) {\r\n        this._userId = userId;\r\n        this.setDisplayName(displayName);\r\n        this._isLocalStats = isLocalStats || false;\r\n        this.setDominantSpeaker(false);\r\n        this.totalDominantSpeakerTime = 0;\r\n        this._dominantSpeakerStart = 0;\r\n        this._hasLeft = false;\r\n    }\r\n\r\n    /**\r\n     * Get the user id being tracked.\r\n     *\r\n     * @returns {string} The user id.\r\n     */\r\n    getUserId() {\r\n        return this._userId;\r\n    }\r\n\r\n    /**\r\n     * Get the name of the user being tracked.\r\n     *\r\n     * @returns {string} The user name.\r\n     */\r\n    getDisplayName() {\r\n        return this.displayName;\r\n    }\r\n\r\n    /**\r\n     * Updates the last known name of the user being tracked.\r\n     *\r\n     * @param {string} - The user name.\r\n     * @returns {void}\r\n     */\r\n    setDisplayName(newName) {\r\n        this.displayName = newName;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the stats are tracking the local user.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isLocalStats() {\r\n        return this._isLocalStats;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tracked user is currently a dominant speaker.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isDominantSpeaker() {\r\n        return this._dominantSpeakerStart > 0;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tracked user is currently a dominant speaker.\r\n     *\r\n     * @param {boolean} - If true, the user will being accumulating time\r\n     * as dominant speaker. If false, the user will not accumulate time\r\n     * and will record any time accumulated since starting as dominant speaker.\r\n     * @returns {void}\r\n     */\r\n    setDominantSpeaker(isNowDominantSpeaker) {\r\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\r\n            this._dominantSpeakerStart = Date.now();\r\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\r\n            const now = Date.now();\r\n            const timeElapsed = now - this._dominantSpeakerStart;\r\n\r\n            this.totalDominantSpeakerTime += timeElapsed;\r\n            this._dominantSpeakerStart = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get how long the tracked user has been dominant speaker.\r\n     *\r\n     * @returns {number} - The speaker time in milliseconds.\r\n     */\r\n    getTotalDominantSpeakerTime() {\r\n        let total = this.totalDominantSpeakerTime;\r\n\r\n        if (this.isDominantSpeaker()) {\r\n            total += Date.now() - this._dominantSpeakerStart;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * Get whether or not the user is still in the meeting.\r\n     *\r\n     * @returns {boolean} True if the user is no longer in the meeting.\r\n     */\r\n    hasLeft() {\r\n        return this._hasLeft;\r\n    }\r\n\r\n    /**\r\n     * Set the user as having left the meeting.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    markAsHasLeft() {\r\n        this._hasLeft = true;\r\n        this.setDominantSpeaker(false);\r\n    }\r\n}\r\n\r\nmodule.exports = SpeakerStats;\r\n","const AuthenticationEvents = {\r\n    /**\r\n     * Event callback arguments:\r\n     * function(authenticationEnabled, userIdentity)\r\n     * authenticationEnabled - indicates whether authentication has been enabled\r\n     *                         in this session\r\n     * userIdentity - if user has been logged in then it contains user name. If\r\n     *                contains 'null' or 'undefined' then user is not logged in.\r\n     */\r\n    IDENTITY_UPDATED: 'authentication.identity_updated'\r\n};\r\n\r\nmodule.exports = AuthenticationEvents;\r\n","/**\r\n * [js-md5]{@link https://github.com/emn178/js-md5}\r\n *\r\n * @namespace md5\r\n * @version 0.7.3\r\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\r\n * @copyright Chen, Yi-Cyuan 2014-2017\r\n * @license MIT\r\n */\r\n(function () {\r\n  'use strict';\r\n\r\n  var ERROR = 'input is invalid type';\r\n  var WINDOW = typeof window === 'object';\r\n  var root = WINDOW ? window : {};\r\n  if (root.JS_MD5_NO_WINDOW) {\r\n    WINDOW = false;\r\n  }\r\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\r\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\r\n  if (NODE_JS) {\r\n    root = global;\r\n  } else if (WEB_WORKER) {\r\n    root = self;\r\n  }\r\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\r\n  var AMD = typeof define === 'function' && define.amd;\r\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\r\n  var HEX_CHARS = '0123456789abcdef'.split('');\r\n  var EXTRA = [128, 32768, 8388608, -2147483648];\r\n  var SHIFT = [0, 8, 16, 24];\r\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\r\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\r\n\r\n  var blocks = [], buffer8;\r\n  if (ARRAY_BUFFER) {\r\n    var buffer = new ArrayBuffer(68);\r\n    buffer8 = new Uint8Array(buffer);\r\n    blocks = new Uint32Array(buffer);\r\n  }\r\n\r\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\r\n    Array.isArray = function (obj) {\r\n      return Object.prototype.toString.call(obj) === '[object Array]';\r\n    };\r\n  }\r\n\r\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\r\n    ArrayBuffer.isView = function (obj) {\r\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @method hex\r\n   * @memberof md5\r\n   * @description Output hash as hex string\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {String} Hex string\r\n   * @example\r\n   * md5.hex('The quick brown fox jumps over the lazy dog');\r\n   * // equal to\r\n   * md5('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method digest\r\n   * @memberof md5\r\n   * @description Output hash as bytes array\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Array} Bytes array\r\n   * @example\r\n   * md5.digest('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method array\r\n   * @memberof md5\r\n   * @description Output hash as bytes array\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Array} Bytes array\r\n   * @example\r\n   * md5.array('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method arrayBuffer\r\n   * @memberof md5\r\n   * @description Output hash as ArrayBuffer\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {ArrayBuffer} ArrayBuffer\r\n   * @example\r\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method buffer\r\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\r\n   * @memberof md5\r\n   * @description Output hash as ArrayBuffer\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {ArrayBuffer} ArrayBuffer\r\n   * @example\r\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method base64\r\n   * @memberof md5\r\n   * @description Output hash as base64 string\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {String} base64 string\r\n   * @example\r\n   * md5.base64('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  var createOutputMethod = function (outputType) {\r\n    return function (message) {\r\n      return new Md5(true).update(message)[outputType]();\r\n    };\r\n  };\r\n\r\n  /**\r\n   * @method create\r\n   * @memberof md5\r\n   * @description Create Md5 object\r\n   * @returns {Md5} Md5 object.\r\n   * @example\r\n   * var hash = md5.create();\r\n   */\r\n  /**\r\n   * @method update\r\n   * @memberof md5\r\n   * @description Create and update Md5 object\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Md5} Md5 object.\r\n   * @example\r\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\r\n   * // equal to\r\n   * var hash = md5.create();\r\n   * hash.update('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  var createMethod = function () {\r\n    var method = createOutputMethod('hex');\r\n    if (NODE_JS) {\r\n      method = nodeWrap(method);\r\n    }\r\n    method.create = function () {\r\n      return new Md5();\r\n    };\r\n    method.update = function (message) {\r\n      return method.create().update(message);\r\n    };\r\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\r\n      var type = OUTPUT_TYPES[i];\r\n      method[type] = createOutputMethod(type);\r\n    }\r\n    return method;\r\n  };\r\n\r\n  var nodeWrap = function (method) {\r\n    var crypto = eval(\"require('crypto')\");\r\n    var Buffer = eval(\"require('buffer').Buffer\");\r\n    var nodeMethod = function (message) {\r\n      if (typeof message === 'string') {\r\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\r\n      } else {\r\n        if (message === null || message === undefined) {\r\n          throw ERROR;\r\n        } else if (message.constructor === ArrayBuffer) {\r\n          message = new Uint8Array(message);\r\n        }\r\n      }\r\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\r\n        message.constructor === Buffer) {\r\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\r\n      } else {\r\n        return method(message);\r\n      }\r\n    };\r\n    return nodeMethod;\r\n  };\r\n\r\n  /**\r\n   * Md5 class\r\n   * @class Md5\r\n   * @description This is internal class.\r\n   * @see {@link md5.create}\r\n   */\r\n  function Md5(sharedMemory) {\r\n    if (sharedMemory) {\r\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n      this.blocks = blocks;\r\n      this.buffer8 = buffer8;\r\n    } else {\r\n      if (ARRAY_BUFFER) {\r\n        var buffer = new ArrayBuffer(68);\r\n        this.buffer8 = new Uint8Array(buffer);\r\n        this.blocks = new Uint32Array(buffer);\r\n      } else {\r\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n      }\r\n    }\r\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\r\n    this.finalized = this.hashed = false;\r\n    this.first = true;\r\n  }\r\n\r\n  /**\r\n   * @method update\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Update hash\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Md5} Md5 object.\r\n   * @see {@link md5.update}\r\n   */\r\n  Md5.prototype.update = function (message) {\r\n    if (this.finalized) {\r\n      return;\r\n    }\r\n\r\n    var notString, type = typeof message;\r\n    if (type !== 'string') {\r\n      if (type === 'object') {\r\n        if (message === null) {\r\n          throw ERROR;\r\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\r\n          message = new Uint8Array(message);\r\n        } else if (!Array.isArray(message)) {\r\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\r\n            throw ERROR;\r\n          }\r\n        }\r\n      } else {\r\n        throw ERROR;\r\n      }\r\n      notString = true;\r\n    }\r\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\r\n    var buffer8 = this.buffer8;\r\n\r\n    while (index < length) {\r\n      if (this.hashed) {\r\n        this.hashed = false;\r\n        blocks[0] = blocks[16];\r\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n      }\r\n\r\n      if (notString) {\r\n        if (ARRAY_BUFFER) {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            buffer8[i++] = message[index];\r\n          }\r\n        } else {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\r\n          }\r\n        }\r\n      } else {\r\n        if (ARRAY_BUFFER) {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            code = message.charCodeAt(index);\r\n            if (code < 0x80) {\r\n              buffer8[i++] = code;\r\n            } else if (code < 0x800) {\r\n              buffer8[i++] = 0xc0 | (code >> 6);\r\n              buffer8[i++] = 0x80 | (code & 0x3f);\r\n            } else if (code < 0xd800 || code >= 0xe000) {\r\n              buffer8[i++] = 0xe0 | (code >> 12);\r\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\r\n              buffer8[i++] = 0x80 | (code & 0x3f);\r\n            } else {\r\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n              buffer8[i++] = 0xf0 | (code >> 18);\r\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\r\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\r\n              buffer8[i++] = 0x80 | (code & 0x3f);\r\n            }\r\n          }\r\n        } else {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            code = message.charCodeAt(index);\r\n            if (code < 0x80) {\r\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\r\n            } else if (code < 0x800) {\r\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n            } else if (code < 0xd800 || code >= 0xe000) {\r\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n            } else {\r\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.lastByteIndex = i;\r\n      this.bytes += i - this.start;\r\n      if (i >= 64) {\r\n        this.start = i - 64;\r\n        this.hash();\r\n        this.hashed = true;\r\n      } else {\r\n        this.start = i;\r\n      }\r\n    }\r\n    if (this.bytes > 4294967295) {\r\n      this.hBytes += this.bytes / 4294967296 << 0;\r\n      this.bytes = this.bytes % 4294967296;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  Md5.prototype.finalize = function () {\r\n    if (this.finalized) {\r\n      return;\r\n    }\r\n    this.finalized = true;\r\n    var blocks = this.blocks, i = this.lastByteIndex;\r\n    blocks[i >> 2] |= EXTRA[i & 3];\r\n    if (i >= 56) {\r\n      if (!this.hashed) {\r\n        this.hash();\r\n      }\r\n      blocks[0] = blocks[16];\r\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n    }\r\n    blocks[14] = this.bytes << 3;\r\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\r\n    this.hash();\r\n  };\r\n\r\n  Md5.prototype.hash = function () {\r\n    var a, b, c, d, bc, da, blocks = this.blocks;\r\n\r\n    if (this.first) {\r\n      a = blocks[0] - 680876937;\r\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\r\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\r\n      d = (d << 12 | d >>> 20) + a << 0;\r\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\r\n      c = (c << 17 | c >>> 15) + d << 0;\r\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\r\n      b = (b << 22 | b >>> 10) + c << 0;\r\n    } else {\r\n      a = this.h0;\r\n      b = this.h1;\r\n      c = this.h2;\r\n      d = this.h3;\r\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\r\n      a = (a << 7 | a >>> 25) + b << 0;\r\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\r\n      d = (d << 12 | d >>> 20) + a << 0;\r\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\r\n      c = (c << 17 | c >>> 15) + d << 0;\r\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\r\n      b = (b << 22 | b >>> 10) + c << 0;\r\n    }\r\n\r\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\r\n    a = (a << 7 | a >>> 25) + b << 0;\r\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\r\n    d = (d << 12 | d >>> 20) + a << 0;\r\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\r\n    c = (c << 17 | c >>> 15) + d << 0;\r\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\r\n    b = (b << 22 | b >>> 10) + c << 0;\r\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\r\n    a = (a << 7 | a >>> 25) + b << 0;\r\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\r\n    d = (d << 12 | d >>> 20) + a << 0;\r\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\r\n    c = (c << 17 | c >>> 15) + d << 0;\r\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\r\n    b = (b << 22 | b >>> 10) + c << 0;\r\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\r\n    a = (a << 7 | a >>> 25) + b << 0;\r\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\r\n    d = (d << 12 | d >>> 20) + a << 0;\r\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\r\n    c = (c << 17 | c >>> 15) + d << 0;\r\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\r\n    b = (b << 22 | b >>> 10) + c << 0;\r\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\r\n    a = (a << 5 | a >>> 27) + b << 0;\r\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\r\n    d = (d << 9 | d >>> 23) + a << 0;\r\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\r\n    c = (c << 14 | c >>> 18) + d << 0;\r\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\r\n    b = (b << 20 | b >>> 12) + c << 0;\r\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\r\n    a = (a << 5 | a >>> 27) + b << 0;\r\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\r\n    d = (d << 9 | d >>> 23) + a << 0;\r\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\r\n    c = (c << 14 | c >>> 18) + d << 0;\r\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\r\n    b = (b << 20 | b >>> 12) + c << 0;\r\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\r\n    a = (a << 5 | a >>> 27) + b << 0;\r\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\r\n    d = (d << 9 | d >>> 23) + a << 0;\r\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\r\n    c = (c << 14 | c >>> 18) + d << 0;\r\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\r\n    b = (b << 20 | b >>> 12) + c << 0;\r\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\r\n    a = (a << 5 | a >>> 27) + b << 0;\r\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\r\n    d = (d << 9 | d >>> 23) + a << 0;\r\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\r\n    c = (c << 14 | c >>> 18) + d << 0;\r\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\r\n    b = (b << 20 | b >>> 12) + c << 0;\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[5] - 378558;\r\n    a = (a << 4 | a >>> 28) + b << 0;\r\n    d += (bc ^ a) + blocks[8] - 2022574463;\r\n    d = (d << 11 | d >>> 21) + a << 0;\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[11] + 1839030562;\r\n    c = (c << 16 | c >>> 16) + d << 0;\r\n    b += (da ^ c) + blocks[14] - 35309556;\r\n    b = (b << 23 | b >>> 9) + c << 0;\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[1] - 1530992060;\r\n    a = (a << 4 | a >>> 28) + b << 0;\r\n    d += (bc ^ a) + blocks[4] + 1272893353;\r\n    d = (d << 11 | d >>> 21) + a << 0;\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[7] - 155497632;\r\n    c = (c << 16 | c >>> 16) + d << 0;\r\n    b += (da ^ c) + blocks[10] - 1094730640;\r\n    b = (b << 23 | b >>> 9) + c << 0;\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[13] + 681279174;\r\n    a = (a << 4 | a >>> 28) + b << 0;\r\n    d += (bc ^ a) + blocks[0] - 358537222;\r\n    d = (d << 11 | d >>> 21) + a << 0;\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[3] - 722521979;\r\n    c = (c << 16 | c >>> 16) + d << 0;\r\n    b += (da ^ c) + blocks[6] + 76029189;\r\n    b = (b << 23 | b >>> 9) + c << 0;\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[9] - 640364487;\r\n    a = (a << 4 | a >>> 28) + b << 0;\r\n    d += (bc ^ a) + blocks[12] - 421815835;\r\n    d = (d << 11 | d >>> 21) + a << 0;\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[15] + 530742520;\r\n    c = (c << 16 | c >>> 16) + d << 0;\r\n    b += (da ^ c) + blocks[2] - 995338651;\r\n    b = (b << 23 | b >>> 9) + c << 0;\r\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\r\n    a = (a << 6 | a >>> 26) + b << 0;\r\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\r\n    d = (d << 10 | d >>> 22) + a << 0;\r\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\r\n    c = (c << 15 | c >>> 17) + d << 0;\r\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\r\n    b = (b << 21 | b >>> 11) + c << 0;\r\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\r\n    a = (a << 6 | a >>> 26) + b << 0;\r\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\r\n    d = (d << 10 | d >>> 22) + a << 0;\r\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\r\n    c = (c << 15 | c >>> 17) + d << 0;\r\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\r\n    b = (b << 21 | b >>> 11) + c << 0;\r\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\r\n    a = (a << 6 | a >>> 26) + b << 0;\r\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\r\n    d = (d << 10 | d >>> 22) + a << 0;\r\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\r\n    c = (c << 15 | c >>> 17) + d << 0;\r\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\r\n    b = (b << 21 | b >>> 11) + c << 0;\r\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\r\n    a = (a << 6 | a >>> 26) + b << 0;\r\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\r\n    d = (d << 10 | d >>> 22) + a << 0;\r\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\r\n    c = (c << 15 | c >>> 17) + d << 0;\r\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\r\n    b = (b << 21 | b >>> 11) + c << 0;\r\n\r\n    if (this.first) {\r\n      this.h0 = a + 1732584193 << 0;\r\n      this.h1 = b - 271733879 << 0;\r\n      this.h2 = c - 1732584194 << 0;\r\n      this.h3 = d + 271733878 << 0;\r\n      this.first = false;\r\n    } else {\r\n      this.h0 = this.h0 + a << 0;\r\n      this.h1 = this.h1 + b << 0;\r\n      this.h2 = this.h2 + c << 0;\r\n      this.h3 = this.h3 + d << 0;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @method hex\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as hex string\r\n   * @returns {String} Hex string\r\n   * @see {@link md5.hex}\r\n   * @example\r\n   * hash.hex();\r\n   */\r\n  Md5.prototype.hex = function () {\r\n    this.finalize();\r\n\r\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\r\n\r\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\r\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\r\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\r\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\r\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\r\n  };\r\n\r\n  /**\r\n   * @method toString\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as hex string\r\n   * @returns {String} Hex string\r\n   * @see {@link md5.hex}\r\n   * @example\r\n   * hash.toString();\r\n   */\r\n  Md5.prototype.toString = Md5.prototype.hex;\r\n\r\n  /**\r\n   * @method digest\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as bytes array\r\n   * @returns {Array} Bytes array\r\n   * @see {@link md5.digest}\r\n   * @example\r\n   * hash.digest();\r\n   */\r\n  Md5.prototype.digest = function () {\r\n    this.finalize();\r\n\r\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\r\n    return [\r\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\r\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\r\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\r\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\r\n    ];\r\n  };\r\n\r\n  /**\r\n   * @method array\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as bytes array\r\n   * @returns {Array} Bytes array\r\n   * @see {@link md5.array}\r\n   * @example\r\n   * hash.array();\r\n   */\r\n  Md5.prototype.array = Md5.prototype.digest;\r\n\r\n  /**\r\n   * @method arrayBuffer\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as ArrayBuffer\r\n   * @returns {ArrayBuffer} ArrayBuffer\r\n   * @see {@link md5.arrayBuffer}\r\n   * @example\r\n   * hash.arrayBuffer();\r\n   */\r\n  Md5.prototype.arrayBuffer = function () {\r\n    this.finalize();\r\n\r\n    var buffer = new ArrayBuffer(16);\r\n    var blocks = new Uint32Array(buffer);\r\n    blocks[0] = this.h0;\r\n    blocks[1] = this.h1;\r\n    blocks[2] = this.h2;\r\n    blocks[3] = this.h3;\r\n    return buffer;\r\n  };\r\n\r\n  /**\r\n   * @method buffer\r\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as ArrayBuffer\r\n   * @returns {ArrayBuffer} ArrayBuffer\r\n   * @see {@link md5.buffer}\r\n   * @example\r\n   * hash.buffer();\r\n   */\r\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\r\n\r\n  /**\r\n   * @method base64\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as base64 string\r\n   * @returns {String} base64 string\r\n   * @see {@link md5.base64}\r\n   * @example\r\n   * hash.base64();\r\n   */\r\n  Md5.prototype.base64 = function () {\r\n    var v1, v2, v3, base64Str = '', bytes = this.array();\r\n    for (var i = 0; i < 15;) {\r\n      v1 = bytes[i++];\r\n      v2 = bytes[i++];\r\n      v3 = bytes[i++];\r\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\r\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\r\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\r\n        BASE64_ENCODE_CHAR[v3 & 63];\r\n    }\r\n    v1 = bytes[i];\r\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\r\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\r\n      '==';\r\n    return base64Str;\r\n  };\r\n\r\n  var exports = createMethod();\r\n\r\n  if (COMMON_JS) {\r\n    module.exports = exports;\r\n  } else {\r\n    /**\r\n     * @method md5\b\r\n     * @description Md5 hash function, export to global in browsers.\r\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n     * @returns {String} md5 hashes\r\n     * @example\r\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\r\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\r\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\r\n     *\r\n     * // It also supports UTF-8 encoding\r\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\r\n     *\r\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\r\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\r\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\r\n     */\r\n    root.md5 = exports;\r\n    if (AMD) {\r\n      define(function () {\r\n        return exports;\r\n      });\r\n    }\r\n  }\r\n})();\r\n","/**\r\n * lodash (Custom Build) <https://lodash.com/>\r\n * Build: `lodash modularize exports=\"npm\" -o ./`\r\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\r\n * Released under MIT license <https://lodash.com/license>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n */\r\n\r\n/** Used as the `TypeError` message for \"Functions\" methods. */\r\nvar FUNC_ERROR_TEXT = 'Expected a function';\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar NAN = 0 / 0;\r\n\r\n/** `Object#toString` result references. */\r\nvar symbolTag = '[object Symbol]';\r\n\r\n/** Used to match leading and trailing whitespace. */\r\nvar reTrim = /^\\s+|\\s+$/g;\r\n\r\n/** Used to detect bad signed hexadecimal string values. */\r\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\r\n\r\n/** Used to detect binary string values. */\r\nvar reIsBinary = /^0b[01]+$/i;\r\n\r\n/** Used to detect octal string values. */\r\nvar reIsOctal = /^0o[0-7]+$/i;\r\n\r\n/** Built-in method references without a dependency on `root`. */\r\nvar freeParseInt = parseInt;\r\n\r\n/** Detect free variable `global` from Node.js. */\r\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\r\n\r\n/** Detect free variable `self`. */\r\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n\r\n/** Used as a reference to the global object. */\r\nvar root = freeGlobal || freeSelf || Function('return this')();\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto = Object.prototype;\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar objectToString = objectProto.toString;\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeMax = Math.max,\r\n    nativeMin = Math.min;\r\n\r\n/**\r\n * Gets the timestamp of the number of milliseconds that have elapsed since\r\n * the Unix epoch (1 January 1970 00:00:00 UTC).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 2.4.0\r\n * @category Date\r\n * @returns {number} Returns the timestamp.\r\n * @example\r\n *\r\n * _.defer(function(stamp) {\r\n *   console.log(_.now() - stamp);\r\n * }, _.now());\r\n * // => Logs the number of milliseconds it took for the deferred invocation.\r\n */\r\nvar now = function() {\r\n  return root.Date.now();\r\n};\r\n\r\n/**\r\n * Creates a debounced function that delays invoking `func` until after `wait`\r\n * milliseconds have elapsed since the last time the debounced function was\r\n * invoked. The debounced function comes with a `cancel` method to cancel\r\n * delayed `func` invocations and a `flush` method to immediately invoke them.\r\n * Provide `options` to indicate whether `func` should be invoked on the\r\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\r\n * with the last arguments provided to the debounced function. Subsequent\r\n * calls to the debounced function return the result of the last `func`\r\n * invocation.\r\n *\r\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\r\n * invoked on the trailing edge of the timeout only if the debounced function\r\n * is invoked more than once during the `wait` timeout.\r\n *\r\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\r\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\r\n *\r\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\r\n * for details over the differences between `_.debounce` and `_.throttle`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Function\r\n * @param {Function} func The function to debounce.\r\n * @param {number} [wait=0] The number of milliseconds to delay.\r\n * @param {Object} [options={}] The options object.\r\n * @param {boolean} [options.leading=false]\r\n *  Specify invoking on the leading edge of the timeout.\r\n * @param {number} [options.maxWait]\r\n *  The maximum time `func` is allowed to be delayed before it's invoked.\r\n * @param {boolean} [options.trailing=true]\r\n *  Specify invoking on the trailing edge of the timeout.\r\n * @returns {Function} Returns the new debounced function.\r\n * @example\r\n *\r\n * // Avoid costly calculations while the window size is in flux.\r\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\r\n *\r\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\r\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\r\n *   'leading': true,\r\n *   'trailing': false\r\n * }));\r\n *\r\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\r\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\r\n * var source = new EventSource('/stream');\r\n * jQuery(source).on('message', debounced);\r\n *\r\n * // Cancel the trailing debounced invocation.\r\n * jQuery(window).on('popstate', debounced.cancel);\r\n */\r\nfunction debounce(func, wait, options) {\r\n  var lastArgs,\r\n      lastThis,\r\n      maxWait,\r\n      result,\r\n      timerId,\r\n      lastCallTime,\r\n      lastInvokeTime = 0,\r\n      leading = false,\r\n      maxing = false,\r\n      trailing = true;\r\n\r\n  if (typeof func != 'function') {\r\n    throw new TypeError(FUNC_ERROR_TEXT);\r\n  }\r\n  wait = toNumber(wait) || 0;\r\n  if (isObject(options)) {\r\n    leading = !!options.leading;\r\n    maxing = 'maxWait' in options;\r\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\r\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\r\n  }\r\n\r\n  function invokeFunc(time) {\r\n    var args = lastArgs,\r\n        thisArg = lastThis;\r\n\r\n    lastArgs = lastThis = undefined;\r\n    lastInvokeTime = time;\r\n    result = func.apply(thisArg, args);\r\n    return result;\r\n  }\r\n\r\n  function leadingEdge(time) {\r\n    // Reset any `maxWait` timer.\r\n    lastInvokeTime = time;\r\n    // Start the timer for the trailing edge.\r\n    timerId = setTimeout(timerExpired, wait);\r\n    // Invoke the leading edge.\r\n    return leading ? invokeFunc(time) : result;\r\n  }\r\n\r\n  function remainingWait(time) {\r\n    var timeSinceLastCall = time - lastCallTime,\r\n        timeSinceLastInvoke = time - lastInvokeTime,\r\n        result = wait - timeSinceLastCall;\r\n\r\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\r\n  }\r\n\r\n  function shouldInvoke(time) {\r\n    var timeSinceLastCall = time - lastCallTime,\r\n        timeSinceLastInvoke = time - lastInvokeTime;\r\n\r\n    // Either this is the first call, activity has stopped and we're at the\r\n    // trailing edge, the system time has gone backwards and we're treating\r\n    // it as the trailing edge, or we've hit the `maxWait` limit.\r\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\r\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\r\n  }\r\n\r\n  function timerExpired() {\r\n    var time = now();\r\n    if (shouldInvoke(time)) {\r\n      return trailingEdge(time);\r\n    }\r\n    // Restart the timer.\r\n    timerId = setTimeout(timerExpired, remainingWait(time));\r\n  }\r\n\r\n  function trailingEdge(time) {\r\n    timerId = undefined;\r\n\r\n    // Only invoke if we have `lastArgs` which means `func` has been\r\n    // debounced at least once.\r\n    if (trailing && lastArgs) {\r\n      return invokeFunc(time);\r\n    }\r\n    lastArgs = lastThis = undefined;\r\n    return result;\r\n  }\r\n\r\n  function cancel() {\r\n    if (timerId !== undefined) {\r\n      clearTimeout(timerId);\r\n    }\r\n    lastInvokeTime = 0;\r\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\r\n  }\r\n\r\n  function flush() {\r\n    return timerId === undefined ? result : trailingEdge(now());\r\n  }\r\n\r\n  function debounced() {\r\n    var time = now(),\r\n        isInvoking = shouldInvoke(time);\r\n\r\n    lastArgs = arguments;\r\n    lastThis = this;\r\n    lastCallTime = time;\r\n\r\n    if (isInvoking) {\r\n      if (timerId === undefined) {\r\n        return leadingEdge(lastCallTime);\r\n      }\r\n      if (maxing) {\r\n        // Handle invocations in a tight loop.\r\n        timerId = setTimeout(timerExpired, wait);\r\n        return invokeFunc(lastCallTime);\r\n      }\r\n    }\r\n    if (timerId === undefined) {\r\n      timerId = setTimeout(timerExpired, wait);\r\n    }\r\n    return result;\r\n  }\r\n  debounced.cancel = cancel;\r\n  debounced.flush = flush;\r\n  return debounced;\r\n}\r\n\r\n/**\r\n * Checks if `value` is the\r\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n * @example\r\n *\r\n * _.isObject({});\r\n * // => true\r\n *\r\n * _.isObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObject(_.noop);\r\n * // => true\r\n *\r\n * _.isObject(null);\r\n * // => false\r\n */\r\nfunction isObject(value) {\r\n  var type = typeof value;\r\n  return !!value && (type == 'object' || type == 'function');\r\n}\r\n\r\n/**\r\n * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n * and has a `typeof` result of \"object\".\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n * @example\r\n *\r\n * _.isObjectLike({});\r\n * // => true\r\n *\r\n * _.isObjectLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObjectLike(_.noop);\r\n * // => false\r\n *\r\n * _.isObjectLike(null);\r\n * // => false\r\n */\r\nfunction isObjectLike(value) {\r\n  return !!value && typeof value == 'object';\r\n}\r\n\r\n/**\r\n * Checks if `value` is classified as a `Symbol` primitive or object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n * @example\r\n *\r\n * _.isSymbol(Symbol.iterator);\r\n * // => true\r\n *\r\n * _.isSymbol('abc');\r\n * // => false\r\n */\r\nfunction isSymbol(value) {\r\n  return typeof value == 'symbol' ||\r\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\r\n}\r\n\r\n/**\r\n * Converts `value` to a number.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to process.\r\n * @returns {number} Returns the number.\r\n * @example\r\n *\r\n * _.toNumber(3.2);\r\n * // => 3.2\r\n *\r\n * _.toNumber(Number.MIN_VALUE);\r\n * // => 5e-324\r\n *\r\n * _.toNumber(Infinity);\r\n * // => Infinity\r\n *\r\n * _.toNumber('3.2');\r\n * // => 3.2\r\n */\r\nfunction toNumber(value) {\r\n  if (typeof value == 'number') {\r\n    return value;\r\n  }\r\n  if (isSymbol(value)) {\r\n    return NAN;\r\n  }\r\n  if (isObject(value)) {\r\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\r\n    value = isObject(other) ? (other + '') : other;\r\n  }\r\n  if (typeof value != 'string') {\r\n    return value === 0 ? value : +value;\r\n  }\r\n  value = value.replace(reTrim, '');\r\n  var isBinary = reIsBinary.test(value);\r\n  return (isBinary || reIsOctal.test(value))\r\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\r\n    : (reIsBadHex.test(value) ? NAN : +value);\r\n}\r\n\r\nmodule.exports = debounce;\r\n","/**\r\n * Derives a set of keys from the master key.\r\n * @param {CryptoKey} material - master key to derive from\r\n *\r\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\r\n */\r\nexport async function deriveKeys(material) {\r\n    const info = new ArrayBuffer();\r\n    const textEncoder = new TextEncoder();\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\r\n    const encryptionKey = await crypto.subtle.deriveKey({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameEncryptionKey'),\r\n        hash: 'SHA-256',\r\n        info\r\n    }, material, {\r\n        name: 'AES-CTR',\r\n        length: 128\r\n    }, false, [ 'encrypt', 'decrypt' ]);\r\n    const authenticationKey = await crypto.subtle.deriveKey({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameAuthenticationKey'),\r\n        hash: 'SHA-256',\r\n        info\r\n    }, material, {\r\n        name: 'HMAC',\r\n        hash: 'SHA-256'\r\n    }, false, [ 'sign' ]);\r\n    const saltKey = await crypto.subtle.deriveBits({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameSaltKey'),\r\n        hash: 'SHA-256',\r\n        info\r\n    }, material, 128);\r\n\r\n    return {\r\n        material,\r\n        encryptionKey,\r\n        authenticationKey,\r\n        saltKey\r\n    };\r\n}\r\n\r\n/**\r\n * Ratchets a key. See\r\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\r\n * @param {CryptoKey} material - base key material\r\n * @returns {ArrayBuffer} - ratcheted key material\r\n */\r\nexport async function ratchet(material) {\r\n    const textEncoder = new TextEncoder();\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\r\n    return crypto.subtle.deriveBits({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameRatchetKey'),\r\n        hash: 'SHA-256',\r\n        info: new ArrayBuffer()\r\n    }, material, 256);\r\n}\r\n\r\n/**\r\n * Converts a raw key into a WebCrypto key object with default options\r\n * suitable for our usage.\r\n * @param {ArrayBuffer} keyBytes - raw key\r\n * @param {Array} keyUsages - key usages, see importKey documentation\r\n * @returns {CryptoKey} - the WebCrypto key.\r\n */\r\nexport async function importKey(keyBytes) {\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\r\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\r\n}\r\n","/* global __filename, Promise */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport {\r\n    TRACK_IS_DISPOSED,\r\n    TRACK_NO_STREAM_FOUND\r\n} from '../../JitsiTrackErrors';\r\nimport {\r\n    LOCAL_TRACK_STOPPED,\r\n    NO_DATA_FROM_SOURCE,\r\n    TRACK_MUTE_CHANGED\r\n} from '../../JitsiTrackEvents';\r\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport {\r\n    NO_BYTES_SENT,\r\n    TRACK_UNMUTED,\r\n    createNoDataFromSourceEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nimport JitsiTrack from './JitsiTrack';\r\nimport RTCUtils from './RTCUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Represents a single media track(either audio or video).\r\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\r\n */\r\nexport default class JitsiLocalTrack extends JitsiTrack {\r\n    /**\r\n     * Constructs new JitsiLocalTrack instance.\r\n     *\r\n     * @constructor\r\n     * @param {Object} trackInfo\r\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\r\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\r\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\r\n     * JitsiRemoteTrack\r\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\r\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\r\n     * @param trackInfo.effects the effects array contains the effect instance to use\r\n     * @param trackInfo.resolution the video resolution if it's a video track\r\n     * @param trackInfo.deviceId the ID of the local device for this track\r\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\r\n     * call\r\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\r\n     * source. NOTE: defined for desktop sharing tracks only.\r\n     */\r\n    constructor({\r\n        deviceId,\r\n        facingMode,\r\n        mediaType,\r\n        resolution,\r\n        rtcId,\r\n        sourceId,\r\n        sourceType,\r\n        stream,\r\n        track,\r\n        videoType,\r\n        effects = []\r\n    }) {\r\n        super(\r\n            /* conference */ null,\r\n            stream,\r\n            track,\r\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\r\n            mediaType,\r\n            videoType);\r\n\r\n        this._setEffectInProgress = false;\r\n        const effect = effects.find(e => e.isEnabled(this));\r\n\r\n        if (effect) {\r\n            this._startStreamEffect(effect);\r\n        }\r\n\r\n        /**\r\n         * The ID assigned by the RTC module on instance creation.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.rtcId = rtcId;\r\n        this.sourceId = sourceId;\r\n        this.sourceType = sourceType;\r\n\r\n        if (browser.usesNewGumFlow()) {\r\n            // Get the resolution from the track itself because it cannot be\r\n            // certain which resolution webrtc has fallen back to using.\r\n            this.resolution = track.getSettings().height;\r\n            this.maxEnabledResolution = resolution;\r\n\r\n            // Cache the constraints of the track in case of any this track\r\n            // model needs to call getUserMedia again, such as when unmuting.\r\n            this._constraints = track.getConstraints();\r\n\r\n            // Safari returns an empty constraints object, construct the constraints using getSettings.\r\n            if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\r\n                this._constraints = {\r\n                    height: track.getSettings().height,\r\n                    width: track.getSettings().width\r\n                };\r\n            }\r\n        } else {\r\n            // FIXME Currently, Firefox is ignoring our constraints about\r\n            // resolutions so we do not store it, to avoid wrong reporting of\r\n            // local track resolution.\r\n            this.resolution = browser.isFirefox() ? null : resolution;\r\n            this.maxEnabledResolution = this.resolution;\r\n        }\r\n\r\n        this.deviceId = deviceId;\r\n\r\n        /**\r\n         * The <tt>Promise</tt> which represents the progress of a previously\r\n         * queued/scheduled {@link _setMuted} (from the point of view of\r\n         * {@link _queueSetMuted}).\r\n         *\r\n         * @private\r\n         * @type {Promise}\r\n         */\r\n        this._prevSetMuted = Promise.resolve();\r\n\r\n        /**\r\n         * The facing mode of the camera from which this JitsiLocalTrack\r\n         * instance was obtained.\r\n         *\r\n         * @private\r\n         * @type {CameraFacingMode|undefined}\r\n         */\r\n        this._facingMode = facingMode;\r\n\r\n        // Currently there is no way to know the MediaStreamTrack ended due to\r\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\r\n        // Instead we will compare current track's label with device labels from\r\n        // enumerateDevices() list.\r\n        this._trackEnded = false;\r\n\r\n        /**\r\n         * Indicates whether data has been sent or not.\r\n         */\r\n        this._hasSentData = false;\r\n\r\n        /**\r\n         * Used only for detection of audio problems. We want to check only once\r\n         * whether the track is sending data ot not. This flag is set to false\r\n         * after the check.\r\n         */\r\n        this._testDataSent = true;\r\n\r\n        // Currently there is no way to determine with what device track was\r\n        // created (until getConstraints() support), however we can associate\r\n        // tracks with real devices obtained from enumerateDevices() call as\r\n        // soon as it's called.\r\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\r\n        // correspond to the id of a matching device from the available device list.\r\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\r\n\r\n        this._trackMutedTS = 0;\r\n\r\n        this._onDeviceListWillChange = devices => {\r\n            const oldRealDeviceId = this._realDeviceId;\r\n\r\n            this._setRealDeviceIdFromDeviceList(devices);\r\n\r\n            if (\r\n                // Mark track as ended for those browsers that do not support\r\n                // \"readyState\" property. We do not touch tracks created with\r\n                // default device ID \"\".\r\n                (typeof this.getTrack().readyState === 'undefined'\r\n                    && typeof this._realDeviceId !== 'undefined'\r\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\r\n\r\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\r\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\r\n                // addition on some Chrome versions the readyState property is set after the device change event is\r\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\r\n                // detect that the old one was removed.\r\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\r\n            ) {\r\n                this._trackEnded = true;\r\n            }\r\n        };\r\n\r\n        // Subscribe each created local audio track to\r\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\r\n        // handling this event for remote tracks (which are handled in RTC.js),\r\n        // because there might be local tracks not attached to a conference.\r\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\r\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\r\n            RTCUtils.addListener(\r\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._onAudioOutputDeviceChanged);\r\n        }\r\n\r\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\r\n\r\n        this._initNoDataFromSourceHandlers();\r\n    }\r\n\r\n    /**\r\n     * Returns if associated MediaStreamTrack is in the 'ended' state\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isEnded() {\r\n        if (this.isVideoTrack() && this.isMuted()) {\r\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\r\n            // _trackEnded flag.\r\n            return this._trackEnded;\r\n        }\r\n\r\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\r\n    }\r\n\r\n    /**\r\n     * Sets handlers to the MediaStreamTrack object that will detect camera\r\n     * issues.\r\n     */\r\n    _initNoDataFromSourceHandlers() {\r\n        if (!this._isNoDataFromSourceEventsEnabled()) {\r\n            return;\r\n        }\r\n\r\n        this._setHandler('track_mute', () => {\r\n            this._trackMutedTS = window.performance.now();\r\n            this._fireNoDataFromSourceEvent();\r\n        });\r\n\r\n        this._setHandler('track_unmute', () => {\r\n            this._fireNoDataFromSourceEvent();\r\n            Statistics.sendAnalyticsAndLog(\r\n                TRACK_UNMUTED,\r\n                {\r\n                    'media_type': this.getType(),\r\n                    'track_type': 'local',\r\n                    value: window.performance.now() - this._trackMutedTS\r\n                });\r\n        });\r\n\r\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\r\n            this._setHandler('track_ended', () => {\r\n                if (!this.isReceivingData()) {\r\n                    this._fireNoDataFromSourceEvent();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\r\n     *\r\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\r\n     */\r\n    _isNoDataFromSourceEventsEnabled() {\r\n        // Disable the events for screen sharing.\r\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\r\n    }\r\n\r\n    /**\r\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\r\n     */\r\n    _fireNoDataFromSourceEvent() {\r\n        const value = !this.isReceivingData();\r\n\r\n        this.emit(NO_DATA_FROM_SOURCE, value);\r\n\r\n        // FIXME: Should we report all of those events\r\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\r\n        Statistics.sendLog(JSON.stringify({\r\n            name: NO_DATA_FROM_SOURCE,\r\n            log: value\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Sets real device ID by comparing track information with device\r\n     * information. This is temporary solution until getConstraints() method\r\n     * will be implemented in browsers.\r\n     *\r\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\r\n     * enumerateDevices() call\r\n     */\r\n    _setRealDeviceIdFromDeviceList(devices) {\r\n        const track = this.getTrack();\r\n        const kind = `${track.kind}input`;\r\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\r\n\r\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\r\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\r\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\r\n            // why in order to match it we need to remove the 'Default - ' part.\r\n            const label = (track.label || '').replace('Default - ', '');\r\n\r\n            device = devices.find(d => d.kind === kind && d.label === label);\r\n        }\r\n\r\n        if (device) {\r\n            this._realDeviceId = device.deviceId;\r\n        } else {\r\n            this._realDeviceId = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\r\n     * handlers to it.\r\n     *\r\n     * @param {MediaStream} stream the new stream.\r\n     * @protected\r\n     */\r\n    _setStream(stream) {\r\n        super._setStream(stream);\r\n\r\n        if (stream) {\r\n            // Store the MSID for video mute/unmute purposes.\r\n            this.storedMSID = this.getMSID();\r\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\r\n        } else {\r\n            logger.debug(`Setting 'null' stream on ${this}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the effect process and returns the modified stream.\r\n     *\r\n     * @private\r\n     * @param {*} effect - Represents effect instance\r\n     * @returns {void}\r\n     */\r\n    _startStreamEffect(effect) {\r\n        this._streamEffect = effect;\r\n        this._originalStream = this.stream;\r\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\r\n        this.track = this.stream.getTracks()[0];\r\n    }\r\n\r\n    /**\r\n     * Stops the effect process and returns the original stream.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _stopStreamEffect() {\r\n        if (this._streamEffect) {\r\n            this._streamEffect.stopEffect();\r\n            this._setStream(this._originalStream);\r\n            this._originalStream = null;\r\n            this.track = this.stream.getTracks()[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\r\n     *\r\n     * @param {Object|undefined} effect - The new effect to be set.\r\n     */\r\n    _switchStreamEffect(effect) {\r\n        if (this._streamEffect) {\r\n            this._stopStreamEffect();\r\n            this._streamEffect = undefined;\r\n        }\r\n        if (effect) {\r\n            this._startStreamEffect(effect);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the effect and switches between the modified stream and original one.\r\n     *\r\n     * @param {Object} effect - Represents the effect instance to be used.\r\n     * @returns {Promise}\r\n     */\r\n    setEffect(effect) {\r\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\r\n            return Promise.reject(new Error('Incompatible effect instance!'));\r\n        }\r\n\r\n        if (this._setEffectInProgress === true) {\r\n            return Promise.reject(new Error('setEffect already in progress!'));\r\n        }\r\n\r\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\r\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\r\n        if (this.isMuted() && !this.isAudioTrack()) {\r\n            this._streamEffect = effect;\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const conference = this.conference;\r\n\r\n        if (!conference) {\r\n            this._switchStreamEffect(effect);\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._setEffectInProgress = true;\r\n\r\n        if (browser.usesUnifiedPlan()) {\r\n            this._switchStreamEffect(effect);\r\n            if (this.isVideoTrack()) {\r\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n            }\r\n\r\n            return conference.replaceTrack(this, this)\r\n                .then(() => {\r\n                    this._setEffectInProgress = false;\r\n                })\r\n                .catch(error => {\r\n                    this._setEffectInProgress = false;\r\n                    this._switchStreamEffect();\r\n                    logger.error('Failed to switch to the new stream!', error);\r\n                    throw error;\r\n                });\r\n        }\r\n\r\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\r\n        return conference.removeTrack(this)\r\n            .then(() => {\r\n                this._switchStreamEffect(effect);\r\n                if (this.isVideoTrack()) {\r\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n                }\r\n\r\n                return conference.addTrack(this);\r\n            })\r\n            .then(() => {\r\n                this._setEffectInProgress = false;\r\n            })\r\n            .catch(error => {\r\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\r\n                // everyhting related to the effect functionality.\r\n                this._setEffectInProgress = false;\r\n                this._switchStreamEffect();\r\n                logger.error('Failed to switch to the new stream!', error);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Asynchronously mutes this track.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    mute() {\r\n        return this._queueSetMuted(true);\r\n    }\r\n\r\n    /**\r\n     * Asynchronously unmutes this track.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    unmute() {\r\n        return this._queueSetMuted(false);\r\n    }\r\n\r\n    /**\r\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\r\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\r\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\r\n     * serialized fashion.\r\n     *\r\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\r\n     * @returns {Promise}\r\n     */\r\n    _queueSetMuted(muted) {\r\n        const setMuted = this._setMuted.bind(this, muted);\r\n\r\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\r\n\r\n        return this._prevSetMuted;\r\n    }\r\n\r\n    /**\r\n     * Mutes / unmutes this track.\r\n     *\r\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\r\n     * otherwise, this track will be unmuted.\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _setMuted(muted) {\r\n        if (this.isMuted() === muted) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.disposed) {\r\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\r\n        }\r\n\r\n        let promise = Promise.resolve();\r\n\r\n        // A function that will print info about muted status transition\r\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\r\n\r\n        if (this.isAudioTrack()\r\n                || this.videoType === VideoType.DESKTOP\r\n                || !browser.doesVideoMuteByStreamRemove()) {\r\n            logMuteInfo();\r\n            if (this.track) {\r\n                this.track.enabled = !muted;\r\n            }\r\n        } else if (muted) {\r\n            promise = new Promise((resolve, reject) => {\r\n                logMuteInfo();\r\n                this._removeStreamFromConferenceAsMute(\r\n                    () => {\r\n                        if (this._streamEffect) {\r\n                            this._stopStreamEffect();\r\n                        }\r\n\r\n                        // FIXME: Maybe here we should set the SRC for the\r\n                        // containers to something\r\n                        // We don't want any events to be fired on this stream\r\n                        this._unregisterHandlers();\r\n                        this.stopStream();\r\n                        this._setStream(null);\r\n                        resolve();\r\n                    },\r\n                    reject);\r\n            });\r\n        } else {\r\n            logMuteInfo();\r\n\r\n            // This path is only for camera.\r\n            const streamOptions = {\r\n                cameraDeviceId: this.getDeviceId(),\r\n                devices: [ MediaType.VIDEO ],\r\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\r\n                facingMode: this.getCameraFacingMode()\r\n            };\r\n\r\n            if (browser.usesNewGumFlow()) {\r\n                promise\r\n                    = RTCUtils.newObtainAudioAndVideoPermissions(Object.assign(\r\n                        {},\r\n                        streamOptions,\r\n                        { constraints: { video: this._constraints } }));\r\n            } else {\r\n                if (this.resolution) {\r\n                    streamOptions.resolution = this.resolution;\r\n                }\r\n\r\n                promise\r\n                    = RTCUtils.obtainAudioAndVideoPermissions(streamOptions);\r\n            }\r\n\r\n            promise = promise.then(streamsInfo => {\r\n                // The track kind for presenter track is video as well.\r\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\r\n                const streamInfo\r\n                    = browser.usesNewGumFlow()\r\n                        ? streamsInfo.find(\r\n                            info => info.track.kind === mediaType)\r\n                        : streamsInfo.find(\r\n                            info => info.mediaType === mediaType);\r\n\r\n                if (streamInfo) {\r\n                    this._setStream(streamInfo.stream);\r\n                    this.track = streamInfo.track;\r\n\r\n                    // This is not good when video type changes after\r\n                    // unmute, but let's not crash here\r\n                    if (this.videoType !== streamInfo.videoType) {\r\n                        logger.warn(\r\n                            `${this}: video type has changed after unmute!`,\r\n                            this.videoType, streamInfo.videoType);\r\n                        this.videoType = streamInfo.videoType;\r\n                    }\r\n                } else {\r\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\r\n                }\r\n\r\n                if (this._streamEffect) {\r\n                    this._startStreamEffect(this._streamEffect);\r\n                }\r\n\r\n                this.containers.map(\r\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n\r\n                return this._addStreamToConferenceAsUnmute();\r\n            });\r\n        }\r\n\r\n        return promise\r\n            .then(() => this._sendMuteStatus(muted))\r\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\r\n    }\r\n\r\n    /**\r\n     * Adds stream to conference and marks it as \"unmute\" operation.\r\n     *\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _addStreamToConferenceAsUnmute() {\r\n        if (!this.conference) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        // FIXME it would be good to not included conference as part of this\r\n        // process. Only TraceablePeerConnections to which the track is attached\r\n        // should care about this action. The TPCs to which the track is not\r\n        // attached can sync up when track is re-attached.\r\n        // A problem with that is that the \"modify sources\" queue is part of\r\n        // the JingleSessionPC and it would be excluded from the process. One\r\n        // solution would be to extract class between TPC and JingleSessionPC\r\n        // which would contain the queue and would notify the signaling layer\r\n        // when local SSRCs are changed. This would help to separate XMPP from\r\n        // the RTC module.\r\n        return new Promise((resolve, reject) => {\r\n            this.conference._addLocalTrackAsUnmute(this)\r\n                .then(resolve, error => reject(new Error(error)));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes stream from conference and marks it as \"mute\" operation.\r\n     *\r\n     * @param {Function} successCallback will be called on success\r\n     * @param {Function} errorCallback will be called on error\r\n     * @private\r\n     */\r\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\r\n        if (!this.conference) {\r\n            successCallback();\r\n\r\n            return;\r\n        }\r\n        this.conference._removeLocalTrackAsMute(this).then(\r\n            successCallback,\r\n            error => errorCallback(new Error(error)));\r\n    }\r\n\r\n    /**\r\n     * Sends mute status for a track to conference if any.\r\n     *\r\n     * @param {boolean} mute - If track is muted.\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _sendMuteStatus(mute) {\r\n        if (!this.conference || !this.conference.room) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return new Promise(resolve => {\r\n            this.conference.room[\r\n                this.isAudioTrack()\r\n                    ? 'setAudioMute'\r\n                    : 'setVideoMute'](mute, resolve);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     *\r\n     * Stops sending the media track. And removes it from the HTML.\r\n     * NOTE: Works for local tracks only.\r\n     *\r\n     * @extends JitsiTrack#dispose\r\n     * @returns {Promise}\r\n     */\r\n    dispose() {\r\n        this._switchStreamEffect();\r\n\r\n        let promise = Promise.resolve();\r\n\r\n        if (this.conference) {\r\n            promise = this.conference.removeTrack(this);\r\n        }\r\n\r\n        if (this.stream) {\r\n            this.stopStream();\r\n            this.detach();\r\n        }\r\n\r\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\r\n\r\n        if (this._onAudioOutputDeviceChanged) {\r\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._onAudioOutputDeviceChanged);\r\n        }\r\n\r\n        return promise.then(() => super.dispose());\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\r\n     * otherwise.\r\n     *\r\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\r\n     * <tt>false</tt> otherwise.\r\n     */\r\n    isMuted() {\r\n        // this.stream will be null when we mute local video on Chrome\r\n        if (!this.stream) {\r\n            return true;\r\n        }\r\n        if (this.isVideoTrack() && !this.isActive()) {\r\n            return true;\r\n        }\r\n\r\n        return !this.track || !this.track.enabled;\r\n    }\r\n\r\n    /**\r\n     * Sets the JitsiConference object associated with the track. This is temp\r\n     * solution.\r\n     *\r\n     * @param conference the JitsiConference object\r\n     */\r\n    _setConference(conference) {\r\n        this.conference = conference;\r\n\r\n        // We want to keep up with postponed events which should have been fired\r\n        // on \"attach\" call, but for local track we not always have the\r\n        // conference before attaching. However this may result in duplicated\r\n        // events if they have been triggered on \"attach\" already.\r\n        for (let i = 0; i < this.containers.length; i++) {\r\n            this._maybeFireTrackAttached(this.containers[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true</tt>.\r\n     *\r\n     * @returns {boolean} <tt>true</tt>\r\n     */\r\n    isLocal() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns device id associated with track.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getDeviceId() {\r\n        return this._realDeviceId || this.deviceId;\r\n    }\r\n\r\n    /**\r\n     * Returns the participant id which owns the track.\r\n     *\r\n     * @returns {string} the id of the participants. It corresponds to the\r\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\r\n     */\r\n    getParticipantId() {\r\n        return this.conference && this.conference.myUserId();\r\n    }\r\n\r\n    /**\r\n     * Handles bytes sent statistics.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\r\n     * @param {number} bytesSent the new value\r\n     * NOTE: used only for audio tracks to detect audio issues.\r\n     */\r\n    _onByteSentStatsReceived(tpc, bytesSent) {\r\n        if (bytesSent > 0) {\r\n            this._hasSentData = true;\r\n        }\r\n        const iceConnectionState = tpc.getConnectionState();\r\n\r\n        if (this._testDataSent && iceConnectionState === 'connected') {\r\n            setTimeout(() => {\r\n                if (!this._hasSentData) {\r\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\r\n                        ${bytesSent}`);\r\n\r\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\r\n                }\r\n            }, 3000);\r\n            this._testDataSent = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns facing mode for video track from camera. For other cases (e.g.\r\n     * audio track or 'desktop' video track) returns undefined.\r\n     *\r\n     * @returns {CameraFacingMode|undefined}\r\n     */\r\n    getCameraFacingMode() {\r\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\r\n            // MediaStreamTrack#getSettings() is not implemented in many\r\n            // browsers, so we need feature checking here. Progress on the\r\n            // respective browser's implementation can be tracked at\r\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\r\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\r\n            // for Firefox. Even if a browser implements getSettings() already,\r\n            // it might still not return anything for 'facingMode'.\r\n            let trackSettings;\r\n\r\n            try {\r\n                trackSettings = this.track.getSettings();\r\n            } catch (e) {\r\n                // XXX React-native-webrtc, for example, defines\r\n                // MediaStreamTrack#getSettings() but the implementation throws\r\n                // a \"Not implemented\" Error.\r\n            }\r\n            if (trackSettings && 'facingMode' in trackSettings) {\r\n                return trackSettings.facingMode;\r\n            }\r\n\r\n            if (typeof this._facingMode !== 'undefined') {\r\n                return this._facingMode;\r\n            }\r\n\r\n            // In most cases we are showing a webcam. So if we've gotten here,\r\n            // it should be relatively safe to assume that we are probably\r\n            // showing the user-facing camera.\r\n            return CameraFacingMode.USER;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Stops the associated MediaStream.\r\n     */\r\n    stopStream() {\r\n        /**\r\n         * Indicates that we are executing {@link #stopStream} i.e.\r\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\r\n         * associated with this <tt>JitsiTrack</tt> instance.\r\n         *\r\n         * @private\r\n         * @type {boolean}\r\n         */\r\n        this._stopStreamInProgress = true;\r\n\r\n        try {\r\n            RTCUtils.stopMediaStream(this.stream);\r\n        } finally {\r\n            this._stopStreamInProgress = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switches the camera facing mode if the WebRTC implementation supports the\r\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\r\n     * question is implemented in react-native-webrtc only. When such a WebRTC\r\n     * implementation is executing, the method is the preferred way to switch\r\n     * between the front/user-facing and the back/environment-facing cameras\r\n     * because it will likely be (as is the case of react-native-webrtc)\r\n     * noticeably faster that creating a new MediaStreamTrack via a new\r\n     * getUserMedia call with the switched facingMode constraint value.\r\n     * Moreover, the approach with a new getUserMedia call may not even work:\r\n     * WebRTC on Android and iOS is either very slow to open the camera a second\r\n     * time or plainly freezes attempting to do that.\r\n     */\r\n    _switchCamera() {\r\n        if (this.isVideoTrack()\r\n                && this.videoType === VideoType.CAMERA\r\n                && typeof this.track._switchCamera === 'function') {\r\n            this.track._switchCamera();\r\n\r\n            this._facingMode\r\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\r\n                    ? CameraFacingMode.USER\r\n                    : CameraFacingMode.ENVIRONMENT;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the attached MediaStream is receiving data from source or\r\n     * not. If the stream property is null(because of mute or another reason)\r\n     * this method will return false.\r\n     * NOTE: This method doesn't indicate problem with the streams directly.\r\n     * For example in case of video mute the method will return false or if the\r\n     * user has disposed the track.\r\n     *\r\n     * @returns {boolean} true if the stream is receiving data and false\r\n     * this otherwise.\r\n     */\r\n    isReceivingData() {\r\n        if (this.isVideoTrack()\r\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\r\n            return true;\r\n        }\r\n\r\n        if (!this.stream) {\r\n            return false;\r\n        }\r\n\r\n        // In older version of the spec there is no muted property and\r\n        // readyState can have value muted. In the latest versions\r\n        // readyState can have values \"live\" and \"ended\" and there is\r\n        // muted boolean property. If the stream is muted that means that\r\n        // we aren't receiving any data from the source. We want to notify\r\n        // the users for error if the stream is muted or ended on it's\r\n        // creation.\r\n\r\n        // For video blur enabled use the original video stream\r\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\r\n\r\n        return stream.getTracks().some(track =>\r\n            (!('readyState' in track) || track.readyState === 'live')\r\n                && (!('muted' in track) || track.muted !== true));\r\n    }\r\n\r\n    /**\r\n     * Creates a text representation of this local track instance.\r\n     *\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\nimport TrackVADEmitter from './TrackVADEmitter';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\r\n * @type {number}\r\n */\r\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\r\n\r\n/**\r\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\r\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\r\n */\r\nexport default class VADAudioAnalyser extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADAudioAnalyser</tt>\r\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\r\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\r\n     * needs to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @constructor\r\n     */\r\n    constructor(conference, createVADProcessor) {\r\n        super();\r\n\r\n        /**\r\n         * Member function that instantiates a VAD processor.\r\n         */\r\n        this._createVADProcessor = createVADProcessor;\r\n\r\n        /**\r\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\r\n         * period voice probability scores.\r\n         */\r\n        this._vadEmitter = null;\r\n\r\n        /**\r\n         * Current state of the _vadEmitter\r\n         */\r\n        this._isVADEmitterRunning = false;\r\n\r\n        /**\r\n         * Array of currently attached VAD processing services.\r\n         */\r\n        this._detectionServices = [];\r\n\r\n        /**\r\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\r\n         * coming from the conference.\r\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\r\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\r\n         * i.e. (TRACK_MUTE_CHANGED event callback).\r\n         */\r\n        this._vadInitTracker = Promise.resolve();\r\n\r\n        /**\r\n         * Listens for {@link TrackVADEmitter} events and processes them.\r\n         */\r\n        this._processVADScore = this._processVADScore.bind(this);\r\n\r\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\r\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\r\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Attach a VAD detector service to the analyser and handle it's state changes.\r\n     *\r\n     * @param {Object} vadTMDetector\r\n     */\r\n    addVADDetectionService(vadService) {\r\n        this._detectionServices.push(vadService);\r\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\r\n            // When the state of a detector changes check if there are any active detectors attached so that\r\n            // the _vadEmitter doesn't run needlessly.\r\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\r\n\r\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\r\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\r\n            // that needs it.\r\n            if (!activeDetector.length && this._isVADEmitterRunning) {\r\n                this._stopVADEmitter();\r\n            } else if (!this._isVADEmitterRunning) {\r\n                this._startVADEmitter();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start the {@link TrackVADEmitter} and attach the event listener.\r\n     * @returns {void}\r\n     */\r\n    _startVADEmitter() {\r\n        this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\r\n        this._vadEmitter.start();\r\n        this._isVADEmitterRunning = true;\r\n    }\r\n\r\n    /**\r\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\r\n     * @returns {void}\r\n     */\r\n    _stopVADEmitter() {\r\n        this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\r\n        this._vadEmitter.stop();\r\n        this._isVADEmitterRunning = false;\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    _processVADScore(vadScore) {\r\n        for (const detector of this._detectionServices) {\r\n            detector.processVADScore(vadScore);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change the isMuted state of all attached detection services.\r\n     *\r\n     * @param {boolean} isMuted\r\n     */\r\n    _changeDetectorsMuteState(isMuted) {\r\n        for (const detector of this._detectionServices) {\r\n            detector.changeMuteState(isMuted);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\r\n     * Only take into account local audio tracks.\r\n     * @param {JitsiTrack} track - The added track.\r\n     * @returns {void}\r\n     * @listens TRACK_ADDED\r\n     */\r\n    _trackAdded(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\r\n            // destroy/create the processing context in the proper order.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\r\n                .then(vadProcessor =>\r\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\r\n                )\r\n                .then(vadEmitter => {\r\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\r\n\r\n                    this._vadEmitter = vadEmitter;\r\n\r\n                    // Iterate through the detection services and set their appropriate mute state, depending on\r\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\r\n                    this._changeDetectorsMuteState(track.isMuted());\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\r\n     * local audio tracks.\r\n     * @param {JitsiTrack} track - The track whose mute state has changed.\r\n     * @returns {void}\r\n     * @listens TRACK_MUTE_CHANGED\r\n     */\r\n    _trackMuteChanged(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // On a mute toggle reset the state.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => {\r\n                // Set mute status for the attached detection services.\r\n                this._changeDetectorsMuteState(track.isMuted());\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\r\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\r\n     *\r\n     * @param {JitsiTrack} track - The removed track.\r\n     * @returns {void}\r\n     * @listens TRACK_REMOVED\r\n     */\r\n    _trackRemoved(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Use the promise to make sure operations are in sequence.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => {\r\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\r\n\r\n                // Track was removed, clean up and set appropriate states.\r\n                if (this._vadEmitter) {\r\n                    this._stopVADEmitter();\r\n                    this._vadEmitter.destroy();\r\n                    this._vadEmitter = null;\r\n                }\r\n\r\n                // Reset state of detectors when active track is removed.\r\n                for (const detector of this._detectionServices) {\r\n                    detector.reset();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { $iq } from 'strophe.js';\r\n\r\nimport recordingXMLUtils from './recordingXMLUtils';\r\n\r\n/**\r\n * Represents a recording session.\r\n */\r\nexport default class JibriSession {\r\n    /**\r\n     * Initializes a new JibriSession instance.\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(options = {}) {\r\n        this._connection = options.connection;\r\n        this._mode = options.mode;\r\n\r\n        this._setSessionID(options.sessionID);\r\n        this.setStatus(options.status);\r\n    }\r\n\r\n    /**\r\n     * Returns the error related to the session instance, if any.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getError() {\r\n        return this._error;\r\n    }\r\n\r\n    /**\r\n     * Returns the session ID of the session instance.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getID() {\r\n        return this._sessionID;\r\n    }\r\n\r\n    /**\r\n     * Returns the initiator of the session instance.\r\n     *\r\n     * @returns {JitsiParticipant|undefined} The participant that started the session.\r\n     */\r\n    getInitiator() {\r\n        return this._initiator;\r\n    }\r\n\r\n    /**\r\n     * Returns the streaming URL of the session.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getLiveStreamViewURL() {\r\n        return this._liveStreamViewURL;\r\n    }\r\n\r\n    /**\r\n     * Returns the current status of the session.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getStatus() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the participant that stopped the session.\r\n     *\r\n     * @returns {JitsiParticipant|undefined} The participant that stopped the session.\r\n     */\r\n    getTerminator() {\r\n        return this._terminator;\r\n    }\r\n\r\n    /**\r\n     * Returns the current recording mode of the session, such as \"file\".\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getMode() {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Sets the last known error message related to the session.\r\n     *\r\n     * @param {string} error - The error string explaining why the session\r\n     * entered an error state.\r\n     * @returns {void}\r\n     */\r\n    setError(error) {\r\n        this._error = error;\r\n    }\r\n\r\n    /**\r\n     * Sets the last live stream URL for the session instance. Usually this is\r\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\r\n     *\r\n     * @param {string} url - The live stream URL associated with the session.\r\n     * @returns {void}\r\n     */\r\n    setLiveStreamViewURL(url) {\r\n        this._liveStreamViewURL = url;\r\n    }\r\n\r\n    /**\r\n     * Sets the last known status for this recording session.\r\n     *\r\n     * @param {string} status - The new status to set.\r\n     * @returns {void}\r\n     */\r\n    setStatus(status) {\r\n        this._status = status;\r\n    }\r\n\r\n    /**\r\n     * Sets the creator's jid of the session.\r\n     * @param {JitsiParticipant} participant - The creator of the session.\r\n     */\r\n    setInitiator(participant) {\r\n        this._initiator = participant;\r\n    }\r\n\r\n    /**\r\n     * Sets the jid of the participant that stopped the session.\r\n     * @param {JitsiParticipant} participant  - The participant's jid,\r\n     * that stopped the session.\r\n     */\r\n    setTerminator(participant) {\r\n        this._terminator = participant;\r\n    }\r\n\r\n    /**\r\n     * Sends a message to start the actual recording.\r\n     *\r\n     * @param {Object} options - Additional arguments for starting the\r\n     * recording.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [options.broadcastId] - The broadcast ID of an\r\n     * associated YouTube stream, used for knowing the URL from which the stream\r\n     * can be viewed.\r\n     * @param {string} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @param {streamId} options.streamId - Necessary for live streaming, this\r\n     * is the the stream key needed to start a live streaming session with the\r\n     * streaming service provider.\r\n     * @returns Promise\r\n     */\r\n    start({ appData, broadcastId, focusMucJid, streamId }) {\r\n        return new Promise((resolve, reject) => {\r\n            this._connection.sendIQ(\r\n                this._createIQ({\r\n                    action: 'start',\r\n                    appData,\r\n                    focusMucJid,\r\n                    broadcastId,\r\n                    streamId\r\n                }),\r\n                result => {\r\n                    // All users will eventually receive the 'pending' status\r\n                    // from the backend, but for the user initiating the session\r\n                    // it's better to give some instant feedback that recording\r\n                    // is starting so fire 'pending' here manually.\r\n                    this.setStatus('pending');\r\n                    this._setSessionID(\r\n                        recordingXMLUtils.getSessionIdFromIq(result));\r\n\r\n                    resolve();\r\n                },\r\n                error => {\r\n                    this._setErrorFromIq(error);\r\n\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a message to actually stop the recording session.\r\n     *\r\n     * @param {Object} options - Additional arguments for stopping the\r\n     * recording.\r\n     * @param {Object} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @returns Promise\r\n     */\r\n    stop({ focusMucJid }) {\r\n        return new Promise((resolve, reject) => {\r\n            this._connection.sendIQ(\r\n                this._createIQ({\r\n                    action: 'stop',\r\n                    focusMucJid\r\n                }),\r\n                resolve,\r\n                reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates the message to change the status of the recording session.\r\n     *\r\n     * @param {string} status - The new status to which the recording session\r\n     * should transition.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [options.broadcastId] - The broadcast ID of an\r\n     * associated YouTube stream, used for knowing the URL from which the stream\r\n     * can be viewed.\r\n     * @param {string} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @param {streamId} options.streamId - Necessary for live streaming, this\r\n     * is the the stream key needed to start a live streaming session with the\r\n     * streaming service provider.\r\n     * @returns Object - The XMPP IQ message.\r\n     */\r\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\r\n        return $iq({\r\n            to: focusMucJid,\r\n            type: 'set'\r\n        })\r\n        .c('jibri', {\r\n            'xmlns': 'http://jitsi.org/protocol/jibri',\r\n            'action': action,\r\n            'app_data': appData,\r\n            'recording_mode': this._mode,\r\n            'streamid': streamId,\r\n            'you_tube_broadcast_id': broadcastId\r\n        })\r\n        .up();\r\n    }\r\n\r\n    /**\r\n     * Handles the error from an iq and stores the error.\r\n     *\r\n     * @param {Node} errorIq - The error response from an Iq.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _setErrorFromIq(errorIq) {\r\n        const error = errorIq.getElementsByTagName('error')[0];\r\n\r\n        this.setError(error.children[0].tagName);\r\n    }\r\n\r\n    /**\r\n     * Sets the known session ID for this recording session.\r\n     *\r\n     * @param {string} sessionID\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _setSessionID(sessionID) {\r\n        this._sessionID = sessionID;\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport RTCEvents from './service/RTC/RTCEvents';\r\n\r\nconst AUDIO_PERMISSION_NAME = 'microphone';\r\nconst PERMISSION_GRANTED_STATUS = 'granted';\r\nconst VIDEO_PERMISSION_NAME = 'camera';\r\n\r\n/**\r\n * Media devices utilities for Jitsi.\r\n */\r\nclass JitsiMediaDevices {\r\n    /**\r\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\r\n     * instance of this class.\r\n     */\r\n    constructor() {\r\n        this._eventEmitter = new EventEmitter();\r\n        this._grantedPermissions = {};\r\n\r\n        RTC.addListener(\r\n            RTCEvents.DEVICE_LIST_CHANGED,\r\n            devices =>\r\n                this._eventEmitter.emit(\r\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\r\n                    devices));\r\n        RTC.addListener(\r\n            RTCEvents.DEVICE_LIST_AVAILABLE,\r\n            devices =>\r\n                this._logOutputDevice(\r\n                    this.getAudioOutputDevice(),\r\n                    devices));\r\n        RTC.addListener(\r\n            RTCEvents.GRANTED_PERMISSIONS,\r\n            grantedPermissions =>\r\n                this._handleGrantedPermissions(grantedPermissions));\r\n\r\n        // Test if the W3C Permissions API is implemented and the 'camera' and\r\n        // 'microphone' permissions are implemented. (Testing for at least one\r\n        // of them seems sufficient).\r\n        this._permissionsApiSupported = new Promise(resolve => {\r\n            if (!navigator.permissions) {\r\n                resolve(false);\r\n\r\n                return;\r\n            }\r\n\r\n            navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\r\n                .then(() => resolve(true), () => resolve(false));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updated the local granted permissions cache. A permissions might be\r\n     * granted, denied, or undefined. This is represented by having its media\r\n     * type key set to {@code true} or {@code false} respectively.\r\n     *\r\n     * @param {Object} grantedPermissions - Array with the permissions\r\n     * which were granted.\r\n     */\r\n    _handleGrantedPermissions(grantedPermissions) {\r\n        this._grantedPermissions = {\r\n            ...this._grantedPermissions,\r\n            ...grantedPermissions\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gathers data and sends it to statistics.\r\n     * @param deviceID the device id to log\r\n     * @param devices list of devices\r\n     */\r\n    _logOutputDevice(deviceID, devices) {\r\n        const device\r\n            = devices.find(\r\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\r\n\r\n        if (device) {\r\n            Statistics.sendActiveDeviceListEvent(\r\n                RTC.getEventDataForActiveDevice(device));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes callback with list of media devices connected.\r\n     * @param {function} callback\r\n     */\r\n    enumerateDevices(callback) {\r\n        RTC.enumerateDevices(callback);\r\n    }\r\n\r\n    /**\r\n     * Checks if its possible to enumerate available cameras/micropones.\r\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\r\n     * the WebRTC stack is ready, either with true if the device listing is\r\n     * available available or with false otherwise.\r\n     */\r\n    isDeviceListAvailable() {\r\n        return RTC.isDeviceListAvailable();\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @param {string} [deviceType] - type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        return RTC.isDeviceChangeAvailable(deviceType);\r\n    }\r\n\r\n    /**\r\n     * Checks if the permission for the given device was granted.\r\n     *\r\n     * @param {'audio'|'video'} [type] - type of devices to check,\r\n     *      undefined stands for both 'audio' and 'video' together\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    isDevicePermissionGranted(type) {\r\n        return new Promise(resolve => {\r\n            // Shortcut: first check if we already know the permission was\r\n            // granted.\r\n            if (type in this._grantedPermissions) {\r\n                resolve(this._grantedPermissions[type]);\r\n\r\n                return;\r\n            }\r\n\r\n            // Check using the Permissions API.\r\n            this._permissionsApiSupported.then(supported => {\r\n                if (!supported) {\r\n                    // Workaround on Safari for audio input device\r\n                    // selection to work. Safari doesn't support the\r\n                    // permissions query.\r\n                    if (browser.isSafari()) {\r\n                        resolve(true);\r\n\r\n                        return;\r\n                    }\r\n                    resolve(false);\r\n\r\n                    return;\r\n                }\r\n\r\n                const promises = [];\r\n\r\n                switch (type) {\r\n                case MediaType.VIDEO:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: VIDEO_PERMISSION_NAME\r\n                        }));\r\n                    break;\r\n                case MediaType.AUDIO:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: AUDIO_PERMISSION_NAME\r\n                        }));\r\n                    break;\r\n                default:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: VIDEO_PERMISSION_NAME\r\n                        }));\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: AUDIO_PERMISSION_NAME\r\n                        }));\r\n                }\r\n\r\n                Promise.all(promises).then(\r\n                    results => resolve(results.every(permissionStatus => {\r\n                        // The status attribute is deprecated, and state\r\n                        // should be used instead, but check both for now\r\n                        // for backwards compatibility.\r\n                        const grantStatus = permissionStatus.state\r\n                            || permissionStatus.status;\r\n\r\n                        return grantStatus === PERMISSION_GRANTED_STATUS;\r\n                    })),\r\n                    () => resolve(false)\r\n                );\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns true if it is possible to be simultaneously capturing audio\r\n     * from more than one device.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isMultipleAudioInputSupported() {\r\n        return !browser.isFirefox();\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, 'default' stands\r\n     * for default device\r\n     * @returns {string}\r\n     */\r\n    getAudioOutputDevice() {\r\n        return RTC.getAudioOutputDevice();\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\r\n     *      default device\r\n     * @returns {Promise} - resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    setAudioOutputDevice(deviceId) {\r\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\r\n\r\n        if (availableDevices.length > 0) {\r\n            // if we have devices info report device to stats\r\n            // normally this will not happen on startup as this method is called\r\n            // too early. This will happen only on user selection of new device\r\n            this._logOutputDevice(\r\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\r\n        }\r\n\r\n        return RTC.setAudioOutputDevice(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Adds an event handler.\r\n     * @param {string} event - event name\r\n     * @param {function} handler - event handler\r\n     */\r\n    addEventListener(event, handler) {\r\n        this._eventEmitter.addListener(event, handler);\r\n    }\r\n\r\n    /**\r\n     * Removes event handler.\r\n     * @param {string} event - event name\r\n     * @param {function} handler - event handler\r\n     */\r\n    removeEventListener(event, handler) {\r\n        this._eventEmitter.removeListener(event, handler);\r\n    }\r\n\r\n    /**\r\n     * Emits an event.\r\n     * @param {string} event - event name\r\n     */\r\n    emitEvent(event, ...args) {\r\n        this._eventEmitter.emit(event, ...args);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current browser can support capturing video,\r\n     * be it camera or desktop, and displaying received video.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    supportsVideo() {\r\n        // Defer to the browser capabilities to allow exposure of the api to the\r\n        // consumer but prevent other files from having to import\r\n        // JitsiMediaDevices.\r\n        return browser.supportsVideo();\r\n    }\r\n}\r\n\r\nexport default new JitsiMediaDevices();\r\n","/* Copyright @ 2015-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*jslint latedef:false*/\r\n\r\n/**\r\n * Ordered log levels.\r\n */\r\nvar levels = {\r\n    \"trace\": 0,\r\n    \"debug\": 1,\r\n    \"info\": 2,\r\n    \"log\": 3,\r\n    \"warn\": 4,\r\n    \"error\": 5\r\n};\r\n\r\n/**\r\n * The default transport - console\r\n * @type LoggerTransport\r\n */\r\nLogger.consoleTransport = console;\r\n\r\n/**\r\n * The array which stores currently registered global transports.\r\n * @type {[LoggerTransport]}\r\n */\r\nvar globalTransports = [ Logger.consoleTransport ];\r\n\r\n/**\r\n * Adds given {@link LoggerTransport} instance to the list of global\r\n * transports which means that it'll be used by all {@link Logger}s\r\n * @param {LoggerTransport} transport\r\n */\r\nLogger.addGlobalTransport = function(transport) {\r\n    if (globalTransports.indexOf(transport) === -1) {\r\n        globalTransports.push(transport);\r\n    }\r\n};\r\n\r\n/**\r\n * Removes given {@link LoggerTransport} instance from the list of global\r\n * transports\r\n * @param {LoggerTransport} transport\r\n */\r\nLogger.removeGlobalTransport = function(transport) {\r\n    var transportIdx = globalTransports.indexOf(transport);\r\n    if (transportIdx !== -1) {\r\n        globalTransports.splice(transportIdx, 1);\r\n    }\r\n};\r\n\r\n/**\r\n * The global configuration options.\r\n */\r\nvar globalOptions = {};\r\n\r\n/**\r\n * Sets global options which will be used by all loggers. Changing these works\r\n * even after other loggers are created.\r\n */\r\nLogger.setGlobalOptions = function(options) {\r\n    globalOptions = options || {};\r\n};\r\n\r\n/**\r\n * Parses Error's object stack trace and extracts information about the last\r\n * caller before the log method was called.\r\n * @returns JS object with info about the caller - method name, file location,\r\n * line and column.\r\n */\r\nfunction getCallerInfo() {\r\n    var callerInfo = {\r\n        methodName: \"\",\r\n        fileLocation: \"\",\r\n        line: null,\r\n        column: null\r\n    };\r\n    //gets the part of the stack without the logger wrappers\r\n    var error = new Error();\r\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\r\n    if(!stack || stack.length < 1) {\r\n        return callerInfo;\r\n    }\r\n    var m = null;\r\n    if(stack[3]) {\r\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\r\n    }\r\n    if(!m || m.length <= 4) {\r\n        //Firefox && Safari\r\n        if(stack[2].indexOf(\"log@\") === 0){\r\n            //Safari\r\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\r\n        } else {\r\n            //Firefox\r\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\r\n        }\r\n        return callerInfo;\r\n    }\r\n\r\n    callerInfo.methodName = m[1];\r\n    callerInfo.fileLocation = m[2];\r\n    callerInfo.line = m[3];\r\n    callerInfo.column = m[4];\r\n    return callerInfo;\r\n}\r\n\r\n/**\r\n * Logs messages using the transports and level from the logger.\r\n * @param logger a logger instance.\r\n * @param level the log level of the message. See the levels variable.\r\n * @param arguments array with arguments that will be logged.\r\n */\r\nfunction log() {\r\n    var logger = arguments[0], level = arguments[1],\r\n        args = Array.prototype.slice.call(arguments, 2);\r\n    if(levels[level] < logger.level) {\r\n        return;\r\n    }\r\n\r\n    var callerInfo\r\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\r\n            getCallerInfo();\r\n    var transports = globalTransports.concat(logger.transports);\r\n    for(var i = 0; i < transports.length; i++) {\r\n        var t = transports[i];\r\n        var l = t[level];\r\n        if(l && typeof(l) === \"function\") {\r\n            var logPrefixes = [];\r\n\r\n            logPrefixes.push(new Date().toISOString());\r\n\r\n            if (logger.id) {\r\n                logPrefixes.push(\"[\" + logger.id + \"]\");\r\n            }\r\n\r\n            if (callerInfo && callerInfo.methodName.length > 1) {\r\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\r\n            }\r\n\r\n            var fullLogParts = logPrefixes.concat(args);\r\n\r\n            l.bind(t).apply(t, fullLogParts);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * Constructs new logger object.\r\n * @param level the logging level for the new logger\r\n * @param id optional identifier for the logger instance.\r\n * @param {LoggerTransport} transports optional list of handlers(objects) for\r\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\r\n * @param options optional configuration file for how the logger should behave.\r\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\r\n * method invocation should be included in the log. Defaults to false, so the\r\n * call site will be included.\r\n */\r\nfunction Logger(level, id, transports, options) {\r\n    this.id = id;\r\n    this.options = options || {};\r\n    this.transports = transports;\r\n    if(!this.transports) {\r\n        this.transports = [];\r\n    }\r\n    this.level = levels[level];\r\n    var methods = Object.keys(levels);\r\n    for(var i = 0; i < methods.length; i++){\r\n        this[methods[i]] =\r\n            log.bind(null, this, methods[i]);\r\n    }\r\n}\r\n\r\n/**\r\n * Sets the log level for the logger.\r\n * @param level the new log level.\r\n */\r\nLogger.prototype.setLevel = function (level) {\r\n    this.level = levels[level];\r\n};\r\nmodule.exports = Logger;\r\n\r\n/**\r\n * Enum for the supported log levels.\r\n */\r\nLogger.levels = {\r\n    TRACE: \"trace\",\r\n    DEBUG: \"debug\",\r\n    INFO: \"info\",\r\n    LOG: \"log\",\r\n    WARN: \"warn\",\r\n    ERROR: \"error\"\r\n};\r\n","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","var grammar = module.exports = {\r\n  v: [{\r\n    name: 'version',\r\n    reg: /^(\\d*)$/\r\n  }],\r\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\r\n    // NB: sessionId will be a String in most cases because it is huge\r\n    name: 'origin',\r\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\r\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\r\n    format: '%s %s %d %s IP%d %s'\r\n  }],\r\n  // default parsing of these only (though some of these feel outdated)\r\n  s: [{ name: 'name' }],\r\n  i: [{ name: 'description' }],\r\n  u: [{ name: 'uri' }],\r\n  e: [{ name: 'email' }],\r\n  p: [{ name: 'phone' }],\r\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\r\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\r\n  //k: [{}], // outdated thing ignored\r\n  t: [{ //t=0 0\r\n    name: 'timing',\r\n    reg: /^(\\d*) (\\d*)/,\r\n    names: ['start', 'stop'],\r\n    format: '%d %d'\r\n  }],\r\n  c: [{ //c=IN IP4 10.47.197.26\r\n    name: 'connection',\r\n    reg: /^IN IP(\\d) (\\S*)/,\r\n    names: ['version', 'ip'],\r\n    format: 'IN IP%d %s'\r\n  }],\r\n  b: [{ //b=AS:4000\r\n    push: 'bandwidth',\r\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\r\n    names: ['type', 'limit'],\r\n    format: '%s:%s'\r\n  }],\r\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\r\n    // NB: special - pushes to session\r\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\r\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\r\n    names: ['type', 'port', 'protocol', 'payloads'],\r\n    format: '%s %d %s %s'\r\n  }],\r\n  a: [\r\n    { //a=rtpmap:110 opus/48000/2\r\n      push: 'rtp',\r\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\r\n      names: ['payload', 'codec', 'rate', 'encoding'],\r\n      format: function (o) {\r\n        return (o.encoding) ?\r\n          'rtpmap:%d %s/%s/%s':\r\n          o.rate ?\r\n          'rtpmap:%d %s/%s':\r\n          'rtpmap:%d %s';\r\n      }\r\n    },\r\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\r\n      //a=fmtp:111 minptime=10; useinbandfec=1\r\n      push: 'fmtp',\r\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\r\n      names: ['payload', 'config'],\r\n      format: 'fmtp:%d %s'\r\n    },\r\n    { //a=control:streamid=0\r\n      name: 'control',\r\n      reg: /^control:(.*)/,\r\n      format: 'control:%s'\r\n    },\r\n    { //a=rtcp:65179 IN IP4 193.84.77.194\r\n      name: 'rtcp',\r\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\r\n      names: ['port', 'netType', 'ipVer', 'address'],\r\n      format: function (o) {\r\n        return (o.address != null) ?\r\n          'rtcp:%d %s IP%d %s':\r\n          'rtcp:%d';\r\n      }\r\n    },\r\n    { //a=rtcp-fb:98 trr-int 100\r\n      push: 'rtcpFbTrrInt',\r\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\r\n      names: ['payload', 'value'],\r\n      format: 'rtcp-fb:%d trr-int %d'\r\n    },\r\n    { //a=rtcp-fb:98 nack rpsi\r\n      push: 'rtcpFb',\r\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\r\n      names: ['payload', 'type', 'subtype'],\r\n      format: function (o) {\r\n        return (o.subtype != null) ?\r\n          'rtcp-fb:%s %s %s':\r\n          'rtcp-fb:%s %s';\r\n      }\r\n    },\r\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\r\n      //a=extmap:1/recvonly URI-gps-string\r\n      push: 'ext',\r\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\r\n      names: ['value', 'direction', 'uri', 'config'],\r\n      format: function (o) {\r\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\r\n      }\r\n    },\r\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\r\n      push: 'crypto',\r\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\r\n      names: ['id', 'suite', 'config', 'sessionConfig'],\r\n      format: function (o) {\r\n        return (o.sessionConfig != null) ?\r\n          'crypto:%d %s %s %s':\r\n          'crypto:%d %s %s';\r\n      }\r\n    },\r\n    { //a=setup:actpass\r\n      name: 'setup',\r\n      reg: /^setup:(\\w*)/,\r\n      format: 'setup:%s'\r\n    },\r\n    { //a=mid:1\r\n      name: 'mid',\r\n      reg: /^mid:([^\\s]*)/,\r\n      format: 'mid:%s'\r\n    },\r\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\r\n      name: 'msid',\r\n      reg: /^msid:(.*)/,\r\n      format: 'msid:%s'\r\n    },\r\n    { //a=ptime:20\r\n      name: 'ptime',\r\n      reg: /^ptime:(\\d*)/,\r\n      format: 'ptime:%d'\r\n    },\r\n    { //a=maxptime:60\r\n      name: 'maxptime',\r\n      reg: /^maxptime:(\\d*)/,\r\n      format: 'maxptime:%d'\r\n    },\r\n    { //a=sendrecv\r\n      name: 'direction',\r\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\r\n    },\r\n    { //a=ice-lite\r\n      name: 'icelite',\r\n      reg: /^(ice-lite)/\r\n    },\r\n    { //a=ice-ufrag:F7gI\r\n      name: 'iceUfrag',\r\n      reg: /^ice-ufrag:(\\S*)/,\r\n      format: 'ice-ufrag:%s'\r\n    },\r\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\r\n      name: 'icePwd',\r\n      reg: /^ice-pwd:(\\S*)/,\r\n      format: 'ice-pwd:%s'\r\n    },\r\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\r\n      name: 'fingerprint',\r\n      reg: /^fingerprint:(\\S*) (\\S*)/,\r\n      names: ['type', 'hash'],\r\n      format: 'fingerprint:%s %s'\r\n    },\r\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\r\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\r\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\r\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\r\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\r\n      push:'candidates',\r\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\r\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\r\n      format: function (o) {\r\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\r\n\r\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\r\n\r\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\r\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\r\n\r\n        if (o.generation != null) {\r\n          str += ' generation %d';\r\n        }\r\n\r\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\r\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\r\n        return str;\r\n      }\r\n    },\r\n    { //a=end-of-candidates (keep after the candidates line for readability)\r\n      name: 'endOfCandidates',\r\n      reg: /^(end-of-candidates)/\r\n    },\r\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\r\n      name: 'remoteCandidates',\r\n      reg: /^remote-candidates:(.*)/,\r\n      format: 'remote-candidates:%s'\r\n    },\r\n    { //a=ice-options:google-ice\r\n      name: 'iceOptions',\r\n      reg: /^ice-options:(\\S*)/,\r\n      format: 'ice-options:%s'\r\n    },\r\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\r\n      push: 'ssrcs',\r\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\r\n      names: ['id', 'attribute', 'value'],\r\n      format: function (o) {\r\n        var str = 'ssrc:%d';\r\n        if (o.attribute != null) {\r\n          str += ' %s';\r\n          if (o.value != null) {\r\n            str += ':%s';\r\n          }\r\n        }\r\n        return str;\r\n      }\r\n    },\r\n    { //a=ssrc-group:FEC 1 2\r\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\r\n      push: 'ssrcGroups',\r\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\r\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\r\n      names: ['semantics', 'ssrcs'],\r\n      format: 'ssrc-group:%s %s'\r\n    },\r\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\r\n      name: 'msidSemantic',\r\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\r\n      names: ['semantic', 'token'],\r\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\r\n    },\r\n    { //a=group:BUNDLE audio video\r\n      push: 'groups',\r\n      reg: /^group:(\\w*) (.*)/,\r\n      names: ['type', 'mids'],\r\n      format: 'group:%s %s'\r\n    },\r\n    { //a=rtcp-mux\r\n      name: 'rtcpMux',\r\n      reg: /^(rtcp-mux)/\r\n    },\r\n    { //a=rtcp-rsize\r\n      name: 'rtcpRsize',\r\n      reg: /^(rtcp-rsize)/\r\n    },\r\n    { //a=sctpmap:5000 webrtc-datachannel 1024\r\n      name: 'sctpmap',\r\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\r\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\r\n      format: function (o) {\r\n        return (o.maxMessageSize != null) ?\r\n          'sctpmap:%s %s %s' :\r\n          'sctpmap:%s %s';\r\n      }\r\n    },\r\n    { //a=x-google-flag:conference\r\n      name: 'xGoogleFlag',\r\n      reg: /^x-google-flag:([^\\s]*)/,\r\n      format: 'x-google-flag:%s'\r\n    },\r\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\r\n      push: 'rids',\r\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\r\n      names: ['id', 'direction', 'params'],\r\n      format: function (o) {\r\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\r\n      }\r\n    },\r\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\r\n      //a=imageattr:* send [x=800,y=640] recv *\r\n      //a=imageattr:100 recv [x=320,y=240]\r\n      push: 'imageattrs',\r\n      reg: new RegExp(\r\n        //a=imageattr:97\r\n        '^imageattr:(\\\\d+|\\\\*)' +\r\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\r\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\r\n        //recv [x=330,y=250]\r\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\r\n      ),\r\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\r\n      format: function (o) {\r\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\r\n      }\r\n    },\r\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\r\n      //a=simulcast:recv 1;4,5 send 6;7\r\n      name: 'simulcast',\r\n      reg: new RegExp(\r\n        //a=simulcast:\r\n        '^simulcast:' +\r\n        //send 1,2,3;~4,~5\r\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\r\n        //space + recv 6;~7,~8\r\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\r\n        //end\r\n        '$'\r\n      ),\r\n      names: ['dir1', 'list1', 'dir2', 'list2'],\r\n      format: function (o) {\r\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\r\n      }\r\n    },\r\n    { //Old simulcast draft 03 (implemented by Firefox)\r\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\r\n      //a=simulcast: recv pt=97;98 send pt=97\r\n      //a=simulcast: send rid=5;6;7 paused=6,7\r\n      name: 'simulcast_03',\r\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\r\n      names: ['value'],\r\n      format: 'simulcast: %s'\r\n    },\r\n    {\r\n      //a=framerate:25\r\n      //a=framerate:29.97\r\n      name: 'framerate',\r\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\r\n      format: 'framerate:%s'\r\n    },\r\n    { // any a= that we don't understand is kepts verbatim on media.invalid\r\n      push: 'invalid',\r\n      names: ['value']\r\n    }\r\n  ]\r\n};\r\n\r\n// set sensible defaults to avoid polluting the grammar with boring details\r\nObject.keys(grammar).forEach(function (key) {\r\n  var objs = grammar[key];\r\n  objs.forEach(function (obj) {\r\n    if (!obj.reg) {\r\n      obj.reg = /(.*)/;\r\n    }\r\n    if (!obj.format) {\r\n      obj.format = '%s';\r\n    }\r\n  });\r\n});\r\n","/* global MediaRecorder, MediaStream */\r\n\r\nconst RecordingResult = require('./recordingResult');\r\n\r\n/**\r\n * Possible audio formats MIME types\r\n */\r\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\r\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\r\n\r\n/**\r\n * A TrackRecorder object holds all the information needed for recording a\r\n * single JitsiTrack (either remote or local)\r\n * @param track The JitsiTrack the object is going to hold\r\n */\r\nconst TrackRecorder = function(track) {\r\n    // The JitsiTrack holding the stream\r\n    this.track = track;\r\n\r\n    // The MediaRecorder recording the stream\r\n    this.recorder = null;\r\n\r\n    // The array of data chunks recorded from the stream\r\n    // acts as a buffer until the data is stored on disk\r\n    this.data = null;\r\n\r\n    // the name of the person of the JitsiTrack. This can be undefined and/or\r\n    // not unique\r\n    this.name = null;\r\n\r\n    // the time of the start of the recording\r\n    this.startTime = null;\r\n};\r\n\r\n/**\r\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\r\n * This will also define the timestamp and try to update the name\r\n * @param trackRecorder the TrackRecorder to start\r\n */\r\nfunction startRecorder(trackRecorder) {\r\n    if (trackRecorder.recorder === undefined) {\r\n        throw new Error('Passed an object to startRecorder which is not a '\r\n            + 'TrackRecorder object');\r\n    }\r\n    trackRecorder.recorder.start();\r\n    trackRecorder.startTime = new Date();\r\n}\r\n\r\n/**\r\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\r\n * This will also try to update the name\r\n * @param trackRecorder the TrackRecorder to stop\r\n */\r\nfunction stopRecorder(trackRecorder) {\r\n    if (trackRecorder.recorder === undefined) {\r\n        throw new Error('Passed an object to stopRecorder which is not a '\r\n            + 'TrackRecorder object');\r\n    }\r\n    trackRecorder.recorder.stop();\r\n}\r\n\r\n/**\r\n * Determines which kind of audio recording the browser supports\r\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\r\n */\r\nfunction determineCorrectFileType() {\r\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\r\n        return AUDIO_WEBM;\r\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\r\n        return AUDIO_OGG;\r\n    }\r\n    throw new Error(\r\n        'unable to create a MediaRecorder with the right mimetype!');\r\n}\r\n\r\n/**\r\n * main exported object of the file, holding all\r\n * relevant functions and variables for the outside world\r\n * @param jitsiConference the jitsiConference which this object\r\n * is going to record\r\n */\r\nfunction AudioRecorder(jitsiConference) {\r\n    // array of TrackRecorders, where each trackRecorder\r\n    // holds the JitsiTrack, MediaRecorder and recorder data\r\n    this.recorders = [];\r\n\r\n    // get which file type is supported by the current browser\r\n    this.fileType = determineCorrectFileType();\r\n\r\n    // boolean flag for active recording\r\n    this.isRecording = false;\r\n\r\n    // the jitsiconference the object is recording\r\n    this.jitsiConference = jitsiConference;\r\n}\r\n\r\n/**\r\n * Add the the exported module so that it can be accessed by other files\r\n */\r\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\r\n\r\n/**\r\n * Adds a new TrackRecorder object to the array.\r\n *\r\n * @param track the track potentially holding an audio stream\r\n */\r\nAudioRecorder.prototype.addTrack = function(track) {\r\n    if (track.isAudioTrack()) {\r\n        // create the track recorder\r\n        const trackRecorder = this.instantiateTrackRecorder(track);\r\n\r\n        // push it to the local array of all recorders\r\n\r\n        this.recorders.push(trackRecorder);\r\n\r\n        // update the name of the trackRecorders\r\n        this.updateNames();\r\n\r\n        // If we're already recording, immediately start recording this new\r\n        // track.\r\n        if (this.isRecording) {\r\n            startRecorder(trackRecorder);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\r\n * data array for the trackRecorder.\r\n * @param track the JitsiTrack holding the audio MediaStream(s)\r\n */\r\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\r\n    const trackRecorder = new TrackRecorder(track);\r\n\r\n    // Create a new stream which only holds the audio track\r\n    const originalStream = trackRecorder.track.getOriginalStream();\r\n    const stream = createEmptyStream();\r\n\r\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\r\n\r\n    // Create the MediaRecorder\r\n    trackRecorder.recorder = new MediaRecorder(stream,\r\n        { mimeType: this.fileType });\r\n\r\n    // array for holding the recorder data. Resets it when\r\n    // audio already has been recorder once\r\n    trackRecorder.data = [];\r\n\r\n    // function handling a dataEvent, e.g the stream gets new data\r\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\r\n        if (dataEvent.data.size > 0) {\r\n            trackRecorder.data.push(dataEvent.data);\r\n        }\r\n    };\r\n\r\n    return trackRecorder;\r\n};\r\n\r\n/**\r\n * Notifies the module that a specific track has stopped, e.g participant left\r\n * the conference.\r\n * if the recording has not started yet, the TrackRecorder will be removed from\r\n * the array. If the recording has started, the recorder will stop recording\r\n * but not removed from the array so that the recorded stream can still be\r\n * accessed\r\n *\r\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\r\n */\r\nAudioRecorder.prototype.removeTrack = function(track) {\r\n    if (track.isVideoTrack()) {\r\n        return;\r\n    }\r\n\r\n    const array = this.recorders;\r\n    let i;\r\n\r\n    for (i = 0; i < array.length; i++) {\r\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\r\n            const recorderToRemove = array[i];\r\n\r\n            if (this.isRecording) {\r\n                stopRecorder(recorderToRemove);\r\n            } else {\r\n                // remove the TrackRecorder from the array\r\n                array.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // make sure the names are up to date\r\n    this.updateNames();\r\n};\r\n\r\n/**\r\n * Tries to update the name value of all TrackRecorder in the array.\r\n * If it hasn't changed,it will keep the exiting name. If it changes to a\r\n * undefined value, the old value will also be kept.\r\n */\r\nAudioRecorder.prototype.updateNames = function() {\r\n    const conference = this.jitsiConference;\r\n\r\n    this.recorders.forEach(trackRecorder => {\r\n        if (trackRecorder.track.isLocal()) {\r\n            trackRecorder.name = 'the transcriber';\r\n        } else {\r\n            const id = trackRecorder.track.getParticipantId();\r\n            const participant = conference.getParticipantById(id);\r\n            const newName = participant.getDisplayName();\r\n\r\n            if (newName !== 'undefined') {\r\n                trackRecorder.name = newName;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Starts the audio recording of every local and remote track\r\n */\r\nAudioRecorder.prototype.start = function() {\r\n    if (this.isRecording) {\r\n        throw new Error('audiorecorder is already recording');\r\n    }\r\n\r\n    // set boolean isRecording flag to true so if new participants join the\r\n    // conference, that track can instantly start recording as well\r\n    this.isRecording = true;\r\n\r\n    // start all the mediaRecorders\r\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\r\n\r\n    // log that recording has started\r\n    console.log(\r\n        `Started the recording of the audio. There are currently ${\r\n            this.recorders.length} recorders active.`);\r\n};\r\n\r\n/**\r\n * Stops the audio recording of every local and remote track\r\n */\r\nAudioRecorder.prototype.stop = function() {\r\n    // set the boolean flag to false\r\n    this.isRecording = false;\r\n\r\n    // stop all recorders\r\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\r\n    console.log('stopped recording');\r\n};\r\n\r\n/**\r\n * link hacking to download all recorded audio streams\r\n */\r\nAudioRecorder.prototype.download = function() {\r\n    this.recorders.forEach(trackRecorder => {\r\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n\r\n        document.body.appendChild(a);\r\n        a.style = 'display: none';\r\n        a.href = url;\r\n        a.download = `test.${this.fileType.split('/')[1]}`;\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n    });\r\n};\r\n\r\n/**\r\n * returns the audio files of all recorders as an array of objects,\r\n * which include the name of the owner of the track and the starting time stamp\r\n * @returns {Array} an array of RecordingResult objects\r\n */\r\nAudioRecorder.prototype.getRecordingResults = function() {\r\n    if (this.isRecording) {\r\n        throw new Error(\r\n            'cannot get blobs because the AudioRecorder is still recording!');\r\n    }\r\n\r\n    // make sure the names are up to date before sending them off\r\n    this.updateNames();\r\n\r\n    const array = [];\r\n\r\n    this.recorders.forEach(\r\n        recorder =>\r\n            array.push(\r\n                new RecordingResult(\r\n                    new Blob(recorder.data, { type: this.fileType }),\r\n                    recorder.name,\r\n                    recorder.startTime)));\r\n\r\n    return array;\r\n};\r\n\r\n/**\r\n * Gets the mime type of the recorder audio\r\n * @returns {String} the mime type of the recorder audio\r\n */\r\nAudioRecorder.prototype.getFileType = function() {\r\n    return this.fileType;\r\n};\r\n\r\n/**\r\n * Creates a empty MediaStream object which can be used\r\n * to add MediaStreamTracks to\r\n * @returns MediaStream\r\n */\r\nfunction createEmptyStream() {\r\n    if (typeof MediaStream !== 'undefined') {\r\n        return new MediaStream();\r\n    }\r\n    throw new Error('cannot create a clean mediaStream');\r\n}\r\n\r\n/**\r\n * export the main object AudioRecorder\r\n */\r\nmodule.exports = AudioRecorder;\r\n","import JitsiConference from './JitsiConference';\r\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport XMPP from './modules/xmpp/xmpp';\r\nimport {\r\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\r\n    createConnectionFailedEvent\r\n} from './service/statistics/AnalyticsEvents';\r\n\r\n/**\r\n * Creates a new connection object for the Jitsi Meet server side video\r\n * conferencing service. Provides access to the JitsiConference interface.\r\n * @param appID identification for the provider of Jitsi Meet video conferencing\r\n * services.\r\n * @param token the JWT token used to authenticate with the server(optional)\r\n * @param options Object with properties / settings related to connection with\r\n * the server.\r\n * @constructor\r\n */\r\nexport default function JitsiConnection(appID, token, options) {\r\n    this.appID = appID;\r\n    this.token = token;\r\n    this.options = options;\r\n    this.xmpp = new XMPP(options, token);\r\n\r\n    /* eslint-disable max-params */\r\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\r\n        (errType, msg, credentials, details) => {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createConnectionFailedEvent(errType, msg, details));\r\n        });\r\n    /* eslint-enable max-params */\r\n\r\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\r\n        msg => {\r\n            // we can see disconnects from normal tab closing of the browser\r\n            // and then there are no msgs, but we want to log only disconnects\r\n            // when there is real error\r\n            // XXX Do we need the difference in handling between the log and\r\n            // analytics event here?\r\n            if (msg) {\r\n                Statistics.sendAnalytics(\r\n                    ANALYTICS_CONNECTION_DISCONNECTED,\r\n                    { message: msg });\r\n            }\r\n            Statistics.sendLog(\r\n                JSON.stringify(\r\n                    {\r\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\r\n                        msg\r\n                    }));\r\n        });\r\n}\r\n\r\n/**\r\n * Connect the client with the server.\r\n * @param options {object} connecting options\r\n * (for example authentications parameters).\r\n */\r\nJitsiConnection.prototype.connect = function(options = {}) {\r\n    this.xmpp.connect(options.id, options.password);\r\n};\r\n\r\n/**\r\n * Attach to existing connection. Can be used for optimizations. For example:\r\n * if the connection is created on the server we can attach to it and start\r\n * using it.\r\n *\r\n * @param options {object} connecting options - rid, sid and jid.\r\n */\r\nJitsiConnection.prototype.attach = function(options) {\r\n    this.xmpp.attach(options);\r\n};\r\n\r\n/**\r\n * Disconnect the client from the server.\r\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\r\n */\r\nJitsiConnection.prototype.disconnect = function(...args) {\r\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\r\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\r\n    // may optionally pass the event which triggered the disconnect in order to\r\n    // provide the implementation with finer-grained context.\r\n    return this.xmpp.disconnect(...args);\r\n};\r\n\r\n/**\r\n * Returns the jid of the participant associated with the XMPP connection.\r\n *\r\n * @returns {string} The jid of the participant.\r\n */\r\nJitsiConnection.prototype.getJid = function() {\r\n    return this.xmpp.getJid();\r\n};\r\n\r\n/**\r\n * This method allows renewal of the tokens if they are expiring.\r\n * @param token the new token.\r\n */\r\nJitsiConnection.prototype.setToken = function(token) {\r\n    this.token = token;\r\n};\r\n\r\n/**\r\n * Creates and joins new conference.\r\n * @param name the name of the conference; if null - a generated name will be\r\n * provided from the api\r\n * @param options Object with properties / settings related to the conference\r\n * that will be created.\r\n * @returns {JitsiConference} returns the new conference object.\r\n */\r\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\r\n    return new JitsiConference({\r\n        name,\r\n        config: options,\r\n        connection: this\r\n    });\r\n};\r\n\r\n/**\r\n * Subscribes the passed listener to the event.\r\n * @param event {JitsiConnectionEvents} the connection event.\r\n * @param listener {Function} the function that will receive the event\r\n */\r\nJitsiConnection.prototype.addEventListener = function(event, listener) {\r\n    this.xmpp.addListener(event, listener);\r\n};\r\n\r\n/**\r\n * Unsubscribes the passed handler.\r\n * @param event {JitsiConnectionEvents} the connection event.\r\n * @param listener {Function} the function that will receive the event\r\n */\r\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\r\n    this.xmpp.removeListener(event, listener);\r\n};\r\n\r\n/**\r\n * Returns measured connectionTimes.\r\n */\r\nJitsiConnection.prototype.getConnectionTimes = function() {\r\n    return this.xmpp.connectionTimes;\r\n};\r\n\r\n/**\r\n * Adds new feature to the list of supported features for the local\r\n * participant.\r\n * @param {String} feature the name of the feature.\r\n * @param {boolean} submit if true - the new list of features will be\r\n * immediately submitted to the others.\r\n */\r\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\r\n    return this.xmpp.caps.addFeature(feature, submit);\r\n};\r\n\r\n/**\r\n * Removes a feature from the list of supported features for the local\r\n * participant\r\n * @param {String} feature the name of the feature.\r\n * @param {boolean} submit if true - the new list of features will be\r\n * immediately submitted to the others.\r\n */\r\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\r\n    return this.xmpp.caps.removeFeature(feature, submit);\r\n};\r\n\r\n/**\r\n * Get object with internal logs.\r\n */\r\nJitsiConnection.prototype.getLogs = function() {\r\n    const data = this.xmpp.getJingleLog();\r\n\r\n    const metadata = {};\r\n\r\n    metadata.time = new Date();\r\n    metadata.url = window.location.href;\r\n    metadata.ua = navigator.userAgent;\r\n\r\n    const log = this.xmpp.getXmppLog();\r\n\r\n    if (log) {\r\n        metadata.xmpp = log;\r\n    }\r\n\r\n    data.metadata = metadata;\r\n\r\n    return data;\r\n};\r\n","/* global __filename, $, Promise */\r\n\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport JitsiParticipant from './JitsiParticipant';\r\nimport JitsiTrackError from './JitsiTrackError';\r\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\r\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\r\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\r\nimport IceFailedHandling\r\n    from './modules/connectivity/IceFailedHandling';\r\nimport ParticipantConnectionStatusHandler\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\r\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\r\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\r\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\r\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\r\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\r\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\r\nimport E2ePing from './modules/e2eping/e2eping';\r\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\r\nimport { QualityController } from './modules/qualitycontrol/QualityController';\r\nimport RecordingManager from './modules/recording/RecordingManager';\r\nimport Settings from './modules/settings/Settings';\r\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\r\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\r\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport Transcriber from './modules/transcription/transcriber';\r\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\r\nimport RandomUtil from './modules/util/RandomUtil';\r\nimport ComponentsVersions from './modules/version/ComponentsVersions';\r\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\r\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\r\nimport { JITSI_MEET_MUC_TYPE } from './modules/xmpp/xmpp';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport VideoType from './service/RTC/VideoType';\r\nimport {\r\n    ACTION_JINGLE_RESTART,\r\n    ACTION_JINGLE_SI_RECEIVED,\r\n    ACTION_JINGLE_SI_TIMEOUT,\r\n    ACTION_JINGLE_TERMINATE,\r\n    ACTION_P2P_DECLINED,\r\n    ACTION_P2P_ESTABLISHED,\r\n    ACTION_P2P_FAILED,\r\n    ACTION_P2P_SWITCH_TO_JVB,\r\n    ICE_ESTABLISHMENT_DURATION_DIFF,\r\n    createConferenceEvent,\r\n    createJingleEvent,\r\n    createP2PEvent\r\n} from './service/statistics/AnalyticsEvents';\r\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\r\nimport FeatureFlags from './modules/flags/FeatureFlags';\r\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * How long since Jicofo is supposed to send a session-initiate, before\r\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\r\n * @type {number}\r\n */\r\nconst JINGLE_SI_TIMEOUT = 5000;\r\n\r\n/**\r\n * Creates a JitsiConference object with the given name and properties.\r\n * Note: this constructor is not a part of the public API (objects should be\r\n * created using JitsiConnection.createConference).\r\n * @param options.config properties / settings related to the conference that\r\n * will be created.\r\n * @param options.name the name of the conference\r\n * @param options.connection the JitsiConnection object for this\r\n * JitsiConference.\r\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\r\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\r\n * calculated and submitted to the analytics module.\r\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\r\n * restart logic.\r\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\r\n * the peer to peer mode will be enabled. It means that when there are only 2\r\n * participants in the conference an attempt to make direct connection will be\r\n * made. If the connection succeeds the conference will stop sending data\r\n * through the JVB connection and will use the direct one instead.\r\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\r\n * seconds, before the conference switches back to P2P, after the 3rd\r\n * participant has left the room.\r\n * @param {number} [options.config.channelLastN=-1] The requested amount of\r\n * videos are going to be delivered after the value is in effect. Set to -1 for\r\n * unlimited or all available videos.\r\n * @param {number} [options.config.forceJVB121Ratio]\r\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\r\n * conference should be moved to the JVB instead of P2P. The decision is made on\r\n * the responder side, after ICE succeeds on the P2P connection.\r\n * @param {*} [options.config.openBridgeChannel] Which kind of communication to\r\n * open with the videobridge. Values can be \"datachannel\", \"websocket\", true\r\n * (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false\r\n * (don't open any channel).\r\n * @constructor\r\n *\r\n * FIXME Make all methods which are called from lib-internal classes\r\n *       to non-public (use _). To name a few:\r\n *       {@link JitsiConference.onLocalRoleChanged}\r\n *       {@link JitsiConference.onUserRoleChanged}\r\n *       {@link JitsiConference.onMemberLeft}\r\n *       and so on...\r\n */\r\nexport default function JitsiConference(options) {\r\n    if (!options.name || options.name.toLowerCase() !== options.name) {\r\n        const errmsg\r\n            = 'Invalid conference name (no conference name passed or it '\r\n                + 'contains invalid characters like capital letters)!';\r\n\r\n        logger.error(errmsg);\r\n        throw new Error(errmsg);\r\n    }\r\n    this.eventEmitter = new EventEmitter();\r\n    this.options = options;\r\n    this.eventManager = new JitsiConferenceEventManager(this);\r\n    this.participants = {};\r\n\r\n    this._signalingLayer = new SignalingLayerImpl();\r\n\r\n    this._init(options);\r\n    this.componentsVersions = new ComponentsVersions(this);\r\n\r\n    /**\r\n     * Jingle session instance for the JVB connection.\r\n     * @type {JingleSessionPC}\r\n     */\r\n    this.jvbJingleSession = null;\r\n    this.lastDominantSpeaker = null;\r\n    this.dtmfManager = null;\r\n    this.somebodySupportsDTMF = false;\r\n    this.authEnabled = false;\r\n    this.startAudioMuted = false;\r\n    this.startVideoMuted = false;\r\n    this.startMutedPolicy = {\r\n        audio: false,\r\n        video: false\r\n    };\r\n    this.isMutedByFocus = false;\r\n\r\n    // when muted by focus we receive the jid of the initiator of the mute\r\n    this.mutedByFocusActor = null;\r\n\r\n    // Flag indicates if the 'onCallEnded' method was ever called on this\r\n    // instance. Used to log extra analytics event for debugging purpose.\r\n    // We need to know if the potential issue happened before or after\r\n    // the restart.\r\n    this.wasStopped = false;\r\n\r\n    // Conference properties, maintained by jicofo.\r\n    this.properties = {};\r\n\r\n    /**\r\n     * The object which monitors local and remote connection statistics (e.g.\r\n     * sending bitrate) and calculates a number which represents the connection\r\n     * quality.\r\n     */\r\n    this.connectionQuality\r\n        = new ConnectionQuality(this, this.eventEmitter, options);\r\n\r\n    /**\r\n     * Reports average RTP statistics to the analytics module.\r\n     * @type {AvgRTPStatsReporter}\r\n     */\r\n    this.avgRtpStatsReporter\r\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\r\n\r\n    /**\r\n     * Detects issues with the audio of remote participants.\r\n     * @type {AudioOutputProblemDetector}\r\n     */\r\n    this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\r\n\r\n    /**\r\n     * Indicates whether the connection is interrupted or not.\r\n     */\r\n    this.isJvbConnectionInterrupted = false;\r\n\r\n    /**\r\n     * The object which tracks active speaker times\r\n     */\r\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\r\n\r\n    /* P2P related fields below: */\r\n\r\n    /**\r\n     * Stores reference to deferred start P2P task. It's created when 3rd\r\n     * participant leaves the room in order to avoid ping pong effect (it\r\n     * could be just a page reload).\r\n     * @type {number|null}\r\n     */\r\n    this.deferredStartP2PTask = null;\r\n\r\n    const delay\r\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\r\n\r\n    /**\r\n     * A delay given in seconds, before the conference switches back to P2P\r\n     * after the 3rd participant has left.\r\n     * @type {number}\r\n     */\r\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\r\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\r\n\r\n    /**\r\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\r\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\r\n     * and running.\r\n     * @type {boolean}\r\n     */\r\n    this.isP2PConnectionInterrupted = false;\r\n\r\n    /**\r\n     * Flag set to <tt>true</tt> when P2P session has been established\r\n     * (ICE has been connected) and this conference is currently in the peer to\r\n     * peer mode (P2P connection is the active one).\r\n     * @type {boolean}\r\n     */\r\n    this.p2p = false;\r\n\r\n    /**\r\n     * A JingleSession for the direct peer to peer connection.\r\n     * @type {JingleSessionPC}\r\n     */\r\n    this.p2pJingleSession = null;\r\n\r\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\r\n    this.recordingManager = new RecordingManager(this.room);\r\n\r\n    /**\r\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\r\n     *\r\n     * @type {undefined|number}\r\n     * @private\r\n     */\r\n    this._conferenceJoinAnalyticsEventSent = undefined;\r\n\r\n    /**\r\n     * End-to-End Encryption. Make it available if supported.\r\n     */\r\n    if (this.isE2EESupported()) {\r\n        logger.info('End-to-End Encryprtion is supported');\r\n\r\n        this._e2eEncryption = new E2EEncryption(this);\r\n    }\r\n}\r\n\r\n// FIXME convert JitsiConference to ES6 - ASAP !\r\nJitsiConference.prototype.constructor = JitsiConference;\r\n\r\n/**\r\n * Create a resource for the a jid. We use the room nickname (the resource part\r\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\r\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\r\n * into a 32bit field.\r\n *\r\n * @param {string} jid - The id set onto the XMPP connection.\r\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\r\n * to the XMPP service with a password.\r\n * @returns {string}\r\n * @static\r\n */\r\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\r\n    let mucNickname;\r\n\r\n    //Bizwell. nickname is loginID. by.jhhan\r\n    mucNickname = Strophe.getNodeFromJid(jid);\r\n    mucNickname += \"$\";\r\n    mucNickname += RandomUtil.randomHexString(8).toLowerCase();\r\n    /*\r\n\tif (isAuthenticatedUser) {\r\n        // For authenticated users generate a random ID.\r\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\r\n    } else {\r\n        // We try to use the first part of the node (which for anonymous users\r\n        // on prosody is a UUID) to match the previous behavior (and maybe make\r\n        // debugging easier).\r\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\r\n            .toLowerCase();\r\n\r\n        // But if this doesn't have the required format we just generate a new\r\n        // random nickname.\r\n        const re = /[0-9a-f]{8}/g;\r\n\r\n        if (!re.test(mucNickname)) {\r\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\r\n        }\r\n    }\r\n\t*/\r\n\r\n    return mucNickname;\r\n};\r\n\r\n/**\r\n * Initializes the conference object properties\r\n * @param options {object}\r\n * @param options.connection {JitsiConnection} overrides this.connection\r\n */\r\nJitsiConference.prototype._init = function(options = {}) {\r\n    // Override connection and xmpp properties (Useful if the connection\r\n    // reloaded)\r\n    if (options.connection) {\r\n        this.connection = options.connection;\r\n        this.xmpp = this.connection.xmpp;\r\n\r\n        // Setup XMPP events only if we have new connection object.\r\n        this.eventManager.setupXMPPListeners();\r\n    }\r\n\r\n    const { config } = this.options;\r\n\r\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\r\n    this.room = this.xmpp.createRoom(\r\n        this.options.name, {\r\n            ...config,\r\n            statsId: this._statsCurrentId\r\n        },\r\n        JitsiConference.resourceCreator\r\n    );\r\n\r\n    this._signalingLayer.setChatRoom(this.room);\r\n\r\n    // Connection interrupted/restored listeners\r\n    this._onIceConnectionInterrupted\r\n        = this._onIceConnectionInterrupted.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\r\n\r\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\r\n\r\n    this._onIceConnectionEstablished\r\n        = this._onIceConnectionEstablished.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\r\n\r\n    this._updateProperties = this._updateProperties.bind(this);\r\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\r\n        this._updateProperties);\r\n\r\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\r\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\r\n\r\n    this.e2eping = new E2ePing(\r\n        this,\r\n        config,\r\n        (message, to) => {\r\n            try {\r\n                this.sendMessage(\r\n                    message, to, true /* sendThroughVideobridge */);\r\n            } catch (error) {\r\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\r\n            }\r\n        });\r\n\r\n    if (!this.rtc) {\r\n        this.rtc = new RTC(this, options);\r\n        this.eventManager.setupRTCListeners();\r\n    }\r\n\r\n    this.qualityController = new QualityController(this);\r\n\r\n    this.participantConnectionStatus\r\n        = new ParticipantConnectionStatusHandler(\r\n            this.rtc,\r\n            this,\r\n            {\r\n                // Both these options are not public API, leaving it here only\r\n                // as an entry point through config for tuning up purposes.\r\n                // Default values should be adjusted as soon as optimal values\r\n                // are discovered.\r\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\r\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\r\n            });\r\n    this.participantConnectionStatus.init();\r\n\r\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\r\n    let enableCallStats = true;\r\n\r\n    if (config.testing && config.testing.callStatsThreshold) {\r\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\r\n    }\r\n\r\n    if (!this.statistics) {\r\n        this.statistics = new Statistics(this.xmpp, {\r\n            aliasName: this._statsCurrentId,\r\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\r\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\r\n            siteID: config.siteID,\r\n            customScriptUrl: config.callStatsCustomScriptUrl,\r\n            callStatsID: config.callStatsID,\r\n            callStatsSecret: config.callStatsSecret,\r\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\r\n            enableCallStats,\r\n            roomName: this.options.name,\r\n            applicationName: config.applicationName,\r\n            getWiFiStatsMethod: config.getWiFiStatsMethod\r\n        });\r\n        Statistics.analytics.addPermanentProperties({\r\n            'callstats_name': this._statsCurrentId\r\n        });\r\n\r\n        // Start performance observer for monitoring long tasks\r\n        if (config.longTasksStatsInterval) {\r\n            this.statistics.attachLongTasksStats(this);\r\n        }\r\n    }\r\n\r\n    this.eventManager.setupChatRoomListeners();\r\n\r\n    // Always add listeners because on reload we are executing leave and the\r\n    // listeners are removed from statistics module.\r\n    this.eventManager.setupStatisticsListeners();\r\n\r\n    // Disable VAD processing on Safari since it causes audio input to\r\n    // fail on some of the mobile devices.\r\n    if (config.enableTalkWhileMuted && !browser.isSafari()) {\r\n\r\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\r\n        // based detection.\r\n        if (config.createVADProcessor) {\r\n            logger.info('Using VAD detection for generating talk while muted events');\r\n\r\n            if (!this._audioAnalyser) {\r\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\r\n            }\r\n\r\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\r\n\r\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\r\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\r\n\r\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\r\n        } else {\r\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\r\n        }\r\n    }\r\n\r\n    // Disable noisy mic detection on safari since it causes the audio input to\r\n    // fail on Safari on iPadOS.\r\n    if (config.enableNoisyMicDetection && !browser.isSafari()) {\r\n        if (config.createVADProcessor) {\r\n            if (!this._audioAnalyser) {\r\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\r\n            }\r\n\r\n            const vadNoiseDetection = new VADNoiseDetection();\r\n\r\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\r\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\r\n\r\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\r\n        } else {\r\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\r\n        }\r\n    }\r\n\r\n    // Generates events based on no audio input detector.\r\n    if (config.enableNoAudioDetection) {\r\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\r\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\r\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\r\n        });\r\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\r\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\r\n        });\r\n    }\r\n\r\n\r\n    if ('channelLastN' in config) {\r\n        this.setLastN(config.channelLastN);\r\n    }\r\n\r\n    /**\r\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\r\n     * @type {Jvb121EventGenerator}\r\n     */\r\n    this.jvb121Status = new Jvb121EventGenerator(this);\r\n\r\n    // creates dominant speaker detection that works only in p2p mode\r\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\r\n\r\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\r\n        this.setLocalParticipantProperty(\r\n            'region', config.deploymentInfo.userRegion);\r\n    }\r\n};\r\n\r\n/**\r\n * Joins the conference.\r\n * @param password {string} the password\r\n */\r\nJitsiConference.prototype.join = function(password) {\r\n    if (this.room) {\r\n        this.room.join(password).then(() => this._maybeSetSITimeout());\r\n    }\r\n};\r\n\r\n/**\r\n * Authenticates and upgrades the role of the local participant/user.\r\n *\r\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\r\n * authenticating and upgrading the role of the local participant/user finishes\r\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\r\n * process.\r\n */\r\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\r\n    return authenticateAndUpgradeRole.call(this, {\r\n        ...options,\r\n        onCreateResource: JitsiConference.resourceCreator\r\n    });\r\n};\r\n\r\n/**\r\n * Check if joined to the conference.\r\n */\r\nJitsiConference.prototype.isJoined = function() {\r\n    return this.room && this.room.joined;\r\n};\r\n\r\n/**\r\n * Tells whether or not the P2P mode is enabled in the configuration.\r\n * @return {boolean}\r\n */\r\nJitsiConference.prototype.isP2PEnabled = function() {\r\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\r\n\r\n        // FIXME: remove once we have a default config template. -saghul\r\n        || typeof this.options.config.p2p === 'undefined';\r\n};\r\n\r\n/**\r\n * When in P2P test mode, the conference will not automatically switch to P2P\r\n * when there 2 participants.\r\n * @return {boolean}\r\n */\r\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\r\n    return Boolean(this.options.config.testing\r\n        && this.options.config.testing.p2pTestMode);\r\n};\r\n\r\n/**\r\n * Leaves the conference.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.leave = function() {\r\n    if (this.participantConnectionStatus) {\r\n        this.participantConnectionStatus.dispose();\r\n        this.participantConnectionStatus = null;\r\n    }\r\n    if (this.avgRtpStatsReporter) {\r\n        this.avgRtpStatsReporter.dispose();\r\n        this.avgRtpStatsReporter = null;\r\n    }\r\n\r\n    if (this._audioOutputProblemDetector) {\r\n        this._audioOutputProblemDetector.dispose();\r\n        this._audioOutputProblemDetector = null;\r\n    }\r\n\r\n    if (this.e2eping) {\r\n        this.e2eping.stop();\r\n        this.e2eping = null;\r\n    }\r\n\r\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\r\n\r\n    this.rtc.closeBridgeChannel();\r\n\r\n    this._sendConferenceLeftAnalyticsEvent();\r\n\r\n    if (this.statistics) {\r\n        this.statistics.dispose();\r\n    }\r\n\r\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\r\n\r\n    // Close both JVb and P2P JingleSessions\r\n    if (this.jvbJingleSession) {\r\n        this.jvbJingleSession.close();\r\n        this.jvbJingleSession = null;\r\n    }\r\n    if (this.p2pJingleSession) {\r\n        this.p2pJingleSession.close();\r\n        this.p2pJingleSession = null;\r\n    }\r\n\r\n    // leave the conference\r\n    if (this.room) {\r\n        const room = this.room;\r\n\r\n        // Unregister connection state listeners\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_INTERRUPTED,\r\n            this._onIceConnectionInterrupted);\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_RESTORED,\r\n            this._onIceConnectionRestored);\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_ESTABLISHED,\r\n            this._onIceConnectionEstablished);\r\n\r\n        room.removeListener(\r\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\r\n            this._updateProperties);\r\n\r\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\r\n\r\n        this.eventManager.removeXMPPListeners();\r\n\r\n        this.room = null;\r\n\r\n        this._signalingLayer.setChatRoom(null);\r\n\r\n        return room.leave()\r\n            .then(() => {\r\n                if (this.rtc) {\r\n                    this.rtc.destroy();\r\n                }\r\n            })\r\n            .catch(error => {\r\n                // remove all participants because currently the conference\r\n                // won't be usable anyway. This is done on success automatically\r\n                // by the ChatRoom instance.\r\n                this.getParticipants().forEach(\r\n                    participant => this.onMemberLeft(participant.getJid()));\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    // If this.room == null we are calling second time leave().\r\n    return Promise.reject(\r\n        new Error('The conference is has been already left'));\r\n};\r\n\r\n/**\r\n * Returns the currently active media session if any.\r\n *\r\n * @returns {JingleSessionPC|undefined}\r\n * @private\r\n */\r\nJitsiConference.prototype._getActiveMediaSession = function() {\r\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\r\n};\r\n\r\n/**\r\n * Returns an array containing all media sessions existing in this conference.\r\n *\r\n * @returns {Array<JingleSessionPC>}\r\n * @private\r\n */\r\nJitsiConference.prototype._getMediaSessions = function() {\r\n    const sessions = [];\r\n\r\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\r\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\r\n\r\n    return sessions;\r\n};\r\n\r\n/**\r\n * Returns name of this conference.\r\n */\r\nJitsiConference.prototype.getName = function() {\r\n    return this.options.name;\r\n};\r\n\r\n/**\r\n * Returns the {@link JitsiConnection} used by this this conference.\r\n */\r\nJitsiConference.prototype.getConnection = function() {\r\n    return this.connection;\r\n};\r\n\r\n/**\r\n * Check if authentication is enabled for this conference.\r\n */\r\nJitsiConference.prototype.isAuthEnabled = function() {\r\n    return this.authEnabled;\r\n};\r\n\r\n/**\r\n * Check if user is logged in.\r\n */\r\nJitsiConference.prototype.isLoggedIn = function() {\r\n    return Boolean(this.authIdentity);\r\n};\r\n\r\n/**\r\n * Get authorized login.\r\n */\r\nJitsiConference.prototype.getAuthLogin = function() {\r\n    return this.authIdentity;\r\n};\r\n\r\n/**\r\n * Check if external authentication is enabled for this conference.\r\n */\r\nJitsiConference.prototype.isExternalAuthEnabled = function() {\r\n    return this.room && this.room.moderator.isExternalAuthEnabled();\r\n};\r\n\r\n/**\r\n * Get url for external authentication.\r\n * @param {boolean} [urlForPopup] if true then return url for login popup,\r\n *                                else url of login page.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\r\n    return new Promise((resolve, reject) => {\r\n        if (!this.isExternalAuthEnabled()) {\r\n            reject();\r\n\r\n            return;\r\n        }\r\n        if (urlForPopup) {\r\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\r\n        } else {\r\n            this.room.moderator.getLoginUrl(resolve, reject);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Returns the local tracks of the given media type, or all local tracks if no\r\n * specific type is given.\r\n * @param {MediaType} [mediaType] Optional media type (audio or video).\r\n */\r\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\r\n    let tracks = [];\r\n\r\n    if (this.rtc) {\r\n        tracks = this.rtc.getLocalTracks(mediaType);\r\n    }\r\n\r\n    return tracks;\r\n};\r\n\r\n/**\r\n * Obtains local audio track.\r\n * @return {JitsiLocalTrack|null}\r\n */\r\nJitsiConference.prototype.getLocalAudioTrack = function() {\r\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\r\n};\r\n\r\n/**\r\n * Obtains local video track.\r\n * @return {JitsiLocalTrack|null}\r\n */\r\nJitsiConference.prototype.getLocalVideoTrack = function() {\r\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\r\n};\r\n\r\n/**\r\n * Obtains the performance statistics.\r\n * @returns {Object|null}\r\n */\r\nJitsiConference.prototype.getPerformanceStats = function() {\r\n    return {\r\n        longTasksStats: this.statistics.getLongTasksStats()\r\n    };\r\n};\r\n\r\n/**\r\n * Attaches a handler for events(For example - \"participant joined\".) in the\r\n * conference. All possible event are defined in JitsiConferenceEvents.\r\n * @param eventId the event ID.\r\n * @param handler handler for the event.\r\n *\r\n * Note: consider adding eventing functionality by extending an EventEmitter\r\n * impl, instead of rolling ourselves\r\n */\r\nJitsiConference.prototype.on = function(eventId, handler) {\r\n    if (this.eventEmitter) {\r\n        this.eventEmitter.on(eventId, handler);\r\n    }\r\n};\r\n\r\n/**\r\n * Removes event listener\r\n * @param eventId the event ID.\r\n * @param [handler] optional, the specific handler to unbind\r\n *\r\n * Note: consider adding eventing functionality by extending an EventEmitter\r\n * impl, instead of rolling ourselves\r\n */\r\nJitsiConference.prototype.off = function(eventId, handler) {\r\n    if (this.eventEmitter) {\r\n        this.eventEmitter.removeListener(eventId, handler);\r\n    }\r\n};\r\n\r\n// Common aliases for event emitter\r\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\r\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\r\n\r\n/**\r\n * Receives notifications from other participants about commands / custom events\r\n * (sent by sendCommand or sendCommandOnce methods).\r\n * @param command {String} the name of the command\r\n * @param handler {Function} handler for the command\r\n */\r\nJitsiConference.prototype.addCommandListener = function(command, handler) {\r\n    if (this.room) {\r\n        this.room.addPresenceListener(command, handler);\r\n    }\r\n};\r\n\r\n/**\r\n  * Removes command  listener\r\n  * @param command {String} the name of the command\r\n  * @param handler {Function} handler to remove for the command\r\n  */\r\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\r\n    if (this.room) {\r\n        this.room.removePresenceListener(command, handler);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends text message to the other participants in the conference\r\n * @param message the text message.\r\n * @param elementName the element name to encapsulate the message.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendTextMessage = function(\r\n        message, elementName = 'body') {\r\n    if (this.room) {\r\n        const displayName = (this.room.getFromPresence('nick') || {}).value;\r\n\r\n        this.room.sendMessage(message, elementName, displayName);\r\n    }\r\n};\r\n\r\n/**\r\n * Send private text message to another participant of the conference\r\n * @param id the id of the participant to send a private message.\r\n * @param message the text message.\r\n * @param elementName the element name to encapsulate the message.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendPrivateTextMessage = function(\r\n        id, message, elementName = 'body') {\r\n    if (this.room) {\r\n        this.room.sendPrivateMessage(id, message, elementName);\r\n    }\r\n};\r\n\r\n/**\r\n * Send presence command.\r\n * @param name {String} the name of the command.\r\n * @param values {Object} with keys and values that will be sent.\r\n **/\r\nJitsiConference.prototype.sendCommand = function(name, values) {\r\n    if (this.room) {\r\n        this.room.addToPresence(name, values);\r\n        this.room.sendPresence();\r\n    } else {\r\n        logger.warn('Not sending a command, room not initialized.');\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Send presence command one time.\r\n * @param name {String} the name of the command.\r\n * @param values {Object} with keys and values that will be sent.\r\n **/\r\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\r\n    this.sendCommand(name, values);\r\n    this.removeCommand(name);\r\n};\r\n\r\n/**\r\n * Removes presence command.\r\n * @param name {String} the name of the command.\r\n **/\r\nJitsiConference.prototype.removeCommand = function(name) {\r\n    if (this.room) {\r\n        this.room.removeFromPresence(name);\r\n    }\r\n};\r\n\r\n/**\r\n * Sets the display name for this conference.\r\n * @param name the display name to set\r\n */\r\nJitsiConference.prototype.setDisplayName = function(name) {\r\n    if (this.room) {\r\n        this.room.addToPresence('nick', {\r\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\r\n            value: name\r\n        });\r\n        this.room.sendPresence();\r\n    }\r\n};\r\n\r\n/**\r\n * Set new subject for this conference. (available only for moderator)\r\n * @param {string} subject new subject\r\n */\r\nJitsiConference.prototype.setSubject = function(subject) {\r\n    if (this.room && this.isModerator()) {\r\n        this.room.setSubject(subject);\r\n    }\r\n};\r\n\r\n/**\r\n * Get a transcriber object for all current participants in this conference\r\n * @return {Transcriber} the transcriber object\r\n */\r\nJitsiConference.prototype.getTranscriber = function() {\r\n    if (this.transcriber === undefined) {\r\n        this.transcriber = new Transcriber();\r\n\r\n        // add all existing local audio tracks to the transcriber\r\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\r\n\r\n        for (const localAudio of localAudioTracks) {\r\n            this.transcriber.addTrack(localAudio);\r\n        }\r\n\r\n        // and all remote audio tracks\r\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\r\n\r\n        for (const remoteTrack of remoteAudioTracks) {\r\n            this.transcriber.addTrack(remoteTrack);\r\n        }\r\n    }\r\n\r\n    return this.transcriber;\r\n};\r\n\r\n/**\r\n * Returns the transcription status.\r\n *\r\n * @returns {String} \"on\" or \"off\".\r\n */\r\nJitsiConference.prototype.getTranscriptionStatus = function() {\r\n    return this.room.transcriptionStatus;\r\n};\r\n\r\n/**\r\n * Adds JitsiLocalTrack object to the conference.\r\n * @param track the JitsiLocalTrack object.\r\n * @returns {Promise<JitsiLocalTrack>}\r\n * @throws {Error} if the specified track is a video track and there is already\r\n * another video track in the conference.\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.12\r\n */\r\nJitsiConference.prototype.addTrack = function(track) {\r\n    const mediaType = track.getType();\r\n    const localTracks = this.rtc.getLocalTracks(mediaType);\r\n\r\n    // Ensure there's exactly 1 local track of each media type in the conference.\r\n    if (localTracks.length > 0) {\r\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\r\n        if (track === localTracks[0]) {\r\n            return Promise.resolve(track);\r\n        }\r\n\r\n        if (FeatureFlags.isMultiStreamSupportEnabled() && mediaType === MediaType.VIDEO) {\r\n            const addTrackPromises = [];\r\n\r\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTracks([ track ]));\r\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTracks([ track ]));\r\n\r\n            return Promise.all(addTrackPromises)\r\n                .then(() => {\r\n                    this._setupNewTrack(track);\r\n                    this._sendBridgeVideoTypeMessage(track);\r\n                    this._updateRoomPresence(this._getActiveMediaSession());\r\n\r\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\r\n                        this._fireMuteChangeEvent(track);\r\n                    }\r\n                });\r\n        }\r\n\r\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\r\n    }\r\n};\r\n\r\n/**\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.12\r\n * @param {*} jingleSession \r\n * @param {*} ctx \r\n * @returns \r\n */\r\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\r\n    if (!jingleSession) {\r\n        return;\r\n    }\r\n\r\n    // skips sending presence twice for the same pass of updating ssrcs\r\n    if (ctx) {\r\n        if (ctx.skip) {\r\n            return;\r\n        }\r\n        ctx.skip = true;\r\n    }\r\n\r\n    let presenceChanged = false;\r\n    let muteStatusChanged, videoTypeChanged;\r\n    const localTracks = this.getLocalTracks();\r\n    const localAudioTracks = jingleSession.peerconnection.getLocalTracks(MediaType.AUDIO);\r\n    const localVideoTracks = jingleSession.peerconnection.getLocalTracks(MediaType.VIDEO);\r\n\r\n    // Set presence for all the available local tracks.\r\n    for (const track of localTracks) {\r\n        muteStatusChanged = this._setTrackMuteStatus(track.getType(), track, track.isMuted());\r\n        if (track.getType() === MediaType.VIDEO) {\r\n            videoTypeChanged = this._setNewVideoType(track);\r\n        }\r\n        presenceChanged = muteStatusChanged || videoTypeChanged;\r\n    }\r\n\r\n    // Set the presence in the legacy format if there are no local tracks and multi stream support is not enabled.\r\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\r\n        let audioMuteStatusChanged, videoMuteStatusChanged;\r\n\r\n        if (!localAudioTracks?.length) {\r\n            audioMuteStatusChanged = this._setTrackMuteStatus(MediaType.AUDIO, undefined, true);\r\n        }\r\n        if (!localVideoTracks?.length) {\r\n            videoMuteStatusChanged = this._setTrackMuteStatus(MediaType.VIDEO, undefined, true);\r\n            videoTypeChanged = this._setNewVideoType();\r\n        }\r\n\r\n        presenceChanged = presenceChanged || audioMuteStatusChanged || videoMuteStatusChanged || videoTypeChanged;\r\n    }\r\n\r\n    presenceChanged && this.room.sendPresence();\r\n};\r\n\r\n/**\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.12\r\n * Sets the video type.\r\n * @param track\r\n * @return <tt>true</tt> if video type was changed in presence.\r\n * @private\r\n */\r\n JitsiConference.prototype._setNewVideoType = function(track) {\r\n    let videoTypeChanged = false;\r\n\r\n    if (FeatureFlags.isSourceNameSignalingEnabled() && track) {\r\n        videoTypeChanged = this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\r\n    }\r\n\r\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\r\n        const videoTypeTagName = 'videoType';\r\n\r\n        // If track is missing we revert to default type Camera, the case where we screenshare and\r\n        // we return to be video muted.\r\n        const trackVideoType = track ? track.videoType : VideoType.CAMERA;\r\n\r\n        // If video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\r\n        if (trackVideoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\r\n            // We will not use this.sendCommand here to avoid sending the presence immediately, as later we may also\r\n            // set the mute status.\r\n            const legacyTypeChanged = this.room.addOrReplaceInPresence(videoTypeTagName, { value: trackVideoType });\r\n\r\n            videoTypeChanged = videoTypeChanged || legacyTypeChanged;\r\n        }\r\n    }\r\n\r\n    return videoTypeChanged;\r\n};\r\n\r\n/**\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.12\r\n * Sets mute status.\r\n * @param mediaType\r\n * @param localTrack\r\n * @param isMuted\r\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\r\n * @private\r\n */\r\n JitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\r\n    let presenceChanged = false;\r\n\r\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localTrack) {\r\n        presenceChanged = this._signalingLayer.setTrackMuteStatus(localTrack.getSourceName(), isMuted);\r\n    }\r\n\r\n    // Add the 'audioMuted' and 'videoMuted' tags when source name signaling is enabled for backward compatibility.\r\n    // It won't be used anymore when multiple stream support is enabled.\r\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\r\n        let audioMuteChanged, videoMuteChanged;\r\n\r\n        if (!this.room) {\r\n            return false;\r\n        }\r\n\r\n        if (mediaType === MediaType.AUDIO) {\r\n            audioMuteChanged = this.room.addAudioInfoToPresence(isMuted);\r\n        } else {\r\n            videoMuteChanged = this.room.addVideoInfoToPresence(isMuted);\r\n        }\r\n\r\n        presenceChanged = presenceChanged || audioMuteChanged || videoMuteChanged;\r\n    }\r\n\r\n    return presenceChanged;\r\n};\r\n\r\n\r\n/**\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.12\r\n * @param {*} localtrack \r\n */\r\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\r\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\r\n\r\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\r\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\r\n    }\r\n\r\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localtrack) {\r\n        this.rtc.sendSourceVideoType(localtrack.getSourceName(), videoType);\r\n    } else if (!FeatureFlags.isSourceNameSignalingEnabled()) {\r\n        this.rtc.setVideoType(videoType);\r\n    }\r\n};\r\n\r\n/**\r\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\r\n * @param {number} audioLevel the audio level\r\n * @param {TraceablePeerConnection} [tpc]\r\n */\r\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\r\n        audioLevel,\r\n        tpc) {\r\n    const activeTpc = this.getActivePeerConnection();\r\n\r\n    // There will be no TraceablePeerConnection if audio levels do not come from\r\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\r\n    // Audio Analyser API and emits local audio levels events through\r\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\r\n    // optional.\r\n    if (!tpc || activeTpc === tpc) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n            this.myUserId(), audioLevel);\r\n    }\r\n};\r\n\r\n/**\r\n * Fires TRACK_MUTE_CHANGED change conference event.\r\n * @param track the JitsiTrack object related to the event.\r\n */\r\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\r\n    // check if track was muted by focus and now is unmuted by user\r\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\r\n        this.isMutedByFocus = false;\r\n\r\n        // unmute local user on server\r\n        this.room.muteParticipant(this.room.myroomjid, false);\r\n    }\r\n\r\n    let actorParticipant;\r\n\r\n    if (this.mutedByFocusActor) {\r\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\r\n\r\n        actorParticipant = this.participants[actorId];\r\n    }\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\r\n};\r\n\r\n/**\r\n * Clear JitsiLocalTrack properties and listeners.\r\n * @param track the JitsiLocalTrack object.\r\n */\r\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\r\n    track._setConference(null);\r\n    this.rtc.removeLocalTrack(track);\r\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n        track.muteHandler);\r\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n        track.audioLevelHandler);\r\n\r\n    // send event for stopping screen sharing\r\n    // FIXME: we assume we have only one screen sharing track\r\n    // if we change this we need to fix this check\r\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\r\n        this.statistics.sendScreenSharingEvent(false);\r\n    }\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\r\n};\r\n\r\n/**\r\n * Removes JitsiLocalTrack from the conference and performs\r\n * a new offer/answer cycle.\r\n * @param {JitsiLocalTrack} track\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.removeTrack = function(track) {\r\n    return this.replaceTrack(track, null);\r\n};\r\n\r\n/**\r\n * Replaces oldTrack with newTrack and performs a single offer/answer\r\n *  cycle after both operations are done.  Either oldTrack or newTrack\r\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\r\n *  effectively just removes 'oldTrack'\r\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\r\n * @param {JitsiLocalTrack} newTrack the new stream to use\r\n * @returns {Promise} resolves when the replacement is finished\r\n */\r\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\r\n    // First do the removal of the oldTrack at the JitsiConference level\r\n    if (oldTrack) {\r\n        if (oldTrack.disposed) {\r\n            return Promise.reject(\r\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\r\n        }\r\n    }\r\n    if (newTrack) {\r\n        if (newTrack.disposed) {\r\n            return Promise.reject(\r\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\r\n        }\r\n    }\r\n\r\n    // Now replace the stream at the lower levels\r\n    return this._doReplaceTrack(oldTrack, newTrack)\r\n        .then(() => {\r\n            if (oldTrack) {\r\n                this.onLocalTrackRemoved(oldTrack);\r\n            }\r\n            if (newTrack) {\r\n                // Now handle the addition of the newTrack at the\r\n                // JitsiConference level\r\n                this._setupNewTrack(newTrack);\r\n            }\r\n\r\n            return Promise.resolve();\r\n        }, error => Promise.reject(new Error(error)));\r\n};\r\n\r\n/**\r\n * Replaces the tracks at the lower level by going through the Jingle session\r\n * and WebRTC peer connection. The method will resolve immediately if there is\r\n * currently no JingleSession started.\r\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\r\n * the process or <tt>null</t> if the method should act as \"add track\"\r\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\r\n * <tt>null</tt> if the method should act as \"remove track\"\r\n * @return {Promise} resolved when the process is done or rejected with a string\r\n * which describes the error.\r\n * @private\r\n */\r\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\r\n    const replaceTrackPromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        replaceTrackPromises.push(\r\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\r\n    } else {\r\n        logger.info('_doReplaceTrack - no JVB JingleSession');\r\n    }\r\n\r\n    if (this.p2pJingleSession) {\r\n        replaceTrackPromises.push(\r\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\r\n    } else {\r\n        logger.info('_doReplaceTrack - no P2P JingleSession');\r\n    }\r\n\r\n    return Promise.all(replaceTrackPromises);\r\n};\r\n\r\n/**\r\n * Operations related to creating a new track\r\n * @param {JitsiLocalTrack} newTrack the new track being created\r\n */\r\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\r\n    const mediaType = newTrack.getType();\r\n\r\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\r\n        // Report active device to statistics\r\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\r\n        const device = devices\r\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\r\n\r\n        if (device) {\r\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\r\n        }\r\n    }\r\n\r\n    // Create a source name for this track if it doesn't exist.\r\n    if (FeatureFlags.isSourceNameSignalingEnabled() && !newTrack.getSourceName()) {\r\n        const sourceName = getSourceNameForJitsiTrack(\r\n            this.myUserId(),\r\n            mediaType,\r\n            this.getLocalTracks(mediaType)?.length);\r\n\r\n        newTrack.setSourceName(sourceName);\r\n    }\r\n\r\n    this.rtc.addLocalTrack(newTrack);\r\n    newTrack._setConference(this);\r\n\r\n    // Add event handlers.\r\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\r\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\r\n\r\n    if (newTrack.isAudioTrack()) {\r\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\r\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\r\n    }\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\r\n};\r\n\r\n/**\r\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\r\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\r\n * removed on video mute).\r\n * @param {JitsiLocalTrack} track the local track that will be added as part of\r\n * the unmute operation.\r\n * @return {Promise} resolved when the process is done or rejected with a string\r\n * which describes the error.\r\n */\r\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\r\n    const addAsUnmutePromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\r\n    } else {\r\n        logger.info(\r\n            'Add local MediaStream as unmute -'\r\n                + ' no JVB Jingle session started yet');\r\n    }\r\n\r\n    if (this.p2pJingleSession) {\r\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\r\n    } else {\r\n        logger.info(\r\n            'Add local MediaStream as unmute -'\r\n                + ' no P2P Jingle session started yet');\r\n    }\r\n\r\n    return Promise.all(addAsUnmutePromises);\r\n};\r\n\r\n/**\r\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\r\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\r\n * that is to stop sending any data and turn off the HW camera device.\r\n * @param {JitsiLocalTrack} track the local track that will be removed.\r\n * @return {Promise}\r\n */\r\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\r\n    const removeAsMutePromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        removeAsMutePromises.push(\r\n            this.jvbJingleSession.removeTrackAsMute(track));\r\n    } else {\r\n        logger.info(\r\n            'Remove local MediaStream - no JVB JingleSession started yet');\r\n    }\r\n    if (this.p2pJingleSession) {\r\n        removeAsMutePromises.push(\r\n            this.p2pJingleSession.removeTrackAsMute(track));\r\n    } else {\r\n        logger.info(\r\n            'Remove local MediaStream - no P2P JingleSession started yet');\r\n    }\r\n\r\n    return Promise.all(removeAsMutePromises);\r\n};\r\n\r\n/**\r\n * Get role of the local user.\r\n * @returns {string} user role: 'moderator' or 'none'\r\n */\r\nJitsiConference.prototype.getRole = function() {\r\n    return this.room.role;\r\n};\r\n\r\n/**\r\n * Returns whether or not the current conference has been joined as a hidden\r\n * user.\r\n *\r\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\r\n * no connection is active.\r\n */\r\nJitsiConference.prototype.isHidden = function() {\r\n    if (!this.connection) {\r\n        return null;\r\n    }\r\n\r\n    return Strophe.getDomainFromJid(this.connection.getJid())\r\n        === this.options.config.hiddenDomain;\r\n};\r\n\r\n/**\r\n * Check if local user is moderator.\r\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\r\n * we're no longer in the conference room then <tt>null</tt> is returned.\r\n */\r\nJitsiConference.prototype.isModerator = function() {\r\n    return this.room ? this.room.isModerator() : null;\r\n};\r\n\r\n/**\r\n * Set password for the room.\r\n * @param {string} password new password for the room.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.lock = function(password) {\r\n    if (!this.isModerator()) {\r\n        return Promise.reject(new Error('You are not moderator.'));\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.room.lockRoom(\r\n            password || '',\r\n            () => resolve(),\r\n            err => reject(err),\r\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\r\n    });\r\n};\r\n\r\n/**\r\n * Remove password from the room.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.unlock = function() {\r\n    return this.lock();\r\n};\r\n\r\n/**\r\n * Elects the participant with the given id to be the selected participant in\r\n * order to receive higher video quality (if simulcast is enabled).\r\n * Or cache it if channel is not created and send it once channel is available.\r\n * @param participantId the identifier of the participant\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.selectParticipant = function(participantId) {\r\n    this.selectParticipants([ participantId ]);\r\n};\r\n\r\n/*\r\n * Elects participants with given ids to be the selected participants in order\r\n * to receive higher video quality (if simulcast is enabled). The argument\r\n * should be an array of participant id strings or an empty array; an error will\r\n * be thrown if a non-array is passed in. The error is thrown as a layer of\r\n * protection against passing an invalid argument, as the error will happen in\r\n * the bridge and may not be visible in the client.\r\n *\r\n * @param {Array<strings>} participantIds - An array of identifiers for\r\n * participants.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.selectParticipants = function(participantIds) {\r\n    if (!Array.isArray(participantIds)) {\r\n        throw new Error('Invalid argument; participantIds must be an array.');\r\n    }\r\n\r\n    this.rtc.selectEndpoints(participantIds);\r\n};\r\n\r\n/**\r\n * Elects the participant with the given id to be the pinned participant in\r\n * order to always receive video for this participant (even when last n is\r\n * enabled).\r\n * @param participantId the identifier of the participant\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n */\r\nJitsiConference.prototype.pinParticipant = function(participantId) {\r\n    this.rtc.pinEndpoint(participantId);\r\n};\r\n\r\n/**\r\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\r\n * @returns {number}\r\n */\r\nJitsiConference.prototype.getLastN = function() {\r\n    return this.rtc.getLastN();\r\n};\r\n\r\n/**\r\n * Selects a new value for \"lastN\". The requested amount of videos are going\r\n * to be delivered after the value is in effect. Set to -1 for unlimited or\r\n * all available videos.\r\n * @param lastN the new number of videos the user would like to receive.\r\n * @throws Error or RangeError if the given value is not a number or is smaller\r\n * than -1.\r\n */\r\nJitsiConference.prototype.setLastN = function(lastN) {\r\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\r\n        throw new Error(`Invalid value for lastN: ${lastN}`);\r\n    }\r\n    const n = Number(lastN);\r\n\r\n    if (n < -1) {\r\n        throw new RangeError('lastN cannot be smaller than -1');\r\n    }\r\n    this.rtc.setLastN(n);\r\n\r\n    // If the P2P session is not fully established yet, we wait until it gets\r\n    // established.\r\n    if (this.p2pJingleSession) {\r\n        const isVideoActive = n !== 0;\r\n\r\n        this.p2pJingleSession\r\n            .setMediaTransferActive(true, isVideoActive)\r\n            .catch(error => {\r\n                logger.error(\r\n                    `Failed to adjust video transfer status (${isVideoActive})`,\r\n                    error);\r\n            });\r\n    }\r\n};\r\n\r\n/**\r\n * Checks if the participant given by participantId is currently included in\r\n * the last N.\r\n * @param {string} participantId the identifier of the participant we would\r\n * like to check.\r\n * @return {boolean} true if the participant with id is in the last N set or\r\n * if there's no last N set, false otherwise.\r\n * @deprecated this method should never be used to figure out the UI, but\r\n * {@link ParticipantConnectionStatus} should be used instead.\r\n */\r\nJitsiConference.prototype.isInLastN = function(participantId) {\r\n    return this.rtc.isInLastN(participantId);\r\n};\r\n\r\n/**\r\n * @return Array<JitsiParticipant> an array of all participants in this\r\n * conference.\r\n */\r\nJitsiConference.prototype.getParticipants = function() {\r\n    return Object.values(this.participants);\r\n};\r\n\r\n/**\r\n * Returns the number of participants in the conference, including the local\r\n * participant.\r\n * @param countHidden {boolean} Whether or not to include hidden participants\r\n * in the count. Default: false.\r\n **/\r\nJitsiConference.prototype.getParticipantCount\r\n    = function(countHidden = false) {\r\n\r\n        let participants = this.getParticipants();\r\n\r\n        if (!countHidden) {\r\n            participants = participants.filter(p => !p.isHidden());\r\n        }\r\n\r\n        // Add one for the local participant.\r\n        return participants.length + 1;\r\n    };\r\n\r\n/**\r\n * @returns {JitsiParticipant} the participant in this conference with the\r\n * specified id (or undefined if there isn't one).\r\n * @param id the id of the participant.\r\n */\r\nJitsiConference.prototype.getParticipantById = function(id) {\r\n    return this.participants[id];\r\n};\r\n\r\n/**\r\n * Grant owner rights to the participant.\r\n * @param {string} id id of the participant to grant owner rights to.\r\n */\r\nJitsiConference.prototype.grantOwner = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.setAffiliation(participant.getJid(), 'owner');\r\n};\r\n\r\n/**\r\n * Kick participant from this conference.\r\n * @param {string} id id of the participant to kick\r\n */\r\nJitsiConference.prototype.kickParticipant = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.kick(participant.getJid());\r\n};\r\n\r\n/**\r\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\r\n * analytics event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeClearSITimeout = function() {\r\n    if (this._sessionInitiateTimeout\r\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\r\n        window.clearTimeout(this._sessionInitiateTimeout);\r\n        this._sessionInitiateTimeout = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\r\n * event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeSetSITimeout = function() {\r\n    // Jicofo is supposed to invite if there are at least 2 participants\r\n    if (!this.jvbJingleSession\r\n            && this.getParticipantCount() >= 2\r\n            && !this._sessionInitiateTimeout) {\r\n        this._sessionInitiateTimeout = window.setTimeout(() => {\r\n            this._sessionInitiateTimeout = null;\r\n            Statistics.sendAnalytics(createJingleEvent(\r\n                ACTION_JINGLE_SI_TIMEOUT,\r\n                {\r\n                    p2p: false,\r\n                    value: JINGLE_SI_TIMEOUT\r\n                }));\r\n        }, JINGLE_SI_TIMEOUT);\r\n    }\r\n};\r\n\r\n/**\r\n * Mutes a participant.\r\n * @param {string} id The id of the participant to mute.\r\n */\r\nJitsiConference.prototype.muteParticipant = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.muteParticipant(participant.getJid(), true);\r\n};\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Notifies this JitsiConference that a new member has joined its chat room.\r\n *\r\n * FIXME This should NOT be exposed!\r\n *\r\n * @param jid the jid of the participant in the MUC\r\n * @param nick the display name of the participant\r\n * @param role the role of the participant in the MUC\r\n * @param isHidden indicates if this is a hidden participant (system\r\n * participant for example a recorder).\r\n * @param statsID the participant statsID (optional)\r\n * @param status the initial status if any\r\n * @param identity the member identity, if any\r\n * @param botType the member botType, if any\r\n */\r\nJitsiConference.prototype.onMemberJoined = function(\r\n        jid, nick, role, isHidden, statsID, status, identity, botType) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n\r\n    if (id === 'focus' || this.myUserId() === id) {\r\n        return;\r\n    }\r\n\r\n    const participant\r\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\r\n\r\n    participant._role = role;\r\n    participant._botType = botType;\r\n    this.participants[id] = participant;\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.USER_JOINED,\r\n        id,\r\n        participant);\r\n\r\n    this._updateFeatures(participant);\r\n\r\n    this._maybeStartOrStopP2P();\r\n    this._maybeSetSITimeout();\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Updates features for a participant.\r\n * @param {JitsiParticipant} participant - The participant to query for features.\r\n * @returns {void}\r\n * @private\r\n */\r\nJitsiConference.prototype._updateFeatures = function(participant) {\r\n    participant.getFeatures()\r\n        .then(features => {\r\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\r\n            this.updateDTMFSupport();\r\n\r\n            if (features.has('http://jitsi.org/protocol/jigasi')) {\r\n                participant.setProperty('features_jigasi', true);\r\n            }\r\n\r\n            if (features.has('https://jitsi.org/meet/e2ee')) {\r\n                participant.setProperty('features_e2ee', true);\r\n            }\r\n        })\r\n        .catch(() => false);\r\n};\r\n\r\n/**\r\n * Get notified when member bot type had changed.\r\n * @param jid the member jid\r\n * @param botType the new botType value\r\n * @private\r\n */\r\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\r\n\r\n    // find the participant and mark it as non bot, as the real one will join\r\n    // in a moment\r\n    const peers = this.getParticipants();\r\n    const botParticipant = peers.find(p => p.getJid() === jid);\r\n\r\n    if (botParticipant) {\r\n        botParticipant._botType = botType;\r\n        const id = Strophe.getResourceFromJid(jid);\r\n\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\r\n            id,\r\n            botType);\r\n    }\r\n\r\n    // if botType changed to undefined, botType was removed, in case of\r\n    // poltergeist mode this is the moment when the poltergeist had exited and\r\n    // the real participant had already replaced it.\r\n    // In this case we can check and try p2p\r\n    if (!botParticipant._botType) {\r\n        this._maybeStartOrStopP2P();\r\n    }\r\n};\r\n\r\nJitsiConference.prototype.onMemberLeft = function(jid) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n\r\n    if (id === 'focus' || this.myUserId() === id) {\r\n        return;\r\n    }\r\n\r\n    const participant = this.participants[id];\r\n    const mediaSessions = this.getMediaSessions();\r\n    let tracksToBeRemoved = [];\r\n\r\n    for (const session of mediaSessions) {\r\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\r\n\r\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\r\n\r\n        // Remove the ssrcs from the remote description and renegotiate.\r\n        session.removeRemoteStreamsOnLeave(id);\r\n    }\r\n\r\n    // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\r\n    tracksToBeRemoved.forEach(track => {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\r\n    });\r\n\r\n    if (participant) {\r\n        delete this.participants[id];\r\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\r\n    }\r\n\r\n    if (this.room !== null) { // Skip if we have left the room already.\r\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\r\n        this._maybeClearSITimeout();\r\n    }\r\n};\r\n\r\n/**\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.12\r\n * Returns an array containing all media sessions existing in this conference.\r\n *\r\n * @returns {Array<JingleSessionPC>}\r\n */\r\n JitsiConference.prototype.getMediaSessions = function() {\r\n    const sessions = [];\r\n\r\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\r\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\r\n\r\n    return sessions;\r\n};\r\n\r\n/**\r\n * Designates an event indicating that we were kicked from the XMPP MUC.\r\n * @param {boolean} isSelfPresence - whether it is for local participant\r\n * or another participant.\r\n * @param {string} actorId - the id of the participant who was initiator\r\n * of the kick.\r\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\r\n * this is the id of the participant which was kicked.\r\n */\r\nJitsiConference.prototype.onMemberKicked = function(isSelfPresence, actorId, kickedParticipantId) {\r\n    // This check which be true when we kick someone else. With the introduction of lobby\r\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\r\n    // avoid emitting an event where `undefined` kicked someone.\r\n    if (actorId === this.myUserId()) {\r\n        return;\r\n    }\r\n\r\n    const actorParticipant = this.participants[actorId];\r\n\r\n    if (isSelfPresence) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.KICKED, actorParticipant);\r\n\r\n        this.leave();\r\n\r\n        return;\r\n    }\r\n\r\n    const kickedParticipant = this.participants[kickedParticipantId];\r\n\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant);\r\n};\r\n\r\n/**\r\n * Method called on local MUC role change.\r\n * @param {string} role the name of new user's role as defined by XMPP MUC.\r\n */\r\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\r\n    // Emit role changed for local  JID\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\r\n};\r\n\r\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    participant._role = role;\r\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\r\n};\r\n\r\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n\r\n    if (participant._displayName === displayName) {\r\n        return;\r\n    }\r\n\r\n    participant._displayName = displayName;\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\r\n        id,\r\n        displayName);\r\n};\r\n\r\n/**\r\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\r\n * the conference.\r\n *\r\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\r\n * JitsiConference\r\n */\r\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\r\n    if (track.isP2P && !this.isP2PActive()) {\r\n        logger.info(\r\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\r\n\r\n        return;\r\n    } else if (!track.isP2P && this.isP2PActive()) {\r\n        logger.info(\r\n            'Trying to add remote JVB track, when in P2P - IGNORED');\r\n\r\n        return;\r\n    }\r\n\r\n    const id = track.getParticipantId();\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        logger.error(`No participant found for id: ${id}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Add track to JitsiParticipant.\r\n    participant._tracks.push(track);\r\n\r\n    if (this.transcriber) {\r\n        this.transcriber.addTrack(track);\r\n    }\r\n\r\n    const emitter = this.eventEmitter;\r\n\r\n    track.addEventListener(\r\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\r\n    track.addEventListener(\r\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n        (audioLevel, tpc) => {\r\n            const activeTPC = this.getActivePeerConnection();\r\n\r\n            if (activeTPC === tpc) {\r\n                emitter.emit(\r\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                    id,\r\n                    audioLevel);\r\n            }\r\n        }\r\n    );\r\n\r\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\r\n};\r\n\r\n/**\r\n * Callback called by the Jingle plugin when 'session-answer' is received.\r\n * @param {JingleSessionPC} session the Jingle session for which an answer was\r\n * received.\r\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\r\n    if (this.p2pJingleSession === session) {\r\n        logger.info('P2P setAnswer');\r\n\r\n        this.p2pJingleSession.setAnswer(answer);\r\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\r\n    }\r\n};\r\n\r\n/**\r\n * Callback called by the Jingle plugin when 'transport-info' is received.\r\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\r\n * received\r\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\r\n * element\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\r\n    if (this.p2pJingleSession === session) {\r\n        logger.info('P2P addIceCandidates');\r\n        this.p2pJingleSession.addIceCandidates(transportInfo);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\r\n * the conference.\r\n *\r\n * @param {JitsiRemoteTrack} removedTrack\r\n */\r\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\r\n    this.getParticipants().forEach(participant => {\r\n        const tracks = participant.getTracks();\r\n\r\n        for (let i = 0; i < tracks.length; i++) {\r\n            if (tracks[i] === removedTrack) {\r\n                // Since the tracks have been compared and are\r\n                // considered equal the result of splice can be ignored.\r\n                participant._tracks.splice(i, 1);\r\n\r\n                this.eventEmitter.emit(\r\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\r\n\r\n                if (this.transcriber) {\r\n                    this.transcriber.removeTrack(removedTrack);\r\n                }\r\n\r\n                break;\r\n            }\r\n        }\r\n    }, this);\r\n};\r\n\r\n/**\r\n * Handles an incoming call event for the P2P jingle session.\r\n */\r\nJitsiConference.prototype._onIncomingCallP2P = function(\r\n        jingleSession,\r\n        jingleOffer) {\r\n\r\n    let rejectReason;\r\n\r\n    if (!browser.supportsP2P()) {\r\n        rejectReason = {\r\n            reason: 'unsupported-applications',\r\n            reasonDescription: 'P2P not supported',\r\n            errorMsg: 'This client does not support P2P connections'\r\n        };\r\n    } else if (!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) {\r\n        rejectReason = {\r\n            reason: 'decline',\r\n            reasonDescription: 'P2P disabled',\r\n            errorMsg: 'P2P mode disabled in the configuration'\r\n        };\r\n    } else if (this.p2pJingleSession) {\r\n        // Reject incoming P2P call (already in progress)\r\n        rejectReason = {\r\n            reason: 'busy',\r\n            reasonDescription: 'P2P already in progress',\r\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\r\n        };\r\n    } else if (!this._shouldBeInP2PMode()) {\r\n        rejectReason = {\r\n            reason: 'decline',\r\n            reasonDescription: 'P2P requirements not met',\r\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\r\n        };\r\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\r\n    }\r\n\r\n    if (rejectReason) {\r\n        this._rejectIncomingCall(jingleSession, rejectReason);\r\n    } else {\r\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles an incoming call event.\r\n */\r\nJitsiConference.prototype.onIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer,\r\n        now) {\r\n    // Handle incoming P2P call\r\n    if (jingleSession.isP2P) {\r\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\r\n    } else {\r\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\r\n            const description = 'Rejecting session-initiate from non-focus.';\r\n\r\n            this._rejectIncomingCall(\r\n                jingleSession, {\r\n                    reason: 'security-error',\r\n                    reasonDescription: description,\r\n                    errorMsg: description\r\n                });\r\n\r\n            return;\r\n        }\r\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\r\n    }\r\n};\r\n\r\n/**\r\n * Accepts an incoming call event for the JVB jingle session.\r\n */\r\nJitsiConference.prototype._acceptJvbIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer,\r\n        now) {\r\n\r\n    // Accept incoming call\r\n    this.jvbJingleSession = jingleSession;\r\n    this.room.connectionTimes['session.initiate'] = now;\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    if (this.wasStopped) {\r\n        Statistics.sendAnalyticsAndLog(\r\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\r\n    }\r\n\r\n    const serverRegion\r\n        = $(jingleOffer)\r\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\r\n            .attr('region');\r\n\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\r\n        serverRegion);\r\n\r\n    this._maybeClearSITimeout();\r\n    Statistics.sendAnalytics(createJingleEvent(\r\n        ACTION_JINGLE_SI_RECEIVED,\r\n        {\r\n            p2p: false,\r\n            value: now\r\n        }));\r\n\r\n    try {\r\n        jingleSession.initialize(this.room, this.rtc, this._signalingLayer, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: this._isE2EEEnabled()\r\n        });\r\n    } catch (error) {\r\n        GlobalOnErrorHandler.callErrorHandler(error);\r\n    }\r\n\r\n    // Open a channel with the videobridge.\r\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\r\n\r\n    // Add local tracks to the session\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    try {\r\n        jingleSession.acceptOffer(\r\n            jingleOffer,\r\n            () => {\r\n                // If for any reason invite for the JVB session arrived after\r\n                // the P2P has been established already the media transfer needs\r\n                // to be turned off here.\r\n                if (this.isP2PActive() && this.jvbJingleSession) {\r\n                    this._suspendMediaTransferForJvbConnection();\r\n                }\r\n\r\n                this.eventEmitter.emit(\r\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n                    jingleSession);\r\n                if (!this.isP2PActive()) {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n                        jingleSession);\r\n                }\r\n            },\r\n            error => {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(\r\n                    'Failed to accept incoming Jingle session', error);\r\n            },\r\n            localTracks\r\n        );\r\n\r\n        // Start callstats as soon as peerconnection is initialized,\r\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\r\n        // happen in case if user doesn't have or denied permission to\r\n        // both camera and microphone.\r\n        logger.info('Starting CallStats for JVB connection...');\r\n        this.statistics.startCallStats(\r\n            this.jvbJingleSession.peerconnection,\r\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\r\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\r\n    } catch (e) {\r\n        GlobalOnErrorHandler.callErrorHandler(e);\r\n        logger.error(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Sets the BridgeChannel.\r\n *\r\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\r\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\r\n * BridgeChannel mode.\r\n * @param {TraceablePeerConnection} pc the peer connection which will be used\r\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\r\n */\r\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\r\n    let wsUrl = null;\r\n    const webSocket\r\n        = $(offerIq)\r\n            .find('>content>transport>web-socket')\r\n            .first();\r\n\r\n    if (webSocket.length === 1) {\r\n        wsUrl = webSocket[0].getAttribute('url');\r\n    }\r\n\r\n    let bridgeChannelType;\r\n\r\n    switch (this.options.config.openBridgeChannel) {\r\n    case 'datachannel':\r\n    case true:\r\n    case undefined:\r\n        bridgeChannelType = 'datachannel';\r\n        break;\r\n    case 'websocket':\r\n        bridgeChannelType = 'websocket';\r\n        break;\r\n    }\r\n\r\n    if (bridgeChannelType === 'datachannel') {\r\n        this.rtc.initializeBridgeChannel(pc, null);\r\n    } else if (bridgeChannelType === 'websocket' && wsUrl) {\r\n        this.rtc.initializeBridgeChannel(null, wsUrl);\r\n    }\r\n};\r\n\r\n/**\r\n * Rejects incoming Jingle call.\r\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\r\n * @param {object} [options]\r\n * @param {string} options.reason the name of the reason element as defined\r\n * by Jingle\r\n * @param {string} options.reasonDescription the reason description which will\r\n * be included in Jingle 'session-terminate' message.\r\n * @param {string} options.errorMsg an error message to be logged on global\r\n * error handler\r\n * @private\r\n */\r\nJitsiConference.prototype._rejectIncomingCall = function(\r\n        jingleSession,\r\n        options) {\r\n    if (options && options.errorMsg) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\r\n    }\r\n\r\n    // Terminate the jingle session with a reason\r\n    jingleSession.terminate(\r\n        null /* success callback => we don't care */,\r\n        error => {\r\n            logger.warn(\r\n                'An error occurred while trying to terminate'\r\n                    + ' invalid Jingle session', error);\r\n        }, {\r\n            reason: options && options.reason,\r\n            reasonDescription: options && options.reasonDescription,\r\n            sendSessionTerminate: true\r\n        });\r\n};\r\n\r\n/**\r\n * Handles the call ended event.\r\n * XXX is this due to the remote side terminating the Jingle session?\r\n *\r\n * @param {JingleSessionPC} jingleSession the jingle session which has been\r\n * terminated.\r\n * @param {String} reasonCondition the Jingle reason condition.\r\n * @param {String|null} reasonText human readable reason text which may provide\r\n * more details about why the call has been terminated.\r\n */\r\nJitsiConference.prototype.onCallEnded = function(\r\n        jingleSession,\r\n        reasonCondition,\r\n        reasonText) {\r\n    logger.info(\r\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\r\n            jingleSession.isP2P}`);\r\n    if (jingleSession === this.jvbJingleSession) {\r\n        this.wasStopped = true;\r\n\r\n        Statistics.sendAnalytics(\r\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\r\n\r\n        // Stop the stats\r\n        if (this.statistics) {\r\n            this.statistics.stopRemoteStats(\r\n                this.jvbJingleSession.peerconnection);\r\n            logger.info('Stopping JVB CallStats');\r\n            this.statistics.stopCallStats(\r\n                this.jvbJingleSession.peerconnection);\r\n        }\r\n\r\n        // Current JVB JingleSession is no longer valid, so set it to null\r\n        this.jvbJingleSession = null;\r\n\r\n        // Let the RTC service do any cleanups\r\n        this.rtc.onCallEnded();\r\n    } else if (jingleSession === this.p2pJingleSession) {\r\n        // It's the responder who decides to enforce JVB mode, so that both\r\n        // initiator and responder are aware if it was intentional.\r\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\r\n            logger.info('In forced JVB 121 mode...');\r\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\r\n        } else if (reasonCondition === 'connectivity-error'\r\n            && reasonText === 'ICE FAILED') {\r\n            // It can happen that the other peer detects ICE failed and\r\n            // terminates the session, before we get the event on our side.\r\n            // But we are able to parse the reason and mark it here.\r\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\r\n        }\r\n        this._stopP2PSession();\r\n    } else {\r\n        logger.error(\r\n            'Received onCallEnded for invalid session',\r\n            jingleSession.sid,\r\n            jingleSession.remoteJid,\r\n            reasonCondition,\r\n            reasonText);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles the suspend detected event. Leaves the room and fires suspended.\r\n * @param {JingleSessionPC} jingleSession\r\n */\r\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\r\n    if (!jingleSession.isP2P) {\r\n        this.leave();\r\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\r\n    }\r\n};\r\n\r\nJitsiConference.prototype.updateDTMFSupport = function() {\r\n    let somebodySupportsDTMF = false;\r\n    const participants = this.getParticipants();\r\n\r\n    // check if at least 1 participant supports DTMF\r\n    for (let i = 0; i < participants.length; i += 1) {\r\n        if (participants[i].supportsDTMF()) {\r\n            somebodySupportsDTMF = true;\r\n            break;\r\n        }\r\n    }\r\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\r\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\r\n            somebodySupportsDTMF);\r\n    }\r\n};\r\n\r\n/**\r\n * Allows to check if there is at least one user in the conference\r\n * that supports DTMF.\r\n * @returns {boolean} true if somebody supports DTMF, false otherwise\r\n */\r\nJitsiConference.prototype.isDTMFSupported = function() {\r\n    return this.somebodySupportsDTMF;\r\n};\r\n\r\n/**\r\n * Returns the local user's ID\r\n * @return {string} local user's ID\r\n */\r\nJitsiConference.prototype.myUserId = function() {\r\n    return (\r\n        this.room && this.room.myroomjid\r\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\r\n            : null);\r\n};\r\n\r\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\r\n    const peerConnection = this.getActivePeerConnection();\r\n\r\n    if (peerConnection) {\r\n        peerConnection.sendTones(tones, duration, pause);\r\n    } else {\r\n        logger.warn('cannot sendTones: no peer connection');\r\n    }\r\n};\r\n\r\n/**\r\n * Starts recording the current conference.\r\n *\r\n * @param {Object} options - Configuration for the recording. See\r\n * {@link Chatroom#startRecording} for more info.\r\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\r\n */\r\nJitsiConference.prototype.startRecording = function(options) {\r\n    if (this.room) {\r\n        return this.recordingManager.startRecording(options);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference is not created yet!'));\r\n};\r\n\r\n/**\r\n * Stop a recording session.\r\n *\r\n * @param {string} sessionID - The ID of the recording session that\r\n * should be stopped.\r\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\r\n */\r\nJitsiConference.prototype.stopRecording = function(sessionID) {\r\n    if (this.room) {\r\n        return this.recordingManager.stopRecording(sessionID);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference is not created yet!'));\r\n};\r\n\r\n/**\r\n * Returns true if the SIP calls are supported and false otherwise\r\n */\r\nJitsiConference.prototype.isSIPCallingSupported = function() {\r\n    if (this.room) {\r\n        return this.room.isSIPCallingSupported();\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * Dials a number.\r\n * @param number the number\r\n */\r\nJitsiConference.prototype.dial = function(number) {\r\n    if (this.room) {\r\n        return this.room.dial(number);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        reject(new Error('The conference is not created yet!'));\r\n    });\r\n};\r\n\r\n/**\r\n * Hangup an existing call\r\n */\r\nJitsiConference.prototype.hangup = function() {\r\n    if (this.room) {\r\n        return this.room.hangup();\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        reject(new Error('The conference is not created yet!'));\r\n    });\r\n};\r\n\r\n/**\r\n * Starts the transcription service.\r\n */\r\nJitsiConference.prototype.startTranscriber = function() {\r\n    return this.dial('jitsi_meet_transcribe');\r\n};\r\n\r\n\r\n/**\r\n * Stops the transcription service.\r\n */\r\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\r\n\r\n/**\r\n * Returns the phone number for joining the conference.\r\n */\r\nJitsiConference.prototype.getPhoneNumber = function() {\r\n    if (this.room) {\r\n        return this.room.getPhoneNumber();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the pin for joining the conference with phone.\r\n */\r\nJitsiConference.prototype.getPhonePin = function() {\r\n    if (this.room) {\r\n        return this.room.getPhonePin();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the meeting unique ID if any.\r\n *\r\n * @returns {string|undefined}\r\n */\r\nJitsiConference.prototype.getMeetingUniqueId = function() {\r\n    if (this.room) {\r\n        return this.room.getMeetingId();\r\n    }\r\n};\r\n\r\n/**\r\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\r\n * which connection is currently active.\r\n *\r\n * @return {TraceablePeerConnection|null} null if there isn't any active\r\n * <tt>TraceablePeerConnection</tt> currently available.\r\n * @public (FIXME how to make package local ?)\r\n */\r\nJitsiConference.prototype.getActivePeerConnection = function() {\r\n    if (this.isP2PActive()) {\r\n        return this.p2pJingleSession.peerconnection;\r\n    }\r\n\r\n    return this.jvbJingleSession ? this.jvbJingleSession.peerconnection : null;\r\n};\r\n\r\n/**\r\n * Returns the connection state for the current room. Its ice connection state\r\n * for its session.\r\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\r\n * be converted to \"connected\".\r\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\r\n * peer connection at this time.\r\n */\r\nJitsiConference.prototype.getConnectionState = function() {\r\n    const peerConnection = this.getActivePeerConnection();\r\n\r\n    return peerConnection ? peerConnection.getConnectionState() : null;\r\n};\r\n\r\n/**\r\n * Make all new participants mute their audio/video on join.\r\n * @param policy {Object} object with 2 boolean properties for video and audio:\r\n * @param {boolean} audio if audio should be muted.\r\n * @param {boolean} video if video should be muted.\r\n */\r\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\r\n    if (!this.isModerator()) {\r\n        return;\r\n    }\r\n    this.startMutedPolicy = policy;\r\n    this.room.addToPresence('startmuted', {\r\n        attributes: {\r\n            audio: policy.audio,\r\n            video: policy.video,\r\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\r\n        }\r\n    });\r\n    this.room.sendPresence();\r\n};\r\n\r\n/**\r\n * Returns current start muted policy\r\n * @returns {Object} with 2 properties - audio and video.\r\n */\r\nJitsiConference.prototype.getStartMutedPolicy = function() {\r\n    return this.startMutedPolicy;\r\n};\r\n\r\n/**\r\n * Check if audio is muted on join.\r\n */\r\nJitsiConference.prototype.isStartAudioMuted = function() {\r\n    return this.startAudioMuted;\r\n};\r\n\r\n/**\r\n * Check if video is muted on join.\r\n */\r\nJitsiConference.prototype.isStartVideoMuted = function() {\r\n    return this.startVideoMuted;\r\n};\r\n\r\n/**\r\n * Returns measured connectionTimes.\r\n */\r\nJitsiConference.prototype.getConnectionTimes = function() {\r\n    return this.room.connectionTimes;\r\n};\r\n\r\n/**\r\n * Sets a property for the local participant.\r\n */\r\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\r\n    this.sendCommand(`jitsi_participant_${name}`, { value });\r\n};\r\n\r\n/**\r\n *  Removes a property for the local participant and sends the updated presence.\r\n */\r\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\r\n    this.removeCommand(`jitsi_participant_${name}`);\r\n    this.room.sendPresence();\r\n};\r\n\r\n/**\r\n * Gets a local participant property.\r\n *\r\n * @return value of the local participant property if the tagName exists in the\r\n * list of properties, otherwise returns undefined.\r\n */\r\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\r\n    const property = this.room.presMap.nodes.find(prop =>\r\n        prop.tagName === `jitsi_participant_${name}`\r\n    );\r\n\r\n    return property ? property.value : undefined;\r\n};\r\n\r\n/**\r\n * Sends the given feedback through CallStats if enabled.\r\n *\r\n * @param overallFeedback an integer between 1 and 5 indicating the\r\n * user feedback\r\n * @param detailedFeedback detailed feedback from the user. Not yet used\r\n * @returns {Promise} Resolves if feedback is submitted successfully.\r\n */\r\nJitsiConference.prototype.sendFeedback = function(\r\n        overallFeedback,\r\n        detailedFeedback) {\r\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\r\n};\r\n\r\n/**\r\n * Returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n *\r\n * @returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n */\r\nJitsiConference.prototype.isCallstatsEnabled = function() {\r\n    return this.statistics.isCallstatsEnabled();\r\n};\r\n\r\n/**\r\n * Finds the SSRC of a given track\r\n *\r\n * @param track\r\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\r\n */\r\nJitsiConference.prototype.getSsrcByTrack = function(track) {\r\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\r\n};\r\n\r\n/**\r\n * Handles track attached to container (Calls associateStreamWithVideoTag method\r\n * from statistics module)\r\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\r\n * @param container the container\r\n */\r\nJitsiConference.prototype._onTrackAttach = function(track, container) {\r\n    const isLocal = track.isLocal();\r\n    let ssrc = null;\r\n    const isP2P = track.isP2P;\r\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\r\n    const peerConnection\r\n        = isP2P\r\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\r\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\r\n\r\n    if (isLocal) {\r\n        // Local tracks have SSRC stored on per peer connection basis.\r\n        if (peerConnection) {\r\n            ssrc = peerConnection.getLocalSSRC(track);\r\n        }\r\n    } else {\r\n        ssrc = track.getSSRC();\r\n    }\r\n    if (!container.id || !ssrc || !peerConnection) {\r\n        return;\r\n    }\r\n\r\n    this.statistics.associateStreamWithVideoTag(\r\n        peerConnection,\r\n        ssrc,\r\n        isLocal,\r\n        remoteUserId,\r\n        track.getUsageLabel(),\r\n        container.id);\r\n};\r\n\r\n/**\r\n * Logs an \"application log\" message.\r\n * @param message {string} The message to log. Note that while this can be a\r\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\r\n * log valid JSON strings, with an \"id\" field used for distinguishing between\r\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\r\n */\r\nJitsiConference.prototype.sendApplicationLog = function(message) {\r\n    Statistics.sendLog(message);\r\n};\r\n\r\n/**\r\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\r\n * focus.\r\n * @param mucJid the full MUC address of the user to be checked.\r\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\r\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\r\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\r\n */\r\nJitsiConference.prototype._isFocus = function(mucJid) {\r\n    return this.room ? this.room.isFocus(mucJid) : null;\r\n};\r\n\r\n/**\r\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\r\n */\r\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\r\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\r\n};\r\n\r\n/**\r\n * Sends a message via the data channel.\r\n * @param to {string} the id of the endpoint that should receive the message.\r\n * If \"\" the message will be sent to all participants.\r\n * @param payload {object} the payload of the message.\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\r\n    this.rtc.sendChannelMessage(to, payload);\r\n};\r\n\r\n/**\r\n * Sends a broadcast message via the data channel.\r\n * @param payload {object} the payload of the message.\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\r\n    this.sendEndpointMessage('', payload);\r\n};\r\n\r\n/**\r\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\r\n * broadcasts it to all endpoints in the conference.\r\n * @param {string} to The ID of the endpoint/participant which is to receive\r\n * the message, or '' to broadcast the message to all endpoints in the\r\n * conference.\r\n * @param {string|object} message the message to send. If this is of type\r\n * 'string' it will be sent as a chat message. If it is of type 'object', it\r\n * will be encapsulated in a format recognized by jitsi-meet and converted to\r\n * JSON before being sent.\r\n * @param {boolean} sendThroughVideobridge Whether to send the message through\r\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\r\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\r\n */\r\nJitsiConference.prototype.sendMessage = function(\r\n        message,\r\n        to = '',\r\n        sendThroughVideobridge = false) {\r\n    const messageType = typeof message;\r\n\r\n    // Through videobridge we support only objects. Through XMPP we support\r\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\r\n    // regular chat messages).\r\n    if (messageType !== 'object'\r\n            && (sendThroughVideobridge || messageType !== 'string')) {\r\n        logger.error(`Can not send a message of type ${messageType}`);\r\n\r\n        return;\r\n    }\r\n\r\n    if (sendThroughVideobridge) {\r\n        this.sendEndpointMessage(to, message);\r\n    } else {\r\n        let messageToSend = message;\r\n\r\n        // Name of packet extension of message stanza to send the required\r\n        // message in.\r\n        let elementName = 'body';\r\n\r\n        if (messageType === 'object') {\r\n            elementName = 'json-message';\r\n\r\n            // Mark as valid JSON message if not already\r\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\r\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\r\n            }\r\n\r\n            try {\r\n                messageToSend = JSON.stringify(messageToSend);\r\n            } catch (e) {\r\n                logger.error('Can not send a message, stringify failed: ', e);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (to) {\r\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\r\n        } else {\r\n            // Broadcast\r\n            this.sendTextMessage(messageToSend, elementName);\r\n        }\r\n    }\r\n\r\n};\r\n\r\nJitsiConference.prototype.isConnectionInterrupted = function() {\r\n    return this.isP2PActive()\r\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\r\n    if (session.isP2P) {\r\n        this.isP2PConnectionInterrupted = true;\r\n    } else {\r\n        this.isJvbConnectionInterrupted = true;\r\n    }\r\n    if (session.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\r\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\r\n    // eventually come up with the new offer (at least for the time being).\r\n    if (session.isP2P) {\r\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\r\n        // and \"bad\" connection\r\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\r\n\r\n        if (this.p2pJingleSession) {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createP2PEvent(\r\n                    ACTION_P2P_FAILED,\r\n                    {\r\n                        initiator: this.p2pJingleSession.isInitiator\r\n                    }));\r\n\r\n        }\r\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\r\n    } else if (session && this.jvbJingleSession === session) {\r\n        this._delayedIceFailed = new IceFailedHandling(this);\r\n        this._delayedIceFailed.start(session);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\r\n    if (session.isP2P) {\r\n        this.isP2PConnectionInterrupted = false;\r\n    } else {\r\n        this.isJvbConnectionInterrupted = false;\r\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\r\n    }\r\n\r\n    if (session.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\r\n    }\r\n};\r\n\r\n/**\r\n * Accept incoming P2P Jingle call.\r\n * @param {JingleSessionPC} jingleSession the session instance\r\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\r\n * @private\r\n */\r\nJitsiConference.prototype._acceptP2PIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer) {\r\n    this.isP2PConnectionInterrupted = false;\r\n\r\n    // Accept the offer\r\n    this.p2pJingleSession = jingleSession;\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    this.p2pJingleSession.initialize(\r\n        this.room,\r\n        this.rtc,\r\n        this._signalingLayer, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: this._isE2EEEnabled()\r\n        });\r\n\r\n    logger.info('Starting CallStats for P2P connection...');\r\n\r\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\r\n\r\n    const participant = this.participants[remoteID];\r\n\r\n    if (participant) {\r\n        remoteID = participant.getStatsID() || remoteID;\r\n    }\r\n\r\n    this.statistics.startCallStats(\r\n        this.p2pJingleSession.peerconnection,\r\n        remoteID);\r\n\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    this.p2pJingleSession.acceptOffer(\r\n        jingleOffer,\r\n        () => {\r\n            logger.debug('Got RESULT for P2P \"session-accept\"');\r\n\r\n            this.eventEmitter.emit(\r\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n                this.p2pJingleSession);\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to accept incoming P2P Jingle session', error);\r\n        },\r\n        localTracks);\r\n};\r\n\r\n/**\r\n * Adds remote tracks to the conference associated with the JVB session.\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteJVBTracks = function() {\r\n    this._addRemoteTracks(\r\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Adds remote tracks to the conference associated with the P2P session.\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteP2PTracks = function() {\r\n    this._addRemoteTracks(\r\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Generates fake \"remote track added\" events for given Jingle session.\r\n * @param {string} logName the session's nickname which will appear in log\r\n * messages.\r\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\r\n    for (const track of remoteTracks) {\r\n        logger.info(`Adding remote ${logName} track: ${track}`);\r\n        this.onRemoteTrackAdded(track);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\r\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\r\n * the P2P connection if the event comes from the P2P session.\r\n * @param {JingleSessionPC} jingleSession the session instance.\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionEstablished = function(\r\n        jingleSession) {\r\n    if (this.p2pJingleSession !== null) {\r\n        // store the establishment time of the p2p session as a field of the\r\n        // JitsiConference because the p2pJingleSession might get disposed (thus\r\n        // the value is lost).\r\n        this.p2pEstablishmentDuration\r\n            = this.p2pJingleSession.establishmentDuration;\r\n    }\r\n\r\n    if (this.jvbJingleSession !== null) {\r\n        this.jvbEstablishmentDuration\r\n            = this.jvbJingleSession.establishmentDuration;\r\n    }\r\n\r\n    let done = false;\r\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\r\n\r\n    // We don't care about the JVB case, there's nothing to be done\r\n    if (!jingleSession.isP2P) {\r\n        done = true;\r\n    } else if (this.p2pJingleSession !== jingleSession) {\r\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\r\n\r\n        done = true;\r\n    } else if (!jingleSession.isInitiator\r\n        && typeof forceJVB121Ratio === 'number'\r\n        && Math.random() < forceJVB121Ratio) {\r\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\r\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\r\n        this._stopP2PSession('decline', 'force JVB121');\r\n\r\n        done = true;\r\n    }\r\n\r\n    if (!isNaN(this.p2pEstablishmentDuration)\r\n        && !isNaN(this.jvbEstablishmentDuration)) {\r\n        const establishmentDurationDiff\r\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\r\n\r\n        Statistics.sendAnalytics(\r\n            ICE_ESTABLISHMENT_DURATION_DIFF,\r\n            { value: establishmentDurationDiff });\r\n    }\r\n\r\n    if (jingleSession.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\r\n    }\r\n\r\n    if (done) {\r\n\r\n        return;\r\n    }\r\n\r\n    // Update P2P status and emit events\r\n    this._setP2PStatus(true);\r\n\r\n    // Remove remote tracks\r\n    if (this.jvbJingleSession) {\r\n        this._removeRemoteJVBTracks();\r\n    } else {\r\n        logger.info('Not removing remote JVB tracks - no session yet');\r\n    }\r\n\r\n    this._addRemoteP2PTracks();\r\n\r\n    // Stop media transfer over the JVB connection\r\n    if (this.jvbJingleSession) {\r\n        this._suspendMediaTransferForJvbConnection();\r\n    }\r\n\r\n    logger.info('Starting remote stats with p2p connection');\r\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\r\n\r\n    Statistics.sendAnalyticsAndLog(\r\n        createP2PEvent(\r\n            ACTION_P2P_ESTABLISHED,\r\n            {\r\n                initiator: this.p2pJingleSession.isInitiator\r\n            }));\r\n\r\n};\r\n\r\n/**\r\n * Called when the chat room reads a new list of properties from jicofo's\r\n * presence. The properties may have changed, but they don't have to.\r\n *\r\n * @param {Object} properties - The properties keyed by the property name\r\n * ('key').\r\n * @private\r\n */\r\nJitsiConference.prototype._updateProperties = function(properties = {}) {\r\n    const changed = !isEqual(properties, this.properties);\r\n\r\n    this.properties = properties;\r\n    if (changed) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\r\n            this.properties);\r\n\r\n        // Some of the properties need to be added to analytics events.\r\n        const analyticsKeys = [\r\n\r\n            // The number of jitsi-videobridge instances currently used for the\r\n            // conference.\r\n            'bridge-count',\r\n\r\n            // The conference creation time (set by jicofo).\r\n            'created-ms',\r\n            'octo-enabled'\r\n        ];\r\n\r\n        analyticsKeys.forEach(key => {\r\n            if (properties[key] !== undefined) {\r\n                Statistics.analytics.addPermanentProperties({\r\n                    [key.replace('-', '_')]: properties[key]\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * Gets a conference property with a given key.\r\n *\r\n * @param {string} key - The key.\r\n * @returns {*} The value\r\n */\r\nJitsiConference.prototype.getProperty = function(key) {\r\n    return this.properties[key];\r\n};\r\n\r\n/**\r\n * Clears the deferred start P2P task if it has been scheduled.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\r\n    if (this.deferredStartP2PTask) {\r\n        logger.info('Cleared deferred start P2P task');\r\n        clearTimeout(this.deferredStartP2PTask);\r\n        this.deferredStartP2PTask = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Removes from the conference remote tracks associated with the JVB\r\n * connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\r\n    this._removeRemoteTracks(\r\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Removes from the conference remote tracks associated with the P2P\r\n * connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\r\n    this._removeRemoteTracks(\r\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Generates fake \"remote track removed\" events for given Jingle session.\r\n * @param {string} sessionNickname the session's nickname which will appear in\r\n * log messages.\r\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteTracks = function(\r\n        sessionNickname,\r\n        remoteTracks) {\r\n    for (const track of remoteTracks) {\r\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\r\n        this.onRemoteTrackRemoved(track);\r\n    }\r\n};\r\n\r\n/**\r\n * Resumes media transfer over the JVB connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\r\n    logger.info('Resuming media transfer over the JVB connection...');\r\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\r\n        () => {\r\n            logger.info('Resumed media transfer over the JVB connection!');\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to resume media transfer over the JVB connection:',\r\n                error);\r\n        });\r\n};\r\n\r\n/**\r\n * Sets new P2P status and updates some events/states hijacked from\r\n * the <tt>JitsiConference</tt>.\r\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\r\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\r\n * @private\r\n */\r\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\r\n    if (this.p2p === newStatus) {\r\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\r\n\r\n        return;\r\n    }\r\n    this.p2p = newStatus;\r\n    if (newStatus) {\r\n        logger.info('Peer to peer connection established!');\r\n\r\n        // When we end up in a valid P2P session need to reset the properties\r\n        // in case they have persisted, after session with another peer.\r\n        Statistics.analytics.addPermanentProperties({\r\n            p2pFailed: false,\r\n            forceJvb121: false\r\n        });\r\n\r\n        // Sync up video transfer active in case p2pJingleSession not existed\r\n        // when the lastN value was being adjusted.\r\n        const isVideoActive = this.rtc.getLastN() !== 0;\r\n\r\n        this.p2pJingleSession\r\n            .setMediaTransferActive(true, isVideoActive)\r\n            .catch(error => {\r\n                logger.error(\r\n                    'Failed to sync up P2P video transfer status'\r\n                        + `(${isVideoActive})`, error);\r\n            });\r\n    } else {\r\n        logger.info('Peer to peer connection closed!');\r\n    }\r\n\r\n    // Put the JVB connection on hold/resume\r\n    if (this.jvbJingleSession) {\r\n        this.statistics.sendConnectionResumeOrHoldEvent(\r\n            this.jvbJingleSession.peerconnection, !newStatus);\r\n    }\r\n\r\n    // Clear dtmfManager, so that it can be recreated with new connection\r\n    this.dtmfManager = null;\r\n\r\n    // Update P2P status\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.P2P_STATUS,\r\n        this,\r\n        this.p2p);\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n        this._getActiveMediaSession());\r\n\r\n    // Refresh connection interrupted/restored\r\n    this.eventEmitter.emit(\r\n        this.isConnectionInterrupted()\r\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\r\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\r\n};\r\n\r\n/**\r\n * Starts new P2P session.\r\n * @param {string} remoteJid the JID of the remote participant\r\n * @private\r\n */\r\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\r\n    this._maybeClearDeferredStartP2P();\r\n    if (this.p2pJingleSession) {\r\n        logger.error('P2P session already started!');\r\n\r\n        return;\r\n    }\r\n\r\n    this.isP2PConnectionInterrupted = false;\r\n    this.p2pJingleSession\r\n        = this.xmpp.connection.jingle.newP2PJingleSession(\r\n            this.room.myroomjid,\r\n            remoteJid);\r\n    logger.info(\r\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    this.p2pJingleSession.initialize(\r\n        this.room,\r\n        this.rtc,\r\n        this._signalingLayer, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: this._isE2EEEnabled()\r\n        });\r\n\r\n    logger.info('Starting CallStats for P2P connection...');\r\n\r\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\r\n\r\n    const participant = this.participants[remoteID];\r\n\r\n    if (participant) {\r\n        remoteID = participant.getStatsID() || remoteID;\r\n    }\r\n\r\n    this.statistics.startCallStats(\r\n        this.p2pJingleSession.peerconnection,\r\n        remoteID);\r\n\r\n    // NOTE one may consider to start P2P with the local tracks detached,\r\n    // but no data will be sent until ICE succeeds anyway. And we switch\r\n    // immediately once the P2P ICE connects.\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    this.p2pJingleSession.invite(localTracks);\r\n};\r\n\r\n/**\r\n * Suspends media transfer over the JVB connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\r\n    logger.info('Suspending media transfer over the JVB connection...');\r\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\r\n        () => {\r\n            logger.info('Suspended media transfer over the JVB connection !');\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to suspend media transfer over the JVB connection:',\r\n                error);\r\n        });\r\n};\r\n\r\n/**\r\n * Method when called will decide whether it's the time to start or stop\r\n * the P2P session.\r\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\r\n * originates from the user left event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\r\n    if (!browser.supportsP2P()\r\n        || !this.isP2PEnabled()\r\n        || this.isP2PTestModeEnabled()) {\r\n        logger.info('Auto P2P disabled');\r\n\r\n        return;\r\n    }\r\n    const peers = this.getParticipants();\r\n    const peerCount = peers.length;\r\n\r\n    // FIXME 1 peer and it must *support* P2P switching\r\n    const shouldBeInP2P = this._shouldBeInP2PMode();\r\n\r\n    // Clear deferred \"start P2P\" task\r\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\r\n        this._maybeClearDeferredStartP2P();\r\n    }\r\n\r\n    // Start peer to peer session\r\n    if (!this.p2pJingleSession && shouldBeInP2P) {\r\n        const peer = peerCount && peers[0];\r\n\r\n\r\n        const myId = this.myUserId();\r\n        const peersId = peer.getId();\r\n\r\n        if (myId > peersId) {\r\n            logger.debug(\r\n                'I\\'m the bigger peersId - '\r\n                + 'the other peer should start P2P', myId, peersId);\r\n\r\n            return;\r\n        } else if (myId === peersId) {\r\n            logger.error('The same IDs ? ', myId, peersId);\r\n\r\n            return;\r\n        }\r\n\r\n        const jid = peer.getJid();\r\n\r\n        if (userLeftEvent) {\r\n            if (this.deferredStartP2PTask) {\r\n                logger.error('Deferred start P2P task\\'s been set already!');\r\n\r\n                return;\r\n            }\r\n            logger.info(\r\n                `Will start P2P with: ${jid} after ${\r\n                    this.backToP2PDelay} seconds...`);\r\n            this.deferredStartP2PTask = setTimeout(\r\n                this._startP2PSession.bind(this, jid),\r\n                this.backToP2PDelay * 1000);\r\n        } else {\r\n            logger.info(`Will start P2P with: ${jid}`);\r\n            this._startP2PSession(jid);\r\n        }\r\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\r\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\r\n\r\n        // Log that there will be a switch back to the JVB connection\r\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\r\n        }\r\n        this._stopP2PSession();\r\n    }\r\n};\r\n\r\n/**\r\n * Tells whether or not this conference should be currently in the P2P mode.\r\n *\r\n * @private\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype._shouldBeInP2PMode = function() {\r\n    const peers = this.getParticipants();\r\n    const peerCount = peers.length;\r\n    const hasBotPeer = peers.find(p => p._botType === 'poltergeist') !== undefined;\r\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\r\n\r\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\r\n\r\n    return shouldBeInP2P;\r\n};\r\n\r\n/**\r\n * Stops the current P2P session.\r\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\r\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\r\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\r\n * description that will be included in the session terminate message\r\n * @private\r\n */\r\nJitsiConference.prototype._stopP2PSession = function(\r\n        reason,\r\n        reasonDescription) {\r\n    if (!this.p2pJingleSession) {\r\n        logger.error('No P2P session to be stopped!');\r\n\r\n        return;\r\n    }\r\n\r\n    const wasP2PEstablished = this.isP2PActive();\r\n\r\n    // Swap remote tracks, but only if the P2P has been fully established\r\n    if (wasP2PEstablished) {\r\n        if (this.jvbJingleSession) {\r\n            this._resumeMediaTransferForJvbConnection();\r\n        }\r\n\r\n        // Remove remote P2P tracks\r\n        this._removeRemoteP2PTracks();\r\n    }\r\n\r\n    // Stop P2P stats\r\n    logger.info('Stopping remote stats for P2P connection');\r\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\r\n    logger.info('Stopping CallStats for P2P connection');\r\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\r\n\r\n    this.p2pJingleSession.terminate(\r\n        () => {\r\n            logger.info('P2P session terminate RESULT');\r\n        },\r\n        error => {\r\n            // Because both initiator and responder are simultaneously\r\n            // terminating their JingleSessions in case of the 'to JVB switch'\r\n            // when 3rd participant joins, both will dispose their sessions and\r\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\r\n            // want to log this as an error since it's expected behaviour.\r\n            //\r\n            // We want them both to terminate, because in case of initiator's\r\n            // crash the responder would stay in P2P mode until ICE fails which\r\n            // could take up to 20 seconds.\r\n            //\r\n            // NOTE lack of 'reason' is considered as graceful session terminate\r\n            // where both initiator and responder terminate their sessions\r\n            // simultaneously.\r\n            if (reason) {\r\n                logger.error(\r\n                    'An error occurred while trying to terminate'\r\n                        + ' P2P Jingle session', error);\r\n            }\r\n        }, {\r\n            reason: reason ? reason : 'success',\r\n            reasonDescription: reasonDescription\r\n                ? reasonDescription : 'Turing off P2P session',\r\n            sendSessionTerminate: this.room\r\n                && this.getParticipantById(\r\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\r\n        });\r\n\r\n    this.p2pJingleSession = null;\r\n\r\n    // Update P2P status and other affected events/states\r\n    this._setP2PStatus(false);\r\n\r\n    if (wasP2PEstablished) {\r\n        // Add back remote JVB tracks\r\n        if (this.jvbJingleSession) {\r\n            this._addRemoteJVBTracks();\r\n        } else {\r\n            logger.info('Not adding remote JVB tracks - no session yet');\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Checks whether or not the conference is currently in the peer to peer mode.\r\n * Being in peer to peer mode means that the direct connection has been\r\n * established and the P2P connection is being used for media transmission.\r\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\r\n */\r\nJitsiConference.prototype.isP2PActive = function() {\r\n    return this.p2p;\r\n};\r\n\r\n/**\r\n * Returns the current ICE state of the P2P connection.\r\n * NOTE: method is used by the jitsi-meet-torture tests.\r\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\r\n * no P2P connection.\r\n */\r\nJitsiConference.prototype.getP2PConnectionState = function() {\r\n    if (this.isP2PActive()) {\r\n        return this.p2pJingleSession.peerconnection.getConnectionState();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n\r\n/**\r\n * Manually starts new P2P session (should be used only in the tests).\r\n */\r\nJitsiConference.prototype.startP2PSession = function() {\r\n    const peers = this.getParticipants();\r\n\r\n    // Start peer to peer session\r\n    if (peers.length === 1) {\r\n        const peerJid = peers[0].getJid();\r\n\r\n        this._startP2PSession(peerJid);\r\n    } else {\r\n        throw new Error(\r\n            'There must be exactly 1 participant to start the P2P session !');\r\n    }\r\n};\r\n\r\n/**\r\n * Manually stops the current P2P session (should be used only in the tests)\r\n */\r\nJitsiConference.prototype.stopP2PSession = function() {\r\n    this._stopP2PSession();\r\n};\r\n\r\n/**\r\n * Get a summary of how long current participants have been the dominant speaker\r\n * @returns {object}\r\n */\r\nJitsiConference.prototype.getSpeakerStats = function() {\r\n    return this.speakerStatsCollector.getStats();\r\n};\r\n\r\n/**\r\n * Sets the maximum video size the local participant should receive from remote\r\n * participants.\r\n *\r\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\r\n * this receiver is willing to receive.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\r\n    this.qualityController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\r\n};\r\n\r\n/**\r\n * Sets the maximum video size the local participant should send to remote\r\n * participants.\r\n * @param {number} maxFrameHeight - The user preferred max frame height.\r\n * @returns {Promise} promise that will be resolved when the operation is\r\n * successful and rejected otherwise.\r\n */\r\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\r\n    return this.qualityController.setPreferredSendMaxFrameHeight(maxFrameHeight);\r\n};\r\n\r\n/**\r\n * Creates a video SIP GW session and returns it if service is enabled. Before\r\n * creating a session one need to check whether video SIP GW service is\r\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\r\n * if there are available nodes to serve this request, after creating the\r\n * session those nodes can be taken and the request about using the\r\n * created session can fail.\r\n *\r\n * @param {string} sipAddress - The sip address to be used.\r\n * @param {string} displayName - The display name to be used for this session.\r\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\r\n * initialised and there is no room.\r\n */\r\nJitsiConference.prototype.createVideoSIPGWSession\r\n    = function(sipAddress, displayName) {\r\n        if (!this.room) {\r\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\r\n        }\r\n\r\n        return this.videoSIPGWHandler\r\n            .createVideoSIPGWSession(sipAddress, displayName);\r\n    };\r\n\r\n/**\r\n * Sends a conference.join analytics event.\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\r\n    const meetingId = this.getMeetingUniqueId();\r\n\r\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\r\n        return;\r\n    }\r\n\r\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\r\n        meetingId,\r\n        participantId: `${meetingId}.${this._statsCurrentId}`\r\n    }));\r\n    this._conferenceJoinAnalyticsEventSent = Date.now();\r\n};\r\n\r\n/**\r\n * Sends conference.left analytics event.\r\n * @private\r\n */\r\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\r\n    const meetingId = this.getMeetingUniqueId();\r\n\r\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\r\n\r\n        return;\r\n    }\r\n\r\n    Statistics.sendAnalytics(createConferenceEvent('left', {\r\n        meetingId,\r\n        participantId: `${meetingId}.${this._statsCurrentId}`,\r\n        stats: {\r\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\r\n            perf: this.getPerformanceStats()\r\n        }\r\n    }));\r\n};\r\n\r\n/**\r\n * Restarts all active media sessions.\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype._restartMediaSessions = function() {\r\n    if (this.p2pJingleSession) {\r\n        this.stopP2PSession();\r\n    }\r\n\r\n    if (this.jvbJingleSession) {\r\n        this.jvbJingleSession.terminate(\r\n            null /* success callback => we don't care */,\r\n            error => {\r\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\r\n            }, {\r\n                reason: 'success',\r\n                reasonDescription: 'restart required',\r\n                requestRestart: true,\r\n                sendSessionTerminate: true\r\n            });\r\n    }\r\n\r\n    this._maybeStartOrStopP2P(false);\r\n};\r\n\r\n/**\r\n * Returns whether End-To-End encryption is enabled.\r\n *\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype._isE2EEEnabled = function() {\r\n    return this._e2eEncryption && this._e2eEncryption.isEnabled();\r\n};\r\n\r\n/**\r\n * Returns whether End-To-End encryption is supported. Note that not all participants\r\n * in the conference may support it.\r\n *\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype.isE2EESupported = function() {\r\n    return E2EEncryption.isSupported(this.options.config);\r\n};\r\n\r\n/**\r\n * Enables / disables End-to-End encryption.\r\n *\r\n * @param {boolean} enabled whether to enable E2EE or not.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.toggleE2EE = function(enabled) {\r\n    if (!this.isE2EESupported()) {\r\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\r\n\r\n        return;\r\n    }\r\n\r\n    this._e2eEncryption.setEnabled(enabled);\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\r\n *\r\n * @returns {boolean} whether lobby is supported in the backend.\r\n */\r\nJitsiConference.prototype.isLobbySupported = function() {\r\n    return Boolean(this.room && this.room.getLobby().isSupported());\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if the room has members only enabled.\r\n *\r\n * @returns {boolean} whether conference room is members only.\r\n */\r\nJitsiConference.prototype.isMembersOnly = function() {\r\n    return Boolean(this.room && this.room.membersOnlyEnabled);\r\n};\r\n\r\n/**\r\n * Enables lobby by moderators\r\n *\r\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\r\n */\r\nJitsiConference.prototype.enableLobby = function() {\r\n    if (this.room && this.isModerator()) {\r\n        return this.room.getLobby().enable();\r\n    }\r\n\r\n    return Promise.reject(\r\n        new Error('The conference not started or user is not moderator'));\r\n};\r\n\r\n/**\r\n * Disabled lobby by moderators\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.disableLobby = function() {\r\n    if (this.room && this.isModerator()) {\r\n        this.room.getLobby().disable();\r\n    }\r\n};\r\n\r\n/**\r\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\r\n *\r\n * @param {string} displayName Display name should be set to show it to moderators.\r\n * @param {string} email Optional email is used to present avatar to the moderator.\r\n * @returns {Promise<never>}\r\n */\r\nJitsiConference.prototype.joinLobby = function(displayName, email) {\r\n    if (this.room) {\r\n        return this.room.getLobby().join(displayName, email);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference not started'));\r\n};\r\n\r\n/**\r\n * Denies an occupant in the lobby room access to the conference.\r\n * @param {string} id The participant id.\r\n */\r\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\r\n    if (this.room) {\r\n        this.room.getLobby().denyAccess(id);\r\n    }\r\n};\r\n\r\n/**\r\n * Approves the request to join the conference to a participant waiting in the lobby.\r\n *\r\n * @param {string} id The participant id.\r\n */\r\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\r\n    if (this.room) {\r\n        this.room.getLobby().approveAccess(id);\r\n    }\r\n};\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport RTCEvents from './service/RTC/RTCEvents';\r\nimport VideoType from './service/RTC/VideoType';\r\nimport AuthenticationEvents\r\n    from './service/authentication/AuthenticationEvents';\r\nimport {\r\n    ACTION_JINGLE_SA_TIMEOUT,\r\n    createBridgeDownEvent,\r\n    createConnectionStageReachedEvent,\r\n    createFocusLeftEvent,\r\n    createJingleEvent,\r\n    createRemotelyMutedEvent\r\n} from './service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from './service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Setups all event listeners related to conference\r\n * @param conference {JitsiConference} the conference\r\n */\r\nexport default function JitsiConferenceEventManager(conference) {\r\n    this.conference = conference;\r\n    this.xmppListeners = {};\r\n\r\n    // Listeners related to the conference only\r\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\r\n        track => {\r\n            if (!track.isLocal() || !conference.statistics) {\r\n                return;\r\n            }\r\n            const session\r\n                = track.isP2P\r\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\r\n\r\n            // TPC will be null, before the conference starts, but the event\r\n            // still should be queued\r\n            const tpc = (session && session.peerconnection) || null;\r\n\r\n            conference.statistics.sendMuteEvent(\r\n                tpc,\r\n                track.isMuted(),\r\n                track.getType());\r\n        });\r\n}\r\n\r\n/**\r\n * Setups event listeners related to conference.chatRoom\r\n */\r\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\r\n    const conference = this.conference;\r\n    const chatRoom = conference.room;\r\n\r\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\r\n        this.conference.eventEmitter);\r\n\r\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\r\n        if (!jingleSession.isP2P) {\r\n            // If using DataChannel as bridge channel, it must be closed\r\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\r\n            // event for the channel established with the new bridge.\r\n            // TODO: This may be bypassed when using a WebSocket as bridge\r\n            // channel.\r\n            conference.rtc.closeBridgeChannel();\r\n        }\r\n\r\n        // else: there are no DataChannels in P2P session (at least for now)\r\n    });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.ICE_RESTART_SUCCESS,\r\n        (jingleSession, offerIq) => {\r\n            // The JVB data chanel needs to be reopened in case the conference\r\n            // has been moved to a new bridge.\r\n            !jingleSession.isP2P\r\n                && conference._setBridgeChannel(\r\n                    offerIq, jingleSession.peerconnection);\r\n        });\r\n\r\n\r\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\r\n        actor => {\r\n            // TODO: Add a way to differentiate between commands which caused\r\n            // us to mute and those that did not change our state (i.e. we were\r\n            // already muted).\r\n            Statistics.sendAnalytics(createRemotelyMutedEvent());\r\n\r\n            conference.mutedByFocusActor = actor;\r\n\r\n            // set isMutedByFocus when setAudioMute Promise ends\r\n            conference.rtc.setAudioMute(true).then(\r\n                () => {\r\n                    conference.isMutedByFocus = true;\r\n                    conference.mutedByFocusActor = null;\r\n                })\r\n                .catch(\r\n                    error => {\r\n                        conference.mutedByFocusActor = null;\r\n                        logger.warn(\r\n                            'Error while audio muting due to focus request', error);\r\n                    });\r\n        }\r\n    );\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\r\n        JitsiConferenceEvents.SUBJECT_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\r\n        JitsiConferenceEvents.CONFERENCE_JOINED);\r\n\r\n    // send some analytics events\r\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\r\n        () => {\r\n            this.conference.isJvbConnectionInterrupted = false;\r\n\r\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\r\n                const event\r\n                    = createConnectionStageReachedEvent(\r\n                        `conference_${key}`,\r\n                        { value: chatRoom.connectionTimes[key] });\r\n\r\n                Statistics.sendAnalytics(event);\r\n            });\r\n\r\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\r\n                const event\r\n                    = createConnectionStageReachedEvent(\r\n                        `xmpp_${key}`,\r\n                        { value: chatRoom.xmpp.connectionTimes[key] });\r\n\r\n                Statistics.sendAnalytics(event);\r\n            });\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\r\n        if (!session.isP2P) {\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n        }\r\n    });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONNECTION_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONNECTION_ERROR);\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\r\n    chatRoom.addListener(\r\n        XMPPEvents.BRIDGE_DOWN,\r\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.RESERVATION_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\r\n\r\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\r\n        jingleSession => {\r\n            conference._onIceConnectionFailed(jingleSession);\r\n        });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\r\n        JitsiConferenceEvents.CONFERENCE_ERROR,\r\n        JitsiConferenceErrors.CHAT_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\r\n\r\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\r\n        () => {\r\n            Statistics.sendAnalytics(createFocusLeftEvent());\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.FOCUS_LEFT);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\r\n        jingleSession => {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createJingleEvent(\r\n                    ACTION_JINGLE_SA_TIMEOUT,\r\n                    { p2p: jingleSession.isP2P }));\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\r\n        (session, jid) => {\r\n\r\n            if (jid) {\r\n                const participant = conference.getParticipantById(\r\n                    Strophe.getResourceFromJid(jid));\r\n\r\n                if (session.getStatus() === 'off') {\r\n                    session.setTerminator(participant);\r\n                } else if (session.getStatus() === 'on') {\r\n                    session.setInitiator(participant);\r\n                }\r\n            }\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\r\n                session);\r\n        });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\r\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\r\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(\r\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\r\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\r\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\r\n\r\n    chatRoom.setParticipantPropertyListener((node, from) => {\r\n        const participant = conference.getParticipantById(from);\r\n\r\n        if (!participant) {\r\n            return;\r\n        }\r\n\r\n        participant.setProperty(\r\n            node.tagName.substring('jitsi_participant_'.length),\r\n            node.value);\r\n    });\r\n\r\n    chatRoom.addListener(XMPPEvents.KICKED,\r\n        conference.onMemberKicked.bind(conference));\r\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\r\n        conference.onSuspendDetected.bind(conference));\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\r\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\r\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\r\n\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\r\n        conference.onMemberJoined.bind(conference));\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\r\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\r\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\r\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\r\n        conference._onMemberBotTypeChanged.bind(conference));\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\r\n        conference.onMemberLeft.bind(conference));\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\r\n        JitsiConferenceEvents.CONFERENCE_LEFT);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\r\n\r\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\r\n        conference.onDisplayNameChanged.bind(conference));\r\n\r\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\r\n        conference.onLocalRoleChanged(role);\r\n\r\n        // log all events for the recorder operated by the moderator\r\n        if (conference.statistics && conference.isModerator()) {\r\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\r\n                recorderSession => {\r\n                    const logObject = {\r\n                        error: recorderSession.getError(),\r\n                        id: 'recorder_status',\r\n                        status: recorderSession.getStatus()\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n                });\r\n        }\r\n    });\r\n\r\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\r\n        conference.onUserRoleChanged.bind(conference));\r\n\r\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\r\n        (authEnabled, authIdentity) => {\r\n            conference.authEnabled = authEnabled;\r\n            conference.authIdentity = authIdentity;\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\r\n                authIdentity);\r\n        });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.MESSAGE_RECEIVED,\r\n\r\n        // eslint-disable-next-line max-params\r\n        (jid, displayName, txt, myJid, ts) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\r\n                id, txt, ts, displayName);\r\n        });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\r\n\r\n        // eslint-disable-next-line max-params\r\n        (jid, displayName, txt, myJid, ts) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\r\n                id, txt, ts);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\r\n        (jid, status) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n            const participant = conference.getParticipantById(id);\r\n\r\n            if (!participant || participant._status === status) {\r\n                return;\r\n            }\r\n            participant._status = status;\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\r\n        (from, payload) => {\r\n            const id = Strophe.getResourceFromJid(from);\r\n            const participant = conference.getParticipantById(id);\r\n\r\n            if (participant) {\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n                    participant, payload);\r\n            } else {\r\n                logger.warn(\r\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\r\n                    + `participant: ${from}`,\r\n                    payload);\r\n            }\r\n        });\r\n\r\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\r\n        let isModerator = false;\r\n\r\n        if (conference.myUserId() === from && conference.isModerator()) {\r\n            isModerator = true;\r\n        } else {\r\n            const participant = conference.getParticipantById(from);\r\n\r\n            if (participant && participant.isModerator()) {\r\n                isModerator = true;\r\n            }\r\n        }\r\n\r\n        if (!isModerator) {\r\n            return;\r\n        }\r\n\r\n        const startAudioMuted = data.attributes.audio === 'true';\r\n        const startVideoMuted = data.attributes.video === 'true';\r\n\r\n        let updated = false;\r\n\r\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\r\n            conference.startMutedPolicy.audio = startAudioMuted;\r\n            updated = true;\r\n        }\r\n\r\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\r\n            conference.startMutedPolicy.video = startVideoMuted;\r\n            updated = true;\r\n        }\r\n\r\n        if (updated) {\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\r\n                conference.startMutedPolicy\r\n            );\r\n        }\r\n    });\r\n\r\n    if (conference.statistics) {\r\n        // FIXME ICE related events should end up in RTCEvents eventually\r\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\r\n            session => {\r\n                conference.statistics.sendIceConnectionFailedEvent(\r\n                    session.peerconnection);\r\n            });\r\n\r\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\r\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\r\n            (e, pc) => {\r\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\r\n            });\r\n    }\r\n};\r\n\r\n/**\r\n * Setups event listeners related to conference.rtc\r\n */\r\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\r\n    const conference = this.conference;\r\n    const rtc = conference.rtc;\r\n\r\n    rtc.addListener(\r\n        RTCEvents.REMOTE_TRACK_ADDED,\r\n        conference.onRemoteTrackAdded.bind(conference));\r\n\r\n    rtc.addListener(\r\n        RTCEvents.REMOTE_TRACK_REMOVED,\r\n        conference.onRemoteTrackRemoved.bind(conference));\r\n\r\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n        id => {\r\n            if (conference.lastDominantSpeaker !== id && conference.room) {\r\n                conference.lastDominantSpeaker = id;\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, id);\r\n\r\n                if (conference.statistics && conference.myUserId() === id) {\r\n                    // We are the new dominant speaker.\r\n                    conference.statistics.sendDominantSpeakerEvent(\r\n                        conference.room.roomjid);\r\n                }\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\r\n        const now = window.performance.now();\r\n        const key = 'data.channel.opened';\r\n\r\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n        logger.log(`(TIME) ${key}:\\t`, now);\r\n        conference.room.connectionTimes[key] = now;\r\n        Statistics.sendAnalytics(\r\n            createConnectionStageReachedEvent(key, { value: now }));\r\n\r\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\r\n    });\r\n\r\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n        (from, payload) => {\r\n            const participant = conference.getParticipantById(from);\r\n\r\n            if (participant) {\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n                    participant, payload);\r\n            } else {\r\n                logger.warn(\r\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\r\n                        + `participant: ${from}`,\r\n                    payload);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\r\n        (tpc, ufrag) => {\r\n            if (!tpc.isP2P) {\r\n                Statistics.sendLog(\r\n                    JSON.stringify({\r\n                        id: 'local_ufrag',\r\n                        value: ufrag\r\n                    }));\r\n            }\r\n        });\r\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\r\n        (tpc, ufrag) => {\r\n            if (!tpc.isP2P) {\r\n                Statistics.sendLog(\r\n                    JSON.stringify({\r\n                        id: 'remote_ufrag',\r\n                        value: ufrag\r\n                    }));\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendCreateOfferFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\r\n        (track, ssrc) => {\r\n            // when starting screen sharing, the track is created and when\r\n            // we do set local description and we process the ssrc we\r\n            // will be notified for it and we will report it with the event\r\n            // for screen sharing\r\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\r\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * Removes event listeners related to conference.xmpp\r\n */\r\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    conference.xmpp.caps.removeListener(\r\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\r\n        this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]);\r\n    delete this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED];\r\n\r\n    Object.keys(this.xmppListeners).forEach(eventName => {\r\n        conference.xmpp.removeListener(\r\n            eventName,\r\n            this.xmppListeners[eventName]);\r\n    });\r\n    this.xmppListeners = {};\r\n};\r\n\r\n\r\n/**\r\n * Setups event listeners related to conference.xmpp\r\n */\r\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    const featuresChangedListener = from => {\r\n        const participant\r\n            = conference.getParticipantById(\r\n            Strophe.getResourceFromJid(from));\r\n\r\n        if (participant) {\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED,\r\n                participant);\r\n        }\r\n    };\r\n\r\n    conference.xmpp.caps.addListener(\r\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\r\n        featuresChangedListener);\r\n    this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]\r\n        = featuresChangedListener;\r\n\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_INCOMING,\r\n        conference.onIncomingCall.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_ACCEPTED,\r\n        conference.onCallAccepted.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.TRANSPORT_INFO,\r\n        conference.onTransportInfo.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_ENDED,\r\n        conference.onCallEnded.bind(conference));\r\n\r\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\r\n        (audioMuted, videoMuted) => {\r\n            if (conference.options.config.ignoreStartMuted) {\r\n                return;\r\n            }\r\n\r\n            conference.startAudioMuted = audioMuted;\r\n            conference.startVideoMuted = videoMuted;\r\n\r\n            // mute existing local tracks because this is initial mute from\r\n            // Jicofo\r\n            conference.getLocalTracks().forEach(track => {\r\n                switch (track.getType()) {\r\n                case MediaType.AUDIO:\r\n                    conference.startAudioMuted && track.mute();\r\n                    break;\r\n                case MediaType.VIDEO:\r\n                    conference.startVideoMuted && track.mute();\r\n                    break;\r\n                }\r\n            });\r\n\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\r\n        });\r\n\r\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\r\n        createdTimestamp => {\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\r\n        });\r\n};\r\n\r\n/**\r\n * Add XMPP listener and save its reference for remove on leave conference.\r\n */\r\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\r\n        eventName, listener) {\r\n    this.xmppListeners[eventName] = listener;\r\n    this.conference.xmpp.addListener(eventName, listener);\r\n};\r\n\r\n/**\r\n * Setups event listeners related to conference.statistics\r\n */\r\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    if (!conference.statistics) {\r\n        return;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\r\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\r\n    });\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    // Forward the \"before stats disposed\" event\r\n    conference.statistics.addBeforeDisposedListener(() => {\r\n        conference.eventEmitter.emit(\r\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\r\n    });\r\n\r\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\r\n    if (!conference.options.config.startSilent) {\r\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\r\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\r\n                const ssrc = tpc.getLocalSSRC(track);\r\n\r\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\r\n                    return;\r\n                }\r\n\r\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\r\n            });\r\n        });\r\n    }\r\n};\r\n","import { BrowserDetection } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// TODO: Move this code to js-utils.\r\n\r\n// NOTE: Now we are extending BrowserDetection in order to preserve\r\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\r\n// and BrowserDetection as separate objects in future.\r\n\r\n/**\r\n * Implements browser capabilities for lib-jitsi-meet.\r\n */\r\nexport default class BrowserCapabilities extends BrowserDetection {\r\n    /**\r\n     * Creates new BrowserCapabilities instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n        logger.info(\r\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\r\n    }\r\n\r\n    /**\r\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\r\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\r\n     * off the camera device).\r\n     * @return {boolean} <tt>true</tt> if the current browser supports this\r\n     * strategy or <tt>false</tt> otherwise.\r\n     */\r\n    doesVideoMuteByStreamRemove() {\r\n        return this.isChromiumBased() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the current browser support peer to peer connections\r\n     * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>\r\n     * otherwise.\r\n     */\r\n    supportsP2P() {\r\n        return !this.usesUnifiedPlan();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser is Chromium based, that is, it's either\r\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\r\n     * Chrome.\r\n     *\r\n     * This includes the following browsers:\r\n     * - Chrome and Chromium\r\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\r\n     *   such as Brave and Vivaldi\r\n     * - Browsers which are NOT Chrome but use it as their engine, and have\r\n     *   custom detection code: Opera, Electron and NW.JS\r\n     */\r\n    isChromiumBased() {\r\n        return this.isChrome()\r\n            || this.isElectron()\r\n            || this.isNWJS()\r\n            || this.isOpera();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser is supported.\r\n     *\r\n     * @returns {boolean} true if the browser is supported, false otherwise.\r\n     */\r\n    isSupported() {\r\n        return this.isChromiumBased()\r\n            || this.isFirefox()\r\n            || this.isReactNative()\r\n            || (this.isSafari() && !this.isVersionLessThan('12.1'));\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current environment needs a user interaction\r\n     * with the page before any unmute can occur.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isUserInteractionRequiredForUnmute() {\r\n        return this.isFirefox() && this.isVersionLessThan('68');\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\r\n     * user's connection is interrupted and the video stops playback.\r\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\r\n     * otherwise.\r\n     */\r\n    supportsVideoMuteOnConnInterrupted() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser reports upload and download bandwidth\r\n     * statistics.\r\n     * @return {boolean}\r\n     */\r\n    supportsBandwidthStatistics() {\r\n        // FIXME bandwidth stats are currently not implemented for FF on our\r\n        // side, but not sure if not possible ?\r\n        return !this.isFirefox() && !this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports setting codec preferences on the transceiver.\r\n     * @returns {boolean}\r\n     */\r\n    supportsCodecPreferences() {\r\n        return this.usesUnifiedPlan()\r\n            && typeof window.RTCRtpTransceiver !== 'undefined'\r\n            && Object.keys(window.RTCRtpTransceiver.prototype).indexOf('setCodecPreferences') > -1\r\n            && Object.keys(RTCRtpSender.prototype).indexOf('getCapabilities') > -1\r\n\r\n            // this is not working on Safari because of the following bug\r\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\r\n            && !this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser support the device change event.\r\n     * @return {boolean}\r\n     */\r\n    supportsDeviceChangeEvent() {\r\n        return navigator.mediaDevices\r\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\r\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports RTT statistics for srflx local\r\n     * candidates through the legacy getStats() API.\r\n     */\r\n    supportsLocalCandidateRttStatistics() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports the Long Tasks API that lets us observe\r\n     * performance measurement events and be notified of tasks that take longer than\r\n     * 50ms to execute on the main thread.\r\n     */\r\n    supportsPerformanceObserver() {\r\n        return typeof window.PerformanceObserver !== 'undefined'\r\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports audio level stats on the receivers.\r\n     */\r\n    supportsReceiverStats() {\r\n        return typeof window.RTCRtpReceiver !== 'undefined'\r\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1;\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser reports round trip time statistics for\r\n     * the ICE candidate pair.\r\n     * @return {boolean}\r\n     */\r\n    supportsRTTStatistics() {\r\n        // Firefox does not seem to report RTT for ICE candidate pair:\r\n        // eslint-disable-next-line max-len\r\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\r\n        // It does report mozRTT for RTP streams, but at the time of this\r\n        // writing it's value does not make sense most of the time\r\n        // (is reported as 1):\r\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\r\n        // For Chrome and others we rely on 'googRtt'.\r\n        return !this.isFirefox();\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current browser can support capturing video,\r\n     * be it camera or desktop, and displaying received video.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    supportsVideo() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses plan B.\r\n     * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n     * @returns {boolean}\r\n     */\r\n    usesPlanB() {\r\n        return this.isReactNative();//!this.usesUnifiedPlan();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses SDP munging for turning on simulcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesSdpMungingForSimulcast() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses unified plan.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesUnifiedPlan() {\r\n        if (this.isFirefox()) {\r\n            return true;\r\n        }\r\n\r\n        if (this.isSafari() && typeof window.RTCRtpTransceiver !== 'undefined') {\r\n            // eslint-disable-next-line max-len\r\n            // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\r\n            // eslint-disable-next-line no-undef\r\n            return Object.keys(RTCRtpTransceiver.prototype)\r\n                   .indexOf('currentDirection') > -1;\r\n        }\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n        // return false;\r\n        return !this.isReactNative();\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current browser should be using the new\r\n     * getUserMedia flow, which utilizes the adapter shim. This method should\r\n     * be temporary and used while migrating all browsers to use adapter and\r\n     * the new getUserMedia.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesNewGumFlow() {\r\n        const REQUIRED_CHROME_VERSION = 61;\r\n\r\n        if (this.isChrome()) {\r\n            return !this.isVersionLessThan(REQUIRED_CHROME_VERSION);\r\n        }\r\n\r\n        if (this.isFirefox() || this.isSafari()) {\r\n            return true;\r\n        }\r\n\r\n        if (this.isChromiumBased()) {\r\n            return this._getChromiumBasedVersion() >= REQUIRED_CHROME_VERSION;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses webrtc-adapter. All browsers using the new\r\n     * getUserMedia flow and Edge.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesAdapter() {\r\n        return !this.isReactNative();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\r\n     * to the bridge instead of the ssrcs.\r\n     */\r\n    usesRidsForSimulcast() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports getDisplayMedia.\r\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\r\n     */\r\n    supportsGetDisplayMedia() {\r\n        return typeof navigator.getDisplayMedia !== 'undefined'\r\n            || (typeof navigator.mediaDevices !== 'undefined'\r\n                && typeof navigator.mediaDevices.getDisplayMedia\r\n                    !== 'undefined');\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports insertable streams, needed for E2EE.\r\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\r\n     */\r\n    supportsInsertableStreams() {\r\n        if (!(typeof window.RTCRtpSender !== 'undefined'\r\n            && (window.RTCRtpSender.prototype.createEncodedStreams\r\n                || window.RTCRtpSender.prototype.createEncodedVideoStreams))) {\r\n            return false;\r\n        }\r\n\r\n        // Feature-detect transferable streams which we need to operate in a worker.\r\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\r\n        const stream = new ReadableStream();\r\n\r\n        try {\r\n            window.postMessage(stream, '*', [ stream ]);\r\n\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether the browser supports the RED format for audio.\r\n     */\r\n    supportsAudioRed() {\r\n        return Boolean(window.RTCRtpSender\r\n            && window.RTCRtpSender.getCapabilities\r\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\r\n            && window.RTCRtpReceiver\r\n            && window.RTCRtpReceiver.getCapabilities\r\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports the \"sdpSemantics\" configuration option.\r\n     * https://webrtc.org/web-apis/chrome/unified-plan/\r\n     * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n     * @returns {boolean}\r\n     */\r\n    supportsSdpSemantics() {\r\n        return this.isReactNative();//this.isChromiumBased() && this._getChromiumBasedVersion() >= 65;\r\n    }\r\n\r\n    /**\r\n     * Returns the version of a Chromium based browser.\r\n     *\r\n     * @returns {Number}\r\n     */\r\n    _getChromiumBasedVersion() {\r\n        if (this.isChromiumBased()) {\r\n            // NW.JS doesn't expose the Chrome version in the UA string.\r\n            if (this.isNWJS()) {\r\n                // eslint-disable-next-line no-undef\r\n                return Number.parseInt(process.versions.chromium, 10);\r\n            }\r\n\r\n            // Here we process all browsers which use the Chrome engine but\r\n            // don't necessarily identify as Chrome. We cannot use the version\r\n            // comparing functions because the Electron, Opera and NW.JS\r\n            // versions are inconsequential here, as we need to know the actual\r\n            // Chrome engine version.\r\n            const ua = navigator.userAgent;\r\n\r\n            if (ua.match(/Chrome/)) {\r\n                const version\r\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\r\n\r\n                return version;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    TYPE_OPERATIONAL,\r\n    TYPE_PAGE,\r\n    TYPE_TRACK,\r\n    TYPE_UI\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\n\r\nconst MAX_CACHE_SIZE = 100;\r\n\r\n// eslist-disable-line no-undef\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This class provides an API to lib-jitsi-meet and its users for sending\r\n * analytics events. It serves as a bridge to different backend implementations\r\n * (\"analytics handlers\") and a cache for events attempted to be sent before\r\n * the analytics handlers were enabled.\r\n *\r\n * The API is designed to be an easy replacement for the previous version of\r\n * this adapter, and is meant to be extended with more convenience methods.\r\n *\r\n *\r\n * The API calls are translated to objects with the following structure, which\r\n * are then passed to the sendEvent(event) function of the underlying handlers:\r\n *\r\n * {\r\n *    type,\r\n *\r\n *    action,\r\n *    actionSubject,\r\n *    actionSubjectId,\r\n *    attributes,\r\n *    categories,\r\n *    containerId,\r\n *    containerType,\r\n *    name,\r\n *    objectId,\r\n *    objectType,\r\n *    source,\r\n *    tags\r\n * }\r\n *\r\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\r\n * other properties are considered required according to the type.\r\n *\r\n * For events with type 'page', the required properties are: name.\r\n *\r\n * For events with type 'operational' and 'ui', the required properties are:\r\n * action, actionSubject, source\r\n *\r\n * For events with type 'page', the required properties are:\r\n * action, actionSubject, source, containerType, containerId, objectType,\r\n * objectId\r\n */\r\nclass AnalyticsAdapter {\r\n    /**\r\n     * Creates new AnalyticsAdapter instance.\r\n     */\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Reset the state to the initial one.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        /**\r\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\r\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\r\n         * any more events, and it can not be re-enabled.\r\n         * @type {boolean}\r\n         */\r\n        this.disposed = false;\r\n\r\n        /**\r\n         * The set of handlers to which events will be sent.\r\n         * @type {Set<any>}\r\n         */\r\n        this.analyticsHandlers = new Set();\r\n\r\n        /**\r\n         * The cache of events which are not sent yet. The cache is enabled\r\n         * while this field is truthy, and disabled otherwise.\r\n         * @type {Array}\r\n         */\r\n        this.cache = [];\r\n\r\n        /**\r\n         * Map of properties that will be added to every event. Note that the\r\n         * keys will be prefixed with \"permanent.\".\r\n         */\r\n        this.permanentProperties = {};\r\n\r\n        /**\r\n         * The name of the conference that this AnalyticsAdapter is associated\r\n         * with.\r\n         * @type {null}\r\n         */\r\n        this.conferenceName = '';\r\n\r\n        this.addPermanentProperties({\r\n            'user_agent': navigator.userAgent,\r\n            'browser_name': browser.getName()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose analytics. Clears all handlers.\r\n     */\r\n    dispose() {\r\n        logger.warn('Disposing of analytics adapter.');\r\n\r\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\r\n            this.analyticsHandlers.forEach(handler => {\r\n                if (typeof handler.dispose === 'function') {\r\n                    handler.dispose();\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setAnalyticsHandlers([]);\r\n        this.disposed = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the handlers that are going to be used to send analytics. Sends any\r\n     * cached events.\r\n     * @param {Array} handlers the handlers\r\n     */\r\n    setAnalyticsHandlers(handlers) {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        this.analyticsHandlers = new Set(handlers);\r\n\r\n        this._setUserProperties();\r\n\r\n        // Note that we disable the cache even if the set of handlers is empty.\r\n        const cache = this.cache;\r\n\r\n        this.cache = null;\r\n        if (cache) {\r\n            cache.forEach(event => this._sendEvent(event));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the user properties to the analytics handlers.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _setUserProperties() {\r\n        this.analyticsHandlers.forEach(handler => {\r\n            try {\r\n                handler.setUserProperties(this.permanentProperties);\r\n            } catch (error) {\r\n                logger.warn('Error in setUserProperties method of one of the '\r\n                    + `analytics handlers: ${error}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\r\n     * Permanent properties will be added as \"attributes\" to events sent to\r\n     * the underlying \"analytics handlers\", and their keys will be prefixed\r\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\r\n     * result in {\"permanent_key\": \"value\"} object to be added to the\r\n     * \"attributes\" field of events.\r\n     *\r\n     * @param {Object} properties the properties to add\r\n     */\r\n    addPermanentProperties(properties) {\r\n        this.permanentProperties = {\r\n            ...this.permanentProperties,\r\n            ...properties\r\n        };\r\n\r\n        this._setUserProperties();\r\n    }\r\n\r\n    /**\r\n     * Sets the name of the conference that this AnalyticsAdapter is associated\r\n     * with.\r\n     * @param name the name to set.\r\n     */\r\n    setConferenceName(name) {\r\n        this.conferenceName = name;\r\n        this.addPermanentProperties({ 'conference_name': name });\r\n    }\r\n\r\n    /**\r\n     * Sends an event with a given name and given properties. The first\r\n     * parameter is either a string or an object. If it is a string, it is used\r\n     * as the event name and the second parameter is used at the attributes to\r\n     * attach to the event. If it is an object, it represents the whole event,\r\n     * including any desired attributes, and the second parameter is ignored.\r\n     *\r\n     * @param {String|Object} eventName either a string to be used as the name\r\n     * of the event, or an event object. If an event object is passed, the\r\n     * properties parameters is ignored.\r\n     * @param {Object} properties the properties/attributes to attach to the\r\n     * event, if eventName is a string.\r\n     */\r\n    sendEvent(eventName, properties = {}) {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        let event = null;\r\n\r\n        if (typeof eventName === 'string') {\r\n            event = {\r\n                type: TYPE_OPERATIONAL,\r\n                action: eventName,\r\n                actionSubject: eventName,\r\n                source: eventName,\r\n                attributes: properties\r\n            };\r\n        } else if (typeof eventName === 'object') {\r\n            event = eventName;\r\n        }\r\n\r\n        if (!this._verifyRequiredFields(event)) {\r\n            logger.error(\r\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Checks whether an event has all of the required fields set, and tries\r\n     * to fill in some of the missing fields with reasonable default values.\r\n     * Returns true if after this operation the event has all of the required\r\n     * fields set, and false otherwise (if some of the required fields were not\r\n     * set and the attempt to fill them in with a default failed).\r\n     *\r\n     * @param event the event object.\r\n     * @return {boolean} true if the event (after the call to this function)\r\n     * contains all of the required fields, and false otherwise.\r\n     * @private\r\n     */\r\n    _verifyRequiredFields(event) {\r\n        if (!event) {\r\n            return false;\r\n        }\r\n\r\n        if (!event.type) {\r\n            event.type = TYPE_OPERATIONAL;\r\n        }\r\n\r\n        const type = event.type;\r\n\r\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\r\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\r\n            logger.error(`Unknown event type: ${type}`);\r\n\r\n            return false;\r\n        }\r\n\r\n        if (type === TYPE_PAGE) {\r\n            return Boolean(event.name);\r\n        }\r\n\r\n        // Try to set some reasonable default values in case some of the\r\n        // parameters required by the handler API are missing.\r\n        event.action = event.action || event.name || event.actionSubject;\r\n        event.actionSubject = event.actionSubject || event.name || event.action;\r\n        event.source = event.source || event.name || event.action\r\n            || event.actionSubject;\r\n\r\n        if (!event.action || !event.actionSubject || !event.source) {\r\n            logger.error(\r\n                'Required field missing (action, actionSubject or source)');\r\n\r\n            return false;\r\n        }\r\n\r\n        // Track events have additional required fields.\r\n        if (type === TYPE_TRACK) {\r\n            event.objectType = event.objectType || 'generic-object-type';\r\n            event.containerType = event.containerType || 'conference';\r\n            if (event.containerType === 'conference' && !event.containerId) {\r\n                event.containerId = this.conferenceName;\r\n            }\r\n\r\n\r\n            if (!event.objectType || !event.objectId\r\n                || !event.containerType || !event.containerId) {\r\n                logger.error(\r\n                    'Required field missing (containerId, containerType, '\r\n                        + 'objectId or objectType)');\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Saves an event to the cache, if the cache is enabled.\r\n     * @param event the event to save.\r\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\r\n     * if the cache was disabled).\r\n     * @private\r\n     */\r\n    _maybeCacheEvent(event) {\r\n        if (this.cache) {\r\n            this.cache.push(event);\r\n\r\n            // We limit the size of the cache, in case the user fails to ever\r\n            // set the analytics handlers.\r\n            if (this.cache.length > MAX_CACHE_SIZE) {\r\n                this.cache.splice(0, 1);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param event\r\n     * @private\r\n     */\r\n    _sendEvent(event) {\r\n        if (this._maybeCacheEvent(event)) {\r\n            // The event was consumed by the cache.\r\n        } else {\r\n            this.analyticsHandlers.forEach(handler => {\r\n                try {\r\n                    handler.sendEvent(event);\r\n                } catch (e) {\r\n                    logger.warn(`Error sending analytics event: ${e}`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default new AnalyticsAdapter();\r\n","\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport { RunningAverage } from '../util/MathUtil';\r\n\r\nconst logger = getLogger(__filename);\r\nconst MILLI_SECONDS = 1000;\r\nconst SECONDS = 60;\r\n\r\n/**\r\n * This class creates an observer that monitors browser's performance measurement events\r\n * as they are recorded in the browser's performance timeline and computes an average and\r\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\r\n * longer than 50ms to execute on the main thread.\r\n */\r\nexport class PerformanceObserverStats {\r\n    /**\r\n     * Creates a new instance of Performance observer statistics.\r\n     *\r\n     * @param {*} emitter Event emitter for emitting stats periodically\r\n     * @param {*} statsInterval interval for calculating the stats\r\n     */\r\n    constructor(emitter, statsInterval) {\r\n        this.eventEmitter = emitter;\r\n        this.longTasks = 0;\r\n        this.maxDuration = 0;\r\n        this.performanceStatsInterval = statsInterval;\r\n        this.stats = new RunningAverage();\r\n    }\r\n\r\n    /**\r\n     * Obtains the average rate of long tasks observed per min and the\r\n     * duration of the longest task recorded by the observer.\r\n     * @returns {Object}\r\n     */\r\n    getLongTasksStats() {\r\n        return {\r\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\r\n            maxDurationMs: this.maxDuration\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Starts the performance observer by registering the callback function\r\n     * that calculates the performance statistics periodically.\r\n     * @returns {void}\r\n     */\r\n    startObserver() {\r\n        // Create a handler for when the long task event is fired.\r\n        this.longTaskEventHandler = list => {\r\n            const entries = list.getEntries();\r\n\r\n            for (const task of entries) {\r\n                this.longTasks++;\r\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\r\n            }\r\n        };\r\n\r\n        // Create an observer for monitoring long tasks.\r\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\r\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\r\n        this.observer.observe({ type: 'longtask',\r\n            buffered: true });\r\n        const startTime = Date.now();\r\n\r\n        // Calculate the average # of events/sec and emit a stats event.\r\n        this.longTasksIntervalId = setInterval(() => {\r\n            const now = Date.now();\r\n            const interval = this._lastTimeStamp\r\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\r\n                : (now - startTime) / MILLI_SECONDS;\r\n            const rate = this.longTasks / interval;\r\n\r\n            this.stats.addNext(rate);\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\r\n\r\n            // Reset the counter and start counting events again.\r\n            this.longTasks = 0;\r\n            this._lastTimeStamp = Date.now();\r\n        }, this.performanceStatsInterval);\r\n    }\r\n\r\n    /**\r\n     * Stops the performance observer.\r\n     * @returns {void}\r\n     */\r\n    stopObserver() {\r\n        this.observer && this.observer.disconnect();\r\n        this.longTaskEventHandler = null;\r\n        if (this.longTasksIntervalId) {\r\n            clearInterval(this.longTasksIntervalId);\r\n            this.longTasksIntervalId = null;\r\n        }\r\n    }\r\n}\r\n","import { browsers } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport browser from '../browser';\r\n\r\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The lib-jitsi-meet browser-agnostic names of the browser-specific keys\r\n * reported by RTCPeerConnection#getStats mapped by browser.\r\n */\r\nconst KEYS_BY_BROWSER_TYPE = {};\r\n\r\nKEYS_BY_BROWSER_TYPE[browsers.FIREFOX] = {\r\n    'ssrc': 'ssrc',\r\n    'packetsReceived': 'packetsReceived',\r\n    'packetsLost': 'packetsLost',\r\n    'packetsSent': 'packetsSent',\r\n    'bytesReceived': 'bytesReceived',\r\n    'bytesSent': 'bytesSent',\r\n    'framerateMean': 'framerateMean',\r\n    'ip': 'address',\r\n    'port': 'port',\r\n    'protocol': 'protocol'\r\n};\r\nKEYS_BY_BROWSER_TYPE[browsers.CHROME] = {\r\n    'receiveBandwidth': 'googAvailableReceiveBandwidth',\r\n    'sendBandwidth': 'googAvailableSendBandwidth',\r\n    'remoteAddress': 'googRemoteAddress',\r\n    'transportType': 'googTransportType',\r\n    'localAddress': 'googLocalAddress',\r\n    'activeConnection': 'googActiveConnection',\r\n    'ssrc': 'ssrc',\r\n    'packetsReceived': 'packetsReceived',\r\n    'packetsSent': 'packetsSent',\r\n    'packetsLost': 'packetsLost',\r\n    'bytesReceived': 'bytesReceived',\r\n    'bytesSent': 'bytesSent',\r\n    'googCodecName': 'googCodecName',\r\n    'googFrameHeightReceived': 'googFrameHeightReceived',\r\n    'googFrameWidthReceived': 'googFrameWidthReceived',\r\n    'googFrameHeightSent': 'googFrameHeightSent',\r\n    'googFrameWidthSent': 'googFrameWidthSent',\r\n    'googFrameRateReceived': 'googFrameRateReceived',\r\n    'googFrameRateSent': 'googFrameRateSent',\r\n    'audioInputLevel': 'audioInputLevel',\r\n    'audioOutputLevel': 'audioOutputLevel',\r\n    'currentRoundTripTime': 'googRtt',\r\n    'remoteCandidateType': 'googRemoteCandidateType',\r\n    'localCandidateType': 'googLocalCandidateType',\r\n    'ip': 'ip',\r\n    'port': 'port',\r\n    'protocol': 'protocol'\r\n};\r\nKEYS_BY_BROWSER_TYPE[browsers.OPERA]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.NWJS]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.ELECTRON]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.SAFARI]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.REACT_NATIVE]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\n\r\n/**\r\n * Calculates packet lost percent using the number of lost packets and the\r\n * number of all packet.\r\n * @param lostPackets the number of lost packets\r\n * @param totalPackets the number of all packets.\r\n * @returns {number} packet loss percent\r\n */\r\nfunction calculatePacketLoss(lostPackets, totalPackets) {\r\n    if (!totalPackets || totalPackets <= 0\r\n            || !lostPackets || lostPackets <= 0) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.round((lostPackets / totalPackets) * 100);\r\n}\r\n\r\n/**\r\n * Holds \"statistics\" for a single SSRC.\r\n * @constructor\r\n */\r\nfunction SsrcStats() {\r\n    this.loss = {};\r\n    this.bitrate = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    this.resolution = {};\r\n    this.framerate = 0;\r\n    this.codec = '';\r\n}\r\n\r\n/**\r\n * Sets the \"loss\" object.\r\n * @param loss the value to set.\r\n */\r\nSsrcStats.prototype.setLoss = function(loss) {\r\n    this.loss = loss || {};\r\n};\r\n\r\n/**\r\n * Sets resolution that belong to the ssrc represented by this instance.\r\n * @param resolution new resolution value to be set.\r\n */\r\nSsrcStats.prototype.setResolution = function(resolution) {\r\n    this.resolution = resolution || {};\r\n};\r\n\r\n/**\r\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\r\n * the respective fields of the \"bitrate\" field of this object.\r\n * @param bitrate an object holding the values to add.\r\n */\r\nSsrcStats.prototype.addBitrate = function(bitrate) {\r\n    this.bitrate.download += bitrate.download;\r\n    this.bitrate.upload += bitrate.upload;\r\n};\r\n\r\n/**\r\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\r\n * represented by this instance.\r\n */\r\nSsrcStats.prototype.resetBitrate = function() {\r\n    this.bitrate.download = 0;\r\n    this.bitrate.upload = 0;\r\n};\r\n\r\n/**\r\n * Sets the \"framerate\".\r\n * @param framerate the value to set.\r\n */\r\nSsrcStats.prototype.setFramerate = function(framerate) {\r\n    this.framerate = framerate || 0;\r\n};\r\n\r\nSsrcStats.prototype.setCodec = function(codec) {\r\n    this.codec = codec || '';\r\n};\r\n\r\n/**\r\n *\r\n */\r\nfunction ConferenceStats() {\r\n\r\n    /**\r\n     * The bandwidth\r\n     * @type {{}}\r\n     */\r\n    this.bandwidth = {};\r\n\r\n    /**\r\n     * The bit rate\r\n     * @type {{}}\r\n     */\r\n    this.bitrate = {};\r\n\r\n    /**\r\n     * The packet loss rate\r\n     * @type {{}}\r\n     */\r\n    this.packetLoss = null;\r\n\r\n    /**\r\n     * Array with the transport information.\r\n     * @type {Array}\r\n     */\r\n    this.transport = [];\r\n}\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * <tt>StatsCollector</tt> registers for stats updates of given\r\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\r\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\r\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\r\n * instance as an event source.\r\n *\r\n * @param peerconnection WebRTC PeerConnection object.\r\n * @param audioLevelsInterval\r\n * @param statsInterval stats refresh interval given in ms.\r\n * @param eventEmitter\r\n * @constructor\r\n */\r\nexport default function StatsCollector(\r\n        peerconnection,\r\n        audioLevelsInterval,\r\n        statsInterval,\r\n        eventEmitter) {\r\n    // StatsCollector depends entirely on the format of the reports returned by\r\n    // RTCPeerConnection#getStats. Given that the value of\r\n    // browser#getName() is very unlikely to change at runtime, it\r\n    // makes sense to discover whether StatsCollector supports the executing\r\n    // browser as soon as possible. Otherwise, (1) getStatValue would have to\r\n    // needlessly check a \"static\" condition multiple times very very often and\r\n    // (2) the lack of support for the executing browser would be discovered and\r\n    // reported multiple times very very often too late in the execution in some\r\n    // totally unrelated callback.\r\n    /**\r\n     * The browser type supported by this StatsCollector. In other words, the\r\n     * type of the browser which initialized this StatsCollector\r\n     * instance.\r\n     * @private\r\n     */\r\n    this._browserType = browser.getName();\r\n    const keys = KEYS_BY_BROWSER_TYPE[this._browserType];\r\n\r\n    if (!keys) {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw `The browser type '${this._browserType}' isn't supported!`;\r\n    }\r\n\r\n    /**\r\n     * Whether to use the Promise-based getStats API or not.\r\n     * @type {boolean}\r\n     */\r\n    this._usesPromiseGetStats\r\n        = browser.isSafari() || browser.isFirefox();\r\n\r\n    /**\r\n     * The function which is to be used to retrieve the value associated in a\r\n     * report returned by RTCPeerConnection#getStats with a lib-jitsi-meet\r\n     * browser-agnostic name/key.\r\n     *\r\n     * @function\r\n     * @private\r\n     */\r\n    this._getStatValue\r\n        = this._usesPromiseGetStats\r\n            ? this._defineNewGetStatValueMethod(keys)\r\n            : this._defineGetStatValueMethod(keys);\r\n\r\n    this.peerconnection = peerconnection;\r\n    this.baselineAudioLevelsReport = null;\r\n    this.currentAudioLevelsReport = null;\r\n    this.currentStatsReport = null;\r\n    this.previousStatsReport = null;\r\n    this.audioLevelReportHistory = {};\r\n    this.audioLevelsIntervalId = null;\r\n    this.eventEmitter = eventEmitter;\r\n    this.conferenceStats = new ConferenceStats();\r\n\r\n    // Updates stats interval\r\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\r\n\r\n    this.statsIntervalId = null;\r\n    this.statsIntervalMilis = statsInterval;\r\n\r\n    /**\r\n     * Maps SSRC numbers to {@link SsrcStats}.\r\n     * @type {Map<number,SsrcStats}\r\n     */\r\n    this.ssrc2stats = new Map();\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Stops stats updates.\r\n */\r\nStatsCollector.prototype.stop = function() {\r\n    if (this.audioLevelsIntervalId) {\r\n        clearInterval(this.audioLevelsIntervalId);\r\n        this.audioLevelsIntervalId = null;\r\n    }\r\n\r\n    if (this.statsIntervalId) {\r\n        clearInterval(this.statsIntervalId);\r\n        this.statsIntervalId = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Callback passed to <tt>getStats</tt> method.\r\n * @param error an error that occurred on <tt>getStats</tt> call.\r\n */\r\nStatsCollector.prototype.errorCallback = function(error) {\r\n    GlobalOnErrorHandler.callErrorHandler(error);\r\n    logger.error('Get stats error', error);\r\n    this.stop();\r\n};\r\n\r\n/**\r\n * Starts stats updates.\r\n */\r\nStatsCollector.prototype.start = function(startAudioLevelStats) {\r\n    if (startAudioLevelStats) {\r\n        if (browser.supportsReceiverStats()) {\r\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\r\n        }\r\n        this.audioLevelsIntervalId = setInterval(\r\n            () => {\r\n                if (browser.supportsReceiverStats()) {\r\n                    const audioLevels = this.peerconnection.getAudioLevels();\r\n\r\n                    for (const ssrc in audioLevels) {\r\n                        if (audioLevels.hasOwnProperty(ssrc)) {\r\n                            // Use a scaling factor of 2.5 to report the same\r\n                            // audio levels that getStats reports.\r\n                            const audioLevel = audioLevels[ssrc] * 2.5;\r\n\r\n                            this.eventEmitter.emit(\r\n                                StatisticsEvents.AUDIO_LEVEL,\r\n                                this.peerconnection,\r\n                                Number.parseInt(ssrc, 10),\r\n                                audioLevel,\r\n                                false /* isLocal */);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Interval updates\r\n                    this.peerconnection.getStats(\r\n                        report => {\r\n                            let results = null;\r\n\r\n                            if (!report || !report.result\r\n                                || typeof report.result !== 'function') {\r\n                                results = report;\r\n                            } else {\r\n                                results = report.result();\r\n                            }\r\n                            this.currentAudioLevelsReport = results;\r\n                            if (this._usesPromiseGetStats) {\r\n                                this.processNewAudioLevelReport();\r\n                            } else {\r\n                                this.processAudioLevelReport();\r\n                            }\r\n\r\n                            this.baselineAudioLevelsReport\r\n                                = this.currentAudioLevelsReport;\r\n                        },\r\n                        error => this.errorCallback(error)\r\n                    );\r\n                }\r\n            },\r\n            this.audioLevelsIntervalMilis\r\n        );\r\n    }\r\n\r\n    this.statsIntervalId = setInterval(\r\n        () => {\r\n            // Interval updates\r\n            this.peerconnection.getStats(\r\n                report => {\r\n                    let results = null;\r\n\r\n                    if (!report || !report.result\r\n                        || typeof report.result !== 'function') {\r\n                        // firefox\r\n                        results = report;\r\n                    } else {\r\n                        // chrome\r\n                        results = report.result();\r\n                    }\r\n\r\n                    this.currentStatsReport = results;\r\n                    try {\r\n                        if (this._usesPromiseGetStats) {\r\n                            this.processNewStatsReport();\r\n                        } else {\r\n                            this.processStatsReport();\r\n                        }\r\n                    } catch (e) {\r\n                        GlobalOnErrorHandler.callErrorHandler(e);\r\n                        logger.error(`Unsupported key:${e}`, e);\r\n                    }\r\n\r\n                    this.previousStatsReport = this.currentStatsReport;\r\n                },\r\n                error => this.errorCallback(error)\r\n            );\r\n        },\r\n        this.statsIntervalMilis\r\n    );\r\n};\r\n\r\n/**\r\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\r\n * gets the value from a specific report returned by RTCPeerConnection#getStats\r\n * associated with a lib-jitsi-meet browser-agnostic name.\r\n *\r\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\r\n * names to RTCPeerConnection#getStats browser-specific keys\r\n */\r\nStatsCollector.prototype._defineGetStatValueMethod = function(keys) {\r\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\r\n    // to a browser-specific key of a report returned by\r\n    // RTCPeerConnection#getStats.\r\n    const keyFromName = function(name) {\r\n        const key = keys[name];\r\n\r\n        if (key) {\r\n            return key;\r\n        }\r\n\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw `The property '${name}' isn't supported!`;\r\n    };\r\n\r\n    // Define the function which retrieves the value from a specific report\r\n    // returned by RTCPeerConnection#getStats associated with a given\r\n    // browser-specific key.\r\n    let itemStatByKey;\r\n\r\n    switch (this._browserType) {\r\n    case browsers.CHROME:\r\n    case browsers.OPERA:\r\n    case browsers.NWJS:\r\n    case browsers.ELECTRON:\r\n        // TODO What about other types of browser which are based on Chrome such\r\n        // as NW.js? Every time we want to support a new type browser we have to\r\n        // go and add more conditions (here and in multiple other places).\r\n        // Cannot we do a feature detection instead of a browser type check? For\r\n        // example, if item has a stat property of type function, then it's very\r\n        // likely that whoever defined it wanted you to call it in order to\r\n        // retrieve the value associated with a specific key.\r\n        itemStatByKey = (item, key) => item.stat(key);\r\n        break;\r\n    case browsers.REACT_NATIVE:\r\n        // The implementation provided by react-native-webrtc follows the\r\n        // Objective-C WebRTC API: RTCStatsReport has a values property of type\r\n        // Array in which each element is a key-value pair.\r\n        itemStatByKey = function(item, key) {\r\n            let value;\r\n\r\n            item.values.some(pair => {\r\n                if (pair.hasOwnProperty(key)) {\r\n                    value = pair[key];\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n\r\n            });\r\n\r\n            return value;\r\n        };\r\n        break;\r\n    default:\r\n        itemStatByKey = (item, key) => item[key];\r\n    }\r\n\r\n    // Compose the 2 functions defined above to get a function which retrieves\r\n    // the value from a specific report returned by RTCPeerConnection#getStats\r\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\r\n    return (item, name) => itemStatByKey(item, keyFromName(name));\r\n};\r\n\r\n/**\r\n * Obtains a stat value from given stat and converts it to a non-negative\r\n * number. If the value is either invalid or negative then 0 will be returned.\r\n * @param report\r\n * @param {string} name\r\n * @return {number}\r\n * @private\r\n */\r\nStatsCollector.prototype.getNonNegativeStat = function(report, name) {\r\n    let value = this._getStatValue(report, name);\r\n\r\n    if (typeof value !== 'number') {\r\n        value = Number(value);\r\n    }\r\n\r\n    if (isNaN(value)) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.max(0, value);\r\n};\r\n\r\n/* eslint-disable no-continue */\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processStatsReport = function() {\r\n    if (!this.previousStatsReport) {\r\n        return;\r\n    }\r\n\r\n    const getStatValue = this._getStatValue;\r\n    const byteSentStats = {};\r\n\r\n    for (const idx in this.currentStatsReport) {\r\n        if (!this.currentStatsReport.hasOwnProperty(idx)) {\r\n            continue;\r\n        }\r\n        const now = this.currentStatsReport[idx];\r\n\r\n        // The browser API may return \"undefined\" values in the array\r\n        if (!now) {\r\n            continue;\r\n        }\r\n\r\n        try {\r\n            const receiveBandwidth = getStatValue(now, 'receiveBandwidth');\r\n            const sendBandwidth = getStatValue(now, 'sendBandwidth');\r\n\r\n            if (receiveBandwidth || sendBandwidth) {\r\n                this.conferenceStats.bandwidth = {\r\n                    'download': Math.round(receiveBandwidth / 1000),\r\n                    'upload': Math.round(sendBandwidth / 1000)\r\n                };\r\n            }\r\n        } catch (e) { /* not supported*/ }\r\n\r\n        if (now.type === 'googCandidatePair') {\r\n            let active, ip, localCandidateType, localip,\r\n                remoteCandidateType, rtt, type;\r\n\r\n            try {\r\n                active = getStatValue(now, 'activeConnection');\r\n                if (!active) {\r\n                    continue;\r\n                }\r\n\r\n                ip = getStatValue(now, 'remoteAddress');\r\n                type = getStatValue(now, 'transportType');\r\n                localip = getStatValue(now, 'localAddress');\r\n                localCandidateType = getStatValue(now, 'localCandidateType');\r\n                remoteCandidateType = getStatValue(now, 'remoteCandidateType');\r\n                rtt = this.getNonNegativeStat(now, 'currentRoundTripTime');\r\n            } catch (e) { /* not supported*/ }\r\n            if (!ip || !type || !localip || active !== 'true') {\r\n                continue;\r\n            }\r\n\r\n            // Save the address unless it has been saved already.\r\n            const conferenceStatsTransport = this.conferenceStats.transport;\r\n\r\n            if (!conferenceStatsTransport.some(\r\n                    t =>\r\n                        t.ip === ip\r\n                            && t.type === type\r\n                            && t.localip === localip)) {\r\n                conferenceStatsTransport.push({\r\n                    ip,\r\n                    type,\r\n                    localip,\r\n                    p2p: this.peerconnection.isP2P,\r\n                    localCandidateType,\r\n                    remoteCandidateType,\r\n                    rtt\r\n                });\r\n            }\r\n            continue;\r\n        }\r\n\r\n        if (now.type === 'candidatepair') {\r\n            // we need succeeded and selected pairs only\r\n            if (now.state !== 'succeeded' || !now.selected) {\r\n                continue;\r\n            }\r\n\r\n            const local = this.currentStatsReport[now.localCandidateId];\r\n            const remote = this.currentStatsReport[now.remoteCandidateId];\r\n\r\n            this.conferenceStats.transport.push({\r\n                ip: `${remote.ipAddress}:${remote.portNumber}`,\r\n                type: local.transport,\r\n                localip: `${local.ipAddress}:${local.portNumber}`,\r\n                p2p: this.peerconnection.isP2P,\r\n                localCandidateType: local.candidateType,\r\n                remoteCandidateType: remote.candidateType\r\n            });\r\n        }\r\n\r\n        if (now.type !== 'ssrc' && now.type !== 'outboundrtp'\r\n            && now.type !== 'inboundrtp' && now.type !== 'track') {\r\n            continue;\r\n        }\r\n\r\n        const before = this.previousStatsReport[idx];\r\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\r\n\r\n        // If type=\"track\", take the first SSRC from ssrcIds.\r\n        if (now.type === 'track' && Array.isArray(now.ssrcIds)) {\r\n            ssrc = Number(now.ssrcIds[0]);\r\n        }\r\n\r\n        if (!before || !ssrc) {\r\n            continue;\r\n        }\r\n\r\n        // isRemote is available only in FF and is ignored in case of chrome\r\n        // according to the spec\r\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcrtpstreamstats-isremote\r\n        // when isRemote is true indicates that the measurements were done at\r\n        // the remote endpoint and reported in an RTCP RR/XR.\r\n        // Fixes a problem where we are calculating local stats wrong adding\r\n        // the sent bytes to the local download bitrate.\r\n        // In new W3 stats spec, type=\"track\" has a remoteSource boolean\r\n        // property.\r\n        if (now.isRemote === true || now.remoteSource === true) {\r\n            continue;\r\n        }\r\n\r\n        let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n        if (!ssrcStats) {\r\n            ssrcStats = new SsrcStats();\r\n            this.ssrc2stats.set(ssrc, ssrcStats);\r\n        }\r\n\r\n        let isDownloadStream = true;\r\n        let key = 'packetsReceived';\r\n        let packetsNow = getStatValue(now, key);\r\n\r\n        if (typeof packetsNow === 'undefined'\r\n            || packetsNow === null || packetsNow === '') {\r\n            isDownloadStream = false;\r\n            key = 'packetsSent';\r\n            packetsNow = getStatValue(now, key);\r\n            if (typeof packetsNow === 'undefined' || packetsNow === null) {\r\n                logger.warn('No packetsReceived nor packetsSent stat found');\r\n            }\r\n        }\r\n        if (!packetsNow || packetsNow < 0) {\r\n            packetsNow = 0;\r\n        }\r\n\r\n        const packetsBefore = this.getNonNegativeStat(before, key);\r\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\r\n\r\n        const packetsLostNow\r\n            = this.getNonNegativeStat(now, 'packetsLost');\r\n        const packetsLostBefore\r\n            = this.getNonNegativeStat(before, 'packetsLost');\r\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\r\n\r\n        ssrcStats.setLoss({\r\n            packetsTotal: packetsDiff + packetsLostDiff,\r\n            packetsLost: packetsLostDiff,\r\n            isDownloadStream\r\n        });\r\n\r\n        const bytesReceivedNow\r\n            = this.getNonNegativeStat(now, 'bytesReceived');\r\n        const bytesReceivedBefore\r\n            = this.getNonNegativeStat(before, 'bytesReceived');\r\n        const bytesReceived\r\n            = Math.max(0, bytesReceivedNow - bytesReceivedBefore);\r\n\r\n        let bytesSent = 0;\r\n\r\n        // TODO: clean this mess up!\r\n        let nowBytesTransmitted = getStatValue(now, 'bytesSent');\r\n\r\n        if (typeof nowBytesTransmitted === 'number'\r\n            || typeof nowBytesTransmitted === 'string') {\r\n            nowBytesTransmitted = Number(nowBytesTransmitted);\r\n            if (!isNaN(nowBytesTransmitted)) {\r\n                byteSentStats[ssrc] = nowBytesTransmitted;\r\n                if (nowBytesTransmitted > 0) {\r\n                    bytesSent = nowBytesTransmitted\r\n                        - getStatValue(before, 'bytesSent');\r\n                }\r\n            }\r\n        }\r\n        bytesSent = Math.max(0, bytesSent);\r\n\r\n        const timeMs = now.timestamp - before.timestamp;\r\n        let bitrateReceivedKbps = 0, bitrateSentKbps = 0;\r\n\r\n        if (timeMs > 0) {\r\n            // TODO is there any reason to round here?\r\n            bitrateReceivedKbps = Math.round((bytesReceived * 8) / timeMs);\r\n            bitrateSentKbps = Math.round((bytesSent * 8) / timeMs);\r\n        }\r\n\r\n        ssrcStats.addBitrate({\r\n            'download': bitrateReceivedKbps,\r\n            'upload': bitrateSentKbps\r\n        });\r\n\r\n        const resolution = {\r\n            height: null,\r\n            width: null\r\n        };\r\n\r\n        try {\r\n            let height, width;\r\n\r\n            if ((height = getStatValue(now, 'googFrameHeightReceived'))\r\n                && (width = getStatValue(now, 'googFrameWidthReceived'))) {\r\n                resolution.height = height;\r\n                resolution.width = width;\r\n            } else if ((height = getStatValue(now, 'googFrameHeightSent'))\r\n                && (width = getStatValue(now, 'googFrameWidthSent'))) {\r\n                resolution.height = height;\r\n                resolution.width = width;\r\n            }\r\n        } catch (e) { /* not supported*/ }\r\n\r\n        // Tries to get frame rate\r\n        let frameRate;\r\n\r\n        try {\r\n            frameRate = getStatValue(now, 'googFrameRateReceived')\r\n                || getStatValue(now, 'googFrameRateSent') || 0;\r\n        } catch (e) {\r\n            // if it fails with previous properties(chrome),\r\n            // let's try with another one (FF)\r\n            try {\r\n                frameRate = this.getNonNegativeStat(now, 'framerateMean');\r\n            } catch (err) { /* not supported*/ }\r\n        }\r\n        ssrcStats.setFramerate(Math.round(frameRate || 0));\r\n\r\n        if (resolution.height && resolution.width) {\r\n            ssrcStats.setResolution(resolution);\r\n        } else {\r\n            ssrcStats.setResolution(null);\r\n        }\r\n\r\n        let codec;\r\n\r\n        // Try to get the codec for later reporting.\r\n        try {\r\n            codec = getStatValue(now, 'googCodecName') || '';\r\n        } catch (e) { /* not supported*/ }\r\n\r\n        ssrcStats.setCodec(codec);\r\n    }\r\n\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\r\n\r\n    this._processAndEmitReport();\r\n};\r\n\r\n/**\r\n *\r\n */\r\nStatsCollector.prototype._processAndEmitReport = function() {\r\n    // process stats\r\n    const totalPackets = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    const lostPackets = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    let bitrateDownload = 0;\r\n    let bitrateUpload = 0;\r\n    const resolutions = {};\r\n    const framerates = {};\r\n    const codecs = {};\r\n    let audioBitrateDownload = 0;\r\n    let audioBitrateUpload = 0;\r\n    let audioCodec = '';\r\n    let videoBitrateDownload = 0;\r\n    let videoBitrateUpload = 0;\r\n    let videoCodec = '';\r\n\r\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\r\n        // process packet loss stats\r\n        const loss = ssrcStats.loss;\r\n        const type = loss.isDownloadStream ? 'download' : 'upload';\r\n\r\n        totalPackets[type] += loss.packetsTotal;\r\n        lostPackets[type] += loss.packetsLost;\r\n\r\n        // process bitrate stats\r\n        bitrateDownload += ssrcStats.bitrate.download;\r\n        bitrateUpload += ssrcStats.bitrate.upload;\r\n\r\n        // collect resolutions and framerates\r\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\r\n\r\n        if (track) {\r\n            if (track.isAudioTrack()) {\r\n                audioBitrateDownload += ssrcStats.bitrate.download;\r\n                audioBitrateUpload += ssrcStats.bitrate.upload;\r\n                audioCodec = ssrcStats.codec;\r\n            } else {\r\n                videoBitrateDownload += ssrcStats.bitrate.download;\r\n                videoBitrateUpload += ssrcStats.bitrate.upload;\r\n                videoCodec = ssrcStats.codec;\r\n            }\r\n\r\n            const participantId = track.getParticipantId();\r\n\r\n            if (participantId) {\r\n                const resolution = ssrcStats.resolution;\r\n\r\n                if (resolution.width\r\n                        && resolution.height\r\n                        && resolution.width !== -1\r\n                        && resolution.height !== -1) {\r\n                    const userResolutions = resolutions[participantId] || {};\r\n\r\n                    userResolutions[ssrc] = resolution;\r\n                    resolutions[participantId] = userResolutions;\r\n                }\r\n                if (ssrcStats.framerate !== 0) {\r\n                    const userFramerates = framerates[participantId] || {};\r\n\r\n                    userFramerates[ssrc] = ssrcStats.framerate;\r\n                    framerates[participantId] = userFramerates;\r\n                }\r\n                if (audioCodec.length && videoCodec.length) {\r\n                    const codecDesc = {\r\n                        'audio': audioCodec,\r\n                        'video': videoCodec\r\n                    };\r\n\r\n                    const userCodecs = codecs[participantId] || {};\r\n\r\n                    userCodecs[ssrc] = codecDesc;\r\n                    codecs[participantId] = userCodecs;\r\n                }\r\n            } else {\r\n                logger.error(`No participant ID returned by ${track}`);\r\n            }\r\n        }\r\n\r\n        ssrcStats.resetBitrate();\r\n    }\r\n\r\n    this.conferenceStats.bitrate = {\r\n        'upload': bitrateUpload,\r\n        'download': bitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.bitrate.audio = {\r\n        'upload': audioBitrateUpload,\r\n        'download': audioBitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.bitrate.video = {\r\n        'upload': videoBitrateUpload,\r\n        'download': videoBitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.packetLoss = {\r\n        total:\r\n            calculatePacketLoss(\r\n                lostPackets.download + lostPackets.upload,\r\n                totalPackets.download + totalPackets.upload),\r\n        download:\r\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\r\n        upload:\r\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\r\n    };\r\n\r\n    const avgAudioLevels = {};\r\n    let localAvgAudioLevels;\r\n\r\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\r\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\r\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\r\n\r\n        if (isLocal) {\r\n            localAvgAudioLevels = avgAudioLevel;\r\n        } else {\r\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\r\n\r\n            if (track) {\r\n                const participantId = track.getParticipantId();\r\n\r\n                if (participantId) {\r\n                    avgAudioLevels[participantId] = avgAudioLevel;\r\n                }\r\n            }\r\n        }\r\n    });\r\n    this.audioLevelReportHistory = {};\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.CONNECTION_STATS,\r\n        this.peerconnection,\r\n        {\r\n            'bandwidth': this.conferenceStats.bandwidth,\r\n            'bitrate': this.conferenceStats.bitrate,\r\n            'packetLoss': this.conferenceStats.packetLoss,\r\n            'resolution': resolutions,\r\n            'framerate': framerates,\r\n            'codec': codecs,\r\n            'transport': this.conferenceStats.transport,\r\n            localAvgAudioLevels,\r\n            avgAudioLevels\r\n        });\r\n    this.conferenceStats.transport = [];\r\n};\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processAudioLevelReport = function() {\r\n    if (!this.baselineAudioLevelsReport) {\r\n        return;\r\n    }\r\n\r\n    const getStatValue = this._getStatValue;\r\n\r\n    for (const idx in this.currentAudioLevelsReport) {\r\n        if (!this.currentAudioLevelsReport.hasOwnProperty(idx)) {\r\n            continue;\r\n        }\r\n\r\n        const now = this.currentAudioLevelsReport[idx];\r\n\r\n        if (now.type !== 'ssrc' && now.type !== 'track') {\r\n            continue;\r\n        }\r\n\r\n        const before = this.baselineAudioLevelsReport[idx];\r\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\r\n\r\n        if (!ssrc && Array.isArray(now.ssrcIds)) {\r\n            ssrc = Number(now.ssrcIds[0]);\r\n        }\r\n\r\n        if (!before) {\r\n            logger.warn(`${ssrc} not enough data`);\r\n            continue;\r\n        }\r\n\r\n        if (!ssrc) {\r\n            if ((Date.now() - now.timestamp) < 3000) {\r\n                logger.warn('No ssrc: ');\r\n            }\r\n            continue;\r\n        }\r\n\r\n        // Audio level\r\n        let audioLevel;\r\n\r\n        try {\r\n            audioLevel\r\n                = getStatValue(now, 'audioInputLevel')\r\n                    || getStatValue(now, 'audioOutputLevel');\r\n        } catch (e) { /* not supported*/\r\n            logger.warn('Audio Levels are not available in the statistics.');\r\n            clearInterval(this.audioLevelsIntervalId);\r\n\r\n            return;\r\n        }\r\n\r\n        if (audioLevel) {\r\n            let isLocal;\r\n\r\n            // If type=\"ssrc\" (legacy) check whether they are received packets.\r\n            if (now.type === 'ssrc') {\r\n                isLocal = !getStatValue(now, 'packetsReceived');\r\n\r\n            // If type=\"track\", check remoteSource boolean property.\r\n            } else {\r\n                isLocal = !now.remoteSource;\r\n            }\r\n\r\n            // According to the W3C WebRTC Stats spec, audioLevel should be in\r\n            // 0..1 range (0 == silence). However browsers don't behave that\r\n            // way so we must convert it to 0..1.\r\n            // TODO: Can't find specs about what this value really is, but it\r\n            // seems to vary between 0 and around 32k.\r\n            audioLevel = audioLevel / 32767;\r\n\r\n            if (!(ssrc in this.audioLevelReportHistory)) {\r\n                this.audioLevelReportHistory[ssrc] = {\r\n                    isLocal,\r\n                    data: []\r\n                };\r\n            }\r\n            this.audioLevelReportHistory[ssrc].data.push(audioLevel);\r\n\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.AUDIO_LEVEL,\r\n                this.peerconnection,\r\n                ssrc,\r\n                audioLevel,\r\n                isLocal);\r\n        }\r\n    }\r\n};\r\n\r\n/* eslint-enable no-continue */\r\n\r\n/**\r\n * New promised based getStats report processing.\r\n * Tested with chrome, firefox and safari. Not switching it on for chrome as\r\n * frameRate stat is missing and calculating it using framesSent,\r\n * gives values double the values seen in webrtc-internals.\r\n * https://w3c.github.io/webrtc-stats/\r\n */\r\n\r\n/**\r\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\r\n * gets the value from a specific report returned by RTCPeerConnection#getStats\r\n * associated with a lib-jitsi-meet browser-agnostic name in case of using\r\n * Promised based getStats.\r\n *\r\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\r\n * names to RTCPeerConnection#getStats browser-specific keys\r\n */\r\nStatsCollector.prototype._defineNewGetStatValueMethod = function(keys) {\r\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\r\n    // to a browser-specific key of a report returned by\r\n    // RTCPeerConnection#getStats.\r\n    const keyFromName = function(name) {\r\n        const key = keys[name];\r\n\r\n        if (key) {\r\n            return key;\r\n        }\r\n\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw `The property '${name}' isn't supported!`;\r\n    };\r\n\r\n    // Compose the 2 functions defined above to get a function which retrieves\r\n    // the value from a specific report returned by RTCPeerConnection#getStats\r\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\r\n    return (item, name) => item[keyFromName(name)];\r\n};\r\n\r\n/**\r\n * Converts the value to a non-negative number.\r\n * If the value is either invalid or negative then 0 will be returned.\r\n * @param {*} v\r\n * @return {number}\r\n * @private\r\n */\r\nStatsCollector.prototype.getNonNegativeValue = function(v) {\r\n    let value = v;\r\n\r\n    if (typeof value !== 'number') {\r\n        value = Number(value);\r\n    }\r\n\r\n    if (isNaN(value)) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.max(0, value);\r\n};\r\n\r\n/**\r\n * Calculates bitrate between before and now using a supplied field name and its\r\n * value in the stats.\r\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\r\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\r\n * previous stats.\r\n * @param fieldName the field to use for calculations.\r\n * @return {number} the calculated bitrate between now and before.\r\n * @private\r\n */\r\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\r\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\r\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\r\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\r\n\r\n    const timeMs = now.timestamp - before.timestamp;\r\n    let bitrateKbps = 0;\r\n\r\n    if (timeMs > 0) {\r\n        // TODO is there any reason to round here?\r\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\r\n    }\r\n\r\n    return bitrateKbps;\r\n};\r\n\r\n/**\r\n * Stats processing new getStats logic.\r\n */\r\nStatsCollector.prototype.processNewStatsReport = function() {\r\n    if (!this.previousStatsReport) {\r\n        return;\r\n    }\r\n\r\n    const getStatValue = this._getStatValue;\r\n    const byteSentStats = {};\r\n\r\n    this.currentStatsReport.forEach(now => {\r\n\r\n        // RTCIceCandidatePairStats\r\n        // https://w3c.github.io/webrtc-stats/#candidatepair-dict*\r\n        if (now.type === 'candidate-pair'\r\n            && now.nominated\r\n            && now.state === 'succeeded') {\r\n\r\n            const availableIncomingBitrate = now.availableIncomingBitrate;\r\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\r\n\r\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\r\n                this.conferenceStats.bandwidth = {\r\n                    'download': Math.round(availableIncomingBitrate / 1000),\r\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\r\n                };\r\n            }\r\n\r\n            const remoteUsedCandidate\r\n                = this.currentStatsReport.get(now.remoteCandidateId);\r\n            const localUsedCandidate\r\n                = this.currentStatsReport.get(now.localCandidateId);\r\n\r\n            // RTCIceCandidateStats\r\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\r\n            // safari currently does not provide ice candidates in stats\r\n            if (remoteUsedCandidate && localUsedCandidate) {\r\n                const remoteIpAddress = getStatValue(remoteUsedCandidate, 'ip');\r\n                const remotePort = getStatValue(remoteUsedCandidate, 'port');\r\n                const ip = `${remoteIpAddress}:${remotePort}`;\r\n\r\n                const localIpAddress = getStatValue(localUsedCandidate, 'ip');\r\n                const localPort = getStatValue(localUsedCandidate, 'port');\r\n\r\n                const localIp = `${localIpAddress}:${localPort}`;\r\n                const type = getStatValue(remoteUsedCandidate, 'protocol');\r\n\r\n                // Save the address unless it has been saved already.\r\n                const conferenceStatsTransport = this.conferenceStats.transport;\r\n\r\n                if (!conferenceStatsTransport.some(\r\n                        t =>\r\n                            t.ip === ip\r\n                            && t.type === type\r\n                            && t.localip === localIp)) {\r\n                    conferenceStatsTransport.push({\r\n                        ip,\r\n                        type,\r\n                        localIp,\r\n                        p2p: this.peerconnection.isP2P,\r\n                        localCandidateType: localUsedCandidate.candidateType,\r\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\r\n                        networkType: localUsedCandidate.networkType,\r\n                        rtt: now.currentRoundTripTime * 1000\r\n                    });\r\n                }\r\n            }\r\n\r\n        // RTCReceivedRtpStreamStats\r\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\r\n        // RTCSentRtpStreamStats\r\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\r\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\r\n            const before = this.previousStatsReport.get(now.id);\r\n            const ssrc = this.getNonNegativeValue(now.ssrc);\r\n\r\n            if (!before || !ssrc) {\r\n                return;\r\n            }\r\n\r\n            let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n            if (!ssrcStats) {\r\n                ssrcStats = new SsrcStats();\r\n                this.ssrc2stats.set(ssrc, ssrcStats);\r\n            }\r\n\r\n            let isDownloadStream = true;\r\n            let key = 'packetsReceived';\r\n\r\n            if (now.type === 'outbound-rtp') {\r\n                isDownloadStream = false;\r\n                key = 'packetsSent';\r\n            }\r\n\r\n            let packetsNow = now[key];\r\n\r\n            if (!packetsNow || packetsNow < 0) {\r\n                packetsNow = 0;\r\n            }\r\n\r\n            const packetsBefore = this.getNonNegativeValue(before[key]);\r\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\r\n\r\n            const packetsLostNow\r\n                = this.getNonNegativeValue(now.packetsLost);\r\n            const packetsLostBefore\r\n                = this.getNonNegativeValue(before.packetsLost);\r\n            const packetsLostDiff\r\n                = Math.max(0, packetsLostNow - packetsLostBefore);\r\n\r\n            ssrcStats.setLoss({\r\n                packetsTotal: packetsDiff + packetsLostDiff,\r\n                packetsLost: packetsLostDiff,\r\n                isDownloadStream\r\n            });\r\n\r\n            if (now.type === 'inbound-rtp') {\r\n\r\n                ssrcStats.addBitrate({\r\n                    'download': this._calculateBitrate(\r\n                                    now, before, 'bytesReceived'),\r\n                    'upload': 0\r\n                });\r\n\r\n                // RTCInboundRtpStreamStats\r\n                // https://w3c.github.io/webrtc-stats/#inboundrtpstats-dict*\r\n                // TODO: can we use framesDecoded for frame rate, available\r\n                // in chrome\r\n            } else {\r\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\r\n                ssrcStats.addBitrate({\r\n                    'download': 0,\r\n                    'upload': this._calculateBitrate(\r\n                                now, before, 'bytesSent')\r\n                });\r\n\r\n                // RTCOutboundRtpStreamStats\r\n                // https://w3c.github.io/webrtc-stats/#outboundrtpstats-dict*\r\n                // TODO: can we use framesEncoded for frame rate, available\r\n                // in chrome\r\n            }\r\n\r\n            // FF has framerateMean out of spec\r\n            const framerateMean = now.framerateMean;\r\n\r\n            if (framerateMean) {\r\n                ssrcStats.setFramerate(Math.round(framerateMean || 0));\r\n            }\r\n\r\n        // track for resolution\r\n        // RTCVideoHandlerStats\r\n        // https://w3c.github.io/webrtc-stats/#vststats-dict*\r\n        // RTCMediaHandlerStats\r\n        // https://w3c.github.io/webrtc-stats/#mststats-dict*\r\n        } else if (now.type === 'track') {\r\n\r\n            const resolution = {\r\n                height: now.frameHeight,\r\n                width: now.frameWidth\r\n            };\r\n\r\n            // Tries to get frame rate\r\n            let frameRate = now.framesPerSecond;\r\n\r\n            if (!frameRate) {\r\n                // we need to calculate it\r\n                const before = this.previousStatsReport.get(now.id);\r\n\r\n                if (before) {\r\n                    const timeMs = now.timestamp - before.timestamp;\r\n\r\n                    if (timeMs > 0 && now.framesSent) {\r\n                        const numberOfFramesSinceBefore\r\n                            = now.framesSent - before.framesSent;\r\n\r\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\r\n                    }\r\n                }\r\n\r\n                if (!frameRate) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            const trackIdentifier = now.trackIdentifier;\r\n            const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\r\n\r\n            if (!ssrc) {\r\n                return;\r\n            }\r\n            let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n            if (!ssrcStats) {\r\n                ssrcStats = new SsrcStats();\r\n                this.ssrc2stats.set(ssrc, ssrcStats);\r\n            }\r\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\r\n\r\n            if (resolution.height && resolution.width) {\r\n                ssrcStats.setResolution(resolution);\r\n            } else {\r\n                ssrcStats.setResolution(null);\r\n            }\r\n        }\r\n    });\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\r\n\r\n    this._processAndEmitReport();\r\n};\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processNewAudioLevelReport = function() {\r\n    if (!this.baselineAudioLevelsReport) {\r\n        return;\r\n    }\r\n\r\n    this.currentAudioLevelsReport.forEach(now => {\r\n        if (now.type !== 'track') {\r\n            return;\r\n        }\r\n\r\n        // Audio level\r\n        const audioLevel = now.audioLevel;\r\n\r\n        if (!audioLevel) {\r\n            return;\r\n        }\r\n\r\n        const trackIdentifier = now.trackIdentifier;\r\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\r\n\r\n        if (ssrc) {\r\n            const isLocal\r\n                = ssrc === this.peerconnection.getLocalSSRC(\r\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\r\n\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.AUDIO_LEVEL,\r\n                this.peerconnection,\r\n                ssrc,\r\n                audioLevel,\r\n                isLocal);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * End new promised based getStats processing methods.\r\n */\r\n","/**\r\n * Implements utility to forward events from one eventEmitter to another.\r\n * @param src {object} instance of EventEmitter or another class that implements\r\n * addListener method which will register listener to EventEmitter instance.\r\n * @param dest {object} instance of EventEmitter or another class that\r\n * implements emit method which will emit an event.\r\n */\r\nfunction EventEmitterForwarder(src, dest) {\r\n    if (!src || !dest || typeof src.addListener !== 'function'\r\n        || typeof dest.emit !== 'function') {\r\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\r\n    }\r\n    this.src = src;\r\n    this.dest = dest;\r\n}\r\n\r\n/**\r\n * Adds event to be forwarded from src to dest.\r\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\r\n * for.\r\n * @param dstEvent {string} the event that will be fired from dest.\r\n * @param arguments all other passed arguments are going to be fired with\r\n * dstEvent.\r\n */\r\nEventEmitterForwarder.prototype.forward = function(...args) {\r\n    const srcEvent = args[0];\r\n\r\n    // This will be the \"this\" value for emit function.\r\n\r\n    args[0] = this.dest;\r\n\r\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\r\n    this.src.addListener(\r\n        srcEvent,\r\n        Function.prototype.bind.apply(this.dest.emit, args));\r\n};\r\n\r\nmodule.exports = EventEmitterForwarder;\r\n","\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\n\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport { ParticipantConnectionStatus }\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport { ERROR_FEATURE_VERSION_MISMATCH } from './modules/xmpp/Caps';\r\nimport * as MediaType from './service/RTC/MediaType';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Represents a participant in (i.e. a member of) a conference.\r\n */\r\nexport default class JitsiParticipant {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Initializes a new JitsiParticipant instance.\r\n     *\r\n     * @constructor\r\n     * @param jid the conference XMPP jid\r\n     * @param conference\r\n     * @param displayName\r\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\r\n     * represent a hidden participant; otherwise, false.\r\n     * @param {string} statsID - optional participant statsID\r\n     * @param {string} status - the initial status if any.\r\n     * @param {object} identity - the xmpp identity\r\n     */\r\n    constructor(jid, conference, displayName, hidden, statsID, status, identity) {\r\n        this._jid = jid;\r\n        this._id = Strophe.getResourceFromJid(jid);\r\n        this._conference = conference;\r\n        this._displayName = displayName;\r\n        this._supportsDTMF = false;\r\n        this._tracks = [];\r\n        this._role = 'none';\r\n        this._status = status;\r\n        this._hidden = hidden;\r\n        this._statsID = statsID;\r\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\r\n        this._properties = {};\r\n        this._identity = identity;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * @returns {JitsiConference} The conference that this participant belongs\r\n     * to.\r\n     */\r\n    getConference() {\r\n        return this._conference;\r\n    }\r\n\r\n    /**\r\n     * Gets the value of a property of this participant.\r\n     */\r\n    getProperty(name) {\r\n        return this._properties[name];\r\n    }\r\n\r\n    /**\r\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\r\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\r\n     * muted status.\r\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\r\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\r\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\r\n     */\r\n    hasAnyVideoTrackWebRTCMuted() {\r\n        return (\r\n            this.getTracks().some(\r\n                jitsiTrack =>\r\n                    jitsiTrack.getType() === MediaType.VIDEO\r\n                        && jitsiTrack.isWebRTCTrackMuted()));\r\n    }\r\n\r\n    /**\r\n     * Updates participant's connection status.\r\n     * @param {string} state the current participant connection state.\r\n     * {@link ParticipantConnectionStatus}.\r\n     * @private\r\n     */\r\n    _setConnectionStatus(status) {\r\n        this._connectionStatus = status;\r\n    }\r\n\r\n    /**\r\n     * Return participant's connectivity status.\r\n     *\r\n     * @returns {string} the connection status\r\n     * <tt>ParticipantConnectionStatus</tt> of the user.\r\n     * {@link ParticipantConnectionStatus}.\r\n     */\r\n    getConnectionStatus() {\r\n        return this._connectionStatus;\r\n    }\r\n\r\n    /**\r\n     * Sets the value of a property of this participant, and fires an event if\r\n     * the value has changed.\r\n     * @name the name of the property.\r\n     * @value the value to set.\r\n     */\r\n    setProperty(name, value) {\r\n        const oldValue = this._properties[name];\r\n\r\n        if (value !== oldValue) {\r\n            this._properties[name] = value;\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\r\n                this,\r\n                name,\r\n                oldValue,\r\n                value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\r\n     * participant.\r\n     */\r\n    getTracks() {\r\n        return this._tracks.slice();\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\r\n     * participant, for given media type.\r\n     */\r\n    getTracksByMediaType(mediaType) {\r\n        return this.getTracks().filter(track => track.getType() === mediaType);\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The ID of this participant.\r\n     */\r\n    getId() {\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The JID of this participant.\r\n     */\r\n    getJid() {\r\n        return this._jid;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The human-readable display name of this participant.\r\n     */\r\n    getDisplayName() {\r\n        return this._displayName;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The stats ID of this participant.\r\n     */\r\n    getStatsID() {\r\n        return this._statsID;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The status of the participant.\r\n     */\r\n    getStatus() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant is a moderator or not.\r\n     */\r\n    isModerator() {\r\n        return this._role === 'moderator';\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\r\n     * special system participants may want to join hidden (like for example the\r\n     * recorder).\r\n     */\r\n    isHidden() {\r\n        return this._hidden;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant has muted their audio.\r\n     */\r\n    isAudioMuted() {\r\n        return this._isMediaTypeMuted(MediaType.AUDIO);\r\n    }\r\n\r\n    /**\r\n     * Determines whether all JitsiTracks which are of a specific MediaType and\r\n     * which belong to this JitsiParticipant are muted.\r\n     *\r\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\r\n     * checked.\r\n     * @private\r\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\r\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\r\n     * false.\r\n     */\r\n    _isMediaTypeMuted(mediaType) {\r\n        return this.getTracks().reduce(\r\n            (muted, track) =>\r\n                muted && (track.getType() !== mediaType || track.isMuted()),\r\n            true);\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant has muted their video.\r\n     */\r\n    isVideoMuted() {\r\n        return this._isMediaTypeMuted(MediaType.VIDEO);\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The role of this participant.\r\n     */\r\n    getRole() {\r\n        return this._role;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    supportsDTMF() {\r\n        return this._supportsDTMF;\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for the participant.\r\n     * @param {int} timeout the timeout in ms for reply from the participant.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeatures(timeout = 5000) {\r\n        if (this._getFeaturesPromise) {\r\n            return this._getFeaturesPromise;\r\n        }\r\n\r\n        this._getFeaturesPromise = this._conference.xmpp.caps.getFeatures(this._jid, timeout)\r\n            .catch(error => {\r\n                // Retry on feature version mismatch\r\n                if (error === ERROR_FEATURE_VERSION_MISMATCH) {\r\n                    return this._conference.xmpp.caps.getFeatures(this._jid, timeout);\r\n                }\r\n\r\n                logger.warn(`Failed to discover features of ${this._jid}`, error);\r\n\r\n                return Promise.reject(error);\r\n            });\r\n\r\n        return this._getFeaturesPromise\r\n            .then(result => {\r\n                this._getFeaturesPromise = undefined;\r\n\r\n                return result;\r\n            }, error => {\r\n                this._getFeaturesPromise = undefined;\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Returns the bot type for the participant.\r\n     *\r\n     * @returns {string|undefined} - The bot type of the participant.\r\n     */\r\n    getBotType() {\r\n        return this._botType;\r\n    }\r\n}\r\n","import {\r\n    CONNECTION_DISCONNECTED,\r\n    CONNECTION_ESTABLISHED,\r\n    CONNECTION_FAILED\r\n} from './JitsiConnectionEvents';\r\nimport XMPP from './modules/xmpp/xmpp';\r\n\r\n/**\r\n * @typedef {Object} UpgradeRoleError\r\n *\r\n * @property {JitsiConnectionErrors} [connectionError] - One of\r\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\r\n * XMPP server.\r\n * @property {String} [authenticationError] - One of XMPP error conditions\r\n * returned by Jicofo on authentication attempt. See\r\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\r\n * @property {String} [message] - More details about the error.\r\n * @property {Object} [credentials] - The credentials that failed the\r\n * authentication.\r\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\r\n * that failed the authentication.\r\n * @property {string} [credentials.password] - The password part of the\r\n * credentials that failed the authentication.\r\n *\r\n * NOTE If neither one of the errors is present, then the operation has been\r\n * canceled.\r\n */\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\n/**\r\n * Connects to the XMPP server using the specified credentials and contacts\r\n * Jicofo in order to obtain a session ID (which is then stored in the local\r\n * storage). The user's role of the parent conference will be upgraded to\r\n * moderator (by Jicofo). It's also used to join the conference when starting\r\n * from anonymous domain and only authenticated users are allowed to create new\r\n * rooms.\r\n *\r\n * @param {Object} options\r\n * @param {string} options.id - XMPP user's ID to log in. For example,\r\n * user@xmpp-server.com.\r\n * @param {string} options.password - XMPP user's password to log in with.\r\n * @param {string} [options.roomPassword] - The password to join the MUC with.\r\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\r\n * into the XMPP server was successful. The next step will be to obtain a new\r\n * session ID from Jicofo and join the MUC using it which will effectively\r\n * upgrade the user's role to moderator.\r\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\r\n * authenticating and upgrading the role of the specified XMPP user finishes and\r\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\r\n * process. If the process finishes successfully, the session ID has been stored\r\n * in the settings and the <tt>thenable</tt> is resolved. If the process\r\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\r\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\r\n * <tt>authenticationError</tt> property set depending on which of the steps has\r\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\r\n * thenable will be rejected with an empty object (i.e. no error property will\r\n * be set on the rejection reason).\r\n */\r\nexport default function authenticateAndUpgradeRole({\r\n    // 1. Log the specified XMPP user in.\r\n    id,\r\n    password,\r\n    onCreateResource,\r\n\r\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\r\n    //    successfully logged in.\r\n    onLoginSuccessful,\r\n\r\n    // 3. Join the MUC.\r\n    roomPassword\r\n}) {\r\n    let canceled = false;\r\n    let rejectPromise;\r\n    let xmpp = new XMPP(this.connection.options);\r\n\r\n    const process = new Promise((resolve, reject) => {\r\n        // The process is represented by a Thenable with a cancel method. The\r\n        // Thenable is implemented using Promise and the cancel using the\r\n        // Promise's reject function.\r\n        rejectPromise = reject;\r\n\r\n\r\n        xmpp.addListener(\r\n            CONNECTION_DISCONNECTED,\r\n            () => {\r\n                xmpp = undefined;\r\n            });\r\n        xmpp.addListener(\r\n            CONNECTION_ESTABLISHED,\r\n            () => {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                // Let the caller know that the XMPP login was successful.\r\n                onLoginSuccessful && onLoginSuccessful();\r\n\r\n                // Now authenticate with Jicofo and get a new session ID.\r\n                const room = xmpp.createRoom(\r\n                    this.options.name,\r\n                    this.options.config,\r\n                    onCreateResource\r\n                );\r\n\r\n                room.moderator.authenticate()\r\n                    .then(() => {\r\n                        xmpp && xmpp.disconnect();\r\n\r\n                        if (canceled) {\r\n                            return;\r\n                        }\r\n\r\n                        // At this point we should have the new session ID\r\n                        // stored in the settings. Jicofo will allow to join the\r\n                        // room.\r\n                        this.join(roomPassword);\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch(({ error, message }) => {\r\n                        xmpp.disconnect();\r\n\r\n                        reject({\r\n                            authenticationError: error,\r\n                            message\r\n                        });\r\n                    });\r\n            });\r\n        xmpp.addListener(\r\n            CONNECTION_FAILED,\r\n            (connectionError, message, credentials) => {\r\n                reject({\r\n                    connectionError,\r\n                    credentials,\r\n                    message\r\n                });\r\n                xmpp = undefined;\r\n            });\r\n\r\n        canceled || xmpp.connect(id, password);\r\n    });\r\n\r\n    /**\r\n     * Cancels the process, if it's in progress, of authenticating and upgrading\r\n     * the role of the local participant/user.\r\n     *\r\n     * @public\r\n     * @returns {void}\r\n     */\r\n    process.cancel = () => {\r\n        canceled = true;\r\n        rejectPromise({});\r\n        xmpp && xmpp.disconnect();\r\n    };\r\n\r\n    return process;\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Flag to set on senders / receivers to avoid setting up the encryption transform\r\n// more than once.\r\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\r\n\r\n/**\r\n * Context encapsulating the cryptography bits required for E2EE.\r\n * This uses the WebRTC Insertable Streams API which is explained in\r\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\r\n * that provides access to the encoded frames and allows them to be transformed.\r\n *\r\n * The encoded frame format is explained below in the _encodeFunction method.\r\n * High level design goals were:\r\n * - do not require changes to existing SFUs and retain (VP8) metadata.\r\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\r\n * - allow for the key to be rotated frequently.\r\n */\r\nexport default class E2EEcontext {\r\n    /**\r\n     * Build a new E2EE context instance, which will be used in a given conference.\r\n     */\r\n    constructor() {\r\n        // Determine the URL for the worker script. Relative URLs are relative to\r\n        // the entry point, not the script that launches the worker.\r\n        let baseUrl = '';\r\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\r\n\r\n        if (ljm) {\r\n            const idx = ljm.src.lastIndexOf('/');\r\n\r\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\r\n        }\r\n\r\n        // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\r\n        // synchronously load the JS.\r\n        const workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\r\n        const workerBlob\r\n            = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\r\n        const blobUrl = window.URL.createObjectURL(workerBlob);\r\n\r\n        this._worker = new Worker(blobUrl, { name: 'E2EE Worker' });\r\n        this._worker.onerror = e => logger.onerror(e);\r\n    }\r\n\r\n    /**\r\n     * Cleans up all state associated with the given participant. This is needed when a\r\n     * participant leaves the current conference.\r\n     *\r\n     * @param {string} participantId - The participant that just left.\r\n     */\r\n    cleanup(participantId) {\r\n        this._worker.postMessage({\r\n            operation: 'cleanup',\r\n            participantId\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\r\n     * a frame decoder.\r\n     *\r\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\r\n     * @param {string} kind - The kind of track this receiver belongs to.\r\n     * @param {string} participantId - The participant id that this receiver belongs to.\r\n     */\r\n    handleReceiver(receiver, kind, participantId) {\r\n        if (receiver[kJitsiE2EE]) {\r\n            return;\r\n        }\r\n        receiver[kJitsiE2EE] = true;\r\n\r\n        let receiverStreams;\r\n\r\n        if (receiver.createEncodedStreams) {\r\n            receiverStreams = receiver.createEncodedStreams();\r\n        } else {\r\n            receiverStreams = kind === 'video' ? receiver.createEncodedVideoStreams()\r\n                : receiver.createEncodedAudioStreams();\r\n        }\r\n\r\n        this._worker.postMessage({\r\n            operation: 'decode',\r\n            readableStream: receiverStreams.readable || receiverStreams.readableStream,\r\n            writableStream: receiverStreams.writable || receiverStreams.writableStream,\r\n            participantId\r\n        }, [ receiverStreams.readable || receiverStreams.readableStream,\r\n            receiverStreams.writable || receiverStreams.writableStream ]);\r\n    }\r\n\r\n    /**\r\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\r\n     * a frame encoder.\r\n     *\r\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\r\n     * @param {string} kind - The kind of track this sender belongs to.\r\n     * @param {string} participantId - The participant id that this sender belongs to.\r\n     */\r\n    handleSender(sender, kind, participantId) {\r\n        if (sender[kJitsiE2EE]) {\r\n            return;\r\n        }\r\n        sender[kJitsiE2EE] = true;\r\n\r\n        let senderStreams;\r\n\r\n        if (sender.createEncodedStreams) {\r\n            senderStreams = sender.createEncodedStreams();\r\n        } else {\r\n            senderStreams = kind === 'video' ? sender.createEncodedVideoStreams()\r\n                : sender.createEncodedAudioStreams();\r\n        }\r\n\r\n        this._worker.postMessage({\r\n            operation: 'encode',\r\n            readableStream: senderStreams.readable || senderStreams.readableStream,\r\n            writableStream: senderStreams.writable || senderStreams.writableStream,\r\n            participantId\r\n        }, [ senderStreams.readable || senderStreams.readableStream,\r\n            senderStreams.writable || senderStreams.writableStream ]);\r\n    }\r\n\r\n    /**\r\n     * Set the E2EE key for the specified participant.\r\n     *\r\n     * @param {string} participantId - the ID of the participant who's key we are setting.\r\n     * @param {Uint8Array | boolean} key - they key for the given participant.\r\n     * @param {Number} keyIndex - the key index.\r\n     */\r\n    setKey(participantId, key, keyIndex) {\r\n        this._worker.postMessage({\r\n            operation: 'setKey',\r\n            participantId,\r\n            key,\r\n            keyIndex\r\n        });\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    default as NetworkInfo,\r\n    NETWORK_INFO_EVENT\r\n} from '../connectivity/NetworkInfo';\r\nimport { getJitterDelay } from '../util/Retry';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\r\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\r\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\r\n * the retry interval using the full jitter pattern.\r\n */\r\nexport default class ResumeTask {\r\n    /**\r\n     * Initializes new {@code RetryTask}.\r\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\r\n     */\r\n    constructor(stropheConnection) {\r\n        this._stropheConn = stropheConnection;\r\n\r\n        /**\r\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._resumeRetryN = 0;\r\n\r\n        this._retryDelay = undefined;\r\n    }\r\n\r\n    /**\r\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\r\n     * 'undefined' it means that no resume task was not scheduled.\r\n     */\r\n    get retryDelay() {\r\n        return this._retryDelay;\r\n    }\r\n\r\n    /**\r\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    schedule() {\r\n        this._cancelResume();\r\n\r\n        this._resumeRetryN += 1;\r\n\r\n        this._networkOnlineListener\r\n            = NetworkInfo.addEventListener(\r\n                NETWORK_INFO_EVENT,\r\n                ({ isOnline }) => {\r\n                    if (isOnline) {\r\n                        this._scheduleResume();\r\n                    } else {\r\n                        this._cancelResume();\r\n                    }\r\n                });\r\n\r\n        NetworkInfo.isOnline() && this._scheduleResume();\r\n    }\r\n\r\n    /**\r\n     * Schedules a delayed timeout which will execute the resume action.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _scheduleResume() {\r\n        if (this._resumeTimeout) {\r\n\r\n            // NO-OP\r\n            return;\r\n        }\r\n\r\n        // The retry delay will be:\r\n        //   1st retry: 1.5s - 3s\r\n        //   2nd retry: 3s - 9s\r\n        //   3rd and next retry: 4.5s - 27s\r\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\r\n        this._retryDelay = getJitterDelay(\r\n            /* retry */ this._resumeRetryN,\r\n            /* minDelay */ this._resumeRetryN * 1500,\r\n            3);\r\n\r\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\r\n\r\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\r\n    }\r\n\r\n    /**\r\n     * Cancels the delayed resume task.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _cancelResume() {\r\n        if (this._resumeTimeout) {\r\n            logger.info('Canceling connection resume task');\r\n            clearTimeout(this._resumeTimeout);\r\n            this._resumeTimeout = undefined;\r\n            this._retryDelay = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resumes the XMPP connection using the stream management plugin.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _resumeConnection() {\r\n        const { streamManagement } = this._stropheConn;\r\n        const resumeToken = streamManagement.getResumeToken();\r\n\r\n        // Things may have changed since when the task was scheduled\r\n        if (!resumeToken) {\r\n            return;\r\n        }\r\n\r\n        logger.info('Trying to resume the XMPP connection');\r\n\r\n        const url = new URL(this._stropheConn.service);\r\n        let { search } = url;\r\n\r\n        // adds previd param only if missing\r\n        if (search.indexOf('previd=') === -1) {\r\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\r\n        }\r\n\r\n        url.search = search;\r\n\r\n        this._stropheConn.service = url.toString();\r\n\r\n        streamManagement.resume();\r\n    }\r\n\r\n    /**\r\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\r\n     * example when the disconnect method is called.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    cancel() {\r\n        this._cancelResume();\r\n        this._resumeRetryN = 0;\r\n        if (this._networkOnlineListener) {\r\n            this._networkOnlineListener();\r\n            this._networkOnlineListener = null;\r\n        }\r\n    }\r\n}\r\n","/**\r\n* Gets next timeout using the full jitter pattern.\r\n*\r\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\r\n*\r\n* @param {number} retry - The retry number.\r\n* @param {number} minDelay - The minimal delay in milliseconds.\r\n* @param {number} base - The exponent base.\r\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\r\n* @private\r\n*/\r\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\r\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\r\n}\r\n","/**\r\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\r\n */\r\nexport default class LastRequestTracker {\r\n    /**\r\n     * Initializes new instance.\r\n     */\r\n    constructor() {\r\n        this._lastSuccess = null;\r\n    }\r\n\r\n    /**\r\n     * Starts tracking requests on the given connection.\r\n     *\r\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\r\n     * @param {Object} stropheConnection - Strophe connection instance.\r\n     */\r\n    startTracking(xmppConnection, stropheConnection) {\r\n        const originalRawInput = stropheConnection.rawInput;\r\n\r\n        stropheConnection.rawInput = (...args) => {\r\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\r\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\r\n            if (xmppConnection.connected) {\r\n                this._lastSuccess = Date.now();\r\n            }\r\n            originalRawInput.apply(stropheConnection, args);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns how many milliseconds have passed since the last successful BOSH request.\r\n     *\r\n     * @returns {number|null}\r\n     */\r\n    getTimeSinceLastSuccess() {\r\n        return this._lastSuccess\r\n            ? Date.now() - this._lastSuccess\r\n            : null;\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Ping every 10 sec\r\n */\r\nconst PING_INTERVAL = 10000;\r\n\r\n/**\r\n * Ping timeout error after 5 sec of waiting.\r\n */\r\nconst PING_TIMEOUT = 5000;\r\n\r\n/**\r\n * How many ping failures will be tolerated before the WebSocket connection is killed.\r\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\r\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\r\n */\r\nconst PING_THRESHOLD = 2;\r\n\r\n/**\r\n * The number of timestamps of send pings to keep.\r\n * The current value is 2 minutes.\r\n * @type {number} number of timestamps.\r\n */\r\nconst PING_TIMESTAMPS_TO_KEEP = 120000 / PING_INTERVAL;\r\n\r\n/**\r\n * XEP-0199 ping plugin.\r\n *\r\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\r\n */\r\nexport default class PingConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     * Contructs new object\r\n     * @param {Object} options\r\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\r\n     * by the {@link PING_THRESHOLD} constant).\r\n     * @constructor\r\n     */\r\n    constructor({ onPingThresholdExceeded }) {\r\n        super();\r\n        this.failedPings = 0;\r\n        this.pingExecIntervals = new Array(PING_TIMESTAMPS_TO_KEEP);\r\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\r\n    }\r\n\r\n    /**\r\n     * Initializes the plugin. Method called by Strophe.\r\n     * @param connection Strophe connection instance.\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Sends \"ping\" to given <tt>jid</tt>\r\n     * @param jid the JID to which ping request will be sent.\r\n     * @param success callback called on success.\r\n     * @param error callback called on error.\r\n     * @param timeout ms how long are we going to wait for the response. On\r\n     * timeout <tt>error<//t> callback is called with undefined error argument.\r\n     */\r\n    ping(jid, success, error, timeout) {\r\n        this._addPingExecutionTimestamp();\r\n\r\n        const iq = $iq({\r\n            type: 'get',\r\n            to: jid\r\n        });\r\n\r\n        iq.c('ping', { xmlns: Strophe.NS.PING });\r\n        this.connection.sendIQ2(iq, { timeout })\r\n            .then(success, error);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Starts to send ping in given interval to specified remote JID.\r\n     * This plugin supports only one such task and <tt>stopInterval</tt>\r\n     * must be called before starting a new one.\r\n     * @param remoteJid remote JID to which ping requests will be sent to.\r\n     * @param interval task interval in ms.\r\n     */\r\n    startInterval(remoteJid, interval = PING_INTERVAL) {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = window.setInterval(() => {\r\n            this.ping(remoteJid, () => {\r\n                this.failedPings = 0;\r\n            }, error => {\r\n                this.failedPings += 1;\r\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\r\n\r\n                if (this.failedPings >= PING_THRESHOLD) {\r\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n                    logger.error(errmsg, error);\r\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\r\n                } else {\r\n                    logger.warn(errmsg, error);\r\n                }\r\n            }, PING_TIMEOUT);\r\n        }, interval);\r\n        logger.info(`XMPP pings will be sent every ${interval} ms`);\r\n    }\r\n\r\n    /**\r\n     * Stops current \"ping\"  interval task.\r\n     */\r\n    stopInterval() {\r\n        if (this.intervalId) {\r\n            window.clearInterval(this.intervalId);\r\n            this.intervalId = null;\r\n            this.failedPings = 0;\r\n            logger.info('Ping interval cleared');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the current time to the array of send ping timestamps.\r\n     * @private\r\n     */\r\n    _addPingExecutionTimestamp() {\r\n        this.pingExecIntervals.push(new Date().getTime());\r\n\r\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\r\n        if (this.pingExecIntervals.length > PING_TIMESTAMPS_TO_KEEP) {\r\n            this.pingExecIntervals.shift();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum time between the recent sent pings, if there is a\r\n     * big value it means the computer was inactive for some time(suspended).\r\n     * Checks the maximum gap between sending pings, considering and the\r\n     * current time. Trying to detect computer inactivity (sleep).\r\n     *\r\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\r\n     */\r\n    getPingSuspendTime() {\r\n        const pingIntervals = this.pingExecIntervals.slice();\r\n\r\n        // we need current time, as if ping was sent now\r\n        // if computer sleeps we will get correct interval after next\r\n        // scheduled ping, bet we sometimes need that interval before waiting\r\n        // for the next ping, on closing the connection on error.\r\n        pingIntervals.push(new Date().getTime());\r\n\r\n        let maxInterval = 0;\r\n        let previousTS = pingIntervals[0];\r\n\r\n        pingIntervals.forEach(e => {\r\n            const currentInterval = e - previousTS;\r\n\r\n            if (currentInterval > maxInterval) {\r\n                maxInterval = currentInterval;\r\n            }\r\n\r\n            previousTS = e;\r\n        });\r\n\r\n        // remove the interval between the ping sent\r\n        // this way in normal execution there is no suspend and the return\r\n        // will be 0 or close to 0.\r\n        maxInterval -= PING_INTERVAL;\r\n\r\n        // make sure we do not return less than 0\r\n        return Math.max(maxInterval, 0);\r\n    }\r\n}\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport ChatRoom from './ChatRoom';\r\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * MUC connection plugin.\r\n */\r\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\r\n    /**\r\n     *\r\n     * @param xmpp\r\n     */\r\n    constructor(xmpp) {\r\n        super();\r\n        this.xmpp = xmpp;\r\n        this.rooms = {};\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n\r\n        // add handlers (just once)\r\n        this.connection.addHandler(this.onPresence.bind(this), null,\r\n            'presence', null, null, null, null);\r\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\r\n            null, 'presence', 'unavailable', null);\r\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\r\n            'presence', 'error', null);\r\n        this.connection.addHandler(this.onMessage.bind(this), null,\r\n            'message', null, null);\r\n        this.connection.addHandler(this.onMute.bind(this),\r\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     * @param options\r\n     */\r\n    createRoom(jid, password, options) {\r\n        const roomJid = Strophe.getBareJidFromJid(jid);\r\n\r\n        if (this.rooms[roomJid]) {\r\n            const errmsg = 'You are already in the room!';\r\n\r\n            logger.error(errmsg);\r\n            throw new Error(errmsg);\r\n        }\r\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\r\n            password, this.xmpp, options);\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\r\n\r\n        return this.rooms[roomJid];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     */\r\n    doLeave(jid) {\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\r\n        delete this.rooms[jid];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresence(pres) {\r\n        const from = pres.getAttribute('from');\r\n\r\n        // What is this for? A workaround for something?\r\n        if (pres.getAttribute('type')) {\r\n            return true;\r\n        }\r\n\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        // Parse status.\r\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n            + '>status[code=\"201\"]').length) {\r\n            room.createNonAnonymousRoom();\r\n        }\r\n\r\n        room.onPresence(pres);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresenceUnavailable(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onPresenceUnavailable(pres, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresenceError(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onPresenceError(pres, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param msg\r\n     */\r\n    onMessage(msg) {\r\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\r\n        const from = msg.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onMessage(msg, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * TODO: Document\r\n     * @param iq\r\n     */\r\n    onMute(iq) {\r\n        const from = iq.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        // Returning false would result in the listener being deregistered by Strophe\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onMute(iq);\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $msg, Strophe } from 'strophe.js';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The command type for updating a lobby participant's e-mail address.\r\n *\r\n * @type {string}\r\n */\r\nconst EMAIL_COMMAND = 'email';\r\n\r\n/**\r\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\r\n * approving or denying access to participants from the lobby room.\r\n */\r\nexport default class Lobby {\r\n\r\n    /**\r\n     * Constructs lobby room.\r\n     *\r\n     * @param {ChatRoom} room the main room.\r\n     */\r\n    constructor(room) {\r\n        this.xmpp = room.xmpp;\r\n        this.mainRoom = room;\r\n\r\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.LOCAL_ROLE_CHANGED,\r\n            maybeJoinLobbyRoom);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\r\n            maybeJoinLobbyRoom);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\r\n            jid => {\r\n                this.lobbyRoomJid = jid;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Whether lobby is supported on backend.\r\n     *\r\n     * @returns {boolean} whether lobby is supported on backend.\r\n     */\r\n    isSupported() {\r\n        return this.xmpp.lobbySupported;\r\n    }\r\n\r\n    /**\r\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    enable() {\r\n        if (!this.isSupported()) {\r\n            return Promise.reject(new Error('Lobby not supported!'));\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.mainRoom.setMembersOnly(true, resolve, reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    disable() {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()\r\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\r\n            return;\r\n        }\r\n\r\n        this.mainRoom.setMembersOnly(false);\r\n    }\r\n\r\n    /**\r\n     * Leaves the lobby room.\r\n     * @private\r\n     */\r\n    _leaveLobbyRoom() {\r\n        if (this.lobbyRoom) {\r\n            this.lobbyRoom.leave()\r\n                .then(() => {\r\n                    this.lobbyRoom = undefined;\r\n                    logger.info('Lobby room left!');\r\n                })\r\n                .catch(() => {}); // eslint-disable-line no-empty-function\r\n        }\r\n    }\r\n\r\n    /**\r\n     * We had received a jid for the lobby room.\r\n     *\r\n     * @param jid the lobby room jid to join.\r\n     */\r\n    setLobbyRoomJid(jid) {\r\n        this.lobbyRoomJid = jid;\r\n    }\r\n\r\n    /**\r\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\r\n     * @private\r\n     */\r\n    _maybeJoinLobbyRoom() {\r\n        if (!this.isSupported()) {\r\n            return;\r\n        }\r\n\r\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\r\n\r\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\r\n            // join the lobby\r\n            this.join()\r\n                .then(() => logger.info('Joined lobby room'))\r\n                .catch(e => logger.error('Failed joining lobby', e));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\r\n     *\r\n     * @param {string} username is required.\r\n     * @param {string} email is optional.\r\n     * @returns {Promise} resolves once we join the room.\r\n     */\r\n    join(displayName, email) {\r\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\r\n\r\n        if (!this.lobbyRoomJid) {\r\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\r\n        }\r\n\r\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\r\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\r\n\r\n        this.lobbyRoom = this.xmpp.createRoom(\r\n            roomName, {\r\n                customDomain,\r\n                disableDiscoInfo: true,\r\n                disableFocus: true,\r\n                enableLobby: false\r\n            }\r\n        );\r\n\r\n        if (displayName) {\r\n            // remove previously set nickname\r\n            this.lobbyRoom.removeFromPresence('nick');\r\n            this.lobbyRoom.addToPresence('nick', {\r\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\r\n                value: displayName\r\n            });\r\n        }\r\n\r\n        if (isModerator) {\r\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\r\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\r\n            });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_MEMBER_JOINED,\r\n                // eslint-disable-next-line max-params\r\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\r\n                    // we need to ignore joins on lobby for participants that are already in the main room\r\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\r\n                        return;\r\n                    }\r\n\r\n                    // we emit the new event on the main room so we can propagate\r\n                    // events to the conference\r\n                    this.mainRoom.eventEmitter.emit(\r\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\r\n                        Strophe.getResourceFromJid(from),\r\n                        nick,\r\n                        identity ? identity.avatar : undefined\r\n                    );\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\r\n                    // we emit the new event on the main room so we can propagate\r\n                    // events to the conference\r\n                    this.mainRoom.eventEmitter.emit(\r\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\r\n                        Strophe.getResourceFromJid(from)\r\n                    );\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_DESTROYED,\r\n                () => {\r\n                    // let's make sure we emit that all lobby users had left\r\n                    Object.keys(this.lobbyRoom.members)\r\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\r\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    this.lobbyRoom = undefined;\r\n                    logger.info('Lobby room left(destroyed)!');\r\n                });\r\n        } else {\r\n            // this should only be handled by those waiting in lobby\r\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\r\n                if (isSelfPresence) {\r\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    return;\r\n                }\r\n            });\r\n\r\n            // As there is still reference of the main room\r\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\r\n            // the invite message should be received directly to the xmpp conn in general\r\n            this.mainRoom.addEventListener(\r\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\r\n                (roomJid, from, txt, invitePassword) => {\r\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\r\n                    if (roomJid === this.mainRoom.roomjid) {\r\n                        // we are now allowed let's join and leave lobby\r\n                        this.mainRoom.join(invitePassword);\r\n\r\n                        this._leaveLobbyRoom();\r\n                    }\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_DESTROYED,\r\n                (reason, jid) => {\r\n                    // we are receiving the jid of the main room\r\n                    // means we are invited to join, maybe lobby was disabled\r\n                    if (jid && jid === this.mainRoom.roomjid) {\r\n                        this.mainRoom.join();\r\n\r\n                        return;\r\n                    }\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\r\n                });\r\n\r\n            // If participant retries joining shared password while waiting in the lobby\r\n            // and succeeds make sure we leave lobby\r\n            this.mainRoom.addEventListener(\r\n                XMPPEvents.MUC_JOINED,\r\n                () => {\r\n                    this._leaveLobbyRoom();\r\n                });\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\r\n                resolve();\r\n\r\n                // send our email, as we do not handle this on initial presence we need a second one\r\n                if (email && !isModerator) {\r\n                    this.lobbyRoom.removeFromPresence(EMAIL_COMMAND);\r\n                    this.lobbyRoom.addToPresence(EMAIL_COMMAND, { value: email });\r\n                    this.lobbyRoom.sendPresence();\r\n                }\r\n            });\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\r\n\r\n            this.lobbyRoom.join();\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Should be possible only for moderators.\r\n     * @param id\r\n     */\r\n    denyAccess(id) {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\r\n            return;\r\n        }\r\n\r\n        const jid = Object.keys(this.lobbyRoom.members)\r\n            .find(j => Strophe.getResourceFromJid(j) === id);\r\n\r\n        if (jid) {\r\n            this.lobbyRoom.kick(jid);\r\n        } else {\r\n            logger.error(`Not found member for ${id} in lobby room.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Should be possible only for moderators.\r\n     * @param id\r\n     */\r\n    approveAccess(id) {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\r\n            return;\r\n        }\r\n\r\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\r\n            .find(j => Strophe.getResourceFromJid(j) === id);\r\n\r\n        if (memberRoomJid) {\r\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\r\n            const msgToSend\r\n                = $msg({ to: this.mainRoom.roomjid })\r\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\r\n                    .c('invite', { to: jid });\r\n\r\n            this.xmpp.connection.sendIQ(msgToSend,\r\n                () => { }, // eslint-disable-line no-empty-function\r\n                e => {\r\n                    logger.error(`Error sending invite for ${jid}`, e);\r\n                });\r\n        } else {\r\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\r\n        }\r\n    }\r\n}\r\n","/* global $, Promise */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport Settings from '../settings/Settings';\r\n\r\nconst AuthenticationEvents\r\n    = require('../../service/authentication/AuthenticationEvents');\r\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\r\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n *\r\n * @param step\r\n */\r\nfunction createExpBackoffTimer(step) {\r\n    let count = 1;\r\n\r\n    return function(reset) {\r\n        // Reset call\r\n        if (reset) {\r\n            count = 1;\r\n\r\n            return;\r\n        }\r\n\r\n        // Calculate next timeout\r\n        const timeout = Math.pow(2, count - 1);\r\n\r\n        count += 1;\r\n\r\n        return timeout * step;\r\n    };\r\n}\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n *\r\n * @param roomName\r\n * @param xmpp\r\n * @param emitter\r\n * @param options\r\n */\r\nexport default function Moderator(roomName, xmpp, emitter, options) {\r\n    this.roomName = roomName;\r\n    this.xmppService = xmpp;\r\n    this.getNextTimeout = createExpBackoffTimer(1000);\r\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\r\n\r\n    // External authentication stuff\r\n    this.externalAuthEnabled = false;\r\n    this.options = options;\r\n\r\n    // Sip gateway can be enabled by configuring Jigasi host in config.js or\r\n    // it will be enabled automatically if focus detects the component through\r\n    // service discovery.\r\n    this.sipGatewayEnabled\r\n        = this.options.connection.hosts\r\n            && this.options.connection.hosts.call_control !== undefined;\r\n\r\n    this.eventEmitter = emitter;\r\n\r\n    this.connection = this.xmppService.connection;\r\n\r\n    // FIXME: Message listener that talks to POPUP window\r\n    /**\r\n     *\r\n     * @param event\r\n     */\r\n    function listener(event) {\r\n        if (event.data && event.data.sessionId) {\r\n            if (event.origin !== window.location.origin) {\r\n                logger.warn(\r\n                    `Ignoring sessionId from different origin: ${\r\n                        event.origin}`);\r\n\r\n                return;\r\n            }\r\n            Settings.sessionId = event.data.sessionId;\r\n\r\n            // After popup is closed we will authenticate\r\n        }\r\n    }\r\n\r\n    // Register\r\n    if (window.addEventListener) {\r\n        window.addEventListener('message', listener, false);\r\n    } else {\r\n        window.attachEvent('onmessage', listener);\r\n    }\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\nModerator.prototype.isExternalAuthEnabled = function() {\r\n    return this.externalAuthEnabled;\r\n};\r\n\r\nModerator.prototype.isSipGatewayEnabled = function() {\r\n    return this.sipGatewayEnabled;\r\n};\r\n\r\nModerator.prototype.onMucMemberLeft = function(jid) {\r\n    logger.info(`Someone left is it focus ? ${jid}`);\r\n    const resource = Strophe.getResourceFromJid(jid);\r\n\r\n    if (resource === 'focus') {\r\n        logger.info(\r\n            'Focus has left the room - leaving conference');\r\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\r\n    }\r\n};\r\n\r\nModerator.prototype.setFocusUserJid = function(focusJid) {\r\n    if (!this.focusUserJid) {\r\n        this.focusUserJid = focusJid;\r\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\r\n    }\r\n};\r\n\r\nModerator.prototype.getFocusUserJid = function() {\r\n    return this.focusUserJid;\r\n};\r\n\r\nModerator.prototype.getFocusComponent = function() {\r\n    // Get focus component address\r\n    let focusComponent = this.options.connection.hosts.focus;\r\n\r\n    // If not specified use default:  'focus.domain'\r\n\r\n    if (!focusComponent) {\r\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\r\n    }\r\n\r\n    return focusComponent;\r\n};\r\n\r\nModerator.prototype.createConferenceIq = function() {\r\n    // Generate create conference IQ\r\n    const elem = $iq({ to: this.getFocusComponent(),\r\n        type: 'set' });\r\n\r\n    // Session Id used for authentication\r\n    const { sessionId } = Settings;\r\n    const machineUID = Settings.machineId;\r\n    const config = this.options.conference;\r\n\r\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\r\n\r\n    elem.c('conference', {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        room: this.roomName,\r\n        'machine-uid': machineUID\r\n    });\r\n\r\n    if (sessionId) {\r\n        elem.attrs({ 'session-id': sessionId });\r\n    }\r\n    if (this.options.connection.enforcedBridge !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'enforcedBridge',\r\n                value: this.options.connection.enforcedBridge\r\n            }).up();\r\n    }\r\n\r\n    // Tell the focus we have Jigasi configured\r\n    if (this.options.connection.hosts !== undefined\r\n        && this.options.connection.hosts.call_control !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'call_control',\r\n                value: this.options.connection.hosts.call_control\r\n            }).up();\r\n    }\r\n    if (config.channelLastN !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'channelLastN',\r\n                value: config.channelLastN\r\n            }).up();\r\n    }\r\n    elem.c(\r\n        'property', {\r\n            name: 'disableRtx',\r\n            value: Boolean(config.disableRtx)\r\n        }).up();\r\n\r\n    if (config.enableTcc !== undefined) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'enableTcc',\r\n                    value: Boolean(config.enableTcc)\r\n                }).up();\r\n    }\r\n    if (config.enableRemb !== undefined) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'enableRemb',\r\n                    value: Boolean(config.enableRemb)\r\n                }).up();\r\n    }\r\n    if (config.enableOpusRed === true) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'enableOpusRed',\r\n                    value: true\r\n                }).up();\r\n    }\r\n    if (config.minParticipants !== undefined) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'minParticipants',\r\n                    value: config.minParticipants\r\n                }).up();\r\n    }\r\n\r\n    elem.c(\r\n        'property', {\r\n            name: 'enableLipSync',\r\n            value: this.options.connection.enableLipSync === true\r\n        }).up();\r\n    if (config.audioPacketDelay !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'audioPacketDelay',\r\n                value: config.audioPacketDelay\r\n            }).up();\r\n    }\r\n    if (config.startBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startBitrate',\r\n                value: config.startBitrate\r\n            }).up();\r\n    }\r\n    if (config.minBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'minBitrate',\r\n                value: config.minBitrate\r\n            }).up();\r\n    }\r\n    if (config.testing && config.testing.octo\r\n        && typeof config.testing.octo.probability === 'number') {\r\n        if (Math.random() < config.testing.octo.probability) {\r\n            elem.c(\r\n                'property', {\r\n                    name: 'octo',\r\n                    value: true\r\n                }).up();\r\n        }\r\n    }\r\n\r\n    let openSctp;\r\n\r\n    switch (this.options.conference.openBridgeChannel) {\r\n    case 'datachannel':\r\n    case true:\r\n    case undefined:\r\n        openSctp = true;\r\n        break;\r\n    case 'websocket':\r\n        openSctp = false;\r\n        break;\r\n    }\r\n\r\n    elem.c(\r\n        'property', {\r\n            name: 'openSctp',\r\n            value: openSctp\r\n        }).up();\r\n\r\n    if (config.opusMaxAverageBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'opusMaxAverageBitrate',\r\n                value: config.opusMaxAverageBitrate\r\n            }).up();\r\n    }\r\n    if (this.options.conference.startAudioMuted !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startAudioMuted',\r\n                value: this.options.conference.startAudioMuted\r\n            }).up();\r\n    }\r\n    if (this.options.conference.startVideoMuted !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startVideoMuted',\r\n                value: this.options.conference.startVideoMuted\r\n            }).up();\r\n    }\r\n    if (this.options.conference.stereo !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'stereo',\r\n                value: this.options.conference.stereo\r\n            }).up();\r\n    }\r\n    if (this.options.conference.useRoomAsSharedDocumentName !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'useRoomAsSharedDocumentName',\r\n                value: this.options.conference.useRoomAsSharedDocumentName\r\n            }).up();\r\n    }\r\n    elem.up();\r\n\r\n    return elem;\r\n};\r\n\r\n\r\nModerator.prototype.parseSessionId = function(resultIq) {\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    const sessionId = $(resultIq).find('conference').attr('session-id');\r\n\r\n    if (sessionId) {\r\n        logger.info(`Received sessionId:  ${sessionId}`);\r\n        Settings.sessionId = sessionId;\r\n    }\r\n};\r\n\r\nModerator.prototype.parseConfigOptions = function(resultIq) {\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\r\n\r\n    const authenticationEnabled\r\n        = $(resultIq).find(\r\n            '>conference>property'\r\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\r\n\r\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\r\n\r\n    this.externalAuthEnabled = $(resultIq).find(\r\n        '>conference>property'\r\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\r\n\r\n    logger.info(\r\n        `External authentication enabled: ${this.externalAuthEnabled}`);\r\n\r\n    if (!this.externalAuthEnabled) {\r\n        // We expect to receive sessionId in 'internal' authentication mode\r\n        this.parseSessionId(resultIq);\r\n    }\r\n\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\r\n\r\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\r\n        authenticationEnabled, authIdentity);\r\n\r\n    // Check if focus has auto-detected Jigasi component(this will be also\r\n    // included if we have passed our host from the config)\r\n    if ($(resultIq).find(\r\n        '>conference>property'\r\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\r\n        this.sipGatewayEnabled = true;\r\n    }\r\n\r\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\r\n};\r\n\r\n// FIXME We need to show the fact that we're waiting for the focus to the user\r\n// (or that the focus is not available)\r\n/**\r\n * Allocates the conference focus.\r\n *\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\r\n * rejected and it'll keep on pinging Jicofo forever.\r\n */\r\nModerator.prototype.allocateConferenceFocus = function() {\r\n    return new Promise(resolve => {\r\n        // Try to use focus user JID from the config\r\n        this.setFocusUserJid(this.options.connection.focusUserJid);\r\n\r\n        // Send create conference IQ\r\n        this.connection.sendIQ(\r\n            this.createConferenceIq(),\r\n            result => this._allocateConferenceFocusSuccess(result, resolve),\r\n            error => this._allocateConferenceFocusError(error, resolve));\r\n\r\n        // XXX We're pressed for time here because we're beginning a complex\r\n        // and/or lengthy conference-establishment process which supposedly\r\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\r\n        // decide to send our IQ.\r\n        this.connection.flush();\r\n    });\r\n};\r\n\r\n/**\r\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\r\n * error result.\r\n *\r\n * @param error - the error result of the request that\r\n * {@link #allocateConferenceFocus} sent\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n */\r\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\r\n    // If the session is invalid, remove and try again without session ID to get\r\n    // a new one\r\n    const invalidSession\r\n        = $(error).find('>error>session-invalid').length\r\n            || $(error).find('>error>not-acceptable').length;\r\n\r\n    if (invalidSession) {\r\n        logger.info('Session expired! - removing');\r\n        Settings.sessionId = undefined;\r\n    }\r\n    if ($(error).find('>error>graceful-shutdown').length) {\r\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\r\n\r\n        return;\r\n    }\r\n\r\n    // Check for error returned by the reservation system\r\n    const reservationErr = $(error).find('>error>reservation-error');\r\n\r\n    if (reservationErr.length) {\r\n        // Trigger error event\r\n        const errorCode = reservationErr.attr('error-code');\r\n        const errorTextNode = $(error).find('>error>text');\r\n        let errorMsg;\r\n\r\n        if (errorTextNode) {\r\n            errorMsg = errorTextNode.text();\r\n        }\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.RESERVATION_ERROR,\r\n            errorCode,\r\n            errorMsg);\r\n\r\n        return;\r\n    }\r\n\r\n    // Not authorized to create new room\r\n    if ($(error).find('>error>not-authorized').length) {\r\n        logger.warn('Unauthorized to start the conference', error);\r\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\r\n\r\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\r\n            // FIXME \"is external\" should come either from the focus or\r\n            // config.js\r\n            this.externalAuthEnabled = true;\r\n        }\r\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\r\n\r\n        return;\r\n    }\r\n    const waitMs = this.getNextErrorTimeout();\r\n    const errmsg = `Focus error, retry after ${waitMs}`;\r\n\r\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n    logger.error(errmsg, error);\r\n\r\n    // Show message\r\n    const focusComponent = this.getFocusComponent();\r\n    const retrySec = waitMs / 1000;\r\n\r\n    // FIXME: message is duplicated ? Do not show in case of session invalid\r\n    // which means just a retry\r\n\r\n    if (!invalidSession) {\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.FOCUS_DISCONNECTED,\r\n            focusComponent,\r\n            retrySec);\r\n    }\r\n\r\n    // Reset response timeout\r\n    this.getNextTimeout(true);\r\n    window.setTimeout(\r\n        () => this.allocateConferenceFocus().then(callback),\r\n        waitMs);\r\n};\r\n\r\n/**\r\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\r\n * success (i.e. non-error) result.\r\n *\r\n * @param result - the success (i.e. non-error) result of the request that\r\n * {@link #allocateConferenceFocus} sent\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n */\r\nModerator.prototype._allocateConferenceFocusSuccess = function(\r\n        result,\r\n        callback) {\r\n    // Setup config options\r\n    this.parseConfigOptions(result);\r\n\r\n    // Reset the error timeout (because we haven't failed here).\r\n    this.getNextErrorTimeout(true);\r\n\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    if ($(result).find('conference').attr('ready') === 'true') {\r\n        // Reset the non-error timeout (because we've succeeded here).\r\n        this.getNextTimeout(true);\r\n\r\n        // Exec callback\r\n        callback();\r\n    } else {\r\n        const waitMs = this.getNextTimeout();\r\n\r\n        logger.info(`Waiting for the focus... ${waitMs}`);\r\n        window.setTimeout(\r\n            () => this.allocateConferenceFocus().then(callback),\r\n            waitMs);\r\n    }\r\n};\r\n\r\nModerator.prototype.authenticate = function() {\r\n    return new Promise((resolve, reject) => {\r\n        this.connection.sendIQ(\r\n            this.createConferenceIq(),\r\n            result => {\r\n                this.parseSessionId(result);\r\n                resolve();\r\n            },\r\n            errorIq => reject({\r\n                error: $(errorIq).find('iq>error :first')\r\n                    .prop('tagName'),\r\n                message: $(errorIq).find('iq>error>text')\r\n                    .text()\r\n            })\r\n        );\r\n    });\r\n};\r\n\r\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\r\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\r\n};\r\n\r\n/**\r\n *\r\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\r\n * {@link Moderator#getPopupLoginUrl}\r\n * @param urlCb\r\n * @param failureCb\r\n */\r\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\r\n    const iq = $iq({ to: this.getFocusComponent(),\r\n        type: 'get' });\r\n    const attrs = {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        room: this.roomName,\r\n        'machine-uid': Settings.machineId\r\n    };\r\n    let str = 'auth url'; // for logger\r\n\r\n    if (popup) {\r\n        attrs.popup = true;\r\n        str = `POPUP ${str}`;\r\n    }\r\n    iq.c('login-url', attrs);\r\n\r\n    /**\r\n     * Implements a failure callback which reports an error message and an error\r\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\r\n     *\r\n     * @param {string} errmsg the error messsage to report\r\n     * @param {*} error the error to report (in addition to errmsg)\r\n     */\r\n    function reportError(errmsg, err) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n        logger.error(errmsg, err);\r\n        failureCb(err);\r\n    }\r\n    this.connection.sendIQ(\r\n        iq,\r\n        result => {\r\n            // eslint-disable-next-line newline-per-chained-call\r\n            let url = $(result).find('login-url').attr('url');\r\n\r\n            url = decodeURIComponent(url);\r\n            if (url) {\r\n                logger.info(`Got ${str}: ${url}`);\r\n                urlCb(url);\r\n            } else {\r\n                reportError(`Failed to get ${str} from the focus`, result);\r\n            }\r\n        },\r\n        reportError.bind(undefined, `Get ${str} error`)\r\n    );\r\n};\r\n\r\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\r\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\r\n};\r\n\r\nModerator.prototype.logout = function(callback) {\r\n    const iq = $iq({ to: this.getFocusComponent(),\r\n        type: 'set' });\r\n    const { sessionId } = Settings;\r\n\r\n    if (!sessionId) {\r\n        callback();\r\n\r\n        return;\r\n    }\r\n    iq.c('logout', {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        'session-id': sessionId\r\n    });\r\n    this.connection.sendIQ(\r\n        iq,\r\n        result => {\r\n            // eslint-disable-next-line newline-per-chained-call\r\n            let logoutUrl = $(result).find('logout').attr('logout-url');\r\n\r\n            if (logoutUrl) {\r\n                logoutUrl = decodeURIComponent(logoutUrl);\r\n            }\r\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\r\n            Settings.sessionId = undefined;\r\n            callback(logoutUrl);\r\n        },\r\n        error => {\r\n            const errmsg = 'Logout error';\r\n\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n            logger.error(errmsg, error);\r\n        }\r\n    );\r\n};\r\n","const RandomUtil = require('./RandomUtil');\r\n\r\n/**\r\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\r\n * MIT License\r\n * http://github.com/marak/faker.js/\r\n *\r\n * @const\r\n */\r\nconst names = [\r\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\r\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\r\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\r\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\r\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\r\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\r\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\r\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\r\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\r\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\r\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\r\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\r\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\r\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\r\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\r\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\r\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\r\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\r\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\r\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\r\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\r\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\r\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\r\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\r\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\r\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\r\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\r\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\r\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\r\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\r\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\r\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\r\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\r\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\r\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\r\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\r\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\r\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\r\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\r\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\r\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\r\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\r\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\r\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\r\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\r\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\r\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\r\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\r\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\r\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\r\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\r\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\r\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\r\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\r\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\r\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\r\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\r\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\r\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\r\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\r\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\r\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\r\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\r\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\r\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\r\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\r\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\r\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\r\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\r\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\r\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\r\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\r\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\r\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\r\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\r\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\r\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\r\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\r\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\r\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\r\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\r\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\r\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\r\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\r\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\r\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\r\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\r\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\r\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\r\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\r\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\r\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\r\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\r\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\r\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\r\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\r\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\r\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\r\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\r\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\r\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\r\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\r\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\r\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\r\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\r\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\r\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\r\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\r\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\r\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\r\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\r\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\r\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\r\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\r\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\r\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\r\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\r\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\r\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\r\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\r\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\r\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\r\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\r\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\r\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\r\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\r\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\r\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\r\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\r\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\r\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\r\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\r\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\r\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\r\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\r\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\r\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\r\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\r\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\r\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\r\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\r\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\r\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\r\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\r\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\r\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\r\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\r\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\r\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\r\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\r\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\r\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\r\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\r\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\r\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\r\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\r\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\r\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\r\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\r\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\r\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\r\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\r\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\r\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\r\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\r\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\r\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\r\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\r\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\r\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\r\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\r\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\r\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\r\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\r\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\r\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\r\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\r\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\r\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\r\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\r\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\r\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\r\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\r\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\r\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\r\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\r\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\r\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\r\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\r\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\r\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\r\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\r\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\r\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\r\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\r\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\r\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\r\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\r\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\r\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\r\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\r\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\r\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\r\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\r\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\r\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\r\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\r\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\r\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\r\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\r\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\r\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\r\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\r\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\r\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\r\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\r\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\r\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\r\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\r\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\r\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\r\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\r\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\r\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\r\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\r\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\r\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\r\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\r\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\r\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\r\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\r\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\r\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\r\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\r\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\r\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\r\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\r\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\r\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\r\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\r\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\r\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\r\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\r\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\r\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\r\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\r\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\r\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\r\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\r\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\r\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\r\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\r\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\r\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\r\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\r\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\r\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\r\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\r\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\r\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\r\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\r\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\r\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\r\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\r\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\r\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\r\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\r\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\r\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\r\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\r\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\r\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\r\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\r\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\r\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\r\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\r\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\r\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\r\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\r\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\r\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\r\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\r\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\r\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\r\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\r\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\r\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\r\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\r\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\r\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\r\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\r\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\r\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\r\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\r\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\r\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\r\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\r\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\r\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\r\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\r\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\r\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\r\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\r\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\r\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\r\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\r\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\r\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\r\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\r\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\r\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\r\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\r\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\r\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\r\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\r\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\r\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\r\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\r\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\r\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\r\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\r\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\r\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\r\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\r\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\r\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\r\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\r\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\r\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\r\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\r\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\r\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\r\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\r\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\r\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\r\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\r\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\r\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\r\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\r\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\r\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\r\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\r\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\r\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\r\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\r\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\r\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\r\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\r\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\r\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\r\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\r\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\r\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\r\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\r\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\r\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\r\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\r\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\r\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\r\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\r\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\r\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\r\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\r\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\r\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\r\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\r\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\r\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\r\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\r\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\r\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\r\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\r\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\r\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\r\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\r\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\r\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\r\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\r\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\r\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\r\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\r\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\r\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\r\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\r\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\r\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\r\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\r\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\r\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\r\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\r\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\r\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\r\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\r\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\r\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\r\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\r\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\r\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\r\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\r\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\r\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\r\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\r\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\r\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\r\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\r\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\r\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\r\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\r\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\r\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\r\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\r\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\r\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\r\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\r\n    'Zoila', 'Zola', 'Zora', 'Zula'\r\n];\r\n\r\n/**\r\n * Generate random username.\r\n * @returns {string} random username\r\n */\r\nfunction generateUsername() {\r\n    const name = RandomUtil.randomElement(names);\r\n    const suffix = RandomUtil.randomAlphanumStr(3);\r\n\r\n    return `${name}-${suffix}`;\r\n}\r\n\r\nmodule.exports = {\r\n    generateUsername\r\n};\r\n","/* global $, __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport {\r\n    ACTION_JINGLE_TR_RECEIVED,\r\n    ACTION_JINGLE_TR_SUCCESS,\r\n    createJingleEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\nimport JingleSessionPC from './JingleSessionPC';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// XXX Strophe is build around the idea of chaining function calls so allow long\r\n// function call chains.\r\n/* eslint-disable newline-per-chained-call */\r\n\r\n/**\r\n *\r\n */\r\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     * Creates new <tt>JingleConnectionPlugin</tt>\r\n     * @param {XMPP} xmpp\r\n     * @param {EventEmitter} eventEmitter\r\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\r\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\r\n     */\r\n    constructor(xmpp, eventEmitter, iceConfig) {\r\n        super();\r\n        this.xmpp = xmpp;\r\n        this.eventEmitter = eventEmitter;\r\n        this.sessions = {};\r\n        this.jvbIceConfig = iceConfig.jvb;\r\n        this.p2pIceConfig = iceConfig.p2p;\r\n        this.mediaConstraints = {\r\n            offerToReceiveAudio: true,\r\n            offerToReceiveVideo: true\r\n        };\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        this.connection.addHandler(this.onJingle.bind(this),\r\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param iq\r\n     */\r\n    onJingle(iq) {\r\n        const sid = $(iq).find('jingle').attr('sid');\r\n        const action = $(iq).find('jingle').attr('action');\r\n        const fromJid = iq.getAttribute('from');\r\n\r\n        // send ack first\r\n        const ack = $iq({ type: 'result',\r\n            to: fromJid,\r\n            id: iq.getAttribute('id')\r\n        });\r\n\r\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\r\n        let sess = this.sessions[sid];\r\n\r\n        if (action !== 'session-initiate') {\r\n            if (!sess) {\r\n                ack.attrs({ type: 'error' });\r\n                ack.c('error', { type: 'cancel' })\r\n                    .c('item-not-found', {\r\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                    })\r\n                    .up()\r\n                    .c('unknown-session', {\r\n                        xmlns: 'urn:xmpp:jingle:errors:1'\r\n                    });\r\n                logger.warn('invalid session id', iq);\r\n                this.connection.send(ack);\r\n\r\n                return true;\r\n            }\r\n\r\n            // local jid is not checked\r\n            if (fromJid !== sess.remoteJid) {\r\n                logger.warn(\r\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\r\n                ack.attrs({ type: 'error' });\r\n                ack.c('error', { type: 'cancel' })\r\n                    .c('item-not-found', {\r\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                    })\r\n                    .up()\r\n                    .c('unknown-session', {\r\n                        xmlns: 'urn:xmpp:jingle:errors:1'\r\n                    });\r\n                this.connection.send(ack);\r\n\r\n                return true;\r\n            }\r\n        } else if (sess !== undefined) {\r\n            // Existing session with same session id. This might be out-of-order\r\n            // if the sess.remoteJid is the same as from.\r\n            ack.attrs({ type: 'error' });\r\n            ack.c('error', { type: 'cancel' })\r\n                .c('service-unavailable', {\r\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                })\r\n                .up();\r\n            logger.warn('duplicate session id', sid, iq);\r\n            this.connection.send(ack);\r\n\r\n            return true;\r\n        }\r\n        const now = window.performance.now();\r\n\r\n        // FIXME that should work most of the time, but we'd have to\r\n        // think how secure it is to assume that user with \"focus\"\r\n        // nickname is Jicofo.\r\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\r\n\r\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\r\n\r\n        switch (action) {\r\n        case 'session-initiate': {\r\n            logger.log('(TIME) received session-initiate:\\t', now);\r\n            const startMuted = $(iq).find('jingle>startmuted');\r\n\r\n            if (startMuted && startMuted.length > 0) {\r\n                const audioMuted = startMuted.attr('audio');\r\n                const videoMuted = startMuted.attr('video');\r\n\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\r\n                    audioMuted === 'true',\r\n                    videoMuted === 'true');\r\n            }\r\n\r\n            logger.info(\r\n                `Marking session from ${fromJid\r\n                } as ${isP2P ? '' : '*not*'} P2P`);\r\n\r\n            const iceConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\r\n\r\n            sess\r\n                = new JingleSessionPC(\r\n                    $(iq).find('jingle').attr('sid'),\r\n                    $(iq).attr('to'),\r\n                    fromJid,\r\n                    this.connection,\r\n                    this.mediaConstraints,\r\n\r\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\r\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\r\n                    JSON.parse(JSON.stringify(iceConfig)),\r\n                    isP2P,\r\n                    /* initiator */ false);\r\n\r\n            this.sessions[sess.sid] = sess;\r\n\r\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\r\n                sess, $(iq).find('>jingle'), now);\r\n            break;\r\n        }\r\n        case 'session-accept': {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'content-modify': {\r\n            sess.modifyContents($(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'transport-info': {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'session-terminate': {\r\n            logger.log('terminating...', sess.sid);\r\n            let reasonCondition = null;\r\n            let reasonText = null;\r\n\r\n            if ($(iq).find('>jingle>reason').length) {\r\n                reasonCondition\r\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\r\n                reasonText = $(iq).find('>jingle>reason>text').text();\r\n            }\r\n            this.terminate(sess.sid, reasonCondition, reasonText);\r\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\r\n                sess, reasonCondition, reasonText);\r\n            break;\r\n        }\r\n        case 'transport-replace':\r\n            logger.info('(TIME) Start transport replace:\\t', now);\r\n            Statistics.sendAnalytics(createJingleEvent(\r\n                ACTION_JINGLE_TR_RECEIVED,\r\n                {\r\n                    p2p: isP2P,\r\n                    value: now\r\n                }));\r\n\r\n            sess.replaceTransport($(iq).find('>jingle'), () => {\r\n                const successTime = window.performance.now();\r\n\r\n                logger.info('(TIME) Transport replace success:\\t', successTime);\r\n                Statistics.sendAnalytics(createJingleEvent(\r\n                    ACTION_JINGLE_TR_SUCCESS,\r\n                    {\r\n                        p2p: isP2P,\r\n                        value: successTime\r\n                    }));\r\n            }, error => {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error('Transport replace failed', error);\r\n                sess.sendTransportReject();\r\n            });\r\n            break;\r\n        case 'addsource': // FIXME: proprietary, un-jingleish\r\n        case 'source-add': // FIXME: proprietary\r\n            sess.addRemoteStream($(iq).find('>jingle>content'));\r\n            break;\r\n        case 'removesource': // FIXME: proprietary, un-jingleish\r\n        case 'source-remove': // FIXME: proprietary\r\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\r\n            break;\r\n        default:\r\n            logger.warn('jingle action not implemented', action);\r\n            ack.attrs({ type: 'error' });\r\n            ack.c('error', { type: 'cancel' })\r\n                .c('bad-request',\r\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\r\n                .up();\r\n            break;\r\n        }\r\n        this.connection.send(ack);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\r\n     * connection, configured as 'initiator'.\r\n     * @param {string} me our JID\r\n     * @param {string} peer remote participant's JID\r\n     * @return {JingleSessionPC}\r\n     */\r\n    newP2PJingleSession(me, peer) {\r\n        const sess\r\n            = new JingleSessionPC(\r\n                RandomUtil.randomHexString(12),\r\n                me,\r\n                peer,\r\n                this.connection,\r\n                this.mediaConstraints,\r\n                this.p2pIceConfig,\r\n                /* P2P */ true,\r\n                /* initiator */ true);\r\n\r\n        this.sessions[sess.sid] = sess;\r\n\r\n        return sess;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param sid\r\n     * @param reasonCondition\r\n     * @param reasonText\r\n     */\r\n    terminate(sid, reasonCondition, reasonText) {\r\n        if (this.sessions.hasOwnProperty(sid)) {\r\n            if (this.sessions[sid].state !== 'ended') {\r\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\r\n            }\r\n            delete this.sessions[sid];\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getStunAndTurnCredentials() {\r\n        // get stun and turn configuration from server via xep-0215\r\n        // uses time-limited credentials as described in\r\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\r\n        //\r\n        // See https://modules.prosody.im/mod_turncredentials.html\r\n        // for a prosody module which implements this.\r\n        //\r\n        // Currently, this doesn't work with updateIce and therefore credentials\r\n        // with a long validity have to be fetched before creating the\r\n        // peerconnection.\r\n        // TODO: implement refresh via updateIce as described in\r\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\r\n        this.connection.sendIQ(\r\n            $iq({ type: 'get',\r\n                to: this.connection.domain })\r\n                .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\r\n            res => {\r\n                const iceservers = [];\r\n\r\n                $(res).find('>services>service').each((idx, el) => {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    el = $(el);\r\n                    const dict = {};\r\n                    const type = el.attr('type');\r\n\r\n                    switch (type) {\r\n                    case 'stun':\r\n                        dict.urls = `stun:${el.attr('host')}`;\r\n                        if (el.attr('port')) {\r\n                            dict.urls += `:${el.attr('port')}`;\r\n                        }\r\n                        iceservers.push(dict);\r\n                        break;\r\n                    case 'turn':\r\n                    case 'turns': {\r\n                        dict.urls = `${type}:`;\r\n                        const username = el.attr('username');\r\n\r\n                        // https://code.google.com/p/webrtc/issues/detail\r\n                        // ?id=1508\r\n\r\n                        if (username) {\r\n                            const match\r\n                                = navigator.userAgent.match(\r\n                                    /Chrom(e|ium)\\/([0-9]+)\\./);\r\n\r\n                            if (match && parseInt(match[2], 10) < 28) {\r\n                                dict.urls += `${username}@`;\r\n                            } else {\r\n                                // only works in M28\r\n                                dict.username = username;\r\n                            }\r\n                        }\r\n                        dict.urls += el.attr('host');\r\n                        const port = el.attr('port');\r\n\r\n                        if (port) {\r\n                            dict.urls += `:${el.attr('port')}`;\r\n                        }\r\n                        const transport = el.attr('transport');\r\n\r\n                        if (transport && transport !== 'udp') {\r\n                            dict.urls += `?transport=${transport}`;\r\n                        }\r\n\r\n                        dict.credential = el.attr('password')\r\n                                || dict.credential;\r\n                        iceservers.push(dict);\r\n                        break;\r\n                    }\r\n                    }\r\n                });\r\n\r\n                const options = this.xmpp.options;\r\n\r\n                // Shuffle ICEServers for loadbalancing\r\n                for (let i = iceservers.length - 1; i > 0; i--) {\r\n                    const j = Math.floor(Math.random() * (i + 1));\r\n                    const temp = iceservers[i];\r\n\r\n                    iceservers[i] = iceservers[j];\r\n                    iceservers[j] = temp;\r\n                }\r\n\r\n                let filter;\r\n\r\n                if (options.useTurnUdp) {\r\n                    filter = s => s.urls.startsWith('turn');\r\n                } else {\r\n                    // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\r\n                    filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\r\n                }\r\n\r\n                this.jvbIceConfig.iceServers = iceservers.filter(filter);\r\n                this.p2pIceConfig.iceServers = iceservers;\r\n            }, err => {\r\n                logger.warn('getting turn credentials failed', err);\r\n                logger.warn('is mod_turncredentials or similar installed?');\r\n            });\r\n\r\n        // implement push?\r\n    }\r\n\r\n    /**\r\n     * Returns the data saved in 'updateLog' in a format to be logged.\r\n     */\r\n    getLog() {\r\n        const data = {};\r\n\r\n        Object.keys(this.sessions).forEach(sid => {\r\n            const session = this.sessions[sid];\r\n            const pc = session.peerconnection;\r\n\r\n            if (pc && pc.updateLog) {\r\n                // FIXME: should probably be a .dump call\r\n                data[`jingle_${sid}`] = {\r\n                    updateLog: pc.updateLog,\r\n                    stats: pc.stats,\r\n                    url: window.location.href\r\n                };\r\n            }\r\n        });\r\n\r\n        return data;\r\n    }\r\n}\r\n\r\n/* eslint-enable newline-per-chained-call */\r\n","import async from 'async';\r\n\r\n/**\r\n * A queue for async task execution.\r\n */\r\nexport default class AsyncQueue {\r\n    /**\r\n     * Creates new instance.\r\n     */\r\n    constructor() {\r\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\r\n        this._stopped = false;\r\n    }\r\n\r\n    /**\r\n     * Removes any pending tasks from the queue.\r\n     */\r\n    clear() {\r\n        this._queue.kill();\r\n    }\r\n\r\n    /**\r\n     * Internal task processing implementation which makes things work.\r\n     */\r\n    _processQueueTasks(task, finishedCallback) {\r\n        task(finishedCallback);\r\n    }\r\n\r\n    /**\r\n     * The 'task' function will be given a callback it MUST call with either:\r\n     *  1) No arguments if it was successful or\r\n     *  2) An error argument if there was an error\r\n     * If the task wants to process the success or failure of the task, it\r\n     * should pass the {@code callback} to the push function, e.g.:\r\n     * queue.push(task, (err) => {\r\n     *     if (err) {\r\n     *         // error handling\r\n     *     } else {\r\n     *         // success handling\r\n     *     }\r\n     * });\r\n     *\r\n     * @param {function} task - The task to be executed. See the description above.\r\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\r\n     */\r\n    push(task, callback) {\r\n        if (this._stopped) {\r\n            callback && callback(new Error('The queue has been stopped'));\r\n\r\n            return;\r\n        }\r\n        this._queue.push(task, callback);\r\n    }\r\n\r\n    /**\r\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\r\n     * after the queue has been shutdown then the callback will be called with an error.\r\n     */\r\n    shutdown() {\r\n        this._stopped = true;\r\n    }\r\n}\r\n","/*!\r\n * async\r\n * https://github.com/caolan/async\r\n *\r\n * Copyright 2010-2014 Caolan McMahon\r\n * Released under the MIT license\r\n */\r\n/*jshint onevar: false, indent:4 */\r\n/*global setImmediate: false, setTimeout: false, console: false */\r\n(function () {\r\n\r\n    var async = {};\r\n\r\n    // global on the server, window in the browser\r\n    var root, previous_async;\r\n\r\n    root = this;\r\n    if (root != null) {\r\n      previous_async = root.async;\r\n    }\r\n\r\n    async.noConflict = function () {\r\n        root.async = previous_async;\r\n        return async;\r\n    };\r\n\r\n    function only_once(fn) {\r\n        var called = false;\r\n        return function() {\r\n            if (called) throw new Error(\"Callback was already called.\");\r\n            called = true;\r\n            fn.apply(root, arguments);\r\n        }\r\n    }\r\n\r\n    //// cross-browser compatiblity functions ////\r\n\r\n    var _toString = Object.prototype.toString;\r\n\r\n    var _isArray = Array.isArray || function (obj) {\r\n        return _toString.call(obj) === '[object Array]';\r\n    };\r\n\r\n    var _each = function (arr, iterator) {\r\n        if (arr.forEach) {\r\n            return arr.forEach(iterator);\r\n        }\r\n        for (var i = 0; i < arr.length; i += 1) {\r\n            iterator(arr[i], i, arr);\r\n        }\r\n    };\r\n\r\n    var _map = function (arr, iterator) {\r\n        if (arr.map) {\r\n            return arr.map(iterator);\r\n        }\r\n        var results = [];\r\n        _each(arr, function (x, i, a) {\r\n            results.push(iterator(x, i, a));\r\n        });\r\n        return results;\r\n    };\r\n\r\n    var _reduce = function (arr, iterator, memo) {\r\n        if (arr.reduce) {\r\n            return arr.reduce(iterator, memo);\r\n        }\r\n        _each(arr, function (x, i, a) {\r\n            memo = iterator(memo, x, i, a);\r\n        });\r\n        return memo;\r\n    };\r\n\r\n    var _keys = function (obj) {\r\n        if (Object.keys) {\r\n            return Object.keys(obj);\r\n        }\r\n        var keys = [];\r\n        for (var k in obj) {\r\n            if (obj.hasOwnProperty(k)) {\r\n                keys.push(k);\r\n            }\r\n        }\r\n        return keys;\r\n    };\r\n\r\n    //// exported async module functions ////\r\n\r\n    //// nextTick implementation with browser-compatible fallback ////\r\n    if (typeof process === 'undefined' || !(process.nextTick)) {\r\n        if (typeof setImmediate === 'function') {\r\n            async.nextTick = function (fn) {\r\n                // not a direct alias for IE10 compatibility\r\n                setImmediate(fn);\r\n            };\r\n            async.setImmediate = async.nextTick;\r\n        }\r\n        else {\r\n            async.nextTick = function (fn) {\r\n                setTimeout(fn, 0);\r\n            };\r\n            async.setImmediate = async.nextTick;\r\n        }\r\n    }\r\n    else {\r\n        async.nextTick = process.nextTick;\r\n        if (typeof setImmediate !== 'undefined') {\r\n            async.setImmediate = function (fn) {\r\n              // not a direct alias for IE10 compatibility\r\n              setImmediate(fn);\r\n            };\r\n        }\r\n        else {\r\n            async.setImmediate = async.nextTick;\r\n        }\r\n    }\r\n\r\n    async.each = function (arr, iterator, callback) {\r\n        callback = callback || function () {};\r\n        if (!arr.length) {\r\n            return callback();\r\n        }\r\n        var completed = 0;\r\n        _each(arr, function (x) {\r\n            iterator(x, only_once(done) );\r\n        });\r\n        function done(err) {\r\n          if (err) {\r\n              callback(err);\r\n              callback = function () {};\r\n          }\r\n          else {\r\n              completed += 1;\r\n              if (completed >= arr.length) {\r\n                  callback();\r\n              }\r\n          }\r\n        }\r\n    };\r\n    async.forEach = async.each;\r\n\r\n    async.eachSeries = function (arr, iterator, callback) {\r\n        callback = callback || function () {};\r\n        if (!arr.length) {\r\n            return callback();\r\n        }\r\n        var completed = 0;\r\n        var iterate = function () {\r\n            iterator(arr[completed], function (err) {\r\n                if (err) {\r\n                    callback(err);\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    completed += 1;\r\n                    if (completed >= arr.length) {\r\n                        callback();\r\n                    }\r\n                    else {\r\n                        iterate();\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        iterate();\r\n    };\r\n    async.forEachSeries = async.eachSeries;\r\n\r\n    async.eachLimit = function (arr, limit, iterator, callback) {\r\n        var fn = _eachLimit(limit);\r\n        fn.apply(null, [arr, iterator, callback]);\r\n    };\r\n    async.forEachLimit = async.eachLimit;\r\n\r\n    var _eachLimit = function (limit) {\r\n\r\n        return function (arr, iterator, callback) {\r\n            callback = callback || function () {};\r\n            if (!arr.length || limit <= 0) {\r\n                return callback();\r\n            }\r\n            var completed = 0;\r\n            var started = 0;\r\n            var running = 0;\r\n\r\n            (function replenish () {\r\n                if (completed >= arr.length) {\r\n                    return callback();\r\n                }\r\n\r\n                while (running < limit && started < arr.length) {\r\n                    started += 1;\r\n                    running += 1;\r\n                    iterator(arr[started - 1], function (err) {\r\n                        if (err) {\r\n                            callback(err);\r\n                            callback = function () {};\r\n                        }\r\n                        else {\r\n                            completed += 1;\r\n                            running -= 1;\r\n                            if (completed >= arr.length) {\r\n                                callback();\r\n                            }\r\n                            else {\r\n                                replenish();\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            })();\r\n        };\r\n    };\r\n\r\n\r\n    var doParallel = function (fn) {\r\n        return function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(null, [async.each].concat(args));\r\n        };\r\n    };\r\n    var doParallelLimit = function(limit, fn) {\r\n        return function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\r\n        };\r\n    };\r\n    var doSeries = function (fn) {\r\n        return function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(null, [async.eachSeries].concat(args));\r\n        };\r\n    };\r\n\r\n\r\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\r\n        arr = _map(arr, function (x, i) {\r\n            return {index: i, value: x};\r\n        });\r\n        if (!callback) {\r\n            eachfn(arr, function (x, callback) {\r\n                iterator(x.value, function (err) {\r\n                    callback(err);\r\n                });\r\n            });\r\n        } else {\r\n            var results = [];\r\n            eachfn(arr, function (x, callback) {\r\n                iterator(x.value, function (err, v) {\r\n                    results[x.index] = v;\r\n                    callback(err);\r\n                });\r\n            }, function (err) {\r\n                callback(err, results);\r\n            });\r\n        }\r\n    };\r\n    async.map = doParallel(_asyncMap);\r\n    async.mapSeries = doSeries(_asyncMap);\r\n    async.mapLimit = function (arr, limit, iterator, callback) {\r\n        return _mapLimit(limit)(arr, iterator, callback);\r\n    };\r\n\r\n    var _mapLimit = function(limit) {\r\n        return doParallelLimit(limit, _asyncMap);\r\n    };\r\n\r\n    // reduce only has a series version, as doing reduce in parallel won't\r\n    // work in many situations.\r\n    async.reduce = function (arr, memo, iterator, callback) {\r\n        async.eachSeries(arr, function (x, callback) {\r\n            iterator(memo, x, function (err, v) {\r\n                memo = v;\r\n                callback(err);\r\n            });\r\n        }, function (err) {\r\n            callback(err, memo);\r\n        });\r\n    };\r\n    // inject alias\r\n    async.inject = async.reduce;\r\n    // foldl alias\r\n    async.foldl = async.reduce;\r\n\r\n    async.reduceRight = function (arr, memo, iterator, callback) {\r\n        var reversed = _map(arr, function (x) {\r\n            return x;\r\n        }).reverse();\r\n        async.reduce(reversed, memo, iterator, callback);\r\n    };\r\n    // foldr alias\r\n    async.foldr = async.reduceRight;\r\n\r\n    var _filter = function (eachfn, arr, iterator, callback) {\r\n        var results = [];\r\n        arr = _map(arr, function (x, i) {\r\n            return {index: i, value: x};\r\n        });\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x.value, function (v) {\r\n                if (v) {\r\n                    results.push(x);\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            callback(_map(results.sort(function (a, b) {\r\n                return a.index - b.index;\r\n            }), function (x) {\r\n                return x.value;\r\n            }));\r\n        });\r\n    };\r\n    async.filter = doParallel(_filter);\r\n    async.filterSeries = doSeries(_filter);\r\n    // select alias\r\n    async.select = async.filter;\r\n    async.selectSeries = async.filterSeries;\r\n\r\n    var _reject = function (eachfn, arr, iterator, callback) {\r\n        var results = [];\r\n        arr = _map(arr, function (x, i) {\r\n            return {index: i, value: x};\r\n        });\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x.value, function (v) {\r\n                if (!v) {\r\n                    results.push(x);\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            callback(_map(results.sort(function (a, b) {\r\n                return a.index - b.index;\r\n            }), function (x) {\r\n                return x.value;\r\n            }));\r\n        });\r\n    };\r\n    async.reject = doParallel(_reject);\r\n    async.rejectSeries = doSeries(_reject);\r\n\r\n    var _detect = function (eachfn, arr, iterator, main_callback) {\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x, function (result) {\r\n                if (result) {\r\n                    main_callback(x);\r\n                    main_callback = function () {};\r\n                }\r\n                else {\r\n                    callback();\r\n                }\r\n            });\r\n        }, function (err) {\r\n            main_callback();\r\n        });\r\n    };\r\n    async.detect = doParallel(_detect);\r\n    async.detectSeries = doSeries(_detect);\r\n\r\n    async.some = function (arr, iterator, main_callback) {\r\n        async.each(arr, function (x, callback) {\r\n            iterator(x, function (v) {\r\n                if (v) {\r\n                    main_callback(true);\r\n                    main_callback = function () {};\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            main_callback(false);\r\n        });\r\n    };\r\n    // any alias\r\n    async.any = async.some;\r\n\r\n    async.every = function (arr, iterator, main_callback) {\r\n        async.each(arr, function (x, callback) {\r\n            iterator(x, function (v) {\r\n                if (!v) {\r\n                    main_callback(false);\r\n                    main_callback = function () {};\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            main_callback(true);\r\n        });\r\n    };\r\n    // all alias\r\n    async.all = async.every;\r\n\r\n    async.sortBy = function (arr, iterator, callback) {\r\n        async.map(arr, function (x, callback) {\r\n            iterator(x, function (err, criteria) {\r\n                if (err) {\r\n                    callback(err);\r\n                }\r\n                else {\r\n                    callback(null, {value: x, criteria: criteria});\r\n                }\r\n            });\r\n        }, function (err, results) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            else {\r\n                var fn = function (left, right) {\r\n                    var a = left.criteria, b = right.criteria;\r\n                    return a < b ? -1 : a > b ? 1 : 0;\r\n                };\r\n                callback(null, _map(results.sort(fn), function (x) {\r\n                    return x.value;\r\n                }));\r\n            }\r\n        });\r\n    };\r\n\r\n    async.auto = function (tasks, callback) {\r\n        callback = callback || function () {};\r\n        var keys = _keys(tasks);\r\n        var remainingTasks = keys.length\r\n        if (!remainingTasks) {\r\n            return callback();\r\n        }\r\n\r\n        var results = {};\r\n\r\n        var listeners = [];\r\n        var addListener = function (fn) {\r\n            listeners.unshift(fn);\r\n        };\r\n        var removeListener = function (fn) {\r\n            for (var i = 0; i < listeners.length; i += 1) {\r\n                if (listeners[i] === fn) {\r\n                    listeners.splice(i, 1);\r\n                    return;\r\n                }\r\n            }\r\n        };\r\n        var taskComplete = function () {\r\n            remainingTasks--\r\n            _each(listeners.slice(0), function (fn) {\r\n                fn();\r\n            });\r\n        };\r\n\r\n        addListener(function () {\r\n            if (!remainingTasks) {\r\n                var theCallback = callback;\r\n                // prevent final callback from calling itself if it errors\r\n                callback = function () {};\r\n\r\n                theCallback(null, results);\r\n            }\r\n        });\r\n\r\n        _each(keys, function (k) {\r\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\r\n            var taskCallback = function (err) {\r\n                var args = Array.prototype.slice.call(arguments, 1);\r\n                if (args.length <= 1) {\r\n                    args = args[0];\r\n                }\r\n                if (err) {\r\n                    var safeResults = {};\r\n                    _each(_keys(results), function(rkey) {\r\n                        safeResults[rkey] = results[rkey];\r\n                    });\r\n                    safeResults[k] = args;\r\n                    callback(err, safeResults);\r\n                    // stop subsequent errors hitting callback multiple times\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    results[k] = args;\r\n                    async.setImmediate(taskComplete);\r\n                }\r\n            };\r\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\r\n            var ready = function () {\r\n                return _reduce(requires, function (a, x) {\r\n                    return (a && results.hasOwnProperty(x));\r\n                }, true) && !results.hasOwnProperty(k);\r\n            };\r\n            if (ready()) {\r\n                task[task.length - 1](taskCallback, results);\r\n            }\r\n            else {\r\n                var listener = function () {\r\n                    if (ready()) {\r\n                        removeListener(listener);\r\n                        task[task.length - 1](taskCallback, results);\r\n                    }\r\n                };\r\n                addListener(listener);\r\n            }\r\n        });\r\n    };\r\n\r\n    async.retry = function(times, task, callback) {\r\n        var DEFAULT_TIMES = 5;\r\n        var attempts = [];\r\n        // Use defaults if times not passed\r\n        if (typeof times === 'function') {\r\n            callback = task;\r\n            task = times;\r\n            times = DEFAULT_TIMES;\r\n        }\r\n        // Make sure times is a number\r\n        times = parseInt(times, 10) || DEFAULT_TIMES;\r\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\r\n            var retryAttempt = function(task, finalAttempt) {\r\n                return function(seriesCallback) {\r\n                    task(function(err, result){\r\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\r\n                    }, wrappedResults);\r\n                };\r\n            };\r\n            while (times) {\r\n                attempts.push(retryAttempt(task, !(times-=1)));\r\n            }\r\n            async.series(attempts, function(done, data){\r\n                data = data[data.length - 1];\r\n                (wrappedCallback || callback)(data.err, data.result);\r\n            });\r\n        }\r\n        // If a callback is passed, run this as a controll flow\r\n        return callback ? wrappedTask() : wrappedTask\r\n    };\r\n\r\n    async.waterfall = function (tasks, callback) {\r\n        callback = callback || function () {};\r\n        if (!_isArray(tasks)) {\r\n          var err = new Error('First argument to waterfall must be an array of functions');\r\n          return callback(err);\r\n        }\r\n        if (!tasks.length) {\r\n            return callback();\r\n        }\r\n        var wrapIterator = function (iterator) {\r\n            return function (err) {\r\n                if (err) {\r\n                    callback.apply(null, arguments);\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    var args = Array.prototype.slice.call(arguments, 1);\r\n                    var next = iterator.next();\r\n                    if (next) {\r\n                        args.push(wrapIterator(next));\r\n                    }\r\n                    else {\r\n                        args.push(callback);\r\n                    }\r\n                    async.setImmediate(function () {\r\n                        iterator.apply(null, args);\r\n                    });\r\n                }\r\n            };\r\n        };\r\n        wrapIterator(async.iterator(tasks))();\r\n    };\r\n\r\n    var _parallel = function(eachfn, tasks, callback) {\r\n        callback = callback || function () {};\r\n        if (_isArray(tasks)) {\r\n            eachfn.map(tasks, function (fn, callback) {\r\n                if (fn) {\r\n                    fn(function (err) {\r\n                        var args = Array.prototype.slice.call(arguments, 1);\r\n                        if (args.length <= 1) {\r\n                            args = args[0];\r\n                        }\r\n                        callback.call(null, err, args);\r\n                    });\r\n                }\r\n            }, callback);\r\n        }\r\n        else {\r\n            var results = {};\r\n            eachfn.each(_keys(tasks), function (k, callback) {\r\n                tasks[k](function (err) {\r\n                    var args = Array.prototype.slice.call(arguments, 1);\r\n                    if (args.length <= 1) {\r\n                        args = args[0];\r\n                    }\r\n                    results[k] = args;\r\n                    callback(err);\r\n                });\r\n            }, function (err) {\r\n                callback(err, results);\r\n            });\r\n        }\r\n    };\r\n\r\n    async.parallel = function (tasks, callback) {\r\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\r\n    };\r\n\r\n    async.parallelLimit = function(tasks, limit, callback) {\r\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\r\n    };\r\n\r\n    async.series = function (tasks, callback) {\r\n        callback = callback || function () {};\r\n        if (_isArray(tasks)) {\r\n            async.mapSeries(tasks, function (fn, callback) {\r\n                if (fn) {\r\n                    fn(function (err) {\r\n                        var args = Array.prototype.slice.call(arguments, 1);\r\n                        if (args.length <= 1) {\r\n                            args = args[0];\r\n                        }\r\n                        callback.call(null, err, args);\r\n                    });\r\n                }\r\n            }, callback);\r\n        }\r\n        else {\r\n            var results = {};\r\n            async.eachSeries(_keys(tasks), function (k, callback) {\r\n                tasks[k](function (err) {\r\n                    var args = Array.prototype.slice.call(arguments, 1);\r\n                    if (args.length <= 1) {\r\n                        args = args[0];\r\n                    }\r\n                    results[k] = args;\r\n                    callback(err);\r\n                });\r\n            }, function (err) {\r\n                callback(err, results);\r\n            });\r\n        }\r\n    };\r\n\r\n    async.iterator = function (tasks) {\r\n        var makeCallback = function (index) {\r\n            var fn = function () {\r\n                if (tasks.length) {\r\n                    tasks[index].apply(null, arguments);\r\n                }\r\n                return fn.next();\r\n            };\r\n            fn.next = function () {\r\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\r\n            };\r\n            return fn;\r\n        };\r\n        return makeCallback(0);\r\n    };\r\n\r\n    async.apply = function (fn) {\r\n        var args = Array.prototype.slice.call(arguments, 1);\r\n        return function () {\r\n            return fn.apply(\r\n                null, args.concat(Array.prototype.slice.call(arguments))\r\n            );\r\n        };\r\n    };\r\n\r\n    var _concat = function (eachfn, arr, fn, callback) {\r\n        var r = [];\r\n        eachfn(arr, function (x, cb) {\r\n            fn(x, function (err, y) {\r\n                r = r.concat(y || []);\r\n                cb(err);\r\n            });\r\n        }, function (err) {\r\n            callback(err, r);\r\n        });\r\n    };\r\n    async.concat = doParallel(_concat);\r\n    async.concatSeries = doSeries(_concat);\r\n\r\n    async.whilst = function (test, iterator, callback) {\r\n        if (test()) {\r\n            iterator(function (err) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                async.whilst(test, iterator, callback);\r\n            });\r\n        }\r\n        else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    async.doWhilst = function (iterator, test, callback) {\r\n        iterator(function (err) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            var args = Array.prototype.slice.call(arguments, 1);\r\n            if (test.apply(null, args)) {\r\n                async.doWhilst(iterator, test, callback);\r\n            }\r\n            else {\r\n                callback();\r\n            }\r\n        });\r\n    };\r\n\r\n    async.until = function (test, iterator, callback) {\r\n        if (!test()) {\r\n            iterator(function (err) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                async.until(test, iterator, callback);\r\n            });\r\n        }\r\n        else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    async.doUntil = function (iterator, test, callback) {\r\n        iterator(function (err) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            var args = Array.prototype.slice.call(arguments, 1);\r\n            if (!test.apply(null, args)) {\r\n                async.doUntil(iterator, test, callback);\r\n            }\r\n            else {\r\n                callback();\r\n            }\r\n        });\r\n    };\r\n\r\n    async.queue = function (worker, concurrency) {\r\n        if (concurrency === undefined) {\r\n            concurrency = 1;\r\n        }\r\n        function _insert(q, data, pos, callback) {\r\n          if (!q.started){\r\n            q.started = true;\r\n          }\r\n          if (!_isArray(data)) {\r\n              data = [data];\r\n          }\r\n          if(data.length == 0) {\r\n             // call drain immediately if there are no tasks\r\n             return async.setImmediate(function() {\r\n                 if (q.drain) {\r\n                     q.drain();\r\n                 }\r\n             });\r\n          }\r\n          _each(data, function(task) {\r\n              var item = {\r\n                  data: task,\r\n                  callback: typeof callback === 'function' ? callback : null\r\n              };\r\n\r\n              if (pos) {\r\n                q.tasks.unshift(item);\r\n              } else {\r\n                q.tasks.push(item);\r\n              }\r\n\r\n              if (q.saturated && q.tasks.length === q.concurrency) {\r\n                  q.saturated();\r\n              }\r\n              async.setImmediate(q.process);\r\n          });\r\n        }\r\n\r\n        var workers = 0;\r\n        var q = {\r\n            tasks: [],\r\n            concurrency: concurrency,\r\n            saturated: null,\r\n            empty: null,\r\n            drain: null,\r\n            started: false,\r\n            paused: false,\r\n            push: function (data, callback) {\r\n              _insert(q, data, false, callback);\r\n            },\r\n            kill: function () {\r\n              q.drain = null;\r\n              q.tasks = [];\r\n            },\r\n            unshift: function (data, callback) {\r\n              _insert(q, data, true, callback);\r\n            },\r\n            process: function () {\r\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\r\n                    var task = q.tasks.shift();\r\n                    if (q.empty && q.tasks.length === 0) {\r\n                        q.empty();\r\n                    }\r\n                    workers += 1;\r\n                    var next = function () {\r\n                        workers -= 1;\r\n                        if (task.callback) {\r\n                            task.callback.apply(task, arguments);\r\n                        }\r\n                        if (q.drain && q.tasks.length + workers === 0) {\r\n                            q.drain();\r\n                        }\r\n                        q.process();\r\n                    };\r\n                    var cb = only_once(next);\r\n                    worker(task.data, cb);\r\n                }\r\n            },\r\n            length: function () {\r\n                return q.tasks.length;\r\n            },\r\n            running: function () {\r\n                return workers;\r\n            },\r\n            idle: function() {\r\n                return q.tasks.length + workers === 0;\r\n            },\r\n            pause: function () {\r\n                if (q.paused === true) { return; }\r\n                q.paused = true;\r\n                q.process();\r\n            },\r\n            resume: function () {\r\n                if (q.paused === false) { return; }\r\n                q.paused = false;\r\n                q.process();\r\n            }\r\n        };\r\n        return q;\r\n    };\r\n    \r\n    async.priorityQueue = function (worker, concurrency) {\r\n        \r\n        function _compareTasks(a, b){\r\n          return a.priority - b.priority;\r\n        };\r\n        \r\n        function _binarySearch(sequence, item, compare) {\r\n          var beg = -1,\r\n              end = sequence.length - 1;\r\n          while (beg < end) {\r\n            var mid = beg + ((end - beg + 1) >>> 1);\r\n            if (compare(item, sequence[mid]) >= 0) {\r\n              beg = mid;\r\n            } else {\r\n              end = mid - 1;\r\n            }\r\n          }\r\n          return beg;\r\n        }\r\n        \r\n        function _insert(q, data, priority, callback) {\r\n          if (!q.started){\r\n            q.started = true;\r\n          }\r\n          if (!_isArray(data)) {\r\n              data = [data];\r\n          }\r\n          if(data.length == 0) {\r\n             // call drain immediately if there are no tasks\r\n             return async.setImmediate(function() {\r\n                 if (q.drain) {\r\n                     q.drain();\r\n                 }\r\n             });\r\n          }\r\n          _each(data, function(task) {\r\n              var item = {\r\n                  data: task,\r\n                  priority: priority,\r\n                  callback: typeof callback === 'function' ? callback : null\r\n              };\r\n              \r\n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\r\n\r\n              if (q.saturated && q.tasks.length === q.concurrency) {\r\n                  q.saturated();\r\n              }\r\n              async.setImmediate(q.process);\r\n          });\r\n        }\r\n        \r\n        // Start with a normal queue\r\n        var q = async.queue(worker, concurrency);\r\n        \r\n        // Override push to accept second parameter representing priority\r\n        q.push = function (data, priority, callback) {\r\n          _insert(q, data, priority, callback);\r\n        };\r\n        \r\n        // Remove unshift function\r\n        delete q.unshift;\r\n\r\n        return q;\r\n    };\r\n\r\n    async.cargo = function (worker, payload) {\r\n        var working     = false,\r\n            tasks       = [];\r\n\r\n        var cargo = {\r\n            tasks: tasks,\r\n            payload: payload,\r\n            saturated: null,\r\n            empty: null,\r\n            drain: null,\r\n            drained: true,\r\n            push: function (data, callback) {\r\n                if (!_isArray(data)) {\r\n                    data = [data];\r\n                }\r\n                _each(data, function(task) {\r\n                    tasks.push({\r\n                        data: task,\r\n                        callback: typeof callback === 'function' ? callback : null\r\n                    });\r\n                    cargo.drained = false;\r\n                    if (cargo.saturated && tasks.length === payload) {\r\n                        cargo.saturated();\r\n                    }\r\n                });\r\n                async.setImmediate(cargo.process);\r\n            },\r\n            process: function process() {\r\n                if (working) return;\r\n                if (tasks.length === 0) {\r\n                    if(cargo.drain && !cargo.drained) cargo.drain();\r\n                    cargo.drained = true;\r\n                    return;\r\n                }\r\n\r\n                var ts = typeof payload === 'number'\r\n                            ? tasks.splice(0, payload)\r\n                            : tasks.splice(0, tasks.length);\r\n\r\n                var ds = _map(ts, function (task) {\r\n                    return task.data;\r\n                });\r\n\r\n                if(cargo.empty) cargo.empty();\r\n                working = true;\r\n                worker(ds, function () {\r\n                    working = false;\r\n\r\n                    var args = arguments;\r\n                    _each(ts, function (data) {\r\n                        if (data.callback) {\r\n                            data.callback.apply(null, args);\r\n                        }\r\n                    });\r\n\r\n                    process();\r\n                });\r\n            },\r\n            length: function () {\r\n                return tasks.length;\r\n            },\r\n            running: function () {\r\n                return working;\r\n            }\r\n        };\r\n        return cargo;\r\n    };\r\n\r\n    var _console_fn = function (name) {\r\n        return function (fn) {\r\n            var args = Array.prototype.slice.call(arguments, 1);\r\n            fn.apply(null, args.concat([function (err) {\r\n                var args = Array.prototype.slice.call(arguments, 1);\r\n                if (typeof console !== 'undefined') {\r\n                    if (err) {\r\n                        if (console.error) {\r\n                            console.error(err);\r\n                        }\r\n                    }\r\n                    else if (console[name]) {\r\n                        _each(args, function (x) {\r\n                            console[name](x);\r\n                        });\r\n                    }\r\n                }\r\n            }]));\r\n        };\r\n    };\r\n    async.log = _console_fn('log');\r\n    async.dir = _console_fn('dir');\r\n    /*async.info = _console_fn('info');\r\n    async.warn = _console_fn('warn');\r\n    async.error = _console_fn('error');*/\r\n\r\n    async.memoize = function (fn, hasher) {\r\n        var memo = {};\r\n        var queues = {};\r\n        hasher = hasher || function (x) {\r\n            return x;\r\n        };\r\n        var memoized = function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var callback = args.pop();\r\n            var key = hasher.apply(null, args);\r\n            if (key in memo) {\r\n                async.nextTick(function () {\r\n                    callback.apply(null, memo[key]);\r\n                });\r\n            }\r\n            else if (key in queues) {\r\n                queues[key].push(callback);\r\n            }\r\n            else {\r\n                queues[key] = [callback];\r\n                fn.apply(null, args.concat([function () {\r\n                    memo[key] = arguments;\r\n                    var q = queues[key];\r\n                    delete queues[key];\r\n                    for (var i = 0, l = q.length; i < l; i++) {\r\n                      q[i].apply(null, arguments);\r\n                    }\r\n                }]));\r\n            }\r\n        };\r\n        memoized.memo = memo;\r\n        memoized.unmemoized = fn;\r\n        return memoized;\r\n    };\r\n\r\n    async.unmemoize = function (fn) {\r\n      return function () {\r\n        return (fn.unmemoized || fn).apply(null, arguments);\r\n      };\r\n    };\r\n\r\n    async.times = function (count, iterator, callback) {\r\n        var counter = [];\r\n        for (var i = 0; i < count; i++) {\r\n            counter.push(i);\r\n        }\r\n        return async.map(counter, iterator, callback);\r\n    };\r\n\r\n    async.timesSeries = function (count, iterator, callback) {\r\n        var counter = [];\r\n        for (var i = 0; i < count; i++) {\r\n            counter.push(i);\r\n        }\r\n        return async.mapSeries(counter, iterator, callback);\r\n    };\r\n\r\n    async.seq = function (/* functions... */) {\r\n        var fns = arguments;\r\n        return function () {\r\n            var that = this;\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var callback = args.pop();\r\n            async.reduce(fns, args, function (newargs, fn, cb) {\r\n                fn.apply(that, newargs.concat([function () {\r\n                    var err = arguments[0];\r\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\r\n                    cb(err, nextargs);\r\n                }]))\r\n            },\r\n            function (err, results) {\r\n                callback.apply(that, [err].concat(results));\r\n            });\r\n        };\r\n    };\r\n\r\n    async.compose = function (/* functions... */) {\r\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\r\n    };\r\n\r\n    var _applyEach = function (eachfn, fns /*args...*/) {\r\n        var go = function () {\r\n            var that = this;\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var callback = args.pop();\r\n            return eachfn(fns, function (fn, cb) {\r\n                fn.apply(that, args.concat([cb]));\r\n            },\r\n            callback);\r\n        };\r\n        if (arguments.length > 2) {\r\n            var args = Array.prototype.slice.call(arguments, 2);\r\n            return go.apply(this, args);\r\n        }\r\n        else {\r\n            return go;\r\n        }\r\n    };\r\n    async.applyEach = doParallel(_applyEach);\r\n    async.applyEachSeries = doSeries(_applyEach);\r\n\r\n    async.forever = function (fn, callback) {\r\n        function next(err) {\r\n            if (err) {\r\n                if (callback) {\r\n                    return callback(err);\r\n                }\r\n                throw err;\r\n            }\r\n            fn(next);\r\n        }\r\n        next();\r\n    };\r\n\r\n    // Node.js\r\n    if (typeof module !== 'undefined' && module.exports) {\r\n        module.exports = async;\r\n    }\r\n    // AMD / RequireJS\r\n    else if (typeof define !== 'undefined' && define.amd) {\r\n        define([], function () {\r\n            return async;\r\n        });\r\n    }\r\n    // included directly via <script> tag\r\n    else {\r\n        root.async = async;\r\n    }\r\n\r\n}());\r\n","/**\r\n * Implements a simple hash code for a string (see\r\n * https://en.wikipedia.org/wiki/Java_hashCode()).\r\n *\r\n * @param {string} The string to return a hash of.\r\n * @return {Number} the integer hash code of the string.\r\n */\r\nfunction integerHash(string) {\r\n    if (!string) {\r\n        return 0;\r\n    }\r\n\r\n    let char, hash = 0, i;\r\n\r\n    for (i = 0; i < string.length; i++) {\r\n        char = string.charCodeAt(i);\r\n        hash += char * Math.pow(31, string.length - 1 - i);\r\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\r\n    }\r\n\r\n    return hash;\r\n}\r\n\r\nmodule.exports = { integerHash };\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport * as JingleSessionState from './JingleSessionState';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * JingleSession provides an API to manage a single Jingle session. We will\r\n * have different implementations depending on the underlying interface used\r\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\r\n */\r\nexport default class JingleSession extends Listenable {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>JingleSession</tt>.\r\n     * @param {string} sid the Jingle session identifier\r\n     * @param {string} localJid our JID\r\n     * @param {string} remoteJid the JID of the remote peer\r\n     * @param {XmppConnection} connection the XMPP connection\r\n     * @param {Object} mediaConstraints the media constraints object passed to\r\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\r\n     * @param {Object} iceConfig the ICE servers config object as defined by\r\n     * the WebRTC. Passed to the PeerConnection's constructor.\r\n     * @param {boolean} isInitiator indicates if it will be the side which\r\n     * initiates the session.\r\n     */\r\n    constructor(\r\n            sid,\r\n            localJid,\r\n            remoteJid,\r\n            connection,\r\n            mediaConstraints,\r\n            iceConfig,\r\n            isInitiator) {\r\n        super();\r\n        this.sid = sid;\r\n        this.localJid = localJid;\r\n        this.remoteJid = remoteJid;\r\n        this.connection = connection;\r\n        this.mediaConstraints = mediaConstraints;\r\n        this.iceConfig = iceConfig;\r\n\r\n        /**\r\n         * Indicates whether this instance is an initiator or an answerer of\r\n         * the Jingle session.\r\n         * @type {boolean}\r\n         */\r\n        this.isInitiator = isInitiator;\r\n\r\n        /**\r\n         * Whether to use dripping or not. Dripping is sending trickle\r\n         * candidates not one-by-one.\r\n         */\r\n        this.usedrip = true;\r\n\r\n        /**\r\n         *  When dripping is used, stores ICE candidates which are to be sent.\r\n         */\r\n        this.dripContainer = [];\r\n\r\n        /**\r\n         * The chat room instance associated with the session.\r\n         * @type {ChatRoom}\r\n         */\r\n        this.room = null;\r\n\r\n        /**\r\n         * Jingle session state - uninitialized until {@link initialize} is\r\n         * called @type {JingleSessionState}\r\n         */\r\n        this.state = null;\r\n\r\n        /**\r\n         * The RTC service instance\r\n         * @type {RTC}\r\n         */\r\n        this.rtc = null;\r\n    }\r\n\r\n    /**\r\n     * Returns XMPP address of this session's initiator.\r\n     * @return {string}\r\n     */\r\n    get initiatorJid() {\r\n        return this.isInitiator ? this.localJid : this.remoteJid;\r\n    }\r\n\r\n    /**\r\n     * Returns XMPP address of this session's responder.\r\n     * @return {string}\r\n     */\r\n    get responderJid() {\r\n        return this.isInitiator ? this.remoteJid : this.localJid;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Prepares this object to initiate a session.\r\n     * @param {ChatRoom} room the chat room for the conference associated with\r\n     * this session\r\n     * @param {RTC} rtc the RTC service instance\r\n     * @param {object} options - the options, see implementing class's\r\n     * {@link #doInitialize} description for more details.\r\n     */\r\n    initialize(room, rtc, options) {\r\n        if (this.state !== null) {\r\n            const errmsg\r\n                = `attempt to initiate on session ${this.sid}\r\n                   in state ${this.state}`;\r\n\r\n            logger.error(errmsg);\r\n            throw new Error(errmsg);\r\n        }\r\n        this.room = room;\r\n        this.rtc = rtc;\r\n        this.state = JingleSessionState.PENDING;\r\n        this.doInitialize(options);\r\n    }\r\n\r\n    /**\r\n     * The implementing class finishes initialization here. Called at the end of\r\n     * {@link initialize}.\r\n     * @param {Object} options - The options specific to the implementing class.\r\n     * @protected\r\n     */\r\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\r\n\r\n    /* eslint-disable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Adds the ICE candidates found in the 'contents' array as remote\r\n     * candidates?\r\n     * Note: currently only used on transport-info\r\n     *\r\n     * @param contents\r\n     */\r\n    addIceCandidates(contents) {}\r\n\r\n    /* eslint-enable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Returns current state of this <tt>JingleSession</tt> instance.\r\n     * @returns {JingleSessionState} the current state of this session instance.\r\n     */\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    /* eslint-disable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Handles an 'add-source' event.\r\n     *\r\n     * @param contents an array of Jingle 'content' elements.\r\n     */\r\n    addSources(contents) {}\r\n\r\n    /**\r\n     * Handles a 'remove-source' event.\r\n     *\r\n     * @param contents an array of Jingle 'content' elements.\r\n     */\r\n    removeSources(contents) {}\r\n\r\n    /**\r\n     * Terminates this Jingle session by sending session-terminate\r\n     * @param success a callback called once the 'session-terminate' packet has\r\n     * been acknowledged with RESULT.\r\n     * @param failure a callback called when either timeout occurs or ERROR\r\n     * response is received.\r\n     * @param {Object} options\r\n     * @param {string} [options.reason] XMPP Jingle error condition\r\n     * @param {string} [options.reasonDescription] some meaningful error message\r\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\r\n     * terminated.\r\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\r\n     * sending session-terminate. It may not make sense to send it if the XMPP\r\n     * connection has been closed already or if the remote peer has disconnected\r\n     */\r\n    terminate(success, failure, options) {}\r\n\r\n    /**\r\n     * Handles an offer from the remote peer (prepares to accept a session).\r\n     * @param jingle the 'jingle' XML element.\r\n     * @param success callback called when we the incoming session has been\r\n     * accepted\r\n     * @param failure callback called when we fail for any reason, will supply\r\n     * error object with details(which is meant more to be printed to the logger\r\n     * than analysed in the code, as the error is unrecoverable anyway)\r\n     */\r\n    acceptOffer(jingle, success, failure) {}\r\n\r\n    /**\r\n     * Returns the JID of the initiator of the jingle session.\r\n     */\r\n    _getInitiatorJid() {\r\n        return this.isInitiator ? this.localJid : this.remoteJid;\r\n    }\r\n\r\n    /* eslint-enable no-unused-vars, no-empty-function */\r\n}\r\n","import { Strophe } from 'strophe.js';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\n/**\r\n *  Logs raw stanzas and makes them available for download as JSON\r\n */\r\nclass StropheLogger extends ConnectionPlugin {\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.log = [];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        this.connection.rawInput = this.logIncoming.bind(this);\r\n        this.connection.rawOutput = this.logOutgoing.bind(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stanza\r\n     */\r\n    logIncoming(stanza) {\r\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stanza\r\n     */\r\n    logOutgoing(stanza) {\r\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport default function() {\r\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\r\n}\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\r\n\r\n/**\r\n *\r\n */\r\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n\r\n        this.connection.addHandler(\r\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param iq\r\n     */\r\n    onRayo(iq) {\r\n        logger.info('Rayo IQ', iq);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param to\r\n     * @param from\r\n     * @param roomName\r\n     * @param roomPass\r\n     * @param focusMucJid\r\n     */\r\n    dial(to, from, roomName, roomPass, focusMucJid) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!focusMucJid) {\r\n                reject(new Error('Internal error!'));\r\n\r\n                return;\r\n            }\r\n            const req = $iq({\r\n                type: 'set',\r\n                to: focusMucJid\r\n            });\r\n\r\n            req.c('dial', {\r\n                xmlns: RAYO_XMLNS,\r\n                to,\r\n                from\r\n            });\r\n            req.c('header', {\r\n                name: 'JvbRoomName',\r\n                value: roomName\r\n            }).up();\r\n\r\n            if (roomPass && roomPass.length) {\r\n                req.c('header', {\r\n                    name: 'JvbRoomPassword',\r\n                    value: roomPass\r\n                }).up();\r\n            }\r\n\r\n            this.connection.sendIQ(\r\n                req,\r\n                result => {\r\n                    logger.info('Dial result ', result);\r\n\r\n                    // eslint-disable-next-line newline-per-chained-call\r\n                    const resource = $(result).find('ref').attr('uri');\r\n\r\n                    this.callResource = resource.substr('xmpp:'.length);\r\n                    logger.info(`Received call resource: ${this.callResource}`);\r\n                    resolve();\r\n                },\r\n                error => {\r\n                    logger.info('Dial error ', error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     */\r\n    hangup() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.callResource) {\r\n                reject(new Error('No call in progress'));\r\n                logger.warn('No call in progress');\r\n\r\n                return;\r\n            }\r\n\r\n            const req = $iq({\r\n                type: 'set',\r\n                to: this.callResource\r\n            });\r\n\r\n            req.c('hangup', {\r\n                xmlns: RAYO_XMLNS\r\n            });\r\n\r\n            this.connection.sendIQ(req, result => {\r\n                logger.info('Hangup result ', result);\r\n                this.callResource = null;\r\n                resolve();\r\n            }, error => {\r\n                logger.info('Hangup error ', error);\r\n                this.callResource = null;\r\n                reject(new Error('Hangup error '));\r\n            });\r\n        });\r\n    }\r\n}\r\n","/* global __filename */\r\n/**\r\n * Strophe logger implementation. Logs from level WARN and above.\r\n */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This is the last HTTP error status captured from Strophe debug logs.\r\n * The purpose of storing it is to distinguish between the network and\r\n * infrastructure reason for connection being dropped (see connectionHandler in\r\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\r\n * which means that the failure could be transient.\r\n *\r\n * FIXME in the latest Strophe (not released on npm) there is API to handle\r\n * particular HTTP errors, but there is no way to learn if the subsequent\r\n * request succeeded in order to tell if the error was one time incident or if\r\n * it was the reason for dropping the connection by Strophe (the connection is\r\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\r\n * details about the reason on why the connection stopped.\r\n *\r\n * @type {number}\r\n */\r\nlet lastErrorStatus = -1;\r\n\r\n/**\r\n * A regular expression used to catch Strophe's log message indicating that the\r\n * last BOSH request was successful. When there is such message seen the\r\n * {@link lastErrorStatus} will be set back to '-1'.\r\n * @type {RegExp}\r\n */\r\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\r\n\r\n/**\r\n * A regular expression used to capture the current value of the BOSH request\r\n * error status (HTTP error code or '0' or something else).\r\n * @type {RegExp}\r\n */\r\nconst lastErrorStatusRegExpr\r\n    = /request errored, status: (\\d+), number of errors: \\d+/;\r\n\r\n/**\r\n *\r\n */\r\nexport default function() {\r\n\r\n    Strophe.log = function(level, msg) {\r\n        // Our global handler reports uncaught errors to the stats which may\r\n        // interpret those as partial call failure.\r\n        // Strophe log entry about secondary request timeout does not mean that\r\n        // it's a final failure(the request will be restarted), so we lower it's\r\n        // level here to a warning.\r\n        logger.trace('Strophe', level, msg);\r\n        if (typeof msg === 'string'\r\n                && msg.indexOf('Request ') !== -1\r\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            level = Strophe.LogLevel.WARN;\r\n        }\r\n\r\n        /* eslint-disable no-case-declarations */\r\n        switch (level) {\r\n        case Strophe.LogLevel.DEBUG:\r\n            // The log message which reports successful status is logged on\r\n            // Strophe's DEBUG level.\r\n            if (lastErrorStatus !== -1\r\n                    && resetLastErrorStatusRegExpr.test(msg)) {\r\n                logger.debug('Reset lastErrorStatus');\r\n                lastErrorStatus = -1;\r\n            }\r\n            break;\r\n        case Strophe.LogLevel.WARN:\r\n            logger.warn(`Strophe: ${msg}`);\r\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\r\n\r\n            if (errStatusCapture && errStatusCapture.length === 2) {\r\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\r\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\r\n            }\r\n            break;\r\n        case Strophe.LogLevel.ERROR:\r\n        case Strophe.LogLevel.FATAL:\r\n            // eslint-disable-next-line no-param-reassign\r\n            msg = `Strophe: ${msg}`;\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\r\n            logger.error(msg);\r\n            break;\r\n        }\r\n\r\n        /* eslint-enable no-case-declarations */\r\n    };\r\n\r\n    /**\r\n     * Returns error status (HTTP error code) of the last BOSH request.\r\n     *\r\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\r\n     * (this is a hack).\r\n     */\r\n    Strophe.getLastErrorStatus = function() {\r\n        return lastErrorStatus;\r\n    };\r\n\r\n    Strophe.getStatusString = function(status) {\r\n        switch (status) {\r\n        case Strophe.Status.BINDREQUIRED:\r\n            return 'BINDREQUIRED';\r\n        case Strophe.Status.ERROR:\r\n            return 'ERROR';\r\n        case Strophe.Status.CONNECTING:\r\n            return 'CONNECTING';\r\n        case Strophe.Status.CONNFAIL:\r\n            return 'CONNFAIL';\r\n        case Strophe.Status.AUTHENTICATING:\r\n            return 'AUTHENTICATING';\r\n        case Strophe.Status.AUTHFAIL:\r\n            return 'AUTHFAIL';\r\n        case Strophe.Status.CONNECTED:\r\n            return 'CONNECTED';\r\n        case Strophe.Status.DISCONNECTED:\r\n            return 'DISCONNECTED';\r\n        case Strophe.Status.DISCONNECTING:\r\n            return 'DISCONNECTING';\r\n        case Strophe.Status.ATTACHED:\r\n            return 'ATTACHED';\r\n        default:\r\n            return 'unknown';\r\n        }\r\n    };\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\r\n * with the videobridge.\r\n */\r\nexport default class BridgeChannel {\r\n    /**\r\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\r\n     * instance, or creates a WebSocket connection with the videobridge.\r\n     * At least one of both, peerconnection or wsUrl parameters, must be\r\n     * given.\r\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\r\n     * instance.\r\n     * @param {string} [wsUrl] WebSocket URL.\r\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\r\n     * @param {function} senderVideoConstraintsChanged callback to call when the sender video constraints change.\r\n     */\r\n    constructor(peerconnection, wsUrl, emitter, senderVideoConstraintsChanged) {\r\n        if (!peerconnection && !wsUrl) {\r\n            throw new TypeError(\r\n                'At least peerconnection or wsUrl must be given');\r\n        } else if (peerconnection && wsUrl) {\r\n            throw new TypeError(\r\n                'Just one of peerconnection or wsUrl must be given');\r\n        }\r\n\r\n        if (peerconnection) {\r\n            logger.debug('constructor() with peerconnection');\r\n        } else {\r\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\r\n        }\r\n\r\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\r\n        // @type {RTCDataChannel|WebSocket}\r\n        this._channel = null;\r\n\r\n        // @type {EventEmitter}\r\n        this._eventEmitter = emitter;\r\n\r\n        // Whether a RTCDataChannel or WebSocket is internally used.\r\n        // @type {string} \"datachannel\" / \"websocket\"\r\n        this._mode = null;\r\n\r\n        // Indicates whether the connection retries are enabled or not.\r\n        this._areRetriesEnabled = false;\r\n\r\n        // Indicates whether the connection was closed from the client or not.\r\n        this._closedFromClient = false;\r\n\r\n        this._senderVideoConstraintsChanged = senderVideoConstraintsChanged;\r\n\r\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\r\n        // event.\r\n        if (peerconnection) {\r\n            const datachannel\r\n                = peerconnection.createDataChannel(\r\n                    'JVB data channel', {\r\n                        protocol: 'http://jitsi.org/protocols/colibri'\r\n                    });\r\n\r\n            // Handle the RTCDataChannel.\r\n            this._handleChannel(datachannel);\r\n            this._mode = 'datachannel';\r\n\r\n        // Otherwise create a WebSocket connection.\r\n        } else if (wsUrl) {\r\n            this._areRetriesEnabled = true;\r\n            this._wsUrl = wsUrl;\r\n            this._initWebSocket();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the web socket channel.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _initWebSocket() {\r\n        // Create a WebSocket instance.\r\n        const ws = new WebSocket(this._wsUrl);\r\n\r\n        // Handle the WebSocket.\r\n        this._handleChannel(ws);\r\n        this._mode = 'websocket';\r\n    }\r\n\r\n    /**\r\n     * Starts the websocket connection retries.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _startConnectionRetries() {\r\n        let timeoutS = 1;\r\n\r\n        const reload = () => {\r\n            if (this.isOpen()) {\r\n                return;\r\n            }\r\n            this._initWebSocket(this._wsUrl);\r\n            timeoutS = Math.min(timeoutS * 2, 60);\r\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\r\n        };\r\n\r\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\r\n    }\r\n\r\n    /**\r\n     * Stops the websocket connection retries.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _stopConnectionRetries() {\r\n        if (this._retryTimeout) {\r\n            clearTimeout(this._retryTimeout);\r\n            this._retryTimeout = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retries to establish the websocket connection after the connection was closed by the server.\r\n     *\r\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\r\n     * @returns {void}\r\n     */\r\n    _retryWebSocketConnection(closeEvent) {\r\n        if (!this._areRetriesEnabled) {\r\n            return;\r\n        }\r\n        const { code, reason } = closeEvent;\r\n\r\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\r\n        this._areRetriesEnabled = false;\r\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\r\n            this._stopConnectionRetries();\r\n            this._areRetriesEnabled = true;\r\n        });\r\n        this._startConnectionRetries();\r\n    }\r\n\r\n    /**\r\n     * The channel mode.\r\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\r\n     */\r\n    get mode() {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Closes the currently opened channel.\r\n     */\r\n    close() {\r\n        this._closedFromClient = true;\r\n        this._stopConnectionRetries();\r\n        this._areRetriesEnabled = false;\r\n        if (this._channel) {\r\n            try {\r\n                this._channel.close();\r\n            } catch (error) {} // eslint-disable-line no-empty\r\n\r\n            this._channel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\r\n     * open.\r\n     * @return {boolean}\r\n     */\r\n    isOpen() {\r\n        return this._channel && (this._channel.readyState === 'open'\r\n            || this._channel.readyState === WebSocket.OPEN);\r\n    }\r\n\r\n    /**\r\n     * Sends message via the channel.\r\n     * @param {string} to The id of the endpoint that should receive the\r\n     * message. If \"\" the message will be sent to all participants.\r\n     * @param  {object} payload The payload of the message.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendMessage(to, payload) {\r\n        this._send({\r\n            colibriClass: 'EndpointMessage',\r\n            msgPayload: payload,\r\n            to\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"lastN value changed\" message via the channel.\r\n     * @param {number} value The new value for lastN. -1 means unlimited.\r\n     */\r\n    sendSetLastNMessage(value) {\r\n        const jsonObject = {\r\n            colibriClass: 'LastNChangedEvent',\r\n            lastN: value\r\n        };\r\n\r\n        this._send(jsonObject);\r\n        logger.log(`Channel lastN set to: ${value}`);\r\n    }\r\n\r\n    /**\r\n     * Sends a \"pinned endpoint changed\" message via the channel.\r\n     * @param {string} endpointId The id of the pinned endpoint.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendPinnedEndpointMessage(endpointId) {\r\n        logger.log(\r\n            'sending pinned changed notification to the bridge for endpoint ',\r\n            endpointId);\r\n\r\n        this._send({\r\n            colibriClass: 'PinnedEndpointChangedEvent',\r\n            pinnedEndpoint: endpointId || null\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"selected endpoints changed\" message via the channel.\r\n     *\r\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendSelectedEndpointsMessage(endpointIds) {\r\n        logger.log(\r\n            'sending selected changed notification to the bridge for endpoints',\r\n            endpointIds);\r\n\r\n        this._send({\r\n            colibriClass: 'SelectedEndpointsChangedEvent',\r\n            selectedEndpoints: endpointIds\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"receiver video constraint\" message via the channel.\r\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\r\n     * in pixels, this receiver is willing to receive\r\n     */\r\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\r\n        logger.log('sending a ReceiverVideoConstraint message with '\r\n            + `a maxFrameHeight of ${maxFrameHeightPixels} pixels`);\r\n        this._send({\r\n            colibriClass: 'ReceiverVideoConstraint',\r\n            maxFrameHeight: maxFrameHeightPixels\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set events on the given RTCDataChannel or WebSocket instance.\r\n     */\r\n    _handleChannel(channel) {\r\n        const emitter = this._eventEmitter;\r\n\r\n        channel.onopen = () => {\r\n            logger.info(`${this._mode} channel opened`);\r\n\r\n            // Code sample for sending string and/or binary data.\r\n            // Sends string message to the bridge:\r\n            //     channel.send(\"Hello bridge!\");\r\n            // Sends 12 bytes binary message to the bridge:\r\n            //     channel.send(new ArrayBuffer(12));\r\n\r\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\r\n        };\r\n\r\n        channel.onerror = event => {\r\n            // WS error events contain no information about the failure (this is available in the onclose event) and\r\n            // the event references the WS object itself, which causes hangs on mobile.\r\n            if (this._mode !== 'websocket') {\r\n                logger.error(`Channel error: ${event.message}`);\r\n            }\r\n        };\r\n\r\n        channel.onmessage = ({ data }) => {\r\n            // JSON object.\r\n            let obj;\r\n\r\n            try {\r\n                obj = JSON.parse(data);\r\n            } catch (error) {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(\r\n                    'Failed to parse channel message as JSON: ',\r\n                    data, error);\r\n\r\n                return;\r\n            }\r\n\r\n            const colibriClass = obj.colibriClass;\r\n\r\n            switch (colibriClass) {\r\n            case 'DominantSpeakerEndpointChangeEvent': {\r\n                // Endpoint ID from the Videobridge.\r\n                const dominantSpeakerEndpoint = obj.dominantSpeakerEndpoint;\r\n\r\n                logger.info(\r\n                    'Channel new dominant speaker event: ',\r\n                    dominantSpeakerEndpoint);\r\n                emitter.emit(\r\n                    RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n                    dominantSpeakerEndpoint);\r\n                break;\r\n            }\r\n            case 'EndpointConnectivityStatusChangeEvent': {\r\n                const endpoint = obj.endpoint;\r\n                const isActive = obj.active === 'true';\r\n\r\n                logger.info(\r\n                    `Endpoint connection status changed: ${endpoint} active ? ${\r\n                        isActive}`);\r\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n                    endpoint, isActive);\r\n\r\n                break;\r\n            }\r\n            case 'EndpointMessage': {\r\n                emitter.emit(\r\n                    RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from,\r\n                    obj.msgPayload);\r\n\r\n                break;\r\n            }\r\n            case 'LastNEndpointsChangeEvent': {\r\n                // The new/latest list of last-n endpoint IDs.\r\n                const lastNEndpoints = obj.lastNEndpoints;\r\n\r\n                logger.info('Channel new last-n event: ',\r\n                    lastNEndpoints, obj);\r\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n                    lastNEndpoints, obj);\r\n\r\n                break;\r\n            }\r\n            case 'SenderVideoConstraints': {\r\n                const videoConstraints = obj.videoConstraints;\r\n\r\n                if (videoConstraints) {\r\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\r\n                    this._senderVideoConstraintsChanged(videoConstraints);\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                logger.debug('Channel JSON-formatted message: ', obj);\r\n\r\n                // The received message appears to be appropriately formatted\r\n                // (i.e. is a JSON object which assigns a value to the\r\n                // mandatory property colibriClass) so don't just swallow it,\r\n                // expose it to public consumption.\r\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\r\n            }\r\n            }\r\n        };\r\n\r\n        channel.onclose = event => {\r\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\r\n\r\n            if (this._mode === 'websocket') {\r\n                if (!this._closedFromClient) {\r\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\r\n                    this._retryWebSocketConnection(event);\r\n                }\r\n            }\r\n\r\n            // Remove the channel.\r\n            this._channel = null;\r\n        };\r\n\r\n        // Store the channel.\r\n        this._channel = channel;\r\n    }\r\n\r\n    /**\r\n     * Sends passed object via the channel.\r\n     * @param {object} jsonObject The object that will be sent.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    _send(jsonObject) {\r\n        const channel = this._channel;\r\n\r\n        if (!this.isOpen()) {\r\n            logger.error('Bridge Channel send: no opened channel.');\r\n            throw new Error('No opened channel');\r\n        }\r\n\r\n        channel.send(JSON.stringify(jsonObject));\r\n    }\r\n}\r\n","/*\r\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n /* eslint-env node */\r\n'use strict';\r\n\r\nvar SDPUtils = require('sdp');\r\n\r\nfunction fixStatsType(stat) {\r\n  return {\r\n    inboundrtp: 'inbound-rtp',\r\n    outboundrtp: 'outbound-rtp',\r\n    candidatepair: 'candidate-pair',\r\n    localcandidate: 'local-candidate',\r\n    remotecandidate: 'remote-candidate'\r\n  }[stat.type] || stat.type;\r\n}\r\n\r\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\r\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\r\n\r\n  // Map ICE parameters (ufrag, pwd) to SDP.\r\n  sdp += SDPUtils.writeIceParameters(\r\n      transceiver.iceGatherer.getLocalParameters());\r\n\r\n  // Map DTLS parameters to SDP.\r\n  sdp += SDPUtils.writeDtlsParameters(\r\n      transceiver.dtlsTransport.getLocalParameters(),\r\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\r\n\r\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\r\n\r\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\r\n    sdp += 'a=sendrecv\\r\\n';\r\n  } else if (transceiver.rtpSender) {\r\n    sdp += 'a=sendonly\\r\\n';\r\n  } else if (transceiver.rtpReceiver) {\r\n    sdp += 'a=recvonly\\r\\n';\r\n  } else {\r\n    sdp += 'a=inactive\\r\\n';\r\n  }\r\n\r\n  if (transceiver.rtpSender) {\r\n    var trackId = transceiver.rtpSender._initialTrackId ||\r\n        transceiver.rtpSender.track.id;\r\n    transceiver.rtpSender._initialTrackId = trackId;\r\n    // spec.\r\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\r\n        trackId + '\\r\\n';\r\n    sdp += 'a=' + msid;\r\n    // for Chrome. Legacy should no longer be required.\r\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\r\n        ' ' + msid;\r\n\r\n    // RTX\r\n    if (transceiver.sendEncodingParameters[0].rtx) {\r\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n          ' ' + msid;\r\n      sdp += 'a=ssrc-group:FID ' +\r\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\r\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n          '\\r\\n';\r\n    }\r\n  }\r\n  // FIXME: this should be written by writeRtpDescription.\r\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\r\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\r\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\r\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\r\n  }\r\n  return sdp;\r\n}\r\n\r\n// Edge does not like\r\n// 1) stun: filtered after 14393 unless ?transport=udp is present\r\n// 2) turn: that does not have all of turn:host:port?transport=udp\r\n// 3) turn: with ipv6 addresses\r\n// 4) turn: occurring muliple times\r\nfunction filterIceServers(iceServers, edgeVersion) {\r\n  var hasTurn = false;\r\n  iceServers = JSON.parse(JSON.stringify(iceServers));\r\n  return iceServers.filter(function(server) {\r\n    if (server && (server.urls || server.url)) {\r\n      var urls = server.urls || server.url;\r\n      if (server.url && !server.urls) {\r\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\r\n      }\r\n      var isString = typeof urls === 'string';\r\n      if (isString) {\r\n        urls = [urls];\r\n      }\r\n      urls = urls.filter(function(url) {\r\n        var validTurn = url.indexOf('turn:') === 0 &&\r\n            url.indexOf('transport=udp') !== -1 &&\r\n            url.indexOf('turn:[') === -1 &&\r\n            !hasTurn;\r\n\r\n        if (validTurn) {\r\n          hasTurn = true;\r\n          return true;\r\n        }\r\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\r\n            url.indexOf('?transport=udp') === -1;\r\n      });\r\n\r\n      delete server.url;\r\n      server.urls = isString ? urls[0] : urls;\r\n      return !!urls.length;\r\n    }\r\n  });\r\n}\r\n\r\n// Determines the intersection of local and remote capabilities.\r\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\r\n  var commonCapabilities = {\r\n    codecs: [],\r\n    headerExtensions: [],\r\n    fecMechanisms: []\r\n  };\r\n\r\n  var findCodecByPayloadType = function(pt, codecs) {\r\n    pt = parseInt(pt, 10);\r\n    for (var i = 0; i < codecs.length; i++) {\r\n      if (codecs[i].payloadType === pt ||\r\n          codecs[i].preferredPayloadType === pt) {\r\n        return codecs[i];\r\n      }\r\n    }\r\n  };\r\n\r\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\r\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\r\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\r\n    return lCodec && rCodec &&\r\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\r\n  };\r\n\r\n  localCapabilities.codecs.forEach(function(lCodec) {\r\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\r\n      var rCodec = remoteCapabilities.codecs[i];\r\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\r\n          lCodec.clockRate === rCodec.clockRate) {\r\n        if (lCodec.name.toLowerCase() === 'rtx' &&\r\n            lCodec.parameters && rCodec.parameters.apt) {\r\n          // for RTX we need to find the local rtx that has a apt\r\n          // which points to the same local codec as the remote one.\r\n          if (!rtxCapabilityMatches(lCodec, rCodec,\r\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\r\n            continue;\r\n          }\r\n        }\r\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\r\n        // number of channels is the highest common number of channels\r\n        rCodec.numChannels = Math.min(lCodec.numChannels,\r\n            rCodec.numChannels);\r\n        // push rCodec so we reply with offerer payload type\r\n        commonCapabilities.codecs.push(rCodec);\r\n\r\n        // determine common feedback mechanisms\r\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\r\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\r\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\r\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\r\n              return true;\r\n            }\r\n          }\r\n          return false;\r\n        });\r\n        // FIXME: also need to determine .parameters\r\n        //  see https://github.com/openpeer/ortc/issues/569\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\r\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\r\n         i++) {\r\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\r\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\r\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\n  // FIXME: fecMechanisms\r\n  return commonCapabilities;\r\n}\r\n\r\n// is action=setLocalDescription with type allowed in signalingState\r\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\r\n  return {\r\n    offer: {\r\n      setLocalDescription: ['stable', 'have-local-offer'],\r\n      setRemoteDescription: ['stable', 'have-remote-offer']\r\n    },\r\n    answer: {\r\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\r\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\r\n    }\r\n  }[type][action].indexOf(signalingState) !== -1;\r\n}\r\n\r\nfunction maybeAddCandidate(iceTransport, candidate) {\r\n  // Edge's internal representation adds some fields therefore\r\n  // not all fieldѕ are taken into account.\r\n  var alreadyAdded = iceTransport.getRemoteCandidates()\r\n      .find(function(remoteCandidate) {\r\n        return candidate.foundation === remoteCandidate.foundation &&\r\n            candidate.ip === remoteCandidate.ip &&\r\n            candidate.port === remoteCandidate.port &&\r\n            candidate.priority === remoteCandidate.priority &&\r\n            candidate.protocol === remoteCandidate.protocol &&\r\n            candidate.type === remoteCandidate.type;\r\n      });\r\n  if (!alreadyAdded) {\r\n    iceTransport.addRemoteCandidate(candidate);\r\n  }\r\n  return !alreadyAdded;\r\n}\r\n\r\n\r\nfunction makeError(name, description) {\r\n  var e = new Error(description);\r\n  e.name = name;\r\n  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names\r\n  e.code = {\r\n    NotSupportedError: 9,\r\n    InvalidStateError: 11,\r\n    InvalidAccessError: 15,\r\n    TypeError: undefined,\r\n    OperationError: undefined\r\n  }[name];\r\n  return e;\r\n}\r\n\r\nmodule.exports = function(window, edgeVersion) {\r\n  // https://w3c.github.io/mediacapture-main/#mediastream\r\n  // Helper function to add the track to the stream and\r\n  // dispatch the event ourselves.\r\n  function addTrackToStreamAndFireEvent(track, stream) {\r\n    stream.addTrack(track);\r\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\r\n        {track: track}));\r\n  }\r\n\r\n  function removeTrackFromStreamAndFireEvent(track, stream) {\r\n    stream.removeTrack(track);\r\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\r\n        {track: track}));\r\n  }\r\n\r\n  function fireAddTrack(pc, track, receiver, streams) {\r\n    var trackEvent = new Event('track');\r\n    trackEvent.track = track;\r\n    trackEvent.receiver = receiver;\r\n    trackEvent.transceiver = {receiver: receiver};\r\n    trackEvent.streams = streams;\r\n    window.setTimeout(function() {\r\n      pc._dispatchEvent('track', trackEvent);\r\n    });\r\n  }\r\n\r\n  var RTCPeerConnection = function(config) {\r\n    var pc = this;\r\n\r\n    var _eventTarget = document.createDocumentFragment();\r\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\r\n        .forEach(function(method) {\r\n          pc[method] = _eventTarget[method].bind(_eventTarget);\r\n        });\r\n\r\n    this.canTrickleIceCandidates = null;\r\n\r\n    this.needNegotiation = false;\r\n\r\n    this.localStreams = [];\r\n    this.remoteStreams = [];\r\n\r\n    this._localDescription = null;\r\n    this._remoteDescription = null;\r\n\r\n    this.signalingState = 'stable';\r\n    this.iceConnectionState = 'new';\r\n    this.connectionState = 'new';\r\n    this.iceGatheringState = 'new';\r\n\r\n    config = JSON.parse(JSON.stringify(config || {}));\r\n\r\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\r\n    if (config.rtcpMuxPolicy === 'negotiate') {\r\n      throw(makeError('NotSupportedError',\r\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\r\n    } else if (!config.rtcpMuxPolicy) {\r\n      config.rtcpMuxPolicy = 'require';\r\n    }\r\n\r\n    switch (config.iceTransportPolicy) {\r\n      case 'all':\r\n      case 'relay':\r\n        break;\r\n      default:\r\n        config.iceTransportPolicy = 'all';\r\n        break;\r\n    }\r\n\r\n    switch (config.bundlePolicy) {\r\n      case 'balanced':\r\n      case 'max-compat':\r\n      case 'max-bundle':\r\n        break;\r\n      default:\r\n        config.bundlePolicy = 'balanced';\r\n        break;\r\n    }\r\n\r\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\r\n\r\n    this._iceGatherers = [];\r\n    if (config.iceCandidatePoolSize) {\r\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\r\n        this._iceGatherers.push(new window.RTCIceGatherer({\r\n          iceServers: config.iceServers,\r\n          gatherPolicy: config.iceTransportPolicy\r\n        }));\r\n      }\r\n    } else {\r\n      config.iceCandidatePoolSize = 0;\r\n    }\r\n\r\n    this._config = config;\r\n\r\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\r\n    // everything that is needed to describe a SDP m-line.\r\n    this.transceivers = [];\r\n\r\n    this._sdpSessionId = SDPUtils.generateSessionId();\r\n    this._sdpSessionVersion = 0;\r\n\r\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\r\n\r\n    this._isClosed = false;\r\n  };\r\n\r\n  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {\r\n    configurable: true,\r\n    get: function() {\r\n      return this._localDescription;\r\n    }\r\n  });\r\n  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {\r\n    configurable: true,\r\n    get: function() {\r\n      return this._remoteDescription;\r\n    }\r\n  });\r\n\r\n  // set up event handlers on prototype\r\n  RTCPeerConnection.prototype.onicecandidate = null;\r\n  RTCPeerConnection.prototype.onaddstream = null;\r\n  RTCPeerConnection.prototype.ontrack = null;\r\n  RTCPeerConnection.prototype.onremovestream = null;\r\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\r\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\r\n  RTCPeerConnection.prototype.onconnectionstatechange = null;\r\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\r\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\r\n  RTCPeerConnection.prototype.ondatachannel = null;\r\n\r\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\r\n    if (this._isClosed) {\r\n      return;\r\n    }\r\n    this.dispatchEvent(event);\r\n    if (typeof this['on' + name] === 'function') {\r\n      this['on' + name](event);\r\n    }\r\n  };\r\n\r\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\r\n    var event = new Event('icegatheringstatechange');\r\n    this._dispatchEvent('icegatheringstatechange', event);\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getConfiguration = function() {\r\n    return this._config;\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getLocalStreams = function() {\r\n    return this.localStreams;\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\r\n    return this.remoteStreams;\r\n  };\r\n\r\n  // internal helper to create a transceiver object.\r\n  // (which is not yet the same as the WebRTC 1.0 transceiver)\r\n  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {\r\n    var hasBundleTransport = this.transceivers.length > 0;\r\n    var transceiver = {\r\n      track: null,\r\n      iceGatherer: null,\r\n      iceTransport: null,\r\n      dtlsTransport: null,\r\n      localCapabilities: null,\r\n      remoteCapabilities: null,\r\n      rtpSender: null,\r\n      rtpReceiver: null,\r\n      kind: kind,\r\n      mid: null,\r\n      sendEncodingParameters: null,\r\n      recvEncodingParameters: null,\r\n      stream: null,\r\n      associatedRemoteMediaStreams: [],\r\n      wantReceive: true\r\n    };\r\n    if (this.usingBundle && hasBundleTransport) {\r\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\r\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\r\n    } else {\r\n      var transports = this._createIceAndDtlsTransports();\r\n      transceiver.iceTransport = transports.iceTransport;\r\n      transceiver.dtlsTransport = transports.dtlsTransport;\r\n    }\r\n    if (!doNotAdd) {\r\n      this.transceivers.push(transceiver);\r\n    }\r\n    return transceiver;\r\n  };\r\n\r\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\r\n    if (this._isClosed) {\r\n      throw makeError('InvalidStateError',\r\n          'Attempted to call addTrack on a closed peerconnection.');\r\n    }\r\n\r\n    var alreadyExists = this.transceivers.find(function(s) {\r\n      return s.track === track;\r\n    });\r\n\r\n    if (alreadyExists) {\r\n      throw makeError('InvalidAccessError', 'Track already exists.');\r\n    }\r\n\r\n    var transceiver;\r\n    for (var i = 0; i < this.transceivers.length; i++) {\r\n      if (!this.transceivers[i].track &&\r\n          this.transceivers[i].kind === track.kind) {\r\n        transceiver = this.transceivers[i];\r\n      }\r\n    }\r\n    if (!transceiver) {\r\n      transceiver = this._createTransceiver(track.kind);\r\n    }\r\n\r\n    this._maybeFireNegotiationNeeded();\r\n\r\n    if (this.localStreams.indexOf(stream) === -1) {\r\n      this.localStreams.push(stream);\r\n    }\r\n\r\n    transceiver.track = track;\r\n    transceiver.stream = stream;\r\n    transceiver.rtpSender = new window.RTCRtpSender(track,\r\n        transceiver.dtlsTransport);\r\n    return transceiver.rtpSender;\r\n  };\r\n\r\n  RTCPeerConnection.prototype.addStream = function(stream) {\r\n    var pc = this;\r\n    if (edgeVersion >= 15025) {\r\n      stream.getTracks().forEach(function(track) {\r\n        pc.addTrack(track, stream);\r\n      });\r\n    } else {\r\n      // Clone is necessary for local demos mostly, attaching directly\r\n      // to two different senders does not work (build 10547).\r\n      // Fixed in 15025 (or earlier)\r\n      var clonedStream = stream.clone();\r\n      stream.getTracks().forEach(function(track, idx) {\r\n        var clonedTrack = clonedStream.getTracks()[idx];\r\n        track.addEventListener('enabled', function(event) {\r\n          clonedTrack.enabled = event.enabled;\r\n        });\r\n      });\r\n      clonedStream.getTracks().forEach(function(track) {\r\n        pc.addTrack(track, clonedStream);\r\n      });\r\n    }\r\n  };\r\n\r\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\r\n    if (this._isClosed) {\r\n      throw makeError('InvalidStateError',\r\n          'Attempted to call removeTrack on a closed peerconnection.');\r\n    }\r\n\r\n    if (!(sender instanceof window.RTCRtpSender)) {\r\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\r\n          'does not implement interface RTCRtpSender.');\r\n    }\r\n\r\n    var transceiver = this.transceivers.find(function(t) {\r\n      return t.rtpSender === sender;\r\n    });\r\n\r\n    if (!transceiver) {\r\n      throw makeError('InvalidAccessError',\r\n          'Sender was not created by this connection.');\r\n    }\r\n    var stream = transceiver.stream;\r\n\r\n    transceiver.rtpSender.stop();\r\n    transceiver.rtpSender = null;\r\n    transceiver.track = null;\r\n    transceiver.stream = null;\r\n\r\n    // remove the stream from the set of local streams\r\n    var localStreams = this.transceivers.map(function(t) {\r\n      return t.stream;\r\n    });\r\n    if (localStreams.indexOf(stream) === -1 &&\r\n        this.localStreams.indexOf(stream) > -1) {\r\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\r\n    }\r\n\r\n    this._maybeFireNegotiationNeeded();\r\n  };\r\n\r\n  RTCPeerConnection.prototype.removeStream = function(stream) {\r\n    var pc = this;\r\n    stream.getTracks().forEach(function(track) {\r\n      var sender = pc.getSenders().find(function(s) {\r\n        return s.track === track;\r\n      });\r\n      if (sender) {\r\n        pc.removeTrack(sender);\r\n      }\r\n    });\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getSenders = function() {\r\n    return this.transceivers.filter(function(transceiver) {\r\n      return !!transceiver.rtpSender;\r\n    })\r\n    .map(function(transceiver) {\r\n      return transceiver.rtpSender;\r\n    });\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getReceivers = function() {\r\n    return this.transceivers.filter(function(transceiver) {\r\n      return !!transceiver.rtpReceiver;\r\n    })\r\n    .map(function(transceiver) {\r\n      return transceiver.rtpReceiver;\r\n    });\r\n  };\r\n\r\n\r\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\r\n      usingBundle) {\r\n    var pc = this;\r\n    if (usingBundle && sdpMLineIndex > 0) {\r\n      return this.transceivers[0].iceGatherer;\r\n    } else if (this._iceGatherers.length) {\r\n      return this._iceGatherers.shift();\r\n    }\r\n    var iceGatherer = new window.RTCIceGatherer({\r\n      iceServers: this._config.iceServers,\r\n      gatherPolicy: this._config.iceTransportPolicy\r\n    });\r\n    Object.defineProperty(iceGatherer, 'state',\r\n        {value: 'new', writable: true}\r\n    );\r\n\r\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\r\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\r\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\r\n      // polyfill since RTCIceGatherer.state is not implemented in\r\n      // Edge 10547 yet.\r\n      iceGatherer.state = end ? 'completed' : 'gathering';\r\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\r\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\r\n      }\r\n    };\r\n    iceGatherer.addEventListener('localcandidate',\r\n      this.transceivers[sdpMLineIndex].bufferCandidates);\r\n    return iceGatherer;\r\n  };\r\n\r\n  // start gathering from an RTCIceGatherer.\r\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\r\n    var pc = this;\r\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\r\n    if (iceGatherer.onlocalcandidate) {\r\n      return;\r\n    }\r\n    var bufferedCandidateEvents =\r\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\r\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\r\n    iceGatherer.removeEventListener('localcandidate',\r\n      this.transceivers[sdpMLineIndex].bufferCandidates);\r\n    iceGatherer.onlocalcandidate = function(evt) {\r\n      if (pc.usingBundle && sdpMLineIndex > 0) {\r\n        // if we know that we use bundle we can drop candidates with\r\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\r\n        // confused since we dispose the extra ice gatherer.\r\n        return;\r\n      }\r\n      var event = new Event('icecandidate');\r\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\r\n\r\n      var cand = evt.candidate;\r\n      // Edge emits an empty object for RTCIceCandidateComplete‥\r\n      var end = !cand || Object.keys(cand).length === 0;\r\n      if (end) {\r\n        // polyfill since RTCIceGatherer.state is not implemented in\r\n        // Edge 10547 yet.\r\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\r\n          iceGatherer.state = 'completed';\r\n        }\r\n      } else {\r\n        if (iceGatherer.state === 'new') {\r\n          iceGatherer.state = 'gathering';\r\n        }\r\n        // RTCIceCandidate doesn't have a component, needs to be added\r\n        cand.component = 1;\r\n        // also the usernameFragment. TODO: update SDP to take both variants.\r\n        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;\r\n\r\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\r\n        event.candidate = Object.assign(event.candidate,\r\n            SDPUtils.parseCandidate(serializedCandidate));\r\n\r\n        event.candidate.candidate = serializedCandidate;\r\n        event.candidate.toJSON = function() {\r\n          return {\r\n            candidate: event.candidate.candidate,\r\n            sdpMid: event.candidate.sdpMid,\r\n            sdpMLineIndex: event.candidate.sdpMLineIndex,\r\n            usernameFragment: event.candidate.usernameFragment\r\n          };\r\n        };\r\n      }\r\n\r\n      // update local description.\r\n      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);\r\n      if (!end) {\r\n        sections[event.candidate.sdpMLineIndex] +=\r\n            'a=' + event.candidate.candidate + '\\r\\n';\r\n      } else {\r\n        sections[event.candidate.sdpMLineIndex] +=\r\n            'a=end-of-candidates\\r\\n';\r\n      }\r\n      pc._localDescription.sdp =\r\n          SDPUtils.getDescription(pc._localDescription.sdp) +\r\n          sections.join('');\r\n      var complete = pc.transceivers.every(function(transceiver) {\r\n        return transceiver.iceGatherer &&\r\n            transceiver.iceGatherer.state === 'completed';\r\n      });\r\n\r\n      if (pc.iceGatheringState !== 'gathering') {\r\n        pc.iceGatheringState = 'gathering';\r\n        pc._emitGatheringStateChange();\r\n      }\r\n\r\n      // Emit candidate. Also emit null candidate when all gatherers are\r\n      // complete.\r\n      if (!end) {\r\n        pc._dispatchEvent('icecandidate', event);\r\n      }\r\n      if (complete) {\r\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\r\n        pc.iceGatheringState = 'complete';\r\n        pc._emitGatheringStateChange();\r\n      }\r\n    };\r\n\r\n    // emit already gathered candidates.\r\n    window.setTimeout(function() {\r\n      bufferedCandidateEvents.forEach(function(e) {\r\n        iceGatherer.onlocalcandidate(e);\r\n      });\r\n    }, 0);\r\n  };\r\n\r\n  // Create ICE transport and DTLS transport.\r\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\r\n    var pc = this;\r\n    var iceTransport = new window.RTCIceTransport(null);\r\n    iceTransport.onicestatechange = function() {\r\n      pc._updateIceConnectionState();\r\n      pc._updateConnectionState();\r\n    };\r\n\r\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\r\n    dtlsTransport.ondtlsstatechange = function() {\r\n      pc._updateConnectionState();\r\n    };\r\n    dtlsTransport.onerror = function() {\r\n      // onerror does not set state to failed by itself.\r\n      Object.defineProperty(dtlsTransport, 'state',\r\n          {value: 'failed', writable: true});\r\n      pc._updateConnectionState();\r\n    };\r\n\r\n    return {\r\n      iceTransport: iceTransport,\r\n      dtlsTransport: dtlsTransport\r\n    };\r\n  };\r\n\r\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\r\n  // Without triggering the callbacks.\r\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\r\n      sdpMLineIndex) {\r\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\r\n    if (iceGatherer) {\r\n      delete iceGatherer.onlocalcandidate;\r\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\r\n    }\r\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\r\n    if (iceTransport) {\r\n      delete iceTransport.onicestatechange;\r\n      delete this.transceivers[sdpMLineIndex].iceTransport;\r\n    }\r\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\r\n    if (dtlsTransport) {\r\n      delete dtlsTransport.ondtlsstatechange;\r\n      delete dtlsTransport.onerror;\r\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\r\n    }\r\n  };\r\n\r\n  // Start the RTP Sender and Receiver for a transceiver.\r\n  RTCPeerConnection.prototype._transceive = function(transceiver,\r\n      send, recv) {\r\n    var params = getCommonCapabilities(transceiver.localCapabilities,\r\n        transceiver.remoteCapabilities);\r\n    if (send && transceiver.rtpSender) {\r\n      params.encodings = transceiver.sendEncodingParameters;\r\n      params.rtcp = {\r\n        cname: SDPUtils.localCName,\r\n        compound: transceiver.rtcpParameters.compound\r\n      };\r\n      if (transceiver.recvEncodingParameters.length) {\r\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\r\n      }\r\n      transceiver.rtpSender.send(params);\r\n    }\r\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\r\n      // remove RTX field in Edge 14942\r\n      if (transceiver.kind === 'video'\r\n          && transceiver.recvEncodingParameters\r\n          && edgeVersion < 15019) {\r\n        transceiver.recvEncodingParameters.forEach(function(p) {\r\n          delete p.rtx;\r\n        });\r\n      }\r\n      if (transceiver.recvEncodingParameters.length) {\r\n        params.encodings = transceiver.recvEncodingParameters;\r\n      } else {\r\n        params.encodings = [{}];\r\n      }\r\n      params.rtcp = {\r\n        compound: transceiver.rtcpParameters.compound\r\n      };\r\n      if (transceiver.rtcpParameters.cname) {\r\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\r\n      }\r\n      if (transceiver.sendEncodingParameters.length) {\r\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\r\n      }\r\n      transceiver.rtpReceiver.receive(params);\r\n    }\r\n  };\r\n\r\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\r\n    var pc = this;\r\n\r\n    // Note: pranswer is not supported.\r\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\r\n      return Promise.reject(makeError('TypeError',\r\n          'Unsupported type \"' + description.type + '\"'));\r\n    }\r\n\r\n    if (!isActionAllowedInSignalingState('setLocalDescription',\r\n        description.type, pc.signalingState) || pc._isClosed) {\r\n      return Promise.reject(makeError('InvalidStateError',\r\n          'Can not set local ' + description.type +\r\n          ' in state ' + pc.signalingState));\r\n    }\r\n\r\n    var sections;\r\n    var sessionpart;\r\n    if (description.type === 'offer') {\r\n      // VERY limited support for SDP munging. Limited to:\r\n      // * changing the order of codecs\r\n      sections = SDPUtils.splitSections(description.sdp);\r\n      sessionpart = sections.shift();\r\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\r\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\r\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\r\n      });\r\n\r\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\r\n        pc._gather(transceiver.mid, sdpMLineIndex);\r\n      });\r\n    } else if (description.type === 'answer') {\r\n      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);\r\n      sessionpart = sections.shift();\r\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\r\n          'a=ice-lite').length > 0;\r\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\r\n        var transceiver = pc.transceivers[sdpMLineIndex];\r\n        var iceGatherer = transceiver.iceGatherer;\r\n        var iceTransport = transceiver.iceTransport;\r\n        var dtlsTransport = transceiver.dtlsTransport;\r\n        var localCapabilities = transceiver.localCapabilities;\r\n        var remoteCapabilities = transceiver.remoteCapabilities;\r\n\r\n        // treat bundle-only as not-rejected.\r\n        var rejected = SDPUtils.isRejected(mediaSection) &&\r\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\r\n\r\n        if (!rejected && !transceiver.rejected) {\r\n          var remoteIceParameters = SDPUtils.getIceParameters(\r\n              mediaSection, sessionpart);\r\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\r\n              mediaSection, sessionpart);\r\n          if (isIceLite) {\r\n            remoteDtlsParameters.role = 'server';\r\n          }\r\n\r\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\r\n            pc._gather(transceiver.mid, sdpMLineIndex);\r\n            if (iceTransport.state === 'new') {\r\n              iceTransport.start(iceGatherer, remoteIceParameters,\r\n                  isIceLite ? 'controlling' : 'controlled');\r\n            }\r\n            if (dtlsTransport.state === 'new') {\r\n              dtlsTransport.start(remoteDtlsParameters);\r\n            }\r\n          }\r\n\r\n          // Calculate intersection of capabilities.\r\n          var params = getCommonCapabilities(localCapabilities,\r\n              remoteCapabilities);\r\n\r\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\r\n          // transceiver has already been started in setRemoteDescription.\r\n          pc._transceive(transceiver,\r\n              params.codecs.length > 0,\r\n              false);\r\n        }\r\n      });\r\n    }\r\n\r\n    pc._localDescription = {\r\n      type: description.type,\r\n      sdp: description.sdp\r\n    };\r\n    if (description.type === 'offer') {\r\n      pc._updateSignalingState('have-local-offer');\r\n    } else {\r\n      pc._updateSignalingState('stable');\r\n    }\r\n\r\n    return Promise.resolve();\r\n  };\r\n\r\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\r\n    var pc = this;\r\n\r\n    // Note: pranswer is not supported.\r\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\r\n      return Promise.reject(makeError('TypeError',\r\n          'Unsupported type \"' + description.type + '\"'));\r\n    }\r\n\r\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\r\n        description.type, pc.signalingState) || pc._isClosed) {\r\n      return Promise.reject(makeError('InvalidStateError',\r\n          'Can not set remote ' + description.type +\r\n          ' in state ' + pc.signalingState));\r\n    }\r\n\r\n    var streams = {};\r\n    pc.remoteStreams.forEach(function(stream) {\r\n      streams[stream.id] = stream;\r\n    });\r\n    var receiverList = [];\r\n    var sections = SDPUtils.splitSections(description.sdp);\r\n    var sessionpart = sections.shift();\r\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\r\n        'a=ice-lite').length > 0;\r\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\r\n        'a=group:BUNDLE ').length > 0;\r\n    pc.usingBundle = usingBundle;\r\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\r\n        'a=ice-options:')[0];\r\n    if (iceOptions) {\r\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\r\n          .indexOf('trickle') >= 0;\r\n    } else {\r\n      pc.canTrickleIceCandidates = false;\r\n    }\r\n\r\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\r\n      var lines = SDPUtils.splitLines(mediaSection);\r\n      var kind = SDPUtils.getKind(mediaSection);\r\n      // treat bundle-only as not-rejected.\r\n      var rejected = SDPUtils.isRejected(mediaSection) &&\r\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\r\n      var protocol = lines[0].substr(2).split(' ')[2];\r\n\r\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\r\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\r\n\r\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\r\n\r\n      // Reject datachannels which are not implemented yet.\r\n      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||\r\n          protocol === 'UDP/DTLS/SCTP'))) {\r\n        // TODO: this is dangerous in the case where a non-rejected m-line\r\n        //     becomes rejected.\r\n        pc.transceivers[sdpMLineIndex] = {\r\n          mid: mid,\r\n          kind: kind,\r\n          protocol: protocol,\r\n          rejected: true\r\n        };\r\n        return;\r\n      }\r\n\r\n      if (!rejected && pc.transceivers[sdpMLineIndex] &&\r\n          pc.transceivers[sdpMLineIndex].rejected) {\r\n        // recycle a rejected transceiver.\r\n        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);\r\n      }\r\n\r\n      var transceiver;\r\n      var iceGatherer;\r\n      var iceTransport;\r\n      var dtlsTransport;\r\n      var rtpReceiver;\r\n      var sendEncodingParameters;\r\n      var recvEncodingParameters;\r\n      var localCapabilities;\r\n\r\n      var track;\r\n      // FIXME: ensure the mediaSection has rtcp-mux set.\r\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\r\n      var remoteIceParameters;\r\n      var remoteDtlsParameters;\r\n      if (!rejected) {\r\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\r\n            sessionpart);\r\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\r\n            sessionpart);\r\n        remoteDtlsParameters.role = 'client';\r\n      }\r\n      recvEncodingParameters =\r\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\r\n\r\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\r\n\r\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\r\n          'a=end-of-candidates', sessionpart).length > 0;\r\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\r\n          .map(function(cand) {\r\n            return SDPUtils.parseCandidate(cand);\r\n          })\r\n          .filter(function(cand) {\r\n            return cand.component === 1;\r\n          });\r\n\r\n      // Check if we can use BUNDLE and dispose transports.\r\n      if ((description.type === 'offer' || description.type === 'answer') &&\r\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\r\n          pc.transceivers[sdpMLineIndex]) {\r\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\r\n        pc.transceivers[sdpMLineIndex].iceGatherer =\r\n            pc.transceivers[0].iceGatherer;\r\n        pc.transceivers[sdpMLineIndex].iceTransport =\r\n            pc.transceivers[0].iceTransport;\r\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\r\n            pc.transceivers[0].dtlsTransport;\r\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\r\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\r\n              pc.transceivers[0].dtlsTransport);\r\n        }\r\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\r\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\r\n              pc.transceivers[0].dtlsTransport);\r\n        }\r\n      }\r\n      if (description.type === 'offer' && !rejected) {\r\n        transceiver = pc.transceivers[sdpMLineIndex] ||\r\n            pc._createTransceiver(kind);\r\n        transceiver.mid = mid;\r\n\r\n        if (!transceiver.iceGatherer) {\r\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\r\n              usingBundle);\r\n        }\r\n\r\n        if (cands.length && transceiver.iceTransport.state === 'new') {\r\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\r\n            transceiver.iceTransport.setRemoteCandidates(cands);\r\n          } else {\r\n            cands.forEach(function(candidate) {\r\n              maybeAddCandidate(transceiver.iceTransport, candidate);\r\n            });\r\n          }\r\n        }\r\n\r\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\r\n\r\n        // filter RTX until additional stuff needed for RTX is implemented\r\n        // in adapter.js\r\n        if (edgeVersion < 15019) {\r\n          localCapabilities.codecs = localCapabilities.codecs.filter(\r\n              function(codec) {\r\n                return codec.name !== 'rtx';\r\n              });\r\n        }\r\n\r\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\r\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\r\n        }];\r\n\r\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\r\n        var isNewTrack = false;\r\n        if (direction === 'sendrecv' || direction === 'sendonly') {\r\n          isNewTrack = !transceiver.rtpReceiver;\r\n          rtpReceiver = transceiver.rtpReceiver ||\r\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\r\n\r\n          if (isNewTrack) {\r\n            var stream;\r\n            track = rtpReceiver.track;\r\n            // FIXME: does not work with Plan B.\r\n            if (remoteMsid && remoteMsid.stream === '-') {\r\n              // no-op. a stream id of '-' means: no associated stream.\r\n            } else if (remoteMsid) {\r\n              if (!streams[remoteMsid.stream]) {\r\n                streams[remoteMsid.stream] = new window.MediaStream();\r\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\r\n                  get: function() {\r\n                    return remoteMsid.stream;\r\n                  }\r\n                });\r\n              }\r\n              Object.defineProperty(track, 'id', {\r\n                get: function() {\r\n                  return remoteMsid.track;\r\n                }\r\n              });\r\n              stream = streams[remoteMsid.stream];\r\n            } else {\r\n              if (!streams.default) {\r\n                streams.default = new window.MediaStream();\r\n              }\r\n              stream = streams.default;\r\n            }\r\n            if (stream) {\r\n              addTrackToStreamAndFireEvent(track, stream);\r\n              transceiver.associatedRemoteMediaStreams.push(stream);\r\n            }\r\n            receiverList.push([track, rtpReceiver, stream]);\r\n          }\r\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\r\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\r\n            var nativeTrack = s.getTracks().find(function(t) {\r\n              return t.id === transceiver.rtpReceiver.track.id;\r\n            });\r\n            if (nativeTrack) {\r\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\r\n            }\r\n          });\r\n          transceiver.associatedRemoteMediaStreams = [];\r\n        }\r\n\r\n        transceiver.localCapabilities = localCapabilities;\r\n        transceiver.remoteCapabilities = remoteCapabilities;\r\n        transceiver.rtpReceiver = rtpReceiver;\r\n        transceiver.rtcpParameters = rtcpParameters;\r\n        transceiver.sendEncodingParameters = sendEncodingParameters;\r\n        transceiver.recvEncodingParameters = recvEncodingParameters;\r\n\r\n        // Start the RTCRtpReceiver now. The RTPSender is started in\r\n        // setLocalDescription.\r\n        pc._transceive(pc.transceivers[sdpMLineIndex],\r\n            false,\r\n            isNewTrack);\r\n      } else if (description.type === 'answer' && !rejected) {\r\n        transceiver = pc.transceivers[sdpMLineIndex];\r\n        iceGatherer = transceiver.iceGatherer;\r\n        iceTransport = transceiver.iceTransport;\r\n        dtlsTransport = transceiver.dtlsTransport;\r\n        rtpReceiver = transceiver.rtpReceiver;\r\n        sendEncodingParameters = transceiver.sendEncodingParameters;\r\n        localCapabilities = transceiver.localCapabilities;\r\n\r\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\r\n            recvEncodingParameters;\r\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\r\n            remoteCapabilities;\r\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\r\n\r\n        if (cands.length && iceTransport.state === 'new') {\r\n          if ((isIceLite || isComplete) &&\r\n              (!usingBundle || sdpMLineIndex === 0)) {\r\n            iceTransport.setRemoteCandidates(cands);\r\n          } else {\r\n            cands.forEach(function(candidate) {\r\n              maybeAddCandidate(transceiver.iceTransport, candidate);\r\n            });\r\n          }\r\n        }\r\n\r\n        if (!usingBundle || sdpMLineIndex === 0) {\r\n          if (iceTransport.state === 'new') {\r\n            iceTransport.start(iceGatherer, remoteIceParameters,\r\n                'controlling');\r\n          }\r\n          if (dtlsTransport.state === 'new') {\r\n            dtlsTransport.start(remoteDtlsParameters);\r\n          }\r\n        }\r\n\r\n        // If the offer contained RTX but the answer did not,\r\n        // remove RTX from sendEncodingParameters.\r\n        var commonCapabilities = getCommonCapabilities(\r\n          transceiver.localCapabilities,\r\n          transceiver.remoteCapabilities);\r\n\r\n        var hasRtx = commonCapabilities.codecs.filter(function(c) {\r\n          return c.name.toLowerCase() === 'rtx';\r\n        }).length;\r\n        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\r\n          delete transceiver.sendEncodingParameters[0].rtx;\r\n        }\r\n\r\n        pc._transceive(transceiver,\r\n            direction === 'sendrecv' || direction === 'recvonly',\r\n            direction === 'sendrecv' || direction === 'sendonly');\r\n\r\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\r\n        if (rtpReceiver &&\r\n            (direction === 'sendrecv' || direction === 'sendonly')) {\r\n          track = rtpReceiver.track;\r\n          if (remoteMsid) {\r\n            if (!streams[remoteMsid.stream]) {\r\n              streams[remoteMsid.stream] = new window.MediaStream();\r\n            }\r\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\r\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\r\n          } else {\r\n            if (!streams.default) {\r\n              streams.default = new window.MediaStream();\r\n            }\r\n            addTrackToStreamAndFireEvent(track, streams.default);\r\n            receiverList.push([track, rtpReceiver, streams.default]);\r\n          }\r\n        } else {\r\n          // FIXME: actually the receiver should be created later.\r\n          delete transceiver.rtpReceiver;\r\n        }\r\n      }\r\n    });\r\n\r\n    if (pc._dtlsRole === undefined) {\r\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\r\n    }\r\n\r\n    pc._remoteDescription = {\r\n      type: description.type,\r\n      sdp: description.sdp\r\n    };\r\n    if (description.type === 'offer') {\r\n      pc._updateSignalingState('have-remote-offer');\r\n    } else {\r\n      pc._updateSignalingState('stable');\r\n    }\r\n    Object.keys(streams).forEach(function(sid) {\r\n      var stream = streams[sid];\r\n      if (stream.getTracks().length) {\r\n        if (pc.remoteStreams.indexOf(stream) === -1) {\r\n          pc.remoteStreams.push(stream);\r\n          var event = new Event('addstream');\r\n          event.stream = stream;\r\n          window.setTimeout(function() {\r\n            pc._dispatchEvent('addstream', event);\r\n          });\r\n        }\r\n\r\n        receiverList.forEach(function(item) {\r\n          var track = item[0];\r\n          var receiver = item[1];\r\n          if (stream.id !== item[2].id) {\r\n            return;\r\n          }\r\n          fireAddTrack(pc, track, receiver, [stream]);\r\n        });\r\n      }\r\n    });\r\n    receiverList.forEach(function(item) {\r\n      if (item[2]) {\r\n        return;\r\n      }\r\n      fireAddTrack(pc, item[0], item[1], []);\r\n    });\r\n\r\n    // check whether addIceCandidate({}) was called within four seconds after\r\n    // setRemoteDescription.\r\n    window.setTimeout(function() {\r\n      if (!(pc && pc.transceivers)) {\r\n        return;\r\n      }\r\n      pc.transceivers.forEach(function(transceiver) {\r\n        if (transceiver.iceTransport &&\r\n            transceiver.iceTransport.state === 'new' &&\r\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\r\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\r\n              'an end-of-candidates notification');\r\n          transceiver.iceTransport.addRemoteCandidate({});\r\n        }\r\n      });\r\n    }, 4000);\r\n\r\n    return Promise.resolve();\r\n  };\r\n\r\n  RTCPeerConnection.prototype.close = function() {\r\n    this.transceivers.forEach(function(transceiver) {\r\n      /* not yet\r\n      if (transceiver.iceGatherer) {\r\n        transceiver.iceGatherer.close();\r\n      }\r\n      */\r\n      if (transceiver.iceTransport) {\r\n        transceiver.iceTransport.stop();\r\n      }\r\n      if (transceiver.dtlsTransport) {\r\n        transceiver.dtlsTransport.stop();\r\n      }\r\n      if (transceiver.rtpSender) {\r\n        transceiver.rtpSender.stop();\r\n      }\r\n      if (transceiver.rtpReceiver) {\r\n        transceiver.rtpReceiver.stop();\r\n      }\r\n    });\r\n    // FIXME: clean up tracks, local streams, remote streams, etc\r\n    this._isClosed = true;\r\n    this._updateSignalingState('closed');\r\n  };\r\n\r\n  // Update the signaling state.\r\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\r\n    this.signalingState = newState;\r\n    var event = new Event('signalingstatechange');\r\n    this._dispatchEvent('signalingstatechange', event);\r\n  };\r\n\r\n  // Determine whether to fire the negotiationneeded event.\r\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\r\n    var pc = this;\r\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\r\n      return;\r\n    }\r\n    this.needNegotiation = true;\r\n    window.setTimeout(function() {\r\n      if (pc.needNegotiation) {\r\n        pc.needNegotiation = false;\r\n        var event = new Event('negotiationneeded');\r\n        pc._dispatchEvent('negotiationneeded', event);\r\n      }\r\n    }, 0);\r\n  };\r\n\r\n  // Update the ice connection state.\r\n  RTCPeerConnection.prototype._updateIceConnectionState = function() {\r\n    var newState;\r\n    var states = {\r\n      'new': 0,\r\n      closed: 0,\r\n      checking: 0,\r\n      connected: 0,\r\n      completed: 0,\r\n      disconnected: 0,\r\n      failed: 0\r\n    };\r\n    this.transceivers.forEach(function(transceiver) {\r\n      if (transceiver.iceTransport && !transceiver.rejected) {\r\n        states[transceiver.iceTransport.state]++;\r\n      }\r\n    });\r\n\r\n    newState = 'new';\r\n    if (states.failed > 0) {\r\n      newState = 'failed';\r\n    } else if (states.checking > 0) {\r\n      newState = 'checking';\r\n    } else if (states.disconnected > 0) {\r\n      newState = 'disconnected';\r\n    } else if (states.new > 0) {\r\n      newState = 'new';\r\n    } else if (states.connected > 0) {\r\n      newState = 'connected';\r\n    } else if (states.completed > 0) {\r\n      newState = 'completed';\r\n    }\r\n\r\n    if (newState !== this.iceConnectionState) {\r\n      this.iceConnectionState = newState;\r\n      var event = new Event('iceconnectionstatechange');\r\n      this._dispatchEvent('iceconnectionstatechange', event);\r\n    }\r\n  };\r\n\r\n  // Update the connection state.\r\n  RTCPeerConnection.prototype._updateConnectionState = function() {\r\n    var newState;\r\n    var states = {\r\n      'new': 0,\r\n      closed: 0,\r\n      connecting: 0,\r\n      connected: 0,\r\n      completed: 0,\r\n      disconnected: 0,\r\n      failed: 0\r\n    };\r\n    this.transceivers.forEach(function(transceiver) {\r\n      if (transceiver.iceTransport && transceiver.dtlsTransport &&\r\n          !transceiver.rejected) {\r\n        states[transceiver.iceTransport.state]++;\r\n        states[transceiver.dtlsTransport.state]++;\r\n      }\r\n    });\r\n    // ICETransport.completed and connected are the same for this purpose.\r\n    states.connected += states.completed;\r\n\r\n    newState = 'new';\r\n    if (states.failed > 0) {\r\n      newState = 'failed';\r\n    } else if (states.connecting > 0) {\r\n      newState = 'connecting';\r\n    } else if (states.disconnected > 0) {\r\n      newState = 'disconnected';\r\n    } else if (states.new > 0) {\r\n      newState = 'new';\r\n    } else if (states.connected > 0) {\r\n      newState = 'connected';\r\n    }\r\n\r\n    if (newState !== this.connectionState) {\r\n      this.connectionState = newState;\r\n      var event = new Event('connectionstatechange');\r\n      this._dispatchEvent('connectionstatechange', event);\r\n    }\r\n  };\r\n\r\n  RTCPeerConnection.prototype.createOffer = function() {\r\n    var pc = this;\r\n\r\n    if (pc._isClosed) {\r\n      return Promise.reject(makeError('InvalidStateError',\r\n          'Can not call createOffer after close'));\r\n    }\r\n\r\n    var numAudioTracks = pc.transceivers.filter(function(t) {\r\n      return t.kind === 'audio';\r\n    }).length;\r\n    var numVideoTracks = pc.transceivers.filter(function(t) {\r\n      return t.kind === 'video';\r\n    }).length;\r\n\r\n    // Determine number of audio and video tracks we need to send/recv.\r\n    var offerOptions = arguments[0];\r\n    if (offerOptions) {\r\n      // Reject Chrome legacy constraints.\r\n      if (offerOptions.mandatory || offerOptions.optional) {\r\n        throw new TypeError(\r\n            'Legacy mandatory/optional constraints not supported.');\r\n      }\r\n      if (offerOptions.offerToReceiveAudio !== undefined) {\r\n        if (offerOptions.offerToReceiveAudio === true) {\r\n          numAudioTracks = 1;\r\n        } else if (offerOptions.offerToReceiveAudio === false) {\r\n          numAudioTracks = 0;\r\n        } else {\r\n          numAudioTracks = offerOptions.offerToReceiveAudio;\r\n        }\r\n      }\r\n      if (offerOptions.offerToReceiveVideo !== undefined) {\r\n        if (offerOptions.offerToReceiveVideo === true) {\r\n          numVideoTracks = 1;\r\n        } else if (offerOptions.offerToReceiveVideo === false) {\r\n          numVideoTracks = 0;\r\n        } else {\r\n          numVideoTracks = offerOptions.offerToReceiveVideo;\r\n        }\r\n      }\r\n    }\r\n\r\n    pc.transceivers.forEach(function(transceiver) {\r\n      if (transceiver.kind === 'audio') {\r\n        numAudioTracks--;\r\n        if (numAudioTracks < 0) {\r\n          transceiver.wantReceive = false;\r\n        }\r\n      } else if (transceiver.kind === 'video') {\r\n        numVideoTracks--;\r\n        if (numVideoTracks < 0) {\r\n          transceiver.wantReceive = false;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create M-lines for recvonly streams.\r\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\r\n      if (numAudioTracks > 0) {\r\n        pc._createTransceiver('audio');\r\n        numAudioTracks--;\r\n      }\r\n      if (numVideoTracks > 0) {\r\n        pc._createTransceiver('video');\r\n        numVideoTracks--;\r\n      }\r\n    }\r\n\r\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\r\n        pc._sdpSessionVersion++);\r\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\r\n      // For each track, create an ice gatherer, ice transport,\r\n      // dtls transport, potentially rtpsender and rtpreceiver.\r\n      var track = transceiver.track;\r\n      var kind = transceiver.kind;\r\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\r\n      transceiver.mid = mid;\r\n\r\n      if (!transceiver.iceGatherer) {\r\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\r\n            pc.usingBundle);\r\n      }\r\n\r\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\r\n      // filter RTX until additional stuff needed for RTX is implemented\r\n      // in adapter.js\r\n      if (edgeVersion < 15019) {\r\n        localCapabilities.codecs = localCapabilities.codecs.filter(\r\n            function(codec) {\r\n              return codec.name !== 'rtx';\r\n            });\r\n      }\r\n      localCapabilities.codecs.forEach(function(codec) {\r\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\r\n        // by adding level-asymmetry-allowed=1\r\n        if (codec.name === 'H264' &&\r\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\r\n          codec.parameters['level-asymmetry-allowed'] = '1';\r\n        }\r\n\r\n        // for subsequent offers, we might have to re-use the payload\r\n        // type of the last offer.\r\n        if (transceiver.remoteCapabilities &&\r\n            transceiver.remoteCapabilities.codecs) {\r\n          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {\r\n            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&\r\n                codec.clockRate === remoteCodec.clockRate) {\r\n              codec.preferredPayloadType = remoteCodec.payloadType;\r\n            }\r\n          });\r\n        }\r\n      });\r\n      localCapabilities.headerExtensions.forEach(function(hdrExt) {\r\n        var remoteExtensions = transceiver.remoteCapabilities &&\r\n            transceiver.remoteCapabilities.headerExtensions || [];\r\n        remoteExtensions.forEach(function(rHdrExt) {\r\n          if (hdrExt.uri === rHdrExt.uri) {\r\n            hdrExt.id = rHdrExt.id;\r\n          }\r\n        });\r\n      });\r\n\r\n      // generate an ssrc now, to be used later in rtpSender.send\r\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\r\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\r\n      }];\r\n      if (track) {\r\n        // add RTX\r\n        if (edgeVersion >= 15019 && kind === 'video' &&\r\n            !sendEncodingParameters[0].rtx) {\r\n          sendEncodingParameters[0].rtx = {\r\n            ssrc: sendEncodingParameters[0].ssrc + 1\r\n          };\r\n        }\r\n      }\r\n\r\n      if (transceiver.wantReceive) {\r\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\r\n            transceiver.dtlsTransport, kind);\r\n      }\r\n\r\n      transceiver.localCapabilities = localCapabilities;\r\n      transceiver.sendEncodingParameters = sendEncodingParameters;\r\n    });\r\n\r\n    // always offer BUNDLE and dispose on return if not supported.\r\n    if (pc._config.bundlePolicy !== 'max-compat') {\r\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\r\n        return t.mid;\r\n      }).join(' ') + '\\r\\n';\r\n    }\r\n    sdp += 'a=ice-options:trickle\\r\\n';\r\n\r\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\r\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\r\n          'offer', transceiver.stream, pc._dtlsRole);\r\n      sdp += 'a=rtcp-rsize\\r\\n';\r\n\r\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\r\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\r\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\r\n          cand.component = 1;\r\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\r\n        });\r\n\r\n        if (transceiver.iceGatherer.state === 'completed') {\r\n          sdp += 'a=end-of-candidates\\r\\n';\r\n        }\r\n      }\r\n    });\r\n\r\n    var desc = new window.RTCSessionDescription({\r\n      type: 'offer',\r\n      sdp: sdp\r\n    });\r\n    return Promise.resolve(desc);\r\n  };\r\n\r\n  RTCPeerConnection.prototype.createAnswer = function() {\r\n    var pc = this;\r\n\r\n    if (pc._isClosed) {\r\n      return Promise.reject(makeError('InvalidStateError',\r\n          'Can not call createAnswer after close'));\r\n    }\r\n\r\n    if (!(pc.signalingState === 'have-remote-offer' ||\r\n        pc.signalingState === 'have-local-pranswer')) {\r\n      return Promise.reject(makeError('InvalidStateError',\r\n          'Can not call createAnswer in signalingState ' + pc.signalingState));\r\n    }\r\n\r\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\r\n        pc._sdpSessionVersion++);\r\n    if (pc.usingBundle) {\r\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\r\n        return t.mid;\r\n      }).join(' ') + '\\r\\n';\r\n    }\r\n    sdp += 'a=ice-options:trickle\\r\\n';\r\n\r\n    var mediaSectionsInOffer = SDPUtils.getMediaSections(\r\n        pc._remoteDescription.sdp).length;\r\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\r\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\r\n        return;\r\n      }\r\n      if (transceiver.rejected) {\r\n        if (transceiver.kind === 'application') {\r\n          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt\r\n            sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n';\r\n          } else {\r\n            sdp += 'm=application 0 ' + transceiver.protocol +\r\n                ' webrtc-datachannel\\r\\n';\r\n          }\r\n        } else if (transceiver.kind === 'audio') {\r\n          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\\r\\n' +\r\n              'a=rtpmap:0 PCMU/8000\\r\\n';\r\n        } else if (transceiver.kind === 'video') {\r\n          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\\r\\n' +\r\n              'a=rtpmap:120 VP8/90000\\r\\n';\r\n        }\r\n        sdp += 'c=IN IP4 0.0.0.0\\r\\n' +\r\n            'a=inactive\\r\\n' +\r\n            'a=mid:' + transceiver.mid + '\\r\\n';\r\n        return;\r\n      }\r\n\r\n      // FIXME: look at direction.\r\n      if (transceiver.stream) {\r\n        var localTrack;\r\n        if (transceiver.kind === 'audio') {\r\n          localTrack = transceiver.stream.getAudioTracks()[0];\r\n        } else if (transceiver.kind === 'video') {\r\n          localTrack = transceiver.stream.getVideoTracks()[0];\r\n        }\r\n        if (localTrack) {\r\n          // add RTX\r\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\r\n              !transceiver.sendEncodingParameters[0].rtx) {\r\n            transceiver.sendEncodingParameters[0].rtx = {\r\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\r\n            };\r\n          }\r\n        }\r\n      }\r\n\r\n      // Calculate intersection of capabilities.\r\n      var commonCapabilities = getCommonCapabilities(\r\n          transceiver.localCapabilities,\r\n          transceiver.remoteCapabilities);\r\n\r\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\r\n        return c.name.toLowerCase() === 'rtx';\r\n      }).length;\r\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\r\n        delete transceiver.sendEncodingParameters[0].rtx;\r\n      }\r\n\r\n      sdp += writeMediaSection(transceiver, commonCapabilities,\r\n          'answer', transceiver.stream, pc._dtlsRole);\r\n      if (transceiver.rtcpParameters &&\r\n          transceiver.rtcpParameters.reducedSize) {\r\n        sdp += 'a=rtcp-rsize\\r\\n';\r\n      }\r\n    });\r\n\r\n    var desc = new window.RTCSessionDescription({\r\n      type: 'answer',\r\n      sdp: sdp\r\n    });\r\n    return Promise.resolve(desc);\r\n  };\r\n\r\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\r\n    var pc = this;\r\n    var sections;\r\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\r\n        candidate.sdpMid)) {\r\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\r\n    }\r\n\r\n    // TODO: needs to go into ops queue.\r\n    return new Promise(function(resolve, reject) {\r\n      if (!pc._remoteDescription) {\r\n        return reject(makeError('InvalidStateError',\r\n            'Can not add ICE candidate without a remote description'));\r\n      } else if (!candidate || candidate.candidate === '') {\r\n        for (var j = 0; j < pc.transceivers.length; j++) {\r\n          if (pc.transceivers[j].rejected) {\r\n            continue;\r\n          }\r\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\r\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\r\n          sections[j] += 'a=end-of-candidates\\r\\n';\r\n          pc._remoteDescription.sdp =\r\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\r\n              sections.join('');\r\n          if (pc.usingBundle) {\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        var sdpMLineIndex = candidate.sdpMLineIndex;\r\n        if (candidate.sdpMid) {\r\n          for (var i = 0; i < pc.transceivers.length; i++) {\r\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\r\n              sdpMLineIndex = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        var transceiver = pc.transceivers[sdpMLineIndex];\r\n        if (transceiver) {\r\n          if (transceiver.rejected) {\r\n            return resolve();\r\n          }\r\n          var cand = Object.keys(candidate.candidate).length > 0 ?\r\n              SDPUtils.parseCandidate(candidate.candidate) : {};\r\n          // Ignore Chrome's invalid candidates since Edge does not like them.\r\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\r\n            return resolve();\r\n          }\r\n          // Ignore RTCP candidates, we assume RTCP-MUX.\r\n          if (cand.component && cand.component !== 1) {\r\n            return resolve();\r\n          }\r\n          // when using bundle, avoid adding candidates to the wrong\r\n          // ice transport. And avoid adding candidates added in the SDP.\r\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\r\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\r\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\r\n              return reject(makeError('OperationError',\r\n                  'Can not add ICE candidate'));\r\n            }\r\n          }\r\n\r\n          // update the remoteDescription.\r\n          var candidateString = candidate.candidate.trim();\r\n          if (candidateString.indexOf('a=') === 0) {\r\n            candidateString = candidateString.substr(2);\r\n          }\r\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\r\n          sections[sdpMLineIndex] += 'a=' +\r\n              (cand.type ? candidateString : 'end-of-candidates')\r\n              + '\\r\\n';\r\n          pc._remoteDescription.sdp =\r\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\r\n              sections.join('');\r\n        } else {\r\n          return reject(makeError('OperationError',\r\n              'Can not add ICE candidate'));\r\n        }\r\n      }\r\n      resolve();\r\n    });\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getStats = function(selector) {\r\n    if (selector && selector instanceof window.MediaStreamTrack) {\r\n      var senderOrReceiver = null;\r\n      this.transceivers.forEach(function(transceiver) {\r\n        if (transceiver.rtpSender &&\r\n            transceiver.rtpSender.track === selector) {\r\n          senderOrReceiver = transceiver.rtpSender;\r\n        } else if (transceiver.rtpReceiver &&\r\n            transceiver.rtpReceiver.track === selector) {\r\n          senderOrReceiver = transceiver.rtpReceiver;\r\n        }\r\n      });\r\n      if (!senderOrReceiver) {\r\n        throw makeError('InvalidAccessError', 'Invalid selector.');\r\n      }\r\n      return senderOrReceiver.getStats();\r\n    }\r\n\r\n    var promises = [];\r\n    this.transceivers.forEach(function(transceiver) {\r\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\r\n          'dtlsTransport'].forEach(function(method) {\r\n            if (transceiver[method]) {\r\n              promises.push(transceiver[method].getStats());\r\n            }\r\n          });\r\n    });\r\n    return Promise.all(promises).then(function(allStats) {\r\n      var results = new Map();\r\n      allStats.forEach(function(stats) {\r\n        stats.forEach(function(stat) {\r\n          results.set(stat.id, stat);\r\n        });\r\n      });\r\n      return results;\r\n    });\r\n  };\r\n\r\n  // fix low-level stat names and return Map instead of object.\r\n  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',\r\n    'RTCIceTransport', 'RTCDtlsTransport'];\r\n  ortcObjects.forEach(function(ortcObjectName) {\r\n    var obj = window[ortcObjectName];\r\n    if (obj && obj.prototype && obj.prototype.getStats) {\r\n      var nativeGetstats = obj.prototype.getStats;\r\n      obj.prototype.getStats = function() {\r\n        return nativeGetstats.apply(this)\r\n        .then(function(nativeStats) {\r\n          var mapStats = new Map();\r\n          Object.keys(nativeStats).forEach(function(id) {\r\n            nativeStats[id].type = fixStatsType(nativeStats[id]);\r\n            mapStats.set(id, nativeStats[id]);\r\n          });\r\n          return mapStats;\r\n        });\r\n      };\r\n    }\r\n  });\r\n\r\n  // legacy callback shims. Should be moved to adapter.js some days.\r\n  var methods = ['createOffer', 'createAnswer'];\r\n  methods.forEach(function(method) {\r\n    var nativeMethod = RTCPeerConnection.prototype[method];\r\n    RTCPeerConnection.prototype[method] = function() {\r\n      var args = arguments;\r\n      if (typeof args[0] === 'function' ||\r\n          typeof args[1] === 'function') { // legacy\r\n        return nativeMethod.apply(this, [arguments[2]])\r\n        .then(function(description) {\r\n          if (typeof args[0] === 'function') {\r\n            args[0].apply(null, [description]);\r\n          }\r\n        }, function(error) {\r\n          if (typeof args[1] === 'function') {\r\n            args[1].apply(null, [error]);\r\n          }\r\n        });\r\n      }\r\n      return nativeMethod.apply(this, arguments);\r\n    };\r\n  });\r\n\r\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\r\n  methods.forEach(function(method) {\r\n    var nativeMethod = RTCPeerConnection.prototype[method];\r\n    RTCPeerConnection.prototype[method] = function() {\r\n      var args = arguments;\r\n      if (typeof args[1] === 'function' ||\r\n          typeof args[2] === 'function') { // legacy\r\n        return nativeMethod.apply(this, arguments)\r\n        .then(function() {\r\n          if (typeof args[1] === 'function') {\r\n            args[1].apply(null);\r\n          }\r\n        }, function(error) {\r\n          if (typeof args[2] === 'function') {\r\n            args[2].apply(null, [error]);\r\n          }\r\n        });\r\n      }\r\n      return nativeMethod.apply(this, arguments);\r\n    };\r\n  });\r\n\r\n  // getStats is special. It doesn't have a spec legacy method yet we support\r\n  // getStats(something, cb) without error callbacks.\r\n  ['getStats'].forEach(function(method) {\r\n    var nativeMethod = RTCPeerConnection.prototype[method];\r\n    RTCPeerConnection.prototype[method] = function() {\r\n      var args = arguments;\r\n      if (typeof args[1] === 'function') {\r\n        return nativeMethod.apply(this, arguments)\r\n        .then(function() {\r\n          if (typeof args[1] === 'function') {\r\n            args[1].apply(null);\r\n          }\r\n        });\r\n      }\r\n      return nativeMethod.apply(this, arguments);\r\n    };\r\n  });\r\n\r\n  return RTCPeerConnection;\r\n};\r\n","/* global __filename, RTCSessionDescription */\r\n\r\nimport { Interop } from '@jitsi/sdp-interop';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport transform from 'sdp-transform';\r\n\r\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\r\nimport * as VideoType from '../../service/RTC/VideoType';\r\nimport browser from '../browser';\r\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport RtxModifier from '../xmpp/RtxModifier';\r\nimport SDP from '../xmpp/SDP';\r\nimport SDPUtil from '../xmpp/SDPUtil';\r\nimport SdpConsistency from '../xmpp/SdpConsistency';\r\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\n\r\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\r\nimport LocalSdpMunger from './LocalSdpMunger';\r\nimport RTC from './RTC';\r\nimport RTCUtils from './RTCUtils';\r\nimport { SIM_LAYER_RIDS, TPCUtils } from './TPCUtils';\r\nimport SdpSimulcast from '../xmpp/SdpSimulcast.ts';\r\n\r\n// FIXME SDP tools should end up in some kind of util module\r\n\r\nconst logger = getLogger(__filename);\r\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\r\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\r\nconst DESKSTOP_SHARE_RATE = 500000;\r\nconst HD_BITRATE = 2500000;\r\nconst LD_BITRATE = 200000;\r\nconst SD_BITRATE = 700000;\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Creates new instance of 'TraceablePeerConnection'.\r\n *\r\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\r\n * @param {number} id the peer connection id assigned by the parent RTC module.\r\n * @param {SignalingLayer} signalingLayer the signaling layer instance\r\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\r\n * @param {object} constraints WebRTC 'PeerConnection' constraints\r\n * @param {boolean} isP2P indicates whether or not the new instance will be used\r\n * in a peer to peer connection\r\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\r\n * @param {boolean} options.disableSimulcast if set to 'true' will disable\r\n * the simulcast.\r\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX\r\n * @param {boolean} options.capScreenshareBitrate if set to 'true' simulcast will\r\n * be disabled for screenshare and a max bitrate of 500Kbps will applied on the\r\n * stream.\r\n * @param {string} options.disabledCodec the mime type of the code that should\r\n * not be negotiated on the peerconnection.\r\n * @param {boolean} options.disableH264 If set to 'true' H264 will be\r\n *      disabled by removing it from the SDP (deprecated)\r\n * @param {boolean} options.preferH264 if set to 'true' H264 will be preferred\r\n * over other video codecs. (deprecated)\r\n * @param {string} options.preferredCodec the mime type of the codec that needs\r\n * to be made the preferred codec for the connection.\r\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\r\n *\r\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\r\n * debug the peer connection. Since many other responsibilities have been added\r\n * it would make sense to extract a separate class from it and come up with\r\n * a more suitable name.\r\n *\r\n * @constructor\r\n */\r\nexport default function TraceablePeerConnection(\r\n        rtc,\r\n        id,\r\n        signalingLayer,\r\n        iceConfig,\r\n        constraints,\r\n        isP2P,\r\n        options) {\r\n\r\n    /**\r\n     * Indicates whether or not this peer connection instance is actively\r\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\r\n     * media direction will be adjusted to 'inactive' in order to suspend\r\n     * the transmission.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.audioTransferActive = !(options.startSilent === true);\r\n\r\n    /**\r\n     * The DTMF sender instance used to send DTMF tones.\r\n     *\r\n     * @type {RTCDTMFSender|undefined}\r\n     * @private\r\n     */\r\n    this._dtmfSender = undefined;\r\n\r\n    /**\r\n     * @typedef {Object} TouchToneRequest\r\n     * @property {string} tones - The DTMF tones string as defined by\r\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\r\n     * @property {number} duration - The amount of time in milliseconds that\r\n     * each DTMF should last.\r\n     * @property {string} interToneGap - The length of time in miliseconds to\r\n     * wait between tones.\r\n     */\r\n    /**\r\n     * TouchToneRequests which are waiting to be played. This queue is filled\r\n     * if there are touch tones currently being played.\r\n     *\r\n     * @type {Array<TouchToneRequest>}\r\n     * @private\r\n     */\r\n    this._dtmfTonesQueue = [];\r\n\r\n    /**\r\n     * Indicates whether or not this peer connection instance is actively\r\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\r\n     * media direction will be adjusted to 'inactive' in order to suspend\r\n     * the transmission.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.videoTransferActive = true;\r\n\r\n    /**\r\n     * The parent instance of RTC service which created this\r\n     * <tt>TracablePeerConnection</tt>.\r\n     * @type {RTC}\r\n     */\r\n    this.rtc = rtc;\r\n\r\n    /**\r\n     * The peer connection identifier assigned by the RTC module.\r\n     * @type {number}\r\n     */\r\n    this.id = id;\r\n\r\n    /**\r\n     * Indicates whether or not this instance is used in a peer to peer\r\n     * connection.\r\n     * @type {boolean}\r\n     */\r\n    this.isP2P = isP2P;\r\n\r\n    // FIXME: We should support multiple streams per jid.\r\n    /**\r\n     * The map holds remote tracks associated with this peer connection.\r\n     * It maps user's JID to media type and remote track\r\n     * (one track per media type per user's JID).\r\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\r\n     */\r\n    this.remoteTracks = new Map();\r\n\r\n    /**\r\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\r\n     * @type {Map<number, JitsiLocalTrack>}\r\n     */\r\n    this.localTracks = new Map();\r\n\r\n    /**\r\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\r\n     * the underlying WebRTC PeerConnection.\r\n     * @type {Array}\r\n     * @private\r\n     */\r\n    this._addedStreams = [];\r\n\r\n    /**\r\n     * @typedef {Object} TPCGroupInfo\r\n     * @property {string} semantics the SSRC groups semantics\r\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\r\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\r\n     * on...\r\n     */\r\n    /**\r\n     * @typedef {Object} TPCSSRCInfo\r\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\r\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\r\n     * groups\r\n     */\r\n    /**\r\n     * Holds the info about local track's SSRCs mapped per their\r\n     * {@link JitsiLocalTrack.rtcId}\r\n     * @type {Map<number, TPCSSRCInfo>}\r\n     */\r\n    this.localSSRCs = new Map();\r\n\r\n    /**\r\n     * The local ICE username fragment for this session.\r\n     */\r\n    this.localUfrag = null;\r\n\r\n    /**\r\n     * The remote ICE username fragment for this session.\r\n     */\r\n    this.remoteUfrag = null;\r\n\r\n    /**\r\n     * The signaling layer which operates this peer connection.\r\n     * @type {SignalingLayer}\r\n     */\r\n    this.signalingLayer = signalingLayer;\r\n\r\n    // SignalingLayer listeners\r\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\r\n    this.signalingLayer.on(\r\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\r\n        this._peerVideoTypeChanged);\r\n\r\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\r\n    this.signalingLayer.on(\r\n        SignalingEvents.PEER_MUTED_CHANGED,\r\n        this._peerMutedChanged);\r\n    this.options = options;\r\n\r\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\r\n    // connection is P2P to rtcstats.\r\n    const safeConstraints = constraints || {};\r\n\r\n    safeConstraints.optional = safeConstraints.optional || [];\r\n\r\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\r\n    // Firefox and Safari just ignore it.\r\n    if (Array.isArray(safeConstraints.optional)) {\r\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\r\n    } else {\r\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\r\n    }\r\n\r\n    this.peerconnection\r\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, safeConstraints);\r\n\r\n    // The standard video bitrates are used in Unified plan when switching\r\n    // between camera/desktop tracks on the same sender.\r\n    const standardVideoBitrates = {\r\n        low: LD_BITRATE,\r\n        standard: SD_BITRATE,\r\n        high: HD_BITRATE\r\n    };\r\n\r\n    // Check if the max. bitrates for video are specified through config.js videoQuality settings.\r\n    // These bitrates will be applied on all browsers for camera sources in both simulcast and p2p mode.\r\n    this.videoBitrates = this.options.videoQuality && this.options.videoQuality.maxBitratesVideo\r\n        ? this.options.videoQuality.maxBitratesVideo\r\n        : standardVideoBitrates;\r\n\r\n    this.tpcUtils = new TPCUtils(this, this.videoBitrates);\r\n    this.updateLog = [];\r\n    this.stats = {};\r\n    this.statsinterval = null;\r\n\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && browser.usesUnifiedPlan();\r\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\r\n\r\n    /**\r\n     * @type {number} The max number of stats to keep in this.stats. Limit to\r\n     * 300 values, i.e. 5 minutes; set to 0 to disable\r\n     */\r\n    this.maxstats = options.maxstats;\r\n\r\n    this.interop = new Interop();\r\n\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    // this.simulcast = new Simulcast(\r\n    //     {\r\n    //         numOfLayers: SIM_LAYER_RIDS.length,\r\n    //         explodeRemoteSimulcast: false,\r\n    //         usesUnifiedPlan: browser.usesUnifiedPlan()\r\n    //     });\r\n    if (browser.usesUnifiedPlan()) {\r\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length })\r\n    } else {\r\n        const Simulcast = require('@jitsi/sdp-simulcast');\r\n\r\n        this.simulcast = new Simulcast(\r\n            {\r\n                numOfLayers: SIM_LAYER_RIDS.length,\r\n                explodeRemoteSimulcast: false,\r\n                usesUnifiedPlan: false\r\n            });\r\n    }\r\n\r\n    this.sdpConsistency = new SdpConsistency(this.toString());\r\n\r\n    /**\r\n     * Munges local SDP provided to the Jingle Session in order to prevent from\r\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\r\n     * @type {LocalSdpMunger}\r\n     */\r\n    this.localSdpMunger = new LocalSdpMunger(this);\r\n\r\n    /**\r\n     * TracablePeerConnection uses RTC's eventEmitter\r\n     * @type {EventEmitter}\r\n     */\r\n    this.eventEmitter = rtc.eventEmitter;\r\n    this.rtxModifier = new RtxModifier();\r\n\r\n    /**\r\n     * The height constraint applied on the video sender.\r\n     */\r\n    this.senderVideoMaxHeight = null;\r\n\r\n    // We currently support preferring/disabling video codecs only.\r\n    const getCodecMimeType = codec => {\r\n        if (typeof codec === 'string') {\r\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    // Set the codec preference that will be applied on the SDP based on the config.js settings.\r\n    let preferredCodec = getCodecMimeType(\r\n        this.options.preferredCodec || (this.options.preferH264 && CodecMimeType.H264)\r\n    );\r\n\r\n    // Do not prefer VP9 on Firefox because of the following bug.\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1633876\r\n    if (browser.isFirefox() && preferredCodec === CodecMimeType.VP9) {\r\n        preferredCodec = null;\r\n    }\r\n\r\n    // Determine the codec that needs to be disabled based on config.js settings.\r\n    let disabledCodec = getCodecMimeType(\r\n        this.options.disabledCodec || (this.options.disableH264 && CodecMimeType.H264)\r\n    );\r\n\r\n    // Make sure we don't disable VP8 since it is a mandatory codec.\r\n    if (disabledCodec === CodecMimeType.VP8) {\r\n        logger.warn('Disabling VP8 is not permitted, setting is ignored!');\r\n        disabledCodec = null;\r\n    }\r\n\r\n    if (preferredCodec || disabledCodec) {\r\n        // If both enable and disable are set for the same codec, disable setting will prevail.\r\n        this.codecPreference = {\r\n            enable: disabledCodec === null,\r\n            mediaType: MediaType.VIDEO,\r\n            mimeType: disabledCodec ? disabledCodec : preferredCodec\r\n        };\r\n    }\r\n\r\n    // override as desired\r\n    this.trace = (what, info) => {\r\n        logger.debug(what, info);\r\n\r\n        this.updateLog.push({\r\n            time: new Date(),\r\n            type: what,\r\n            value: info || ''\r\n        });\r\n    };\r\n    this.onicecandidate = null;\r\n    this.peerconnection.onicecandidate = event => {\r\n        this.trace(\r\n            'onicecandidate',\r\n            JSON.stringify(event.candidate, null, ' '));\r\n\r\n        if (this.onicecandidate !== null) {\r\n            this.onicecandidate(event);\r\n        }\r\n    };\r\n\r\n    // Use stream events in plan-b and track events in unified plan.\r\n    if (browser.usesPlanB()) {\r\n        this.peerconnection.onaddstream\r\n            = event => this._remoteStreamAdded(event.stream);\r\n        this.peerconnection.onremovestream\r\n            = event => this._remoteStreamRemoved(event.stream);\r\n    } else {\r\n        this.peerconnection.ontrack = event => {\r\n            const stream = event.streams[0];\r\n\r\n            this._remoteTrackAdded(stream, event.track, event.transceiver);\r\n            stream.onremovetrack = evt => {\r\n                this._remoteTrackRemoved(stream, evt.track);\r\n            };\r\n        };\r\n    }\r\n    this.onsignalingstatechange = null;\r\n    this.peerconnection.onsignalingstatechange = event => {\r\n        this.trace('onsignalingstatechange', this.signalingState);\r\n        if (this.onsignalingstatechange !== null) {\r\n            this.onsignalingstatechange(event);\r\n        }\r\n    };\r\n    this.oniceconnectionstatechange = null;\r\n    this.peerconnection.oniceconnectionstatechange = event => {\r\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\r\n        if (this.oniceconnectionstatechange !== null) {\r\n            this.oniceconnectionstatechange(event);\r\n        }\r\n    };\r\n    this.onnegotiationneeded = null;\r\n    this.peerconnection.onnegotiationneeded = event => {\r\n        this.trace('onnegotiationneeded');\r\n        if (this.onnegotiationneeded !== null) {\r\n            this.onnegotiationneeded(event);\r\n        }\r\n    };\r\n    this.ondatachannel = null;\r\n    this.peerconnection.ondatachannel = event => {\r\n        this.trace('ondatachannel');\r\n        if (this.ondatachannel !== null) {\r\n            this.ondatachannel(event);\r\n        }\r\n    };\r\n\r\n    if (this.maxstats) {\r\n        this.statsinterval = window.setInterval(() => {\r\n            this.getStats(stats => {\r\n                if (stats.result\r\n                    && typeof stats.result === 'function') {\r\n                    const results = stats.result();\r\n\r\n                    for (let i = 0; i < results.length; ++i) {\r\n                        const res = results[i];\r\n\r\n                        res.names().forEach(name => {\r\n                            this._processStat(res, name, res.stat(name));\r\n                        });\r\n                    }\r\n                } else {\r\n                    stats.forEach(r => this._processStat(r, '', r));\r\n                }\r\n            }, () => {\r\n\r\n                // empty error callback\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    logger.info(`Create new ${this}`);\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Process stat and adds it to the array of stats we store.\r\n * @param report the current stats report.\r\n * @param name the name of the report, if available\r\n * @param statValue the value to add.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._processStat\r\n    = function(report, name, statValue) {\r\n        const id = `${report.id}-${name}`;\r\n        let s = this.stats[id];\r\n        const now = new Date();\r\n\r\n        if (!s) {\r\n            this.stats[id] = s = {\r\n                startTime: now,\r\n                endTime: now,\r\n                values: [],\r\n                times: []\r\n            };\r\n        }\r\n        s.values.push(statValue);\r\n        s.times.push(now.getTime());\r\n        if (s.values.length > this.maxstats) {\r\n            s.values.shift();\r\n            s.times.shift();\r\n        }\r\n        s.endTime = now;\r\n    };\r\n\r\n/**\r\n * Returns a string representation of a SessionDescription object.\r\n */\r\nconst dumpSDP = function(description) {\r\n    if (typeof description === 'undefined' || description === null) {\r\n        return '';\r\n    }\r\n\r\n    return `type: ${description.type}\\r\\n${description.sdp}`;\r\n};\r\n\r\n\r\n/**\r\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\r\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\r\n * succeeded and is up and running. We never see \"completed\" state for\r\n * the JVB connection, but it started appearing for the P2P one. This method\r\n * allows to adapt old logic to this new situation.\r\n * @return {string}\r\n */\r\nTraceablePeerConnection.prototype.getConnectionState = function() {\r\n    const state = this.peerconnection.iceConnectionState;\r\n\r\n    if (state === 'completed') {\r\n        return 'connected';\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\n/**\r\n * Obtains the media direction for given {@link MediaType}. The method takes\r\n * into account whether or not there are any local tracks for media and\r\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\r\n * @param {MediaType} mediaType\r\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\r\n * etc.) which should be used when setting local description on the peer\r\n * connection.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._getDesiredMediaDirection = function(\r\n        mediaType) {\r\n    let mediaTransferActive = true;\r\n\r\n    if (mediaType === MediaType.AUDIO) {\r\n        mediaTransferActive = this.audioTransferActive;\r\n    } else if (mediaType === MediaType.VIDEO) {\r\n        mediaTransferActive = this.videoTransferActive;\r\n    }\r\n    if (mediaTransferActive) {\r\n        return this.hasAnyTracksOfType(mediaType) ? 'sendrecv' : 'recvonly';\r\n    }\r\n\r\n    return 'inactive';\r\n};\r\n\r\n/**\r\n * Tells whether or not this TPC instance is using Simulcast.\r\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\r\n * <tt>false</tt> if it's turned off.\r\n */\r\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\r\n    return !this.options.disableSimulcast;\r\n};\r\n\r\n/**\r\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\r\n * @param {string} endpointId the video owner's ID (MUC nickname)\r\n * @param {VideoType} videoType the new value\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\r\n        endpointId,\r\n        videoType) {\r\n    // Check if endpointId has a value to avoid action on random track\r\n    if (!endpointId) {\r\n        logger.error(`No endpointID on peerVideoTypeChanged ${this}`);\r\n\r\n        return;\r\n    }\r\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\r\n\r\n    if (videoTrack.length) {\r\n        // NOTE 1 track per media type is assumed\r\n        videoTrack[0]._setVideoType(videoType);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles remote track mute / unmute events.\r\n * @param {string} endpointId the track owner's identifier (MUC nickname)\r\n * @param {MediaType} mediaType \"audio\" or \"video\"\r\n * @param {boolean} isMuted the new mute state\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._peerMutedChanged = function(\r\n        endpointId,\r\n        mediaType,\r\n        isMuted) {\r\n    // Check if endpointId is a value to avoid doing action on all remote tracks\r\n    if (!endpointId) {\r\n        logger.error('On peerMuteChanged - no endpoint ID');\r\n\r\n        return;\r\n    }\r\n    const track = this.getRemoteTracks(endpointId, mediaType);\r\n\r\n    if (track.length) {\r\n        // NOTE 1 track per media type is assumed\r\n        track[0].setMute(isMuted);\r\n    }\r\n};\r\n\r\n/**\r\n * Obtains audio levels of the remote audio tracks by getting the source\r\n * information on the RTCRtpReceivers. The information relevant to the ssrc\r\n * is updated each time a RTP packet constaining the ssrc is received.\r\n * @returns {Object} containing ssrc and audio level information as a\r\n * key-value pair.\r\n */\r\nTraceablePeerConnection.prototype.getAudioLevels = function() {\r\n    const audioLevels = {};\r\n    const audioReceivers = this.peerconnection.getReceivers()\r\n        .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO);\r\n\r\n    audioReceivers.forEach(remote => {\r\n        const ssrc = remote.getSynchronizationSources();\r\n\r\n        if (ssrc && ssrc.length) {\r\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\r\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\r\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\r\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\r\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\r\n        }\r\n    });\r\n\r\n    return audioLevels;\r\n};\r\n\r\n/**\r\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\r\n * argument is omitted the list of all local tracks will be returned.\r\n * @param {MediaType} [mediaType]\r\n * @return {Array<JitsiLocalTrack>}\r\n */\r\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\r\n    let tracks = Array.from(this.localTracks.values());\r\n\r\n    if (mediaType !== undefined) {\r\n        tracks = tracks.filter(track => track.getType() === mediaType);\r\n    }\r\n\r\n    return tracks;\r\n};\r\n\r\n/**\r\n * Retrieves the local video track.\r\n *\r\n * @returns {JitsiLocalTrack|undefined} - local video track.\r\n */\r\nTraceablePeerConnection.prototype.getLocalVideoTrack = function() {\r\n    return this.getLocalTracks(MediaType.VIDEO)[0];\r\n};\r\n\r\n/**\r\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\r\n * any local tracks for given <tt>mediaType</tt>.\r\n * @param {MediaType} mediaType\r\n * @return {boolean}\r\n */\r\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\r\n    if (!mediaType) {\r\n        throw new Error('\"mediaType\" is required');\r\n    }\r\n\r\n    return this.getLocalTracks(mediaType).length > 0;\r\n};\r\n\r\n/**\r\n * Obtains all remote tracks currently known to this PeerConnection instance.\r\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\r\n * @param {MediaType} [mediaType] the remote tracks will be filtered\r\n * by their media type if this argument is specified.\r\n * @return {Array<JitsiRemoteTrack>}\r\n */\r\nTraceablePeerConnection.prototype.getRemoteTracks = function(\r\n        endpointId,\r\n        mediaType) {\r\n    let remoteTracks = [];\r\n    const endpoints\r\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\r\n\r\n        for (const endpoint of endpoints) {\r\n            const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\r\n    \r\n            if (endpointTracksByMediaType) {\r\n                for (const trackMediaType of endpointTracksByMediaType.keys()) {\r\n                    // per media type filtering\r\n                    if (!mediaType || mediaType === trackMediaType) {\r\n                        remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    return remoteTracks;\r\n};\r\n\r\n/**\r\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\r\n * local and remote tracks bound to this instance.\r\n * @param {number} ssrc\r\n * @return {JitsiTrack|null}\r\n */\r\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\r\n    if (typeof ssrc !== 'number') {\r\n        throw new Error(`SSRC ${ssrc} is not a number`);\r\n    }\r\n    for (const localTrack of this.localTracks.values()) {\r\n        if (this.getLocalSSRC(localTrack) === ssrc) {\r\n            return localTrack;\r\n        }\r\n    }\r\n    for (const remoteTrack of this.getRemoteTracks()) {\r\n        if (remoteTrack.getSSRC() === ssrc) {\r\n            return remoteTrack;\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\r\n * both local and remote tracks bound to this instance.\r\n * @param {string} id\r\n * @return {number|null}\r\n */\r\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\r\n\r\n    const findTrackById = track => track.getTrack().id === id;\r\n    const localTrack = this.getLocalTracks().find(findTrackById);\r\n\r\n    if (localTrack) {\r\n        return this.getLocalSSRC(localTrack);\r\n    }\r\n\r\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\r\n\r\n    if (remoteTrack) {\r\n        return remoteTrack.getSSRC();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Called when new remote MediaStream is added to the PeerConnection.\r\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\r\n */\r\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\r\n    const streamId = RTC.getStreamID(stream);\r\n\r\n    if (!RTC.isUserStreamById(streamId)) {\r\n        logger.info(\r\n            `${this} ignored remote 'stream added' event for non-user stream`\r\n             + `id: ${streamId}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Bind 'addtrack'/'removetrack' event handlers\r\n    if (browser.isChromiumBased()) {\r\n        stream.onaddtrack = event => {\r\n            this._remoteTrackAdded(stream, event.track);\r\n        };\r\n        stream.onremovetrack = event => {\r\n            this._remoteTrackRemoved(stream, event.track);\r\n        };\r\n    }\r\n\r\n    // Call remoteTrackAdded for each track in the stream\r\n    const streamAudioTracks = stream.getAudioTracks();\r\n\r\n    for (const audioTrack of streamAudioTracks) {\r\n        this._remoteTrackAdded(stream, audioTrack);\r\n    }\r\n    const streamVideoTracks = stream.getVideoTracks();\r\n\r\n    for (const videoTrack of streamVideoTracks) {\r\n        this._remoteTrackAdded(stream, videoTrack);\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\r\n * handle streams on per track basis). Finds the owner and the SSRC for\r\n * the track and passes that to ChatRoom for further processing.\r\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\r\n * the parent of the track\r\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\r\n * participant.\r\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\r\n * for the remote participant in unified plan.\r\n */\r\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\r\n    const streamId = RTC.getStreamID(stream);\r\n    const mediaType = track.kind;\r\n\r\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\r\n        logger.info(\r\n            `${this} ignored remote 'stream added' event for non-user stream`\r\n             + `id: ${streamId}`);\r\n\r\n        return;\r\n    }\r\n    logger.info(`${this} remote track added:`, streamId, mediaType);\r\n\r\n    // look up an associated JID for a stream id\r\n    if (!mediaType) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `MediaType undefined for remote track, stream id: ${streamId}`\r\n            ));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    const remoteSDP = browser.usesPlanB()\r\n        ? new SDP(this.remoteDescription.sdp)\r\n        : new SDP(this.peerconnection.remoteDescription.sdp);\r\n    let mediaLines;\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        if (transceiver && transceiver.mid) {\r\n            const mid = transceiver.mid;\r\n\r\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\r\n        } else {\r\n            mediaLines = remoteSDP.media.filter(mls => {\r\n                const msid = SDPUtil.findLine(mls, 'a=msid');\r\n\r\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\r\n            });\r\n        }\r\n    } else {\r\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\r\n    }\r\n\r\n    if (!mediaLines.length) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No media lines for type ${\r\n                    mediaType} found in remote SDP for remote track: ${\r\n                    streamId}`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\r\n\r\n    ssrcLines\r\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\r\n    if (!ssrcLines.length) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No SSRC lines for streamId ${\r\n                    streamId} for remote track, media type: ${mediaType}`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\r\n    // with global error handler anyway\r\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\r\n    const trackSsrc = Number(ssrcStr);\r\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\r\n\r\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `Invalid SSRC: ${ssrcStr} for remote track, msid: ${\r\n                    streamId} media type: ${mediaType}`));\r\n\r\n        // Abort\r\n        return;\r\n    } else if (!ownerEndpointId) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No SSRC owner known for: ${\r\n                    trackSsrc} for remote track, msid: ${\r\n                    streamId} media type: ${mediaType}`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    let sourceName;\r\n\r\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n        sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\r\n\r\n        // If source name was not signaled, we'll generate one which allows testing signaling\r\n        // when mixing legacy(mobile) with new clients.\r\n        if (!sourceName) {\r\n            sourceName = getSourceNameForJitsiTrack(ownerEndpointId, mediaType, 0);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line no-undef\r\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},`\r\n        + `type=${mediaType},sourceName=${sourceName}]`);\r\n\r\n    const peerMediaInfo = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType, sourceName);\r\n\r\n    if (!peerMediaInfo) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\r\n\r\n        return;\r\n    }\r\n\r\n    const muted = peerMediaInfo.muted;\r\n    const videoType = peerMediaInfo.videoType; // can be undefined\r\n\r\n    // eslint-disable-next-line no-undef\r\n    this._createRemoteTrack(\r\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\r\n};\r\n\r\n// FIXME cleanup params\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Initializes a new JitsiRemoteTrack instance with the data provided by\r\n * the signaling layer and SDP.\r\n *\r\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\r\n * @param {MediaStream} stream the WebRTC stream instance\r\n * @param {MediaStreamTrack} track the WebRTC track instance\r\n * @param {MediaType} mediaType the track's type of the media\r\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\r\n * @param {number} ssrc the track's main SSRC number\r\n * @param {boolean} muted the initial muted status\r\n */\r\n TraceablePeerConnection.prototype._createRemoteTrack = function(\r\n        ownerEndpointId,\r\n        stream,\r\n        track,\r\n        mediaType,\r\n        videoType,\r\n        ssrc,\r\n        muted,\r\n        sourceName) {\r\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\r\n\r\n    if (!remoteTracksMap) {\r\n        remoteTracksMap = new Map();\r\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\r\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\r\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\r\n    }\r\n\r\n    const userTracksByMediaType = remoteTracksMap.get(mediaType);\r\n\r\n    if (userTracksByMediaType?.size\r\n        && Array.from(userTracksByMediaType).find(jitsiTrack => jitsiTrack.getTrack() === track)) {\r\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\r\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\r\n\r\n        return;\r\n    } else if (userTracksByMediaType?.size && !FeatureFlags.isSourceNameSignalingEnabled()) {\r\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\r\n            + 'deleting the existing track');\r\n        const existingTrack = Array.from(userTracksByMediaType)[0];\r\n\r\n        // The exisiting track needs to be removed here. This happens on Safari sometimes when a SSRC is removed from\r\n        // the remote description and the browser doesn't fire a 'removetrack' event on the associated MediaStream.\r\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\r\n    }\r\n\r\n    const remoteTrack\r\n        = new JitsiRemoteTrack(\r\n                this.rtc,\r\n                this.rtc.conference,\r\n                ownerEndpointId,\r\n                stream,\r\n                track,\r\n                mediaType,\r\n                videoType,\r\n                ssrc,\r\n                muted,\r\n                this.isP2P,\r\n                sourceName);\r\n\r\n    userTracksByMediaType.add(remoteTrack);\r\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Handles remote stream removal.\r\n * @param stream the WebRTC MediaStream object which is being removed from the\r\n * PeerConnection\r\n */\r\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\r\n    if (!RTC.isUserStream(stream)) {\r\n        const id = RTC.getStreamID(stream);\r\n\r\n        logger.info(\r\n            `Ignored remote 'stream removed' event for non-user stream ${id}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Call remoteTrackRemoved for each track in the stream\r\n    const streamVideoTracks = stream.getVideoTracks();\r\n\r\n    for (const videoTrack of streamVideoTracks) {\r\n        this._remoteTrackRemoved(stream, videoTrack);\r\n    }\r\n    const streamAudioTracks = stream.getAudioTracks();\r\n\r\n    for (const audioTrack of streamAudioTracks) {\r\n        this._remoteTrackRemoved(stream, audioTrack);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles remote media track removal.\r\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\r\n * of the track.\r\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\r\n * removed from the PeerConnection.\r\n */\r\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\r\n        stream,\r\n        track) {\r\n    const streamId = RTC.getStreamID(stream);\r\n    const trackId = track && RTC.getTrackID(track);\r\n\r\n    logger.info(`${this} - remote track removed: ${streamId}, ${trackId}`);\r\n\r\n    if (!streamId) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(`${this} remote track removal failed - no stream ID`));\r\n\r\n        return;\r\n    }\r\n\r\n    if (!trackId) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(`${this} remote track removal failed - no track ID`));\r\n\r\n        return;\r\n    }\r\n\r\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\r\n        // NOTE this warning is always printed when user leaves the room,\r\n        // because we remove remote tracks manually on MUC member left event,\r\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\r\n        // ignore this warning, but still it's better to keep it printed for\r\n        // debugging purposes.\r\n        //\r\n        // We could change the behaviour to emit track removed only from here,\r\n        // but the order of the events will change and consuming apps could\r\n        // behave unexpectedly (the \"user left\" event would come before \"track\r\n        // removed\" events).\r\n        logger.warn(\r\n            `${this} Removed track not found for msid: ${streamId},\r\n             track id: ${trackId}`);\r\n    }\r\n};\r\n\r\n/**\r\n * Finds remote track by it's stream and track ids.\r\n * @param {string} streamId the media stream id as defined by the WebRTC\r\n * @param {string} trackId the media track id as defined by the WebRTC\r\n * @return {JitsiRemoteTrack|undefined} the track's instance or\r\n * <tt>undefined</tt> if not found.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\r\n        streamId,\r\n        trackId) {\r\n    // .find will break the loop once the first match is found\r\n    for (const endpointTrackMap of this.remoteTracks.values()) {\r\n        for (const mediaTrack of endpointTrackMap.values()) {\r\n            // FIXME verify and try to use ===\r\n            /* eslint-disable eqeqeq */\r\n            if (mediaTrack.getStreamId() == streamId\r\n                && mediaTrack.getTrackId() == trackId) {\r\n                return mediaTrack;\r\n            }\r\n\r\n            /* eslint-enable eqeqeq */\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Removes all JitsiRemoteTracks associated with given MUC nickname\r\n * (resource part of the JID). Returns array of removed tracks.\r\n *\r\n * @param {string} owner - The resource part of the MUC JID.\r\n * @returns {JitsiRemoteTrack[]}\r\n */\r\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\r\n    const removedTracks = [];\r\n    const remoteTracksMap = this.remoteTracks.get(owner);\r\n\r\n    if (remoteTracksMap) {\r\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\r\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\r\n\r\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\r\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\r\n\r\n        this.remoteTracks.delete(owner);\r\n    }\r\n\r\n    logger.debug(\r\n        `${this} removed remote tracks for ${owner} count: ${\r\n            removedTracks.length}`);\r\n\r\n    return removedTracks;\r\n};\r\n\r\n/**\r\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\r\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\r\n * @param {JitsiRemoteTrack} toBeRemoved\r\n */\r\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\r\n    toBeRemoved.dispose();\r\n    const participantId = toBeRemoved.getParticipantId();\r\n    const remoteTracksMap = this.remoteTracks.get(participantId);\r\n\r\n    if (!remoteTracksMap) {\r\n        logger.error(\r\n            `removeRemoteTrack: no remote tracks map for ${participantId}`);\r\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\r\n        logger.error(\r\n            `Failed to remove ${toBeRemoved} - type mapping messed up ?`);\r\n    }\r\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\r\n};\r\n\r\n/**\r\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\r\n * track ids.\r\n *\r\n * @param {string} streamId the media stream id as defined by the WebRTC\r\n * @param {string} trackId the media track id as defined by the WebRTC\r\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\r\n * <tt>undefined</tt> if no track matching given stream and track ids was\r\n * found.\r\n */\r\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\r\n        streamId,\r\n        trackId) {\r\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\r\n\r\n    if (toBeRemoved) {\r\n        this._removeRemoteTrack(toBeRemoved);\r\n    }\r\n\r\n    return toBeRemoved;\r\n};\r\n\r\n/**\r\n * @typedef {Object} SSRCGroupInfo\r\n * @property {Array<number>} ssrcs group's SSRCs\r\n * @property {string} semantics\r\n */\r\n/**\r\n * @typedef {Object} TrackSSRCInfo\r\n * @property {Array<number>} ssrcs track's SSRCs\r\n * @property {Array<SSRCGroupInfo>} groups track's SSRC groups\r\n */\r\n/**\r\n * Returns map with keys msid and <tt>TrackSSRCInfo</tt> values.\r\n * @param {Object} desc the WebRTC SDP instance.\r\n * @return {Map<string,TrackSSRCInfo>}\r\n */\r\nfunction extractSSRCMap(desc) {\r\n    /**\r\n     * Track SSRC infos mapped by stream ID (msid)\r\n     * @type {Map<string,TrackSSRCInfo>}\r\n     */\r\n    const ssrcMap = new Map();\r\n\r\n    /**\r\n     * Groups mapped by primary SSRC number\r\n     * @type {Map<number,Array<SSRCGroupInfo>>}\r\n     */\r\n    const groupsMap = new Map();\r\n\r\n    if (typeof desc !== 'object' || desc === null\r\n        || typeof desc.sdp !== 'string') {\r\n        logger.warn('An empty description was passed as an argument.');\r\n\r\n        return ssrcMap;\r\n    }\r\n\r\n    const session = transform.parse(desc.sdp);\r\n\r\n    if (!Array.isArray(session.media)) {\r\n        return ssrcMap;\r\n    }\r\n\r\n    for (const mLine of session.media) {\r\n        if (!Array.isArray(mLine.ssrcs)) {\r\n            continue; // eslint-disable-line no-continue\r\n        }\r\n\r\n        if (Array.isArray(mLine.ssrcGroups)) {\r\n            for (const group of mLine.ssrcGroups) {\r\n                if (typeof group.semantics !== 'undefined'\r\n                    && typeof group.ssrcs !== 'undefined') {\r\n                    // Parse SSRCs and store as numbers\r\n                    const groupSSRCs\r\n                        = group.ssrcs.split(' ').map(\r\n                            ssrcStr => parseInt(ssrcStr, 10));\r\n                    const primarySSRC = groupSSRCs[0];\r\n\r\n                    // Note that group.semantics is already present\r\n\r\n                    group.ssrcs = groupSSRCs;\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    if (!groupsMap.has(primarySSRC)) {\r\n                        groupsMap.set(primarySSRC, []);\r\n                    }\r\n                    groupsMap.get(primarySSRC).push(group);\r\n                }\r\n            }\r\n        }\r\n        for (const ssrc of mLine.ssrcs) {\r\n            if (ssrc.attribute !== 'msid') {\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            const msid = ssrc.value;\r\n            let ssrcInfo = ssrcMap.get(msid);\r\n\r\n            if (!ssrcInfo) {\r\n                ssrcInfo = {\r\n                    ssrcs: [],\r\n                    groups: [],\r\n                    msid\r\n                };\r\n                ssrcMap.set(msid, ssrcInfo);\r\n            }\r\n\r\n            const ssrcNumber = ssrc.id;\r\n\r\n            ssrcInfo.ssrcs.push(ssrcNumber);\r\n\r\n            if (groupsMap.has(ssrcNumber)) {\r\n                const ssrcGroups = groupsMap.get(ssrcNumber);\r\n\r\n                for (const group of ssrcGroups) {\r\n                    ssrcInfo.groups.push(group);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return ssrcMap;\r\n}\r\n\r\n/**\r\n * Takes a SessionDescription object and returns a \"normalized\" version.\r\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\r\n * only SSRCs.\r\n */\r\nconst normalizePlanB = function(desc) {\r\n    if (typeof desc !== 'object' || desc === null\r\n        || typeof desc.sdp !== 'string') {\r\n        logger.warn('An empty description was passed as an argument.');\r\n\r\n        return desc;\r\n    }\r\n\r\n    // eslint-disable-next-line no-shadow\r\n    const transform = require('sdp-transform');\r\n    const session = transform.parse(desc.sdp);\r\n\r\n    if (typeof session !== 'undefined'\r\n            && typeof session.media !== 'undefined'\r\n            && Array.isArray(session.media)) {\r\n        session.media.forEach(mLine => {\r\n\r\n            // Chrome appears to be picky about the order in which a=ssrc lines\r\n            // are listed in an m-line when rtx is enabled (and thus there are\r\n            // a=ssrc-group lines with FID semantics). Specifically if we have\r\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\r\n            // the \"a=ssrc:S1\" lines, SRD fails.\r\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\r\n            // first.\r\n            const firstSsrcs = [];\r\n            const newSsrcLines = [];\r\n\r\n            if (typeof mLine.ssrcGroups !== 'undefined'\r\n                && Array.isArray(mLine.ssrcGroups)) {\r\n                mLine.ssrcGroups.forEach(group => {\r\n                    if (typeof group.semantics !== 'undefined'\r\n                        && group.semantics === 'FID') {\r\n                        if (typeof group.ssrcs !== 'undefined') {\r\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (Array.isArray(mLine.ssrcs)) {\r\n                let i;\r\n\r\n                for (i = 0; i < mLine.ssrcs.length; i++) {\r\n                    if (typeof mLine.ssrcs[i] === 'object'\r\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\r\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\r\n                        newSsrcLines.push(mLine.ssrcs[i]);\r\n                        delete mLine.ssrcs[i];\r\n                    }\r\n                }\r\n\r\n                for (i = 0; i < mLine.ssrcs.length; i++) {\r\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\r\n                        newSsrcLines.push(mLine.ssrcs[i]);\r\n                    }\r\n                }\r\n\r\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\r\n            }\r\n        });\r\n    }\r\n\r\n    const resStr = transform.write(session);\r\n\r\n\r\n    return new RTCSessionDescription({\r\n        type: desc.type,\r\n        sdp: resStr\r\n    });\r\n};\r\n\r\n/**\r\n * Unified plan differentiates a remote track not associated with a stream using\r\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\r\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\r\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\r\n * line. Normally the ssrcs are not used by the client, as the bridge controls\r\n * media flow, but keep one reference to the ssrc for the p2p case.\r\n *\r\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\r\n * @private\r\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\r\n */\r\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\r\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\r\n        return ssrcLines;\r\n    }\r\n\r\n    let filteredLines = [ ...ssrcLines ];\r\n\r\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\r\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\r\n        .map(ssrcLine => ssrcLine.id);\r\n\r\n    problematicSsrcIds.forEach(ssrcId => {\r\n        // Find the cname which is to be modified and left in.\r\n        const cnameLine = filteredLines.find(line =>\r\n            line.id === ssrcId && line.attribute === 'cname');\r\n\r\n        cnameLine.value = `recvonly-${ssrcId}`;\r\n\r\n        // Remove all of lines for the ssrc.\r\n        filteredLines\r\n            = filteredLines.filter(line => line.id !== ssrcId);\r\n\r\n        // But re-add the cname line so there is a reference kept to the ssrc\r\n        // in the SDP.\r\n        filteredLines.push(cnameLine);\r\n    });\r\n\r\n    return filteredLines;\r\n}\r\n\r\n/**\r\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\r\n * @param {Object} localDescription the SDP object as defined by WebRTC.\r\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\r\n */\r\nconst enforceSendRecv = function(localDescription, options) {\r\n    if (!localDescription) {\r\n        throw new Error('No local description passed in.');\r\n    }\r\n\r\n    const transformer = new SdpTransformWrap(localDescription.sdp);\r\n    const audioMedia = transformer.selectMedia('audio');\r\n    let changed = false;\r\n\r\n    if (audioMedia && audioMedia.direction !== 'sendrecv') {\r\n        if (options.startSilent) {\r\n            audioMedia.direction = 'inactive';\r\n        } else {\r\n            audioMedia.direction = 'sendrecv';\r\n        }\r\n\r\n        changed = true;\r\n    }\r\n\r\n    const videoMedia = transformer.selectMedia('video');\r\n\r\n    if (videoMedia && videoMedia.direction !== 'sendrecv') {\r\n        videoMedia.direction = 'sendrecv';\r\n        changed = true;\r\n    }\r\n\r\n    if (changed) {\r\n        return new RTCSessionDescription({\r\n            type: localDescription.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n\r\n    return localDescription;\r\n};\r\n\r\n/**\r\n *\r\n * @param {JitsiLocalTrack} localTrack\r\n */\r\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\r\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\r\n\r\n    return ssrcInfo && ssrcInfo.ssrcs[0];\r\n};\r\n\r\n/**\r\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\r\n * same msid but no ssrc-group, since unified plan signals the simulcast\r\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\r\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\r\n * an ssrc-group line to make Jicofo happy.\r\n * @param desc A session description object (with 'type' and 'sdp' fields)\r\n * @return A session description object with its sdp field modified to\r\n * contain an inject ssrc-group for simulcast\r\n */\r\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\r\n    = function(desc) {\r\n        const sdp = transform.parse(desc.sdp);\r\n        const video = sdp.media.find(mline => mline.type === 'video');\r\n\r\n        // Check if the browser supports RTX, add only the primary ssrcs to the\r\n        // SIM group if that is the case.\r\n        video.ssrcGroups = video.ssrcGroups || [];\r\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\r\n\r\n        if (video.simulcast || video.simulcast_03) {\r\n            const ssrcs = [];\r\n\r\n            if (fidGroups && fidGroups.length) {\r\n                fidGroups.forEach(group => {\r\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\r\n                });\r\n            } else {\r\n                video.ssrcs.forEach(ssrc => {\r\n                    if (ssrc.attribute === 'msid') {\r\n                        ssrcs.push(ssrc.id);\r\n                    }\r\n                });\r\n            }\r\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\r\n                // Group already exists, no need to do anything\r\n                return desc;\r\n            }\r\n            video.ssrcGroups.push({\r\n                semantics: 'SIM',\r\n                ssrcs: ssrcs.join(' ')\r\n            });\r\n        }\r\n\r\n        return new RTCSessionDescription({\r\n            type: desc.type,\r\n            sdp: transform.write(sdp)\r\n        });\r\n    };\r\n\r\n/* eslint-disable-next-line vars-on-top */\r\nconst getters = {\r\n    signalingState() {\r\n        return this.peerconnection.signalingState;\r\n    },\r\n    iceConnectionState() {\r\n        return this.peerconnection.iceConnectionState;\r\n    },\r\n    localDescription() {\r\n        let desc = this.peerconnection.localDescription;\r\n\r\n        if (!desc) {\r\n            logger.debug('getLocalDescription no localDescription found');\r\n\r\n            return {};\r\n        }\r\n\r\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\r\n\r\n        // if we're running on FF, transform to Plan B first.\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n        if (browser.usesUnifiedPlan() && !this.isP2P) {\r\n            desc = this.interop.toPlanB(desc);\r\n            this.trace('getLocalDescription::postTransform (Plan B)',\r\n                dumpSDP(desc));\r\n\r\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\r\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\r\n                dumpSDP(desc));\r\n        } else if (!browser.usesUnifiedPlan()) {\r\n            if (browser.doesVideoMuteByStreamRemove()) {\r\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\r\n                logger.debug(\r\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\r\n            }\r\n\r\n            // What comes out of this getter will be signalled over Jingle to\r\n            // the other peer, so we need to make sure the media direction is\r\n            // 'sendrecv' because we won't change the direction later and don't want\r\n            // the other peer to think we can't send or receive.\r\n            //\r\n            // Note that the description we set in chrome does have the accurate\r\n            // direction (e.g. 'recvonly'), since that is technically what is\r\n            // happening (check setLocalDescription impl).\r\n            desc = enforceSendRecv(desc, this.options);\r\n        }\r\n\r\n        // See the method's doc for more info about this transformation.\r\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\r\n\r\n        return desc;\r\n    },\r\n    remoteDescription() {\r\n        let desc = this.peerconnection.remoteDescription;\r\n\r\n        if (!desc) {\r\n            logger.debug('getRemoteDescription no remoteDescription found');\r\n\r\n            return {};\r\n        }\r\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\r\n\r\n        // if we're running on FF, transform to Plan B first.\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n        if (browser.usesUnifiedPlan()) {\r\n            if (this.isP2P) {\r\n                desc = this._adjustRemoteMediaDirection(desc);\r\n            } else {\r\n                desc = this.interop.toPlanB(desc);\r\n                this.trace(\r\n                    'getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\r\n            }\r\n        }\r\n\r\n        return desc;\r\n    }\r\n};\r\n\r\nObject.keys(getters).forEach(prop => {\r\n    Object.defineProperty(\r\n        TraceablePeerConnection.prototype,\r\n        prop, {\r\n            get: getters[prop]\r\n        }\r\n    );\r\n});\r\n\r\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\r\n    return this.localSSRCs.get(rtcId);\r\n};\r\n\r\n/**\r\n * Munges the order of the codecs in the SDP passed based on the preference\r\n * set through config.js settings. All instances of the specified codec are\r\n * moved up to the top of the list when it is preferred. The specified codec\r\n * is deleted from the list if the configuration specifies that the codec be\r\n * disabled.\r\n * @param {RTCSessionDescription} description that needs to be munged.\r\n * @returns {RTCSessionDescription} the munged description.\r\n */\r\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    // if (!this.codecPreference || browser.supportsCodecPreferences()) {\r\n    //     return description;\r\n    // }\r\n\r\n    // const parsedSdp = transform.parse(description.sdp);\r\n    // const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\r\n\r\n    // if (this.codecPreference.enable) {\r\n    //     SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\r\n\r\n    //     // Strip the high profile H264 codecs on mobile clients for p2p connection.\r\n    //     // High profile codecs give better quality at the expense of higher load which\r\n    //     // we do not want on mobile clients.\r\n    //     // Jicofo offers only the baseline code for the jvb connection.\r\n    //     // TODO - add check for mobile browsers once js-utils provides that check.\r\n    //     if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\r\n    //         SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\r\n    //     }\r\n    // } else {\r\n    //     SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\r\n    // }\r\n\r\n    // return new RTCSessionDescription({\r\n    //     type: description.type,\r\n    //     sdp: transform.write(parsedSdp)\r\n    // });\r\n\r\n    if (!this.codecPreference) {\r\n        return description;\r\n    }\r\n\r\n    const parsedSdp = transform.parse(description.sdp);\r\n\r\n    // Only the m-line that defines the source the browser will be sending should need to change.\r\n    // This is typically the first m-line with the matching media type.\r\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\r\n\r\n    if (!mLine) {\r\n        return description;\r\n    }\r\n\r\n    if (this.codecPreference.enable) {\r\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\r\n\r\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\r\n        // High profile codecs give better quality at the expense of higher load which\r\n        // we do not want on mobile clients.\r\n        // Jicofo offers only the baseline code for the jvb connection.\r\n        // TODO - add check for mobile browsers once js-utils provides that check.\r\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\r\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\r\n        }\r\n\r\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\r\n        // as soon as the browser switches to VP9.\r\n        if (this.codecPreference.mimeType === CodecMimeType.VP9\r\n            && this.getConfiguredVideoCodec() === CodecMimeType.VP9) {\r\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\r\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\r\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\r\n\r\n            // Use only the HD bitrate for now as there is no API available yet for configuring\r\n            // the bitrates on the individual SVC layers.\r\n            mLine.bandwidth = [ {\r\n                type: 'AS',\r\n                limit\r\n            } ];\r\n        } else {\r\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\r\n            // This is needed on react native clients as react-native-webrtc returns the\r\n            // SDP that the application passed instead of returning the SDP off the native side.\r\n            // This line automatically gets cleared on web on every renegotiation.\r\n            mLine.bandwidth = undefined;\r\n        }\r\n    } else {\r\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\r\n    }\r\n\r\n    return new RTCSessionDescription({\r\n        type: description.type,\r\n        sdp: transform.write(parsedSdp)\r\n    });\r\n};\r\n\r\n/**\r\n * Checks if given track belongs to this peerconnection instance.\r\n *\r\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\r\n * @returns {boolean}\r\n */\r\nTraceablePeerConnection.prototype.containsTrack = function(track) {\r\n    if (track.isLocal()) {\r\n        return this.localTracks.has(track.rtcId);\r\n    }\r\n\r\n    const participantId = track.getParticipantId();\r\n    const remoteTracksMap = this.remoteTracks.get(participantId);\r\n\r\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\r\n};\r\n\r\n/**\r\n * Add {@link JitsiLocalTrack} to this TPC.\r\n * @param {JitsiLocalTrack} track\r\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\r\n * @returns {Promise<void>} - resolved when done.\r\n */\r\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\r\n    const rtcId = track.rtcId;\r\n\r\n    logger.info(`add ${track} to: ${this}`);\r\n\r\n    if (this.localTracks.has(rtcId)) {\r\n\r\n        return Promise.reject(new Error(`${track} is already in ${this}`));\r\n    }\r\n\r\n    this.localTracks.set(rtcId, track);\r\n\r\n    // For p2p unified case, use addTransceiver API to add the tracks on the peerconnection.\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    if (browser.usesUnifiedPlan() && this.isP2P) {\r\n        try {\r\n            this.tpcUtils.addTrack(track, isInitiator);\r\n        } catch (error) {\r\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n    } else {\r\n        // In all other cases, i.e., plan-b and unified plan bridge case, use addStream API to\r\n        // add the track to the peerconnection.\r\n        // TODO - addTransceiver doesn't generate a MSID for the stream, which is needed for signaling\r\n        // the ssrc to Jicofo. Switch to using UUID as MSID when addTransceiver is used in Unified plan\r\n        // JVB connection case as well.\r\n        const webrtcStream = track.getOriginalStream();\r\n\r\n        if (webrtcStream) {\r\n            this._addStream(webrtcStream);\r\n\r\n        // It's not ok for a track to not have a WebRTC stream if:\r\n        } else if (!browser.doesVideoMuteByStreamRemove()\r\n                    || track.isAudioTrack()\r\n                    || (track.isVideoTrack() && !track.isMuted())) {\r\n            return Promise.reject(new Error(`${this} no WebRTC stream for: ${track}`));\r\n        }\r\n\r\n        // Muted video tracks do not have WebRTC stream\r\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\r\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\r\n\r\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\r\n            const simGroup\r\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\r\n\r\n            if (simGroup) {\r\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\r\n            }\r\n            const fidGroups\r\n                = ssrcInfo.groups.filter(\r\n                    groupInfo => groupInfo.semantics === 'FID');\r\n\r\n            if (fidGroups) {\r\n                const rtxSsrcMapping = new Map();\r\n\r\n                fidGroups.forEach(fidGroup => {\r\n                    const primarySsrc = fidGroup.ssrcs[0];\r\n                    const rtxSsrc = fidGroup.ssrcs[1];\r\n\r\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\r\n                });\r\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\r\n            }\r\n        }\r\n    }\r\n\r\n    let promiseChain = Promise.resolve();\r\n\r\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\r\n    if (browser.isFirefox()) {\r\n        promiseChain = this.tpcUtils.setEncodings(track);\r\n    }\r\n\r\n    return promiseChain;\r\n};\r\n\r\n/**\r\n * Adds local track as part of the unmute operation.\r\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\r\n * operation\r\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\r\n * state has changed and renegotiation is required, false if no renegotiation is needed or\r\n * Promise is rejected when something goes wrong.\r\n */\r\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\r\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\r\n        // Abort\r\n        return Promise.reject('Track not found on the peerconnection');\r\n    }\r\n\r\n    logger.info(`Adding ${track} as unmute to ${this}`);\r\n    const webRtcStream = track.getOriginalStream();\r\n\r\n    if (!webRtcStream) {\r\n        logger.error(\r\n            `Unable to add ${track} as unmute to ${this} - no WebRTC stream`);\r\n\r\n        return Promise.reject('Stream not found');\r\n    }\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        return this.tpcUtils.replaceTrack(null, track).then(() => false);\r\n    }\r\n\r\n    this._addStream(webRtcStream);\r\n\r\n    return Promise.resolve(true);\r\n};\r\n\r\n/**\r\n * Adds WebRTC media stream to the underlying PeerConnection\r\n * @param {MediaStream} mediaStream\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\r\n    this.peerconnection.addStream(mediaStream);\r\n    this._addedStreams.push(mediaStream);\r\n};\r\n\r\n/**\r\n * Removes WebRTC media stream from the underlying PeerConection\r\n * @param {MediaStream} mediaStream\r\n */\r\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\r\n    this.peerconnection.removeStream(mediaStream);\r\n    this._addedStreams\r\n        = this._addedStreams.filter(stream => stream !== mediaStream);\r\n};\r\n\r\n/**\r\n * This method when called will check if given <tt>localTrack</tt> belongs to\r\n * this TPC (that it has been previously added using {@link addTrack}). If the\r\n * track does not belong an error message will be logged.\r\n * @param {string} methodName the method name that will be logged in an error\r\n * message\r\n * @param {JitsiLocalTrack} localTrack\r\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\r\n * <tt>false</tt> otherwise.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\r\n        methodName,\r\n        localTrack) {\r\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\r\n\r\n    if (!doesBelong) {\r\n        logger.error(\r\n            `${methodName}: ${localTrack} does not belong to ${this}`);\r\n    }\r\n\r\n    return doesBelong;\r\n};\r\n\r\n/**\r\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\r\n * the underlying WebRTC PeerConnection.\r\n * @param {MediaStream} mediaStream\r\n * @returns {boolean}\r\n */\r\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\r\n    return this._addedStreams.indexOf(mediaStream) > -1;\r\n};\r\n\r\n/**\r\n * Remove local track from this TPC.\r\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\r\n *\r\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\r\n *       The same applies to addTrack.\r\n */\r\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\r\n    const webRtcStream = localTrack.getOriginalStream();\r\n\r\n    this.trace(\r\n        'removeStream',\r\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\r\n\r\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\r\n        // Abort - nothing to be done here\r\n        return;\r\n    }\r\n    this.localTracks.delete(localTrack.rtcId);\r\n    this.localSSRCs.delete(localTrack.rtcId);\r\n\r\n    if (webRtcStream) {\r\n        this.peerconnection.removeStream(webRtcStream);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns the sender corresponding to the given media type.\r\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\r\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\r\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\r\n};\r\n\r\n/**\r\n * Returns the receiver corresponding to the given MediaStreamTrack.\r\n *\r\n * @param {MediaSreamTrack} track - The media stream track used for the search.\r\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\r\n    return this.peerconnection.getReceivers().find(r => r.track === track);\r\n};\r\n\r\n/**\r\n * Returns the sender corresponding to the given MediaStreamTrack.\r\n *\r\n * @param {MediaSreamTrack} track - The media stream track used for the search.\r\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\r\n    return this.peerconnection.getSenders().find(s => s.track === track);\r\n};\r\n\r\n/**\r\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\r\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\r\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\r\n * <tt>oldTrack</tt>\r\n *\r\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\r\n * replaced\r\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\r\n * @returns {Promise<boolean>} - If the promise resolves with true,\r\n * renegotiation will be needed. Otherwise no renegotiation is needed.\r\n */\r\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    // if (browser.usesUnifiedPlan()) {\r\n    //     return this.tpcUtils.replaceTrack(oldTrack, newTrack)\r\n\r\n    //         // renegotiate when SDP is used for simulcast munging\r\n    //         .then(() => this.isSimulcastOn() && browser.usesSdpMungingForSimulcast());\r\n    // }\r\n\r\n    // let promiseChain = Promise.resolve();\r\n\r\n    // if (oldTrack) {\r\n    //     this.removeTrack(oldTrack);\r\n    // }\r\n    // if (newTrack) {\r\n    //     promiseChain = this.addTrack(newTrack);\r\n    // }\r\n\r\n    // return promiseChain.then(() => true);\r\n\r\n    if (!(oldTrack || newTrack)) {\r\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // If a track is being added to the peerconnection for the first time, we want the source signaling to be sent to\r\n    // Jicofo before the mute state is sent over presence. Therefore, trigger a renegotiation in this case. If we\r\n    // rely on \"negotiationneeded\" fired by the browser to signal new ssrcs, the mute state in presence will be sent\r\n    // before the source signaling which is undesirable.\r\n    // Send the presence before signaling for a new screenshare source. This is needed for multi-stream support since\r\n    // videoType needs to be availble at remote track creation time so that a fake tile for screenshare can be added.\r\n    // FIXME - This check needs to be removed when the client switches to the bridge based signaling for tracks.\r\n    const isNewTrackScreenshare = !oldTrack\r\n        && newTrack?.getVideoType() === VideoType.DESKTOP\r\n        && FeatureFlags.isMultiStreamSupportEnabled();\r\n    const negotiationNeeded = !isNewTrackScreenshare && Boolean(!oldTrack || !this.localTracks.has(oldTrack?.rtcId));\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\r\n        const mediaType = newTrack?.getType() ? newTrack?.getType() : oldTrack?.getType();\r\n        const stream = newTrack?.getOriginalStream();\r\n        const promise = newTrack && !stream\r\n\r\n            // Ignore cases when the track is replaced while the device is in a muted state.\r\n            // The track will be replaced again on the peerconnection when the user unmutes.\r\n            ? Promise.resolve()\r\n            : this.tpcUtils.replaceTrack(oldTrack, newTrack);\r\n\r\n        return promise\r\n            .then(transceiver => {\r\n                oldTrack && this.localTracks.delete(oldTrack.rtcId);\r\n                newTrack && this.localTracks.set(newTrack.rtcId, newTrack);\r\n\r\n                // Update the local SSRC cache for the case when one track gets replaced with another and no\r\n                // renegotiation is triggered as a result of this.\r\n                if (oldTrack && newTrack) {\r\n                    const oldTrackSSRC = this.localSSRCs.get(oldTrack.rtcId);\r\n\r\n                    if (oldTrackSSRC) {\r\n                        this.localSSRCs.delete(oldTrack.rtcId);\r\n                        this.localSSRCs.set(newTrack.rtcId, oldTrackSSRC);\r\n                    }\r\n                }\r\n                const mediaActive = mediaType === MediaType.AUDIO\r\n                    ? this.audioTransferActive\r\n                    : this.videoTransferActive;\r\n\r\n                // Set the transceiver direction only if media is not suspended on the connection. This happens when\r\n                // the client is using the p2p connection. Transceiver direction is updated when media is resumed on\r\n                // this connection again.\r\n                if (transceiver && mediaActive) {\r\n                    transceiver.direction = newTrack ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\r\n                } else if (transceiver) {\r\n                    transceiver.direction = MediaDirection.INACTIVE;\r\n                }\r\n\r\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\r\n                // for the newly added track using SDP munging which happens during the renegotiation.\r\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\r\n                    ? Promise.resolve()\r\n                    : this.tpcUtils.setEncodings(newTrack);\r\n\r\n                // Force renegotiation only when the source is added for the first time.\r\n                return configureEncodingsPromise.then(() => negotiationNeeded);\r\n            });\r\n    }\r\n\r\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\r\n\r\n    let promiseChain = Promise.resolve();\r\n\r\n    if (oldTrack) {\r\n        this.removeTrack(oldTrack);\r\n    }\r\n    if (newTrack) {\r\n        promiseChain = this.addTrack(newTrack);\r\n    }\r\n\r\n    return promiseChain.then(() => true);\r\n};\r\n\r\n/**\r\n * Removes local track as part of the mute operation.\r\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\r\n * the mute operation.\r\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\r\n * state has changed and renegotiation is required, false if no renegotiation is needed or\r\n * Promise is rejected when something goes wrong.\r\n */\r\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\r\n    const webRtcStream = localTrack.getOriginalStream();\r\n\r\n    this.trace(\r\n        'removeStreamMute',\r\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\r\n\r\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\r\n        // Abort - nothing to be done here\r\n        return Promise.reject('Track not found in the peerconnection');\r\n    }\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        return this.tpcUtils.replaceTrack(localTrack, null).then(() => false);\r\n    }\r\n\r\n    if (webRtcStream) {\r\n        logger.info(\r\n            `Removing ${localTrack} as mute from ${this}`);\r\n        this._removeStream(webRtcStream);\r\n\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    logger.error(`removeStreamMute - no WebRTC stream for ${localTrack}`);\r\n\r\n    return Promise.reject('Stream not found');\r\n};\r\n\r\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\r\n    this.trace('createDataChannel', label, opts);\r\n\r\n    return this.peerconnection.createDataChannel(label, opts);\r\n};\r\n\r\n/**\r\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\r\n * in the SDP so that simulcast is properly activated.\r\n *\r\n * @param {Object} localSdp the WebRTC session description instance for\r\n * the local description.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\r\n        localSdp) {\r\n    let sdpStr = localSdp.sdp;\r\n\r\n    const videoStartIndex = sdpStr.indexOf('m=video');\r\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\r\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\r\n\r\n    if (simStartIndex === -1\r\n        || otherStartIndex === -1\r\n        || otherStartIndex === simStartIndex) {\r\n        return localSdp;\r\n    }\r\n\r\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\r\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\r\n\r\n    sdpStr = sdpStr.replace(simStr, '');\r\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\r\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\r\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\r\n    const simStrTrimmed = simStr.trim();\r\n    const sdpTail = sdpStr.slice(otherEndIndex);\r\n\r\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\r\n\r\n    return new RTCSessionDescription({\r\n        type: localSdp.type,\r\n        sdp: sdpStr\r\n    });\r\n};\r\n\r\n/**\r\n * Will adjust audio and video media direction in the given SDP object to\r\n * reflect the current status of the {@link audioTransferActive} and\r\n * {@link videoTransferActive} flags.\r\n * @param {Object} localDescription the WebRTC session description instance for\r\n * the local description.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(\r\n        localDescription) {\r\n    const transformer = new SdpTransformWrap(localDescription.sdp);\r\n    let modifiedDirection = false;\r\n    const audioMedia = transformer.selectMedia('audio');\r\n\r\n    if (audioMedia) {\r\n        const desiredAudioDirection\r\n            = this._getDesiredMediaDirection(MediaType.AUDIO);\r\n\r\n        if (audioMedia.direction !== desiredAudioDirection) {\r\n            audioMedia.direction = desiredAudioDirection;\r\n            logger.info(\r\n                `Adjusted local audio direction to ${desiredAudioDirection}`);\r\n            modifiedDirection = true;\r\n        }\r\n    } else {\r\n        logger.warn('No \"audio\" media found int the local description');\r\n    }\r\n\r\n    const videoMedia = transformer.selectMedia('video');\r\n\r\n    if (videoMedia) {\r\n        const desiredVideoDirection\r\n            = this._getDesiredMediaDirection(MediaType.VIDEO);\r\n\r\n        if (videoMedia.direction !== desiredVideoDirection) {\r\n            videoMedia.direction = desiredVideoDirection;\r\n            logger.info(\r\n                `Adjusted local video direction to ${desiredVideoDirection}`);\r\n            modifiedDirection = true;\r\n        }\r\n    } else {\r\n        logger.warn('No \"video\" media found in the local description');\r\n    }\r\n\r\n    if (modifiedDirection) {\r\n        return new RTCSessionDescription({\r\n            type: localDescription.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n\r\n    return localDescription;\r\n};\r\n\r\n/**\r\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\r\n * media connection.\r\n *\r\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\r\n * @returns the transformed remoteDescription.\r\n * @private\r\n */\r\n TraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\r\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\r\n\r\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\r\n        const media = transformer.selectMedia(mediaType)?.[0];\r\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\r\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\r\n\r\n        media.direction = hasLocalSource && hasRemoteSource\r\n            ? MediaDirection.SENDRECV\r\n            : hasLocalSource\r\n                ? MediaDirection.RECVONLY\r\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\r\n    });\r\n\r\n    return new RTCSessionDescription({\r\n        type: remoteDescription.type,\r\n        sdp: transformer.toRawSDP()\r\n    });\r\n}\r\n\r\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\r\n    let localSdp = description;\r\n\r\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\r\n\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    // Munge the order of the codecs based on the preferences set through config.js\r\n    localSdp = this._mungeOpus(localSdp);\r\n\r\n    if (!browser.usesUnifiedPlan()) {\r\n        localSdp = this._adjustLocalMediaDirection(localSdp);\r\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\r\n    }\r\n\r\n    if (!this._usesTransceiverCodecPreferences) {\r\n        localSdp = this._mungeCodecOrder(localSdp);\r\n    }\r\n\r\n    this.trace('setLocalDescription::postTransform (Unified Plan)', dumpSDP(localSdp));\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.peerconnection.setLocalDescription(localSdp)\r\n            .then(() => {\r\n                this.trace('setLocalDescriptionOnSuccess');\r\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\r\n\r\n                if (localUfrag !== this.localUfrag) {\r\n                    this.localUfrag = localUfrag;\r\n                    this.eventEmitter.emit(\r\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\r\n                }\r\n                resolve();\r\n            }, err => {\r\n                this.trace('setLocalDescriptionOnFailure', err);\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\r\n                    err, this);\r\n                reject(err);\r\n            });\r\n    });\r\n};\r\n\r\n/**\r\n * Enables/disables audio media transmission on this peer connection. When\r\n * disabled the SDP audio media direction in the local SDP will be adjusted to\r\n * 'inactive' which means that no data will be sent nor accepted, but\r\n * the connection should be kept alive.\r\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\r\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\r\n * no effect.\r\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\r\n * needs to be executed in order for the changes to take effect or\r\n * <tt>false</tt> if the given value was the same as the previous one.\r\n * @public\r\n */\r\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\r\n    logger.debug(`${this} audio transfer active: ${active}`);\r\n    const changed = this.audioTransferActive !== active;\r\n\r\n    this.audioTransferActive = active;\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        this.tpcUtils.setAudioTransferActive(active);\r\n\r\n        // false means no renegotiation up the chain which is not needed in the Unified mode\r\n        return false;\r\n    }\r\n\r\n    return changed;\r\n};\r\n\r\n/**\r\n * Sets the degradation preference on the video sender. This setting determines if\r\n * resolution or framerate will be preferred when bandwidth or cpu is constrained.\r\n * Sets it to 'maintain-framerate' when a camera track is added to the pc, sets it\r\n * to 'maintain-resolution' when a desktop track is being shared instead.\r\n * @returns {Promise<void>}\r\n */\r\nTraceablePeerConnection.prototype.setSenderVideoDegradationPreference = function() {\r\n    if (!this.peerconnection.getSenders) {\r\n        logger.debug('Browser does not support RTCRtpSender');\r\n\r\n        return Promise.resolve();\r\n    }\r\n    const localVideoTrack = this.getLocalVideoTrack();\r\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!parameters.encodings || !parameters.encodings.length) {\r\n        return Promise.resolve();\r\n    }\r\n    for (const encoding in parameters.encodings) {\r\n        if (parameters.encodings.hasOwnProperty(encoding)) {\r\n            const preference = localVideoTrack.videoType === VideoType.CAMERA\r\n                ? DEGRADATION_PREFERENCE_CAMERA\r\n                : DEGRADATION_PREFERENCE_DESKTOP;\r\n\r\n            logger.info(`Setting video sender degradation preference on ${this} to ${preference}`);\r\n            parameters.encodings[encoding].degradationPreference = preference;\r\n        }\r\n    }\r\n\r\n    return videoSender.setParameters(parameters);\r\n};\r\n\r\n/**\r\n * Sets the max bitrate on the RTCRtpSender so that the\r\n * bitrate of the enocder doesn't exceed the configured value.\r\n * This is needed for the desktop share until spec-complaint\r\n * simulcast is implemented.\r\n * @param {JitsiLocalTrack} localTrack - the local track whose\r\n * max bitrate is to be configured.\r\n * @returns {Promise<void>}\r\n */\r\nTraceablePeerConnection.prototype.setMaxBitRate = function() {\r\n    if (!this.peerconnection.getSenders) {\r\n        logger.debug('Browser doesn\\'t support RTCRtpSender');\r\n\r\n        return Promise.resolve();\r\n    }\r\n    const localVideoTrack = this.getLocalVideoTrack();\r\n\r\n    if (!localVideoTrack) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const videoType = localVideoTrack.videoType;\r\n\r\n    // Apply the maxbitrates on the video track when one of the conditions is met.\r\n    // 1. Max. bitrates for video are specified through videoQuality settings in config.js\r\n    // 2. Track is a desktop track and bitrate is capped using capScreenshareBitrate option in plan-b mode.\r\n    // 3. The client is running in Unified plan mode.\r\n    if (!((this.options.videoQuality && this.options.videoQuality.maxBitratesVideo)\r\n        || (browser.usesPlanB() && this.options.capScreenshareBitrate && videoType === VideoType.DESKTOP)\r\n        || browser.usesUnifiedPlan())) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const presenterEnabled = localVideoTrack._originalStream\r\n        && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\r\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!(parameters.encodings && parameters.encodings.length)) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    if (this.isSimulcastOn()) {\r\n        for (const encoding in parameters.encodings) {\r\n            if (parameters.encodings.hasOwnProperty(encoding)) {\r\n                // On chromium, set a max bitrate of 500 Kbps for screenshare when\r\n                // capScreenshareBitrate is enabled through config.js and presenter\r\n                // is not turned on.\r\n                const bitrate = browser.usesPlanB()\r\n                    && videoType === VideoType.DESKTOP\r\n                    && this.options.capScreenshareBitrate\r\n                    ? presenterEnabled ? this.videoBitrates.high : DESKSTOP_SHARE_RATE\r\n                    : this.tpcUtils.localStreamEncodingsConfig[encoding].maxBitrate;\r\n\r\n                logger.info(`${this} Setting a max bitrate of ${bitrate} bps on layer `\r\n                    + `${this.tpcUtils.localStreamEncodingsConfig[encoding].rid}`);\r\n                parameters.encodings[encoding].maxBitrate = bitrate;\r\n            }\r\n        }\r\n    } else {\r\n        // Do not change the max bitrate for desktop tracks in non-simulcast mode.\r\n        let bitrate = this.videoBitrates.high;\r\n\r\n        if (videoType === VideoType.CAMERA) {\r\n            // Determine the bitrates based on the sender constraint applied for unicast tracks.\r\n            const scaleFactor = this.senderVideoMaxHeight\r\n                ? Math.floor(localVideoTrack.resolution / this.senderVideoMaxHeight)\r\n                : 1;\r\n            const encoding = this.tpcUtils.localStreamEncodingsConfig\r\n                .find(layer => layer.scaleResolutionDownBy === scaleFactor);\r\n\r\n            if (encoding) {\r\n                logger.info(`${this} Setting a max bitrate of ${encoding.maxBitrate} bps on local video track`);\r\n                bitrate = encoding.maxBitrate;\r\n            }\r\n        }\r\n        parameters.encodings[0].maxBitrate = bitrate;\r\n    }\r\n\r\n    return videoSender.setParameters(parameters);\r\n};\r\n\r\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    //this.trace('setRemoteDescription::preTransform', dumpSDP(description));\r\n\r\n    // Munge the order of the codecs based on the preferences set through config.js\r\n    // eslint-disable-next-line no-param-reassign\r\n    //description = this._mungeCodecOrder(description);\r\n\r\n    let remoteDescription = description;\r\n\r\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\r\n\r\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\r\n    remoteDescription = this._mungeOpus(remoteDescription);\r\n\r\n    if (browser.usesPlanB()) {\r\n        // TODO the focus should squeze or explode the remote simulcast\r\n        if (this.isSimulcastOn()) {\r\n            // Determine if \"x-google-conference\" needs to be added to the remote description.\r\n            // We need to add that flag for camera tracks always and for desktop tracks only when\r\n            // capScreenshareBitrate is disabled.\r\n            const enableConferenceFlag = !(this.options.capScreenshareBitrate && !hasCameraTrack(this));\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            description = this.simulcast.mungeRemoteDescription(description, enableConferenceFlag);\r\n            this.trace(\r\n                'setRemoteDescription::postTransform (simulcast)',\r\n                dumpSDP(description));\r\n        }\r\n\r\n        // eslint-disable-next-line no-param-reassign\r\n        description = normalizePlanB(description);\r\n    } else {\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n        // const currentDescription = this.peerconnection.remoteDescription;\r\n\r\n        // // eslint-disable-next-line no-param-reassign\r\n        // description = this.interop.toUnifiedPlan(description, currentDescription);\r\n        // this.trace(\r\n        //     'setRemoteDescription::postTransform (Unified)',\r\n        //     dumpSDP(description));\r\n\r\n        // if (this.isSimulcastOn()) {\r\n        //     // eslint-disable-next-line no-param-reassign\r\n        //     description = this.simulcast.mungeRemoteDescription(description);\r\n\r\n        //     // eslint-disable-next-line no-param-reassign\r\n        //     description = this.tpcUtils.insertUnifiedPlanSimulcastReceive(description);\r\n        //     this.trace(\r\n        //         'setRemoteDescription::postTransform (sim receive)',\r\n        //         dumpSDP(description));\r\n\r\n        //     // eslint-disable-next-line no-param-reassign\r\n        //     description = this.tpcUtils.ensureCorrectOrderOfSsrcs(description);\r\n        // }\r\n\r\n         // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\r\n         if (!this.isP2P) {\r\n            const currentDescription = this.peerconnection.remoteDescription;\r\n\r\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\r\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\r\n        }\r\n        if (this.isSimulcastOn()) {\r\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\r\n            remoteDescription = this.simulcast.mungeRemoteDescription(remoteDescription);\r\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\r\n\r\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\r\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\r\n        }\r\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\r\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\r\n\r\n        \r\n    }\r\n\r\n    // Munge the order of the codecs based on the preferences set through config.js.\r\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\r\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.peerconnection.setRemoteDescription(remoteDescription)\r\n            .then(() => {\r\n                this.trace('setRemoteDescriptionOnSuccess');\r\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\r\n\r\n                if (remoteUfrag !== this.remoteUfrag) {\r\n                    this.remoteUfrag = remoteUfrag;\r\n                    this.eventEmitter.emit(\r\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\r\n                }\r\n                resolve();\r\n            }, err => {\r\n                this.trace('setRemoteDescriptionOnFailure', err);\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\r\n                    err,\r\n                    this);\r\n                reject(err);\r\n            });\r\n    });\r\n};\r\n\r\n/**\r\n * Changes the resolution of the video stream that is sent to the peer based on\r\n * the user preferred value. If simulcast is enabled on the peerconection, all the\r\n * simulcast encodings that have a resolution height lower or equal to the value\r\n * provided will remain active. For the non-simulcast case, video constraint is\r\n * applied on the track.\r\n * @param {number} frameHeight - The user preferred max frame height.\r\n * @returns {Promise} promise that will be resolved when the operation is\r\n * successful and rejected otherwise.\r\n */\r\nTraceablePeerConnection.prototype.setSenderVideoConstraint = function(frameHeight = null) {\r\n    if (frameHeight < 0) {\r\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\r\n    }\r\n\r\n    // XXX: This is not yet supported on mobile.\r\n    if (browser.isReactNative()) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Need to explicitly check for null as 0 is falsy, but a valid value\r\n    const newHeight = frameHeight === null ? this.senderVideoMaxHeight : frameHeight;\r\n\r\n    this.senderVideoMaxHeight = newHeight;\r\n\r\n    logger.log(`${this} senderVideoMaxHeight: ${newHeight}`);\r\n\r\n    const localVideoTrack = this.getLocalVideoTrack();\r\n\r\n    if (!localVideoTrack || localVideoTrack.isMuted() || localVideoTrack.videoType !== VideoType.CAMERA) {\r\n        return Promise.resolve();\r\n    }\r\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!parameters || !parameters.encodings || !parameters.encodings.length) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    if (this.isSimulcastOn()) {\r\n        // Determine the encodings that need to stay enabled based on the new frameHeight provided.\r\n        const encodingsEnabledState = this.tpcUtils.getLocalStreamHeightConstraints(localVideoTrack.track)\r\n            .map(height => height <= newHeight);\r\n\r\n        // Always keep the LD stream enabled, specifically when the LD stream's resolution is higher than of the\r\n        // requested resolution. This can happen when camera is captured at resolutions higher than 720p but the\r\n        // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\r\n        // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\r\n        const ldStreamIndex = this.tpcUtils.localStreamEncodingsConfig\r\n            .findIndex(layer => layer.scaleResolutionDownBy === 4.0);\r\n\r\n        if (newHeight > 0 && ldStreamIndex !== -1) {\r\n            encodingsEnabledState[ldStreamIndex] = true;\r\n        }\r\n        for (const encoding in parameters.encodings) {\r\n            if (parameters.encodings.hasOwnProperty(encoding)) {\r\n                parameters.encodings[encoding].active = encodingsEnabledState[encoding];\r\n            }\r\n        }\r\n    } else if (newHeight > 0) {\r\n        parameters.encodings[0].scaleResolutionDownBy = localVideoTrack.resolution >= newHeight\r\n            ? Math.floor(localVideoTrack.resolution / newHeight)\r\n            : 1;\r\n        parameters.encodings[0].active = true;\r\n    } else {\r\n        parameters.encodings[0].scaleResolutionDownBy = undefined;\r\n        parameters.encodings[0].active = false;\r\n    }\r\n\r\n    logger.info(`${this} setting max height of ${newHeight}, encodings: ${JSON.stringify(parameters.encodings)}`);\r\n\r\n    return videoSender.setParameters(parameters).then(() => {\r\n        localVideoTrack.maxEnabledResolution = newHeight;\r\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\r\n\r\n        // Max bitrate needs to be reconfigured on the sender in p2p/non-simulcast case if needed when\r\n        // the send resolution changes.\r\n        if (this.isP2P || !this.isSimulcastOn()) {\r\n            return this.setMaxBitRate();\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Enables/disables video media transmission on this peer connection. When\r\n * disabled the SDP video media direction in the local SDP will be adjusted to\r\n * 'inactive' which means that no data will be sent nor accepted, but\r\n * the connection should be kept alive.\r\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\r\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\r\n * no effect.\r\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\r\n * needs to be executed in order for the changes to take effect or\r\n * <tt>false</tt> if the given value was the same as the previous one.\r\n * @public\r\n */\r\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\r\n    logger.debug(`${this} video transfer active: ${active}`);\r\n    const changed = this.videoTransferActive !== active;\r\n\r\n    this.videoTransferActive = active;\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        this.tpcUtils.setVideoTransferActive(active);\r\n\r\n        // false means no renegotiation up the chain which is not needed in the Unified mode\r\n        return false;\r\n    }\r\n\r\n    return changed;\r\n};\r\n\r\n/**\r\n * Sends DTMF tones if possible.\r\n *\r\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\r\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\r\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\r\n *\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\r\n    if (!this._dtmfSender) {\r\n        if (this.peerconnection.getSenders) {\r\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\r\n\r\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\r\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\r\n        }\r\n\r\n        if (!this._dtmfSender) {\r\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\r\n\r\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\r\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\r\n            }\r\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\r\n        }\r\n\r\n        if (this._dtmfSender) {\r\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\r\n        }\r\n    }\r\n\r\n    if (this._dtmfSender) {\r\n        if (this._dtmfSender.toneBuffer) {\r\n            this._dtmfTonesQueue.push({\r\n                tones,\r\n                duration,\r\n                interToneGap\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\r\n    } else {\r\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\r\n    }\r\n};\r\n\r\n/**\r\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\r\n * a single tone.\r\n *\r\n * @param {Object} event - The tonechange event which indicates what characters\r\n * are left to be played for the current tone.\r\n * @private\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype._onToneChange = function(event) {\r\n    // An empty event.tone indicates the current tones have finished playing.\r\n    // Automatically start playing any queued tones on finish.\r\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\r\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\r\n\r\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\r\n    }\r\n};\r\n\r\n/**\r\n * Makes the underlying TraceablePeerConnection generate new SSRC for\r\n * the recvonly video stream.\r\n */\r\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\r\n    const newSSRC = SDPUtil.generateSsrc();\r\n\r\n    logger.info(`${this} generated new recvonly SSRC: ${newSSRC}`);\r\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\r\n};\r\n\r\n/**\r\n * Makes the underlying TraceablePeerConnection forget the current primary video\r\n * SSRC.\r\n */\r\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\r\n    logger.info('Clearing primary video SSRC!');\r\n    this.sdpConsistency.clearVideoSsrcCache();\r\n};\r\n\r\n/**\r\n * Closes underlying WebRTC PeerConnection instance and removes all remote\r\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\r\n * them.\r\n */\r\nTraceablePeerConnection.prototype.close = function() {\r\n    this.trace('stop');\r\n\r\n    // Off SignalingEvents\r\n    this.signalingLayer.off(\r\n        SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\r\n    this.signalingLayer.off(\r\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\r\n\r\n    for (const peerTracks of this.remoteTracks.values()) {\r\n        for (const remoteTrack of peerTracks.values()) {\r\n            this._removeRemoteTrack(remoteTrack);\r\n        }\r\n    }\r\n    this.remoteTracks.clear();\r\n\r\n    this._addedStreams = [];\r\n\r\n    this._dtmfSender = null;\r\n    this._dtmfTonesQueue = [];\r\n\r\n    if (!this.rtc._removePeerConnection(this)) {\r\n        logger.error('RTC._removePeerConnection returned false');\r\n    }\r\n    if (this.statsinterval !== null) {\r\n        window.clearInterval(this.statsinterval);\r\n        this.statsinterval = null;\r\n    }\r\n    logger.info(`Closing ${this}...`);\r\n    this.peerconnection.close();\r\n};\r\n\r\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\r\n    return this._createOfferOrAnswer(false /* answer */, constraints);\r\n};\r\n\r\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\r\n    return this._createOfferOrAnswer(true /* offer */, constraints);\r\n};\r\n\r\n/**\r\n * Checks if a camera track has been added to the peerconnection\r\n * @param {TraceablePeerConnection} peerConnection\r\n * @return {boolean} <tt>true</tt> if the peerconnection has\r\n * a camera track for its video source <tt>false</tt> otherwise.\r\n */\r\nfunction hasCameraTrack(peerConnection) {\r\n    return peerConnection.getLocalTracks()\r\n        .some(t => t.videoType === 'camera');\r\n}\r\n\r\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\r\n        isOffer,\r\n        constraints) {\r\n    const logName = isOffer ? 'Offer' : 'Answer';\r\n\r\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\r\n\r\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\r\n        try {\r\n            this.trace(\r\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\r\n\r\n            if (browser.usesPlanB()) {\r\n                // If there are no local video tracks, then a \"recvonly\"\r\n                // SSRC needs to be generated\r\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\r\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\r\n                    this.generateRecvonlySsrc();\r\n                }\r\n\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = new RTCSessionDescription({\r\n                    type: resultSdp.type,\r\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\r\n                        resultSdp.sdp)\r\n                });\r\n\r\n                this.trace(\r\n                    `create${logName}OnSuccess::postTransform `\r\n                         + '(make primary audio/video ssrcs consistent)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            // configure simulcast for camera tracks always and for\r\n            // desktop tracks only when the testing flag for maxbitrates\r\n            // in config.js is disabled.\r\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\r\n                && (!this.options.capScreenshareBitrate\r\n                || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\r\n                this.trace(\r\n                    `create${logName}`\r\n                        + 'OnSuccess::postTransform (simulcast)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = new RTCSessionDescription({\r\n                    type: resultSdp.type,\r\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\r\n                });\r\n\r\n                this.trace(\r\n                    `create${logName}`\r\n                         + 'OnSuccess::postTransform (rtx modifier)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            const ssrcMap = extractSSRCMap(resultSdp);\r\n\r\n            logger.debug('Got local SSRCs MAP: ', ssrcMap);\r\n            this._processLocalSSRCsMap(ssrcMap);\r\n\r\n            resolveFn(resultSdp);\r\n        } catch (e) {\r\n            this.trace(`create${logName}OnError`, e);\r\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\r\n            logger.error(`create${logName}OnError`, e, dumpSDP(resultSdp));\r\n\r\n            rejectFn(e);\r\n        }\r\n    };\r\n\r\n    const handleFailure = (err, rejectFn) => {\r\n        this.trace(`create${logName}OnFailure`, err);\r\n        const eventType\r\n            = isOffer\r\n                ? RTCEvents.CREATE_OFFER_FAILED\r\n                : RTCEvents.CREATE_ANSWER_FAILED;\r\n\r\n        this.eventEmitter.emit(eventType, err, this);\r\n\r\n        rejectFn(err);\r\n    };\r\n\r\n    if (this._usesTransceiverCodecPreferences) {\r\n        const transceiver = this.peerconnection.getTransceivers()\r\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\r\n\r\n        if (transceiver) {\r\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\r\n            const mimeType = this.codecPreference?.mimeType;\r\n            const enable = this.codecPreference?.enable;\r\n\r\n            if (capabilities && mimeType && enable) {\r\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\r\n                /* eslint-disable-next-line arrow-body-style */\r\n                capabilities.sort(caps => {\r\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\r\n                });\r\n            } else if (capabilities && mimeType) {\r\n                capabilities = capabilities\r\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\r\n            }\r\n\r\n            // Disable ulpfec on Google Chrome and derivatives because\r\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\r\n            if (browser.isChromiumBased()) {\r\n                capabilities = capabilities\r\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\r\n            }\r\n\r\n            try {\r\n                transceiver.setCodecPreferences(capabilities);\r\n            } catch (err) {\r\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\r\n            }\r\n        }\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        let oaPromise;\r\n\r\n        if (isOffer) {\r\n            oaPromise = this.peerconnection.createOffer(constraints);\r\n        } else {\r\n            oaPromise = this.peerconnection.createAnswer(constraints);\r\n        }\r\n\r\n        oaPromise\r\n            .then(\r\n                sdp => handleSuccess(sdp, resolve, reject),\r\n                error => handleFailure(error, reject));\r\n    });\r\n};\r\n\r\n/**\r\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\r\n * @param {TrackSSRCInfo} ssrcObj\r\n * @return {number|null} the primary SSRC or <tt>null</tt>\r\n */\r\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\r\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\r\n        return ssrcObj.groups[0].ssrcs[0];\r\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\r\n        return ssrcObj.ssrcs[0];\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Goes over the SSRC map extracted from the latest local description and tries\r\n * to match them with the local tracks (by MSID). Will update the values\r\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\r\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\r\n    for (const track of this.localTracks.values()) {\r\n        const trackMSID = track.storedMSID;\r\n\r\n        if (ssrcMap.has(trackMSID)) {\r\n            const newSSRC = ssrcMap.get(trackMSID);\r\n\r\n            if (!newSSRC) {\r\n                logger.error(`No SSRC found for: ${trackMSID} in ${this}`);\r\n\r\n                return;\r\n            }\r\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\r\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\r\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\r\n\r\n            // eslint-disable-next-line no-negated-condition\r\n            if (newSSRCNum !== oldSSRCNum) {\r\n                if (oldSSRCNum === null) {\r\n                    logger.info(\r\n                        `Storing new local SSRC for ${track} in ${this}`,\r\n                        newSSRC);\r\n                } else {\r\n                    logger.error(\r\n                        `Overwriting SSRC for ${track} ${trackMSID} in ${this\r\n                        } with: `, newSSRC);\r\n                }\r\n                this.localSSRCs.set(track.rtcId, newSSRC);\r\n\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\r\n            } else {\r\n                logger.debug(\r\n                    `The local SSRC(${newSSRCNum}) for ${track} ${trackMSID}`\r\n                     + `is still up to date in ${this}`);\r\n            }\r\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\r\n            // It is normal to find no SSRCs for a muted video track in\r\n            // the local SDP as the recv-only SSRC is no longer munged in.\r\n            // So log the warning only if it's not a muted video track.\r\n            logger.warn(`No SSRCs found in the local SDP for ${track} MSID: ${trackMSID} in ${this}`);\r\n        }\r\n    }\r\n};\r\n\r\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\r\n    this.trace('addIceCandidate', JSON.stringify({\r\n        candidate: candidate.candidate,\r\n        sdpMid: candidate.sdpMid,\r\n        sdpMLineIndex: candidate.sdpMLineIndex,\r\n        usernameFragment: candidate.usernameFragment\r\n    }, null, ' '));\r\n\r\n    return this.peerconnection.addIceCandidate(candidate);\r\n};\r\n\r\n/**\r\n * Obtains call-related stats from the peer connection.\r\n *\r\n * @param {Function} callback - The function to invoke after successfully\r\n * obtaining stats.\r\n * @param {Function} errback - The function to invoke after failing to obtain\r\n * stats.\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype.getStats = function(callback, errback) {\r\n    // TODO (brian): After moving all browsers to adapter, check if adapter is\r\n    // accounting for different getStats apis, making the browser-checking-if\r\n    // unnecessary.\r\n    if (browser.isSafari() || browser.isFirefox() || browser.isReactNative()) {\r\n        // uses the new Promise based getStats\r\n        this.peerconnection.getStats()\r\n            .then(callback)\r\n            .catch(errback || (() => {\r\n\r\n                // Making sure that getStats won't fail if error callback is\r\n                // not passed.\r\n            }));\r\n    } else {\r\n        this.peerconnection.getStats(callback);\r\n    }\r\n};\r\n\r\n/**\r\n * Generates and stores new SSRC info object for given local track.\r\n * The method should be called only for a video track being added to this TPC\r\n * in the muted state (given that the current browser uses this strategy).\r\n * @param {JitsiLocalTrack} track\r\n * @return {TPCSSRCInfo}\r\n */\r\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\r\n    const rtcId = track.rtcId;\r\n    let ssrcInfo = this._getSSRC(rtcId);\r\n\r\n    if (ssrcInfo) {\r\n        logger.error(`Will overwrite local SSRCs for track ID: ${rtcId}`);\r\n    }\r\n\r\n    // configure simulcast for camera tracks always and for\r\n    // desktop tracks only when the testing flag for maxbitrates\r\n    // in config.js is disabled.\r\n    if (this.isSimulcastOn()\r\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\r\n        ssrcInfo = {\r\n            ssrcs: [],\r\n            groups: []\r\n        };\r\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\r\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\r\n        }\r\n        ssrcInfo.groups.push({\r\n            ssrcs: ssrcInfo.ssrcs.slice(),\r\n            semantics: 'SIM'\r\n        });\r\n    } else {\r\n        ssrcInfo = {\r\n            ssrcs: [ SDPUtil.generateSsrc() ],\r\n            groups: []\r\n        };\r\n    }\r\n    if (!this.options.disableRtx) {\r\n        // Specifically use a for loop here because we'll\r\n        //  be adding to the list we're iterating over, so we\r\n        //  only want to iterate through the items originally\r\n        //  on the list\r\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\r\n\r\n        for (let i = 0; i < currNumSsrcs; ++i) {\r\n            const primarySsrc = ssrcInfo.ssrcs[i];\r\n            const rtxSsrc = SDPUtil.generateSsrc();\r\n\r\n            ssrcInfo.ssrcs.push(rtxSsrc);\r\n            ssrcInfo.groups.push({\r\n                ssrcs: [ primarySsrc, rtxSsrc ],\r\n                semantics: 'FID'\r\n            });\r\n        }\r\n    }\r\n    ssrcInfo.msid = track.storedMSID;\r\n    this.localSSRCs.set(rtcId, ssrcInfo);\r\n\r\n    return ssrcInfo;\r\n};\r\n\r\n/**\r\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\r\n * instance.\r\n * @return {string}\r\n */\r\nTraceablePeerConnection.prototype.toString = function() {\r\n    return `TPC[${this.id},p2p:${this.isP2P}]`;\r\n};\r\n\r\n/**\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n * @param {*} description \r\n * @returns \r\n */\r\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\r\n    const { audioQuality } = this.options;\r\n\r\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\r\n        return description;\r\n    }\r\n\r\n    const parsedSdp = transform.parse(description.sdp);\r\n    const mLines = parsedSdp.media;\r\n\r\n    for (const mLine of mLines) {\r\n        if (mLine.type === 'audio') {\r\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\r\n\r\n            if (!payload) {\r\n                // eslint-disable-next-line no-continue\r\n                continue;\r\n            }\r\n\r\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\r\n\r\n            if (!fmtpOpus) {\r\n                fmtpOpus = {\r\n                    payload,\r\n                    config: ''\r\n                };\r\n            }\r\n\r\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\r\n            let sdpChanged = false;\r\n\r\n            if (audioQuality?.stereo) {\r\n                fmtpConfig.stereo = 1;\r\n                sdpChanged = true;\r\n            }\r\n\r\n            if (audioQuality?.opusMaxAverageBitrate) {\r\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\r\n                sdpChanged = true;\r\n            }\r\n\r\n            if (!sdpChanged) {\r\n                // eslint-disable-next-line no-continue\r\n                continue;\r\n            }\r\n\r\n            let mungedConfig = '';\r\n\r\n            for (const key of Object.keys(fmtpConfig)) {\r\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\r\n            }\r\n\r\n            fmtpOpus.config = mungedConfig.trim();\r\n        }\r\n    }\r\n\r\n    return new RTCSessionDescription({\r\n        type: description.type,\r\n        sdp: transform.write(parsedSdp)\r\n    });\r\n};\r\n\r\n/**\r\n * Returns the codec that is configured on the client as the preferred video codec.\r\n * This takes into account the current order of codecs in the local description sdp.\r\n *\r\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\r\n * video in the local SDP.\r\n */\r\n TraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\r\n    const sdp = this.peerconnection.localDescription?.sdp;\r\n    const defaultCodec = CodecMimeType.VP8;\r\n\r\n    if (!sdp) {\r\n        return defaultCodec;\r\n    }\r\n    const parsedSdp = transform.parse(sdp);\r\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\r\n    const codec = mLine.rtp[0].codec;\r\n\r\n    if (codec) {\r\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\r\n    }\r\n\r\n    return defaultCodec;\r\n};\r\n\r\nTraceablePeerConnection.prototype._isSharingScreen = function() {\r\n    const tracks = this.getLocalVideoTracks();\r\n\r\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\r\n};\r\n\r\n/**\r\n * Retrieves the local video tracks.\r\n *\r\n * @returns {JitsiLocalTrack|undefined} - local video tracks.\r\n */\r\n TraceablePeerConnection.prototype.getLocalVideoTracks = function() {\r\n    return this.getLocalTracks(MediaType.VIDEO);\r\n};\r\n\r\n/**\r\n * Checks if low fps screensharing is in progress.\r\n *\r\n * @private\r\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\r\n */\r\n TraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\r\n    return this._isSharingScreen() && this._capScreenshareBitrate;\r\n};\r\n\r\n/**\r\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\r\n *\r\n * @param {string} id Endpoint id of the remote participant.\r\n * @returns {Array<string>} The sdp lines that have the ssrc information.\r\n */\r\n TraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\r\n    const removeSsrcInfo = [];\r\n    const remoteTracks = this.getRemoteTracks(id);\r\n\r\n    if (!remoteTracks?.length) {\r\n        return removeSsrcInfo;\r\n    }\r\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\r\n    const sdp = new SDP(this.remoteDescription.sdp);\r\n\r\n    primarySsrcs.forEach((ssrc, idx) => {\r\n        for (const media of sdp.media) {\r\n            let lines = '';\r\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\r\n\r\n            if (ssrcLines.length) {\r\n                if (!removeSsrcInfo[idx]) {\r\n                    removeSsrcInfo[idx] = '';\r\n                }\r\n\r\n                // Check if there are any FID groups present for the primary ssrc.\r\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\r\n\r\n                if (fidLines.length) {\r\n                    const secondarySsrc = fidLines[0].split(' ')[2];\r\n\r\n                    lines += `${fidLines[0]}\\r\\n`;\r\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\r\n                }\r\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\r\n                removeSsrcInfo[idx] += lines;\r\n            }\r\n        }\r\n    });\r\n\r\n    return removeSsrcInfo;\r\n};","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport SDPUtil from './SDPUtil';\r\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Begin helper functions\r\n */\r\n/**\r\n * Updates or inserts the appropriate rtx information for primarySsrc with\r\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\r\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\r\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\r\n * @param {MLineWrap} mLine\r\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\r\n *  primary ssrc\r\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\r\n */\r\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\r\n    logger.debug(\r\n        `Updating mline to associate ${rtxSsrc}`\r\n        + `rtx ssrc with primary stream, ${primarySsrcInfo.id}`);\r\n    const primarySsrc = primarySsrcInfo.id;\r\n    const primarySsrcMsid = primarySsrcInfo.msid;\r\n    const primarySsrcCname = primarySsrcInfo.cname;\r\n\r\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\r\n\r\n    if (previousRtxSSRC === rtxSsrc) {\r\n        logger.debug(`${rtxSsrc} was already associated with ${primarySsrc}`);\r\n\r\n        return;\r\n    }\r\n    if (previousRtxSSRC) {\r\n        logger.debug(\r\n            `${primarySsrc} was previously associated with rtx`\r\n            + `${previousRtxSSRC}, removing all references to it`);\r\n\r\n        // Stream already had an rtx ssrc that is different than the one given,\r\n        //  remove all trace of the old one\r\n        mLine.removeSSRC(previousRtxSSRC);\r\n\r\n        logger.debug(`groups before filtering for ${previousRtxSSRC}`);\r\n        logger.debug(mLine.dumpSSRCGroups());\r\n\r\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\r\n    }\r\n    mLine.addSSRCAttribute({\r\n        id: rtxSsrc,\r\n        attribute: 'cname',\r\n        value: primarySsrcCname\r\n    });\r\n    mLine.addSSRCAttribute({\r\n        id: rtxSsrc,\r\n        attribute: 'msid',\r\n        value: primarySsrcMsid\r\n    });\r\n    mLine.addSSRCGroup({\r\n        semantics: 'FID',\r\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\r\n    });\r\n}\r\n\r\n/**\r\n * End helper functions\r\n */\r\n\r\n/**\r\n * Adds any missing RTX streams for video streams\r\n *  and makes sure that they remain consistent\r\n */\r\nexport default class RtxModifier {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Map of video ssrc to corresponding RTX\r\n         *  ssrc\r\n         */\r\n        this.correspondingRtxSsrcs = new Map();\r\n    }\r\n\r\n    /**\r\n     * Clear the cached map of primary video ssrcs to\r\n     *  their corresponding rtx ssrcs so that they will\r\n     *  not be used for the next call to modifyRtxSsrcs\r\n     */\r\n    clearSsrcCache() {\r\n        this.correspondingRtxSsrcs.clear();\r\n    }\r\n\r\n    /**\r\n     * Explicitly set the primary video ssrc -> rtx ssrc\r\n     *  mapping to be used in modifyRtxSsrcs\r\n     * @param {Map} ssrcMapping a mapping of primary video\r\n     *  ssrcs to their corresponding rtx ssrcs\r\n     */\r\n    setSsrcCache(ssrcMapping) {\r\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\r\n        this.correspondingRtxSsrcs = ssrcMapping;\r\n    }\r\n\r\n    /**\r\n     * Adds RTX ssrcs for any video ssrcs that don't\r\n     *  already have them.  If the video ssrc has been\r\n     *  seen before, and already had an RTX ssrc generated,\r\n     *  the same RTX ssrc will be used again.\r\n     * @param {string} sdpStr sdp in raw string format\r\n     */\r\n    modifyRtxSsrcs(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n\r\n        return this.modifyRtxSsrcs2(videoMLine)\r\n            ? sdpTransformer.toRawSDP() : sdpStr;\r\n    }\r\n\r\n    /**\r\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\r\n     *  {@link MLineWrap} instance wrapping video media as an argument.\r\n     * @param {MLineWrap} videoMLine\r\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\r\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\r\n     */\r\n    modifyRtxSsrcs2(videoMLine) {\r\n        if (videoMLine.direction === 'recvonly') {\r\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\r\n\r\n            return false;\r\n        }\r\n        if (videoMLine.getSSRCCount() < 1) {\r\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\r\n\r\n            return false;\r\n        }\r\n        logger.debug('Current ssrc mapping: ', this.correspondingRtxSsrcs);\r\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\r\n\r\n        logger.debug('Parsed primary video ssrcs ', primaryVideoSsrcs,\r\n            ' making sure all have rtx streams');\r\n        for (const ssrc of primaryVideoSsrcs) {\r\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\r\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\r\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\r\n\r\n            if (correspondingRtxSsrc) {\r\n                logger.debug(\r\n                    'Already have an associated rtx ssrc for'\r\n                    + `video ssrc ${ssrc}: ${correspondingRtxSsrc}`);\r\n            } else {\r\n                logger.debug(\r\n                    `No previously associated rtx ssrc for video ssrc ${ssrc}`);\r\n\r\n                // If there's one in the sdp already for it, we'll just set\r\n                //  that as the corresponding one\r\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\r\n\r\n                if (previousAssociatedRtxStream) {\r\n                    logger.debug(\r\n                        `Rtx stream ${previousAssociatedRtxStream} `\r\n                        + 'already existed in the sdp as an rtx stream for '\r\n                        + `${ssrc}`);\r\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\r\n                } else {\r\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\r\n                    logger.debug(`Generated rtx ssrc ${correspondingRtxSsrc} `\r\n                                 + `for ssrc ${ssrc}`);\r\n                }\r\n                logger.debug(`Caching rtx ssrc ${correspondingRtxSsrc} `\r\n                             + `for video ssrc ${ssrc}`);\r\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\r\n            }\r\n            updateAssociatedRtxStream(\r\n                videoMLine,\r\n                {\r\n                    id: ssrc,\r\n                    cname,\r\n                    msid\r\n                },\r\n                correspondingRtxSsrc);\r\n        }\r\n\r\n        // FIXME we're not looking into much details whether the SDP has been\r\n        // modified or not once the precondition requirements are met.\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Strip all rtx streams from the given sdp\r\n     * @param {string} sdpStr sdp in raw string format\r\n     * @returns {string} sdp string with all rtx streams stripped\r\n     */\r\n    stripRtx(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n        if (videoMLine.direction === 'recvonly') {\r\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\r\n\r\n            return sdpStr;\r\n        }\r\n        if (videoMLine.getSSRCCount() < 1) {\r\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\r\n\r\n            return sdpStr;\r\n        }\r\n        if (!videoMLine.containsAnySSRCGroups()) {\r\n            logger.debug('RtxModifier doing nothing, '\r\n              + 'no video ssrcGroups present');\r\n\r\n            return sdpStr;\r\n        }\r\n        const fidGroups = videoMLine.findGroups('FID');\r\n\r\n        // Remove the fid groups from the mline\r\n\r\n        videoMLine.removeGroupsBySemantics('FID');\r\n\r\n        // Get the rtx ssrcs and remove them from the mline\r\n        for (const fidGroup of fidGroups) {\r\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\r\n\r\n            videoMLine.removeSSRC(rtxSsrc);\r\n        }\r\n\r\n        return sdpTransformer.toRawSDP();\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    parsePrimarySSRC,\r\n    parseSecondarySSRC,\r\n    SdpTransformWrap\r\n} from './SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Handles the work of keeping video ssrcs consistent across multiple\r\n * o/a cycles, making it such that all stream operations can be\r\n * kept local and do not need to be signaled.\r\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\r\n * the primary video stream\r\n */\r\nexport default class SdpConsistency {\r\n    /**\r\n     * Constructor\r\n     * @param {string} logPrefix the log prefix appended to every logged\r\n     * message, currently used to distinguish for which\r\n     * <tt>TraceablePeerConnection</tt> the instance works.\r\n     */\r\n    constructor(logPrefix) {\r\n        this.clearVideoSsrcCache();\r\n        this.logPrefix = logPrefix;\r\n    }\r\n\r\n    /**\r\n     * Clear the cached video primary and primary rtx ssrcs so that\r\n     *  they will not be used for the next call to\r\n     *  makeVideoPrimarySsrcsConsistent\r\n     */\r\n    clearVideoSsrcCache() {\r\n        this.cachedPrimarySsrc = null;\r\n        this.injectRecvOnly = false;\r\n    }\r\n\r\n    /**\r\n     * Explicitly set the primary ssrc to be used in\r\n     *  makeVideoPrimarySsrcsConsistent\r\n     * @param {number} primarySsrc the primarySsrc to be used\r\n     *  in future calls to makeVideoPrimarySsrcsConsistent\r\n     * @throws Error if <tt>primarySsrc</tt> is not a number\r\n     */\r\n    setPrimarySsrc(primarySsrc) {\r\n        if (typeof primarySsrc !== 'number') {\r\n            throw new Error('Primary SSRC must be a number!');\r\n        }\r\n        this.cachedPrimarySsrc = primarySsrc;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not there is a primary video SSRC cached already.\r\n     * @return {boolean}\r\n     */\r\n    hasPrimarySsrcCached() {\r\n        return Boolean(this.cachedPrimarySsrc);\r\n    }\r\n\r\n    /**\r\n     * Given an sdp string, either:\r\n     *  1) record the primary video and primary rtx ssrcs to be\r\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\r\n     *  2) change the primary and primary rtx ssrcs in the given sdp\r\n     *   to match the ones previously cached\r\n     * @param {string} sdpStr the sdp string to (potentially)\r\n     *  change to make the video ssrcs consistent\r\n     * @returns {string} a (potentially) modified sdp string\r\n     *  with ssrcs consistent with this class' cache\r\n     */\r\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(\r\n                `${this.logPrefix} no 'video' media found in the sdp: `\r\n                    + `${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n\r\n        if (videoMLine.direction === 'recvonly') {\r\n            // If the mline is recvonly, we'll add the primary\r\n            //  ssrc as a recvonly ssrc\r\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\r\n                videoMLine.addSSRCAttribute({\r\n                    id: this.cachedPrimarySsrc,\r\n                    attribute: 'cname',\r\n                    value: `recvonly-${this.cachedPrimarySsrc}`\r\n                });\r\n            } else {\r\n                logger.info(\r\n                    `${this.logPrefix} no SSRC found for the recvonly video`\r\n                        + 'stream!');\r\n            }\r\n        } else {\r\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\r\n\r\n            if (!newPrimarySsrc) {\r\n                logger.info(\r\n                    `${this.logPrefix} sdp-consistency couldn't`\r\n                        + ' parse new primary ssrc');\r\n\r\n                return sdpStr;\r\n            }\r\n            if (this.cachedPrimarySsrc) {\r\n                logger.info(\r\n                    `${this.logPrefix} sdp-consistency replacing new ssrc`\r\n                        + `${newPrimarySsrc} with cached `\r\n                        + `${this.cachedPrimarySsrc}`);\r\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\r\n                for (const group of videoMLine.ssrcGroups) {\r\n                    if (group.semantics === 'FID') {\r\n                        const primarySsrc = parsePrimarySSRC(group);\r\n                        const rtxSsrc = parseSecondarySSRC(group);\r\n\r\n                        // eslint-disable-next-line max-depth\r\n                        if (primarySsrc === newPrimarySsrc) {\r\n                            group.ssrcs\r\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                this.cachedPrimarySsrc = newPrimarySsrc;\r\n                logger.info(\r\n                    `${this.logPrefix} sdp-consistency caching primary ssrc`\r\n                        + `${this.cachedPrimarySsrc}`);\r\n            }\r\n\r\n            this.injectRecvOnly = true;\r\n        }\r\n\r\n        return sdpTransformer.toRawSDP();\r\n    }\r\n}\r\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nimport JitsiTrack from './JitsiTrack';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\nconst RTCEvents = require('../../service/RTC/RTCEvents');\r\n\r\nlet ttfmTrackerAudioAttached = false;\r\nlet ttfmTrackerVideoAttached = false;\r\n\r\n/**\r\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\r\n * container for every event in the list.\r\n */\r\nconst containerEvents = [\r\n    'abort', 'canplay', 'canplaythrough', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart',\r\n    'pause', 'play', 'playing', 'ratechange', 'stalled', 'suspend', 'waiting'\r\n];\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Represents a single media track (either audio or video).\r\n */\r\nexport default class JitsiRemoteTrack extends JitsiTrack {\r\n    /**\r\n     * Creates new JitsiRemoteTrack instance.\r\n     * @param {RTC} rtc the RTC service instance.\r\n     * @param {JitsiConference} conference the conference to which this track\r\n     *        belongs to\r\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\r\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\r\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\r\n     *        the new JitsiRemoteTrack\r\n     * @param {MediaType} mediaType the type of the media\r\n     * @param {VideoType} videoType the type of the video if applicable\r\n     * @param {number} ssrc the SSRC number of the Media Stream\r\n     * @param {boolean} muted the initial muted state\r\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\r\n     * P2P session\r\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\r\n     * @constructor\r\n     */\r\n    constructor(\r\n            rtc,\r\n            conference,\r\n            ownerEndpointId,\r\n            stream,\r\n            track,\r\n            mediaType,\r\n            videoType,\r\n            ssrc,\r\n            muted,\r\n            isP2P,\r\n            sourceName) {\r\n        super(\r\n            conference,\r\n            stream,\r\n            track,\r\n            () => {\r\n                // Nothing to do if the track is inactive.\r\n            },\r\n            mediaType,\r\n            videoType);\r\n        this.rtc = rtc;\r\n\r\n        // Prevent from mixing up type of SSRC which should be a number\r\n        if (typeof ssrc !== 'number') {\r\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\r\n        }\r\n        this.ssrc = ssrc;\r\n        this.ownerEndpointId = ownerEndpointId;\r\n        this.muted = muted;\r\n        this.isP2P = isP2P;\r\n        this._sourceName = sourceName;\r\n\r\n        logger.debug(`New remote track added: ${this}`);\r\n\r\n        // we want to mark whether the track has been ever muted\r\n        // to detect ttfm events for startmuted conferences, as it can\r\n        // significantly increase ttfm values\r\n        this.hasBeenMuted = muted;\r\n\r\n        // Bind 'onmute' and 'onunmute' event handlers\r\n        if (this.rtc && this.track) {\r\n            this._bindTrackHandlers();\r\n        }\r\n        this._containerHandlers = {};\r\n        containerEvents.forEach(event => {\r\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n    /**\r\n     * Attaches the track handlers.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _bindTrackHandlers() {\r\n        this.track.addEventListener('mute', () => this._onTrackMute());\r\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\r\n        this.track.addEventListener('ended', () => {\r\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the track is muted. Emits an event notifying\r\n     * listeners of the mute event.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTrackMute() {\r\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\r\n\r\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the track is unmuted. Emits an event notifying\r\n     * listeners of the mute event.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTrackUnmute() {\r\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\r\n\r\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\r\n    }\r\n\r\n    /**\r\n     * Sets current muted status and fires an events for the change.\r\n     * @param value the muted status.\r\n     */\r\n    setMute(value) {\r\n        if (this.muted === value) {\r\n            return;\r\n        }\r\n\r\n        if (value) {\r\n            this.hasBeenMuted = true;\r\n        }\r\n\r\n        // we can have a fake video stream\r\n        if (this.stream) {\r\n            this.stream.muted = value;\r\n        }\r\n\r\n        this.muted = value;\r\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\r\n    }\r\n\r\n    /**\r\n     * Returns the current muted status of the track.\r\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\r\n     * muted and <tt>false</tt> otherwise.\r\n     */\r\n    isMuted() {\r\n        return this.muted;\r\n    }\r\n\r\n    /**\r\n     * Returns the participant id which owns the track.\r\n     *\r\n     * @returns {string} the id of the participants. It corresponds to the\r\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\r\n     */\r\n    getParticipantId() {\r\n        return this.ownerEndpointId;\r\n    }\r\n\r\n    /**\r\n     * Return false;\r\n     */\r\n    isLocal() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the synchronization source identifier (SSRC) of this remote\r\n     * track.\r\n     *\r\n     * @returns {number} the SSRC of this remote track.\r\n     */\r\n    getSSRC() {\r\n        return this.ssrc;\r\n    }\r\n\r\n    /**\r\n     * Changes the video type of the track.\r\n     *\r\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\r\n     */\r\n    _setVideoType(type) {\r\n        if (this.videoType === type) {\r\n            return;\r\n        }\r\n        this.videoType = type;\r\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\r\n    }\r\n\r\n    /**\r\n     * Handles track play events.\r\n     */\r\n    _playCallback() {\r\n        const type = this.isVideoTrack() ? 'video' : 'audio';\r\n\r\n        const now = window.performance.now();\r\n\r\n        console.log(`(TIME) Render ${type}:\\t`, now);\r\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\r\n\r\n        // The conference can be started without calling GUM\r\n        // FIXME if there would be a module for connection times this kind\r\n        // of logic (gumDuration or ttfm) should end up there\r\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\r\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\r\n        const gumDuration\r\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\r\n\r\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\r\n        // waits until there are 2 participants to start Jingle sessions.\r\n        const ttfm = now\r\n            - (this.conference.getConnectionTimes()['session.initiate']\r\n                - this.conference.getConnectionTimes()['muc.joined'])\r\n            - gumDuration;\r\n\r\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\r\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\r\n\r\n        Statistics.sendAnalytics(createTtfmEvent(\r\n            {\r\n                'media_type': type,\r\n                muted: this.hasBeenMuted,\r\n                value: ttfm\r\n            }));\r\n\r\n    }\r\n\r\n    /**\r\n     * Attach time to first media tracker only if there is conference and only\r\n     * for the first element.\r\n     * @param container the HTML container which can be 'video' or 'audio'\r\n     * element.\r\n     * @private\r\n     */\r\n    _attachTTFMTracker(container) {\r\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\r\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\r\n            return;\r\n        }\r\n\r\n        if (this.isAudioTrack()) {\r\n            ttfmTrackerAudioAttached = true;\r\n        }\r\n        if (this.isVideoTrack()) {\r\n            ttfmTrackerVideoAttached = true;\r\n        }\r\n\r\n        container.addEventListener('canplay', this._playCallback.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been attached to a new container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackAttach(container) {\r\n        logger.debug(`Track has been attached to a container: ${this}`);\r\n\r\n        containerEvents.forEach(event => {\r\n            container.addEventListener(event, this._containerHandlers[event]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been detached from a container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackDetach(container) {\r\n        logger.debug(`Track has been detached from a container: ${this}`);\r\n\r\n        containerEvents.forEach(event => {\r\n            container.removeEventListener(event, this._containerHandlers[event]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * An event handler for events triggered by the attached container.\r\n     *\r\n     * @param {string} type - The type of the event.\r\n     */\r\n    _containerEventHandler(type) {\r\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\r\n    }\r\n\r\n    /**\r\n     * Returns a string with a description of the current status of the track.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    _getStatus() {\r\n        const { enabled, muted, readyState } = this.track;\r\n\r\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\r\n    }\r\n\r\n    /**\r\n     * Creates a text representation of this remote track instance.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\r\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\r\n * description getter. Modifies the SDP, so that it will contain muted local\r\n * video tracks description, even though their underlying {MediaStreamTrack}s\r\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\r\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\r\n * side.\r\n */\r\nexport default class LocalSdpMunger {\r\n\r\n    /**\r\n     * Creates new <tt>LocalSdpMunger</tt> instance.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc\r\n     */\r\n    constructor(tpc) {\r\n        this.tpc = tpc;\r\n    }\r\n\r\n    /**\r\n     * Makes sure that muted local video tracks associated with the parent\r\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\r\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\r\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\r\n     * removed from the peerconnection).\r\n     *\r\n     * NOTE 1 video track is assumed\r\n     *\r\n     * @param {SdpTransformWrap} transformer the transformer instance which will\r\n     * be used to process the SDP.\r\n     * @return {boolean} <tt>true</tt> if there were any modifications to\r\n     * the SDP wrapped by <tt>transformer</tt>.\r\n     * @private\r\n     */\r\n    _addMutedLocalVideoTracksToSDP(transformer) {\r\n        // Go over each video tracks and check if the SDP has to be changed\r\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\r\n\r\n        if (!localVideos.length) {\r\n            return false;\r\n        } else if (localVideos.length !== 1) {\r\n            logger.error(\r\n                `${this.tpc} there is more than 1 video track ! `\r\n                    + 'Strange things may happen !', localVideos);\r\n        }\r\n\r\n        const videoMLine = transformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(\r\n                `${this.tpc} unable to hack local video track SDP`\r\n                    + '- no \"video\" media');\r\n\r\n            return false;\r\n        }\r\n\r\n        let modified = false;\r\n\r\n        for (const videoTrack of localVideos) {\r\n            const muted = videoTrack.isMuted();\r\n            const mediaStream = videoTrack.getOriginalStream();\r\n\r\n            // During the mute/unmute operation there are periods of time when\r\n            // the track's underlying MediaStream is not added yet to\r\n            // the PeerConnection. The SDP needs to be munged in such case.\r\n            const isInPeerConnection\r\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\r\n            const shouldFakeSdp = muted || !isInPeerConnection;\r\n\r\n            logger.debug(\r\n                `${this.tpc} ${videoTrack} muted: ${\r\n                    muted}, is in PeerConnection: ${\r\n                    isInPeerConnection} => should fake sdp ? : ${\r\n                    shouldFakeSdp}`);\r\n\r\n            if (!shouldFakeSdp) {\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            // Inject removed SSRCs\r\n            const requiredSSRCs\r\n                = this.tpc.isSimulcastOn()\r\n                    ? this.tpc.simulcast.ssrcCache\r\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\r\n\r\n            if (!requiredSSRCs.length) {\r\n                logger.error(\r\n                    `No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\r\n\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            modified = true;\r\n\r\n            // We need to fake sendrecv.\r\n            // NOTE the SDP produced here goes only to Jicofo and is never set\r\n            // as localDescription. That's why\r\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\r\n            videoMLine.direction = 'sendrecv';\r\n\r\n            // Check if the recvonly has MSID\r\n            const primarySSRC = requiredSSRCs[0];\r\n\r\n            // FIXME The cname could come from the stream, but may turn out to\r\n            // be too complex. It is fine to come up with any value, as long as\r\n            // we only care about the actual SSRC values when deciding whether\r\n            // or not an update should be sent.\r\n            const primaryCname = `injected-${primarySSRC}`;\r\n\r\n            for (const ssrcNum of requiredSSRCs) {\r\n                // Remove old attributes\r\n                videoMLine.removeSSRC(ssrcNum);\r\n\r\n                // Inject\r\n                logger.debug(\r\n                    `${this.tpc} injecting video SSRC: ${ssrcNum} for ${\r\n                        videoTrack}`);\r\n                videoMLine.addSSRCAttribute({\r\n                    id: ssrcNum,\r\n                    attribute: 'cname',\r\n                    value: primaryCname\r\n                });\r\n                videoMLine.addSSRCAttribute({\r\n                    id: ssrcNum,\r\n                    attribute: 'msid',\r\n                    value: videoTrack.storedMSID\r\n                });\r\n            }\r\n            if (requiredSSRCs.length > 1) {\r\n                const group = {\r\n                    ssrcs: requiredSSRCs.join(' '),\r\n                    semantics: 'SIM'\r\n                };\r\n\r\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\r\n                    // Inject the group\r\n                    logger.debug(\r\n                        `${this.tpc} injecting SIM group for ${videoTrack}`,\r\n                        group);\r\n                    videoMLine.addSSRCGroup(group);\r\n                }\r\n            }\r\n\r\n            // Insert RTX\r\n            // FIXME in P2P RTX is used by Chrome regardless of config option\r\n            // status. Because of that 'source-remove'/'source-add'\r\n            // notifications are still sent to remove/add RTX SSRC and FID group\r\n            if (!this.tpc.options.disableRtx) {\r\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\r\n            }\r\n        }\r\n\r\n        return modified;\r\n    }\r\n\r\n    /**\r\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\r\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\r\n     * sign.\r\n     *\r\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\r\n     * session description which will be modified in place.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _transformMediaIdentifiers(mediaSection) {\r\n        const pcId = this.tpc.id;\r\n\r\n        for (const ssrcLine of mediaSection.ssrcs) {\r\n            switch (ssrcLine.attribute) {\r\n            case 'cname':\r\n            case 'label':\r\n            case 'mslabel':\r\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\r\n                break;\r\n            case 'msid': {\r\n                if (ssrcLine.value) {\r\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\r\n\r\n                    if (streamAndTrackIDs.length === 2) {\r\n                        const streamId = streamAndTrackIDs[0];\r\n                        const trackId = streamAndTrackIDs[1];\r\n\r\n                        ssrcLine.value\r\n                            = `${streamId}-${pcId} ${trackId}-${pcId}`;\r\n                    } else {\r\n                        logger.warn(\r\n                            'Unable to munge local MSID'\r\n                                + `- weird format detected: ${ssrcLine.value}`);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Maybe modifies local description to fake local video tracks SDP when\r\n     * those are muted.\r\n     *\r\n     * @param {object} desc the WebRTC SDP object instance for the local\r\n     * description.\r\n     * @returns {RTCSessionDescription}\r\n     */\r\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\r\n        if (!desc) {\r\n            throw new Error('No local description passed in.');\r\n        }\r\n\r\n        const transformer = new SdpTransformWrap(desc.sdp);\r\n\r\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\r\n            return new RTCSessionDescription({\r\n                type: desc.type,\r\n                sdp: transformer.toRawSDP()\r\n            });\r\n        }\r\n\r\n        return desc;\r\n    }\r\n\r\n    /**\r\n     * This transformation will make sure that stream identifiers are unique\r\n     * across all of the local PeerConnections even if the same stream is used\r\n     * by multiple instances at the same time.\r\n     * Each PeerConnection assigns different SSRCs to the same local\r\n     * MediaStream, but the MSID remains the same as it's used to identify\r\n     * the stream by the WebRTC backend. The transformation will append\r\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\r\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\r\n     *\r\n     * @param {RTCSessionDescription} sessionDesc - The local session\r\n     * description (this instance remains unchanged).\r\n     * @return {RTCSessionDescription} - Transformed local session description\r\n     * (a modified copy of the one given as the input).\r\n     */\r\n    transformStreamIdentifiers(sessionDesc) {\r\n        // FIXME similar check is probably duplicated in all other transformers\r\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\r\n            return sessionDesc;\r\n        }\r\n\r\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\r\n        const audioMLine = transformer.selectMedia('audio');\r\n\r\n        if (audioMLine) {\r\n            this._transformMediaIdentifiers(audioMLine);\r\n        }\r\n\r\n        const videoMLine = transformer.selectMedia('video');\r\n\r\n        if (videoMLine) {\r\n            this._transformMediaIdentifiers(videoMLine);\r\n        }\r\n\r\n        return new RTCSessionDescription({\r\n            type: sessionDesc.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\r\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\r\n\r\nconst Resolutions = require('../../service/RTC/Resolutions');\r\nconst VideoType = require('../../service/RTC/VideoType');\r\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\r\n * over the data channel.\r\n */\r\nconst STATS_MESSAGE_TYPE = 'stats';\r\n\r\n/**\r\n * See media/engine/simulcast.ss from webrtc.org\r\n */\r\nconst kSimulcastFormats = [\r\n    { width: 1920,\r\n        height: 1080,\r\n        layers: 3,\r\n        max: 5000,\r\n        target: 4000,\r\n        min: 800 },\r\n    { width: 1280,\r\n        height: 720,\r\n        layers: 3,\r\n        max: 2500,\r\n        target: 2500,\r\n        min: 600 },\r\n    { width: 960,\r\n        height: 540,\r\n        layers: 3,\r\n        max: 900,\r\n        target: 900,\r\n        min: 450 },\r\n    { width: 640,\r\n        height: 360,\r\n        layers: 2,\r\n        max: 700,\r\n        target: 500,\r\n        min: 150 },\r\n    { width: 480,\r\n        height: 270,\r\n        layers: 2,\r\n        max: 450,\r\n        target: 350,\r\n        min: 150 },\r\n    { width: 320,\r\n        height: 180,\r\n        layers: 1,\r\n        max: 200,\r\n        target: 150,\r\n        min: 30 }\r\n];\r\n\r\n/**\r\n * The maximum bitrate to use as a measurement against the participant's current\r\n * bitrate. This cap helps in the cases where the participant's bitrate is high\r\n * but not enough to fulfill high targets, such as with 1080p.\r\n */\r\nconst MAX_TARGET_BITRATE = 2500;\r\n\r\n/**\r\n * The initial bitrate for video in kbps.\r\n */\r\nlet startBitrate = 800;\r\n\r\n\r\n/**\r\n * The current cap (in kbps) put on the video stream (or null if there isn't\r\n * a cap).  If there is a cap, we'll take it into account when calculating\r\n * the current quality.\r\n */\r\nlet videoBitrateCap = null;\r\n\r\n/**\r\n * Gets the expected bitrate (in kbps) in perfect network conditions.\r\n * @param simulcast {boolean} whether simulcast is enabled or not.\r\n * @param resolution {Resolution} the resolution.\r\n * @param millisSinceStart {number} the number of milliseconds since sending\r\n * video started.\r\n */\r\nfunction getTarget(simulcast, resolution, millisSinceStart) {\r\n    // Completely ignore the bitrate in the first 5 seconds, as the first\r\n    // event seems to fire very early and the value is suspicious and causes\r\n    // false positives.\r\n    if (millisSinceStart < 15000) {\r\n        return 1;\r\n    }\r\n\r\n    let target = 0;\r\n    let height = Math.min(resolution.height, resolution.width);\r\n\r\n    if (simulcast) {\r\n        // Find the first format with height no bigger than ours.\r\n        let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\r\n\r\n        if (simulcastFormat) {\r\n            // Sum the target fields from all simulcast layers for the given\r\n            // resolution (e.g. 720p + 360p + 180p).\r\n            for (height = simulcastFormat.height; height >= 180; height /= 2) {\r\n                const targetHeight = height;\r\n\r\n                simulcastFormat\r\n                    = kSimulcastFormats.find(f => f.height === targetHeight);\r\n                if (simulcastFormat) {\r\n                    target += simulcastFormat.target;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // See GetMaxDefaultVideoBitrateKbps in\r\n        // media/engine/webrtcvideoengine2.cc from webrtc.org\r\n        const pixels = resolution.width * resolution.height;\r\n\r\n        if (pixels <= 320 * 240) {\r\n            target = 600;\r\n        } else if (pixels <= 640 * 480) {\r\n            target = 1700;\r\n        } else if (pixels <= 960 * 540) {\r\n            target = 2000;\r\n        } else {\r\n            target = 2500;\r\n        }\r\n    }\r\n\r\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\r\n    // of connection quality by 1 second.\r\n    return Math.min(target, rampUp(Math.max(0, millisSinceStart - 1000)));\r\n}\r\n\r\n/**\r\n * Gets the bitrate to which GCC would have ramped up in perfect network\r\n * conditions after millisSinceStart milliseconds.\r\n * @param millisSinceStart {number} the number of milliseconds since sending\r\n * video was enabled.\r\n */\r\nfunction rampUp(millisSinceStart) {\r\n    if (millisSinceStart > 60000) {\r\n        return Number.MAX_SAFE_INTEGER;\r\n    }\r\n\r\n    // According to GCC the send side bandwidth estimation grows with at most\r\n    // 8% per second.\r\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\r\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\r\n}\r\n\r\n/**\r\n * A class which monitors the local statistics coming from the RTC modules, and\r\n * calculates a \"connection quality\" value, in percent, for the media\r\n * connection. A value of 100% indicates a very good network connection, and a\r\n * value of 0% indicates a poor connection.\r\n */\r\nexport default class ConnectionQuality {\r\n    /**\r\n     *\r\n     * @param conference\r\n     * @param eventEmitter\r\n     * @param options\r\n     */\r\n    constructor(conference, eventEmitter, options) {\r\n        this.eventEmitter = eventEmitter;\r\n\r\n        /**\r\n         * The owning JitsiConference.\r\n         */\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Holds statistics about the local connection quality.\r\n         */\r\n        this._localStats = {\r\n            connectionQuality: 100,\r\n            jvbRTT: undefined\r\n        };\r\n\r\n        /**\r\n         * The time this._localStats.connectionQuality was last updated.\r\n         */\r\n        this._lastConnectionQualityUpdate = -1;\r\n\r\n        /**\r\n         * Maps a participant ID to an object holding connection quality\r\n         * statistics received from this participant.\r\n         */\r\n        this._remoteStats = {};\r\n\r\n        /**\r\n         * The time that the ICE state last changed to CONNECTED. We use this\r\n         * to calculate how much time we as a sender have had to ramp-up.\r\n         */\r\n        this._timeIceConnected = -1;\r\n\r\n        /**\r\n         * The time that local video was unmuted. We use this to calculate how\r\n         * much time we as a sender have had to ramp-up.\r\n         */\r\n        this._timeVideoUnmuted = -1;\r\n\r\n        /**\r\n         * The time at which a video bitrate cap was last removed.  We use\r\n         * this to calculate how much time we, as a sender, have had to\r\n         * ramp-up\r\n         */\r\n        this._timeLastBwCapRemoved = -1;\r\n\r\n        // We assume a global startBitrate value for the sake of simplicity.\r\n        if (options.config.startBitrate && options.config.startBitrate > 0) {\r\n            startBitrate = options.config.startBitrate;\r\n        }\r\n\r\n        // TODO: consider ignoring these events and letting the user of\r\n        // lib-jitsi-meet handle these separately.\r\n        conference.on(\r\n            ConferenceEvents.CONNECTION_INTERRUPTED,\r\n            () => {\r\n                this._updateLocalConnectionQuality(0);\r\n                this.eventEmitter.emit(\r\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n                    this._localStats);\r\n                this._broadcastLocalStats();\r\n            });\r\n\r\n        conference.room.addListener(\r\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\r\n            (jingleSession, newState) => {\r\n                if (!jingleSession.isP2P && newState === 'connected') {\r\n                    this._timeIceConnected = window.performance.now();\r\n                }\r\n            });\r\n\r\n        // Listen to DataChannel message from other participants in the\r\n        // conference, and update the _remoteStats field accordingly.\r\n        conference.on(\r\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            (participant, payload) => {\r\n                if (payload.type === STATS_MESSAGE_TYPE) {\r\n                    this._updateRemoteStats(\r\n                        participant.getId(), payload.values);\r\n                }\r\n            });\r\n\r\n        // Listen to local statistics events originating from the RTC module\r\n        // and update the _localStats field.\r\n        // Oh, and by the way, the resolutions of all remote participants are\r\n        // also piggy-backed in these \"local\" statistics. It's obvious, really,\r\n        // if one carefully reads the *code* (but not the docs) in\r\n        // UI/VideoLayout/VideoLayout.js#updateLocalConnectionStats in\r\n        // jitsi-meet\r\n        // TODO: We should keep track of the remote resolution in _remoteStats,\r\n        // and notify about changes via separate events.\r\n        conference.statistics.addConnectionStatsListener(\r\n            this._updateLocalStats.bind(this));\r\n\r\n        // Save the last time we were unmuted.\r\n        conference.on(\r\n            ConferenceEvents.TRACK_MUTE_CHANGED,\r\n            track => {\r\n                if (track.isVideoTrack()) {\r\n                    if (track.isMuted()) {\r\n                        this._timeVideoUnmuted = -1;\r\n                    } else {\r\n                        this._maybeUpdateUnmuteTime();\r\n                    }\r\n                }\r\n            });\r\n        conference.on(\r\n            ConferenceEvents.TRACK_ADDED,\r\n            track => {\r\n                if (track.isVideoTrack() && !track.isMuted()) {\r\n                    this._maybeUpdateUnmuteTime();\r\n                }\r\n            });\r\n        conference.rtc.on(\r\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\r\n            track => {\r\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\r\n            });\r\n\r\n        conference.on(\r\n            ConferenceEvents.SERVER_REGION_CHANGED,\r\n            serverRegion => {\r\n                this._localStats.serverRegion = serverRegion;\r\n            });\r\n\r\n        conference.on(\r\n            ConferenceEvents.PROPERTIES_CHANGED,\r\n            properties => {\r\n                this._localStats.bridgeCount\r\n                    = Number((properties || {})['bridge-count']);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\r\n     * doesn't change it.\r\n     */\r\n    _maybeUpdateUnmuteTime() {\r\n        if (this._timeVideoUnmuted < 0) {\r\n            this._timeVideoUnmuted = window.performance.now();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates a new \"connection quality\" value.\r\n     * @param videoType {VideoType} the type of the video source (camera or\r\n     * a screen capture).\r\n     * @param isMuted {boolean} whether the local video is muted.\r\n     * @param resolutionName {Resolution} the input resolution used by the\r\n     * camera.\r\n     * @returns {*} the newly calculated connection quality.\r\n     */\r\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\r\n\r\n        // resolutionName is an index into Resolutions (where \"720\" is\r\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\r\n        const resolution = Resolutions[resolutionName];\r\n\r\n        let quality = 100;\r\n        let packetLoss;\r\n\r\n        // TODO: take into account packet loss for received streams\r\n\r\n        if (this._localStats.packetLoss) {\r\n            packetLoss = this._localStats.packetLoss.upload;\r\n\r\n            // Ugly Hack Alert (UHA):\r\n            // The packet loss for the upload direction is calculated based on\r\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\r\n            // termination for audio, these reports come from the actual\r\n            // receivers in the conference and therefore the reported packet\r\n            // loss includes loss from the bridge to the receiver.\r\n            // When we are sending video this effect is small, because the\r\n            // number of video packets is much larger than the number of audio\r\n            // packets (and our calculation is based on the total number of\r\n            // received and lost packets).\r\n            // When video is muted, however, the effect might be significant,\r\n            // but we don't know what it is. We do know that it is positive, so\r\n            // as a temporary solution, until RTCP termination is implemented\r\n            // for the audio streams, we relax the packet loss checks here.\r\n            if (isMuted) {\r\n                packetLoss *= 0.5;\r\n            }\r\n        }\r\n\r\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\r\n            || this._timeIceConnected < 0\r\n            || this._timeVideoUnmuted < 0) {\r\n\r\n            // Calculate a value based on packet loss only.\r\n            if (packetLoss === undefined) {\r\n                logger.error('Cannot calculate connection quality, unknown '\r\n                    + 'packet loss.');\r\n                quality = 100;\r\n            } else if (packetLoss <= 2) {\r\n                quality = 100; // Full 5 bars.\r\n            } else if (packetLoss <= 4) {\r\n                quality = 70; // 4 bars\r\n            } else if (packetLoss <= 6) {\r\n                quality = 50; // 3 bars\r\n            } else if (packetLoss <= 8) {\r\n                quality = 30; // 2 bars\r\n            } else if (packetLoss <= 12) {\r\n                quality = 10; // 1 bars\r\n            } else {\r\n                quality = 0; // Still 1 bar, but slower climb-up.\r\n            }\r\n        } else {\r\n            // Calculate a value based on the sending bitrate.\r\n\r\n            // Figure out if simulcast is in use\r\n            const activeTPC = this._conference.getActivePeerConnection();\r\n            const isSimulcastOn\r\n                = Boolean(activeTPC && activeTPC.isSimulcastOn());\r\n\r\n            const newVideoBitrateCap\r\n                = activeTPC && activeTPC.bandwidthLimiter\r\n                && activeTPC.bandwidthLimiter.getBandwidthLimit('video');\r\n\r\n            // If we had a cap set but there isn't one now, then it has\r\n            // just been 'lifted', so we should treat this like a new\r\n            // ramp up.\r\n            if (!newVideoBitrateCap && videoBitrateCap) {\r\n                this._timeLastBwCapRemoved = window.performance.now();\r\n\r\n                // Set the start bitrate to whatever we were just capped to\r\n                startBitrate = videoBitrateCap;\r\n            }\r\n            videoBitrateCap = newVideoBitrateCap;\r\n\r\n            // time since sending of video was enabled.\r\n            const millisSinceStart = window.performance.now()\r\n                - Math.max(this._timeVideoUnmuted,\r\n                    this._timeIceConnected,\r\n                    this._timeLastBwCapRemoved);\r\n\r\n            // expected sending bitrate in perfect conditions\r\n            let target\r\n                = getTarget(isSimulcastOn, resolution, millisSinceStart);\r\n\r\n            target = Math.min(0.9 * target, MAX_TARGET_BITRATE);\r\n\r\n            if (videoBitrateCap) {\r\n                target = Math.min(target, videoBitrateCap);\r\n            }\r\n\r\n            quality = 100 * this._localStats.bitrate.upload / target;\r\n\r\n            // Whatever the bitrate, drop early if there is significant loss\r\n            if (packetLoss && packetLoss >= 10) {\r\n                quality = Math.min(quality, 30);\r\n            }\r\n        }\r\n\r\n        // Make sure that the quality doesn't climb quickly\r\n        if (this._lastConnectionQualityUpdate > 0) {\r\n            const maxIncreasePerSecond = 2;\r\n            const prevConnectionQuality = this._localStats.connectionQuality;\r\n            const diffSeconds\r\n                = (window.performance.now() - this._lastConnectionQualityUpdate)\r\n                    / 1000;\r\n\r\n            quality\r\n                = Math.min(\r\n                    quality,\r\n                    prevConnectionQuality\r\n                        + (diffSeconds * maxIncreasePerSecond));\r\n        }\r\n\r\n        return Math.min(100, quality);\r\n    }\r\n\r\n    /**\r\n     * Updates the localConnectionQuality value\r\n     * @param values {number} the new value. Should be in [0, 100].\r\n     */\r\n    _updateLocalConnectionQuality(value) {\r\n        this._localStats.connectionQuality = value;\r\n        this._lastConnectionQualityUpdate = window.performance.now();\r\n    }\r\n\r\n    /**\r\n     * Broadcasts the local statistics to all other participants in the\r\n     * conference.\r\n     */\r\n    _broadcastLocalStats() {\r\n        // Send only the data that remote participants care about.\r\n        const data = {\r\n            bitrate: this._localStats.bitrate,\r\n            packetLoss: this._localStats.packetLoss,\r\n            connectionQuality: this._localStats.connectionQuality,\r\n            jvbRTT: this._localStats.jvbRTT,\r\n            serverRegion: this._localStats.serverRegion,\r\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\r\n            avgAudioLevels: this._localStats.localAvgAudioLevels\r\n        };\r\n\r\n        try {\r\n            this._conference.broadcastEndpointMessage({\r\n                type: STATS_MESSAGE_TYPE,\r\n                values: data });\r\n        } catch (e) {\r\n            // We often hit this in the beginning of a call, before the data\r\n            // channel is ready. It is not a big problem, because we will\r\n            // send the statistics again after a few seconds, and the error is\r\n            // already logged elsewhere. So just ignore it.\r\n\r\n            // let errorMsg = \"Failed to broadcast local stats\";\r\n            // logger.error(errorMsg, e);\r\n            // GlobalOnErrorHandler.callErrorHandler(\r\n            //    new Error(errorMsg + \": \" + e));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the local statistics\r\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\r\n     * the stats\r\n     * @param data new statistics\r\n     */\r\n    _updateLocalStats(tpc, data) {\r\n        // Update jvbRTT\r\n        if (!tpc.isP2P) {\r\n            const jvbRTT\r\n                = data.transport\r\n                    && data.transport.length && data.transport[0].rtt;\r\n\r\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\r\n        }\r\n\r\n        // Do not continue with processing of other stats if they do not\r\n        // originate from the active peerconnection\r\n        if (tpc !== this._conference.getActivePeerConnection()) {\r\n            return;\r\n        }\r\n\r\n        let key;\r\n        const updateLocalConnectionQuality\r\n            = !this._conference.isConnectionInterrupted();\r\n        const localVideoTrack\r\n            = this._conference.getLocalVideoTrack();\r\n        const videoType\r\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\r\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\r\n        const resolution = localVideoTrack\r\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\r\n\r\n        if (!isMuted) {\r\n            this._maybeUpdateUnmuteTime();\r\n        }\r\n\r\n        // Copy the fields already in 'data'.\r\n        for (key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                this._localStats[key] = data[key];\r\n            }\r\n        }\r\n\r\n        // And re-calculate the connectionQuality field.\r\n        if (updateLocalConnectionQuality) {\r\n            this._updateLocalConnectionQuality(\r\n                this._calculateConnectionQuality(\r\n                    videoType,\r\n                    isMuted,\r\n                    resolution));\r\n        }\r\n\r\n        this.eventEmitter.emit(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._localStats);\r\n        this._broadcastLocalStats();\r\n    }\r\n\r\n    /**\r\n     * Updates remote statistics\r\n     * @param id the id of the remote participant\r\n     * @param data the statistics received\r\n     */\r\n    _updateRemoteStats(id, data) {\r\n        // Use only the fields we need\r\n        this._remoteStats[id] = {\r\n            bitrate: data.bitrate,\r\n            packetLoss: data.packetLoss,\r\n            connectionQuality: data.connectionQuality,\r\n            jvbRTT: data.jvbRTT,\r\n            serverRegion: data.serverRegion,\r\n            maxEnabledResolution: data.maxEnabledResolution,\r\n            avgAudioLevels: data.avgAudioLevels\r\n        };\r\n\r\n        this.eventEmitter.emit(\r\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n            id,\r\n            this._remoteStats[id]);\r\n    }\r\n\r\n    /**\r\n     * Returns the local statistics.\r\n     * Exported only for use in jitsi-meet-torture.\r\n     */\r\n    getStats() {\r\n        return this._localStats;\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\r\n *\r\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\r\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\r\n * the internet offline status then the time will start counting after the internet comes back online.\r\n *\r\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\r\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\r\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\r\n */\r\nexport default class IceFailedHandling {\r\n    /**\r\n     * Creates new {@code DelayedIceFailed} task.\r\n     * @param {JitsiConference} conference\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n    }\r\n\r\n    /**\r\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\r\n     * notification to Jicofo or emits the ice failed conference event.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _actOnIceFailed() {\r\n        const { enableIceRestart } = this._conference.options.config;\r\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\r\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\r\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\r\n\r\n        logger.info('ICE failed,'\r\n            + ` enableIceRestart: ${enableIceRestart},`\r\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\r\n\r\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate)) {\r\n            logger.info('ICE failed, but ICE restarts are disabled');\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.ICE_FAILED);\r\n\r\n            return;\r\n        }\r\n\r\n        const jvbConnection = this._conference.jvbJingleSession;\r\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\r\n\r\n        if (!jvbConnection) {\r\n            logger.warn('Not sending ICE failed - no JVB connection');\r\n        } else if (jvbConnIceState === 'connected') {\r\n            logger.info('ICE connection restored - not sending ICE failed');\r\n        } else {\r\n            logger.info('Sending ICE failed - the connection did not recover, '\r\n                + `ICE state: ${jvbConnIceState}, `\r\n                + `use 'session-terminate': ${useTerminateForRestart}`);\r\n            if (useTerminateForRestart) {\r\n                this._conference.jvbJingleSession.terminate(\r\n                    () => {\r\n                        logger.info('session-terminate for ice restart - done');\r\n                    },\r\n                    error => {\r\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\r\n                    }, {\r\n                        reason: 'connectivity-error',\r\n                        reasonDescription: 'ICE FAILED',\r\n                        requestRestart: true,\r\n                        sendSessionTerminate: true\r\n                    });\r\n            } else {\r\n                this._conference.jvbJingleSession.sendIceFailedNotification();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the task.\r\n     */\r\n    start() {\r\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\r\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\r\n        // gets reconnected.\r\n        //  This also handles the case about waiting for the internet to come back online, because ping\r\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\r\n        // CONNECTED which is the extra 2 second timeout after ping.\r\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\r\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\r\n        // to 'item-not-found' error returned by the server.\r\n        this._conference.xmpp.ping(65000).then(\r\n            () => {\r\n                if (!this._canceled) {\r\n                    this._iceFailedTimeout = window.setTimeout(() => {\r\n                        this._iceFailedTimeout = undefined;\r\n                        this._actOnIceFailed();\r\n                    }, 2000);\r\n                }\r\n            },\r\n            error => {\r\n                logger.error('PING error/timeout - not sending ICE failed', error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Cancels the task.\r\n     */\r\n    cancel() {\r\n        this._canceled = true;\r\n        window.clearTimeout(this._iceFailedTimeout);\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport browser from '../browser';\r\n\r\nimport * as DetectionEvents from './DetectionEvents';\r\n\r\n// We wait a certain time interval for constant silence input from the current device to account for\r\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\r\n// an audio track is added to the tcr.\r\n// Potential improvement - add this as a configurable parameter.\r\nconst SILENCE_PERIOD_MS = 4000;\r\n\r\n/**\r\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\r\n * state must be constant for a configured amount of time in order for the event to be triggered.\r\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\r\n * @fires DetectionEvents.NO_AUDIO_INPUT\r\n */\r\nexport default class NoAudioSignalDetection extends EventEmitter {\r\n    /**\r\n     * Creates new NoAudioSignalDetection.\r\n     *\r\n     * @param conference the JitsiConference instance that created us.\r\n     * @constructor\r\n     */\r\n    constructor(conference) {\r\n        super();\r\n\r\n        this._conference = conference;\r\n        this._timeoutTrigger = null;\r\n        this._hasAudioInput = null;\r\n\r\n        if (!browser.supportsReceiverStats()) {\r\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\r\n        }\r\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Clear the timeout state.\r\n     */\r\n    _clearTriggerTimeout() {\r\n        clearTimeout(this._timeoutTrigger);\r\n        this._timeoutTrigger = null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Generated event triggered by a change in the current conference audio input state.\r\n     *\r\n     * @param {*} audioLevel - The audio level of the ssrc.\r\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\r\n     */\r\n    _handleAudioInputStateChange(audioLevel) {\r\n        // Current audio input state of the active local track in the conference, true for audio input false for no\r\n        // audio input.\r\n        const status = audioLevel !== 0;\r\n\r\n        // If this is the first audio event picked up or the current status is different from the previous trigger\r\n        // the event.\r\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\r\n            this._hasAudioInput = status;\r\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate event triggered by a prolonged period of no audio input.\r\n     *\r\n     * @param {number} audioLevel - The audio level of the ssrc.\r\n     * @fires DetectionEvents.NO_AUDIO_INPUT\r\n     */\r\n    _handleNoAudioInputDetection(audioLevel) {\r\n        if (this._eventFired) {\r\n            return;\r\n        }\r\n\r\n        if (audioLevel === 0 && !this._timeoutTrigger) {\r\n            this._timeoutTrigger = setTimeout(() => {\r\n                this._eventFired = true;\r\n\r\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\r\n            }, SILENCE_PERIOD_MS);\r\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\r\n            this._clearTriggerTimeout();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\r\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\r\n     * being reported.\r\n     * @param {number} audioLevel - The audio level of the ssrc.\r\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\r\n     */\r\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\r\n        // We are interested in the local audio streams\r\n        if (!isLocal || !this._audioTrack) {\r\n            return;\r\n        }\r\n\r\n        // Get currently active local tracks from the TraceablePeerConnection\r\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\r\n\r\n        // Only target the current active track in the tpc. For some reason audio levels for previous\r\n        // devices are also picked up from the PeerConnection so we filter them out.\r\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\r\n            return;\r\n        }\r\n\r\n        // First handle audio input state change. In case the state changed to no input the no audio input event\r\n        // can try to fire again.\r\n        this._handleAudioInputStateChange(audioLevel);\r\n        this._handleNoAudioInputDetection(audioLevel);\r\n    }\r\n\r\n    /**\r\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\r\n     * Only take into account local audio tracks.\r\n     *\r\n     * @param {JitsiTrack} track - The added JitsiTrack.\r\n     */\r\n    _trackAdded(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Reset state for the new track.\r\n            this._audioTrack = track;\r\n            this._eventFired = false;\r\n            this._clearTriggerTimeout();\r\n\r\n            // Listen for the audio levels on the newly added audio track\r\n            if (browser.supportsReceiverStats()) {\r\n                track.on(\r\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\r\n                    audioLevel => {\r\n                        this._handleNoAudioInputDetection(audioLevel);\r\n                    }\r\n                );\r\n                track.on(\r\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                    audioLevel => {\r\n                        this._handleNoAudioInputDetection(audioLevel);\r\n                        this._handleAudioInputStateChange(audioLevel);\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\n\r\n/**\r\n * The value which we use to say, every sound over this threshold\r\n * is talking on the mic.\r\n * @type {number}\r\n */\r\nconst SPEECH_DETECT_THRESHOLD = 0.6;\r\n\r\n/**\r\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\r\n * currently used.\r\n * Listens for changes in the audio level changes of the local p2p audio track\r\n * or remote p2p one and fires dominant speaker events to be able to use\r\n * features depending on those events (speaker stats), to make them work without\r\n * the video bridge.\r\n */\r\nexport default class P2PDominantSpeakerDetection {\r\n    /**\r\n     * Creates P2PDominantSpeakerDetection\r\n     * @param conference the JitsiConference instance that created us.\r\n     * @constructor\r\n     */\r\n    constructor(conference) {\r\n        this.conference = conference;\r\n\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n            this._audioLevel.bind(this));\r\n\r\n        this.myUserID = this.conference.myUserId();\r\n    }\r\n\r\n    /**\r\n     * Receives audio level events for all streams in the conference.\r\n     *\r\n     * @param {String} id - The participant id\r\n     * @param {number} audioLevel - The audio level.\r\n     */\r\n    _audioLevel(id, audioLevel) {\r\n\r\n        // we do not process if p2p is not active\r\n        // or audio level is under certain threshold\r\n        // or if the audio level is for local audio track which is muted\r\n        if (!this.conference.isP2PActive()\r\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\r\n            || (id === this.myUserID\r\n                    && this.conference.getLocalAudioTrack().isMuted())) {\r\n            return;\r\n        }\r\n\r\n        this.conference.rtc.eventEmitter.emit(\r\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n            id);\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\n\r\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\r\n\r\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\n\r\n/**\r\n * The average value VAD needs to be under over a period of time to be considered noise.\r\n * @type {number}\r\n */\r\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\r\n\r\n/**\r\n * The average values that audio input need to be over to be considered loud.\r\n * @type {number}\r\n */\r\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\r\n\r\n/**\r\n * The value that a VAD score needs to be under in order for processing to begin.\r\n * @type {number}\r\n */\r\nconst VAD_SCORE_TRIGGER = 0.2;\r\n\r\n/**\r\n * The value that a VAD score needs to be under in order for processing to begin.\r\n * @type {number}\r\n */\r\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\r\n\r\n/**\r\n * Time span over which we calculate an average score used to determine if we trigger the event.\r\n * @type {number}\r\n */\r\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\r\n\r\n/**\r\n * Detect if provided VAD score and PCM data is considered noise.\r\n */\r\nexport default class VADNoiseDetection extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADNoiseDetection</tt>\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\r\n         * ongoing.\r\n         */\r\n        this._processing = false;\r\n\r\n        /**\r\n         * Buffer that keeps the VAD scores for a period of time.\r\n         */\r\n        this._scoreArray = [];\r\n\r\n        /**\r\n         * Buffer that keeps audio level samples for a period of time.\r\n         */\r\n        this._audioLvlArray = [];\r\n\r\n        /**\r\n         * Current state of the service, if it's not active no processing will occur.\r\n         */\r\n        this._active = false;\r\n\r\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\r\n     * If the score is above the set threshold fire the event.\r\n     * @returns {void}\r\n     * @fires VAD_NOISY_DEVICE\r\n     */\r\n    _calculateNoisyScore() {\r\n        const scoreAvg = calculateAverage(this._scoreArray);\r\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\r\n\r\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\r\n            this.emit(VAD_NOISY_DEVICE);\r\n\r\n            this._setActiveState(false);\r\n        }\r\n\r\n        // We reset the context in case a new process phase needs to be triggered.\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Record the vad score and average volume in the appropriate buffers.\r\n     *\r\n     * @param {number} vadScore\r\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\r\n     */\r\n    _recordValues(vadScore, avgAudioLvl) {\r\n        this._scoreArray.push(vadScore);\r\n        this._audioLvlArray.push(avgAudioLvl);\r\n    }\r\n\r\n    /**\r\n     * Set the active state of the detection service and notify any listeners.\r\n     *\r\n     * @param {boolean} active\r\n     * @fires DETECTOR_STATE_CHANGE\r\n     */\r\n    _setActiveState(active) {\r\n        this._active = active;\r\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\r\n    }\r\n\r\n    /**\r\n     * Change the state according to the muted status of the tracked device.\r\n     *\r\n     * @param {boolean} isMuted - Is the device muted or not.\r\n     */\r\n    changeMuteState(isMuted) {\r\n        // This service only needs to run when the microphone is not muted.\r\n        this._setActiveState(!isMuted);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the service is active or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isActive() {\r\n        return this._active;\r\n    }\r\n\r\n    /**\r\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._processing = false;\r\n        this._scoreArray = [];\r\n        this._audioLvlArray = [];\r\n        clearTimeout(this._processTimeout);\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and processes them.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    processVADScore(vadScore) {\r\n        if (!this._active) {\r\n            return;\r\n        }\r\n\r\n        // There is a processing phase on going, add score to buffer array.\r\n        if (this._processing) {\r\n            // Filter and calculate sample average so we don't have to process one large array at a time.\r\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\r\n\r\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\r\n\r\n            return;\r\n        }\r\n\r\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\r\n        // noise\r\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\r\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\r\n            const avgAudioLvl = calculateAverage(posAudioLevels);\r\n\r\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\r\n                this._processing = true;\r\n                this._recordValues(vadScore.score, avgAudioLvl);\r\n\r\n                // Once the preset timeout executes the final score will be calculated.\r\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\n\r\nimport { calculateAverage } from '../util/MathUtil';\r\n\r\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\n\r\n\r\n/**\r\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\r\n * @type {number}\r\n */\r\nconst VAD_AVG_THRESHOLD = 0.6;\r\n\r\n/**\r\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\r\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\r\n * @type {number}\r\n */\r\nconst VAD_VOICE_LEVEL = 0.9;\r\n\r\n/**\r\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\r\n * @type {number}\r\n */\r\n\r\n/**\r\n * Time span over which we calculate an average score used to determine if we trigger the event.\r\n * @type {number}\r\n */\r\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\r\n\r\n/**\r\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\r\n */\r\nexport default class VADTalkMutedDetection extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADTalkMutedDetection</tt>\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\r\n         * ongoing.\r\n         */\r\n        this._processing = false;\r\n\r\n        /**\r\n         * Buffer that keeps the VAD scores for a period of time.\r\n         */\r\n        this._scoreArray = [];\r\n\r\n        /**\r\n         * Current mute state of the audio track being monitored.\r\n         */\r\n        this._active = false;\r\n\r\n        this._calculateVADScore = this._calculateVADScore.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\r\n     * @returns {void}\r\n     * @fires VAD_TALK_WHILE_MUTED\r\n     */\r\n    _calculateVADScore() {\r\n        const score = calculateAverage(this._scoreArray);\r\n\r\n        if (score > VAD_AVG_THRESHOLD) {\r\n            this.emit(VAD_TALK_WHILE_MUTED);\r\n\r\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\r\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\r\n            this._setActiveState(false);\r\n        }\r\n\r\n        // We reset the context in case a new process phase needs to be triggered.\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Set the active state of the detection service and notify any listeners.\r\n     *\r\n     * @param {boolean} active\r\n     * @fires DETECTOR_STATE_CHANGE\r\n     */\r\n    _setActiveState(active) {\r\n        this._active = active;\r\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\r\n    }\r\n\r\n    /**\r\n     * Change the state according to the muted status of the tracked device.\r\n     *\r\n     * @param {boolean} isMuted - Is the device muted or not.\r\n     */\r\n    changeMuteState(isMuted) {\r\n        // This service only needs to run when the microphone is muted.\r\n        this._setActiveState(isMuted);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the service is active or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isActive() {\r\n        return this._active;\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and processes them.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    processVADScore(vadScore) {\r\n        if (!this._active) {\r\n            return;\r\n        }\r\n\r\n        // There is a processing phase on going, add score to buffer array.\r\n        if (this._processing) {\r\n            this._scoreArray.push(vadScore.score);\r\n\r\n            return;\r\n        }\r\n\r\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\r\n        // there is no need to check for rogue events.\r\n        if (vadScore.score > VAD_VOICE_LEVEL) {\r\n            this._processing = true;\r\n            this._scoreArray.push(vadScore.score);\r\n\r\n            // Start gathering VAD scores for the configured period of time.\r\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._processing = false;\r\n        this._scoreArray = [];\r\n        clearTimeout(this._processTimeout);\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as E2ePingEvents\r\n    from '../../service/e2eping/E2ePingEvents';\r\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The 'type' of a message which designates an e2e ping request.\r\n * @type {string}\r\n */\r\nconst E2E_PING_REQUEST = 'e2e-ping-request';\r\n\r\n/**\r\n * The 'type' of a message which designates an e2e ping response.\r\n * @type {string}\r\n */\r\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\r\n\r\n/**\r\n * Saves e2e ping related state for a single JitsiParticipant.\r\n */\r\nclass ParticipantWrapper {\r\n    /**\r\n     * Creates a ParticipantWrapper\r\n     * @param {JitsiParticipant} participant - The remote participant that this\r\n     * object wraps.\r\n     * @param {E2ePing} e2eping\r\n     */\r\n    constructor(participant, e2eping) {\r\n        // The JitsiParticipant\r\n        this.participant = participant;\r\n\r\n        // The E2ePing\r\n        this.e2eping = e2eping;\r\n\r\n        // Caches the ID\r\n        this.id = participant.getId();\r\n\r\n        // Recently sent requests\r\n        this.requests = {};\r\n\r\n        // The ID of the last sent request. We just increment it for each new\r\n        // request. Start at 1 so we can consider only thruthy values valid.\r\n        this.lastRequestId = 1;\r\n\r\n        this.clearIntervals = this.clearIntervals.bind(this);\r\n        this.sendRequest = this.sendRequest.bind(this);\r\n        this.handleResponse = this.handleResponse.bind(this);\r\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\r\n        this.sendAnalytics = this.sendAnalytics.bind(this);\r\n\r\n        // If the data channel was already open (this is likely a participant\r\n        // joining an existing conference) send a request immediately.\r\n        if (e2eping.isDataChannelOpen) {\r\n            this.sendRequest();\r\n        }\r\n\r\n        this.pingInterval = window.setInterval(\r\n            this.sendRequest, e2eping.pingIntervalMs);\r\n        this.analyticsInterval = window.setTimeout(\r\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\r\n    }\r\n\r\n    /**\r\n     * Clears the interval which sends pings.\r\n     * @type {*}\r\n     */\r\n    clearIntervals() {\r\n        if (this.pingInterval) {\r\n            window.clearInterval(this.pingInterval);\r\n        }\r\n        if (this.analyticsInterval) {\r\n            window.clearInterval(this.analyticsInterval);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the next ping request.\r\n     * @type {*}\r\n     */\r\n    sendRequest() {\r\n        const requestId = this.lastRequestId++;\r\n        const requestMessage = {\r\n            type: E2E_PING_REQUEST,\r\n            id: requestId\r\n        };\r\n\r\n        this.e2eping.sendMessage(requestMessage, this.id);\r\n        this.requests[requestId] = {\r\n            id: requestId,\r\n            timeSent: window.performance.now()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Handles a response from this participant.\r\n     * @type {*}\r\n     */\r\n    handleResponse(response) {\r\n        const request = this.requests[response.id];\r\n\r\n        if (request) {\r\n            request.rtt = window.performance.now() - request.timeSent;\r\n            this.e2eping.eventEmitter.emit(\r\n                E2ePingEvents.E2E_RTT_CHANGED,\r\n                this.participant,\r\n                request.rtt);\r\n        }\r\n\r\n        this.maybeSendAnalytics();\r\n    }\r\n\r\n    /**\r\n     * Goes over the requests, clearing ones which we don't need anymore, and\r\n     * if it finds at least one request with a valid RTT in the last\r\n     * 'analyticsIntervalMs' then sends an analytics event.\r\n     * @type {*}\r\n     */\r\n    maybeSendAnalytics() {\r\n        const now = window.performance.now();\r\n\r\n        // The RTT we'll report is the minimum RTT measured in the last\r\n        // analyticsInterval\r\n        let rtt = Infinity;\r\n        let request, requestId;\r\n\r\n        // It's time to send analytics. Clean up all requests and find the\r\n        for (requestId in this.requests) {\r\n            if (this.requests.hasOwnProperty(requestId)) {\r\n                request = this.requests[requestId];\r\n\r\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\r\n                    // An old request. We don't care about it anymore.\r\n                    delete this.requests[requestId];\r\n                } else if (request.rtt) {\r\n                    rtt = Math.min(rtt, request.rtt);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (rtt < Infinity) {\r\n            this.sendAnalytics(rtt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends an analytics event for this participant with the given RTT.\r\n     * @type {*}\r\n     */\r\n    sendAnalytics(rtt) {\r\n        Statistics.sendAnalytics(createE2eRttEvent(\r\n            this.id,\r\n            this.participant.getProperty('region'),\r\n            rtt));\r\n    }\r\n}\r\n\r\n/**\r\n * Implements end-to-end ping (from one conference participant to another) via\r\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\r\n *\r\n * TODO: use a broadcast message instead of individual pings to each remote\r\n * participant.\r\n *\r\n * This class:\r\n * 1. Sends periodic ping requests to all other participants in the\r\n * conference.\r\n * 2. Responds to ping requests from other participants.\r\n * 3. Fires events with the end-to-end RTT to each participant whenever a\r\n * response is received.\r\n * 4. Fires analytics events with the end-to-end RTT periodically.\r\n */\r\nexport default class E2ePing {\r\n    /**\r\n     * @param {JitsiConference} conference - The conference.\r\n     * @param {Function} sendMessage - The function to use to send a message.\r\n     * @param {Object} options\r\n     */\r\n    constructor(conference, options, sendMessage) {\r\n        this.conference = conference;\r\n        this.eventEmitter = conference.eventEmitter;\r\n        this.sendMessage = sendMessage;\r\n\r\n        // The interval at which pings will be sent (<= 0 disables sending).\r\n        this.pingIntervalMs = 10000;\r\n\r\n        // The interval at which analytics events will be sent.\r\n        this.analyticsIntervalMs = 60000;\r\n\r\n        // Maps a participant ID to its ParticipantWrapper\r\n        this.participants = {};\r\n\r\n        // Whether the WebRTC channel has been opened or not.\r\n        this.isDataChannelOpen = false;\r\n\r\n        if (options && options.e2eping) {\r\n            if (typeof options.e2eping.pingInterval === 'number') {\r\n                this.pingIntervalMs = options.e2eping.pingInterval;\r\n            }\r\n            if (typeof options.e2eping.analyticsInterval === 'number') {\r\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\r\n            }\r\n\r\n            // We want to report at most once a ping interval.\r\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\r\n                < this.pingIntervalMs) {\r\n                this.analyticsIntervalMs = this.pingIntervalMs;\r\n            }\r\n        }\r\n        logger.info(\r\n            `Initializing e2e ping; pingInterval=${\r\n                this.pingIntervalMs}, analyticsInterval=${\r\n                this.analyticsIntervalMs}.`);\r\n\r\n        this.participantJoined = this.participantJoined.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this.participantJoined);\r\n\r\n        this.participantLeft = this.participantLeft.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this.participantLeft);\r\n\r\n        this.messageReceived = this.messageReceived.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            this.messageReceived);\r\n\r\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\r\n            this.dataChannelOpened);\r\n    }\r\n\r\n    /**\r\n     * Notifies this instance that the communications channel has been opened\r\n     * and it can now send messages via sendMessage.\r\n     */\r\n    dataChannelOpened() {\r\n        this.isDataChannelOpen = true;\r\n\r\n        // We don't want to wait the whole interval before sending the first\r\n        // request, but we can't send it immediately after the participant joins\r\n        // either, because our data channel might not have initialized.\r\n        // So once the data channel initializes, send requests to everyone.\r\n        // Wait an additional 200ms to give a chance to the remote side (if it\r\n        // also just connected as is the case for the first 2 participants in a\r\n        // conference) to open its data channel.\r\n        for (const id in this.participants) {\r\n            if (this.participants.hasOwnProperty(id)) {\r\n                const participantWrapper = this.participants[id];\r\n\r\n                window.setTimeout(participantWrapper.sendRequest, 200);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a message that was received.\r\n     *\r\n     * @param participant - The message sender.\r\n     * @param payload - The payload of the message.\r\n     */\r\n    messageReceived(participant, payload) {\r\n        // Listen to E2E PING requests and responses from other participants\r\n        // in the conference.\r\n        if (payload.type === E2E_PING_REQUEST) {\r\n            this.handleRequest(participant.getId(), payload);\r\n        } else if (payload.type === E2E_PING_RESPONSE) {\r\n            this.handleResponse(participant.getId(), payload);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a participant joining the conference. Starts to send ping\r\n     * requests to the participant.\r\n     *\r\n     * @param {String} id - The ID of the participant.\r\n     * @param {JitsiParticipant} participant - The participant that joined.\r\n     */\r\n    participantJoined(id, participant) {\r\n        if (this.pingIntervalMs <= 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.participants[id]) {\r\n            logger.info(\r\n                `Participant wrapper already exists for ${id}. Clearing.`);\r\n            this.participants[id].clearIntervals();\r\n            delete this.participants[id];\r\n        }\r\n\r\n        this.participants[id] = new ParticipantWrapper(participant, this);\r\n    }\r\n\r\n    /**\r\n     * Handles a participant leaving the conference. Stops sending requests.\r\n     *\r\n     * @param {String} id - The ID of the participant.\r\n     */\r\n    participantLeft(id) {\r\n        if (this.pingIntervalMs <= 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.participants[id]) {\r\n            this.participants[id].clearIntervals();\r\n            delete this.participants[id];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a ping request coming from another participant.\r\n     *\r\n     * @param {string} participantId - The ID of the participant who sent the\r\n     * request.\r\n     * @param {Object} request - The request.\r\n     */\r\n    handleRequest(participantId, request) {\r\n        // If it's a valid request, just send a response.\r\n        if (request && request.id) {\r\n            const response = {\r\n                type: E2E_PING_RESPONSE,\r\n                id: request.id\r\n            };\r\n\r\n            this.sendMessage(response, participantId);\r\n        } else {\r\n            logger.info(\r\n                `Received an invalid e2e ping request from ${participantId}.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a ping response coming from another participant\r\n     * @param {string} participantId - The ID of the participant who sent the\r\n     * response.\r\n     * @param {Object} response - The response.\r\n     */\r\n    handleResponse(participantId, response) {\r\n        const participantWrapper = this.participants[participantId];\r\n\r\n        if (participantWrapper) {\r\n            participantWrapper.handleResponse(response);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops this E2ePing (i.e. stop sending requests).\r\n     */\r\n    stop() {\r\n        logger.info('Stopping e2eping');\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this.participantJoined);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this.participantLeft);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            this.messageReceived);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\r\n            this.dataChannelOpened);\r\n\r\n        for (const id in this.participants) {\r\n            if (this.participants.hasOwnProperty(id)) {\r\n                this.participants[id].clearIntervals();\r\n            }\r\n        }\r\n\r\n        this.participants = {};\r\n    }\r\n}\r\n\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\r\n * P2P status and the conference participants count. See the event description\r\n * for more info.\r\n */\r\nexport default class Jvb121EventGenerator {\r\n    /**\r\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\r\n     * @param {JitsiConference} conference\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\r\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\r\n         * the conference is currently in the P2P mode.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._jvb121 = true;\r\n\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\r\n    }\r\n\r\n    /**\r\n     * Checks whether the JVB121 value should be updated and a new event\r\n     * emitted.\r\n     */\r\n    evaluateStatus() {\r\n        const oldStatus = this._jvb121;\r\n        const newStatus\r\n            = !this._conference.isP2PActive()\r\n                && this._conference.getParticipantCount() <= 2;\r\n\r\n        if (oldStatus !== newStatus) {\r\n            this._jvb121 = newStatus;\r\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\r\n        }\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\r\n\r\n/**\r\n * The class manages send and receive video constraints across media sessions({@link JingleSessionPC}) which belong to\r\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\r\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\r\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\r\n * different.\r\n */\r\nexport class QualityController {\r\n    /**\r\n     * Creates new instance for a given conference.\r\n     *\r\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\r\n     * the quality constraints.\r\n     */\r\n    constructor(conference) {\r\n        this.conference = conference;\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n            session => this._onMediaSessionStarted(session));\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n            () => this._propagateSendMaxFrameHeight());\r\n    }\r\n\r\n    /**\r\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\r\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\r\n     * the conference has entered the p2p mode already.\r\n     *\r\n     * @param {JingleSessionPC} mediaSession - the started media session.\r\n     * @private\r\n     */\r\n    _onMediaSessionStarted(mediaSession) {\r\n        mediaSession.addListener(\r\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\r\n            session => {\r\n                if (session === this.conference._getActiveMediaSession()) {\r\n                    this._propagateSendMaxFrameHeight();\r\n                }\r\n            });\r\n        this.preferredReceiveMaxFrameHeight\r\n            && mediaSession.setReceiverVideoConstraint(this.preferredReceiveMaxFrameHeight);\r\n\r\n        // Set the degradation preference on the local video track.\r\n        mediaSession.setSenderVideoDegradationPreference();\r\n\r\n        // Set the max bitrates on video sender if they are specified in config.js videoQuality settings.\r\n        mediaSession.setSenderMaxBitrates();\r\n    }\r\n\r\n    /**\r\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\r\n     * sessions for the reasons mentioned in this class description.\r\n     *\r\n     * @returns {Promise<void[]>}\r\n     * @private\r\n     */\r\n    _propagateSendMaxFrameHeight() {\r\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\r\n        const promises = [];\r\n\r\n        if (sendMaxFrameHeight >= 0) {\r\n            for (const session of this.conference._getMediaSessions()) {\r\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\r\n     * the active media session's receive preference set by the remote party.\r\n     *\r\n     * @returns {number|undefined}\r\n     */\r\n    selectSendMaxFrameHeight() {\r\n        const activeMediaSession = this.conference._getActiveMediaSession();\r\n        const remoteRecvMaxFrameHeight = activeMediaSession && activeMediaSession.getRemoteRecvMaxFrameHeight();\r\n\r\n        if (this.preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\r\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\r\n        } else if (remoteRecvMaxFrameHeight >= 0) {\r\n            return remoteRecvMaxFrameHeight;\r\n        }\r\n\r\n        return this.preferredSendMaxFrameHeight;\r\n    }\r\n\r\n    /**\r\n     * Sets local preference for max receive video frame height.\r\n     * @param {number|undefined} maxFrameHeight - the new value.\r\n     */\r\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\r\n        this.preferredReceiveMaxFrameHeight = maxFrameHeight;\r\n\r\n        for (const session of this.conference._getMediaSessions()) {\r\n            maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets local preference for max send video frame height.\r\n     *\r\n     * @param {number} maxFrameHeight - the new value to set.\r\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\r\n     */\r\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\r\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\r\n\r\n        return this._propagateSendMaxFrameHeight();\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport JibriSession from './JibriSession';\r\nimport recordingXMLUtils from './recordingXMLUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * A class responsible for starting and stopping recording sessions and emitting\r\n * state updates for them.\r\n */\r\nclass RecordingManager {\r\n    /**\r\n     * Initialize {@code RecordingManager} with other objects that are necessary\r\n     * for starting a recording.\r\n     *\r\n     * @param {ChatRoom} chatRoom - The chat room to handle.\r\n     * @returns {void}\r\n     */\r\n    constructor(chatRoom) {\r\n        /**\r\n         * All known recording sessions from the current conference.\r\n         */\r\n        this._sessions = {};\r\n\r\n        this._chatRoom = chatRoom;\r\n\r\n        this.onPresence = this.onPresence.bind(this);\r\n\r\n        this._chatRoom.eventEmitter.addListener(\r\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\r\n    }\r\n\r\n    /**\r\n     * Finds an existing recording session by session ID.\r\n     *\r\n     * @param {string} sessionID - The session ID associated with the recording.\r\n     * @returns {JibriSession|undefined}\r\n     */\r\n    getSession(sessionID) {\r\n        return this._sessions[sessionID];\r\n    }\r\n\r\n    /**\r\n     * Callback to invoke to parse through a presence update to find recording\r\n     * related updates (from Jibri participant doing the recording and the\r\n     * focus which controls recording).\r\n     *\r\n     * @param {Object} event - The presence data from the pubsub event.\r\n     * @param {Node} event.presence - An XMPP presence update.\r\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\r\n     * from a participant that is trusted but not visible, as would be the case\r\n     * with the Jibri recorder participant.\r\n     * @returns {void}\r\n     */\r\n    onPresence({ fromHiddenDomain, presence }) {\r\n        if (recordingXMLUtils.isFromFocus(presence)) {\r\n            this._handleFocusPresence(presence);\r\n        } else if (fromHiddenDomain) {\r\n            this._handleJibriPresence(presence);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start a recording session.\r\n     *\r\n     * @param {Object} options - Configuration for the recording.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [optional] options.broadcastId - The channel on which a\r\n     * live stream will occur.\r\n     * @param {string} options.mode - The mode in which recording should be\r\n     * started. Recognized values are \"file\" and \"stream\".\r\n     * @param {string} [optional] options.streamId - The stream key to be used\r\n     * for live stream broadcasting. Required for live streaming.\r\n     * @returns {Promise} A promise for starting a recording, which will pass\r\n     * back the session on success. The promise resolves after receiving an\r\n     * acknowledgment of the start request success or fail.\r\n     */\r\n    startRecording(options) {\r\n        const session = new JibriSession({\r\n            ...options,\r\n            connection: this._chatRoom.connection\r\n        });\r\n\r\n        return session.start({\r\n            appData: options.appData,\r\n            broadcastId: options.broadcastId,\r\n            focusMucJid: this._chatRoom.focusMucJid,\r\n            streamId: options.streamId\r\n        })\r\n            .then(() => {\r\n                // Only store the session and emit if the session has not been\r\n                // added already. This is a workaround for the session getting\r\n                // created due to a presence update to announce a \"pending\"\r\n                // recording being received before JibriSession#start finishes.\r\n                if (!this.getSession(session.getID())) {\r\n                    this._addSession(session);\r\n                    this._emitSessionUpdate(session);\r\n                }\r\n\r\n                return session;\r\n            })\r\n            .catch(error => {\r\n                this._emitSessionUpdate(session);\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Stop a recording session.\r\n     *\r\n     * @param {string} sessionID - The ID associated with the recording session\r\n     * to be stopped.\r\n     * @returns {Promise} The promise resolves after receiving an\r\n     * acknowledgment of the stop request success or fail.\r\n     */\r\n    stopRecording(sessionID) {\r\n        const session = this.getSession(sessionID);\r\n\r\n        if (session) {\r\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\r\n        }\r\n\r\n        return Promise.reject(new Error('Could not find session'));\r\n    }\r\n\r\n    /**\r\n     * Stores a reference to the passed in JibriSession.\r\n     *\r\n     * @param {string} session - The JibriSession instance to store.\r\n     * @returns {void}\r\n     */\r\n    _addSession(session) {\r\n        this._sessions[session.getID()] = session;\r\n    }\r\n\r\n    /**\r\n     * Create a new instance of a recording session and stores a reference to\r\n     * it.\r\n     *\r\n     * @param {string} sessionID - The session ID of the recording in progress.\r\n     * @param {string} status - The current status of the recording session.\r\n     * @param {string} mode - The recording mode of the session.\r\n     * @returns {JibriSession}\r\n     */\r\n    _createSession(sessionID, status, mode) {\r\n        const session = new JibriSession({\r\n            connection: this._chatRoom.connection,\r\n            focusMucJid: this._chatRoom.focusMucJid,\r\n            mode,\r\n            sessionID,\r\n            status\r\n        });\r\n\r\n        this._addSession(session);\r\n\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * Notifies listeners of an update to a recording session.\r\n     *\r\n     * @param {JibriSession} session - The session that has been updated.\r\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\r\n     */\r\n    _emitSessionUpdate(session, initiator) {\r\n        this._chatRoom.eventEmitter.emit(\r\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\r\n    }\r\n\r\n    /**\r\n     * Parses presence to update an existing JibriSession or to create a new\r\n     * JibriSession.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {void}\r\n     */\r\n    _handleFocusPresence(presence) {\r\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\r\n\r\n        if (!jibriStatus) {\r\n            return;\r\n        }\r\n\r\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\r\n\r\n        // We'll look for an existing session or create one (in case we're a\r\n        // participant joining a call with an existing recording going on).\r\n        let session = this.getSession(sessionID);\r\n\r\n        // Handle the case where a status update is received in presence but\r\n        // the local participant has joined while the JibriSession has already\r\n        // ended.\r\n        if (!session && status === 'off') {\r\n            logger.warn(\r\n                'Ignoring recording presence update',\r\n                'Received a new session with status off.');\r\n\r\n            return;\r\n        }\r\n\r\n        // Jicofo sends updates via presence, and any extension in presence\r\n        // is sent until it is explicitly removed.  It's difficult for\r\n        // Jicofo to know when a presence has been sent once, so it won't\r\n        // remove jibri status extension.  This means we may receive the same\r\n        // status update more than once, so check for that here\r\n        if (session\r\n            && session.getStatus() === status\r\n            && session.getError() === error) {\r\n            logger.warn('Ignoring duplicate presence update: ',\r\n                JSON.stringify(jibriStatus));\r\n\r\n            return;\r\n        }\r\n\r\n        if (!session) {\r\n            session = this._createSession(sessionID, status, recordingMode);\r\n        }\r\n\r\n        session.setStatus(status);\r\n\r\n        if (error) {\r\n            session.setError(error);\r\n        }\r\n\r\n        this._emitSessionUpdate(session, initiator);\r\n    }\r\n\r\n    /**\r\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\r\n     * needs to be updated in a JibriSession.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {void}\r\n     */\r\n    _handleJibriPresence(presence) {\r\n        const { liveStreamViewURL, mode, sessionID }\r\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\r\n\r\n        if (!sessionID) {\r\n            logger.warn(\r\n                'Ignoring potential jibri presence due to no session id.');\r\n\r\n            return;\r\n        }\r\n\r\n        let session = this.getSession(sessionID);\r\n\r\n        if (!session) {\r\n            session = this._createSession(sessionID, '', mode);\r\n        }\r\n\r\n        session.setLiveStreamViewURL(liveStreamViewURL);\r\n\r\n        this._emitSessionUpdate(session);\r\n    }\r\n}\r\n\r\nexport default RecordingManager;\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\r\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\r\n\r\nimport Statistics from './statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Number of local samples that will be used for comparison before and after the remote sample is received.\r\n */\r\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\r\n\r\n/**\r\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\r\n * participant and compares them to detect potential audio problem for a participant.\r\n */\r\nexport default class AudioOutputProblemDetector {\r\n\r\n    /**\r\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\r\n     *\r\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n        this._localAudioLevelCache = {};\r\n        this._reportedParticipants = [];\r\n        this._audioProblemCandidates = {};\r\n        this._numberOfRemoteAudioLevelsReceived = {};\r\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\r\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\r\n        this._clearUserData = this._clearUserData.bind(this);\r\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\r\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\r\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\r\n    }\r\n\r\n    /**\r\n     * A listener for audio level data received by a remote participant.\r\n     *\r\n     * @param {string} userID - The user id of the participant that sent the data.\r\n     * @param {number} audioLevel - The average audio level value.\r\n     * @returns {void}\r\n     */\r\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\r\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\r\n\r\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\r\n\r\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\r\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\r\n            return;\r\n        }\r\n\r\n        const participant = this._conference.getParticipantById(userID);\r\n\r\n        if (participant) {\r\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\r\n\r\n            if (tracks.length > 0 && participant.isAudioMuted()) {\r\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\r\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\r\n                // zero values for muted track.\r\n                return;\r\n            }\r\n        }\r\n\r\n        const localAudioLevels = this._localAudioLevelCache[userID];\r\n\r\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\r\n            this._audioProblemCandidates[userID] = {\r\n                remoteAudioLevels: avgAudioLevels,\r\n                localAudioLevels: []\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A listener for audio level data retrieved by the local stats.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\r\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\r\n     * @returns {void}\r\n     */\r\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\r\n        if (tpc !== this._conference.getActivePeerConnection()) {\r\n            return;\r\n        }\r\n\r\n        Object.keys(avgAudioLevels).forEach(userID => {\r\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\r\n                return;\r\n            }\r\n\r\n            const localAudioLevels = this._localAudioLevelCache[userID];\r\n\r\n            if (!Array.isArray(localAudioLevels)) {\r\n                this._localAudioLevelCache[userID] = [ ];\r\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\r\n                localAudioLevels.shift();\r\n            }\r\n\r\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\r\n        });\r\n\r\n\r\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\r\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\r\n\r\n            localAudioLevels.push(avgAudioLevels[userID]);\r\n\r\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\r\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\r\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\r\n\r\n                    Statistics.sendAnalytics(\r\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\r\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\r\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\r\n                        remoteAudioLevels}`);\r\n                    this._reportedParticipants.push(userID);\r\n                    this._clearUserData(userID);\r\n                }\r\n\r\n                delete this._audioProblemCandidates[userID];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears the data stored for a participant.\r\n     *\r\n     * @param {string} userID - The id of the participant.\r\n     * @returns {void}\r\n     */\r\n    _clearUserData(userID) {\r\n        delete this._localAudioLevelCache[userID];\r\n    }\r\n\r\n    /**\r\n     * Disposes the allocated resources.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    dispose() {\r\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\r\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\r\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\r\n        this._localAudioLevelCache = undefined;\r\n        this._audioProblemCandidates = undefined;\r\n        this._reportedParticipants = undefined;\r\n        this._numberOfRemoteAudioLevelsReceived = undefined;\r\n        this._conference = undefined;\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as VideoType from '../../service/RTC/VideoType';\r\nimport * as ConnectionQualityEvents\r\n    from '../../service/connectivity/ConnectionQualityEvents';\r\nimport {\r\n    createRtpStatsEvent,\r\n    createTransportStatsEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\n\r\nimport Statistics from './statistics';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This will calculate an average for one, named stat and submit it to\r\n * the analytics module when requested. It automatically counts the samples.\r\n */\r\nclass AverageStatReport {\r\n    /**\r\n     * Creates new <tt>AverageStatReport</tt> for given name.\r\n     * @param {string} name that's the name of the event that will be reported\r\n     * to the analytics module.\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.count = 0;\r\n        this.sum = 0;\r\n        this.samples = [];\r\n    }\r\n\r\n    /**\r\n     * Adds the next value that will be included in the average when\r\n     * {@link calculate} is called.\r\n     * @param {number} nextValue\r\n     */\r\n    addNext(nextValue) {\r\n        if (typeof nextValue !== 'number') {\r\n            logger.error(\r\n                `${this.name} - invalid value for idx: ${this.count}`,\r\n                nextValue);\r\n        } else if (!isNaN(nextValue)) {\r\n            this.sum += nextValue;\r\n            this.samples.push(nextValue);\r\n            this.count += 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates an average for the samples collected using {@link addNext}.\r\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\r\n     * if no samples were collected.\r\n     */\r\n    calculate() {\r\n        return this.sum / this.count;\r\n    }\r\n\r\n    /**\r\n     * Appends the report to the analytics \"data\" object. The object will be\r\n     * set under <tt>prefix</tt> + {@link this.name} key.\r\n     * @param {Object} report the analytics \"data\" object\r\n     */\r\n    appendReport(report) {\r\n        report[`${this.name}_avg`] = this.calculate();\r\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\r\n    }\r\n\r\n    /**\r\n     * Clears all memory of any samples collected, so that new average can be\r\n     * calculated using this instance.\r\n     */\r\n    reset() {\r\n        this.samples = [];\r\n        this.sum = 0;\r\n        this.count = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Class gathers the stats that are calculated and reported for a\r\n * {@link TraceablePeerConnection} even if it's not currently active. For\r\n * example we want to monitor RTT for the JVB connection while in P2P mode.\r\n */\r\nclass ConnectionAvgStats {\r\n    /**\r\n     * Creates new <tt>ConnectionAvgStats</tt>\r\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\r\n     * @param {boolean} isP2P\r\n     * @param {number} n the number of samples, before arithmetic mean is to be\r\n     * calculated and values submitted to the analytics module.\r\n     */\r\n    constructor(avgRtpStatsReporter, isP2P, n) {\r\n        /**\r\n         * Is this instance for JVB or P2P connection ?\r\n         * @type {boolean}\r\n         */\r\n        this.isP2P = isP2P;\r\n\r\n        /**\r\n         * How many samples are to be included in arithmetic mean calculation.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._n = n;\r\n\r\n        /**\r\n         * The current sample index. Starts from 0 and goes up to {@link _n})\r\n         * when analytics report will be submitted.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._sampleIdx = 0;\r\n\r\n        /**\r\n         * Average round trip time reported by the ICE candidate pair.\r\n         * @type {AverageStatReport}\r\n         */\r\n        this._avgRTT = new AverageStatReport('rtt');\r\n\r\n        /**\r\n         * Map stores average RTT to the JVB reported by remote participants.\r\n         * Mapped per participant id {@link JitsiParticipant.getId}.\r\n         *\r\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\r\n         * <tt>false</tt>.\r\n         *\r\n         * @type {Map<string,AverageStatReport>}\r\n         * @private\r\n         */\r\n        this._avgRemoteRTTMap = new Map();\r\n\r\n        /**\r\n         * The conference for which stats will be collected and reported.\r\n         * @type {JitsiConference}\r\n         * @private\r\n         */\r\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\r\n\r\n        /**\r\n         * The latest average E2E RTT for the JVB connection only.\r\n         *\r\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\r\n         * <tt>false</tt>.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this._avgEnd2EndRTT = undefined;\r\n\r\n        this._onConnectionStats = (tpc, stats) => {\r\n            if (this.isP2P === tpc.isP2P) {\r\n                this._calculateAvgStats(stats);\r\n            }\r\n        };\r\n\r\n        const conference = avgRtpStatsReporter._conference;\r\n\r\n        conference.statistics.addConnectionStatsListener(\r\n            this._onConnectionStats);\r\n\r\n        if (!this.isP2P) {\r\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\r\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n            this._onRemoteStatsUpdated\r\n                = (id, data) => this._processRemoteStats(id, data);\r\n            conference.on(\r\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n                this._onRemoteStatsUpdated);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes next batch of stats.\r\n     * @param {go figure} data\r\n     * @private\r\n     */\r\n    _calculateAvgStats(data) {\r\n        if (!data) {\r\n            logger.error('No stats');\r\n\r\n            return;\r\n        }\r\n\r\n        if (browser.supportsRTTStatistics()) {\r\n            if (data.transport && data.transport.length) {\r\n                this._avgRTT.addNext(data.transport[0].rtt);\r\n            }\r\n        }\r\n\r\n        this._sampleIdx += 1;\r\n\r\n        if (this._sampleIdx >= this._n) {\r\n            if (browser.supportsRTTStatistics()) {\r\n                const conference = this._avgRtpStatsReporter._conference;\r\n\r\n                const batchReport = {\r\n                    p2p: this.isP2P,\r\n                    'conference_size': conference.getParticipantCount()\r\n                };\r\n\r\n                if (data.transport && data.transport.length) {\r\n                    Object.assign(batchReport, {\r\n                        'local_candidate_type':\r\n                            data.transport[0].localCandidateType,\r\n                        'remote_candidate_type':\r\n                            data.transport[0].remoteCandidateType,\r\n                        'transport_type': data.transport[0].type\r\n                    });\r\n                }\r\n\r\n                this._avgRTT.appendReport(batchReport);\r\n\r\n                if (this.isP2P) {\r\n                    // Report RTT diff only for P2P.\r\n                    const jvbEnd2EndRTT = this\r\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\r\n\r\n                    if (!isNaN(jvbEnd2EndRTT)) {\r\n                        // eslint-disable-next-line dot-notation\r\n                        batchReport['rtt_diff']\r\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\r\n                    }\r\n                } else {\r\n                    // Report end to end RTT only for JVB.\r\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\r\n                    const avgLocalRTT = this._avgRTT.calculate();\r\n\r\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\r\n\r\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\r\n                        // eslint-disable-next-line dot-notation\r\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\r\n                    }\r\n                }\r\n\r\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\r\n            }\r\n\r\n            this._resetAvgStats();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\r\n     * participants.\r\n     * @return {number|NaN} NaN if not available (not enough data)\r\n     * @private\r\n     */\r\n    _calculateAvgRemoteRTT() {\r\n        let count = 0, sum = 0;\r\n\r\n        // FIXME should we ignore RTT for participant\r\n        // who \"is having connectivity issues\" ?\r\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\r\n            const avg = remoteAvg.calculate();\r\n\r\n            if (!isNaN(avg)) {\r\n                sum += avg;\r\n                count += 1;\r\n                remoteAvg.reset();\r\n            }\r\n        }\r\n\r\n        return sum / count;\r\n    }\r\n\r\n    /**\r\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\r\n     * RTT towards the JVB reported by each participant.\r\n     * @param {string} id {@link JitsiParticipant.getId}\r\n     * @param {go figure in ConnectionQuality.js} data\r\n     * @private\r\n     */\r\n    _processRemoteStats(id, data) {\r\n        const validData = typeof data.jvbRTT === 'number';\r\n        let rttAvg = this._avgRemoteRTTMap.get(id);\r\n\r\n        if (!rttAvg && validData) {\r\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\r\n            this._avgRemoteRTTMap.set(id, rttAvg);\r\n        }\r\n\r\n        if (validData) {\r\n            rttAvg.addNext(data.jvbRTT);\r\n        } else if (rttAvg) {\r\n            this._avgRemoteRTTMap.delete(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset cache of all averages and {@link _sampleIdx}.\r\n     * @private\r\n     */\r\n    _resetAvgStats() {\r\n        this._avgRTT.reset();\r\n        if (this._avgRemoteRTTMap) {\r\n            this._avgRemoteRTTMap.clear();\r\n        }\r\n        this._sampleIdx = 0;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    dispose() {\r\n\r\n        const conference = this._avgRtpStatsReporter._conference;\r\n\r\n        conference.statistics.removeConnectionStatsListener(\r\n            this._onConnectionStats);\r\n        if (!this.isP2P) {\r\n            conference.off(\r\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n                this._onRemoteStatsUpdated);\r\n            conference.off(\r\n                ConferenceEvents.USER_LEFT,\r\n                this._onUserLeft);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Reports average RTP statistics values (arithmetic mean) to the analytics\r\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\r\n * of the P2P vs JVB conference modes and submits the values under different\r\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\r\n * P2P mode resets the data collected so far and averages are calculated from\r\n * scratch.\r\n */\r\nexport default class AvgRTPStatsReporter {\r\n    /**\r\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\r\n     * @param {JitsiConference} conference\r\n     * @param {number} n the number of samples, before arithmetic mean is to be\r\n     * calculated and values submitted to the analytics module.\r\n     */\r\n    constructor(conference, n) {\r\n        /**\r\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\r\n         * are to be included in arithmetic mean calculation.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._n = n;\r\n\r\n        if (n > 0) {\r\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\r\n        } else {\r\n            logger.info('Avg RTP stats reports are disabled.');\r\n\r\n            // Do not initialize\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * The current sample index. Starts from 0 and goes up to {@link _n})\r\n         * when analytics report will be submitted.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._sampleIdx = 0;\r\n\r\n        /**\r\n         * The conference for which stats will be collected and reported.\r\n         * @type {JitsiConference}\r\n         * @private\r\n         */\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Average audio upload bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgAudioBitrateUp\r\n            = new AverageStatReport('bitrate_audio_upload');\r\n\r\n        /**\r\n         * Average audio download bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgAudioBitrateDown\r\n            = new AverageStatReport('bitrate_audio_download');\r\n\r\n        /**\r\n         * Average video upload bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgVideoBitrateUp\r\n            = new AverageStatReport('bitrate_video_upload');\r\n\r\n        /**\r\n         * Average video download bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgVideoBitrateDown\r\n            = new AverageStatReport('bitrate_video_download');\r\n\r\n        /**\r\n         * Average upload bandwidth\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgBandwidthUp\r\n            = new AverageStatReport('bandwidth_upload');\r\n\r\n        /**\r\n         * Average download bandwidth\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgBandwidthDown\r\n            = new AverageStatReport('bandwidth_download');\r\n\r\n        /**\r\n         * Average total packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossTotal\r\n            = new AverageStatReport('packet_loss_total');\r\n\r\n        /**\r\n         * Average upload packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossUp\r\n            = new AverageStatReport('packet_loss_upload');\r\n\r\n        /**\r\n         * Average download packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossDown\r\n            = new AverageStatReport('packet_loss_download');\r\n\r\n        /**\r\n         * Average FPS for remote videos\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\r\n\r\n        /**\r\n         * Average FPS for remote screen streaming videos (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteScreenFPS\r\n            = new AverageStatReport('framerate_screen_remote');\r\n\r\n        /**\r\n         * Average FPS for local video (camera)\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\r\n\r\n        /**\r\n         * Average FPS for local screen streaming video (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalScreenFPS\r\n            = new AverageStatReport('framerate_screen_local');\r\n\r\n        /**\r\n         * Average pixels for remote screen streaming videos (reported only if\r\n         * not a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteCameraPixels\r\n            = new AverageStatReport('pixels_remote');\r\n\r\n        /**\r\n         * Average pixels for remote screen streaming videos (reported only if\r\n         * not a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteScreenPixels\r\n            = new AverageStatReport('pixels_screen_remote');\r\n\r\n        /**\r\n         * Average pixels for local video (camera)\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalCameraPixels\r\n            = new AverageStatReport('pixels_local');\r\n\r\n        /**\r\n         * Average pixels for local screen streaming video (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalScreenPixels\r\n            = new AverageStatReport('pixels_screen_local');\r\n\r\n        /**\r\n         * Average connection quality as defined by\r\n         * the {@link ConnectionQuality} module.\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgCQ = new AverageStatReport('connection_quality');\r\n\r\n        this._cachedTransportStats = undefined;\r\n\r\n        this._onLocalStatsUpdated = data => {\r\n            this._calculateAvgStats(data);\r\n            this._maybeSendTransportAnalyticsEvent(data);\r\n        };\r\n        conference.on(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._onLocalStatsUpdated);\r\n\r\n        this._onP2PStatusChanged = () => {\r\n            logger.debug('Resetting average stats calculation');\r\n            this._resetAvgStats();\r\n            this.jvbStatsMonitor._resetAvgStats();\r\n            this.p2pStatsMonitor._resetAvgStats();\r\n        };\r\n        conference.on(\r\n            ConferenceEvents.P2P_STATUS,\r\n            this._onP2PStatusChanged);\r\n\r\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\r\n            // We want to reset only on the transition from false => true,\r\n            // because otherwise those stats are resetted on JVB <=> P2P\r\n            // transition.\r\n            if (newStatus === true) {\r\n                logger.info('Resetting JVB avg RTP stats');\r\n                this._resetAvgJvbStats();\r\n            }\r\n        };\r\n        conference.on(\r\n            ConferenceEvents.JVB121_STATUS,\r\n            this._onJvb121StatusChanged);\r\n\r\n        this.jvbStatsMonitor\r\n            = new ConnectionAvgStats(this, false /* JVB */, n);\r\n\r\n        this.p2pStatsMonitor\r\n            = new ConnectionAvgStats(this, true /* P2P */, n);\r\n    }\r\n\r\n    /**\r\n     * Processes next batch of stats reported on\r\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\r\n     * @param {go figure} data\r\n     * @private\r\n     */\r\n    _calculateAvgStats(data) {\r\n\r\n        if (!data) {\r\n            logger.error('No stats');\r\n\r\n            return;\r\n        }\r\n\r\n        const isP2P = this._conference.isP2PActive();\r\n        const confSize = this._conference.getParticipantCount();\r\n\r\n        if (!isP2P && confSize < 2) {\r\n\r\n            // There's no point in collecting stats for a JVB conference of 1.\r\n            // That happens for short period of time after everyone leaves\r\n            // the room, until Jicofo terminates the session.\r\n            return;\r\n        }\r\n\r\n        /* Uncomment to figure out stats structure\r\n        for (const key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                logger.info(`local stat ${key}: `, data[key]);\r\n            }\r\n        } */\r\n\r\n        const bitrate = data.bitrate;\r\n        const bandwidth = data.bandwidth;\r\n        const packetLoss = data.packetLoss;\r\n        const frameRate = data.framerate;\r\n        const resolution = data.resolution;\r\n\r\n        if (!bitrate) {\r\n            logger.error('No \"bitrate\"');\r\n\r\n            return;\r\n        } else if (!bandwidth) {\r\n            logger.error('No \"bandwidth\"');\r\n\r\n            return;\r\n        } else if (!packetLoss) {\r\n            logger.error('No \"packetloss\"');\r\n\r\n            return;\r\n        } else if (!frameRate) {\r\n            logger.error('No \"framerate\"');\r\n\r\n            return;\r\n        } else if (!resolution) {\r\n            logger.error('No resolution');\r\n\r\n            return;\r\n        }\r\n\r\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\r\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\r\n\r\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\r\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\r\n\r\n        if (browser.supportsBandwidthStatistics()) {\r\n            this._avgBandwidthUp.addNext(bandwidth.upload);\r\n            this._avgBandwidthDown.addNext(bandwidth.download);\r\n        }\r\n\r\n        this._avgPacketLossUp.addNext(packetLoss.upload);\r\n        this._avgPacketLossDown.addNext(packetLoss.download);\r\n        this._avgPacketLossTotal.addNext(packetLoss.total);\r\n\r\n        this._avgCQ.addNext(data.connectionQuality);\r\n\r\n        if (frameRate) {\r\n            this._avgRemoteFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, false /* remote */, VideoType.CAMERA));\r\n            this._avgRemoteScreenFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, false /* remote */, VideoType.DESKTOP));\r\n\r\n            this._avgLocalFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, true /* local */, VideoType.CAMERA));\r\n            this._avgLocalScreenFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, true /* local */, VideoType.DESKTOP));\r\n        }\r\n\r\n        if (resolution) {\r\n            this._avgRemoteCameraPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, false /* remote */, VideoType.CAMERA));\r\n\r\n            this._avgRemoteScreenPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, false /* remote */, VideoType.DESKTOP));\r\n\r\n            this._avgLocalCameraPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, true /* local */, VideoType.CAMERA));\r\n\r\n            this._avgLocalScreenPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, true /* local */, VideoType.DESKTOP));\r\n        }\r\n\r\n        this._sampleIdx += 1;\r\n\r\n        if (this._sampleIdx >= this._n) {\r\n\r\n            const batchReport = {\r\n                p2p: isP2P,\r\n                'conference_size': confSize\r\n            };\r\n\r\n            if (data.transport && data.transport.length) {\r\n                Object.assign(batchReport, {\r\n                    'local_candidate_type':\r\n                        data.transport[0].localCandidateType,\r\n                    'remote_candidate_type':\r\n                        data.transport[0].remoteCandidateType,\r\n                    'transport_type': data.transport[0].type\r\n                });\r\n            }\r\n\r\n            this._avgAudioBitrateUp.appendReport(batchReport);\r\n            this._avgAudioBitrateDown.appendReport(batchReport);\r\n\r\n            this._avgVideoBitrateUp.appendReport(batchReport);\r\n            this._avgVideoBitrateDown.appendReport(batchReport);\r\n\r\n            if (browser.supportsBandwidthStatistics()) {\r\n                this._avgBandwidthUp.appendReport(batchReport);\r\n                this._avgBandwidthDown.appendReport(batchReport);\r\n            }\r\n            this._avgPacketLossUp.appendReport(batchReport);\r\n            this._avgPacketLossDown.appendReport(batchReport);\r\n            this._avgPacketLossTotal.appendReport(batchReport);\r\n\r\n            this._avgRemoteFPS.appendReport(batchReport);\r\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\r\n                this._avgRemoteScreenFPS.appendReport(batchReport);\r\n            }\r\n            this._avgLocalFPS.appendReport(batchReport);\r\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\r\n                this._avgLocalScreenFPS.appendReport(batchReport);\r\n            }\r\n\r\n            this._avgRemoteCameraPixels.appendReport(batchReport);\r\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\r\n                this._avgRemoteScreenPixels.appendReport(batchReport);\r\n            }\r\n            this._avgLocalCameraPixels.appendReport(batchReport);\r\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\r\n                this._avgLocalScreenPixels.appendReport(batchReport);\r\n            }\r\n\r\n            this._avgCQ.appendReport(batchReport);\r\n\r\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\r\n\r\n            this._resetAvgStats();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates average number of pixels for the report\r\n     *\r\n     * @param {map} peerResolutions a map of peer resolutions\r\n     * @param {boolean} isLocal if the average is to be calculated for the local\r\n     * video or <tt>false</tt> if for remote videos.\r\n     * @param {VideoType} videoType\r\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\r\n     * are no samples.\r\n     * @private\r\n     */\r\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\r\n        let peerPixelsSum = 0;\r\n        let peerCount = 0;\r\n        const myID = this._conference.myUserId();\r\n\r\n        for (const peerID of Object.keys(peerResolutions)) {\r\n            if (isLocal ? peerID === myID : peerID !== myID) {\r\n                const participant\r\n                    = isLocal\r\n                        ? null\r\n                        : this._conference.getParticipantById(peerID);\r\n                const videosResolution = peerResolutions[peerID];\r\n\r\n                // Do not continue without participant for non local peerID\r\n                if ((isLocal || participant) && videosResolution) {\r\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\r\n                        videosResolution, participant, videoType);\r\n\r\n                    if (!isNaN(peerAvgPixels)) {\r\n                        peerPixelsSum += peerAvgPixels;\r\n                        peerCount += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return peerPixelsSum / peerCount;\r\n    }\r\n\r\n    /**\r\n     * Calculate average pixels for either remote or local participant\r\n     * @param {object} videos maps resolution per video SSRC\r\n     * @param {JitsiParticipant|null} participant remote participant or\r\n     * <tt>null</tt> for local video pixels calculation.\r\n     * @param {VideoType} videoType the type of the video for which an average\r\n     * will be calculated.\r\n     * @return {number|NaN} average video pixels of all participant's videos or\r\n     * <tt>NaN</tt> if currently not available\r\n     * @private\r\n     */\r\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\r\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\r\n        let videoTracks = null;\r\n\r\n        // NOTE that this method is supposed to be called for the stats\r\n        // received from the current peerconnection.\r\n        const tpc = this._conference.getActivePeerConnection();\r\n\r\n        if (participant) {\r\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n            if (videoTracks) {\r\n                ssrcs\r\n                    = ssrcs.filter(\r\n                        ssrc => videoTracks.find(\r\n                            track =>\r\n                                !track.isMuted()\r\n                                    && track.getSSRC() === ssrc\r\n                                    && track.videoType === videoType));\r\n            }\r\n        } else {\r\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\r\n            ssrcs\r\n                = ssrcs.filter(\r\n                    ssrc => videoTracks.find(\r\n                        track =>\r\n                            !track.isMuted()\r\n                                && tpc.getLocalSSRC(track) === ssrc\r\n                                && track.videoType === videoType));\r\n        }\r\n\r\n        let peerPixelsSum = 0;\r\n        let peerSsrcCount = 0;\r\n\r\n        for (const ssrc of ssrcs) {\r\n            const peerSsrcPixels\r\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\r\n\r\n            // FPS is reported as 0 for users with no video\r\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\r\n                peerPixelsSum += peerSsrcPixels;\r\n                peerSsrcCount += 1;\r\n            }\r\n        }\r\n\r\n        return peerPixelsSum / peerSsrcCount;\r\n    }\r\n\r\n\r\n    /**\r\n     * Calculates average FPS for the report\r\n     * @param {go figure} frameRate\r\n     * @param {boolean} isLocal if the average is to be calculated for the local\r\n     * video or <tt>false</tt> if for remote videos.\r\n     * @param {VideoType} videoType\r\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\r\n     * @private\r\n     */\r\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\r\n        let peerFpsSum = 0;\r\n        let peerCount = 0;\r\n        const myID = this._conference.myUserId();\r\n\r\n        for (const peerID of Object.keys(frameRate)) {\r\n            if (isLocal ? peerID === myID : peerID !== myID) {\r\n                const participant\r\n                    = isLocal\r\n                        ? null : this._conference.getParticipantById(peerID);\r\n                const videosFps = frameRate[peerID];\r\n\r\n                // Do not continue without participant for non local peerID\r\n                if ((isLocal || participant) && videosFps) {\r\n                    const peerAvgFPS\r\n                        = this._calculatePeerAvgVideoFps(\r\n                            videosFps, participant, videoType);\r\n\r\n                    if (!isNaN(peerAvgFPS)) {\r\n                        peerFpsSum += peerAvgFPS;\r\n                        peerCount += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return peerFpsSum / peerCount;\r\n    }\r\n\r\n    /**\r\n     * Calculate average FPS for either remote or local participant\r\n     * @param {object} videos maps FPS per video SSRC\r\n     * @param {JitsiParticipant|null} participant remote participant or\r\n     * <tt>null</tt> for local FPS calculation.\r\n     * @param {VideoType} videoType the type of the video for which an average\r\n     * will be calculated.\r\n     * @return {number|NaN} average FPS of all participant's videos or\r\n     * <tt>NaN</tt> if currently not available\r\n     * @private\r\n     */\r\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\r\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\r\n        let videoTracks = null;\r\n\r\n        // NOTE that this method is supposed to be called for the stats\r\n        // received from the current peerconnection.\r\n        const tpc = this._conference.getActivePeerConnection();\r\n\r\n        if (participant) {\r\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n            if (videoTracks) {\r\n                ssrcs\r\n                    = ssrcs.filter(\r\n                        ssrc => videoTracks.find(\r\n                            track => !track.isMuted()\r\n                                && track.getSSRC() === ssrc\r\n                                && track.videoType === videoType));\r\n            }\r\n        } else {\r\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\r\n            ssrcs\r\n                = ssrcs.filter(\r\n                    ssrc => videoTracks.find(\r\n                        track => !track.isMuted()\r\n                            && tpc.getLocalSSRC(track) === ssrc\r\n                            && track.videoType === videoType));\r\n        }\r\n\r\n        let peerFpsSum = 0;\r\n        let peerSsrcCount = 0;\r\n\r\n        for (const ssrc of ssrcs) {\r\n            const peerSsrcFps = Number(videos[ssrc]);\r\n\r\n            // FPS is reported as 0 for users with no video\r\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\r\n                peerFpsSum += peerSsrcFps;\r\n                peerSsrcCount += 1;\r\n            }\r\n        }\r\n\r\n        return peerFpsSum / peerSsrcCount;\r\n    }\r\n\r\n    /**\r\n     * Sends the 'transport.stats' analytics event whenever we detect that\r\n     * there is a change in the local or remote candidate type on the transport\r\n     * that is currently selected.\r\n     * @param {*} data\r\n     * @private\r\n     */\r\n    _maybeSendTransportAnalyticsEvent(data) {\r\n        if (!data || !data.transport || !data.transport.length) {\r\n            return;\r\n        }\r\n        const transportStats = {\r\n            p2p: data.transport[0].p2p,\r\n            'local_candidate_type': data.transport[0].localCandidateType,\r\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\r\n            'transport_type': data.transport[0].type\r\n        };\r\n\r\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\r\n            this._cachedTransportStats = transportStats;\r\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the stats related to JVB connection. Must not be called when in\r\n     * P2P mode, because then the {@link AverageStatReport} instances are\r\n     * tracking P2P stats. Note that this should never happen unless something\r\n     * is wrong with the P2P and JVB121 events.\r\n     * @private\r\n     */\r\n    _resetAvgJvbStats() {\r\n        this._resetAvgStats();\r\n        this.jvbStatsMonitor._resetAvgStats();\r\n    }\r\n\r\n    /**\r\n     * Reset cache of all averages and {@link _sampleIdx}.\r\n     * @private\r\n     */\r\n    _resetAvgStats() {\r\n        this._avgAudioBitrateUp.reset();\r\n        this._avgAudioBitrateDown.reset();\r\n\r\n        this._avgVideoBitrateUp.reset();\r\n        this._avgVideoBitrateDown.reset();\r\n\r\n        this._avgBandwidthUp.reset();\r\n        this._avgBandwidthDown.reset();\r\n\r\n        this._avgPacketLossUp.reset();\r\n        this._avgPacketLossDown.reset();\r\n        this._avgPacketLossTotal.reset();\r\n\r\n        this._avgRemoteFPS.reset();\r\n        this._avgRemoteScreenFPS.reset();\r\n        this._avgLocalFPS.reset();\r\n        this._avgLocalScreenFPS.reset();\r\n\r\n        this._avgRemoteCameraPixels.reset();\r\n        this._avgRemoteScreenPixels.reset();\r\n        this._avgLocalCameraPixels.reset();\r\n        this._avgLocalScreenPixels.reset();\r\n\r\n        this._avgCQ.reset();\r\n\r\n        this._sampleIdx = 0;\r\n    }\r\n\r\n    /**\r\n     * Unregisters all event listeners and stops working.\r\n     */\r\n    dispose() {\r\n        this._conference.off(\r\n            ConferenceEvents.P2P_STATUS,\r\n            this._onP2PStatusChanged);\r\n        this._conference.off(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._onLocalStatsUpdated);\r\n        this._conference.off(\r\n            ConferenceEvents.JVB121_STATUS,\r\n            this._onJvb121StatusChanged);\r\n        this.jvbStatsMonitor.dispose();\r\n        this.p2pStatsMonitor.dispose();\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport SpeakerStats from './SpeakerStats';\r\n\r\n/**\r\n * A collection for tracking speaker stats. Attaches listeners\r\n * to the conference to automatically update on tracked events.\r\n */\r\nexport default class SpeakerStatsCollector {\r\n    /**\r\n     * Initializes a new SpeakerStatsCollector instance.\r\n     *\r\n     * @constructor\r\n     * @param {JitsiConference} conference - The conference to track.\r\n     * @returns {void}\r\n     */\r\n    constructor(conference) {\r\n        this.stats = {\r\n            users: {\r\n\r\n                // userId: SpeakerStats\r\n            },\r\n            dominantSpeakerId: null\r\n        };\r\n\r\n        const userId = conference.myUserId();\r\n\r\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\r\n        this.conference = conference;\r\n\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\r\n            this._onDominantSpeaker.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this._onUserJoin.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this._onUserLeave.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\r\n            this._onDisplayNameChange.bind(this));\r\n        if (conference.xmpp) {\r\n            conference.xmpp.addListener(\r\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\r\n                this._updateStats.bind(this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to dominant speaker change events by changing its speaker stats\r\n     * models to reflect the current dominant speaker.\r\n     *\r\n     * @param {string} dominantSpeakerId - The user id of the new\r\n     * dominant speaker.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onDominantSpeaker(dominantSpeakerId) {\r\n        const oldDominantSpeaker\r\n            = this.stats.users[this.stats.dominantSpeakerId];\r\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\r\n\r\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\r\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\r\n        this.stats.dominantSpeakerId = dominantSpeakerId;\r\n    }\r\n\r\n    /**\r\n     * Reacts to user join events by creating a new SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the new user.\r\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onUserJoin(userId, participant) {\r\n        if (participant.isHidden()) {\r\n            return;\r\n        }\r\n\r\n        if (!this.stats.users[userId]) {\r\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to user leave events by updating the associated user's\r\n     * SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the user that left.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onUserLeave(userId) {\r\n        const savedUser = this.stats.users[userId];\r\n\r\n        if (savedUser) {\r\n            savedUser.markAsHasLeft();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to user name change events by updating the last known name\r\n     * tracked in the associated SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the user that left.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onDisplayNameChange(userId, newName) {\r\n        const savedUser = this.stats.users[userId];\r\n\r\n        if (savedUser) {\r\n            savedUser.setDisplayName(newName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return a copy of the tracked SpeakerStats models.\r\n     *\r\n     * @returns {Object} The keys are the user ids and the values are the\r\n     * associated user's SpeakerStats model.\r\n     * @private\r\n     */\r\n    getStats() {\r\n        return this.stats.users;\r\n    }\r\n\r\n    /**\r\n     * Updates of the current stats is requested, passing the new values.\r\n     *\r\n     * @param {Object} newStats - The new values used to update current one.\r\n     * @private\r\n     */\r\n    _updateStats(newStats) {\r\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\r\n            let speakerStatsToUpdate;\r\n            const newParticipant = this.conference.getParticipantById(userId);\r\n\r\n            // we want to ignore hidden participants\r\n            if (!newParticipant || !newParticipant.isHidden()) {\r\n                if (this.stats.users[userId]) {\r\n                    speakerStatsToUpdate = this.stats.users[userId];\r\n\r\n                    if (!speakerStatsToUpdate.getDisplayName()) {\r\n                        speakerStatsToUpdate\r\n                            .setDisplayName(newStats[userId].displayName);\r\n                    }\r\n                } else {\r\n                    speakerStatsToUpdate = new SpeakerStats(\r\n                        userId, newStats[userId].displayName);\r\n                    this.stats.users[userId] = speakerStatsToUpdate;\r\n                    speakerStatsToUpdate.markAsHasLeft();\r\n                }\r\n            }\r\n\r\n            speakerStatsToUpdate.totalDominantSpeakerTime\r\n                = newStats[userId].totalDominantSpeakerTime;\r\n        }\r\n    }\r\n}\r\n","const AudioRecorder = require('./audioRecorder');\r\nconst SphinxService = require(\r\n    './transcriptionServices/SphinxTranscriptionService');\r\n\r\nconst BEFORE_STATE = 'before';\r\nconst RECORDING_STATE = 'recording';\r\nconst TRANSCRIBING_STATE = 'transcribing';\r\nconst FINISHED_STATE = 'finished';\r\n\r\n// the amount of characters each line in the transcription will have\r\nconst MAXIMUM_SENTENCE_LENGTH = 80;\r\n\r\n/**\r\n * This is the main object for handing the Transcription. It interacts with\r\n * the audioRecorder to record every person in a conference and sends the\r\n * recorder audio to a transcriptionService. The returned speech-to-text result\r\n * will be merged to create a transcript\r\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\r\n */\r\nfunction Transcriber() {\r\n    // the object which can record all audio in the conference\r\n    this.audioRecorder = new AudioRecorder();\r\n\r\n    // this object can send the recorder audio to a speech-to-text service\r\n    this.transcriptionService = new SphinxService();\r\n\r\n    // holds a counter to keep track if merging can start\r\n    this.counter = null;\r\n\r\n    // holds the date when transcription started which makes it possible\r\n    // to calculate the offset between recordings\r\n    this.startTime = null;\r\n\r\n    // will hold the transcription once it is completed\r\n    this.transcription = null;\r\n\r\n    // this will be a method which will be called once the transcription is done\r\n    // with the transcription as parameter\r\n    this.callback = null;\r\n\r\n    // stores all the retrieved speech-to-text results to merge together\r\n    // this value will store an Array<Word> object\r\n    this.results = [];\r\n\r\n    // Stores the current state of the transcription process\r\n    this.state = BEFORE_STATE;\r\n\r\n    // Used in the updateTranscription method to add a new line when the\r\n    // sentence becomes to long\r\n    this.lineLength = 0;\r\n}\r\n\r\n/**\r\n * Method to start the transcription process. It will tell the audioRecorder\r\n * to start storing all audio streams and record the start time for merging\r\n * purposes\r\n */\r\nTranscriber.prototype.start = function start() {\r\n    if (this.state !== BEFORE_STATE) {\r\n        throw new Error(\r\n            `The transcription can only start when it's in the \"${\r\n                BEFORE_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n    this.state = RECORDING_STATE;\r\n    this.audioRecorder.start();\r\n    this.startTime = new Date();\r\n};\r\n\r\n/**\r\n * Method to stop the transcription process. It will tell the audioRecorder to\r\n * stop, and get all the recorded audio to send it to the transcription service\r\n\r\n * @param callback a callback which will receive the transcription\r\n */\r\nTranscriber.prototype.stop = function stop(callback) {\r\n    if (this.state !== RECORDING_STATE) {\r\n        throw new Error(\r\n            `The transcription can only stop when it's in the \"${\r\n                RECORDING_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n\r\n    // stop the recording\r\n    console.log('stopping recording and sending audio files');\r\n    this.audioRecorder.stop();\r\n\r\n    // and send all recorded audio the the transcription service\r\n    const callBack = blobCallBack.bind(null, this);\r\n\r\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\r\n        this.transcriptionService.send(recordingResult, callBack);\r\n        this.counter++;\r\n    });\r\n\r\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\r\n    this.state = TRANSCRIBING_STATE;\r\n\r\n    // and store the callback for later\r\n    this.callback = callback;\r\n};\r\n\r\n/**\r\n * This method gets the answer from the transcription service, calculates the\r\n * offset and adds is to every Word object. It will also start the merging\r\n * when every send request has been received\r\n *\r\n * note: Make sure to bind this as a Transcription object\r\n * @param {Transcriber} transcriber the transcriber instance\r\n * @param {RecordingResult} answer a RecordingResult object with a defined\r\n * WordArray\r\n */\r\nfunction blobCallBack(transcriber, answer) {\r\n    console.log(\r\n        'retrieved an answer from the transcription service. The answer has an'\r\n            + ` array of length: ${answer.wordArray.length}`);\r\n\r\n    // first add the offset between the start of the transcription and\r\n    // the start of the recording to all start and end times\r\n    if (answer.wordArray.length > 0) {\r\n        let offset = answer.startTime.getUTCMilliseconds()\r\n            - transcriber.startTime.getUTCMilliseconds();\r\n\r\n        // transcriber time will always be earlier\r\n\r\n        if (offset < 0) {\r\n            offset = 0; // presume 0 if it somehow not earlier\r\n        }\r\n\r\n        let array = '[';\r\n\r\n        answer.wordArray.forEach(wordObject => {\r\n            wordObject.begin += offset;\r\n            wordObject.end += offset;\r\n            array += `${wordObject.word},`;\r\n        });\r\n        array += ']';\r\n        console.log(array);\r\n\r\n        // give a name value to the Array object so that the merging can access\r\n        // the name value without having to use the whole recordingResult object\r\n        // in the algorithm\r\n        answer.wordArray.name = answer.name;\r\n    }\r\n\r\n    // then store the array and decrease the counter\r\n    transcriber.results.push(answer.wordArray);\r\n    transcriber.counter--;\r\n    console.log(`current counter: ${transcriber.counter}`);\r\n\r\n    // and check if all results have been received.\r\n    transcriber.maybeMerge();\r\n}\r\n\r\n/**\r\n * this method will check if the counter is zero. If it is, it will call\r\n * the merging method\r\n */\r\nTranscriber.prototype.maybeMerge = function() {\r\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\r\n        // make sure to include the events in the result arrays before\r\n        // merging starts\r\n        this.merge();\r\n    }\r\n};\r\n\r\n/**\r\n * This method will merge all speech-to-text arrays together in one\r\n * readable transcription string\r\n */\r\nTranscriber.prototype.merge = function() {\r\n    console.log(\r\n        `starting merge process!\\n The length of the array: ${\r\n            this.results.length}`);\r\n    this.transcription = '';\r\n\r\n    // the merging algorithm will look over all Word objects who are at pos 0 in\r\n    // every array. It will then select the one closest in time to the\r\n    // previously placed word, while removing the selected word from its array\r\n    // note: words can be skipped the skipped word's begin and end time somehow\r\n    // end up between the closest word start and end time\r\n    const arrays = this.results;\r\n\r\n    // arrays of Word objects\r\n    const potentialWords = []; // array of the first Word objects\r\n    // check if any arrays are already empty and remove them\r\n\r\n    hasPopulatedArrays(arrays);\r\n\r\n    // populate all the potential Words for a first time\r\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\r\n\r\n    // keep adding words to transcription until all arrays are exhausted\r\n    while (hasPopulatedArrays(arrays)) {\r\n        // first select the lowest array;\r\n        let lowestWordArray = arrays[0];\r\n\r\n        arrays.forEach(wordArray => {\r\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\r\n                lowestWordArray = wordArray;\r\n            }\r\n        });\r\n\r\n        // put the word in the transcription\r\n        let wordToAdd = lowestWordArray.shift();\r\n\r\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\r\n\r\n        // keep going until a word in another array has a smaller time\r\n        // or the array is empty\r\n        while (lowestWordArray.length > 0) {\r\n            let foundSmaller = false;\r\n            const wordToCompare = lowestWordArray[0].begin;\r\n\r\n            arrays.forEach(wordArray => {\r\n                if (wordArray[0].begin < wordToCompare) {\r\n                    foundSmaller = true;\r\n                }\r\n            });\r\n\r\n            // add next word if no smaller time has been found\r\n            if (foundSmaller) {\r\n                break;\r\n            }\r\n\r\n            wordToAdd = lowestWordArray.shift();\r\n            this.updateTranscription(wordToAdd, null);\r\n        }\r\n\r\n    }\r\n\r\n    // set the state to finished and do the necessary left-over tasks\r\n    this.state = FINISHED_STATE;\r\n    if (this.callback) {\r\n        this.callback(this.transcription);\r\n    }\r\n};\r\n\r\n/**\r\n * Appends a word object to the transcription. It will make a new line with a\r\n * name if a name is specified\r\n * @param {Word} word the Word object holding the word to append\r\n * @param {String|null} name the name of a new speaker. Null if not applicable\r\n */\r\nTranscriber.prototype.updateTranscription = function(word, name) {\r\n    if (name !== undefined && name !== null) {\r\n        this.transcription += `\\n${name}:`;\r\n        this.lineLength = name.length + 1; // +1 for the semi-colon\r\n    }\r\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\r\n        this.transcription += '\\n    ';\r\n        this.lineLength = 4; // because of the 4 spaces after the new line\r\n    }\r\n    this.transcription += ` ${word.word}`;\r\n    this.lineLength += word.word.length + 1; // +1 for the space\r\n};\r\n\r\n/**\r\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\r\n * All zero-element arrays inside will be removed\r\n * If any non-zero-element arrays are found, the method will return true.\r\n * otherwise it will return false\r\n * @param {Array<Array>} twoDimensionalArray the array to check\r\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\r\n */\r\nfunction hasPopulatedArrays(twoDimensionalArray) {\r\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\r\n        if (twoDimensionalArray[i].length === 0) {\r\n            twoDimensionalArray.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    return twoDimensionalArray.length > 0;\r\n}\r\n\r\n/**\r\n * Push a word to the right location in a sorted array. The array is sorted\r\n * from lowest to highest start time. Every word is stored in an object which\r\n * includes the name of the person saying the word.\r\n *\r\n * @param {Array<Word>} array the sorted array to push to\r\n * @param {Word} word the word to push into the array\r\n */\r\nfunction pushWordToSortedArray(array, word) {\r\n    if (array.length === 0) {\r\n        array.push(word);\r\n    } else {\r\n        if (array[array.length - 1].begin <= word.begin) {\r\n            array.push(word);\r\n\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n            if (word.begin < array[i].begin) {\r\n                array.splice(i, 0, word);\r\n\r\n                return;\r\n            }\r\n        }\r\n        array.push(word); // fail safe\r\n    }\r\n}\r\n\r\n/**\r\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\r\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\r\n * audiostream, it will not be added by the audioRecorder\r\n * @param {JitsiTrack} track the track to give to the audioRecorder\r\n */\r\nTranscriber.prototype.addTrack = function(track) {\r\n    this.audioRecorder.addTrack(track);\r\n};\r\n\r\n/**\r\n * Remove the given track from the auioRecorder\r\n * @param track\r\n */\r\nTranscriber.prototype.removeTrack = function(track) {\r\n    this.audioRecorder.removeTrack(track);\r\n};\r\n\r\n/**\r\n * Will return the created transcription if it's avialable or throw an error\r\n * when it's not done yet\r\n * @returns {String} the transcription as a String\r\n */\r\nTranscriber.prototype.getTranscription = function() {\r\n    if (this.state !== FINISHED_STATE) {\r\n        throw new Error(\r\n            `The transcription can only be retrieved when it's in the \"${\r\n                FINISHED_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n\r\n    return this.transcription;\r\n};\r\n\r\n/**\r\n * Returns the current state of the transcription process\r\n */\r\nTranscriber.prototype.getState = function() {\r\n    return this.state;\r\n};\r\n\r\n/**\r\n * Resets the state to the \"before\" state, such that it's again possible to\r\n * call the start method\r\n */\r\nTranscriber.prototype.reset = function() {\r\n    this.state = BEFORE_STATE;\r\n    this.counter = null;\r\n    this.transcription = null;\r\n    this.startTime = null;\r\n    this.callback = null;\r\n    this.results = [];\r\n    this.lineLength = 0;\r\n};\r\n\r\nmodule.exports = Transcriber;\r\n","import Statistics from '../statistics/statistics';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\r\n * the versions of conferencing system components in given\r\n * <tt>JitsiConference</tt>.\r\n * @param conference <tt>JitsiConference</tt> instance which will be used to\r\n *        listen for focus presence updates.\r\n * @constructor\r\n */\r\nexport default function ComponentsVersions(conference) {\r\n\r\n    this.versions = {};\r\n\r\n    this.conference = conference;\r\n    this.conference.addCommandListener(\r\n        'versions', this.processVersions.bind(this));\r\n}\r\n\r\nComponentsVersions.prototype.processVersions\r\n    = function(versions, mucResource, mucJid) {\r\n        if (!this.conference._isFocus(mucJid)) {\r\n            logger.warn(\r\n                `Received versions not from the focus user: ${versions}`,\r\n                mucJid);\r\n\r\n            return;\r\n        }\r\n\r\n        const log = [];\r\n\r\n        versions.children.forEach(component => {\r\n\r\n            const name = component.attributes.name;\r\n            const version = component.value;\r\n\r\n            if (this.versions[name] !== version) {\r\n                this.versions[name] = version;\r\n                logger.info(`Got ${name} version: ${version}`);\r\n\r\n                log.push({\r\n                    id: 'component_version',\r\n                    component: name,\r\n                    version\r\n                });\r\n            }\r\n        });\r\n\r\n        // logs versions to stats\r\n        if (log.length > 0) {\r\n            Statistics.sendLog(JSON.stringify(log));\r\n        }\r\n    };\r\n\r\n/**\r\n * Obtains the version of conferencing system component.\r\n * @param componentName the name of the component for which we want to obtain\r\n *        the version.\r\n * @returns {String} which describes the version of the component identified by\r\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\r\n */\r\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\r\n    return this.versions[componentName];\r\n};\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nconst logger = getLogger(__filename);\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\r\nimport * as Constants from './VideoSIPGWConstants';\r\n\r\n/**\r\n * Main video SIP GW handler. Stores references of all created sessions.\r\n */\r\nexport default class VideoSIPGW {\r\n\r\n    /**\r\n     * Creates new handler.\r\n     *\r\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\r\n     */\r\n    constructor(chatRoom) {\r\n        this.chatRoom = chatRoom;\r\n        this.eventEmitter = chatRoom.eventEmitter;\r\n        logger.debug('creating VideoSIPGW');\r\n        this.sessions = {};\r\n\r\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\r\n\r\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\r\n        // more than one VideoSIPGW can be created per JitsiConference,\r\n        // so we don't bother to cleanup\r\n        chatRoom.addPresenceListener('jibri-sip-call-state',\r\n            this.handleJibriSIPState.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Handles presence nodes with name: jibri-sip-call-state.\r\n     *\r\n     * @param {Object} node the presence node Object to handle.\r\n     * Object representing part of the presence received over xmpp.\r\n     */\r\n    handleJibriSIPState(node) {\r\n        const attributes = node.attributes;\r\n\r\n        if (!attributes) {\r\n            return;\r\n        }\r\n\r\n        logger.debug('Handle video sip gw state : ', attributes);\r\n\r\n        const newState = attributes.state;\r\n\r\n        if (newState === this.state) {\r\n            return;\r\n        }\r\n\r\n        switch (newState) {\r\n        case Constants.STATE_ON:\r\n        case Constants.STATE_OFF:\r\n        case Constants.STATE_PENDING:\r\n        case Constants.STATE_RETRYING:\r\n        case Constants.STATE_FAILED: {\r\n            const address = attributes.sipaddress;\r\n\r\n            if (!address) {\r\n                return;\r\n            }\r\n\r\n            // find the corresponding session and set its state\r\n            const session = this.sessions[address];\r\n\r\n            if (session) {\r\n                session.setState(newState, attributes.failure_reason);\r\n            } else {\r\n                logger.warn('Video SIP GW session not found:', address);\r\n            }\r\n        }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates new session and stores its reference if it does not exist or\r\n     * returns an error otherwise.\r\n     *\r\n     * @param {string} sipAddress - The sip address to use.\r\n     * @param {string} displayName - The display name to use.\r\n     * @returns {JitsiVideoSIPGWSession|Error}\r\n     */\r\n    createVideoSIPGWSession(sipAddress, displayName) {\r\n        if (this.sessions[sipAddress]) {\r\n            logger.warn('There was already a Video SIP GW session for address',\r\n                sipAddress);\r\n\r\n            return new Error(Constants.ERROR_SESSION_EXISTS);\r\n        }\r\n\r\n        const session = new JitsiVideoSIPGWSession(\r\n            sipAddress, displayName, this.chatRoom);\r\n\r\n        session.addStateListener(this.sessionStateChangeListener);\r\n\r\n        this.sessions[sipAddress] = session;\r\n\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * Listener for session state changed. When a session goes to off or failed\r\n     * we delete its reference.\r\n     *\r\n     * @param {options} event - { address, oldState, newState, displayName }\r\n     */\r\n    sessionStateChanged(event) {\r\n        const address = event.address;\r\n\r\n        if (event.newState === Constants.STATE_OFF\r\n            || event.newState === Constants.STATE_FAILED) {\r\n            const session = this.sessions[address];\r\n\r\n            if (!session) {\r\n                logger.error('Missing Video SIP GW session with address:',\r\n                    address);\r\n\r\n                return;\r\n            }\r\n\r\n            session.removeStateListener(this.sessionStateChangeListener);\r\n            delete this.sessions[address];\r\n        }\r\n\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\r\n            event);\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The event name for current sip video session state changed.\r\n * @type {string} event name for sip video session state changed.\r\n */\r\nconst STATE_CHANGED = 'STATE_CHANGED';\r\n\r\n/**\r\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\r\n * When session is in OFF or FAILED stated it cannot be used anymore.\r\n */\r\nexport default class JitsiVideoSIPGWSession extends Listenable {\r\n\r\n    /**\r\n     * Creates new session with the desired sip address and display name.\r\n     *\r\n     * @param {string} sipAddress - The sip address to use when\r\n     * starting the session.\r\n     * @param {string} displayName - The display name to use for\r\n     * that participant.\r\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\r\n     */\r\n    constructor(sipAddress, displayName, chatRoom) {\r\n        super();\r\n\r\n        this.sipAddress = sipAddress;\r\n        this.displayName = displayName;\r\n        this.chatRoom = chatRoom;\r\n\r\n        /*\r\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\r\n         * the session enters this state when it was in STATE_ON and was stopped\r\n         * and such session cannot be used anymore.\r\n         *\r\n         * @type {VideoSIPGWConstants|undefined}\r\n         */\r\n        this.state = undefined;\r\n    }\r\n\r\n    /**\r\n     * Stops the current session.\r\n     */\r\n    stop() {\r\n        if (this.state === VideoSIPGWConstants.STATE_OFF\r\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\r\n            logger.warn('Video SIP GW session already stopped or failed!');\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendJibriIQ('stop');\r\n    }\r\n\r\n    /**\r\n     * Starts a new session. Sends an iq to the focus.\r\n     */\r\n    start() {\r\n        // if state is off, this session was active for some reason\r\n        // and we should create new one, rather than reusing it\r\n        if (this.state === VideoSIPGWConstants.STATE_ON\r\n            || this.state === VideoSIPGWConstants.STATE_OFF\r\n            || this.state === VideoSIPGWConstants.STATE_PENDING\r\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\r\n            logger.warn('Video SIP GW session already started!');\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendJibriIQ('start');\r\n    }\r\n\r\n    /**\r\n     * Changes the state of this session.\r\n     *\r\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\r\n     * @param {string} [optional] failureReason - The reason why a failure state\r\n     * was entered.\r\n     * @returns {void}\r\n     */\r\n    setState(newState, failureReason) {\r\n        if (newState === this.state) {\r\n            return;\r\n        }\r\n\r\n        const oldState = this.state;\r\n\r\n        this.state = newState;\r\n        this.eventEmitter.emit(STATE_CHANGED,\r\n            {\r\n                address: this.sipAddress,\r\n                failureReason,\r\n                oldState,\r\n                newState: this.state,\r\n                displayName: this.displayName\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Subscribes the passed listener to the event for state change of this\r\n     * session.\r\n     *\r\n     * @param {Function} listener - The function that will receive the event.\r\n     */\r\n    addStateListener(listener) {\r\n        this.addListener(STATE_CHANGED, listener);\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes the passed handler.\r\n     *\r\n     * @param {Function} listener - The function to be removed.\r\n     */\r\n    removeStateListener(listener) {\r\n        this.removeListener(STATE_CHANGED, listener);\r\n    }\r\n\r\n    /**\r\n     * Sends a jibri command using an iq.\r\n     *\r\n     * @private\r\n     * @param {string} action - The action to send ('start' or 'stop').\r\n     */\r\n    _sendJibriIQ(action) {\r\n        const attributes = {\r\n            'xmlns': 'http://jitsi.org/protocol/jibri',\r\n            'action': action,\r\n            sipaddress: this.sipAddress\r\n        };\r\n\r\n        attributes.displayname = this.displayName;\r\n\r\n        const iq = $iq({\r\n            to: this.chatRoom.focusMucJid,\r\n            type: 'set' })\r\n            .c('jibri', attributes)\r\n            .up();\r\n\r\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\r\n        this.chatRoom.connection.sendIQ(\r\n            iq,\r\n            () => {}, // eslint-disable-line no-empty-function\r\n            error => {\r\n                logger.error(\r\n                    `Failed to ${action} video SIP GW session, error: `, error);\r\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\r\n            });\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport RTC from '../RTC/RTC';\r\nimport Statistics from '../statistics/statistics';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\r\n// i.e. audioLevel > 0.008\r\nconst DETECTION_TIMEOUT = 3000;\r\n\r\n\r\n/**\r\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\r\n *\r\n * @returns Promise<Object> - Object containing information about the found device.\r\n */\r\nexport default function getActiveAudioDevice() {\r\n\r\n    return new Promise(resolve => {\r\n        RTC.enumerateDevices(devices => {\r\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\r\n            const devicePromiseArray = [];\r\n\r\n\r\n            for (const micDevice of audioDevices) {\r\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\r\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\r\n\r\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\r\n                    // that's  why only take p.value[0].\r\n                    const track = tracks[0];\r\n                    const originalStream = track.getOriginalStream();\r\n\r\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\r\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\r\n                        Statistics.stopLocalStats(originalStream);\r\n                    });\r\n\r\n                    return track;\r\n                });\r\n\r\n                devicePromiseArray.push(devicePromise);\r\n            }\r\n\r\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\r\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\r\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\r\n\r\n\r\n                const availableDevices = successfulPromises.map(p => p.value);\r\n                const rejectReasons = rejectedPromises.map(p => p.value);\r\n\r\n                for (const reason of rejectReasons) {\r\n                    logger.error('Failed to acquire audio device with error: ', reason);\r\n                }\r\n\r\n                // Setup event handlers for monitored devices.\r\n                for (const device of availableDevices) {\r\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\r\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\r\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\r\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\r\n                        // no input.\r\n                        if (audioLevel > 0.008) {\r\n                            stopActiveDevices(availableDevices);\r\n                            resolve({ deviceId: device.deviceId,\r\n                                deviceLabel: device.track.label });\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\r\n                setTimeout(() => {\r\n                    stopActiveDevices(availableDevices);\r\n                    resolve({\r\n                        deviceId: '',\r\n                        deviceLabel: '' }\r\n                    );\r\n                }, DETECTION_TIMEOUT);\r\n\r\n            });\r\n\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Stop the streams of the provided JitsiLocalTracks.\r\n *\r\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\r\n * @returns {void}\r\n */\r\nfunction stopActiveDevices(deviceList) {\r\n    for (const device of deviceList) {\r\n        device.stopStream();\r\n    }\r\n}\r\n","/* globals $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport RTC from '../RTC/RTC';\r\n\r\nimport ProxyConnectionPC from './ProxyConnectionPC';\r\nimport { ACTIONS } from './constants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\r\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\r\n * and assumes IQs to be used for communication.\r\n */\r\nexport default class ProxyConnectionService {\r\n    /**\r\n     * Initializes a new {@code ProxyConnectionService} instance.\r\n     *\r\n     * @param {Object} options - Values to initialize the instance with.\r\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\r\n     * video should be returned as a desktop stream. Defaults to false.\r\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\r\n     * for the peer connection.\r\n     * @param {JitsiConnection} [options.jitsiConnection] - The\r\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\r\n     * the P2P connection.\r\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\r\n     * remote video stream has been received and converted to a\r\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\r\n     * @param {Function} options.onSendMessage - Callback to invoke when a\r\n     * message has to be sent (signaled) out. The arguments passed in are the\r\n     * jid to send the message to and the message\r\n     */\r\n    constructor(options = {}) {\r\n        const {\r\n            jitsiConnection,\r\n            ...otherOptions\r\n        } = options;\r\n\r\n        /**\r\n         * Holds a reference to the collection of all callbacks.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this._options = {\r\n            iceConfig: jitsiConnection\r\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\r\n            ...otherOptions\r\n        };\r\n\r\n        /**\r\n         * The active instance of {@code ProxyConnectionService}.\r\n         *\r\n         * @type {ProxyConnectionPC|null}\r\n         */\r\n        this._peerConnection = null;\r\n\r\n        // Bind event handlers so they are only bound once for every instance.\r\n        this._onFatalError = this._onFatalError.bind(this);\r\n        this._onSendMessage = this._onSendMessage.bind(this);\r\n        this._onRemoteStream = this._onRemoteStream.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a message object regarding a proxy connection to create a new\r\n     * proxy connection or update and existing connection.\r\n     *\r\n     * @param {Object} message - A message object regarding establishing or\r\n     * updating a proxy connection.\r\n     * @param {Object} message.data - An object containing additional message\r\n     * details.\r\n     * @param {string} message.data.iq - The stringified iq which explains how\r\n     * and what to update regarding the proxy connection.\r\n     * @param {string} message.from - The message sender's full jid. Used for\r\n     * sending replies.\r\n     * @returns {void}\r\n     */\r\n    processMessage(message) {\r\n        const peerJid = message.from;\r\n\r\n        if (!peerJid) {\r\n            return;\r\n        }\r\n\r\n        // If a proxy connection has already been established and messages come\r\n        // from another peer jid then those messages should be replied to with\r\n        // a rejection.\r\n        if (this._peerConnection\r\n            && this._peerConnection.getPeerJid() !== peerJid) {\r\n            this._onFatalError(\r\n                peerJid,\r\n                ACTIONS.CONNECTION_ERROR,\r\n                'rejected'\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        const iq = this._convertStringToXML(message.data.iq);\r\n        const $jingle = iq && iq.find('jingle');\r\n        const action = $jingle && $jingle.attr('action');\r\n\r\n        if (action === ACTIONS.INITIATE) {\r\n            this._peerConnection = this._createPeerConnection(peerJid, {\r\n                isInitiator: false,\r\n                receiveVideo: true\r\n            });\r\n        }\r\n\r\n        // Truthy check for peer connection added to protect against possibly\r\n        // receiving actions before an ACTIONS.INITIATE.\r\n        if (this._peerConnection) {\r\n            this._peerConnection.processMessage($jingle);\r\n        }\r\n\r\n        // Take additional steps to ensure the peer connection is cleaned up\r\n        // if it is to be closed.\r\n        if (action === ACTIONS.CONNECTION_ERROR\r\n            || action === ACTIONS.UNAVAILABLE\r\n            || action === ACTIONS.TERMINATE) {\r\n            this._selfCloseConnection();\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Instantiates and initiates a proxy peer connection.\r\n     *\r\n     * @param {string} peerJid - The jid of the remote client that should\r\n     * receive messages.\r\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\r\n     * send through to the peer.\r\n     * @returns {void}\r\n     */\r\n    start(peerJid, localTracks = []) {\r\n        this._peerConnection = this._createPeerConnection(peerJid, {\r\n            isInitiator: true,\r\n            receiveVideo: false\r\n        });\r\n\r\n        this._peerConnection.start(localTracks);\r\n    }\r\n\r\n    /**\r\n     * Terminates any active proxy peer connection.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        if (this._peerConnection) {\r\n            this._peerConnection.stop();\r\n        }\r\n\r\n        this._peerConnection = null;\r\n    }\r\n\r\n    /**\r\n     * Transforms a stringified xML into a XML wrapped in jQuery.\r\n     *\r\n     * @param {string} xml - The XML in string form.\r\n     * @private\r\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\r\n     * if an error is encountered during transformation.\r\n     */\r\n    _convertStringToXML(xml) {\r\n        try {\r\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\r\n\r\n            return $(xmlDom);\r\n        } catch (e) {\r\n            logger.error('Attempted to convert incorrectly formatted xml');\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\r\n     *\r\n     * @param {string} peerJid - The jid of the remote peer with which the\r\n     * {@code ProxyConnectionPC} will be established with.\r\n     * @param {Object} options - Additional defaults to instantiate the\r\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\r\n     * for more details.\r\n     * @private\r\n     * @returns {ProxyConnectionPC}\r\n     */\r\n    _createPeerConnection(peerJid, options = {}) {\r\n        if (!peerJid) {\r\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\r\n        }\r\n\r\n        const pcOptions = {\r\n            iceConfig: this._options.iceConfig,\r\n            onError: this._onFatalError,\r\n            onRemoteStream: this._onRemoteStream,\r\n            onSendMessage: this._onSendMessage,\r\n            peerJid,\r\n            ...options\r\n        };\r\n\r\n        return new ProxyConnectionPC(pcOptions);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when an error occurs that should cause\r\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\r\n     * connected. Sends an error message/reply back to the peer.\r\n     *\r\n     * @param {string} peerJid - The peer jid with which the connection was\r\n     * attempted or started, and to which an iq with error details should be\r\n     * sent.\r\n     * @param {string} errorType - The constant indicating the type of the error\r\n     * that occured.\r\n     * @param {string} details - Optional additional data about the error.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onFatalError(peerJid, errorType, details = '') {\r\n        logger.error(\r\n            'Received a proxy connection error', peerJid, errorType, details);\r\n\r\n        const iq = $iq({\r\n            to: peerJid,\r\n            type: 'set'\r\n        })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: errorType\r\n            })\r\n            .c('details')\r\n            .t(details)\r\n            .up();\r\n\r\n        this._onSendMessage(peerJid, iq);\r\n\r\n        if (this._peerConnection\r\n            && this._peerConnection.getPeerJid() === peerJid) {\r\n            this._selfCloseConnection();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\r\n     * has offered a media stream. The stream is converted into a\r\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\r\n     * callback is defined.\r\n     *\r\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\r\n     * for the peer's media stream.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onRemoteStream(jitsiRemoteTrack) {\r\n        if (!this._options.onRemoteStream) {\r\n            logger.error('Remote track received without callback.');\r\n            jitsiRemoteTrack.dispose();\r\n\r\n            return;\r\n        }\r\n\r\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\r\n        let videoType;\r\n\r\n        if (isVideo) {\r\n            videoType = this._options.convertVideoToDesktop\r\n                ? VideoType.DESKTOP : VideoType.CAMERA;\r\n        }\r\n\r\n        // Grab the webrtc media stream and pipe it through the same processing\r\n        // that would occur for a locally obtained media stream.\r\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\r\n        const jitsiLocalTracks = RTC.newCreateLocalTracks(\r\n            [\r\n                {\r\n                    deviceId:\r\n                        `proxy:${this._peerConnection.getPeerJid()}`,\r\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\r\n                    sourceType: 'proxy',\r\n                    stream: mediaStream,\r\n                    track: mediaStream.getVideoTracks()[0],\r\n                    videoType\r\n                }\r\n            ]);\r\n\r\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\r\n    }\r\n\r\n    /**\r\n     * Formats and forwards a message an iq to be sent to a peer jid.\r\n     *\r\n     * @param {string} peerJid - The jid the iq should be sent to.\r\n     * @param {Object} iq - The iq which would be sent to the peer jid.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSendMessage(peerJid, iq) {\r\n        if (!this._options.onSendMessage) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const stringifiedIq\r\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\r\n\r\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\r\n        } catch (e) {\r\n            logger.error('Attempted to send an incorrectly formatted iq.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _selfCloseConnection() {\r\n        this.stop();\r\n\r\n        this._options.onConnectionClosed\r\n            && this._options.onConnectionClosed();\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport RTC from '../RTC/RTC';\r\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\r\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\r\n\r\nimport { ACTIONS } from './constants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\r\n * an XMPP connection. It is being re-used for consistency with the rest of the\r\n * codebase and to leverage existing peer connection event handling. Also\r\n * this class provides a facade to hide most of the API for\r\n * {@code JingleSessionPC}.\r\n */\r\nexport default class ProxyConnectionPC {\r\n    /**\r\n     * Initializes a new {@code ProxyConnectionPC} instance.\r\n     *\r\n     * @param {Object} options - Values to initialize the instance with.\r\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\r\n     * for the peer connection.\r\n     * @param {boolean} [options.isInitiator] - If true, the local client should\r\n     * send offers. If false, the local client should send answers. Defaults to\r\n     * false.\r\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\r\n     * remote media stream has been received through the peer connection.\r\n     * @param {string} options.peerJid - The jid of the remote client with which\r\n     * the peer connection is being establish and which should receive direct\r\n     * messages regarding peer connection updates.\r\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\r\n     * connection should accept incoming video streams. Defaults to false.\r\n     * @param {Function} options.onSendMessage - Callback to invoke when a\r\n     * message has to be sent (signaled) out.\r\n     */\r\n    constructor(options = {}) {\r\n        this._options = {\r\n            iceConfig: {},\r\n            isInitiator: false,\r\n            receiveAudio: false,\r\n            receiveVideo: false,\r\n            ...options\r\n        };\r\n\r\n        /**\r\n         * Instances of {@code JitsiTrack} associated with this instance of\r\n         * {@code ProxyConnectionPC}.\r\n         *\r\n         * @type {Array<JitsiTrack>}\r\n         */\r\n        this._tracks = [];\r\n\r\n        /**\r\n         * The active instance of {@code JingleSessionPC}.\r\n         *\r\n         * @type {JingleSessionPC|null}\r\n         */\r\n        this._peerConnection = null;\r\n\r\n        // Bind event handlers so they are only bound once for every instance.\r\n        this._onError = this._onError.bind(this);\r\n        this._onRemoteStream = this._onRemoteStream.bind(this);\r\n        this._onSendMessage = this._onSendMessage.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the remote peer with which this peer connection should\r\n     * be established with.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getPeerJid() {\r\n        return this._options.peerJid;\r\n    }\r\n\r\n    /**\r\n     * Updates the peer connection based on the passed in jingle.\r\n     *\r\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\r\n     * describing how the peer connection should be updated.\r\n     * @returns {void}\r\n     */\r\n    processMessage($jingle) {\r\n        switch ($jingle.attr('action')) {\r\n        case ACTIONS.ACCEPT:\r\n            this._onSessionAccept($jingle);\r\n            break;\r\n\r\n        case ACTIONS.INITIATE:\r\n            this._onSessionInitiate($jingle);\r\n            break;\r\n\r\n        case ACTIONS.TERMINATE:\r\n            this._onSessionTerminate($jingle);\r\n            break;\r\n\r\n        case ACTIONS.TRANSPORT_INFO:\r\n            this._onTransportInfo($jingle);\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instantiates a peer connection and starts the offer/answer cycle to\r\n     * establish a connection with a remote peer.\r\n     *\r\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\r\n     * to add to the peer connection.\r\n     * @returns {void}\r\n     */\r\n    start(localTracks = []) {\r\n        if (this._peerConnection) {\r\n            return;\r\n        }\r\n\r\n        this._tracks = this._tracks.concat(localTracks);\r\n\r\n        this._peerConnection = this._createPeerConnection();\r\n\r\n        this._peerConnection.invite(localTracks);\r\n    }\r\n\r\n    /**\r\n     * Begins the process of disconnecting from a remote peer and cleaning up\r\n     * the peer connection.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        if (this._peerConnection) {\r\n            this._peerConnection.terminate();\r\n        }\r\n\r\n        this._onSessionTerminate();\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\r\n     * dependencies of {@code JingleSessionPC}.\r\n     *\r\n     * @private\r\n     * @returns {JingleSessionPC}\r\n     */\r\n    _createPeerConnection() {\r\n        /**\r\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\r\n         * object, which may not be accessible from the caller.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const configStub = {};\r\n\r\n        /**\r\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\r\n         * passed through, which also has the jingle plugin initialized on it.\r\n         * This connection object is used to signal out peer connection updates\r\n         * via iqs, and those updates need to be piped back out to the remote\r\n         * peer.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const connectionStub = {\r\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\r\n            // spot has no signalling it will not be in a meeting where this is used.\r\n            connected: true,\r\n            jingle: {\r\n                terminate: () => { /** no-op */ }\r\n            },\r\n            sendIQ: this._onSendMessage,\r\n\r\n            // Returns empty function, because it does not add any listeners for real\r\n            // eslint-disable-next-line no-empty-function\r\n            addEventListener: () => () => { }\r\n        };\r\n\r\n        /**\r\n         * {@code JingleSessionPC} can take in a custom ice configuration,\r\n         * depending on the peer connection type, peer-to-peer or other.\r\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\r\n         * connection so the ice configuration is hard-coded with defaults.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const iceConfigStub = {\r\n            iceServers: DEFAULT_STUN_SERVERS,\r\n            ...this._options.iceConfig\r\n        };\r\n\r\n        /**\r\n         * {@code JingleSessionPC} expects an instance of\r\n         * {@code JitsiConference}, which has an event emitter that is used\r\n         * to signal various connection updates that the local client should\r\n         * act upon. The conference instance is not a dependency of a proxy\r\n         * connection, but the emitted events can be relevant to the proxy\r\n         * connection so the event emitter is stubbed.\r\n         *\r\n         * @param {string} event - The constant for the event type.\r\n         * @type {Function}\r\n         * @returns {void}\r\n         */\r\n        const emitter = event => {\r\n            switch (event) {\r\n            case XMPPEvents.CONNECTION_ICE_FAILED:\r\n            case XMPPEvents.CONNECTION_FAILED:\r\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\r\n                break;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * {@link JingleSessionPC} expects an instance of\r\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\r\n         * is instantiated outside of the {@code JitsiConference}, so it must be\r\n         * stubbed to prevent errors.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const roomStub = {\r\n            addPresenceListener: () => { /** no-op */ },\r\n            connectionTimes: [],\r\n            eventEmitter: { emit: emitter },\r\n            getMediaPresenceInfo: () => {\r\n                // Errors occur if this function does not return an object\r\n\r\n                return {};\r\n            },\r\n            removePresenceListener: () => { /** no-op */ }\r\n        };\r\n\r\n        /**\r\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\r\n         * @type {Object}\r\n         */\r\n        const conferenceStub = {};\r\n\r\n        /**\r\n         * Create an instance of {@code RTC} as it is required for peer\r\n         * connection creation by {@code JingleSessionPC}. An existing instance\r\n         * of {@code RTC} from elsewhere should not be re-used because it is\r\n         * a stateful grouping of utilities.\r\n         */\r\n        this._rtc = new RTC(conferenceStub, {});\r\n\r\n        /**\r\n         * Add the remote track listener here as {@code JingleSessionPC} has\r\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\r\n         * emitter.\r\n         */\r\n        this._rtc.addListener(\r\n            RTCEvents.REMOTE_TRACK_ADDED,\r\n            this._onRemoteStream\r\n        );\r\n\r\n        const peerConnection = new JingleSessionPC(\r\n            undefined, // sid\r\n            undefined, // localJid\r\n            this._options.peerJid, // remoteJid\r\n            connectionStub, // connection\r\n            {\r\n                offerToReceiveAudio: this._options.receiveAudio,\r\n                offerToReceiveVideo: this._options.receiveVideo\r\n            }, // mediaConstraints\r\n            iceConfigStub, // iceConfig\r\n            true, // isP2P\r\n            this._options.isInitiator // isInitiator\r\n        );\r\n\r\n        /**\r\n         * An additional initialize call is necessary to properly set instance\r\n         * variable for calling.\r\n         */\r\n        peerConnection.initialize(roomStub, this._rtc, configStub);\r\n\r\n        return peerConnection;\r\n    }\r\n\r\n    /**\r\n     * Invoked when a connection related issue has been encountered.\r\n     *\r\n     * @param {string} errorType - The constant indicating the type of the error\r\n     * that occured.\r\n     * @param {string} details - Optional additional data about the error.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onError(errorType, details = '') {\r\n        this._options.onError(this._options.peerJid, errorType, details);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the peer connection has received a remote media\r\n     * stream.\r\n     *\r\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\r\n     * wrapped in {@code JitsiRemoteTrack}.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onRemoteStream(jitsiRemoteTrack) {\r\n        this._tracks.push(jitsiRemoteTrack);\r\n\r\n        this._options.onRemoteStream(jitsiRemoteTrack);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\r\n     * out to the remote peer.\r\n     *\r\n     * @param {XML} iq - The message to signal out.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSendMessage(iq) {\r\n        this._options.onSendMessage(this._options.peerJid, iq);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to an agreement to start a proxy connection.\r\n     * The passed in jingle element should contain an SDP answer to a previously\r\n     * sent SDP offer.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionAccept($jingle) {\r\n        if (!this._peerConnection) {\r\n            logger.error('Received an answer when no peer connection exists.');\r\n\r\n            return;\r\n        }\r\n\r\n        this._peerConnection.setAnswer($jingle);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to a request to start a proxy connection.\r\n     * The passed in jingle element should contain an SDP offer.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionInitiate($jingle) {\r\n        if (this._peerConnection) {\r\n            logger.error('Received an offer when an offer was already sent.');\r\n\r\n            return;\r\n        }\r\n\r\n        this._peerConnection = this._createPeerConnection();\r\n\r\n        this._peerConnection.acceptOffer(\r\n            $jingle,\r\n            () => { /** no-op */ },\r\n            () => this._onError(\r\n                this._options.peerJid,\r\n                ACTIONS.CONNECTION_ERROR,\r\n                'session initiate error'\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to a request to disconnect an active proxy\r\n     * connection. Cleans up tracks and the peer connection.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionTerminate() {\r\n        this._tracks.forEach(track => track.dispose());\r\n        this._tracks = [];\r\n\r\n        if (this._peerConnection) {\r\n            this._peerConnection.onTerminated();\r\n        }\r\n\r\n        if (this._rtc) {\r\n            this._rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_ADDED,\r\n                this._onRemoteStream\r\n            );\r\n\r\n            this._rtc.destroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to ICE candidates from the remote peer.\r\n     * The passed in jingle element should contain an ICE candidate.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTransportInfo($jingle) {\r\n        this._peerConnection.addIceCandidates($jingle);\r\n    }\r\n}\r\n","export default {\r\n    error: {\r\n        BUSY: 'busy',\r\n        ERROR: 'error',\r\n        RESOURCE_CONSTRAINT: 'resource-constraint',\r\n        SERVICE_UNAVAILABLE: 'service-unavailable'\r\n    },\r\n    mode: {\r\n        FILE: 'file',\r\n        STREAM: 'stream'\r\n    },\r\n    status: {\r\n        OFF: 'off',\r\n        ON: 'on',\r\n        PENDING: 'pending'\r\n    }\r\n};\r\n","import EventEmitter from 'events';\r\n\r\nimport browser from '../browser';\r\nimport Settings from '../settings/Settings';\r\nimport ScriptUtil from '../util/ScriptUtil';\r\n\r\nimport { CALLSTATS_SCRIPT_URL } from './constants';\r\n\r\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\r\nconst emitter = new EventEmitter();\r\nlet _initialized = false;\r\nlet api = null;\r\n\r\n/**\r\n * Loads the callstats io script.\r\n *\r\n * @returns {Promise<void>}\r\n */\r\nfunction _loadScript() {\r\n    if (browser.isReactNative()) {\r\n        return;\r\n    }\r\n\r\n    return new Promise(resolve => {\r\n        ScriptUtil.loadScript(\r\n            CALLSTATS_SCRIPT_URL,\r\n            /* async */ true,\r\n            /* prepend */ true,\r\n            /* relativeURL */ undefined,\r\n            /* loadCallback */ resolve);\r\n    });\r\n}\r\n\r\n/**\r\n * Initializes the callstats lib and registers a callback to be invoked\r\n * when there are 'preCallTestResults'.\r\n *\r\n * @typedef PrecallTestOptions\r\n * @type {Object}\r\n * @property {string} callStatsID - Callstats credentials - the id.\r\n * @property {string} callStatsSecret - Callstats credentials - the secret.\r\n * @property {string} statisticsId - The user name to use when initializing callstats.\r\n * @property {string} statisticsDisplayName - The user display name.\r\n *\r\n * @param { PrecallTestOptions} options - The init options.\r\n * @returns {Promise<void>}\r\n */\r\nfunction _initialize(options) {\r\n    return new Promise((resolve, reject) => {\r\n        const appId = options.callStatsID;\r\n        const appSecret = options.callStatsSecret;\r\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\r\n\r\n        api.initialize(appId, appSecret, userId, (status, message) => {\r\n            if (status === 'success') {\r\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\r\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\r\n                });\r\n                _initialized = true;\r\n                resolve();\r\n            } else {\r\n                reject({\r\n                    status,\r\n                    message\r\n                });\r\n            }\r\n        }, null, { disablePrecalltest: true });\r\n    });\r\n}\r\n\r\n/**\r\n * Loads the callstats script and initializes the library.\r\n *\r\n * @param {Function} onResult - The callback to be invoked when results are received.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function init(options) {\r\n    if (_initialized) {\r\n        throw new Error('Precall Test already initialized');\r\n    }\r\n\r\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\r\n\r\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\r\n        throw new Error('Callstats is disabled');\r\n    }\r\n\r\n    await _loadScript();\r\n    // eslint-disable-next-line new-cap\r\n    api = new window.callstats();\r\n\r\n    return _initialize(options);\r\n}\r\n\r\n/**\r\n * Executes a pre call test.\r\n *\r\n * @typedef PrecallTestResults\r\n * @type {Object}\r\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\r\n * @property {number} throughput  - The average throughput.\r\n * @property {number} fractionalLoss - The packet loss.\r\n * @property {number} rtt - The round trip time.\r\n * @property {string} provider - It is usually 'callstats'.\r\n *\r\n * @returns {Promise<{PrecallTestResults}>}\r\n */\r\nexport function execute() {\r\n    if (!_initialized) {\r\n        return Promise.reject('uninitialized');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\r\n            if (status === 'success') {\r\n                resolve(payload);\r\n            } else {\r\n                reject({\r\n                    status,\r\n                    payload\r\n                });\r\n            }\r\n\r\n        });\r\n\r\n        api.makePrecallTest();\r\n    });\r\n}\r\n\r\nexport default {\r\n    init,\r\n    execute\r\n};\r\n","const AuthUtil = {\r\n    /**\r\n     * Creates the URL pointing to JWT token authentication service. It is\r\n     * formatted from the 'urlPattern' argument which can contain the following\r\n     * constants:\r\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\r\n     * argument to this method.\r\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\r\n     * the role upgrade scenario, where user connects from anonymous domain and\r\n     * then gets upgraded to the moderator by logging-in from the popup window.\r\n     *\r\n     * @param urlPattern a URL pattern pointing to the login service\r\n     * @param roomName the name of the conference room for which the user will\r\n     * be authenticated\r\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\r\n     * upgrade scenario, where the user logs-in from the popup window in order\r\n     * to have the moderator rights granted\r\n     *\r\n     * @returns {string|null} the URL pointing to JWT login service or\r\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\r\n     * constructed.\r\n     */\r\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\r\n        const url = urlPattern;\r\n\r\n        if (typeof url !== 'string') {\r\n            return null;\r\n        }\r\n\r\n        return url.replace('{room}', roomName)\r\n            .replace('{roleUpgrade}', roleUpgrade === true);\r\n    }\r\n};\r\n\r\nmodule.exports = AuthUtil;\r\n","/* global\r\n    __filename\r\n*/\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport { createAudioContext } from './WebAudioUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\r\n * MediaStream.\r\n */\r\nexport default class AudioMixer {\r\n    /**\r\n     * Create AudioMixer instance.\r\n     */\r\n    constructor() {\r\n        this._started = false;\r\n        this._streamsToMix = [];\r\n        this._streamMSSArray = [];\r\n    }\r\n\r\n    /**\r\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\r\n     *\r\n     * @param {MediaStream} stream - MediaStream to be mixed.\r\n     */\r\n    addMediaStream(stream) {\r\n        if (!stream.getAudioTracks()) {\r\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\r\n        }\r\n\r\n        this._streamsToMix.push(stream);\r\n    }\r\n\r\n    /**\r\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\r\n     * it; the resulting mixed MediaStream is returned.\r\n     *\r\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\r\n     * is added.\r\n     */\r\n    start() {\r\n        // If the mixer was already started just return the existing mixed stream.\r\n        if (this._started) {\r\n            return this._mixedMSD.stream;\r\n        }\r\n\r\n        this._audioContext = createAudioContext();\r\n\r\n        if (!this._streamsToMix.length) {\r\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\r\n\r\n            return null;\r\n        }\r\n\r\n        this._started = true;\r\n\r\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\r\n\r\n        for (const stream of this._streamsToMix) {\r\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\r\n\r\n            streamMSS.connect(this._mixedMSD);\r\n\r\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\r\n            this._streamMSSArray.push(streamMSS);\r\n        }\r\n\r\n        return this._mixedMSD.stream;\r\n    }\r\n\r\n    /**\r\n     * Disconnect MediaStreamAudioSourceNode and clear references.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._started = false;\r\n        this._streamsToMix = [];\r\n\r\n        // Clean up created MediaStreamAudioSourceNode.\r\n        for (const streamMSS of this._streamMSSArray) {\r\n            streamMSS.disconnect();\r\n        }\r\n\r\n        this._streamMSSArray = [];\r\n\r\n        if (this._audioContext) {\r\n            this._audioContext = undefined;\r\n        }\r\n    }\r\n}\r\n","/* Copyright @ 2015 - Present, 8x8 Inc\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport transform from 'sdp-transform';\r\n\r\n/**\r\n * Rewrites the source information in the way sdp-transform expects.\r\n * Source information is split into multiple ssrc objects each containing\r\n * an id, attribute and value.\r\n * @param {Object} media - media description to be modified.\r\n * @returns {void}\r\n */\r\nconst write = function(session, opts) {\r\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\r\n        session.media.forEach(mLine => {\r\n            if (mLine.sources && mLine.sources.length) {\r\n                mLine.ssrcs = [];\r\n                mLine.sources.forEach(source => {\r\n                    Object.keys(source).forEach(attribute => {\r\n                        if (attribute === 'id') {\r\n                            return;\r\n                        }\r\n                        mLine.ssrcs.push({\r\n                            id: source.id,\r\n                            attribute,\r\n                            value: source[attribute]\r\n                        });\r\n                    });\r\n                });\r\n                delete mLine.sources;\r\n            }\r\n\r\n            // join ssrcs in ssrc groups\r\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\r\n                mLine.ssrcGroups.forEach(ssrcGroup => {\r\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\r\n                    && Array.isArray(ssrcGroup.ssrcs)) {\r\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return transform.write(session, opts);\r\n};\r\n\r\n/**\r\n * Rewrites the source information that we get from sdp-transform.\r\n * All the ssrc lines with different attributes that belong to the\r\n * same ssrc are grouped into a single soure object with multiple key value pairs.\r\n * @param {Object} media - media description to be modified.\r\n * @returns {void}\r\n */\r\nconst parse = function(sdp) {\r\n    const session = transform.parse(sdp);\r\n\r\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\r\n        session.media.forEach(mLine => {\r\n            // group sources attributes by ssrc\r\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\r\n                mLine.sources = [];\r\n                mLine.ssrcs.forEach(ssrc => {\r\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\r\n\r\n                    if (found > -1) {\r\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\r\n                    } else {\r\n                        const src = { id: ssrc.id };\r\n\r\n                        src[ssrc.attribute] = ssrc.value;\r\n                        mLine.sources.push(src);\r\n                    }\r\n                });\r\n                delete mLine.ssrcs;\r\n            }\r\n\r\n            // split ssrcs in ssrc groups\r\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\r\n                mLine.ssrcGroups.forEach(ssrcGroup => {\r\n                    if (typeof ssrcGroup.ssrcs === 'string') {\r\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return session;\r\n};\r\n\r\nexport default {\r\n    write,\r\n    parse\r\n};\r\n","/* Copyright @ 2015 - Present, 8x8 Inc\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport clonedeep from 'lodash.clonedeep';\r\nimport transform from './transform.js';\r\n\r\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\r\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\r\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\r\n\r\n/**\r\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\r\n * to the m-line.\r\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\r\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\r\n * the m-line.\r\n * @param {Object} sourceGroups - inverted source-group map.\r\n * @param {Array<Object>} sourceList - array containing all the sources.\r\n */\r\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\r\n    if (!mLine || !simGroup) {\r\n        return;\r\n    }\r\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\r\n\r\n    simGroup.ssrcs.forEach(src => {\r\n        mLine.sources.push(findSourcebyId(src));\r\n\r\n        // find the related FID group member for this ssrc.\r\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\r\n\r\n        if (relatedFidGroup) {\r\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\r\n\r\n            mLine.sources.push(findSourcebyId(relatedSsrc));\r\n            mLine.ssrcGroups.push(relatedFidGroup);\r\n        }\r\n    });\r\n\r\n    // Add the SIM group last.\r\n    mLine.ssrcGroups.push(simGroup);\r\n}\r\n\r\n/**\r\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\r\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\r\n * group and the other ssrcs from the related FID groups are added to the same\r\n * m-line since they all belong to the same remote source. Since the ssrcs are\r\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\r\n * if not, just add the FID group.\r\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\r\n * @param {Object} ssrc - the primary ssrc.\r\n * @param {Object} sourceGroups - inverted source-group map.\r\n * @param {Array<Object>} sourceList - array containing all the sources.\r\n * @returns {void}\r\n */\r\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\r\n    if (!mLine || !ssrc) {\r\n        return;\r\n    }\r\n    mLine.sources = [];\r\n    mLine.ssrcGroups = [];\r\n\r\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\r\n    if (!sourceGroups[ssrc.id]) {\r\n        mLine.sources.push(ssrc);\r\n        mLine.msid = ssrc.msid;\r\n\r\n        return;\r\n    }\r\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\r\n\r\n    // Find the SIM and FID groups that this ssrc belongs to.\r\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\r\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\r\n\r\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\r\n    if (simGroup) {\r\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\r\n    } else if (fidGroup) {\r\n        // check if the other ssrc from this FID group is part of a SIM group\r\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\r\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\r\n\r\n        if (simGroup2) {\r\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\r\n        } else {\r\n            // Add the FID group ssrcs.\r\n            fidGroup.ssrcs.forEach(src => {\r\n                mLine.sources.push(findSourcebyId(src));\r\n            });\r\n            mLine.ssrcGroups.push(fidGroup);\r\n        }\r\n    }\r\n\r\n    // Set the msid for the media description using the msid attribute of the ssrcs.\r\n    mLine.msid = mLine.sources[0].msid;\r\n}\r\n\r\n/**\r\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\r\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\r\n * so we also check if mline for that ssrc exists.\r\n * For example:\r\n * If the following ssrcs are in a SIM group,\r\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\r\n *        <source ssrc=\\\"1806330949\\\"/>\r\n *        <source ssrc=\\\"4173145196\\\"/>\r\n *        <source ssrc=\\\"2002632207\\\"/>\r\n * </ssrc-group>\r\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\r\n * @param {Object} ssrc - ssrc to check.\r\n * @param {Object} sourceGroups - inverted source-group map.\r\n * @param {Array<Object>} mlines - mlines in the description\r\n\r\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\r\n * exists, returns false otherwise.\r\n */\r\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\r\n    const findMatchingMline = mline => {\r\n        if (mline.sources) {\r\n            return mline.sources.some(source => source.id === ssrc.id);\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    if (!mlines.find(findMatchingMline)) {\r\n        // check if this ssrc is member of a SIM group. If so, check if there\r\n        // is a matching m-line for the primary ssrc of the SIM group.\r\n        if (!sourceGroups[ssrc.id]) {\r\n            return false;\r\n        }\r\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\r\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\r\n\r\n        if (simGroup) {\r\n            return mlines.some(mline => mline.sources\r\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\r\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\r\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\r\n\r\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\r\n\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Create an inverted sourceGroup map to put all the grouped ssrcs\r\n * in the same m-line.\r\n * @param {Array<Object>} sourceGroups\r\n * @returns {Object} - An inverted sourceGroup map.\r\n */\r\nfunction createSourceGroupMap(sourceGroups) {\r\n    const ssrc2group = {};\r\n\r\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\r\n        return ssrc2group;\r\n    }\r\n    sourceGroups.forEach(group => {\r\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\r\n            group.ssrcs.forEach(ssrc => {\r\n                if (typeof ssrc2group[ssrc] === 'undefined') {\r\n                    ssrc2group[ssrc] = [];\r\n                }\r\n                ssrc2group[ssrc].push(group);\r\n            });\r\n        }\r\n    });\r\n\r\n    return ssrc2group;\r\n}\r\n\r\n/**\r\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\r\n * vice versa.\r\n */\r\nexport class Interop {\r\n    /**\r\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\r\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\r\n     * @returns RTCSessionDescription - The transformed session description.\r\n     */\r\n    toPlanB(description) {\r\n        if (!description || typeof description.sdp !== 'string') {\r\n            console.warn('An empty description was passed as an argument.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Objectify the SDP for easier manipulation.\r\n        const session = transform.parse(description.sdp);\r\n\r\n        // If the SDP contains no media, there's nothing to transform.\r\n        if (!session.media || !session.media.length) {\r\n            console.warn('The description has no media.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Make sure this is a unified plan sdp\r\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\r\n            console.warn('The description does not look like unified plan sdp');\r\n\r\n            return description;\r\n        }\r\n\r\n        const media = {};\r\n        const sessionMedia = session.media;\r\n\r\n        session.media = [];\r\n        sessionMedia.forEach(mLine => {\r\n            const type = mLine.type;\r\n\r\n            if (type === 'application') {\r\n                mLine.mid = 'data';\r\n                media[mLine.mid] = mLine;\r\n\r\n                return;\r\n            }\r\n            if (typeof media[type] === 'undefined') {\r\n                const bLine = clonedeep(mLine);\r\n\r\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\r\n                if (bLine.sources && Array.isArray(bLine.sources)) {\r\n                    bLine.sources.forEach(source => {\r\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\r\n                    });\r\n                }\r\n\r\n                // Do not signal the FID groups if there is no msid attribute present\r\n                // on the sources as sesison-accept with this source info will fail strophe\r\n                // validation and the session will not be established. This behavior is seen\r\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\r\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\r\n                // this case.\r\n                if (!bLine.ssrcGroups || !mLine.msid) {\r\n                    bLine.ssrcGroups = [];\r\n                }\r\n                delete bLine.msid;\r\n                bLine.mid = type;\r\n                media[type] = bLine;\r\n            } else if (mLine.msid) {\r\n                // Add sources and source-groups to the existing m-line of the same media type.\r\n                if (mLine.sources && Array.isArray(mLine.sources)) {\r\n                    media[type].sources = media[type].sources.concat(mLine.sources);\r\n                }\r\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\r\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\r\n                }\r\n            }\r\n        });\r\n        session.media = Object.values(media);\r\n\r\n        // Bundle the media only if it is active.\r\n        const bundle = [];\r\n\r\n        Object.values(media).forEach(mline => {\r\n            if (mline.direction !== 'inactive') {\r\n                bundle.push(mline.mid);\r\n            }\r\n        });\r\n\r\n        // We regenerate the BUNDLE group with the new mids.\r\n        session.groups.forEach(group => {\r\n            if (group.type === 'BUNDLE') {\r\n                group.mids = bundle.join(' ');\r\n            }\r\n        });\r\n\r\n        // msid semantic\r\n        session.msidSemantic = {\r\n            semantic: 'WMS',\r\n            token: '*'\r\n        };\r\n        const resStr = transform.write(session);\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: resStr\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\r\n     * @param {RTCSessionDescription} description - The description in plan-b format.\r\n     * @param {RTCSessionDescription} current - The current description set on\r\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\r\n     * remoteDescription on the RTCPeerConnection object.\r\n     * @returns RTCSessionDescription - The transformed session description.\r\n     */\r\n    toUnifiedPlan(description, current = null) {\r\n        if (!description || typeof description.sdp !== 'string') {\r\n            console.warn('An empty description was passed as an argument.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Objectify the SDP for easier manipulation.\r\n        const session = transform.parse(description.sdp);\r\n\r\n        // If the SDP contains no media, there's nothing to transform.\r\n        if (!session.media || !session.media.length) {\r\n            console.warn('The description has no media.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Make sure this is a plan-b sdp.\r\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\r\n            console.warn('The description does not look like plan-b');\r\n\r\n            return description;\r\n        }\r\n        const currentDesc = current ? transform.parse(current.sdp) : null;\r\n        const media = {};\r\n\r\n        session.media.forEach(mLine => {\r\n            const type = mLine.type;\r\n\r\n            if (type === 'application') {\r\n                if (!currentDesc || !currentDesc.media) {\r\n                    const newMline = clonedeep(mLine);\r\n\r\n                    newMline.mid = Object.keys(media).length.toString();\r\n                    media[mLine.mid] = newMline;\r\n\r\n                    return;\r\n                }\r\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\r\n\r\n                if (mLineForData) {\r\n                    currentDesc.media[mLineForData] = mLine;\r\n                    currentDesc.media[mLineForData].mid = mLineForData;\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\r\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\r\n\r\n            if (!mLine.sources) {\r\n                return;\r\n            }\r\n            mLine.sources.forEach((ssrc, idx) => {\r\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\r\n                // These ssrcs do not have the \"msid\" attribute set.\r\n                if (!ssrc.msid) {\r\n                    return;\r\n                }\r\n\r\n                // If there is no description set on the peerconnection, create new m-lines.\r\n                if (!currentDesc || !currentDesc.media) {\r\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\r\n                        return;\r\n                    }\r\n                    const newMline = clonedeep(mLine);\r\n\r\n                    newMline.mid = Object.keys(media).length.toString();\r\n                    newMline.direction = idx\r\n                        ? 'sendonly'\r\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\r\n                    newMline.bundleOnly = undefined;\r\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\r\n                    media[newMline.mid] = newMline;\r\n\r\n                    return;\r\n                }\r\n\r\n                // Create and append the m-lines to the existing description.\r\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\r\n                    return;\r\n                }\r\n\r\n                // check if there is a m-line that is inactive and is of the same media type\r\n                const inactiveMid = currentDesc.media\r\n                    .findIndex(cmLine => cmLine.direction\r\n                        && cmLine.direction === 'inactive'\r\n                        && cmLine.type === type);\r\n\r\n                if (inactiveMid > -1) {\r\n                    currentDesc.media[inactiveMid].direction = 'sendonly';\r\n                    addSourcesToMline(currentDesc.media[inactiveMid], ssrc, ssrc2group, mLine.sources);\r\n                } else {\r\n                    const newMline = clonedeep(mLine);\r\n\r\n                    newMline.mid = currentDesc.media.length.toString();\r\n                    newMline.direction = 'sendonly';\r\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\r\n                    currentDesc.media.push(newMline);\r\n                }\r\n            });\r\n        });\r\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\r\n        const mids = [];\r\n\r\n        session.media.forEach(mLine => {\r\n            mids.push(mLine.mid);\r\n        });\r\n\r\n        // We regenerate the BUNDLE group (since we regenerated the mids)\r\n        session.groups.forEach(group => {\r\n            if (group.type === 'BUNDLE') {\r\n                group.mids = mids.join(' ');\r\n            }\r\n        });\r\n\r\n        // msid semantic\r\n        session.msidSemantic = {\r\n            semantic: 'WMS',\r\n            token: '*'\r\n        };\r\n\r\n        // Increment the session version every time.\r\n        session.origin.sessionVersion++;\r\n        const resultSdp = transform.write(session);\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: resultSdp\r\n        });\r\n    }\r\n}\r\n","/**\r\n * Enumeration of the media direction types.\r\n */\r\n export const MediaDirection =  {\r\n    /**\r\n     * Media is send and receive is suspended.\r\n     */\r\n    INACTIVE : 'inactive',\r\n\r\n    /**\r\n     * Media is only received from remote peer.\r\n     */\r\n    RECVONLY : 'recvonly',\r\n\r\n    /**\r\n     * Media is only sent to the remote peer.\r\n     */\r\n    SENDONLY : 'sendonly',\r\n\r\n    /**\r\n     * Media is sent and received.\r\n     */\r\n    SENDRECV : 'sendrecv'\r\n};","import { MediaDirection } from '../../service/RTC/MediaDirection';\r\nimport { MediaType } from '../../service/RTC/MediaType';\r\n\r\nimport * as transform from 'sdp-transform';\r\n\r\nconst DEFAULT_NUM_OF_LAYERS = 3;\r\n\r\ninterface Description {\r\n    type: RTCSdpType;\r\n    sdp: string;\r\n}\r\n\r\ninterface Options {\r\n    numOfLayers?: number\r\n}\r\n\r\n/**\r\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\r\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\r\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\r\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\r\n * to a given endpoint.\r\n */\r\nexport default class SdpSimulcast {\r\n    _options: Options;\r\n    _ssrcCache: Map<string, Array<number>>;\r\n\r\n    /**\r\n     * Creates a new instance.\r\n     *\r\n     * @param options\r\n     */\r\n    constructor(options: Options) {\r\n        this._options = options;\r\n        this._ssrcCache = new Map();\r\n\r\n        if (!this._options.numOfLayers) {\r\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the given media description using the SSRCs that were cached for the mid associated\r\n     * with the media description and returns the modified media description.\r\n     *\r\n     * @param mLine\r\n     * @returns\r\n     */\r\n     _fillSsrcsFromCache(mLine) : any {\r\n        const mid = mLine.mid;\r\n        const cachedSsrcs = this._ssrcCache.get(mid);\r\n        const newSsrcs = this._parseSimLayers(mLine);\r\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\r\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\r\n\r\n        mLine.ssrcs = [];\r\n        mLine.ssrcGroups = [];\r\n\r\n        for (const ssrc of cachedSsrcs) {\r\n            mLine.ssrcs.push({\r\n                id: ssrc,\r\n                attribute: 'msid',\r\n                value: newMsid\r\n            });\r\n            mLine.ssrcs.push({\r\n                id: ssrc,\r\n                attribute: 'cname',\r\n                value: newCname\r\n            });\r\n        }\r\n\r\n        mLine.ssrcGroups.push({\r\n            semantics: 'SIM',\r\n            ssrcs: cachedSsrcs.join(' ')\r\n        });\r\n\r\n        return mLine;\r\n    }\r\n\r\n    /**\r\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\r\n     * the given media description and returns the modified media description.\r\n     *\r\n     * @param mLine\r\n     * @param primarySsrc\r\n     * @returns\r\n     */\r\n    _generateNewSsrcsForSimulcast(mLine, primarySsrc: number) : any {\r\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\r\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\r\n        const addAssociatedAttributes = (mLine, ssrc: number) => {\r\n            mLine.ssrcs.push({\r\n                id: ssrc,\r\n                attribute: 'cname',\r\n                value: cname\r\n            });\r\n            mLine.ssrcs.push({\r\n                id: ssrc,\r\n                attribute: 'msid',\r\n                value: msid\r\n            });\r\n        }\r\n\r\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\r\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\r\n        // a=ssrc lines using the msid values from the a=msid line.\r\n        if (!msid) {\r\n            msid = mLine.msid;\r\n            const primarySsrcs = mLine.ssrcs;\r\n\r\n            primarySsrcs.forEach(ssrc => {\r\n                mLine.ssrcs.push({\r\n                    id: ssrc.id,\r\n                    attribute: 'msid',\r\n                    value: msid\r\n                });\r\n            })\r\n        }\r\n\r\n        // Generate SIM layers.\r\n        const simSsrcs = [];\r\n\r\n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\r\n            const simSsrc = this._generateSsrc();\r\n\r\n            addAssociatedAttributes(mLine, simSsrc);\r\n            simSsrcs.push(simSsrc);\r\n        }\r\n\r\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\r\n        mLine.ssrcGroups.push({\r\n            semantics: 'SIM',\r\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\r\n        });\r\n\r\n        return mLine;\r\n    }\r\n\r\n    /**\r\n     * Returns a random number to be used for the SSRC.\r\n     *\r\n     * @returns\r\n     */\r\n    _generateSsrc() : number {\r\n        const max = 0xffffffff;\r\n\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n\r\n    /**\r\n     * Returns the requested attribute value for a SSRC from a given media description.\r\n     *\r\n     * @param mLine\r\n     * @param ssrc\r\n     * @param attributeName\r\n     * @returns\r\n     */\r\n    _getSsrcAttribute(mLine, ssrc: number, attributeName: string) : string | undefined {\r\n        return mLine.ssrcs?.find(\r\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\r\n            && ssrcInfo.attribute === attributeName)?.value;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\r\n     *\r\n     * @param mLine\r\n     * @returns\r\n     */\r\n    _parseSimLayers(mLine) : Array<number> | null {\r\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\r\n\r\n        if (simGroup) {\r\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\r\n        }\r\n\r\n        if (mLine.ssrcs?.length) {\r\n            return [ Number(mLine.ssrcs[0].id) ];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\r\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\r\n     * endpoints.\r\n     * NOTE: This needs to be called only when simulcast is enabled.\r\n     *\r\n     * @param description\r\n     * @returns\r\n     */\r\n    mungeLocalDescription(description: Description) : Description {\r\n        if (!description || !description.sdp) {\r\n            return description;\r\n        }\r\n        const session = transform.parse(description.sdp);\r\n\r\n        for (let media of session.media) {\r\n            // Ignore recvonly and inactive transceivers created for remote sources.\r\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\r\n                continue;\r\n            }\r\n\r\n            // Ignore audio m-lines.\r\n            if (media.type !== MediaType.VIDEO) {\r\n                continue;\r\n            }\r\n            const mid = media.mid;\r\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\r\n            const numGroups = media.ssrcGroups?.length ? media.ssrcGroups?.length : 0;\r\n            let primarySsrc: number;\r\n\r\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\r\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\r\n                continue;\r\n            }\r\n            if (numSsrcs.size === 1) {\r\n                primarySsrc = Number(media.ssrcs[0]?.id);\r\n            } else {\r\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\r\n\r\n                if (fidGroup) {\r\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\r\n                }\r\n            }\r\n\r\n            if (this._ssrcCache.has(mid)) {\r\n                media = this._fillSsrcsFromCache(media);\r\n            } else {\r\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\r\n                const simulcastSsrcs = this._parseSimLayers(media);\r\n\r\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\r\n                this._ssrcCache.set(mid, simulcastSsrcs);\r\n            }\r\n        }\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: transform.write(session)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Munges the given media description by removing the SSRCs and related FID groups for the higher layer streams.\r\n     *\r\n     * @param description\r\n     * @returns\r\n     */\r\n    mungeRemoteDescription(description: Description) : Description {\r\n        if (!description || !description.sdp) {\r\n            return description;\r\n        }\r\n\r\n        const session = transform.parse(description.sdp);\r\n\r\n        for (const media of session.media) {\r\n            if (media.type !== MediaType.VIDEO) {\r\n                continue;\r\n            }\r\n\r\n            if (media.direction !== MediaDirection.SENDONLY) {\r\n                continue;\r\n            }\r\n\r\n            // Ignore m-lines that do not have any SSRCs or SSRC groups. These are the ones associated with remote\r\n            // sources that have left the call. These will be recycled when a new remote source joins the call.\r\n            if (!media.ssrcGroups?.length || !media?.ssrcs.length) {\r\n                continue;\r\n            }\r\n\r\n            // Cache the SSRCs and the source groups.\r\n            const mungedSsrcs = new Set(media.ssrcs.slice());\r\n            const mungedSsrcGroups = new Set(media.ssrcGroups.slice());\r\n            const fidGroups = media.ssrcGroups.filter(group => group.semantics === 'FID');\r\n            const simGroup = media.ssrcGroups.find(group => group.semantics === 'SIM');\r\n            const primarySsrc = simGroup?.ssrcs.split(' ')[0];;\r\n\r\n            // When simulcast and RTX are both enabled.\r\n            if (fidGroups.length && simGroup) {\r\n                const fidGroup = fidGroups.find(group => group.ssrcs.includes(primarySsrc));\r\n                const secondarySsrc = fidGroup.ssrcs.split(' ')[1];\r\n\r\n                for (const ssrcGroup of media.ssrcGroups) {\r\n                    if (ssrcGroup !== fidGroup) {\r\n                        mungedSsrcGroups.delete(ssrcGroup);\r\n                    }\r\n                }\r\n                for (const ssrc of media.ssrcs) {\r\n                    if (ssrc.id.toString() !== primarySsrc\r\n                        && ssrc.id.toString() !== secondarySsrc) {\r\n                        mungedSsrcs.delete(ssrc);\r\n                    }\r\n                }\r\n\r\n            // When simulcast is enabled but RTX is disabled.\r\n            } else if (simGroup) {\r\n                mungedSsrcGroups.delete(simGroup);\r\n\r\n                for (const ssrc of media.ssrcs) {\r\n                    if (ssrc.id.toString() !== primarySsrc) {\r\n                        mungedSsrcs.delete(ssrc);\r\n                    }\r\n                }\r\n            }\r\n\r\n            media.ssrcs = Array.from(mungedSsrcs);\r\n            media.ssrcGroups = Array.from(mungedSsrcGroups);\r\n        }\r\n\r\n        return new RTCSessionDescription ({\r\n            type: description.type,\r\n            sdp: transform.write(session)\r\n        });\r\n    }\r\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\r\n// require the crypto API and do not support built-in fallback to lower quality random number\r\n// generators (like Math.random()).\r\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\r\n// find the complete implementation of crypto (msCrypto) on IE11.\r\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\r\nvar rnds8 = new Uint8Array(16);\r\nexport default function rng() {\r\n  if (!getRandomValues) {\r\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\r\n  }\r\n\r\n  return getRandomValues(rnds8);\r\n}","/**\r\n * Convert array of 16 byte values to UUID string format of the form:\r\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\r\n */\r\nvar byteToHex = [];\r\n\r\nfor (var i = 0; i < 256; ++i) {\r\n  byteToHex.push((i + 0x100).toString(16).substr(1));\r\n}\r\n\r\nfunction bytesToUuid(buf, offset) {\r\n  var i = offset || 0;\r\n  var bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\r\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\r\n\r\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\r\n}\r\n\r\nexport default bytesToUuid;","import rng from './rng.js';\r\nimport bytesToUuid from './bytesToUuid.js';\r\n\r\nfunction v4(options, buf, offset) {\r\n  if (typeof options === 'string') {\r\n    buf = options === 'binary' ? new Uint8Array(16) : null;\r\n    options = null;\r\n  }\r\n\r\n  options = options || {};\r\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\r\n\r\n  rnds[6] = rnds[6] & 0x0f | 0x40;\r\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\r\n\r\n  if (buf) {\r\n    var start = offset || 0;\r\n\r\n    for (var i = 0; i < 16; ++i) {\r\n      buf[start + i] = rnds[i];\r\n    }\r\n\r\n    return buf;\r\n  }\r\n\r\n  return bytesToUuid(rnds);\r\n}\r\n\r\nexport default v4;","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\r\n// library (a.k.a. JitsiMeetJS).\r\nmodule.exports = require('./JitsiMeetJS').default;\r\n","/* global __filename */\r\n\r\nimport Logger from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport JitsiConnection from './JitsiConnection';\r\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\r\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\r\nimport JitsiMediaDevices from './JitsiMediaDevices';\r\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\r\nimport JitsiTrackError from './JitsiTrackError';\r\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\r\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\r\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\r\nimport { ParticipantConnectionStatus }\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\r\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\r\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\r\nimport ProxyConnectionService\r\n    from './modules/proxyconnection/ProxyConnectionService';\r\nimport recordingConstants from './modules/recording/recordingConstants';\r\nimport Settings from './modules/settings/Settings';\r\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\r\nimport precallTest from './modules/statistics/PrecallTest';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport AuthUtil from './modules/util/AuthUtil';\r\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\r\nimport ScriptUtil from './modules/util/ScriptUtil';\r\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\r\nimport AudioMixer from './modules/webaudio/AudioMixer';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport Resolutions from './service/RTC/Resolutions';\r\nimport * as ConnectionQualityEvents\r\n    from './service/connectivity/ConnectionQualityEvents';\r\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\r\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\r\n\r\nconst logger = Logger.getLogger(__filename);\r\n\r\n/**\r\n * The amount of time to wait until firing\r\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\r\n */\r\nconst USER_MEDIA_PERMISSION_PROMPT_TIMEOUT = 1000;\r\n\r\n/**\r\n * Gets the next lowest desirable resolution to try for a camera. If the given\r\n * resolution is already the lowest acceptable resolution, returns {@code null}.\r\n *\r\n * @param resolution the current resolution\r\n * @return the next lowest resolution from the given one, or {@code null} if it\r\n * is already the lowest acceptable resolution.\r\n */\r\nfunction getLowerResolution(resolution) {\r\n    if (!Resolutions[resolution]) {\r\n        return null;\r\n    }\r\n    const order = Resolutions[resolution].order;\r\n    let res = null;\r\n    let resName = null;\r\n\r\n    Object.keys(Resolutions).forEach(r => {\r\n        const value = Resolutions[r];\r\n\r\n        if (!res || (res.order < value.order && value.order < order)) {\r\n            resName = r;\r\n            res = value;\r\n        }\r\n    });\r\n\r\n    if (resName === resolution) {\r\n        resName = null;\r\n    }\r\n\r\n    return resName;\r\n}\r\n\r\n/**\r\n * Extracts from an 'options' objects with a specific format (TODO what IS the\r\n * format?) the attributes which are to be logged in analytics events.\r\n *\r\n * @param options gum options (???)\r\n * @returns {*} the attributes to attach to analytics events.\r\n */\r\nfunction getAnalyticsAttributesFromOptions(options) {\r\n    const attributes = {\r\n        'audio_requested':\r\n            options.devices.includes('audio'),\r\n        'video_requested':\r\n            options.devices.includes('video'),\r\n        'screen_sharing_requested':\r\n            options.devices.includes('desktop')\r\n    };\r\n\r\n    if (attributes.video_requested) {\r\n        attributes.resolution = options.resolution;\r\n    }\r\n\r\n    return attributes;\r\n}\r\n\r\n/**\r\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\r\n * this module, it's also a global (i.e. attached to {@code window}) namespace\r\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\r\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\r\n * automatically be attached to {@code window} by webpack. Unfortunately,\r\n * webpack's source code does not check whether the global variable has already\r\n * been assigned and overwrites it. Which is OK for the module\r\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\r\n * because it may already contain the values of other projects in the Jitsi Meet\r\n * family. The solution offered here works around webpack by merging all\r\n * existing values of the namespace {@code JitsiMeetJS} into the module\r\n * {@code JitsiMeetJS}.\r\n *\r\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\r\n * exported and may be attached to {@code window} by webpack later on).\r\n * @private\r\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\r\n * value of the namespace {@code JitsiMeetJS} (if any).\r\n */\r\nfunction _mergeNamespaceAndModule(module) {\r\n    return (\r\n        typeof window.JitsiMeetJS === 'object'\r\n            ? Object.assign({}, window.JitsiMeetJS, module)\r\n            : module);\r\n}\r\n\r\n/**\r\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\r\n */\r\nexport default _mergeNamespaceAndModule({\r\n\r\n    version: '{#COMMIT_HASH#}',\r\n\r\n    JitsiConnection,\r\n\r\n    /**\r\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\r\n     * local Jitsi participant without going through a Jitsi conference. It is\r\n     * currently used for room integration development, specifically wireless\r\n     * screensharing. Its API is experimental and will likely change; usage of\r\n     * it is advised against.\r\n     */\r\n    ProxyConnectionService,\r\n\r\n    constants: {\r\n        participantConnectionStatus: ParticipantConnectionStatus,\r\n        recording: recordingConstants,\r\n        sipVideoGW: VideoSIPGWConstants,\r\n        transcriptionStatus: JitsiTranscriptionStatus\r\n    },\r\n    events: {\r\n        conference: JitsiConferenceEvents,\r\n        connection: JitsiConnectionEvents,\r\n        detection: DetectionEvents,\r\n        track: JitsiTrackEvents,\r\n        mediaDevices: JitsiMediaDevicesEvents,\r\n        connectionQuality: ConnectionQualityEvents,\r\n        e2eping: E2ePingEvents\r\n    },\r\n    errors: {\r\n        conference: JitsiConferenceErrors,\r\n        connection: JitsiConnectionErrors,\r\n        track: JitsiTrackErrors\r\n    },\r\n    errorTypes: {\r\n        JitsiTrackError\r\n    },\r\n    logLevels: Logger.levels,\r\n    mediaDevices: JitsiMediaDevices,\r\n    analytics: Statistics.analytics,\r\n    init(options = {}) {\r\n        Settings.init(options.externalStorage);\r\n        Statistics.init(options);\r\n\r\n        // Initialize global window.connectionTimes\r\n        // FIXME do not use 'window'\r\n        if (!window.connectionTimes) {\r\n            window.connectionTimes = {};\r\n        }\r\n\r\n        if (options.enableAnalyticsLogging !== true) {\r\n            logger.warn('Analytics disabled, disposing.');\r\n            this.analytics.dispose();\r\n        }\r\n\r\n        if (options.enableWindowOnErrorHandler) {\r\n            GlobalOnErrorHandler.addHandler(\r\n                this.getGlobalOnErrorHandler.bind(this));\r\n        }\r\n\r\n        // Log deployment-specific information, if available. Defined outside\r\n        // the application by individual deployments\r\n        const aprops = options.deploymentInfo;\r\n\r\n        if (aprops && Object.keys(aprops).length > 0) {\r\n            const logObject = {};\r\n\r\n            for (const attr in aprops) {\r\n                if (aprops.hasOwnProperty(attr)) {\r\n                    logObject[attr] = aprops[attr];\r\n                }\r\n            }\r\n\r\n            logObject.id = 'deployment_info';\r\n            Statistics.sendLog(JSON.stringify(logObject));\r\n        }\r\n\r\n        if (this.version) {\r\n            const logObject = {\r\n                id: 'component_version',\r\n                component: 'lib-jitsi-meet',\r\n                version: this.version\r\n            };\r\n\r\n            Statistics.sendLog(JSON.stringify(logObject));\r\n        }\r\n\r\n        return RTC.init(options);\r\n    },\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isDesktopSharingEnabled() {\r\n        return RTC.isDesktopSharingEnabled();\r\n    },\r\n\r\n    /**\r\n     * Returns whether the current execution environment supports WebRTC (for\r\n     * use within this library).\r\n     *\r\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\r\n     * execution environment (for use within this library); {@code false},\r\n     * otherwise.\r\n     */\r\n    isWebRtcSupported() {\r\n        return RTC.isWebRtcSupported();\r\n    },\r\n\r\n    setLogLevel(level) {\r\n        Logger.setLogLevel(level);\r\n    },\r\n\r\n    /**\r\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\r\n     *\r\n     * @param {Logger.levels} level the logging level to be set\r\n     * @param {string} id the logger id to which new logging level will be set.\r\n     * Usually it's the name of the JavaScript source file including the path\r\n     * ex. \"modules/xmpp/ChatRoom.js\"\r\n     */\r\n    setLogLevelById(level, id) {\r\n        Logger.setLogLevelById(level, id);\r\n    },\r\n\r\n    /**\r\n     * Registers new global logger transport to the library logging framework.\r\n     *\r\n     * @param globalTransport\r\n     * @see Logger.addGlobalTransport\r\n     */\r\n    addGlobalLogTransport(globalTransport) {\r\n        Logger.addGlobalTransport(globalTransport);\r\n    },\r\n\r\n    /**\r\n     * Removes global logging transport from the library logging framework.\r\n     *\r\n     * @param globalTransport\r\n     * @see Logger.removeGlobalTransport\r\n     */\r\n    removeGlobalLogTransport(globalTransport) {\r\n        Logger.removeGlobalTransport(globalTransport);\r\n    },\r\n\r\n    /**\r\n    * Sets global options which will be used by all loggers. Changing these\r\n    * works even after other loggers are created.\r\n    *\r\n    * @param options\r\n    * @see Logger.setGlobalOptions\r\n    */\r\n    setGlobalLogOptions(options) {\r\n        Logger.setGlobalOptions(options);\r\n    },\r\n\r\n    /**\r\n     * Creates the media tracks and returns them trough the callback.\r\n     *\r\n     * @param options Object with properties / settings specifying the tracks\r\n     * which should be created. should be created or some additional\r\n     * configurations about resolution for example.\r\n     * @param {Array} options.effects optional effects array for the track\r\n     * @param {Array} options.devices the devices that will be requested\r\n     * @param {string} options.resolution resolution constraints\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @param {intiger} interval - the interval (in ms) for\r\n     * checking whether the desktop sharing extension is installed or not\r\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\r\n     * createLocalTracks will wait and check on every \"interval\" ms for the\r\n     * extension. If the desktop extension is not install and checkAgain()==true\r\n     * createLocalTracks will finish with rejected Promise.\r\n     * @param {Function} listener - The listener will be called to notify the\r\n     * user of lib-jitsi-meet that createLocalTracks is starting external\r\n     * extension installation process.\r\n     * NOTE: If the inline installation process is not possible and external\r\n     * installation is enabled the listener property will be called to notify\r\n     * the start of external installation process. After that createLocalTracks\r\n     * will start to check for the extension on every interval ms until the\r\n     * plugin is installed or until checkAgain return false. If the extension\r\n     * is found createLocalTracks will try to get the desktop sharing track and\r\n     * will finish the execution. If checkAgain returns false, createLocalTracks\r\n     * will finish the execution with rejected Promise.\r\n     *\r\n     * @param {boolean} (firePermissionPromptIsShownEvent) - if event\r\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\r\n     * @param originalOptions - internal use only, to be able to store the\r\n     * originally requested options.\r\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\r\n     * that returns an array of created JitsiTracks if resolved, or a\r\n     * JitsiConferenceError if rejected.\r\n     */\r\n    createLocalTracks(\r\n            options = {}, firePermissionPromptIsShownEvent, originalOptions) {\r\n        let promiseFulfilled = false;\r\n\r\n        if (firePermissionPromptIsShownEvent === true) {\r\n            window.setTimeout(() => {\r\n                if (!promiseFulfilled) {\r\n                    JitsiMediaDevices.emitEvent(\r\n                        JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\r\n                        browser.getName());\r\n                }\r\n            }, USER_MEDIA_PERMISSION_PROMPT_TIMEOUT);\r\n        }\r\n\r\n        if (!window.connectionTimes) {\r\n            window.connectionTimes = {};\r\n        }\r\n        window.connectionTimes['obtainPermissions.start']\r\n            = window.performance.now();\r\n\r\n        return RTC.obtainAudioAndVideoPermissions(options)\r\n            .then(tracks => {\r\n                promiseFulfilled = true;\r\n\r\n                window.connectionTimes['obtainPermissions.end']\r\n                    = window.performance.now();\r\n\r\n                Statistics.sendAnalytics(\r\n                    createGetUserMediaEvent(\r\n                        'success',\r\n                        getAnalyticsAttributesFromOptions(options)));\r\n\r\n                if (!RTC.options.disableAudioLevels) {\r\n                    for (let i = 0; i < tracks.length; i++) {\r\n                        const track = tracks[i];\r\n                        const mStream = track.getOriginalStream();\r\n\r\n                        if (track.getType() === MediaType.AUDIO) {\r\n                            Statistics.startLocalStats(mStream,\r\n                                track.setAudioLevel.bind(track));\r\n                            track.addEventListener(\r\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\r\n                                () => {\r\n                                    Statistics.stopLocalStats(mStream);\r\n                                });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // set real device ids\r\n                const currentlyAvailableMediaDevices\r\n                    = RTC.getCurrentlyAvailableMediaDevices();\r\n\r\n                if (currentlyAvailableMediaDevices) {\r\n                    for (let i = 0; i < tracks.length; i++) {\r\n                        const track = tracks[i];\r\n\r\n                        track._setRealDeviceIdFromDeviceList(\r\n                            currentlyAvailableMediaDevices);\r\n                    }\r\n                }\r\n\r\n                // set the contentHint to \"detail\" for desktop tracks\r\n                // eslint-disable-next-line prefer-const\r\n                for (const track of tracks) {\r\n                    if (track.type === MediaType.VIDEO\r\n                        && track.videoType === 'desktop') {\r\n                        this.setVideoTrackContentHints(track.track, 'detail');\r\n                    }\r\n                }\r\n\r\n                return tracks;\r\n            })\r\n            .catch(error => {\r\n                promiseFulfilled = true;\r\n\r\n                if (error.name === JitsiTrackErrors.UNSUPPORTED_RESOLUTION\r\n                    && !browser.usesNewGumFlow()) {\r\n                    const oldResolution = options.resolution || '720';\r\n                    const newResolution = getLowerResolution(oldResolution);\r\n\r\n                    if (newResolution !== null) {\r\n                        options.resolution = newResolution;\r\n\r\n                        logger.debug(\r\n                            'Retry createLocalTracks with resolution',\r\n                            newResolution);\r\n\r\n                        Statistics.sendAnalytics(createGetUserMediaEvent(\r\n                            'warning',\r\n                            {\r\n                                'old_resolution': oldResolution,\r\n                                'new_resolution': newResolution,\r\n                                reason: 'unsupported resolution'\r\n                            }));\r\n\r\n                        return this.createLocalTracks(\r\n                            options,\r\n                            undefined,\r\n                            originalOptions || Object.assign({}, options));\r\n                    }\r\n\r\n                    // We tried everything. If there is a mandatory device id,\r\n                    // remove it and let gum find a device to use.\r\n                    if (originalOptions\r\n                        && error.gum.constraints\r\n                        && error.gum.constraints.video\r\n                        && error.gum.constraints.video.mandatory\r\n                        && error.gum.constraints.video.mandatory.sourceId) {\r\n                        originalOptions.cameraDeviceId = undefined;\r\n\r\n                        return this.createLocalTracks(originalOptions);\r\n                    }\r\n                }\r\n\r\n                if (error.name\r\n                        === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\r\n                    // User cancelled action is not really an error, so only\r\n                    // log it as an event to avoid having conference classified\r\n                    // as partially failed\r\n                    const logObject = {\r\n                        id: 'screensharing_user_canceled',\r\n                        message: error.message\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent(\r\n                            'warning',\r\n                            {\r\n                                reason: 'extension install user canceled'\r\n                            }));\r\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\r\n                    // logs not found devices with just application log to cs\r\n                    const logObject = {\r\n                        id: 'usermedia_missing_device',\r\n                        status: error.gum.devices\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n\r\n                    const attributes\r\n                        = getAnalyticsAttributesFromOptions(options);\r\n\r\n                    attributes.reason = 'device not found';\r\n                    attributes.devices = error.gum.devices.join('.');\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent('error', attributes));\r\n                } else {\r\n                    // Report gUM failed to the stats\r\n                    Statistics.sendGetUserMediaFailed(error);\r\n\r\n                    const attributes\r\n                        = getAnalyticsAttributesFromOptions(options);\r\n\r\n                    attributes.reason = error.name;\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent('error', attributes));\r\n                }\r\n\r\n                window.connectionTimes['obtainPermissions.end']\r\n                    = window.performance.now();\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    },\r\n\r\n    /**\r\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\r\n     * order to obtain VAD scores for individual PCM audio samples.\r\n     * @param {string} localAudioDeviceId - The target local audio device.\r\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\r\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\r\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\r\n     * longer calls, lowers values mean more calls but shorter.\r\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\r\n     * to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * i.e. (16KHz, 44.1 KHz etc.)\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @returns {Promise<TrackVADEmitter>}\r\n     */\r\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\r\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\r\n    },\r\n\r\n    /**\r\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\r\n     * user to mix multiple MediaStreams into a single one.\r\n     *\r\n     * @returns {AudioMixer}\r\n     */\r\n    createAudioMixer() {\r\n        return new AudioMixer();\r\n    },\r\n\r\n    /**\r\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\r\n     *\r\n     * @returns Promise<Object> - Object containing information about the found device.\r\n     */\r\n    getActiveAudioDevice() {\r\n        return getActiveAudioDevice();\r\n    },\r\n\r\n    /**\r\n     * Checks if its possible to enumerate available cameras/microphones.\r\n     *\r\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\r\n     * the WebRTC stack is ready, either with true if the device listing is\r\n     * available available or with false otherwise.\r\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\r\n     */\r\n    isDeviceListAvailable() {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\r\n\r\n        return this.mediaDevices.isDeviceListAvailable();\r\n    },\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     *\r\n     * @param {string} [deviceType] - type of device to change. Default is\r\n     * {@code undefined} or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\r\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\r\n\r\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\r\n    },\r\n\r\n\r\n    /**\r\n     * Checks if the current environment supports having multiple audio\r\n     * input devices in use simultaneously.\r\n     *\r\n     * @returns {boolean} True if multiple audio input devices can be used.\r\n     */\r\n    isMultipleAudioInputSupported() {\r\n        return this.mediaDevices.isMultipleAudioInputSupported();\r\n    },\r\n\r\n    /**\r\n     * Checks if local tracks can collect stats and collection is enabled.\r\n     *\r\n     * @param {boolean} True if stats are being collected for local tracks.\r\n     */\r\n    isCollectingLocalStats() {\r\n        return Statistics.audioLevelsEnabled\r\n            && LocalStatsCollector.isLocalStatsSupported();\r\n    },\r\n\r\n    /**\r\n     * Executes callback with list of media devices connected.\r\n     *\r\n     * @param {function} callback\r\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\r\n     */\r\n    enumerateDevices(callback) {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\r\n        this.mediaDevices.enumerateDevices(callback);\r\n    },\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * @returns function that can be used to be attached to window.onerror and\r\n     * if options.enableWindowOnErrorHandler is enabled returns\r\n     * the function used by the lib.\r\n     * (function(message, source, lineno, colno, error)).\r\n     */\r\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\r\n        logger.error(\r\n            `UnhandledError: ${message}`,\r\n            `Script: ${source}`,\r\n            `Line: ${lineno}`,\r\n            `Column: ${colno}`,\r\n            'StackTrace: ', error);\r\n        Statistics.reportGlobalError(error);\r\n    },\r\n\r\n    /**\r\n     * Informs lib-jitsi-meet about the current network status.\r\n     *\r\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\r\n     * otherwise.\r\n     */\r\n    setNetworkInfo({ isOnline }) {\r\n        NetworkInfo.updateNetworkInfo({ isOnline });\r\n    },\r\n\r\n    /**\r\n     * Set the contentHint on the transmitted stream track to indicate\r\n     * charaterstics in the video stream, which informs PeerConnection\r\n     * on how to encode the track (to prefer motion or individual frame detail)\r\n     * @param {MediaStreamTrack} track - the track that is transmitted\r\n     * @param {String} hint - contentHint value that needs to be set on the track\r\n     */\r\n    setVideoTrackContentHints(track, hint) {\r\n        if ('contentHint' in track) {\r\n            track.contentHint = hint;\r\n            if (track.contentHint !== hint) {\r\n                logger.debug('Invalid video track contentHint');\r\n            }\r\n        } else {\r\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\r\n        }\r\n    },\r\n\r\n    precallTest,\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Represents a hub/namespace for utility functionality which may be of\r\n     * interest to lib-jitsi-meet clients.\r\n     */\r\n    util: {\r\n        AuthUtil,\r\n        ScriptUtil,\r\n        browser\r\n    }\r\n});\r\n","/* Copyright @ 2016-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Logger = require('./Logger.js');\r\n\r\n/**\r\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\r\n * and thus can be added as global transport in order to capture all the logs.\r\n *\r\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\r\n * a message and stores them in a queue in order to batch log entries. There are\r\n * time and size limit constraints which determine how often batch entries are\r\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\r\n * will use the <tt>logStorage</tt> object given as an argument to save\r\n * the batch log entry.\r\n *\r\n * @param {Object} logStorage an object which allows to store the logs collected\r\n * @param {function(string|object[])} logStorage.storeLogs a method called when\r\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\r\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\r\n * item is an object it means that it's an aggregated message. That is a message\r\n * which is the same as the previous one and it's representation has\r\n * the following format:\r\n * {\r\n *   {string} text: 'the text of some duplicated message'\r\n *   {number} count: 3 // how many times the message appeared in a row\r\n * }\r\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\r\n * the sequence of \"A\". Which means that even if the next message \"C\" is\r\n * the same as \"A\" it will start a new aggregated message \"C\".\r\n * @param {function()} logStorage.isReady a method which should return\r\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\r\n * time storage is not ready log batches will be cached and stored on the next\r\n * occasion (flush or interval timeout).\r\n *\r\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\r\n * @param {number} options.maxEntryLength the size limit for a single log entry\r\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\r\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\r\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\r\n * storage becomes ready. Note that the \"is ready\" condition is checked every\r\n * <tt>options.storeInterval</tt> milliseconds.\r\n * @param {number} options.storeInterval how often the logs should be stored in\r\n * case <tt>maxEntryLength</tt> was not exceeded.\r\n * @param {boolean} options.stringifyObjects indicates whether or not object\r\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\r\n * message is composed. Note that objects logged on the error log level are\r\n * always stringified.\r\n *\r\n * @constructor\r\n */\r\nfunction LogCollector(logStorage, options) {\r\n    this.logStorage = logStorage;\r\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\r\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\r\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\r\n    // Bind the log method for each level to the corresponding method name\r\n    // in order to implement \"global log transport\" object.\r\n    Object.keys(Logger.levels).forEach(\r\n    function (logLevel) {\r\n        var methodName = Logger.levels[logLevel];\r\n        this[methodName] = function () {\r\n            this._log.apply(this, arguments);\r\n        }.bind(this, logLevel);\r\n    }.bind(this));\r\n    /**\r\n     * The ID of store logs interval if one is currently scheduled or\r\n     * <tt>null</tt> otherwise.\r\n     * @type {number|null}\r\n     */\r\n    this.storeLogsIntervalID = null;\r\n    /**\r\n     * The log messages that are to be batched into log entry when\r\n     * {@link LogCollector._flush} method is called.\r\n     * @type {string[]}\r\n     */\r\n    this.queue = [];\r\n    /**\r\n     * The total length of all messages currently stored in the {@link queue}.\r\n     * @type {number}\r\n     */\r\n    this.totalLen = 0;\r\n    /**\r\n     * An array used to temporarily store log batches, before the storage gets\r\n     * ready.\r\n     * @type {string[]}\r\n     */\r\n    this.outputCache = [];\r\n}\r\n\r\n/**\r\n * Method called inside of {@link formatLogMessage} in order to covert an\r\n * <tt>Object</tt> argument to string. The conversion will happen when either\r\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\r\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\r\n * returns \"[object with circular refs?]\" instead of an object if it fails.\r\n *\r\n * @param {object} someObject the <tt>object</tt> to be stringified.\r\n *\r\n * @return {string} the result of <tt>JSON.stringify</tt> or\r\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\r\n *\r\n * @protected\r\n */\r\nLogCollector.prototype.stringify = function (someObject) {\r\n    try {\r\n        return JSON.stringify(someObject);\r\n    } catch (error) {\r\n        return '[object with circular refs?]';\r\n    }\r\n};\r\n\r\n/**\r\n * Formats log entry for the given logging level and arguments passed to the\r\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\r\n * arguments have to be captured using JS built-in 'arguments' variable.\r\n *\r\n * @param {Logger.levels} logLevel provides the logging level of the message to\r\n * be logged.\r\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\r\n *\r\n * @return {string|null} a non-empty string representation of the log entry\r\n * crafted from the log arguments. If the return value is <tt>null</tt> then\r\n * the message wil be discarded by this <tt>LogCollector</tt>.\r\n *\r\n * @protected\r\n */\r\nLogCollector.prototype.formatLogMessage = function (\r\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\r\n    var msg = '';\r\n    for (var i = 1, len = arguments.length; i < len; i++) {\r\n        var arg = arguments[i];\r\n        // objects logged on error level are always converted to JSON\r\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\r\n            typeof arg === 'object') {\r\n            arg = this.stringify(arg);\r\n        }\r\n        msg += arg;\r\n        if (i !== len - 1) {\r\n            msg += ' ';\r\n        }\r\n    }\r\n    return msg.length ? msg : null;\r\n};\r\n\r\n/**\r\n * The log method bound to each of the logging levels in order to implement\r\n * \"global log transport\" object.\r\n *\r\n * @private\r\n */\r\nLogCollector.prototype._log = function() {\r\n\r\n    // var logLevel = arguments[0]; first argument is the log level\r\n    var timestamp = arguments[1];\r\n    var msg = this.formatLogMessage.apply(this, arguments);\r\n    if (msg) {\r\n        // The same as the previous message aggregation logic\r\n        var prevMessage = this.queue[this.queue.length - 1];\r\n        var prevMessageText = prevMessage && prevMessage.text;\r\n        if (prevMessageText === msg) {\r\n            prevMessage.count += 1;\r\n        } else {\r\n            this.queue.push({\r\n                text: msg,\r\n                timestamp: timestamp,\r\n                count: 1\r\n            });\r\n            this.totalLen += msg.length;\r\n        }\r\n    }\r\n\r\n    if (this.totalLen >= this.maxEntryLength) {\r\n        this._flush(true /* force */, true /* reschedule */);\r\n    }\r\n};\r\n\r\n/**\r\n * Starts periodical \"store logs\" task which will be triggered at the interval\r\n * specified in the constructor options.\r\n */\r\nLogCollector.prototype.start = function () {\r\n    this._reschedulePublishInterval();\r\n};\r\n\r\n/**\r\n * Reschedules the periodical \"store logs\" task which will store the next batch\r\n * log entry in the storage.\r\n * @private\r\n */\r\nLogCollector.prototype._reschedulePublishInterval = function () {\r\n    if (this.storeLogsIntervalID) {\r\n        window.clearTimeout(this.storeLogsIntervalID);\r\n        this.storeLogsIntervalID = null;\r\n    }\r\n    // It's actually a timeout, because it is rescheduled on every flush\r\n    this.storeLogsIntervalID = window.setTimeout(\r\n        this._flush.bind(\r\n            this, false /* do not force */, true /* reschedule */),\r\n        this.storeInterval);\r\n};\r\n\r\n/**\r\n * Call this method to flush the log entry buffer and store it in the log\r\n * storage immediately (given that the storage is ready).\r\n */\r\nLogCollector.prototype.flush = function() {\r\n    this._flush(\r\n        false /* do not force, as it will not be stored anyway */,\r\n        true /* reschedule next update */ );\r\n};\r\n\r\n/**\r\n * Stores the next batch log entry in the log storage.\r\n * @param {boolean} force enforce current logs batch to be stored or cached if\r\n * there is anything to be logged, but the storage is not ready yet. One of\r\n * legitimate reasons to force is when the logs length exceeds size limit which\r\n * could result in truncation.\r\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\r\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\r\n * task cycle.\r\n * @private\r\n */\r\nLogCollector.prototype._flush = function(force, reschedule) {\r\n    // Publish only if there's anything to be logged\r\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\r\n        //FIXME avoid truncating\r\n        // right now we don't care if the message size is \"slightly\" exceeded\r\n        if (this.logStorage.isReady()) {\r\n            // Sends all cached logs\r\n            if (this.outputCache.length) {\r\n                this.outputCache.forEach(\r\n                    function (cachedQueue) {\r\n                        this.logStorage.storeLogs(cachedQueue);\r\n                    }.bind(this)\r\n                );\r\n                // Clear the cache\r\n                this.outputCache = [];\r\n            }\r\n            // Send current batch\r\n            this.logStorage.storeLogs(this.queue);\r\n        } else {\r\n            this.outputCache.push(this.queue);\r\n        }\r\n\r\n        this.queue = [];\r\n        this.totalLen = 0;\r\n    }\r\n\r\n    if (reschedule) {\r\n        this._reschedulePublishInterval();\r\n    }\r\n};\r\n\r\n/**\r\n * Stops the periodical \"store logs\" task and immediately stores any pending\r\n * log entries as a batch.\r\n */\r\nLogCollector.prototype.stop = function() {\r\n    // Flush and stop publishing logs\r\n    this._flush(false /* do not force */, false /* do not reschedule */);\r\n};\r\n\r\nmodule.exports = LogCollector;\r\n","/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n","/*!\r\n * currentExecutingScript\r\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\r\n * Copyright (c) 2015 James M. Greene\r\n * Licensed MIT\r\n * https://github.com/JamesMGreene/currentExecutingScript\r\n * v0.1.3\r\n */\r\n(function(root, factory) {\r\n  if (typeof define === \"function\" && define.amd) {\r\n    // AMD. Register as an anonymous module.\r\n    define([], factory);\r\n  } else if (typeof exports === \"object\") {\r\n    // CommonJS-like environments that support `module.exports`,\r\n    // like Node.js. Does not work with strict CommonJS!\r\n    module.exports = factory();\r\n  } else {\r\n    // Browser globals (`root` is `window`)\r\n    root.currentExecutingScript = factory();\r\n  }\r\n}(\r\n  // Current context/scope\r\n  this || window,\r\n\r\n  // Factory function to return the export\r\n  function() {\r\n\r\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\r\n\r\n// This page's URL (minus query string and fragment identifer hash, if any)\r\nvar fullPageUrl = !!window.location ? window.location.href : null;\r\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\r\n\r\n// Live NodeList collection\r\nvar scripts = document.getElementsByTagName(\"script\");\r\n\r\n// Check if the browser supports the `readyState` property on `script` elements\r\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\r\n\r\n// Lousy browser detection for [not] Opera\r\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\r\n\r\n// Detect if `document.currentScript` is supported\r\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\r\n\r\nvar originalStackDepthConfig;\r\n// Detect if the V8 Error Stack Trace API is supported\r\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\r\n  originalStackDepthConfig = Error.stackTraceLimit;\r\n  Error.stackTraceLimit = Infinity;\r\n}\r\n\r\n\r\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\r\n// object instance without needing to throw it. Avoiding an unnecessary\r\n// use of `throw` saves time and performance.\r\nvar hasStackBeforeThrowing = false,\r\n    hasStackAfterThrowing = false;\r\n(function() {\r\n  try {\r\n    var err = new Error();\r\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\r\n    throw err;\r\n  }\r\n  catch (thrownErr) {\r\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\r\n  }\r\n})();\r\n\r\n\r\n// Normalize whitespace within a string\r\nfunction normalizeWhitespace(str) {\r\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\r\n}\r\n\r\n// Get script object based on the `src` URL\r\nfunction getScriptFromUrl(url, eligibleScripts) {\r\n  var i,\r\n      script = null;\r\n\r\n  eligibleScripts = eligibleScripts || scripts;\r\n\r\n  if (typeof url === \"string\" && url) {\r\n    for (i = eligibleScripts.length; i--; ) {\r\n      if (eligibleScripts[i].src === url) {\r\n        // NOTE: Could check if the same script URL is used by more than one `script` element\r\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\r\n        script = eligibleScripts[i];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return script;\r\n}\r\n\r\n// Get script object based on the caller function's source code body (text)\r\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\r\n  var i, inlineScriptText,\r\n      script = null,\r\n      callerSourceText = normalizeWhitespace(callerFnSource);\r\n\r\n  eligibleScripts = eligibleScripts || scripts;\r\n\r\n  if (callerFnSource && callerSourceText) {\r\n    for (i = eligibleScripts.length; i--; ) {\r\n      // Only look at inline scripts\r\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\r\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\r\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\r\n          // If more than one match is found, don't return any\r\n          if (script) {\r\n            script = null;\r\n            break;\r\n          }\r\n          script = eligibleScripts[i];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return script;\r\n}\r\n\r\n// If there is only a single inline script on the page, return it; otherwise `null`\r\nfunction getSoleInlineScript(eligibleScripts) {\r\n  var i, len,\r\n      script = null;\r\n  eligibleScripts = eligibleScripts || scripts;\r\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\r\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\r\n      if (script) {\r\n        script = null;\r\n        break;\r\n      }\r\n      script = eligibleScripts[i];\r\n    }\r\n  }\r\n  return script;\r\n}\r\n\r\n// Get the currently executing script URL from an Error stack trace\r\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\r\n  var matches, remainingStack,\r\n      url = null,\r\n      ignoreMessage = typeof skipStackDepth === \"number\";\r\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\r\n  if (typeof stack === \"string\" && stack) {\r\n    if (ignoreMessage) {\r\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\r\n    }\r\n    else {\r\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\r\n\r\n      if (!(matches && matches[1])) {\r\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\r\n      }\r\n    }\r\n\r\n    if (matches && matches[1]) {\r\n      if (skipStackDepth > 0) {\r\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\r\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\r\n      }\r\n      else {\r\n        url = matches[1];\r\n      }\r\n    }\r\n\r\n    // TODO: Handle more edge cases!\r\n    // Fixes #1\r\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\r\n\r\n    // ???\r\n\r\n  }\r\n  return url;\r\n}\r\n\r\n\r\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\r\n// element for the caller function, regardless of whether it is that `script`\r\n// DOM element is currently being evaluated for the first time. The farthest\r\n// currently executing `script` DOM element would typically be considered the\r\n// originator of the current execution stack.\r\nfunction _farthestExecutingScript() {\r\n  /*jshint noarg:false */\r\n\r\n  // TODO: Implement!\r\n  // Fixes #3\r\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\r\n  return null;\r\n\r\n/*\r\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\r\n  if (scripts.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  // Guaranteed accurate in IE 6-10.\r\n  // Not accurate/supported in any other browsers.\r\n  if (isNotOpera && supportsScriptReadyState) {\r\n    for (var i = scripts.length; i--; ) {\r\n      if (scripts[i].readyState === \"interactive\") {\r\n        return scripts[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  var stack,\r\n      e = new Error();\r\n  if (hasStackBeforeThrowing) {\r\n    stack = e.stack;\r\n  }\r\n  if (!stack && hasStackAfterThrowing) {\r\n    try {\r\n      throw e;\r\n    }\r\n    catch (err) {\r\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\r\n      stack = err.stack;\r\n    }\r\n  }\r\n  if (stack) {\r\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\r\n    var script = getScriptFromUrl(url, scripts );\r\n    if (!script && pageUrl && url === pageUrl) {\r\n      // Try to find the correct inline script by searching through\r\n      // inline scripts' text content for the caller function's source\r\n      // code to be present. If the caller function's source code is\r\n      // not available, see if there is only one inline script element\r\n      // in the DOM and return that (even though it may be wrong)\r\n\r\n      // TODO: Implement!\r\n      // Fixes #4 in part\r\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\r\n\r\n      var callerFn = _farthestExecutingScript.caller || null,\r\n          callerFnStack = [],\r\n          callerFnSource = null;\r\n\r\n      while (callerFn) {\r\n        callerFnStack.push(callerFn);\r\n        callerFn = callerFn.caller || null;\r\n      }\r\n      callerFn = callerFnStack.slice(-1)[0];\r\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\r\n\r\n\r\n      if (callerFnSource) {\r\n        script = getInlineScriptFromCallerSource(callerFnSource);\r\n      }\r\n      else {\r\n        // NOTE: This is a loose assumption that could be inaccurate!\r\n        //\r\n        // Inaccuracies:\r\n        //  - If the inline script that initiated the call was also removed from the DOM.\r\n        //  - If the call was initiated by an element's inline event handler,\r\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\r\n        script = getSoleInlineScript();\r\n      }\r\n    }\r\n    return script;\r\n  }\r\n\r\n  // NOTE: This is a loose assumption that could be inaccurate!\r\n  //\r\n  // Inaccuracies:\r\n  //  - If a script is created dynamically and appended to some position\r\n  //    other than the very end of the document.\r\n  //  - If multiple scripts are created dynamically and all appended to the\r\n  //    same position within the document (and do not have their `async` attributes\r\n  //    set to `false`, at least in browsers that support async script evaluation.\r\n  //    other than the very end of the document.\r\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\r\n  //    that supports it.\r\n  //  - May get confused by `script` elements within `svg` elements\r\n  return scripts[scripts.length - 1] || null;\r\n*/\r\n}\r\n\r\n\r\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\r\n// element or attribute node (e.g. `onclick`) for the caller function,\r\n// regardless of whether it is that `script` DOM element is currently being\r\n// evaluated for the first time. The originating currently executing `script`\r\n// DOM element [or attribute node] is the originator of the current execution stack.\r\nfunction _originatingExecutingScript() {\r\n  // TODO: Implement!\r\n  // Fixes #2\r\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\r\n  return null;\r\n}\r\n\r\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\r\n// element for the caller function, regardless of whether it is that `script`\r\n// DOM element is currently being evaluated for the first time.\r\nfunction _nearestExecutingScript() {\r\n  /*jshint noarg:false */\r\n\r\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\r\n  if (scripts.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  var i, e, stack, url, script,\r\n      eligibleScripts = [],\r\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\r\n\r\n      // TODO: Implement!\r\n      // Fixes #4 in part\r\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\r\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\r\n\r\n  // This part will only help in IE 6-10.\r\n  for (i = 0; i < scripts.length; i++) {\r\n    if (isNotOpera && supportsScriptReadyState) {\r\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\r\n        eligibleScripts.push(scripts[i]);\r\n      }\r\n    }\r\n    else {\r\n      eligibleScripts.push(scripts[i]);\r\n    }\r\n  }\r\n\r\n  e = new Error();\r\n  if (hasStackBeforeThrowing) {\r\n    stack = e.stack;\r\n  }\r\n  if (!stack && hasStackAfterThrowing) {\r\n    try {\r\n      throw e;\r\n    }\r\n    catch (err) {\r\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\r\n      stack = err.stack;\r\n    }\r\n  }\r\n\r\n  if (stack) {\r\n    url = getScriptUrlFromStack(stack, skipStackDepth);\r\n    script = getScriptFromUrl(url, eligibleScripts);\r\n\r\n    if (!script && pageUrl && url === pageUrl) {\r\n      // Try to find the correct inline script by searching through\r\n      // inline scripts' text content for the caller function's source\r\n      // code to be present.\r\n      if (callerFnSource) {\r\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\r\n      }\r\n      // If the caller function's source code is not available, see if\r\n      // there is only one inline script element in the DOM and return\r\n      // that (even though it may be wrong)...\r\n      else {\r\n        // NOTE: This is a loose assumption that could be inaccurate!\r\n        //\r\n        // Inaccuracies:\r\n        //  - If the inline script that initiated the call was also removed from the DOM.\r\n        //  - If the call was initiated by an element's inline event handler,\r\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\r\n        script = getSoleInlineScript(eligibleScripts);\r\n      }\r\n    }\r\n  }\r\n\r\n  //\r\n  // Welcome to the Island of Inaccurate Assumptions!\r\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\r\n  //\r\n\r\n  if (!script) {\r\n    // Inaccuracies:\r\n    //  - If the inline script that initiated the call was also removed from the DOM.\r\n    //  - If the call was initiated by an element's inline event handler,\r\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\r\n    if (eligibleScripts.length === 1) {\r\n      script = eligibleScripts[0];\r\n    }\r\n  }\r\n\r\n  if (!script) {\r\n    // Inaccuracies:\r\n    //  - If script currently being synchronously evaluated by the parser is the\r\n    //    originator of this call stack but NOT the source script of the caller/invocation\r\n    //    e.g.\r\n    //    ```html\r\n    //    <script id=\"a\">\r\n    //    function getCurrentScriptCallerFn() {\r\n    //      return currentExecutingScript.near();\r\n    //    }\r\n    //    </script>\r\n    //    <script id=\"b\">\r\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\r\n    //    getCurrentScriptCallerFn();\r\n    //    </script>\r\n    if (hasNativeCurrentScriptAccessor) {\r\n      script = document.currentScript;\r\n    }\r\n  }\r\n\r\n  if (!script) {\r\n    // Inaccuracies:\r\n    //  - If script currently being synchronously evaluated by the parser is the\r\n    //    originator of this call stack but NOT the source script of the caller/invocation\r\n    //    e.g.\r\n    //    ```html\r\n    //    <script id=\"a\">\r\n    //    function getCurrentScriptCallerFn() {\r\n    //      return currentExecutingScript.near();\r\n    //    }\r\n    //    </script>\r\n    //    <script id=\"b\">\r\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\r\n    //    getCurrentScriptCallerFn();\r\n    //    </script>\r\n    if (isNotOpera && supportsScriptReadyState) {\r\n      for (i = eligibleScripts.length; i--; ) {\r\n        if (eligibleScripts[i].readyState === \"interactive\") {\r\n          script = eligibleScripts[i];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!script) {\r\n    // Inaccuracies:\r\n    //  - If a script is created dynamically and appended to some position\r\n    //    other than the very end of the document.\r\n    //  - If multiple scripts are created dynamically and all appended to the\r\n    //    same position within the document (and do not have their `async` attributes\r\n    //    set to `false`, at least in browsers that support async script evaluation.\r\n    //    other than the very end of the document.\r\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\r\n    //    that supports it.\r\n    //  - May get confused by `script` elements within `svg` elements\r\n    //  - If script currently being synchronously evaluated by the parser is the\r\n    //    originator of this call stack but NOT the source script of the caller/invocation\r\n    //    e.g.\r\n    //    ```html\r\n    //    <script id=\"a\">\r\n    //    function getCurrentScriptCallerFn() {\r\n    //      return currentExecutingScript.near();\r\n    //    }\r\n    //    </script>\r\n    //    <script id=\"b\">\r\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\r\n    //    getCurrentScriptCallerFn();\r\n    //    </script>\r\n    //    ```\r\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\r\n  }\r\n\r\n  return script;\r\n}\r\n\r\n// Default stack depth to skip over when analyzing call stack frames\r\n_nearestExecutingScript.skipStackDepth = 1;\r\n\r\n\r\n\r\n    //\r\n    // Export the API\r\n    //\r\n    var currentExecutingScript    = _nearestExecutingScript;      // default\r\n    currentExecutingScript.near   = _nearestExecutingScript;\r\n    currentExecutingScript.far    = _farthestExecutingScript;\r\n    currentExecutingScript.origin = _originatingExecutingScript;\r\n\r\n\r\n    // Just return a value to define the module export.\r\n    // This example returns an object, but the module\r\n    // can return a function as the exported value.\r\n    return currentExecutingScript;\r\n  })\r\n);\r\n","const Constants = {\r\n    LOCAL_JID: 'local'\r\n};\r\n\r\nmodule.exports = Constants;\r\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","var scope = (typeof global !== \"undefined\" && global) ||\r\n            (typeof self !== \"undefined\" && self) ||\r\n            window;\r\nvar apply = Function.prototype.apply;\r\n\r\n// DOM APIs, for completeness\r\n\r\nexports.setTimeout = function() {\r\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\r\n};\r\nexports.setInterval = function() {\r\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\r\n};\r\nexports.clearTimeout =\r\nexports.clearInterval = function(timeout) {\r\n  if (timeout) {\r\n    timeout.close();\r\n  }\r\n};\r\n\r\nfunction Timeout(id, clearFn) {\r\n  this._id = id;\r\n  this._clearFn = clearFn;\r\n}\r\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\r\nTimeout.prototype.close = function() {\r\n  this._clearFn.call(scope, this._id);\r\n};\r\n\r\n// Does not start the time, just sets up the members needed.\r\nexports.enroll = function(item, msecs) {\r\n  clearTimeout(item._idleTimeoutId);\r\n  item._idleTimeout = msecs;\r\n};\r\n\r\nexports.unenroll = function(item) {\r\n  clearTimeout(item._idleTimeoutId);\r\n  item._idleTimeout = -1;\r\n};\r\n\r\nexports._unrefActive = exports.active = function(item) {\r\n  clearTimeout(item._idleTimeoutId);\r\n\r\n  var msecs = item._idleTimeout;\r\n  if (msecs >= 0) {\r\n    item._idleTimeoutId = setTimeout(function onTimeout() {\r\n      if (item._onTimeout)\r\n        item._onTimeout();\r\n    }, msecs);\r\n  }\r\n};\r\n\r\n// setimmediate attaches itself to the global object\r\nrequire(\"setimmediate\");\r\n// On some exotic environments, it's not clear which object `setimmediate` was\r\n// able to install onto.  Search each possibility in the same order as the\r\n// `setimmediate` library.\r\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\r\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\r\n                       (this && this.setImmediate);\r\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\r\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\r\n                         (this && this.clearImmediate);\r\n","(function (global, undefined) {\r\n    \"use strict\";\r\n\r\n    if (global.setImmediate) {\r\n        return;\r\n    }\r\n\r\n    var nextHandle = 1; // Spec says greater than zero\r\n    var tasksByHandle = {};\r\n    var currentlyRunningATask = false;\r\n    var doc = global.document;\r\n    var registerImmediate;\r\n\r\n    function setImmediate(callback) {\r\n      // Callback can either be a function or a string\r\n      if (typeof callback !== \"function\") {\r\n        callback = new Function(\"\" + callback);\r\n      }\r\n      // Copy function arguments\r\n      var args = new Array(arguments.length - 1);\r\n      for (var i = 0; i < args.length; i++) {\r\n          args[i] = arguments[i + 1];\r\n      }\r\n      // Store and register the task\r\n      var task = { callback: callback, args: args };\r\n      tasksByHandle[nextHandle] = task;\r\n      registerImmediate(nextHandle);\r\n      return nextHandle++;\r\n    }\r\n\r\n    function clearImmediate(handle) {\r\n        delete tasksByHandle[handle];\r\n    }\r\n\r\n    function run(task) {\r\n        var callback = task.callback;\r\n        var args = task.args;\r\n        switch (args.length) {\r\n        case 0:\r\n            callback();\r\n            break;\r\n        case 1:\r\n            callback(args[0]);\r\n            break;\r\n        case 2:\r\n            callback(args[0], args[1]);\r\n            break;\r\n        case 3:\r\n            callback(args[0], args[1], args[2]);\r\n            break;\r\n        default:\r\n            callback.apply(undefined, args);\r\n            break;\r\n        }\r\n    }\r\n\r\n    function runIfPresent(handle) {\r\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\r\n        // So if we're currently running a task, we'll need to delay this invocation.\r\n        if (currentlyRunningATask) {\r\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\r\n            // \"too much recursion\" error.\r\n            setTimeout(runIfPresent, 0, handle);\r\n        } else {\r\n            var task = tasksByHandle[handle];\r\n            if (task) {\r\n                currentlyRunningATask = true;\r\n                try {\r\n                    run(task);\r\n                } finally {\r\n                    clearImmediate(handle);\r\n                    currentlyRunningATask = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function installNextTickImplementation() {\r\n        registerImmediate = function(handle) {\r\n            process.nextTick(function () { runIfPresent(handle); });\r\n        };\r\n    }\r\n\r\n    function canUsePostMessage() {\r\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\r\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\r\n        if (global.postMessage && !global.importScripts) {\r\n            var postMessageIsAsynchronous = true;\r\n            var oldOnMessage = global.onmessage;\r\n            global.onmessage = function() {\r\n                postMessageIsAsynchronous = false;\r\n            };\r\n            global.postMessage(\"\", \"*\");\r\n            global.onmessage = oldOnMessage;\r\n            return postMessageIsAsynchronous;\r\n        }\r\n    }\r\n\r\n    function installPostMessageImplementation() {\r\n        // Installs an event handler on `global` for the `message` event: see\r\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\r\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\r\n\r\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\r\n        var onGlobalMessage = function(event) {\r\n            if (event.source === global &&\r\n                typeof event.data === \"string\" &&\r\n                event.data.indexOf(messagePrefix) === 0) {\r\n                runIfPresent(+event.data.slice(messagePrefix.length));\r\n            }\r\n        };\r\n\r\n        if (global.addEventListener) {\r\n            global.addEventListener(\"message\", onGlobalMessage, false);\r\n        } else {\r\n            global.attachEvent(\"onmessage\", onGlobalMessage);\r\n        }\r\n\r\n        registerImmediate = function(handle) {\r\n            global.postMessage(messagePrefix + handle, \"*\");\r\n        };\r\n    }\r\n\r\n    function installMessageChannelImplementation() {\r\n        var channel = new MessageChannel();\r\n        channel.port1.onmessage = function(event) {\r\n            var handle = event.data;\r\n            runIfPresent(handle);\r\n        };\r\n\r\n        registerImmediate = function(handle) {\r\n            channel.port2.postMessage(handle);\r\n        };\r\n    }\r\n\r\n    function installReadyStateChangeImplementation() {\r\n        var html = doc.documentElement;\r\n        registerImmediate = function(handle) {\r\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\r\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\r\n            var script = doc.createElement(\"script\");\r\n            script.onreadystatechange = function () {\r\n                runIfPresent(handle);\r\n                script.onreadystatechange = null;\r\n                html.removeChild(script);\r\n                script = null;\r\n            };\r\n            html.appendChild(script);\r\n        };\r\n    }\r\n\r\n    function installSetTimeoutImplementation() {\r\n        registerImmediate = function(handle) {\r\n            setTimeout(runIfPresent, 0, handle);\r\n        };\r\n    }\r\n\r\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\r\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\r\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\r\n\r\n    // Don't get fooled by e.g. browserify environments.\r\n    if ({}.toString.call(global.process) === \"[object process]\") {\r\n        // For Node.js before 0.9\r\n        installNextTickImplementation();\r\n\r\n    } else if (canUsePostMessage()) {\r\n        // For non-IE10 modern browsers\r\n        installPostMessageImplementation();\r\n\r\n    } else if (global.MessageChannel) {\r\n        // For web workers, where supported\r\n        installMessageChannelImplementation();\r\n\r\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\r\n        // For IE 6–8\r\n        installReadyStateChangeImplementation();\r\n\r\n    } else {\r\n        // For older browsers\r\n        installSetTimeoutImplementation();\r\n    }\r\n\r\n    attachTo.setImmediate = setImmediate;\r\n    attachTo.clearImmediate = clearImmediate;\r\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\r\n","var toIntIfInt = function (v) {\r\n  return String(Number(v)) === v ? Number(v) : v;\r\n};\r\n\r\nvar attachProperties = function (match, location, names, rawName) {\r\n  if (rawName && !names) {\r\n    location[rawName] = toIntIfInt(match[1]);\r\n  }\r\n  else {\r\n    for (var i = 0; i < names.length; i += 1) {\r\n      if (match[i+1] != null) {\r\n        location[names[i]] = toIntIfInt(match[i+1]);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nvar parseReg = function (obj, location, content) {\r\n  var needsBlank = obj.name && obj.names;\r\n  if (obj.push && !location[obj.push]) {\r\n    location[obj.push] = [];\r\n  }\r\n  else if (needsBlank && !location[obj.name]) {\r\n    location[obj.name] = {};\r\n  }\r\n  var keyLocation = obj.push ?\r\n    {} :  // blank object that will be pushed\r\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\r\n\r\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\r\n\r\n  if (obj.push) {\r\n    location[obj.push].push(keyLocation);\r\n  }\r\n};\r\n\r\nvar grammar = require('./grammar');\r\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\r\n\r\nexports.parse = function (sdp) {\r\n  var session = {}\r\n    , media = []\r\n    , location = session; // points at where properties go under (one of the above)\r\n\r\n  // parse lines we understand\r\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\r\n    var type = l[0];\r\n    var content = l.slice(2);\r\n    if (type === 'm') {\r\n      media.push({rtp: [], fmtp: []});\r\n      location = media[media.length-1]; // point at latest media line\r\n    }\r\n\r\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\r\n      var obj = grammar[type][j];\r\n      if (obj.reg.test(content)) {\r\n        return parseReg(obj, location, content);\r\n      }\r\n    }\r\n  });\r\n\r\n  session.media = media; // link it up\r\n  return session;\r\n};\r\n\r\nvar paramReducer = function (acc, expr) {\r\n  var s = expr.split(/=(.+)/, 2);\r\n  if (s.length === 2) {\r\n    acc[s[0]] = toIntIfInt(s[1]);\r\n  }\r\n  return acc;\r\n};\r\n\r\nexports.parseParams = function (str) {\r\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\r\n};\r\n\r\n// For backward compatibility - alias will be removed in 3.0.0\r\nexports.parseFmtpConfig = exports.parseParams;\r\n\r\nexports.parsePayloads = function (str) {\r\n  return str.split(' ').map(Number);\r\n};\r\n\r\nexports.parseRemoteCandidates = function (str) {\r\n  var candidates = [];\r\n  var parts = str.split(' ').map(toIntIfInt);\r\n  for (var i = 0; i < parts.length; i += 3) {\r\n    candidates.push({\r\n      component: parts[i],\r\n      ip: parts[i + 1],\r\n      port: parts[i + 2]\r\n    });\r\n  }\r\n  return candidates;\r\n};\r\n\r\nexports.parseImageAttributes = function (str) {\r\n  return str.split(' ').map(function (item) {\r\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\r\n  });\r\n};\r\n\r\nexports.parseSimulcastStreamList = function (str) {\r\n  return str.split(';').map(function (stream) {\r\n    return stream.split(',').map(function (format) {\r\n      var scid, paused = false;\r\n\r\n      if (format[0] !== '~') {\r\n        scid = toIntIfInt(format);\r\n      } else {\r\n        scid = toIntIfInt(format.substring(1, format.length));\r\n        paused = true;\r\n      }\r\n\r\n      return {\r\n        scid: scid,\r\n        paused: paused\r\n      };\r\n    });\r\n  });\r\n};\r\n","var grammar = require('./grammar');\r\n\r\n// customized util.format - discards excess arguments and can void middle ones\r\nvar formatRegExp = /%[sdv%]/g;\r\nvar format = function (formatStr) {\r\n  var i = 1;\r\n  var args = arguments;\r\n  var len = args.length;\r\n  return formatStr.replace(formatRegExp, function (x) {\r\n    if (i >= len) {\r\n      return x; // missing argument\r\n    }\r\n    var arg = args[i];\r\n    i += 1;\r\n    switch (x) {\r\n    case '%%':\r\n      return '%';\r\n    case '%s':\r\n      return String(arg);\r\n    case '%d':\r\n      return Number(arg);\r\n    case '%v':\r\n      return '';\r\n    }\r\n  });\r\n  // NB: we discard excess arguments - they are typically undefined from makeLine\r\n};\r\n\r\nvar makeLine = function (type, obj, location) {\r\n  var str = obj.format instanceof Function ?\r\n    (obj.format(obj.push ? location : location[obj.name])) :\r\n    obj.format;\r\n\r\n  var args = [type + '=' + str];\r\n  if (obj.names) {\r\n    for (var i = 0; i < obj.names.length; i += 1) {\r\n      var n = obj.names[i];\r\n      if (obj.name) {\r\n        args.push(location[obj.name][n]);\r\n      }\r\n      else { // for mLine and push attributes\r\n        args.push(location[obj.names[i]]);\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    args.push(location[obj.name]);\r\n  }\r\n  return format.apply(null, args);\r\n};\r\n\r\n// RFC specified order\r\n// TODO: extend this with all the rest\r\nvar defaultOuterOrder = [\r\n  'v', 'o', 's', 'i',\r\n  'u', 'e', 'p', 'c',\r\n  'b', 't', 'r', 'z', 'a'\r\n];\r\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\r\n\r\n\r\nmodule.exports = function (session, opts) {\r\n  opts = opts || {};\r\n  // ensure certain properties exist\r\n  if (session.version == null) {\r\n    session.version = 0; // 'v=0' must be there (only defined version atm)\r\n  }\r\n  if (session.name == null) {\r\n    session.name = ' '; // 's= ' must be there if no meaningful name set\r\n  }\r\n  session.media.forEach(function (mLine) {\r\n    if (mLine.payloads == null) {\r\n      mLine.payloads = '';\r\n    }\r\n  });\r\n\r\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\r\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\r\n  var sdp = [];\r\n\r\n  // loop through outerOrder for matching properties on session\r\n  outerOrder.forEach(function (type) {\r\n    grammar[type].forEach(function (obj) {\r\n      if (obj.name in session && session[obj.name] != null) {\r\n        sdp.push(makeLine(type, obj, session));\r\n      }\r\n      else if (obj.push in session && session[obj.push] != null) {\r\n        session[obj.push].forEach(function (el) {\r\n          sdp.push(makeLine(type, obj, el));\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  // then for each media line, follow the innerOrder\r\n  session.media.forEach(function (mLine) {\r\n    sdp.push(makeLine('m', grammar.m[0], mLine));\r\n\r\n    innerOrder.forEach(function (type) {\r\n      grammar[type].forEach(function (obj) {\r\n        if (obj.name in mLine && mLine[obj.name] != null) {\r\n          sdp.push(makeLine(type, obj, mLine));\r\n        }\r\n        else if (obj.push in mLine && mLine[obj.push] != null) {\r\n          mLine[obj.push].forEach(function (el) {\r\n            sdp.push(makeLine(type, obj, el));\r\n          });\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  return sdp.join('\\r\\n') + '\\r\\n';\r\n};\r\n","/* Copyright @ 2016 Atlassian Pty Ltd\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nvar transform = require('sdp-transform');\r\nvar transformUtils = require('./transform-utils');\r\nvar parseSsrcs = transformUtils.parseSsrcs;\r\nvar writeSsrcs = transformUtils.writeSsrcs;\r\n\r\n//region Constants\r\n\r\nvar DEFAULT_NUM_OF_LAYERS = 3;\r\n\r\n//endregion\r\n\r\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\r\n    return mLine\r\n        .ssrcs\r\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\r\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\r\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\r\n}\r\n\r\n//region Ctor\r\n\r\nfunction Simulcast(options) {\r\n\r\n    this.options = options ? options : {};\r\n\r\n    if (!this.options.numOfLayers) {\r\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\r\n    }\r\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\r\n\r\n    /**\r\n     * An IN-ORDER list of the simulcast ssrcs\r\n     * @type {list<number>}\r\n     */\r\n    this.ssrcCache = [];\r\n}\r\n\r\n//endregion\r\n\r\n//region Stateless private utility functions\r\n\r\n/**\r\n * Returns a random integer between min (included) and max (excluded)\r\n * Using Math.round() gives a non-uniform distribution!\r\n * @returns {number}\r\n */\r\nfunction generateSSRC() {\r\n    var min = 0, max = 0xffffffff;\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n};\r\n\r\nfunction processVideo(session, action) {\r\n    if (session == null || !Array.isArray(session.media)) {\r\n        return;\r\n    }\r\n\r\n    session.media.forEach(function (mLine) {\r\n        if (mLine.type === 'video') {\r\n            action(mLine);\r\n        }\r\n    });\r\n};\r\n\r\nfunction validateDescription(desc)\r\n{\r\n    return desc && desc != null\r\n        && desc.type && desc.type != ''\r\n        && desc.sdp && desc.sdp != '';\r\n}\r\n\r\nfunction explodeRemoteSimulcast(mLine) {\r\n\r\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\r\n        return;\r\n    }\r\n\r\n    var sources = parseSsrcs(mLine);\r\n    var order = [];\r\n\r\n    // Find the SIM group and explode its sources.\r\n    var j = mLine.ssrcGroups.length;\r\n    while (j--) {\r\n\r\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\r\n            continue;\r\n        }\r\n\r\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\r\n\r\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\r\n\r\n            var ssrc = simulcastSsrcs[i];\r\n            order.push(ssrc);\r\n\r\n            var parts = sources[ssrc].msid.split(' ');\r\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\r\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\r\n\r\n            // Remove all the groups that this SSRC participates in.\r\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\r\n                if (relatedGroup.semantics === 'SIM') {\r\n                    return;\r\n                }\r\n\r\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\r\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\r\n                    return;\r\n                }\r\n\r\n                // Nuke all the related SSRCs.\r\n                relatedSsrcs.forEach(function (relatedSSRC) {\r\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\r\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\r\n                    if (relatedSSRC !== ssrc) {\r\n                        order.push(relatedSSRC);\r\n                    }\r\n                });\r\n\r\n                // Schedule the related group for nuking.\r\n            })\r\n        }\r\n\r\n        mLine.ssrcs = writeSsrcs(sources, order);\r\n        mLine.ssrcGroups.splice(j, 1);\r\n    };\r\n}\r\n\r\nfunction implodeRemoteSimulcast(mLine) {\r\n\r\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\r\n        console.info('Halt: There are no SSRC groups in the remote ' +\r\n                'description.');\r\n        return;\r\n    }\r\n\r\n    var sources = parseSsrcs(mLine);\r\n\r\n    // Find the SIM group and nuke it.\r\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\r\n        if (simulcastGroup.semantics !== 'SIM') {\r\n            return;\r\n        }\r\n\r\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\r\n        // Schedule the SIM group for nuking.\r\n        simulcastGroup.nuke = true;\r\n\r\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\r\n\r\n        // Nuke all the higher layer SSRCs.\r\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\r\n\r\n            var ssrc = simulcastSsrcs[i];\r\n            delete sources[ssrc];\r\n\r\n            // Remove all the groups that this SSRC participates in.\r\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\r\n                if (relatedGroup.semantics === 'SIM') {\r\n                    return;\r\n                }\r\n\r\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\r\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\r\n                    return;\r\n                }\r\n\r\n                // Nuke all the related SSRCs.\r\n                relatedSsrcs.forEach(function (relatedSSRC) {\r\n                    delete sources[relatedSSRC];\r\n                });\r\n\r\n                // Schedule the related group for nuking.\r\n                relatedGroup.nuke = true;\r\n            })\r\n        }\r\n\r\n        return;\r\n    });\r\n\r\n    mLine.ssrcs = writeSsrcs(sources);\r\n\r\n    // Nuke all the scheduled groups.\r\n    var i = mLine.ssrcGroups.length;\r\n    while (i--) {\r\n        if (mLine.ssrcGroups[i].nuke) {\r\n            mLine.ssrcGroups.splice(i, 1);\r\n        }\r\n    }\r\n}\r\n\r\nfunction removeGoogConference(mLine) {\r\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\r\n        return;\r\n    }\r\n\r\n    mLine.xGoogleFlag = undefined;\r\n}\r\n\r\nfunction assertGoogConference(mLine) {\r\n    if (!mLine) {\r\n        return;\r\n    }\r\n\r\n    if (!Array.isArray(mLine.invalid)) {\r\n        mLine.invalid = [];\r\n    }\r\n\r\n    if (!mLine.invalid.some(\r\n            function (i) { return i.value === 'x-google-flag:conference' })) {\r\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\r\n    }\r\n}\r\n\r\nSimulcast.prototype.clearSsrcCache = function() {\r\n    this.ssrcCache = [];\r\n}\r\n\r\n/**\r\n * When we start as video muted, all of the video\r\n *  ssrcs get generated so we can include them as part\r\n *  of the original session-accept.  That means we\r\n *  need this library to restore to those same ssrcs\r\n *  the first time we unmute, so we need the ability to\r\n *  force its cache\r\n */\r\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\r\n    this.ssrcCache = ssrcs;\r\n}\r\n\r\n//endregion\r\n\r\n//region \"Private\" functions\r\n\r\n/**\r\n * Given a video mLine, return a list of the video ssrcs\r\n *  in simulcast layer order (returns a list of just\r\n *  the primary ssrc if there are no simulcast layers)\r\n */\r\nSimulcast.prototype._parseSimLayers = function (mLine) {\r\n    var simGroup = mLine.ssrcGroups &&\r\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\r\n    if (simGroup) {\r\n        return simGroup.ssrcs\r\n            .split(\" \")\r\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\r\n    } else {\r\n        return [mLine.ssrcs[0].id];\r\n    }\r\n}\r\n\r\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\r\n    var ssrcMap = {};\r\n    for (var i = 0; i < newSsrcList.length; ++i) {\r\n        var newSsrc = newSsrcList[i];\r\n        var oldSsrc = oldSsrcList[i] || null;\r\n        ssrcMap[newSsrc] = oldSsrc;\r\n    }\r\n    return ssrcMap;\r\n}\r\n\r\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\r\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\r\n    var newSimSsrcs = this._parseSimLayers(mLine);\r\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\r\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\r\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\r\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\r\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\r\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\r\n    //  to replace directly\r\n    var ssrcsToAdd = this.ssrcCache\r\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\r\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\r\n\r\n    // First do the replacements\r\n    mLine.ssrcs.forEach(function(ssrc) {\r\n        if (ssrcsToReplace[ssrc.id]) {\r\n            ssrc.id = ssrcsToReplace[ssrc.id];\r\n        }\r\n    });\r\n    // Now the adds\r\n    ssrcsToAdd.forEach(function(ssrc) {\r\n        mLine.ssrcs.push({\r\n            id: ssrc,\r\n            attribute: \"msid\",\r\n            value: newMsid\r\n        });\r\n        mLine.ssrcs.push({\r\n            id: ssrc,\r\n            attribute: \"cname\",\r\n            value: newCname\r\n        });\r\n    });\r\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\r\n    mLine.ssrcGroups.push({\r\n        semantics: \"SIM\",\r\n        ssrcs: this.ssrcCache.join(\" \")\r\n    });\r\n    return mLine;\r\n}\r\n\r\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\r\n    var addAssociatedStream = function(mLine, ssrc) {\r\n        mLine.ssrcs.push({\r\n            id: ssrc,\r\n            attribute: \"cname\",\r\n            value: primarySsrcCname\r\n        });\r\n        mLine.ssrcs.push({\r\n            id: ssrc,\r\n            attribute: \"msid\",\r\n            value: primarySsrcMsid\r\n        });\r\n    }\r\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\r\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\r\n\r\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\r\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\r\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\r\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\r\n        primarySsrcMsid = mLine.msid;\r\n        var primarySsrcs = mLine.ssrcs;\r\n        primarySsrcs.forEach(ssrc => {\r\n            mLine.ssrcs.push({\r\n                id: ssrc.id,\r\n                attribute: \"msid\",\r\n                value: primarySsrcMsid\r\n            });\r\n        });\r\n    }\r\n\r\n    // Generate sim layers\r\n    var simSsrcs = [];\r\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\r\n        var simSsrc = generateSSRC();\r\n        addAssociatedStream(mLine, simSsrc);\r\n        simSsrcs.push(simSsrc);\r\n    }\r\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\r\n    mLine.ssrcGroups.push({\r\n        semantics: \"SIM\",\r\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\r\n    });\r\n    return mLine;\r\n}\r\n\r\n\r\n\r\n// Assumptions:\r\n//  1) 'mLine' contains only a single primary video source\r\n//   (i.e. it will not already have simulcast streams inserted)\r\n//  2) 'mLine' MAY already contain an RTX stream for its video source\r\n//  3) 'mLine' is in sendrecv or sendonly state\r\n// Guarantees:\r\n//  1) return mLine will contain 2 additional simulcast layers\r\n//   generated\r\n//  2) if the base video ssrc in mLine has been seen before,\r\n//   then the same generated simulcast streams from before will\r\n//   be used again\r\n//  3) if rtx is enabled for the mLine, all generated simulcast\r\n//   streams will have rtx streams generated as well\r\n//  4) if rtx has been generated for a src before, we will generate\r\n//   the same rtx stream again\r\nSimulcast.prototype._restoreSimulcast = function(mLine) {\r\n    // First, find the primary video source in the given\r\n    // mLine and see if we've seen it before.\r\n    var primarySsrc;\r\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\r\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\r\n        .filter(function(ssrc, index, array) {\r\n            return array.indexOf(ssrc) === index;\r\n        })\r\n        .length || 0;\r\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\r\n\r\n    if (numSsrcs === 0 || numSsrcs > 2) {\r\n        // Unsupported scenario\r\n        return mLine;\r\n    }\r\n    if (numSsrcs == 2 && numGroups === 0) {\r\n        // Unsupported scenario\r\n        return mLine;\r\n    }\r\n\r\n    if (numSsrcs === 1) {\r\n        primarySsrc = mLine.ssrcs[0].id;\r\n    } else {\r\n        // There must be an FID group, so parse\r\n        //  that and pull the primary ssrc from there\r\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\r\n        if (fidGroup) {\r\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\r\n        } else {\r\n            // Unsupported scenario\r\n            return mLine;\r\n        }\r\n    }\r\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\r\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\r\n\r\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\r\n\r\n    if (seenPrimarySsrc) {\r\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\r\n            \"filling in data from cache\");\r\n        mLine = this._fillInSourceDataFromCache(mLine);\r\n    } else {\r\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\r\n            \"generating source data\");\r\n        mLine = this._generateSourceData(mLine, primarySsrc);\r\n    }\r\n    // Now update the cache to match whatever we've just put into this sdp\r\n    this.ssrcCache = this._parseSimLayers(mLine);\r\n    return mLine;\r\n}\r\n\r\n//endregion\r\n\r\n//region \"Public\" functions\r\n\r\n/**\r\n *\r\n * @param desc\r\n * @param enableConferenceFlag\r\n * @returns {RTCSessionDescription}\r\n */\r\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\r\n\r\n    if (!validateDescription(desc)) {\r\n        return desc;\r\n    }\r\n\r\n    var session = transform.parse(desc.sdp);\r\n\r\n    var self = this;\r\n    processVideo(session, function (mLine) {\r\n\r\n        // Handle simulcast reception.\r\n        if (self.options.explodeRemoteSimulcast) {\r\n            explodeRemoteSimulcast(mLine);\r\n        } else {\r\n            implodeRemoteSimulcast(mLine);\r\n        }\r\n\r\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\r\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\r\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\r\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\r\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\r\n            assertGoogConference(mLine);\r\n        } else {\r\n            removeGoogConference(mLine);\r\n        }\r\n    });\r\n\r\n    return new RTCSessionDescription({\r\n        type: desc.type,\r\n        sdp: transform.write(session)\r\n    });\r\n};\r\n\r\n/**\r\n *\r\n * NOTE this method should be called only if simulcast is supported by\r\n * the current browser, otherwise local SDP should not be munged.\r\n * @param desc\r\n * @returns {RTCSessionDescription}\r\n */\r\nSimulcast.prototype.mungeLocalDescription = function (desc) {\r\n\r\n    if (!validateDescription(desc)) {\r\n        return desc;\r\n    }\r\n\r\n    var session = transform.parse(desc.sdp);\r\n\r\n    var self = this;\r\n    processVideo(session, function (mLine) {\r\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\r\n        {\r\n            return;\r\n        }\r\n        self._restoreSimulcast(mLine);\r\n    });\r\n\r\n    return new RTCSessionDescription({\r\n        type: desc.type,\r\n        sdp: transform.write(session)\r\n    });\r\n};\r\n\r\n//endregion\r\n\r\nmodule.exports = Simulcast;\r\n","/* Copyright @ 2015 Atlassian Pty Ltd\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * FIXME\r\n * @param sources FIXME\r\n * @param order An array of SSRCs which will be used to order the entries in\r\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\r\n * in the specified order, and all other sources will be added afterwards (in\r\n * no specific order).\r\n * @returns {Array} FIXME\r\n */\r\nexports.writeSsrcs = function(sources, order) {\r\n  var ssrcs = [];\r\n\r\n  // expand sources to ssrcs\r\n  if (typeof sources !== 'undefined' &&\r\n      Object.keys(sources).length !== 0) {\r\n\r\n    if (!Array.isArray(order)) {\r\n      order = []\r\n    }\r\n\r\n    // Add the sources that appear in 'order' first.\r\n    for (var i = 0; i < order.length; i++) {\r\n      var ssrc = order[i];\r\n      var source = sources[ssrc];\r\n      Object.keys(source).forEach(function (attribute) {\r\n        ssrcs.push({\r\n          id: ssrc,\r\n          attribute: attribute,\r\n          value: source[attribute]\r\n        });\r\n      });\r\n    }\r\n\r\n    // Now add the rest of the sources.\r\n    Object.keys(sources).forEach(function (ssrc) {\r\n      ssrc = parseInt(ssrc); // Object.keys() returns string\r\n      if (order.indexOf(ssrc) >= 0) {\r\n        // Already added.\r\n        return;\r\n      }\r\n\r\n      var source = sources[ssrc];\r\n      Object.keys(source).forEach(function (attribute) {\r\n        ssrcs.push({\r\n          id: ssrc,\r\n          attribute: attribute,\r\n          value: source[attribute]\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  return ssrcs;\r\n};\r\n\r\nexports.parseSsrcs = function (mLine) {\r\n  var sources = {};\r\n  // group sources attributes by ssrc.\r\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\r\n    mLine.ssrcs.forEach(function (ssrc) {\r\n      if (!sources[ssrc.id])\r\n        sources[ssrc.id] = {};\r\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\r\n    });\r\n  }\r\n  return sources;\r\n};\r\n\r\n","/* eslint-disable max-params */\r\n\r\n/**\r\n * This object stores variables needed around the recording of an audio stream\r\n * and passing this recording along with additional information along to\r\n * different processes\r\n * @param blob the recording audio stream as a single blob\r\n * @param name the name of the person of the audio stream\r\n * @param startTime the time in UTC when recording of the audiostream started\r\n * @param wordArray the recorder audio stream transcribed as an array of Word\r\n *                  objects\r\n */\r\nconst RecordingResult = function(blob, name, startTime, wordArray) {\r\n    this.blob = blob;\r\n    this.name = name;\r\n    this.startTime = startTime;\r\n    this.wordArray = wordArray;\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\nmodule.exports = RecordingResult;\r\n","/* global config */\r\n\r\nconst Word = require('../word');\r\n\r\nconst audioRecorder = require('./../audioRecorder');\r\nconst TranscriptionService = require('./AbstractTranscriptionService');\r\n\r\n/**\r\n * Implements a TranscriptionService for a Sphinx4 http server\r\n */\r\nconst SphinxService = function() {\r\n    // set the correct url\r\n    this.url = getURL();\r\n};\r\n\r\n/**\r\n * Subclass of AbstractTranscriptionService\r\n */\r\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\r\n\r\n/**\r\n * Set the right constructor\r\n */\r\nSphinxService.constructor = SphinxService;\r\n\r\n/**\r\n * Overrides the sendRequest method from AbstractTranscriptionService\r\n * it will send the audio stream the a Sphinx4 server to get the transcription\r\n *\r\n * @param audioFileBlob the recorder audio stream an a single Blob\r\n * @param callback the callback function retrieving the server response\r\n */\r\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\r\n    console.log(`sending an audio file  to ${this.url}`);\r\n    console.log(`the audio file being sent: ${audioFileBlob}`);\r\n    const request = new XMLHttpRequest();\r\n\r\n    request.onreadystatechange = function() {\r\n        if (request.readyState === XMLHttpRequest.DONE\r\n            && request.status === 200) {\r\n            callback(request.responseText);\r\n        } else if (request.readyState === XMLHttpRequest.DONE) {\r\n            throw new Error(\r\n                `unable to accept response from sphinx server. status: ${\r\n                    request.status}`);\r\n        }\r\n\r\n        // if not ready no point to throw an error\r\n    };\r\n    request.open('POST', this.url);\r\n    request.setRequestHeader('Content-Type',\r\n        audioRecorder.determineCorrectFileType());\r\n    request.send(audioFileBlob);\r\n    console.log(`send ${audioFileBlob}`);\r\n};\r\n\r\n/**\r\n * Overrides the formatResponse method from AbstractTranscriptionService\r\n * It will parse the answer from the server in the expected format\r\n *\r\n * @param response the JSON body retrieved from the Sphinx4 server\r\n */\r\nSphinxService.prototype.formatResponse = function(response) {\r\n    const result = JSON.parse(response).objects;\r\n\r\n    // make sure to delete the session id object, which is always\r\n    // the first value in the JSON array\r\n\r\n    result.shift();\r\n    const array = [];\r\n\r\n    result.forEach(\r\n        word =>\r\n            word.filler\r\n                || array.push(new Word(word.word, word.start, word.end)));\r\n\r\n    return array;\r\n};\r\n\r\n/**\r\n * checks wether the reply is empty, or doesn't contain a correct JSON object\r\n * @param response the server response\r\n * @return {boolean} whether the response is valid\r\n */\r\nSphinxService.prototype.verify = function(response) {\r\n    console.log(`response from server:${response.toString()}`);\r\n\r\n    // test if server responded with a string object\r\n    if (typeof response !== 'string') {\r\n        return false;\r\n    }\r\n\r\n    // test if the string can be parsed into valid JSON\r\n    let json;\r\n\r\n    try {\r\n        json = JSON.parse(response);\r\n    } catch (error) {\r\n        console.log(error);\r\n\r\n        return false;\r\n    }\r\n\r\n    // check if the JSON has a \"objects\" value\r\n    if (json.objects === undefined) {\r\n        return false;\r\n    }\r\n\r\n    // get the \"objects\" value and check for a session ID\r\n    const array = json.objects;\r\n\r\n    if (!(array[0] && array[0]['session-id'])) {\r\n        return false;\r\n    }\r\n\r\n    // everything seems to be in order\r\n    return true;\r\n};\r\n\r\n/**\r\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\r\n * it will throw an error\r\n *\r\n * @returns {string} the URL to the sphinx4 server\r\n */\r\nfunction getURL() {\r\n    const message = 'config does not contain an url to a Sphinx4 https server';\r\n\r\n    if (config.sphinxURL === undefined) {\r\n        console.log(message);\r\n    } else {\r\n        const toReturn = config.sphinxURL;\r\n\r\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\r\n            return toReturn;\r\n        }\r\n        console.log(message);\r\n\r\n    }\r\n}\r\n\r\nmodule.exports = SphinxService;\r\n","/**\r\n * An object representing a transcribed word, with some additional information\r\n * @param word the word\r\n * @param begin the time the word was started being uttered\r\n * @param end the time the word stopped being uttered\r\n */\r\nconst Word = function(word, begin, end) {\r\n    this.word = word;\r\n    this.begin = begin;\r\n    this.end = end;\r\n};\r\n\r\n/**\r\n * Get the string representation of the word\r\n * @returns {*} the word as a string\r\n */\r\nWord.prototype.getWord = function() {\r\n    return this.word;\r\n};\r\n\r\n/**\r\n * Get the time the word started being uttered\r\n * @returns {*} the start time as an integer\r\n */\r\nWord.prototype.getBeginTime = function() {\r\n    return this.begin;\r\n};\r\n\r\n/**\r\n * Get the time the word stopped being uttered\r\n * @returns {*} the end time as an integer\r\n */\r\nWord.prototype.getEndTime = function() {\r\n    return this.end;\r\n};\r\n\r\nmodule.exports = Word;\r\n","/**\r\n * Abstract class representing an interface to implement a speech-to-text\r\n * service on.\r\n */\r\nconst TranscriptionService = function() {\r\n    throw new Error('TranscriptionService is abstract and cannot be'\r\n        + 'created');\r\n};\r\n\r\n/**\r\n * This method can be used to send the recorder audio stream and\r\n * retrieve the answer from the transcription service from the callback\r\n *\r\n * @param {RecordingResult} recordingResult a recordingResult object which\r\n * includes the recorded audio stream as a blob\r\n * @param {Function} callback  which will retrieve the a RecordingResult with\r\n *        the answer as a WordArray\r\n */\r\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\r\n    this.sendRequest(recordingResult.blob, response => {\r\n        if (this.verify(response)) {\r\n            recordingResult.wordArray = this.formatResponse(response);\r\n        } else {\r\n            console.log('the retrieved response from the server is not valid!');\r\n            recordingResult.wordArray = [];\r\n        }\r\n        callback(recordingResult);\r\n    });\r\n};\r\n\r\n/**\r\n * Abstract method which will rend the recorder audio stream to the implemented\r\n * transcription service and will retrieve an answer, which will be\r\n * called on the given callback method\r\n *\r\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\r\n * @param {function} callback function which will retrieve the answer\r\n *                            from the service\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\r\n    throw new Error('TranscriptionService.sendRequest is abstract');\r\n};\r\n\r\n/**\r\n * Abstract method which will parse the output from the implemented\r\n * transcription service to the expected format\r\n *\r\n * The transcriber class expect an array of word objects, where each word\r\n * object is one transcribed word by the service.\r\n *\r\n * The expected output of this method is an array of word objects, in\r\n * the correct order. That is, the first object in the array is the first word\r\n * being said, and the last word in the array is the last word being said\r\n *\r\n * @param response the answer from the speech-to-text server which needs to be\r\n *                 formatted\r\n * @return {Array<Word>} an array of Word objects\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.formatResponse = function(response) {\r\n    throw new Error('TranscriptionService.format is abstract');\r\n};\r\n\r\n/**\r\n * Abstract method which will verify that the response from the server is valid\r\n *\r\n * @param response the response from the server\r\n * @return {boolean} true if response is valid, false otherwise\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.verify = function(response) {\r\n    throw new Error('TranscriptionService.verify is abstract');\r\n};\r\n\r\nmodule.exports = TranscriptionService;\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n /* eslint-env node */\r\n'use strict';\r\n\r\nlet logDisabled_ = true;\r\nlet deprecationWarnings_ = true;\r\n\r\n/**\r\n * Extract browser version out of the provided user agent string.\r\n *\r\n * @param {!string} uastring userAgent string.\r\n * @param {!string} expr Regular expression used as match criteria.\r\n * @param {!number} pos position in the version string to be returned.\r\n * @return {!number} browser version.\r\n */\r\nexport function extractVersion(uastring, expr, pos) {\r\n  const match = uastring.match(expr);\r\n  return match && match.length >= pos && parseInt(match[pos], 10);\r\n}\r\n\r\n// Wraps the peerconnection event eventNameToWrap in a function\r\n// which returns the modified event object (or false to prevent\r\n// the event).\r\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const proto = window.RTCPeerConnection.prototype;\r\n  const nativeAddEventListener = proto.addEventListener;\r\n  proto.addEventListener = function(nativeEventName, cb) {\r\n    if (nativeEventName !== eventNameToWrap) {\r\n      return nativeAddEventListener.apply(this, arguments);\r\n    }\r\n    const wrappedCallback = (e) => {\r\n      const modifiedEvent = wrapper(e);\r\n      if (modifiedEvent) {\r\n        cb(modifiedEvent);\r\n      }\r\n    };\r\n    this._eventMap = this._eventMap || {};\r\n    this._eventMap[cb] = wrappedCallback;\r\n    return nativeAddEventListener.apply(this, [nativeEventName,\r\n      wrappedCallback]);\r\n  };\r\n\r\n  const nativeRemoveEventListener = proto.removeEventListener;\r\n  proto.removeEventListener = function(nativeEventName, cb) {\r\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\r\n        || !this._eventMap[cb]) {\r\n      return nativeRemoveEventListener.apply(this, arguments);\r\n    }\r\n    const unwrappedCb = this._eventMap[cb];\r\n    delete this._eventMap[cb];\r\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\r\n      unwrappedCb]);\r\n  };\r\n\r\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\r\n    get() {\r\n      return this['_on' + eventNameToWrap];\r\n    },\r\n    set(cb) {\r\n      if (this['_on' + eventNameToWrap]) {\r\n        this.removeEventListener(eventNameToWrap,\r\n            this['_on' + eventNameToWrap]);\r\n        delete this['_on' + eventNameToWrap];\r\n      }\r\n      if (cb) {\r\n        this.addEventListener(eventNameToWrap,\r\n            this['_on' + eventNameToWrap] = cb);\r\n      }\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n  });\r\n}\r\n\r\nexport function disableLog(bool) {\r\n  if (typeof bool !== 'boolean') {\r\n    return new Error('Argument type: ' + typeof bool +\r\n        '. Please use a boolean.');\r\n  }\r\n  logDisabled_ = bool;\r\n  return (bool) ? 'adapter.js logging disabled' :\r\n      'adapter.js logging enabled';\r\n}\r\n\r\n/**\r\n * Disable or enable deprecation warnings\r\n * @param {!boolean} bool set to true to disable warnings.\r\n */\r\nexport function disableWarnings(bool) {\r\n  if (typeof bool !== 'boolean') {\r\n    return new Error('Argument type: ' + typeof bool +\r\n        '. Please use a boolean.');\r\n  }\r\n  deprecationWarnings_ = !bool;\r\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\r\n}\r\n\r\nexport function log() {\r\n  if (typeof window === 'object') {\r\n    if (logDisabled_) {\r\n      return;\r\n    }\r\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\r\n      console.log.apply(console, arguments);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\r\n */\r\nexport function deprecated(oldMethod, newMethod) {\r\n  if (!deprecationWarnings_) {\r\n    return;\r\n  }\r\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\r\n      ' instead.');\r\n}\r\n\r\n/**\r\n * Browser detector.\r\n *\r\n * @return {object} result containing browser and version\r\n *     properties.\r\n */\r\nexport function detectBrowser(window) {\r\n  const {navigator} = window;\r\n\r\n  // Returned result object.\r\n  const result = {browser: null, version: null};\r\n\r\n  // Fail early if it's not a browser\r\n  if (typeof window === 'undefined' || !window.navigator) {\r\n    result.browser = 'Not a browser.';\r\n    return result;\r\n  }\r\n\r\n  if (navigator.mozGetUserMedia) { // Firefox.\r\n    result.browser = 'firefox';\r\n    result.version = extractVersion(navigator.userAgent,\r\n        /Firefox\\/(\\d+)\\./, 1);\r\n  } else if (navigator.webkitGetUserMedia ||\r\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\r\n       !window.RTCIceGatherer)) {\r\n    // Chrome, Chromium, Webview, Opera.\r\n    // Version matches Chrome/WebRTC version.\r\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\r\n    // more complicated fallback to webkitRTCPeerConnection.\r\n    result.browser = 'chrome';\r\n    result.version = extractVersion(navigator.userAgent,\r\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\r\n  } else if (navigator.mediaDevices &&\r\n      navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\r\n    result.browser = 'edge';\r\n    result.version = extractVersion(navigator.userAgent,\r\n        /Edge\\/(\\d+).(\\d+)$/, 2);\r\n  } else if (window.RTCPeerConnection &&\r\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\r\n    result.browser = 'safari';\r\n    result.version = extractVersion(navigator.userAgent,\r\n        /AppleWebKit\\/(\\d+)\\./, 1);\r\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\r\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\r\n  } else { // Default fallthrough: not supported.\r\n    result.browser = 'Not a supported browser.';\r\n    return result;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Checks if something is an object.\r\n *\r\n * @param {*} val The something you want to check.\r\n * @return true if val is an object, false otherwise.\r\n */\r\nfunction isObject(val) {\r\n  return Object.prototype.toString.call(val) === '[object Object]';\r\n}\r\n\r\n/**\r\n * Remove all empty objects and undefined values\r\n * from a nested object -- an enhanced and vanilla version\r\n * of Lodash's `compact`.\r\n */\r\nexport function compactObject(data) {\r\n  if (!isObject(data)) {\r\n    return data;\r\n  }\r\n\r\n  return Object.keys(data).reduce(function(accumulator, key) {\r\n    const isObj = isObject(data[key]);\r\n    const value = isObj ? compactObject(data[key]) : data[key];\r\n    const isEmptyObject = isObj && !Object.keys(value).length;\r\n    if (value === undefined || isEmptyObject) {\r\n      return accumulator;\r\n    }\r\n    return Object.assign(accumulator, {[key]: value});\r\n  }, {});\r\n}\r\n\r\n/* iterates the stats graph recursively. */\r\nexport function walkStats(stats, base, resultSet) {\r\n  if (!base || resultSet.has(base.id)) {\r\n    return;\r\n  }\r\n  resultSet.set(base.id, base);\r\n  Object.keys(base).forEach(name => {\r\n    if (name.endsWith('Id')) {\r\n      walkStats(stats, stats.get(base[name]), resultSet);\r\n    } else if (name.endsWith('Ids')) {\r\n      base[name].forEach(id => {\r\n        walkStats(stats, stats.get(id), resultSet);\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n/* filter getStats for a sender/receiver track. */\r\nexport function filterStats(result, track, outbound) {\r\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\r\n  const filteredResult = new Map();\r\n  if (track === null) {\r\n    return filteredResult;\r\n  }\r\n  const trackStats = [];\r\n  result.forEach(value => {\r\n    if (value.type === 'track' &&\r\n        value.trackIdentifier === track.id) {\r\n      trackStats.push(value);\r\n    }\r\n  });\r\n  trackStats.forEach(trackStat => {\r\n    result.forEach(stats => {\r\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\r\n        walkStats(result, stats, filteredResult);\r\n      }\r\n    });\r\n  });\r\n  return filteredResult;\r\n}\r\n\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\nimport * as utils from '../utils.js';\r\nconst logging = utils.log;\r\n\r\nexport function shimGetUserMedia(window) {\r\n  const navigator = window && window.navigator;\r\n\r\n  if (!navigator.mediaDevices) {\r\n    return;\r\n  }\r\n\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  const constraintsToChrome_ = function(c) {\r\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\r\n      return c;\r\n    }\r\n    const cc = {};\r\n    Object.keys(c).forEach(key => {\r\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\r\n        return;\r\n      }\r\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\r\n      if (r.exact !== undefined && typeof r.exact === 'number') {\r\n        r.min = r.max = r.exact;\r\n      }\r\n      const oldname_ = function(prefix, name) {\r\n        if (prefix) {\r\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\r\n        }\r\n        return (name === 'deviceId') ? 'sourceId' : name;\r\n      };\r\n      if (r.ideal !== undefined) {\r\n        cc.optional = cc.optional || [];\r\n        let oc = {};\r\n        if (typeof r.ideal === 'number') {\r\n          oc[oldname_('min', key)] = r.ideal;\r\n          cc.optional.push(oc);\r\n          oc = {};\r\n          oc[oldname_('max', key)] = r.ideal;\r\n          cc.optional.push(oc);\r\n        } else {\r\n          oc[oldname_('', key)] = r.ideal;\r\n          cc.optional.push(oc);\r\n        }\r\n      }\r\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\r\n        cc.mandatory = cc.mandatory || {};\r\n        cc.mandatory[oldname_('', key)] = r.exact;\r\n      } else {\r\n        ['min', 'max'].forEach(mix => {\r\n          if (r[mix] !== undefined) {\r\n            cc.mandatory = cc.mandatory || {};\r\n            cc.mandatory[oldname_(mix, key)] = r[mix];\r\n          }\r\n        });\r\n      }\r\n    });\r\n    if (c.advanced) {\r\n      cc.optional = (cc.optional || []).concat(c.advanced);\r\n    }\r\n    return cc;\r\n  };\r\n\r\n  const shimConstraints_ = function(constraints, func) {\r\n    if (browserDetails.version >= 61) {\r\n      return func(constraints);\r\n    }\r\n    constraints = JSON.parse(JSON.stringify(constraints));\r\n    if (constraints && typeof constraints.audio === 'object') {\r\n      const remap = function(obj, a, b) {\r\n        if (a in obj && !(b in obj)) {\r\n          obj[b] = obj[a];\r\n          delete obj[a];\r\n        }\r\n      };\r\n      constraints = JSON.parse(JSON.stringify(constraints));\r\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\r\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\r\n      constraints.audio = constraintsToChrome_(constraints.audio);\r\n    }\r\n    if (constraints && typeof constraints.video === 'object') {\r\n      // Shim facingMode for mobile & surface pro.\r\n      let face = constraints.video.facingMode;\r\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\r\n      const getSupportedFacingModeLies = browserDetails.version < 66;\r\n\r\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\r\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\r\n          !(navigator.mediaDevices.getSupportedConstraints &&\r\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\r\n            !getSupportedFacingModeLies)) {\r\n        delete constraints.video.facingMode;\r\n        let matches;\r\n        if (face.exact === 'environment' || face.ideal === 'environment') {\r\n          matches = ['back', 'rear'];\r\n        } else if (face.exact === 'user' || face.ideal === 'user') {\r\n          matches = ['front'];\r\n        }\r\n        if (matches) {\r\n          // Look for matches in label, or use last cam for back (typical).\r\n          return navigator.mediaDevices.enumerateDevices()\r\n          .then(devices => {\r\n            devices = devices.filter(d => d.kind === 'videoinput');\r\n            let dev = devices.find(d => matches.some(match =>\r\n              d.label.toLowerCase().includes(match)));\r\n            if (!dev && devices.length && matches.includes('back')) {\r\n              dev = devices[devices.length - 1]; // more likely the back cam\r\n            }\r\n            if (dev) {\r\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\r\n                                                        {ideal: dev.deviceId};\r\n            }\r\n            constraints.video = constraintsToChrome_(constraints.video);\r\n            logging('chrome: ' + JSON.stringify(constraints));\r\n            return func(constraints);\r\n          });\r\n        }\r\n      }\r\n      constraints.video = constraintsToChrome_(constraints.video);\r\n    }\r\n    logging('chrome: ' + JSON.stringify(constraints));\r\n    return func(constraints);\r\n  };\r\n\r\n  const shimError_ = function(e) {\r\n    if (browserDetails.version >= 64) {\r\n      return e;\r\n    }\r\n    return {\r\n      name: {\r\n        PermissionDeniedError: 'NotAllowedError',\r\n        PermissionDismissedError: 'NotAllowedError',\r\n        InvalidStateError: 'NotAllowedError',\r\n        DevicesNotFoundError: 'NotFoundError',\r\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\r\n        TrackStartError: 'NotReadableError',\r\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\r\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\r\n        TabCaptureError: 'AbortError',\r\n        ScreenCaptureError: 'AbortError',\r\n        DeviceCaptureError: 'AbortError'\r\n      }[e.name] || e.name,\r\n      message: e.message,\r\n      constraint: e.constraint || e.constraintName,\r\n      toString() {\r\n        return this.name + (this.message && ': ') + this.message;\r\n      }\r\n    };\r\n  };\r\n\r\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\r\n    shimConstraints_(constraints, c => {\r\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\r\n        if (onError) {\r\n          onError(shimError_(e));\r\n        }\r\n      });\r\n    });\r\n  };\r\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\r\n\r\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\r\n  // function which returns a Promise, it does not accept spec-style\r\n  // constraints.\r\n  if (navigator.mediaDevices.getUserMedia) {\r\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\r\n        bind(navigator.mediaDevices);\r\n    navigator.mediaDevices.getUserMedia = function(cs) {\r\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\r\n        if (c.audio && !stream.getAudioTracks().length ||\r\n            c.video && !stream.getVideoTracks().length) {\r\n          stream.getTracks().forEach(track => {\r\n            track.stop();\r\n          });\r\n          throw new DOMException('', 'NotFoundError');\r\n        }\r\n        return stream;\r\n      }, e => Promise.reject(shimError_(e))));\r\n    };\r\n  }\r\n}\r\n","/*\r\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\nexport function shimGetDisplayMedia(window, getSourceId) {\r\n  if (window.navigator.mediaDevices &&\r\n    'getDisplayMedia' in window.navigator.mediaDevices) {\r\n    return;\r\n  }\r\n  if (!(window.navigator.mediaDevices)) {\r\n    return;\r\n  }\r\n  // getSourceId is a function that returns a promise resolving with\r\n  // the sourceId of the screen/window/tab to be shared.\r\n  if (typeof getSourceId !== 'function') {\r\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\r\n        'a function');\r\n    return;\r\n  }\r\n  window.navigator.mediaDevices.getDisplayMedia =\r\n    function getDisplayMedia(constraints) {\r\n      return getSourceId(constraints)\r\n        .then(sourceId => {\r\n          const widthSpecified = constraints.video && constraints.video.width;\r\n          const heightSpecified = constraints.video &&\r\n            constraints.video.height;\r\n          const frameRateSpecified = constraints.video &&\r\n            constraints.video.frameRate;\r\n          constraints.video = {\r\n            mandatory: {\r\n              chromeMediaSource: 'desktop',\r\n              chromeMediaSourceId: sourceId,\r\n              maxFrameRate: frameRateSpecified || 3\r\n            }\r\n          };\r\n          if (widthSpecified) {\r\n            constraints.video.mandatory.maxWidth = widthSpecified;\r\n          }\r\n          if (heightSpecified) {\r\n            constraints.video.mandatory.maxHeight = heightSpecified;\r\n          }\r\n          return window.navigator.mediaDevices.getUserMedia(constraints);\r\n        });\r\n    };\r\n}\r\n","\r\n/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n /* eslint-env node */\r\n'use strict';\r\nimport * as utils from '../utils.js';\r\n\r\nexport {shimGetUserMedia} from './getusermedia';\r\nexport {shimGetDisplayMedia} from './getdisplaymedia';\r\n\r\nexport function shimMediaStream(window) {\r\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\r\n}\r\n\r\nexport function shimOnTrack(window) {\r\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\r\n      window.RTCPeerConnection.prototype)) {\r\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\r\n      get() {\r\n        return this._ontrack;\r\n      },\r\n      set(f) {\r\n        if (this._ontrack) {\r\n          this.removeEventListener('track', this._ontrack);\r\n        }\r\n        this.addEventListener('track', this._ontrack = f);\r\n      },\r\n      enumerable: true,\r\n      configurable: true\r\n    });\r\n    const origSetRemoteDescription =\r\n        window.RTCPeerConnection.prototype.setRemoteDescription;\r\n    window.RTCPeerConnection.prototype.setRemoteDescription =\r\n      function setRemoteDescription() {\r\n        if (!this._ontrackpoly) {\r\n          this._ontrackpoly = (e) => {\r\n            // onaddstream does not fire when a track is added to an existing\r\n            // stream. But stream.onaddtrack is implemented so we use that.\r\n            e.stream.addEventListener('addtrack', te => {\r\n              let receiver;\r\n              if (window.RTCPeerConnection.prototype.getReceivers) {\r\n                receiver = this.getReceivers()\r\n                  .find(r => r.track && r.track.id === te.track.id);\r\n              } else {\r\n                receiver = {track: te.track};\r\n              }\r\n\r\n              const event = new Event('track');\r\n              event.track = te.track;\r\n              event.receiver = receiver;\r\n              event.transceiver = {receiver};\r\n              event.streams = [e.stream];\r\n              this.dispatchEvent(event);\r\n            });\r\n            e.stream.getTracks().forEach(track => {\r\n              let receiver;\r\n              if (window.RTCPeerConnection.prototype.getReceivers) {\r\n                receiver = this.getReceivers()\r\n                  .find(r => r.track && r.track.id === track.id);\r\n              } else {\r\n                receiver = {track};\r\n              }\r\n              const event = new Event('track');\r\n              event.track = track;\r\n              event.receiver = receiver;\r\n              event.transceiver = {receiver};\r\n              event.streams = [e.stream];\r\n              this.dispatchEvent(event);\r\n            });\r\n          };\r\n          this.addEventListener('addstream', this._ontrackpoly);\r\n        }\r\n        return origSetRemoteDescription.apply(this, arguments);\r\n      };\r\n  } else {\r\n    // even if RTCRtpTransceiver is in window, it is only used and\r\n    // emitted in unified-plan. Unfortunately this means we need\r\n    // to unconditionally wrap the event.\r\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\r\n      if (!e.transceiver) {\r\n        Object.defineProperty(e, 'transceiver',\r\n          {value: {receiver: e.receiver}});\r\n      }\r\n      return e;\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimGetSendersWithDtmf(window) {\r\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\r\n  if (typeof window === 'object' && window.RTCPeerConnection &&\r\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\r\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\r\n    const shimSenderWithDtmf = function(pc, track) {\r\n      return {\r\n        track,\r\n        get dtmf() {\r\n          if (this._dtmf === undefined) {\r\n            if (track.kind === 'audio') {\r\n              this._dtmf = pc.createDTMFSender(track);\r\n            } else {\r\n              this._dtmf = null;\r\n            }\r\n          }\r\n          return this._dtmf;\r\n        },\r\n        _pc: pc\r\n      };\r\n    };\r\n\r\n    // augment addTrack when getSenders is not available.\r\n    if (!window.RTCPeerConnection.prototype.getSenders) {\r\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n        this._senders = this._senders || [];\r\n        return this._senders.slice(); // return a copy of the internal state.\r\n      };\r\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n      window.RTCPeerConnection.prototype.addTrack =\r\n        function addTrack(track, stream) {\r\n          let sender = origAddTrack.apply(this, arguments);\r\n          if (!sender) {\r\n            sender = shimSenderWithDtmf(this, track);\r\n            this._senders.push(sender);\r\n          }\r\n          return sender;\r\n        };\r\n\r\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\r\n      window.RTCPeerConnection.prototype.removeTrack =\r\n        function removeTrack(sender) {\r\n          origRemoveTrack.apply(this, arguments);\r\n          const idx = this._senders.indexOf(sender);\r\n          if (idx !== -1) {\r\n            this._senders.splice(idx, 1);\r\n          }\r\n        };\r\n    }\r\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\r\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n      this._senders = this._senders || [];\r\n      origAddStream.apply(this, [stream]);\r\n      stream.getTracks().forEach(track => {\r\n        this._senders.push(shimSenderWithDtmf(this, track));\r\n      });\r\n    };\r\n\r\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\r\n    window.RTCPeerConnection.prototype.removeStream =\r\n      function removeStream(stream) {\r\n        this._senders = this._senders || [];\r\n        origRemoveStream.apply(this, [stream]);\r\n\r\n        stream.getTracks().forEach(track => {\r\n          const sender = this._senders.find(s => s.track === track);\r\n          if (sender) { // remove sender\r\n            this._senders.splice(this._senders.indexOf(sender), 1);\r\n          }\r\n        });\r\n      };\r\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\r\n             'getSenders' in window.RTCPeerConnection.prototype &&\r\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\r\n             window.RTCRtpSender &&\r\n             !('dtmf' in window.RTCRtpSender.prototype)) {\r\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\r\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n      const senders = origGetSenders.apply(this, []);\r\n      senders.forEach(sender => sender._pc = this);\r\n      return senders;\r\n    };\r\n\r\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\r\n      get() {\r\n        if (this._dtmf === undefined) {\r\n          if (this.track.kind === 'audio') {\r\n            this._dtmf = this._pc.createDTMFSender(this.track);\r\n          } else {\r\n            this._dtmf = null;\r\n          }\r\n        }\r\n        return this._dtmf;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimGetStats(window) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n\r\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\r\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\r\n    const [selector, onSucc, onErr] = arguments;\r\n\r\n    // If selector is a function then we are in the old style stats so just\r\n    // pass back the original getStats format to avoid breaking old users.\r\n    if (arguments.length > 0 && typeof selector === 'function') {\r\n      return origGetStats.apply(this, arguments);\r\n    }\r\n\r\n    // When spec-style getStats is supported, return those when called with\r\n    // either no arguments or the selector argument is null.\r\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\r\n        typeof selector !== 'function')) {\r\n      return origGetStats.apply(this, []);\r\n    }\r\n\r\n    const fixChromeStats_ = function(response) {\r\n      const standardReport = {};\r\n      const reports = response.result();\r\n      reports.forEach(report => {\r\n        const standardStats = {\r\n          id: report.id,\r\n          timestamp: report.timestamp,\r\n          type: {\r\n            localcandidate: 'local-candidate',\r\n            remotecandidate: 'remote-candidate'\r\n          }[report.type] || report.type\r\n        };\r\n        report.names().forEach(name => {\r\n          standardStats[name] = report.stat(name);\r\n        });\r\n        standardReport[standardStats.id] = standardStats;\r\n      });\r\n\r\n      return standardReport;\r\n    };\r\n\r\n    // shim getStats with maplike support\r\n    const makeMapStats = function(stats) {\r\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\r\n    };\r\n\r\n    if (arguments.length >= 2) {\r\n      const successCallbackWrapper_ = function(response) {\r\n        onSucc(makeMapStats(fixChromeStats_(response)));\r\n      };\r\n\r\n      return origGetStats.apply(this, [successCallbackWrapper_,\r\n        selector]);\r\n    }\r\n\r\n    // promise-support\r\n    return new Promise((resolve, reject) => {\r\n      origGetStats.apply(this, [\r\n        function(response) {\r\n          resolve(makeMapStats(fixChromeStats_(response)));\r\n        }, reject]);\r\n    }).then(onSucc, onErr);\r\n  };\r\n}\r\n\r\nexport function shimSenderReceiverGetStats(window) {\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\r\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\r\n    return;\r\n  }\r\n\r\n  // shim sender stats.\r\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\r\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\r\n    if (origGetSenders) {\r\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n        const senders = origGetSenders.apply(this, []);\r\n        senders.forEach(sender => sender._pc = this);\r\n        return senders;\r\n      };\r\n    }\r\n\r\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n    if (origAddTrack) {\r\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\r\n        const sender = origAddTrack.apply(this, arguments);\r\n        sender._pc = this;\r\n        return sender;\r\n      };\r\n    }\r\n    window.RTCRtpSender.prototype.getStats = function getStats() {\r\n      const sender = this;\r\n      return this._pc.getStats().then(result =>\r\n        /* Note: this will include stats of all senders that\r\n         *   send a track with the same id as sender.track as\r\n         *   it is not possible to identify the RTCRtpSender.\r\n         */\r\n        utils.filterStats(result, sender.track, true));\r\n    };\r\n  }\r\n\r\n  // shim receiver stats.\r\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\r\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\r\n    if (origGetReceivers) {\r\n      window.RTCPeerConnection.prototype.getReceivers =\r\n        function getReceivers() {\r\n          const receivers = origGetReceivers.apply(this, []);\r\n          receivers.forEach(receiver => receiver._pc = this);\r\n          return receivers;\r\n        };\r\n    }\r\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\r\n      e.receiver._pc = e.srcElement;\r\n      return e;\r\n    });\r\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\r\n      const receiver = this;\r\n      return this._pc.getStats().then(result =>\r\n        utils.filterStats(result, receiver.track, false));\r\n    };\r\n  }\r\n\r\n  if (!('getStats' in window.RTCRtpSender.prototype &&\r\n      'getStats' in window.RTCRtpReceiver.prototype)) {\r\n    return;\r\n  }\r\n\r\n  // shim RTCPeerConnection.getStats(track).\r\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\r\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\r\n    if (arguments.length > 0 &&\r\n        arguments[0] instanceof window.MediaStreamTrack) {\r\n      const track = arguments[0];\r\n      let sender;\r\n      let receiver;\r\n      let err;\r\n      this.getSenders().forEach(s => {\r\n        if (s.track === track) {\r\n          if (sender) {\r\n            err = true;\r\n          } else {\r\n            sender = s;\r\n          }\r\n        }\r\n      });\r\n      this.getReceivers().forEach(r => {\r\n        if (r.track === track) {\r\n          if (receiver) {\r\n            err = true;\r\n          } else {\r\n            receiver = r;\r\n          }\r\n        }\r\n        return r.track === track;\r\n      });\r\n      if (err || (sender && receiver)) {\r\n        return Promise.reject(new DOMException(\r\n          'There are more than one sender or receiver for the track.',\r\n          'InvalidAccessError'));\r\n      } else if (sender) {\r\n        return sender.getStats();\r\n      } else if (receiver) {\r\n        return receiver.getStats();\r\n      }\r\n      return Promise.reject(new DOMException(\r\n        'There is no sender or receiver for the track.',\r\n        'InvalidAccessError'));\r\n    }\r\n    return origGetStats.apply(this, arguments);\r\n  };\r\n}\r\n\r\nexport function shimAddTrackRemoveTrackWithNative(window) {\r\n  // shim addTrack/removeTrack with native variants in order to make\r\n  // the interactions with legacy getLocalStreams behave as in other browsers.\r\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\r\n  window.RTCPeerConnection.prototype.getLocalStreams =\r\n    function getLocalStreams() {\r\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n      return Object.keys(this._shimmedLocalStreams)\r\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\r\n    };\r\n\r\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n  window.RTCPeerConnection.prototype.addTrack =\r\n    function addTrack(track, stream) {\r\n      if (!stream) {\r\n        return origAddTrack.apply(this, arguments);\r\n      }\r\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n\r\n      const sender = origAddTrack.apply(this, arguments);\r\n      if (!this._shimmedLocalStreams[stream.id]) {\r\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\r\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\r\n        this._shimmedLocalStreams[stream.id].push(sender);\r\n      }\r\n      return sender;\r\n    };\r\n\r\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\r\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n\r\n    stream.getTracks().forEach(track => {\r\n      const alreadyExists = this.getSenders().find(s => s.track === track);\r\n      if (alreadyExists) {\r\n        throw new DOMException('Track already exists.',\r\n            'InvalidAccessError');\r\n      }\r\n    });\r\n    const existingSenders = this.getSenders();\r\n    origAddStream.apply(this, arguments);\r\n    const newSenders = this.getSenders()\r\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\r\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\r\n  };\r\n\r\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\r\n  window.RTCPeerConnection.prototype.removeStream =\r\n    function removeStream(stream) {\r\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n      delete this._shimmedLocalStreams[stream.id];\r\n      return origRemoveStream.apply(this, arguments);\r\n    };\r\n\r\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\r\n  window.RTCPeerConnection.prototype.removeTrack =\r\n    function removeTrack(sender) {\r\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n      if (sender) {\r\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\r\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\r\n          if (idx !== -1) {\r\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\r\n          }\r\n          if (this._shimmedLocalStreams[streamId].length === 1) {\r\n            delete this._shimmedLocalStreams[streamId];\r\n          }\r\n        });\r\n      }\r\n      return origRemoveTrack.apply(this, arguments);\r\n    };\r\n}\r\n\r\nexport function shimAddTrackRemoveTrack(window) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const browserDetails = utils.detectBrowser(window);\r\n  // shim addTrack and removeTrack.\r\n  if (window.RTCPeerConnection.prototype.addTrack &&\r\n      browserDetails.version >= 65) {\r\n    return shimAddTrackRemoveTrackWithNative(window);\r\n  }\r\n\r\n  // also shim pc.getLocalStreams when addTrack is shimmed\r\n  // to return the original streams.\r\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\r\n      .getLocalStreams;\r\n  window.RTCPeerConnection.prototype.getLocalStreams =\r\n    function getLocalStreams() {\r\n      const nativeStreams = origGetLocalStreams.apply(this);\r\n      this._reverseStreams = this._reverseStreams || {};\r\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\r\n    };\r\n\r\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\r\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n    this._streams = this._streams || {};\r\n    this._reverseStreams = this._reverseStreams || {};\r\n\r\n    stream.getTracks().forEach(track => {\r\n      const alreadyExists = this.getSenders().find(s => s.track === track);\r\n      if (alreadyExists) {\r\n        throw new DOMException('Track already exists.',\r\n            'InvalidAccessError');\r\n      }\r\n    });\r\n    // Add identity mapping for consistency with addTrack.\r\n    // Unless this is being used with a stream from addTrack.\r\n    if (!this._reverseStreams[stream.id]) {\r\n      const newStream = new window.MediaStream(stream.getTracks());\r\n      this._streams[stream.id] = newStream;\r\n      this._reverseStreams[newStream.id] = stream;\r\n      stream = newStream;\r\n    }\r\n    origAddStream.apply(this, [stream]);\r\n  };\r\n\r\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\r\n  window.RTCPeerConnection.prototype.removeStream =\r\n    function removeStream(stream) {\r\n      this._streams = this._streams || {};\r\n      this._reverseStreams = this._reverseStreams || {};\r\n\r\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\r\n      delete this._reverseStreams[(this._streams[stream.id] ?\r\n          this._streams[stream.id].id : stream.id)];\r\n      delete this._streams[stream.id];\r\n    };\r\n\r\n  window.RTCPeerConnection.prototype.addTrack =\r\n    function addTrack(track, stream) {\r\n      if (this.signalingState === 'closed') {\r\n        throw new DOMException(\r\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\r\n          'InvalidStateError');\r\n      }\r\n      const streams = [].slice.call(arguments, 1);\r\n      if (streams.length !== 1 ||\r\n          !streams[0].getTracks().find(t => t === track)) {\r\n        // this is not fully correct but all we can manage without\r\n        // [[associated MediaStreams]] internal slot.\r\n        throw new DOMException(\r\n          'The adapter.js addTrack polyfill only supports a single ' +\r\n          ' stream which is associated with the specified track.',\r\n          'NotSupportedError');\r\n      }\r\n\r\n      const alreadyExists = this.getSenders().find(s => s.track === track);\r\n      if (alreadyExists) {\r\n        throw new DOMException('Track already exists.',\r\n            'InvalidAccessError');\r\n      }\r\n\r\n      this._streams = this._streams || {};\r\n      this._reverseStreams = this._reverseStreams || {};\r\n      const oldStream = this._streams[stream.id];\r\n      if (oldStream) {\r\n        // this is using odd Chrome behaviour, use with caution:\r\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\r\n        // Note: we rely on the high-level addTrack/dtmf shim to\r\n        // create the sender with a dtmf sender.\r\n        oldStream.addTrack(track);\r\n\r\n        // Trigger ONN async.\r\n        Promise.resolve().then(() => {\r\n          this.dispatchEvent(new Event('negotiationneeded'));\r\n        });\r\n      } else {\r\n        const newStream = new window.MediaStream([track]);\r\n        this._streams[stream.id] = newStream;\r\n        this._reverseStreams[newStream.id] = stream;\r\n        this.addStream(newStream);\r\n      }\r\n      return this.getSenders().find(s => s.track === track);\r\n    };\r\n\r\n  // replace the internal stream id with the external one and\r\n  // vice versa.\r\n  function replaceInternalStreamId(pc, description) {\r\n    let sdp = description.sdp;\r\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\r\n      const externalStream = pc._reverseStreams[internalId];\r\n      const internalStream = pc._streams[externalStream.id];\r\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\r\n          externalStream.id);\r\n    });\r\n    return new RTCSessionDescription({\r\n      type: description.type,\r\n      sdp\r\n    });\r\n  }\r\n  function replaceExternalStreamId(pc, description) {\r\n    let sdp = description.sdp;\r\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\r\n      const externalStream = pc._reverseStreams[internalId];\r\n      const internalStream = pc._streams[externalStream.id];\r\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\r\n          internalStream.id);\r\n    });\r\n    return new RTCSessionDescription({\r\n      type: description.type,\r\n      sdp\r\n    });\r\n  }\r\n  ['createOffer', 'createAnswer'].forEach(function(method) {\r\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\r\n    const methodObj = {[method]() {\r\n      const args = arguments;\r\n      const isLegacyCall = arguments.length &&\r\n          typeof arguments[0] === 'function';\r\n      if (isLegacyCall) {\r\n        return nativeMethod.apply(this, [\r\n          (description) => {\r\n            const desc = replaceInternalStreamId(this, description);\r\n            args[0].apply(null, [desc]);\r\n          },\r\n          (err) => {\r\n            if (args[1]) {\r\n              args[1].apply(null, err);\r\n            }\r\n          }, arguments[2]\r\n        ]);\r\n      }\r\n      return nativeMethod.apply(this, arguments)\r\n      .then(description => replaceInternalStreamId(this, description));\r\n    }};\r\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\r\n  });\r\n\r\n  const origSetLocalDescription =\r\n      window.RTCPeerConnection.prototype.setLocalDescription;\r\n  window.RTCPeerConnection.prototype.setLocalDescription =\r\n    function setLocalDescription() {\r\n      if (!arguments.length || !arguments[0].type) {\r\n        return origSetLocalDescription.apply(this, arguments);\r\n      }\r\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\r\n      return origSetLocalDescription.apply(this, arguments);\r\n    };\r\n\r\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\r\n\r\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\r\n      window.RTCPeerConnection.prototype, 'localDescription');\r\n  Object.defineProperty(window.RTCPeerConnection.prototype,\r\n      'localDescription', {\r\n        get() {\r\n          const description = origLocalDescription.get.apply(this);\r\n          if (description.type === '') {\r\n            return description;\r\n          }\r\n          return replaceInternalStreamId(this, description);\r\n        }\r\n      });\r\n\r\n  window.RTCPeerConnection.prototype.removeTrack =\r\n    function removeTrack(sender) {\r\n      if (this.signalingState === 'closed') {\r\n        throw new DOMException(\r\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\r\n          'InvalidStateError');\r\n      }\r\n      // We can not yet check for sender instanceof RTCRtpSender\r\n      // since we shim RTPSender. So we check if sender._pc is set.\r\n      if (!sender._pc) {\r\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\r\n            'does not implement interface RTCRtpSender.', 'TypeError');\r\n      }\r\n      const isLocal = sender._pc === this;\r\n      if (!isLocal) {\r\n        throw new DOMException('Sender was not created by this connection.',\r\n            'InvalidAccessError');\r\n      }\r\n\r\n      // Search for the native stream the senders track belongs to.\r\n      this._streams = this._streams || {};\r\n      let stream;\r\n      Object.keys(this._streams).forEach(streamid => {\r\n        const hasTrack = this._streams[streamid].getTracks()\r\n          .find(track => sender.track === track);\r\n        if (hasTrack) {\r\n          stream = this._streams[streamid];\r\n        }\r\n      });\r\n\r\n      if (stream) {\r\n        if (stream.getTracks().length === 1) {\r\n          // if this is the last track of the stream, remove the stream. This\r\n          // takes care of any shimmed _senders.\r\n          this.removeStream(this._reverseStreams[stream.id]);\r\n        } else {\r\n          // relying on the same odd chrome behaviour as above.\r\n          stream.removeTrack(sender.track);\r\n        }\r\n        this.dispatchEvent(new Event('negotiationneeded'));\r\n      }\r\n    };\r\n}\r\n\r\nexport function shimPeerConnection(window) {\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\r\n    // very basic support for old versions.\r\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\r\n  }\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n\r\n  const addIceCandidateNullSupported =\r\n    window.RTCPeerConnection.prototype.addIceCandidate.length === 0;\r\n\r\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\r\n  if (browserDetails.version < 53) {\r\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\r\n        .forEach(function(method) {\r\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\r\n          const methodObj = {[method]() {\r\n            arguments[0] = new ((method === 'addIceCandidate') ?\r\n                window.RTCIceCandidate :\r\n                window.RTCSessionDescription)(arguments[0]);\r\n            return nativeMethod.apply(this, arguments);\r\n          }};\r\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\r\n        });\r\n  }\r\n\r\n  // support for addIceCandidate(null or undefined)\r\n  const nativeAddIceCandidate =\r\n      window.RTCPeerConnection.prototype.addIceCandidate;\r\n  window.RTCPeerConnection.prototype.addIceCandidate =\r\n    function addIceCandidate() {\r\n      if (!addIceCandidateNullSupported && !arguments[0]) {\r\n        if (arguments[1]) {\r\n          arguments[1].apply(null);\r\n        }\r\n        return Promise.resolve();\r\n      }\r\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\r\n      // in older versions. Native support planned for Chrome M77.\r\n      if (browserDetails.version < 78 &&\r\n        arguments[0] && arguments[0].candidate === '') {\r\n        return Promise.resolve();\r\n      }\r\n      return nativeAddIceCandidate.apply(this, arguments);\r\n    };\r\n}\r\n\r\nexport function fixNegotiationNeeded(window) {\r\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\r\n    const pc = e.target;\r\n    if (pc.signalingState !== 'stable') {\r\n      return;\r\n    }\r\n    return e;\r\n  });\r\n}\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n /* eslint-env node */\r\n'use strict';\r\n\r\nexport function shimGetUserMedia(window) {\r\n  const navigator = window && window.navigator;\r\n\r\n  const shimError_ = function(e) {\r\n    return {\r\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\r\n      message: e.message,\r\n      constraint: e.constraint,\r\n      toString() {\r\n        return this.name;\r\n      }\r\n    };\r\n  };\r\n\r\n  // getUserMedia error shim.\r\n  const origGetUserMedia = navigator.mediaDevices.getUserMedia.\r\n      bind(navigator.mediaDevices);\r\n  navigator.mediaDevices.getUserMedia = function(c) {\r\n    return origGetUserMedia(c).catch(e => Promise.reject(shimError_(e)));\r\n  };\r\n}\r\n","/*\r\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n /* eslint-env node */\r\n'use strict';\r\n\r\nexport function shimGetDisplayMedia(window) {\r\n  if (!('getDisplayMedia' in window.navigator)) {\r\n    return;\r\n  }\r\n  if (!(window.navigator.mediaDevices)) {\r\n    return;\r\n  }\r\n  if (window.navigator.mediaDevices &&\r\n    'getDisplayMedia' in window.navigator.mediaDevices) {\r\n    return;\r\n  }\r\n  window.navigator.mediaDevices.getDisplayMedia =\r\n    window.navigator.getDisplayMedia.bind(window.navigator);\r\n}\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport * as utils from '../utils';\r\nimport {filterIceServers} from './filtericeservers';\r\nimport shimRTCPeerConnection from 'rtcpeerconnection-shim';\r\n\r\nexport {shimGetUserMedia} from './getusermedia';\r\nexport {shimGetDisplayMedia} from './getdisplaymedia';\r\n\r\nexport function shimPeerConnection(window) {\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  if (window.RTCIceGatherer) {\r\n    if (!window.RTCIceCandidate) {\r\n      window.RTCIceCandidate = function RTCIceCandidate(args) {\r\n        return args;\r\n      };\r\n    }\r\n    if (!window.RTCSessionDescription) {\r\n      window.RTCSessionDescription = function RTCSessionDescription(args) {\r\n        return args;\r\n      };\r\n    }\r\n    // this adds an additional event listener to MediaStrackTrack that signals\r\n    // when a tracks enabled property was changed. Workaround for a bug in\r\n    // addStream, see below. No longer required in 15025+\r\n    if (browserDetails.version < 15025) {\r\n      const origMSTEnabled = Object.getOwnPropertyDescriptor(\r\n          window.MediaStreamTrack.prototype, 'enabled');\r\n      Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\r\n        set(value) {\r\n          origMSTEnabled.set.call(this, value);\r\n          const ev = new Event('enabled');\r\n          ev.enabled = value;\r\n          this.dispatchEvent(ev);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // ORTC defines the DTMF sender a bit different.\r\n  // https://github.com/w3c/ortc/issues/714\r\n  if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\r\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\r\n      get() {\r\n        if (this._dtmf === undefined) {\r\n          if (this.track.kind === 'audio') {\r\n            this._dtmf = new window.RTCDtmfSender(this);\r\n          } else if (this.track.kind === 'video') {\r\n            this._dtmf = null;\r\n          }\r\n        }\r\n        return this._dtmf;\r\n      }\r\n    });\r\n  }\r\n  // Edge currently only implements the RTCDtmfSender, not the\r\n  // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*\r\n  if (window.RTCDtmfSender && !window.RTCDTMFSender) {\r\n    window.RTCDTMFSender = window.RTCDtmfSender;\r\n  }\r\n\r\n  const RTCPeerConnectionShim = shimRTCPeerConnection(window,\r\n      browserDetails.version);\r\n  window.RTCPeerConnection = function RTCPeerConnection(config) {\r\n    if (config && config.iceServers) {\r\n      config.iceServers = filterIceServers(config.iceServers,\r\n        browserDetails.version);\r\n      utils.log('ICE servers after filtering:', config.iceServers);\r\n    }\r\n    return new RTCPeerConnectionShim(config);\r\n  };\r\n  window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;\r\n}\r\n\r\nexport function shimReplaceTrack(window) {\r\n  // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\r\n  if (window.RTCRtpSender &&\r\n      !('replaceTrack' in window.RTCRtpSender.prototype)) {\r\n    window.RTCRtpSender.prototype.replaceTrack =\r\n        window.RTCRtpSender.prototype.setTrack;\r\n  }\r\n}\r\n","/*\r\n *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport * as utils from '../utils';\r\n// Edge does not like\r\n// 1) stun: filtered after 14393 unless ?transport=udp is present\r\n// 2) turn: that does not have all of turn:host:port?transport=udp\r\n// 3) turn: with ipv6 addresses\r\n// 4) turn: occurring muliple times\r\nexport function filterIceServers(iceServers, edgeVersion) {\r\n  let hasTurn = false;\r\n  iceServers = JSON.parse(JSON.stringify(iceServers));\r\n  return iceServers.filter(server => {\r\n    if (server && (server.urls || server.url)) {\r\n      var urls = server.urls || server.url;\r\n      if (server.url && !server.urls) {\r\n        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\r\n      }\r\n      const isString = typeof urls === 'string';\r\n      if (isString) {\r\n        urls = [urls];\r\n      }\r\n      urls = urls.filter(url => {\r\n        // filter STUN unconditionally.\r\n        if (url.indexOf('stun:') === 0) {\r\n          return false;\r\n        }\r\n\r\n        const validTurn = url.startsWith('turn') &&\r\n            !url.startsWith('turn:[') &&\r\n            url.includes('transport=udp');\r\n        if (validTurn && !hasTurn) {\r\n          hasTurn = true;\r\n          return true;\r\n        }\r\n        return validTurn && !hasTurn;\r\n      });\r\n\r\n      delete server.url;\r\n      server.urls = isString ? urls[0] : urls;\r\n      return !!urls.length;\r\n    }\r\n  });\r\n}\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport * as utils from '../utils';\r\n\r\nexport function shimGetUserMedia(window) {\r\n  const browserDetails = utils.detectBrowser(window);\r\n  const navigator = window && window.navigator;\r\n  const MediaStreamTrack = window && window.MediaStreamTrack;\r\n\r\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\r\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\r\n    utils.deprecated('navigator.getUserMedia',\r\n        'navigator.mediaDevices.getUserMedia');\r\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\r\n  };\r\n\r\n  if (!(browserDetails.version > 55 &&\r\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\r\n    const remap = function(obj, a, b) {\r\n      if (a in obj && !(b in obj)) {\r\n        obj[b] = obj[a];\r\n        delete obj[a];\r\n      }\r\n    };\r\n\r\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\r\n        bind(navigator.mediaDevices);\r\n    navigator.mediaDevices.getUserMedia = function(c) {\r\n      if (typeof c === 'object' && typeof c.audio === 'object') {\r\n        c = JSON.parse(JSON.stringify(c));\r\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\r\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\r\n      }\r\n      return nativeGetUserMedia(c);\r\n    };\r\n\r\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\r\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\r\n      MediaStreamTrack.prototype.getSettings = function() {\r\n        const obj = nativeGetSettings.apply(this, arguments);\r\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\r\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\r\n        return obj;\r\n      };\r\n    }\r\n\r\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\r\n      const nativeApplyConstraints =\r\n        MediaStreamTrack.prototype.applyConstraints;\r\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\r\n        if (this.kind === 'audio' && typeof c === 'object') {\r\n          c = JSON.parse(JSON.stringify(c));\r\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\r\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\r\n        }\r\n        return nativeApplyConstraints.apply(this, [c]);\r\n      };\r\n    }\r\n  }\r\n}\r\n","/*\r\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\r\n  if (window.navigator.mediaDevices &&\r\n    'getDisplayMedia' in window.navigator.mediaDevices) {\r\n    return;\r\n  }\r\n  if (!(window.navigator.mediaDevices)) {\r\n    return;\r\n  }\r\n  window.navigator.mediaDevices.getDisplayMedia =\r\n    function getDisplayMedia(constraints) {\r\n      if (!(constraints && constraints.video)) {\r\n        const err = new DOMException('getDisplayMedia without video ' +\r\n            'constraints is undefined');\r\n        err.name = 'NotFoundError';\r\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\r\n        err.code = 8;\r\n        return Promise.reject(err);\r\n      }\r\n      if (constraints.video === true) {\r\n        constraints.video = {mediaSource: preferredMediaSource};\r\n      } else {\r\n        constraints.video.mediaSource = preferredMediaSource;\r\n      }\r\n      return window.navigator.mediaDevices.getUserMedia(constraints);\r\n    };\r\n}\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport * as utils from '../utils';\r\nexport {shimGetUserMedia} from './getusermedia';\r\nexport {shimGetDisplayMedia} from './getdisplaymedia';\r\n\r\nexport function shimOnTrack(window) {\r\n  if (typeof window === 'object' && window.RTCTrackEvent &&\r\n      ('receiver' in window.RTCTrackEvent.prototype) &&\r\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\r\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\r\n      get() {\r\n        return {receiver: this.receiver};\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimPeerConnection(window) {\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  if (typeof window !== 'object' ||\r\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\r\n    return; // probably media.peerconnection.enabled=false in about:config\r\n  }\r\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\r\n    // very basic support for old versions.\r\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\r\n  }\r\n\r\n  if (browserDetails.version < 53) {\r\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\r\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\r\n        .forEach(function(method) {\r\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\r\n          const methodObj = {[method]() {\r\n            arguments[0] = new ((method === 'addIceCandidate') ?\r\n                window.RTCIceCandidate :\r\n                window.RTCSessionDescription)(arguments[0]);\r\n            return nativeMethod.apply(this, arguments);\r\n          }};\r\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\r\n        });\r\n  }\r\n\r\n  // support for addIceCandidate(null or undefined)\r\n  // as well as ignoring {sdpMid, candidate: \"\"}\r\n  if (browserDetails.version < 68) {\r\n    const nativeAddIceCandidate =\r\n        window.RTCPeerConnection.prototype.addIceCandidate;\r\n    window.RTCPeerConnection.prototype.addIceCandidate =\r\n    function addIceCandidate() {\r\n      if (!arguments[0]) {\r\n        if (arguments[1]) {\r\n          arguments[1].apply(null);\r\n        }\r\n        return Promise.resolve();\r\n      }\r\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\r\n      // in older versions.\r\n      if (arguments[0] && arguments[0].candidate === '') {\r\n        return Promise.resolve();\r\n      }\r\n      return nativeAddIceCandidate.apply(this, arguments);\r\n    };\r\n  }\r\n\r\n  const modernStatsTypes = {\r\n    inboundrtp: 'inbound-rtp',\r\n    outboundrtp: 'outbound-rtp',\r\n    candidatepair: 'candidate-pair',\r\n    localcandidate: 'local-candidate',\r\n    remotecandidate: 'remote-candidate'\r\n  };\r\n\r\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\r\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\r\n    const [selector, onSucc, onErr] = arguments;\r\n    return nativeGetStats.apply(this, [selector || null])\r\n      .then(stats => {\r\n        if (browserDetails.version < 53 && !onSucc) {\r\n          // Shim only promise getStats with spec-hyphens in type names\r\n          // Leave callback version alone; misc old uses of forEach before Map\r\n          try {\r\n            stats.forEach(stat => {\r\n              stat.type = modernStatsTypes[stat.type] || stat.type;\r\n            });\r\n          } catch (e) {\r\n            if (e.name !== 'TypeError') {\r\n              throw e;\r\n            }\r\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\r\n            stats.forEach((stat, i) => {\r\n              stats.set(i, Object.assign({}, stat, {\r\n                type: modernStatsTypes[stat.type] || stat.type\r\n              }));\r\n            });\r\n          }\r\n        }\r\n        return stats;\r\n      })\r\n      .then(onSucc, onErr);\r\n  };\r\n}\r\n\r\nexport function shimSenderGetStats(window) {\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\r\n      window.RTCRtpSender)) {\r\n    return;\r\n  }\r\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\r\n    return;\r\n  }\r\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\r\n  if (origGetSenders) {\r\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n      const senders = origGetSenders.apply(this, []);\r\n      senders.forEach(sender => sender._pc = this);\r\n      return senders;\r\n    };\r\n  }\r\n\r\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n  if (origAddTrack) {\r\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\r\n      const sender = origAddTrack.apply(this, arguments);\r\n      sender._pc = this;\r\n      return sender;\r\n    };\r\n  }\r\n  window.RTCRtpSender.prototype.getStats = function getStats() {\r\n    return this.track ? this._pc.getStats(this.track) :\r\n        Promise.resolve(new Map());\r\n  };\r\n}\r\n\r\nexport function shimReceiverGetStats(window) {\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\r\n      window.RTCRtpSender)) {\r\n    return;\r\n  }\r\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\r\n    return;\r\n  }\r\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\r\n  if (origGetReceivers) {\r\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\r\n      const receivers = origGetReceivers.apply(this, []);\r\n      receivers.forEach(receiver => receiver._pc = this);\r\n      return receivers;\r\n    };\r\n  }\r\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\r\n    e.receiver._pc = e.srcElement;\r\n    return e;\r\n  });\r\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\r\n    return this._pc.getStats(this.track);\r\n  };\r\n}\r\n\r\nexport function shimRemoveStream(window) {\r\n  if (!window.RTCPeerConnection ||\r\n      'removeStream' in window.RTCPeerConnection.prototype) {\r\n    return;\r\n  }\r\n  window.RTCPeerConnection.prototype.removeStream =\r\n    function removeStream(stream) {\r\n      utils.deprecated('removeStream', 'removeTrack');\r\n      this.getSenders().forEach(sender => {\r\n        if (sender.track && stream.getTracks().includes(sender.track)) {\r\n          this.removeTrack(sender);\r\n        }\r\n      });\r\n    };\r\n}\r\n\r\nexport function shimRTCDataChannel(window) {\r\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\r\n  if (window.DataChannel && !window.RTCDataChannel) {\r\n    window.RTCDataChannel = window.DataChannel;\r\n  }\r\n}\r\n\r\nexport function shimAddTransceiver(window) {\r\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\r\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\r\n    return;\r\n  }\r\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\r\n  if (origAddTransceiver) {\r\n    window.RTCPeerConnection.prototype.addTransceiver =\r\n      function addTransceiver() {\r\n        this.setParametersPromises = [];\r\n        const initParameters = arguments[1];\r\n        const shouldPerformCheck = initParameters &&\r\n                                  'sendEncodings' in initParameters;\r\n        if (shouldPerformCheck) {\r\n          // If sendEncodings params are provided, validate grammar\r\n          initParameters.sendEncodings.forEach((encodingParam) => {\r\n            if ('rid' in encodingParam) {\r\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\r\n              if (!ridRegex.test(encodingParam.rid)) {\r\n                throw new TypeError('Invalid RID value provided.');\r\n              }\r\n            }\r\n            if ('scaleResolutionDownBy' in encodingParam) {\r\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\r\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\r\n              }\r\n            }\r\n            if ('maxFramerate' in encodingParam) {\r\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\r\n                throw new RangeError('max_framerate must be >= 0.0');\r\n              }\r\n            }\r\n          });\r\n        }\r\n        const transceiver = origAddTransceiver.apply(this, arguments);\r\n        if (shouldPerformCheck) {\r\n          // Check if the init options were applied. If not we do this in an\r\n          // asynchronous way and save the promise reference in a global object.\r\n          // This is an ugly hack, but at the same time is way more robust than\r\n          // checking the sender parameters before and after the createOffer\r\n          // Also note that after the createoffer we are not 100% sure that\r\n          // the params were asynchronously applied so we might miss the\r\n          // opportunity to recreate offer.\r\n          const {sender} = transceiver;\r\n          const params = sender.getParameters();\r\n          if (!('encodings' in params)) {\r\n            params.encodings = initParameters.sendEncodings;\r\n            this.setParametersPromises.push(\r\n              sender.setParameters(params)\r\n              .catch(() => {})\r\n            );\r\n          }\r\n        }\r\n        return transceiver;\r\n      };\r\n  }\r\n}\r\n\r\nexport function shimCreateOffer(window) {\r\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\r\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\r\n    return;\r\n  }\r\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\r\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\r\n    if (this.setParametersPromises && this.setParametersPromises.length) {\r\n      return Promise.all(this.setParametersPromises)\r\n      .then(() => {\r\n        return origCreateOffer.apply(this, arguments);\r\n      })\r\n      .finally(() => {\r\n        this.setParametersPromises = [];\r\n      });\r\n    }\r\n    return origCreateOffer.apply(this, arguments);\r\n  };\r\n}\r\n\r\nexport function shimCreateAnswer(window) {\r\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\r\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\r\n    return;\r\n  }\r\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\r\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\r\n    if (this.setParametersPromises && this.setParametersPromises.length) {\r\n      return Promise.all(this.setParametersPromises)\r\n      .then(() => {\r\n        return origCreateAnswer.apply(this, arguments);\r\n      })\r\n      .finally(() => {\r\n        this.setParametersPromises = [];\r\n      });\r\n    }\r\n    return origCreateAnswer.apply(this, arguments);\r\n  };\r\n}","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n'use strict';\r\nimport * as utils from '../utils';\r\n\r\nexport function shimLocalStreamsAPI(window) {\r\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\r\n    window.RTCPeerConnection.prototype.getLocalStreams =\r\n      function getLocalStreams() {\r\n        if (!this._localStreams) {\r\n          this._localStreams = [];\r\n        }\r\n        return this._localStreams;\r\n      };\r\n  }\r\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\r\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\r\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n      if (!this._localStreams) {\r\n        this._localStreams = [];\r\n      }\r\n      if (!this._localStreams.includes(stream)) {\r\n        this._localStreams.push(stream);\r\n      }\r\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\r\n      // Safari orders by track id.\r\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\r\n        stream));\r\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\r\n        stream));\r\n    };\r\n\r\n    window.RTCPeerConnection.prototype.addTrack =\r\n      function addTrack(track) {\r\n        const stream = arguments[1];\r\n        if (stream) {\r\n          if (!this._localStreams) {\r\n            this._localStreams = [stream];\r\n          } else if (!this._localStreams.includes(stream)) {\r\n            this._localStreams.push(stream);\r\n          }\r\n        }\r\n        return _addTrack.apply(this, arguments);\r\n      };\r\n  }\r\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\r\n    window.RTCPeerConnection.prototype.removeStream =\r\n      function removeStream(stream) {\r\n        if (!this._localStreams) {\r\n          this._localStreams = [];\r\n        }\r\n        const index = this._localStreams.indexOf(stream);\r\n        if (index === -1) {\r\n          return;\r\n        }\r\n        this._localStreams.splice(index, 1);\r\n        const tracks = stream.getTracks();\r\n        this.getSenders().forEach(sender => {\r\n          if (tracks.includes(sender.track)) {\r\n            this.removeTrack(sender);\r\n          }\r\n        });\r\n      };\r\n  }\r\n}\r\n\r\nexport function shimRemoteStreamsAPI(window) {\r\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\r\n    window.RTCPeerConnection.prototype.getRemoteStreams =\r\n      function getRemoteStreams() {\r\n        return this._remoteStreams ? this._remoteStreams : [];\r\n      };\r\n  }\r\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\r\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\r\n      get() {\r\n        return this._onaddstream;\r\n      },\r\n      set(f) {\r\n        if (this._onaddstream) {\r\n          this.removeEventListener('addstream', this._onaddstream);\r\n          this.removeEventListener('track', this._onaddstreampoly);\r\n        }\r\n        this.addEventListener('addstream', this._onaddstream = f);\r\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\r\n          e.streams.forEach(stream => {\r\n            if (!this._remoteStreams) {\r\n              this._remoteStreams = [];\r\n            }\r\n            if (this._remoteStreams.includes(stream)) {\r\n              return;\r\n            }\r\n            this._remoteStreams.push(stream);\r\n            const event = new Event('addstream');\r\n            event.stream = stream;\r\n            this.dispatchEvent(event);\r\n          });\r\n        });\r\n      }\r\n    });\r\n    const origSetRemoteDescription =\r\n      window.RTCPeerConnection.prototype.setRemoteDescription;\r\n    window.RTCPeerConnection.prototype.setRemoteDescription =\r\n      function setRemoteDescription() {\r\n        const pc = this;\r\n        if (!this._onaddstreampoly) {\r\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\r\n            e.streams.forEach(stream => {\r\n              if (!pc._remoteStreams) {\r\n                pc._remoteStreams = [];\r\n              }\r\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\r\n                return;\r\n              }\r\n              pc._remoteStreams.push(stream);\r\n              const event = new Event('addstream');\r\n              event.stream = stream;\r\n              pc.dispatchEvent(event);\r\n            });\r\n          });\r\n        }\r\n        return origSetRemoteDescription.apply(pc, arguments);\r\n      };\r\n  }\r\n}\r\n\r\nexport function shimCallbacksAPI(window) {\r\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const prototype = window.RTCPeerConnection.prototype;\r\n  const origCreateOffer = prototype.createOffer;\r\n  const origCreateAnswer = prototype.createAnswer;\r\n  const setLocalDescription = prototype.setLocalDescription;\r\n  const setRemoteDescription = prototype.setRemoteDescription;\r\n  const addIceCandidate = prototype.addIceCandidate;\r\n\r\n  prototype.createOffer =\r\n    function createOffer(successCallback, failureCallback) {\r\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\r\n      const promise = origCreateOffer.apply(this, [options]);\r\n      if (!failureCallback) {\r\n        return promise;\r\n      }\r\n      promise.then(successCallback, failureCallback);\r\n      return Promise.resolve();\r\n    };\r\n\r\n  prototype.createAnswer =\r\n    function createAnswer(successCallback, failureCallback) {\r\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\r\n      const promise = origCreateAnswer.apply(this, [options]);\r\n      if (!failureCallback) {\r\n        return promise;\r\n      }\r\n      promise.then(successCallback, failureCallback);\r\n      return Promise.resolve();\r\n    };\r\n\r\n  let withCallback = function(description, successCallback, failureCallback) {\r\n    const promise = setLocalDescription.apply(this, [description]);\r\n    if (!failureCallback) {\r\n      return promise;\r\n    }\r\n    promise.then(successCallback, failureCallback);\r\n    return Promise.resolve();\r\n  };\r\n  prototype.setLocalDescription = withCallback;\r\n\r\n  withCallback = function(description, successCallback, failureCallback) {\r\n    const promise = setRemoteDescription.apply(this, [description]);\r\n    if (!failureCallback) {\r\n      return promise;\r\n    }\r\n    promise.then(successCallback, failureCallback);\r\n    return Promise.resolve();\r\n  };\r\n  prototype.setRemoteDescription = withCallback;\r\n\r\n  withCallback = function(candidate, successCallback, failureCallback) {\r\n    const promise = addIceCandidate.apply(this, [candidate]);\r\n    if (!failureCallback) {\r\n      return promise;\r\n    }\r\n    promise.then(successCallback, failureCallback);\r\n    return Promise.resolve();\r\n  };\r\n  prototype.addIceCandidate = withCallback;\r\n}\r\n\r\nexport function shimGetUserMedia(window) {\r\n  const navigator = window && window.navigator;\r\n\r\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n    // shim not needed in Safari 12.1\r\n    const mediaDevices = navigator.mediaDevices;\r\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\r\n    navigator.mediaDevices.getUserMedia = (constraints) => {\r\n      return _getUserMedia(shimConstraints(constraints));\r\n    };\r\n  }\r\n\r\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\r\n    navigator.mediaDevices.getUserMedia) {\r\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\r\n      navigator.mediaDevices.getUserMedia(constraints)\r\n      .then(cb, errcb);\r\n    }.bind(navigator);\r\n  }\r\n}\r\n\r\nexport function shimConstraints(constraints) {\r\n  if (constraints && constraints.video !== undefined) {\r\n    return Object.assign({},\r\n      constraints,\r\n      {video: utils.compactObject(constraints.video)}\r\n    );\r\n  }\r\n\r\n  return constraints;\r\n}\r\n\r\nexport function shimRTCIceServerUrls(window) {\r\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\r\n  const OrigPeerConnection = window.RTCPeerConnection;\r\n  window.RTCPeerConnection =\r\n    function RTCPeerConnection(pcConfig, pcConstraints) {\r\n      if (pcConfig && pcConfig.iceServers) {\r\n        const newIceServers = [];\r\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\r\n          let server = pcConfig.iceServers[i];\r\n          if (!server.hasOwnProperty('urls') &&\r\n              server.hasOwnProperty('url')) {\r\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\r\n            server = JSON.parse(JSON.stringify(server));\r\n            server.urls = server.url;\r\n            delete server.url;\r\n            newIceServers.push(server);\r\n          } else {\r\n            newIceServers.push(pcConfig.iceServers[i]);\r\n          }\r\n        }\r\n        pcConfig.iceServers = newIceServers;\r\n      }\r\n      return new OrigPeerConnection(pcConfig, pcConstraints);\r\n    };\r\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\r\n  // wrap static methods. Currently just generateCertificate.\r\n  if ('generateCertificate' in window.RTCPeerConnection) {\r\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\r\n      get() {\r\n        return OrigPeerConnection.generateCertificate;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimTrackEventTransceiver(window) {\r\n  // Add event.transceiver member over deprecated event.receiver\r\n  if (typeof window === 'object' && window.RTCTrackEvent &&\r\n      'receiver' in window.RTCTrackEvent.prototype &&\r\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\r\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\r\n      get() {\r\n        return {receiver: this.receiver};\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimCreateOfferLegacy(window) {\r\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\r\n  window.RTCPeerConnection.prototype.createOffer =\r\n    function createOffer(offerOptions) {\r\n      if (offerOptions) {\r\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\r\n          // support bit values\r\n          offerOptions.offerToReceiveAudio =\r\n            !!offerOptions.offerToReceiveAudio;\r\n        }\r\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\r\n          transceiver.receiver.track.kind === 'audio');\r\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\r\n          if (audioTransceiver.direction === 'sendrecv') {\r\n            if (audioTransceiver.setDirection) {\r\n              audioTransceiver.setDirection('sendonly');\r\n            } else {\r\n              audioTransceiver.direction = 'sendonly';\r\n            }\r\n          } else if (audioTransceiver.direction === 'recvonly') {\r\n            if (audioTransceiver.setDirection) {\r\n              audioTransceiver.setDirection('inactive');\r\n            } else {\r\n              audioTransceiver.direction = 'inactive';\r\n            }\r\n          }\r\n        } else if (offerOptions.offerToReceiveAudio === true &&\r\n            !audioTransceiver) {\r\n          this.addTransceiver('audio');\r\n        }\r\n\r\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\r\n          // support bit values\r\n          offerOptions.offerToReceiveVideo =\r\n            !!offerOptions.offerToReceiveVideo;\r\n        }\r\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\r\n          transceiver.receiver.track.kind === 'video');\r\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\r\n          if (videoTransceiver.direction === 'sendrecv') {\r\n            if (videoTransceiver.setDirection) {\r\n              videoTransceiver.setDirection('sendonly');\r\n            } else {\r\n              videoTransceiver.direction = 'sendonly';\r\n            }\r\n          } else if (videoTransceiver.direction === 'recvonly') {\r\n            if (videoTransceiver.setDirection) {\r\n              videoTransceiver.setDirection('inactive');\r\n            } else {\r\n              videoTransceiver.direction = 'inactive';\r\n            }\r\n          }\r\n        } else if (offerOptions.offerToReceiveVideo === true &&\r\n            !videoTransceiver) {\r\n          this.addTransceiver('video');\r\n        }\r\n      }\r\n      return origCreateOffer.apply(this, arguments);\r\n    };\r\n}\r\n","/*\r\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport SDPUtils from 'sdp';\r\nimport * as utils from './utils';\r\n\r\nexport function shimRTCIceCandidate(window) {\r\n  // foundation is arbitrarily chosen as an indicator for full support for\r\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\r\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\r\n      window.RTCIceCandidate.prototype)) {\r\n    return;\r\n  }\r\n\r\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\r\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\r\n    // Remove the a= which shouldn't be part of the candidate string.\r\n    if (typeof args === 'object' && args.candidate &&\r\n        args.candidate.indexOf('a=') === 0) {\r\n      args = JSON.parse(JSON.stringify(args));\r\n      args.candidate = args.candidate.substr(2);\r\n    }\r\n\r\n    if (args.candidate && args.candidate.length) {\r\n      // Augment the native candidate with the parsed fields.\r\n      const nativeCandidate = new NativeRTCIceCandidate(args);\r\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\r\n      const augmentedCandidate = Object.assign(nativeCandidate,\r\n          parsedCandidate);\r\n\r\n      // Add a serializer that does not serialize the extra attributes.\r\n      augmentedCandidate.toJSON = function toJSON() {\r\n        return {\r\n          candidate: augmentedCandidate.candidate,\r\n          sdpMid: augmentedCandidate.sdpMid,\r\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\r\n          usernameFragment: augmentedCandidate.usernameFragment,\r\n        };\r\n      };\r\n      return augmentedCandidate;\r\n    }\r\n    return new NativeRTCIceCandidate(args);\r\n  };\r\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\r\n\r\n  // Hook up the augmented candidate in onicecandidate and\r\n  // addEventListener('icecandidate', ...)\r\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\r\n    if (e.candidate) {\r\n      Object.defineProperty(e, 'candidate', {\r\n        value: new window.RTCIceCandidate(e.candidate),\r\n        writable: 'false'\r\n      });\r\n    }\r\n    return e;\r\n  });\r\n}\r\n\r\nexport function shimMaxMessageSize(window) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\r\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\r\n      get() {\r\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\r\n      }\r\n    });\r\n  }\r\n\r\n  const sctpInDescription = function(description) {\r\n    if (!description || !description.sdp) {\r\n      return false;\r\n    }\r\n    const sections = SDPUtils.splitSections(description.sdp);\r\n    sections.shift();\r\n    return sections.some(mediaSection => {\r\n      const mLine = SDPUtils.parseMLine(mediaSection);\r\n      return mLine && mLine.kind === 'application'\r\n          && mLine.protocol.indexOf('SCTP') !== -1;\r\n    });\r\n  };\r\n\r\n  const getRemoteFirefoxVersion = function(description) {\r\n    // TODO: Is there a better solution for detecting Firefox?\r\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\r\n    if (match === null || match.length < 2) {\r\n      return -1;\r\n    }\r\n    const version = parseInt(match[1], 10);\r\n    // Test for NaN (yes, this is ugly)\r\n    return version !== version ? -1 : version;\r\n  };\r\n\r\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\r\n    // Every implementation we know can send at least 64 KiB.\r\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\r\n    //       data does not reach the other peer reliably.\r\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\r\n    let canSendMaxMessageSize = 65536;\r\n    if (browserDetails.browser === 'firefox') {\r\n      if (browserDetails.version < 57) {\r\n        if (remoteIsFirefox === -1) {\r\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\r\n          // fragmentation.\r\n          canSendMaxMessageSize = 16384;\r\n        } else {\r\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\r\n          // messages. Thus, supporting ~2 GiB when sending.\r\n          canSendMaxMessageSize = 2147483637;\r\n        }\r\n      } else if (browserDetails.version < 60) {\r\n        // Currently, all FF >= 57 will reset the remote maximum message size\r\n        // to the default value when a data channel is created at a later\r\n        // stage. :(\r\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\r\n        canSendMaxMessageSize =\r\n          browserDetails.version === 57 ? 65535 : 65536;\r\n      } else {\r\n        // FF >= 60 supports sending ~2 GiB\r\n        canSendMaxMessageSize = 2147483637;\r\n      }\r\n    }\r\n    return canSendMaxMessageSize;\r\n  };\r\n\r\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\r\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\r\n    //       every implementation we know supports receiving 65536 bytes.\r\n    let maxMessageSize = 65536;\r\n\r\n    // FF 57 has a slightly incorrect default remote max message size, so\r\n    // we need to adjust it here to avoid a failure when sending.\r\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\r\n    if (browserDetails.browser === 'firefox'\r\n         && browserDetails.version === 57) {\r\n      maxMessageSize = 65535;\r\n    }\r\n\r\n    const match = SDPUtils.matchPrefix(description.sdp,\r\n      'a=max-message-size:');\r\n    if (match.length > 0) {\r\n      maxMessageSize = parseInt(match[0].substr(19), 10);\r\n    } else if (browserDetails.browser === 'firefox' &&\r\n                remoteIsFirefox !== -1) {\r\n      // If the maximum message size is not present in the remote SDP and\r\n      // both local and remote are Firefox, the remote peer can receive\r\n      // ~2 GiB.\r\n      maxMessageSize = 2147483637;\r\n    }\r\n    return maxMessageSize;\r\n  };\r\n\r\n  const origSetRemoteDescription =\r\n      window.RTCPeerConnection.prototype.setRemoteDescription;\r\n  window.RTCPeerConnection.prototype.setRemoteDescription =\r\n    function setRemoteDescription() {\r\n      this._sctp = null;\r\n      // Chrome decided to not expose .sctp in plan-b mode.\r\n      // As usual, adapter.js has to do an 'ugly worakaround'\r\n      // to cover up the mess.\r\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\r\n        const {sdpSemantics} = this.getConfiguration();\r\n        if (sdpSemantics === 'plan-b') {\r\n          Object.defineProperty(this, 'sctp', {\r\n            get() {\r\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\r\n            },\r\n            enumerable: true,\r\n            configurable: true,\r\n          });\r\n        }\r\n      }\r\n\r\n      if (sctpInDescription(arguments[0])) {\r\n        // Check if the remote is FF.\r\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\r\n\r\n        // Get the maximum message size the local peer is capable of sending\r\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\r\n\r\n        // Get the maximum message size of the remote peer.\r\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\r\n\r\n        // Determine final maximum message size\r\n        let maxMessageSize;\r\n        if (canSendMMS === 0 && remoteMMS === 0) {\r\n          maxMessageSize = Number.POSITIVE_INFINITY;\r\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\r\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\r\n        } else {\r\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\r\n        }\r\n\r\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\r\n        // attribute.\r\n        const sctp = {};\r\n        Object.defineProperty(sctp, 'maxMessageSize', {\r\n          get() {\r\n            return maxMessageSize;\r\n          }\r\n        });\r\n        this._sctp = sctp;\r\n      }\r\n\r\n      return origSetRemoteDescription.apply(this, arguments);\r\n    };\r\n}\r\n\r\nexport function shimSendThrowTypeError(window) {\r\n  if (!(window.RTCPeerConnection &&\r\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\r\n    return;\r\n  }\r\n\r\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\r\n  //       message size can be reset for all data channels at a later stage.\r\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\r\n\r\n  function wrapDcSend(dc, pc) {\r\n    const origDataChannelSend = dc.send;\r\n    dc.send = function send() {\r\n      const data = arguments[0];\r\n      const length = data.length || data.size || data.byteLength;\r\n      if (dc.readyState === 'open' &&\r\n          pc.sctp && length > pc.sctp.maxMessageSize) {\r\n        throw new TypeError('Message too large (can send a maximum of ' +\r\n          pc.sctp.maxMessageSize + ' bytes)');\r\n      }\r\n      return origDataChannelSend.apply(dc, arguments);\r\n    };\r\n  }\r\n  const origCreateDataChannel =\r\n    window.RTCPeerConnection.prototype.createDataChannel;\r\n  window.RTCPeerConnection.prototype.createDataChannel =\r\n    function createDataChannel() {\r\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\r\n      wrapDcSend(dataChannel, this);\r\n      return dataChannel;\r\n    };\r\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\r\n    wrapDcSend(e.channel, e.target);\r\n    return e;\r\n  });\r\n}\r\n\r\n\r\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\r\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\r\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\r\n * since DTLS failures would be hidden. See\r\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\r\n * for the Firefox tracking bug.\r\n */\r\nexport function shimConnectionState(window) {\r\n  if (!window.RTCPeerConnection ||\r\n      'connectionState' in window.RTCPeerConnection.prototype) {\r\n    return;\r\n  }\r\n  const proto = window.RTCPeerConnection.prototype;\r\n  Object.defineProperty(proto, 'connectionState', {\r\n    get() {\r\n      return {\r\n        completed: 'connected',\r\n        checking: 'connecting'\r\n      }[this.iceConnectionState] || this.iceConnectionState;\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n  });\r\n  Object.defineProperty(proto, 'onconnectionstatechange', {\r\n    get() {\r\n      return this._onconnectionstatechange || null;\r\n    },\r\n    set(cb) {\r\n      if (this._onconnectionstatechange) {\r\n        this.removeEventListener('connectionstatechange',\r\n            this._onconnectionstatechange);\r\n        delete this._onconnectionstatechange;\r\n      }\r\n      if (cb) {\r\n        this.addEventListener('connectionstatechange',\r\n            this._onconnectionstatechange = cb);\r\n      }\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n  });\r\n\r\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\r\n    const origMethod = proto[method];\r\n    proto[method] = function() {\r\n      if (!this._connectionstatechangepoly) {\r\n        this._connectionstatechangepoly = e => {\r\n          const pc = e.target;\r\n          if (pc._lastConnectionState !== pc.connectionState) {\r\n            pc._lastConnectionState = pc.connectionState;\r\n            const newEvent = new Event('connectionstatechange', e);\r\n            pc.dispatchEvent(newEvent);\r\n          }\r\n          return e;\r\n        };\r\n        this.addEventListener('iceconnectionstatechange',\r\n          this._connectionstatechangepoly);\r\n      }\r\n      return origMethod.apply(this, arguments);\r\n    };\r\n  });\r\n}\r\n\r\nexport function removeAllowExtmapMixed(window) {\r\n  /* remove a=extmap-allow-mixed for Chrome < M71 */\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const browserDetails = utils.detectBrowser(window);\r\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\r\n    return;\r\n  }\r\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\r\n  window.RTCPeerConnection.prototype.setRemoteDescription =\r\n  function setRemoteDescription(desc) {\r\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\r\n      desc.sdp = desc.sdp.split('\\n').filter((line) => {\r\n        return line.trim() !== 'a=extmap-allow-mixed';\r\n      }).join('\\n');\r\n    }\r\n    return nativeSRD.apply(this, arguments);\r\n  };\r\n}\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n\r\n'use strict';\r\n\r\nimport {adapterFactory} from './adapter_factory.js';\r\n\r\nconst adapter = adapterFactory({window});\r\nexport default adapter;\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\nimport * as utils from './utils';\r\n\r\n  // Browser shims.\r\nimport * as chromeShim from './chrome/chrome_shim';\r\nimport * as edgeShim from './edge/edge_shim';\r\nimport * as firefoxShim from './firefox/firefox_shim';\r\nimport * as safariShim from './safari/safari_shim';\r\nimport * as commonShim from './common_shim';\r\n\r\n// Shimming starts here.\r\nexport function adapterFactory({window} = {}, options = {\r\n  shimChrome: true,\r\n  shimFirefox: true,\r\n  shimEdge: true,\r\n  shimSafari: true,\r\n}) {\r\n  // Utils.\r\n  const logging = utils.log;\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  const adapter = {\r\n    browserDetails,\r\n    commonShim,\r\n    extractVersion: utils.extractVersion,\r\n    disableLog: utils.disableLog,\r\n    disableWarnings: utils.disableWarnings\r\n  };\r\n\r\n  // Shim browser if found.\r\n  switch (browserDetails.browser) {\r\n    case 'chrome':\r\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\r\n          !options.shimChrome) {\r\n        logging('Chrome shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming chrome.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = chromeShim;\r\n\r\n      chromeShim.shimGetUserMedia(window);\r\n      chromeShim.shimMediaStream(window);\r\n      chromeShim.shimPeerConnection(window);\r\n      chromeShim.shimOnTrack(window);\r\n      chromeShim.shimAddTrackRemoveTrack(window);\r\n      chromeShim.shimGetSendersWithDtmf(window);\r\n      chromeShim.shimGetStats(window);\r\n      chromeShim.shimSenderReceiverGetStats(window);\r\n      chromeShim.fixNegotiationNeeded(window);\r\n\r\n      commonShim.shimRTCIceCandidate(window);\r\n      commonShim.shimConnectionState(window);\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      commonShim.removeAllowExtmapMixed(window);\r\n      break;\r\n    case 'firefox':\r\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\r\n          !options.shimFirefox) {\r\n        logging('Firefox shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming firefox.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = firefoxShim;\r\n\r\n      firefoxShim.shimGetUserMedia(window);\r\n      firefoxShim.shimPeerConnection(window);\r\n      firefoxShim.shimOnTrack(window);\r\n      firefoxShim.shimRemoveStream(window);\r\n      firefoxShim.shimSenderGetStats(window);\r\n      firefoxShim.shimReceiverGetStats(window);\r\n      firefoxShim.shimRTCDataChannel(window);\r\n      firefoxShim.shimAddTransceiver(window);\r\n      firefoxShim.shimCreateOffer(window);\r\n      firefoxShim.shimCreateAnswer(window);\r\n\r\n      commonShim.shimRTCIceCandidate(window);\r\n      commonShim.shimConnectionState(window);\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      break;\r\n    case 'edge':\r\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\r\n        logging('MS edge shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming edge.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = edgeShim;\r\n\r\n      edgeShim.shimGetUserMedia(window);\r\n      edgeShim.shimGetDisplayMedia(window);\r\n      edgeShim.shimPeerConnection(window);\r\n      edgeShim.shimReplaceTrack(window);\r\n\r\n      // the edge shim implements the full RTCIceCandidate object.\r\n\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      break;\r\n    case 'safari':\r\n      if (!safariShim || !options.shimSafari) {\r\n        logging('Safari shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming safari.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = safariShim;\r\n\r\n      safariShim.shimRTCIceServerUrls(window);\r\n      safariShim.shimCreateOfferLegacy(window);\r\n      safariShim.shimCallbacksAPI(window);\r\n      safariShim.shimLocalStreamsAPI(window);\r\n      safariShim.shimRemoteStreamsAPI(window);\r\n      safariShim.shimTrackEventTransceiver(window);\r\n      safariShim.shimGetUserMedia(window);\r\n\r\n      commonShim.shimRTCIceCandidate(window);\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      commonShim.removeAllowExtmapMixed(window);\r\n      break;\r\n    default:\r\n      logging('Unsupported browser!');\r\n      break;\r\n  }\r\n\r\n  return adapter;\r\n}\r\n"],"sourceRoot":""}