{"version":3,"sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDPUtil.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./modules/xmpp/SDP.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/flags/FeatureFlags.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/SdpTransformUtil.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./node_modules/lodash.clonedeep/index.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/(webpack)/buildin/global.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./node_modules/base64-js/index.js","webpack://JitsiMeetJS/./modules/xmpp/SDPDiffer.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./node_modules/process/browser.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./node_modules/lodash.debounce/index.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/(webpack)/buildin/module.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./node_modules/bowser/es5.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./node_modules/async/lib/async.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/xmpp/RtxModifier.js","webpack://JitsiMeetJS/./modules/xmpp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/qualitycontrol/QualityController.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./service/RTC/MediaDirection.ts","webpack://JitsiMeetJS/./modules/xmpp/SdpSimulcast.ts","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/rng.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/bytesToUuid.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/v4.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/(webpack)/buildin/amd-options.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/./node_modules/timers-browserify/main.js","webpack://JitsiMeetJS/./node_modules/setimmediate/setImmediate.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/edge_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/filtericeservers.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","KICKED","LOCAL_ROLE_CHANGED","MEETING_ID_SET","MESSAGE_RECEIVED","INVITE_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTCIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","DATA_CHANNEL_OPENED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","JVB121_STATUS","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","NO_AUDIO_INPUT","NOISY_MIC","PARTICIPANT_CONN_STATUS_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","FORWARDED_SOURCES_CHANGED","global$1","global","self","_typeof","obj","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","safe_add","x","y","lsw","str2binl","str","Error","bin","charCodeAt","md5_cmn","q","a","b","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","len","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","charAt","binl2hex","hash","String","fromCharCode","binl2str","core_sha1","j","olde","w","e","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","concat","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","document","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","func","childNodes","childNode","nodeType","this","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","undefined","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","arguments","arg","xmlTextNode","sort","attr","setAttribute","k","xmlescape","text","replace","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","toLowerCase","getAttribute","cssText","cssAttrs","split","cssName","cssValue","push","join","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","indexOf","getDomainFromJid","bare","getBareJidFromJid","parts","splice","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","tree","names","keys","map","result","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","id","options","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","_this2","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","handlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","setTimeout","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","Math","random","addProtocolErrorHandler","status_code","callback","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","_this3","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","forEach","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","err","_dataRecv","req","raw","_this6","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","priority","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","test","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","now","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","substr","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","Number","_processRequest","primary_timeout","isNaN","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","Strophe$2","$build$2","new_service","location","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","$msg","BrowserCapabilities","Logger","require","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","AUDIO","PRESENTER","VIDEO","MediaType","__filename","_instances","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","initBackend","callStatsID","callStatsSecret","userName","aliasName","applicationName","getWiFiStatsMethod","confID","siteID","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","CALLSTATS_SCRIPT_URL","loadCallStatsAPI","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","audioLevelsInterval","longTasksStatsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","supportsPerformanceObserver","performanceObserverStats","PerformanceObserverStats","JitsiConferenceEvents","startObserver","stopObserver","getLongTasksStats","removeLongTasksStatsListener","dispose","size","emit","callStats","values","stopCallStats","tpc","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","cs","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","sendDominantSpeakerEvent","roomJid","sendActiveDeviceListEvent","devicesData","globalSet","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","stats","next","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","properties","eventToLog","sendAnalytics","eventName","RTCEvents","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","ENDPOINT_STATS_RECEIVED","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","createConferenceEvent","source","createConnectionStageReachedEvent","stage","createE2eRttEvent","participantId","region","rtt","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createTransportStatsEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","substring","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","index","array","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferCodec","codecName","matchingPayloadTypes","rtp","codec","payload","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","H264","fmtp","item","config","includes","rtxApts","rtxPts","keepPts","rtcpFb","usesAdapter","OLD_GUM_DEFAULT_DEVICES","DEFAULT_CONSTRAINTS","video","height","ideal","max","SS_DEFAULT_FRAME_RATE","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","disableHPF","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevices","availableDevicesPollTimer","emptyFuncton","getConstraints","um","audio","isNewStyleConstraintsSupported","isSafari","mandatory","optional","cameraDeviceId","deviceId","sourceId","facingMode","CameraFacingMode","USER","minFps","maxFps","fps","minFrameRate","maxFrameRate","resolution","Resolutions","width","minWidth","minHeight","maxWidth","maxHeight","setResolutionConstraints","micDeviceId","echoCancellation","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","googNoiseSuppression2","googEchoCancellation2","googAutoGainControl2","isChrome","getSSConstraints","mozMediaSource","mediaSource","frameRate","errmsg","GlobalOnErrorHandler","callErrorHandler","isElectron","screenShareAudio","desktopStream","chromeMediaSource","bandwidth","firefox_fake_device","fake","screen","chromeMediaSourceId","getTrackSSConstraints","desktopSharingFrameRate","updateGrantedPermissions","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","GRANTED_PERMISSIONS","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","groupId","label","updateKnownDevices","pds","devicesReceived","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","slice","RTCUtils","Listenable","super","clearInterval","enumerateDevices","navigator","mediaDevices","then","devices","initEnumerateDevicesWithCallback","usesNewGumFlow","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","wrapAttachMediaStream","srcObject","getStreamID","getTrackID","isChromiumBased","src","srcObjectPropertyName","jitsiObjectURL","URL","createObjectURL","defaultSetVideoSrc","MediaStream","videoTracks","audioTracks","_initPCConstraints","screenObtainer","getUserMediaWithConstraints","isDeviceListAvailable","ds","supportsDeviceChangeEvent","addEventListener","setInterval","pcConstraints","googHighStartBitrate","googPayloadPadding","googScreencastMinBitrate","googCpuOveruseDetection","googCpuOveruseEncodeUsage","googCpuUnderuseThreshold","googCpuOveruseThreshold","p2pPcConstraints","Promise","resolve","reject","getUserMedia","catch","_newGetUserMediaWithConstraints","umDevices","_newGetDesktopMedia","isSupported","supportsVideo","obtainStream","_parseDesktopSharingOptions","obtainAudioAndVideoPermissions","_getAudioAndVideoStreams","streams","audioStream","videoStream","res","audioVideo","addTrack","desktop","sourceType","track","videoType","VideoType","DESKTOP","CAMERA","handleLocalStream","requestingDesktop","avStream","missingTracks","_getMissingTracks","stopMediaStream","desktopSharingSourceDevice","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","desktopSharingSources","gumOptions","trackOptions","newObtainAudioAndVideoPermissions","mediaStreamsMetaData","maybeRequestDesktopDevice","matchingDevice","getTracks","applyConstraints","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","autoGainControl","noiseSuppression","newGetConstraints","desktopAudioTracks","desktopAudioStream","desktopVideoTracks","desktopVideoStream","effects","isDeviceChangeAvailable","deviceType","mediaStream","release","url","revokeObjectURL","isDesktopSharingEnabled","setAudioOutputDevice","getAudioOutputDevice","getCurrentlyAvailableMediaDevices","getEventDataForActiveDevice","deviceData","setSuspendVideo","enable","googSuspendBelowMinBitrate","rtcUtils","origAttachMediaStream","apply","ex","callUnhandledRejectionHandler","promise","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","args","errHandler","peerConnectionIdCounter","rtcTrackIdCounter","_newCreateLocalTracks","mediaStreamMetaData","metaData","getSettings","safeCounterIncrement","JitsiLocalTrack","rtcId","RTC","peerConnections","localTracks","_channel","_lastN","_lastNEndpoints","_forwardedSources","_senderVideoConstraints","_maxFrameHeight","_pinnedEndpoint","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_forwardedSourcesChangeListener","_onForwardedSourcesChanged","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","addListener","destroy","_channelOpenListener","tracksInfo","newTracks","trackInfo","localTrack","createLocalTracks","initializeBridgeChannel","wsUrl","BridgeChannel","logError","msgType","_receiverVideoConstraints","sendNewReceiverVideoConstraintsMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","sendSetLastNMessage","FeatureFlags","isSourceNameSignalingEnabled","sendVideoTypeMessage","_senderVideoConstraintsChanged","senderVideoConstraints","lastNEndpoints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","isInLastN","onCallEnded","setNewReceiverVideoConstraints","isOpen","setReceiverVideoConstraint","maxFrameHeight","setVideoType","sendSourceVideoType","sourceName","sendSourceVideoTypeMessage","selectEndpoints","ids","pinEndpoint","sendPinnedEndpointMessage","eventType","createPeerConnection","signaling","pcConfig","isP2P","abtestSuspendVideo","addPermanentProperties","enableInsertableStreams","encodedInsertableStreams","sdpSemantics","supportsSdpSemantics","forceTurnRelay","iceTransportPolicy","bundlePolicy","newConnection","TraceablePeerConnection","_removePeerConnection","traceablePeerConnection","addLocalTrack","getLastN","getSenderVideoConstraints","getLocalVideoTrack","localVideo","getLocalTracks","getLocalAudioTrack","localAudio","tracks","getType","getRemoteTracks","remoteTracks","pcRemoteTracks","setAudioMute","mutePromises","audioTrack","mute","unmute","all","removeLocalTrack","pos","removeRemoteTracks","owner","removedTracks","pcRemovedTracks","elSelector","isUserStreamById","streamId","closeBridgeChannel","setAudioLevel","audioLevel","getTrackBySSRC","isAudioTrack","sendChannelMessage","to","sendMessage","setLastN","remoteAudioTracks","setAudioOutput","forwardedSources","oldForwardedSources","leavingForwardedSources","enteringForwardedSources","isInForwardedSources","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","once","emitter","eventListener","errorListener","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","existing","warning","newListener","warned","count","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","listeners","prependListener","prependOnceListener","list","position","originalListener","spliceOne","off","rawListeners","eventNames","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","mediaSSRCs","mediaindex","mid","linessrc","idx","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","ssrcMap","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","usesRidsForSimulcast","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpmap","sctpAttrs","number","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","each","_","fb","hasAttribute","fromJingle","jingle","sessionId","groups","$","contents","content","jingle2media","sctp","streamCount","payloadType","__","parameter","hdrExt","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackErrors","constraint","failedConstraintName","getResolutionFromFailedConstraint","removeEventListener","flags","_sourceNameSignaling","sourceNameSignaling","_sendMultipleVideoStreams","sendMultipleVideoStreams","_usesUnifiedPlan","usesUnifiedPlan","enableUnifiedOnChrome","isMultiStreamSupportEnabled","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","version","_detectNWJS","_detectReactNative","product","_detect","bowser","browserInfo","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","BrowserDetection","_bowser","Bowser","getParser","detectedBrowserInfo","_name","_version","getName","isOpera","isIExplorer","isNWJS","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","DummyLocalStorage","clear","_storage","keyName","keyValue","JitsiLocalStorage","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","jitsiLocalStorage","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","WRONG_STATE","DISPLAY_NAME_REQUIRED","VP8","VP9","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","XMPP","token","disconnectInProgress","connectionTimes","authenticatedUser","initStropheUtil","initStropheLogger","enableWebsocketResume","serviceUrl","websocketKeepAlive","XmppConnection","createConnection","bosh","_initStrophePlugins","caps","Caps","clientNode","initFeaturesList","ev","addFeature","disableRtx","enableOpusRed","supportsAudioRed","enableLipSync","rayo","E2EEncryption","getConnection","connectionHandler","credentials","performance","statusStr","getStatusString","XMPPEvents","getStunAndTurnCredentials","_resetState","pingJid","getFeaturesAndIdentities","identities","PING","identity","speakerStatsComponentAddress","conferenceDurationComponentAddress","lobbySupported","f","fr","endsWith","JitsiConnectionEvents","_onPrivateMessage","password","anonymousConnectionFailed","connectionFailed","lastErrorMsg","JitsiConnectionErrors","ping","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","attaching","anonymousdomain","hosts","configDomain","hostname","createRoom","roomName","onCreateResource","roomjid","customDomain","muc","mucNickname","randomHexString","emuc","getJid","getJingleLog","getLog","getXmppLog","dial","getSessions","sessions","disconnectListener","_cleanupXmppConnection","isUsingWebSocket","evType","sendUnavailableBeacon","iceConfig","jvb","iceServers","p2p","p2pStunServers","stunServers","MucConnectionPlugin","JingleConnectionPlugin","RayoConnectionPlugin","deploymentInfo","shard","headersArr","trim","shard_changed","suspend_time","getPingSuspendTime","time_since_last_success","getTimeSinceLastSuccess","room","tryParseJSONAndVerify","jsonString","json","jsonMessage","parsedJson","users","created_timestamp","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","RunningAverage","average","addNext","getAverage","_callStatsUserName","_machineId","_p8","externalStorage","username","UsernameGenerator","generateUsername","generateCallStatsUserName","jitsiMeetId","generateJitsiMeetId","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","ssrcNum","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","msid","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","groupInfo","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","transform","selectMedia","selectedMLine","toRawSDP","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SOURCE_MUTED_CHANGED","SOURCE_VIDEO_TYPE_CHANGED","PENDING","ACTIVE","ENDED","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","order","wrtcFuncNames","fabricEvent","reportType","_fabrics","backend","backendInitialized","atLeastOneFabric","defaultInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","defaultPC","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","configParams","_traceAndCatchBackendCalls","applicationVersion","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","getConnectionPluginDefinition","base","ConnectionPluginListenable","randomElement","randomHexDigit","randomAlphanumStr","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","argsTag","funcTag","genTag","mapTag","setTag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","accumulator","initAccum","isHostObject","mapToArray","overArg","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","Buffer","Uint8Array","getPrototype","objectCreate","propertyIsEnumerable","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","entry","ListCache","MapCache","Stack","__data__","arrayLikeKeys","inherited","isObjectLike","isArrayLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","isIndex","assignValue","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","input","initCloneArray","copyArray","getTag","isFunc","buffer","cloneBuffer","isPrototype","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","Ctor","cloneArrayBuffer","dataView","byteOffset","byteLength","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","symbol","initCloneByTag","stacked","props","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","baseIsNative","isFunction","arrayBuffer","newValue","getMapData","getValue","cache","pairs","LARGE_ARRAY_SIZE","other","ArrayBuffer","ctorString","isLength","baseKeys","CONN_STATUS_CHANGED","_options","_stropheConn","_usesWebsocket","_lastSuccessTracker","LastSuccessTracker","startTracking","_resumeTask","ResumeTask","_deferredIQs","PingConnectionPlugin","onPingThresholdExceeded","_onPingErrorThresholdExceeded","websocket","_status","OPEN","disco","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_maybeStartWSKeepAlive","_processDeferredIQs","cancel","startInterval","_tryResumingConnection","_wsKeepAlive","Events","_clearDeferredIQs","deferred","closeWebsocket","streamManagement","getResumeToken","intervalWithJitter","fetch","timeLeft","sendIQ2","sendBeacon","schedule","ENVIRONMENT","g","objectTag","typedArrayTags","freeProcess","process","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","nativeObjectToString","symToStringTag","SetCache","isArg","isBuff","isType","baseGetTag","isOwn","unmasked","getRawTag","baseIsArguments","baseIsEqual","bitmask","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","convert","isPartial","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","objLength","othLength","skipCtor","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","isMasked","arrLength","seen","arrValue","othIndex","resIndex","arrayFilter","baseUnary","gumFunction","ScreenObtainer","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","jitsiError","obtainScreenOnElectron","supportsGetDisplayMedia","obtainScreenFromGetDisplayMedia","JitsiMeetScreenObtainer","openDesktopPicker","streamType","onGetStreamResponse","errorCallback","getDisplayMedia","cursor","applyConstraintsPromise","videoTrack","errorDetails","errorName","errorMsg","errorStack","currentExecutingScript","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","ParticipantConnectionStatus","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","myUserId","figureOutConnectionStatus","_changeConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","NETWORK_INFO_EVENT","NetworkInfo","_current","isOnline","updateNetworkInfo","networkInfo","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","parseMsid","spec","planB","msidParts","parseSctpDescription","maxMessageSize","maxSizeLine","sctpPort","writeSctpDescription","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","getFocusRecordingUpdate","presence","jibriStatus","initiator","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","Deferred","_key","_keyIndex","_reqs","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceJoined","_onConferenceLeft","_onParticipantLeft","Olm","promises","pId","olmData","_getParticipantOlmData","uuidv4","olm","ciphertext","_encryptKeyInfo","setRejectTimeout","_sendMessage","allSettled","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","keyInfo","base64js","fromByteArray","keyIndex","encrypt","_sendSessionInit","free","_sendError","Session","create_outbound","idKey","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","safeJsonParse","toByteArray","lastKey","isEqual","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","_conferenceJoined","_enabled","_initialized","_e2eeCtx","E2EEContext","_olmAdapter","_ratchetKey","debounce","_ratchetKeyImpl","_rotateKey","_rotateKeyImpl","_onParticipantPropertyChanged","_onParticipantJoined","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","_onOlmIdKeyReady","_onParticipantE2EEChannelReady","_onParticipantKeyUpdated","supportsInsertableStreams","testing","disableE2EE","isEnabled","setEnabled","enabled","_restartMediaSessions","_generateKey","updateKey","setKey","crypto","getRandomValues","_getMediaSessions","_setupSenderE2EEForTrack","setLocalParticipantProperty","cleanup","oldValue","material","importKey","newKey","ratchet","updateCurrentKey","findReceiverForTrack","handleReceiver","sender","findSenderForTrack","handleSender","doesVideoMuteByStreamRemove","isVideoTrack","JingleSessionPC","JingleSession","jingleContents","videoContents","maxFrameHeightSel","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","JingleSessionState","doInitialize","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","videoQuality","disabledCodec","preferredCodec","disableSimulcast","disableH264","preferH264","_abtestSuspendVideoEnabled","startSilent","_signalingLayer","onicecandidate","phase","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","iceConnectionState","reconnect","iceStarted","onnegotiationneeded","remoteDescription","workFunction","finishedCallback","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","enableLayerSuspension","MediaSessionEvents","REMOTE_VIDEO_CONSTRAINTS_CHANGED","getRemoteRecvMaxFrameHeight","idealHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","tmp","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","addIceCandidates","iceCandidates","rtcCandidate","RTCIceCandidate","outerHTML","iceCandidate","addIceCandidate","readSsrcInfo","ssrcElement","setTrackSourceName","setSSRCOwner","i3","ssrcInfoElement","getEndpointId","generateRecvonlySsrc","acceptOffer","jingleOffer","failure","setOfferAnswerCycle","sendSessionAccept","invite","addTracks","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","replaceTransport","jingleOfferElem","originalOffer","clone","remove","newFingerprint","sendTransportAccept","accept","responder","responderJid","sessionModify","transportAccept","medialines","sendTransportReject","transportReject","setSenderMaxBitrates","setMaxBitRate","setSenderVideoConstraint","setSenderVideoDegradationPreference","terminate","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","offerIq","remoteSdp","usesPlanB","findIndex","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTrack","oldTrack","newTrack","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","ssrcLines","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","oldLocalSDP","removeTrackMute","addTrackUnmute","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","PERMISSION_PROMPT_IS_SHOWN","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","len2","encodeChunk","lookup","end","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","SIM_LAYER_RIDS","TPCUtils","videoBitrates","localStreamEncodingsConfig","active","high","low","scaleResolutionDownBy","standard","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","sources","_getStreamEncodings","isSimulcastOn","insertUnifiedPlanSimulcastReceive","usesSdpMungingForSimulcast","simulcast_03","simulcast","simulcastLine","getTrack","transceiverInit","getOriginalStream","sendEncodings","addTransceiver","getTransceivers","addStream","setEncodings","getLocalStreamHeightConstraints","localVideoHeightConstraints","encoding","getTrackId","stopped","localSSRCs","_addedStreams","_extractPrimarySSRC","getParameters","encodings","setParameters","transceivers","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","env","argv","versions","cwd","chdir","dir","umask","AudioContext","webkitAudioContext","LocalStatsCollector","interval","intervalId","intervalMilis","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","ERROR_FEATURE_VERSION_MISMATCH","compareIdentities","some","generateSha","sortedIdentities","accumulatedValue","sortedFeatures","feature","versionToCapabilities","jidToVersion","rooms","_addChatRoom","_removeChatRoom","CAPS","_handleCaps","_onMucMemberLeft","_removeJidToVersionEntry","submit","_generateVersion","removeFeature","getFeatures","_getDiscoInfo","sha","receivedNode","category","_fixChatRoomPresenceMap","addToPresence","_notifyVersionChanged","_identities","_features","oldVersion","packet2JSON","nodes","children","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","ChatRoom","myroomjid","members","presMap","presHandlers","_removeConnListeners","joined","focusMucJid","noBridgeAvailable","moderator","Moderator","enableLobby","lobby","Lobby","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","JitsiTranscriptionStatus","xns","statsId","addVideoInfoToPresence","userRegion","presenceUpdateTime","getLastPresence","mucNick","customJoinPresenceExtensions","disableFocus","allocateConferenceFocus","onConnStatusChanged","fromJoin","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","setLobbyRoomJid","membersOnlyEnabled","meetingId","createNonAnonymousRoom","disableDiscoInfo","getForm","form","formSubmit","onPresence","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","affiliation","isFocus","getFocusUserJid","isHiddenDomain","hiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","botType","nick","statsID","newRole","_initFocus","memberOfThis","displayName","displayJids","att","phone","pin","processNode","mucJid","focusFeatures","supportsRestartByTerminate","setParticipantPropertyListener","tagHandlers","elementName","nickname","sendPrivateMessage","setSubject","subject","onParticipantLeft","skipEvents","onMucMemberLeft","onPresenceUnavailable","destroySelect","reasonSelect","isSelfPresence","isKick","membersKeys","actorSelect","actorNick","onMessage","txt","subjectText","interfaceConfig","APP_NAME","stamp","dateParts","passwordSelect","onPresenceError","lobbyRoomNode","lobbyRoomJid","setAffiliation","grantIQ","kick","kickIQ","lockRoom","onError","onNotSupported","formsubmit","setMembersOnly","formToSubmit","removeFromPresence","getFromPresence","addPresenceListener","removePresenceListener","handlerIdx","isModerator","getMemberRole","peerJid","setVideoMute","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","getMediaPresenceInfo","mutedNode","videoTypeNode","isSIPCallingSupported","isSipGatewayEnabled","hangup","getLobby","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","clean","leave","onMucLeft","doReject","ON","OFF","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","isWebRTCTrackMuted","isLocalAudioTrack","getStreamId","getTrackLabel","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","supportsReceiverStats","getMSID","trackId","TrackVADEmitter","procNodeSampleRate","vadProcessor","jitsiLocalTrack","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","createAudioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","timestamp","score","pcmData","getDeviceId","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","stopStream","getDeviceLabel","_destroyed","AudioContextImpl","E2E_RTT_CHANGED","clearRejectTimeout","_timeout","ms","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","SignalingLayer","getSSRCOwner","getPeerMediaInfo","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","IDENTITY_UPDATED","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","first","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","textEncoder","TextEncoder","subtle","deriveBits","encode","keyBytes","_setEffectInProgress","effect","_startStreamEffect","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","isEnded","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","isReceivingData","storedMSID","_streamEffect","_originalStream","startEffect","_stopStreamEffect","stopEffect","_switchStreamEffect","setEffect","cont","removeTrack","_queueSetMuted","setMuted","_setMuted","logMuteInfo","_removeStreamFromConferenceAsMute","streamOptions","getCameraFacingMode","assign","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","successCallback","_removeLocalTrackAsMute","_setConference","_onByteSentStatsReceived","bytesSent","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackAdded","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","JibriSession","_mode","_setSessionID","setStatus","getError","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getStatus","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setInitiator","setTerminator","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","errorIq","_eventEmitter","_grantedPermissions","JitsiMediaDevicesEvents","_logOutputDevice","_handleGrantedPermissions","_permissionsApiSupported","permissions","query","deviceID","isDevicePermissionGranted","supported","results","every","permissionStatus","isMultipleAudioInputSupported","emitEvent","consoleTransport","globalTransports","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","webpackPolyfill","deprecate","paths","grammar","reg","format","u","z","rate","subtype","sessionConfig","raddr","dir2","RecordingResult","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","createEmptyStream","mimeType","ondataavailable","dataEvent","recorderToRemove","download","Blob","href","click","getRecordingResults","getFileType","JitsiConnection","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","setToken","initJitsiConference","JitsiConference","getConnectionTimes","getLogs","metadata","ua","eventManager","JitsiConferenceEventManager","SignalingLayerImpl","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","wasStopped","connectionQuality","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","resourceCreator","isAuthenticatedUser","setupXMPPListeners","_statsCurrentId","statisticsId","Settings","callStatsUserName","setChatRoom","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","e2eping","E2ePing","setupRTCListeners","qualityController","QualityController","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","setupChatRoomListeners","setupStatisticsListeners","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","VADTalkMutedDetection","DetectionEvents","enableNoisyMicDetection","vadNoiseDetection","VADNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","NoAudioSignalDetection","hasAudioSignal","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","removeXMPPListeners","onMemberLeft","_getActiveMediaSession","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getPerformanceStats","longTasksStats","eventId","addCommandListener","command","removeCommandListener","sendTextMessage","sendPrivateTextMessage","sendCommand","sendCommandOnce","removeCommand","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","addTrackPromises","_setupNewTrack","_sendBridgeVideoTypeMessage","_updateRoomPresence","isVideoMutedByFocus","_fireMuteChangeEvent","jingleSession","ctx","skip","muteStatusChanged","videoTypeChanged","presenceChanged","localVideoTracks","_setTrackMuteStatus","_setNewVideoType","audioMuteStatusChanged","videoMuteStatusChanged","setTrackVideoType","getSourceName","videoTypeTagName","trackVideoType","legacyTypeChanged","addOrReplaceInPresence","setTrackMuteStatus","audioMuteChanged","videoMuteChanged","localtrack","BridgeVideoType","NONE","getVideoType","_desktopSharingFrameRate","DESKTOP_HIGH_FPS","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","actorParticipant","actorId","muteHandler","audioLevelHandler","_doReplaceTrack","replaceTrackPromises","setSourceName","addAsUnmutePromises","removeAsMutePromises","getRole","isHidden","lock","JitsiConferenceErrors","unlock","selectParticipant","selectParticipants","pinParticipant","lastN","isInteger","isVideoActive","getParticipantCount","countHidden","grantOwner","kickParticipant","_maybeClearSITimeout","_sessionInitiateTimeout","onMemberJoined","JitsiParticipant","_role","_botType","_updateFeatures","_maybeStartOrStopP2P","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","mediaSessions","getMediaSessions","tracksToBeRemoved","onMemberKicked","kickedParticipantId","kickedParticipant","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","onTransportInfo","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","supportsP2P","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","_acceptJvbIncomingCall","serverRegion","_isE2EEEnabled","_setBridgeChannel","_suspendMediaTransferForJvbConnection","webSocket","bridgeChannelType","openBridgeChannel","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","sendTones","tones","duration","peerConnection","startRecording","stopRecording","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","isStartAudioMuted","isStartVideoMuted","removeLocalParticipantProperty","getLocalParticipantProperty","prop","overallFeedback","detailedFeedback","getSsrcByTrack","getLocalSSRC","getSSRC","remoteUserId","_isFocus","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onIceConnectionFailed","IceFailedHandling","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","logName","p2pEstablishmentDuration","jvbEstablishmentDuration","done","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","changed","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","userLeftEvent","peers","peerCount","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","getStats","setPreferredReceiveMaxFrameHeight","setPreferredSendMaxFrameHeight","createVideoSIPGWSession","sipAddress","VideoSIPGWConstants","perf","toggleE2EE","isLobbySupported","isMembersOnly","disableLobby","disable","joinLobby","email","lobbyDenyAccess","denyAccess","lobbyApproveAccess","approveAccess","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","actor","forward","recorderSession","logObject","AuthenticationEvents","myJid","ts","updated","featuresChangedListener","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","isUserInteractionRequiredForUnmute","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpTransceiver","RTCRtpSender","ondevicechange","supportsLocalCandidateRttStatistics","PerformanceObserver","supportedEntryTypes","RTCRtpReceiver","supportsRTTStatistics","_getChromiumBasedVersion","createEncodedStreams","createEncodedVideoStreams","ReadableStream","postMessage","getCapabilities","chromium","default","17","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","18","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","90","configurable","writable","getResult","91","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","isEngine","is","92","93","versionName","94","vendor","model","95","analyticsHandlers","permanentProperties","conferenceName","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","setConferenceName","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","statsInterval","longTasks","maxDuration","performanceStatsInterval","avgRatePerMinute","maxDurationMs","longTaskEventHandler","getEntries","task","observer","observe","buffered","longTasksIntervalId","_lastTimeStamp","KEYS_BY_BROWSER_TYPE","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","_browserType","_usesPromiseGetStats","_getStatValue","_defineNewGetStatValueMethod","_defineGetStatValueMethod","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","browsers","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","startAudioLevelStats","audioLevels","getAudioLevels","processNewAudioLevelReport","processAudioLevelReport","processNewStatsReport","processStatsReport","itemStatByKey","stat","keyFromName","getNonNegativeStat","getStatValue","byteSentStats","receiveBandwidth","sendBandwidth","localCandidateType","localip","remoteCandidateType","conferenceStatsTransport","selected","local","localCandidateId","remote","remoteCandidateId","ipAddress","portNumber","candidateType","before","ssrcIds","isRemote","remoteSource","ssrcStats","isDownloadStream","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","packetsTotal","packetsLost","bytesReceivedNow","bytesReceivedBefore","bytesReceived","nowBytesTransmitted","timeMs","bitrateReceivedKbps","bitrateSentKbps","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","audioCodec","videoBitrateDownload","videoBitrateUpload","videoCodec","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","localIp","networkType","currentRoundTripTime","framerateMean","frameHeight","frameWidth","framesPerSecond","framesSent","trackIdentifier","getSsrcByTrackId","dest","srcEvent","hidden","_jid","_id","_conference","_hidden","_statsID","_connectionStatus","_properties","_identity","getConference","jitsiTrack","isAudioMuted","_isMediaTypeMuted","_getFeaturesPromise","getBotType","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","kJitsiE2EE","E2EEcontext","baseUrl","ljm","workerBlob","blobUrl","_worker","Worker","operation","receiverStreams","createEncodedAudioStreams","readableStream","readable","writableStream","senderStreams","stropheConnection","_resumeRetryN","_retryDelay","_cancelResume","_networkOnlineListener","_scheduleResume","_resumeTimeout","getJitterDelay","retryDelay","_resumeConnection","resumeToken","retry","minDelay","LastRequestTracker","_lastSuccess","xmppConnection","originalRawInput","ConnectionPlugin","failedPings","pingExecIntervals","_onPingThresholdExceeded","_addPingExecutionTimestamp","pingIntervals","maxInterval","previousTS","currentInterval","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoom","_leaveLobbyRoom","avatar","invitePassword","memberRoomJid","msgToSend","createExpBackoffTimer","step","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","call_control","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","createConferenceIq","machineUID","machineId","openSctp","enforcedBridge","enableTcc","enableRemb","minParticipants","audioPacketDelay","startBitrate","minBitrate","octo","probability","opusMaxAverageBitrate","stereo","useRoomAsSharedDocumentName","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","startMuted","successTime","me","iceservers","dict","credential","temp","useTurnUdp","updateLog","_queue","_processQueueTasks","_stopped","kill","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","_map","_keys","setImmediate","completed","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","idle","priorityQueue","_compareTasks","sequence","compare","beg","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","char","signalingLayer","getState","addSources","removeSources","StropheLogger","logIncoming","logOutgoing","onRayo","roomPass","callResource","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","trace","errStatusCapture","senderVideoConstraintsChanged","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","colibriClass","msgPayload","jsonObject","pinnedEndpoint","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","endpoint","videoConstraints","dtlsRole","_initialTrackId","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","addRemoteCandidate","makeError","NotSupportedError","InvalidStateError","InvalidAccessError","OperationError","edgeVersion","addTrackToStreamAndFireEvent","dispatchEvent","MediaStreamTrackEvent","fireAddTrack","trackEvent","Event","_dispatchEvent","_eventTarget","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","_localDescription","_remoteDescription","iceGatheringState","usingBundle","rtcpMuxPolicy","hasTurn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","RTCIceGatherer","gatherPolicy","_config","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","onaddstream","ontrack","onremovestream","onconnectionstatechange","onicegatheringstatechange","ondatachannel","_emitGatheringStateChange","getConfiguration","getLocalStreams","getRemoteStreams","_createTransceiver","doNotAdd","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","_createIceAndDtlsTransports","_maybeFireNegotiationNeeded","clonedStream","clonedTrack","removeStream","getSenders","getReceivers","_createIceGatherer","bufferedCandidateEvents","bufferCandidates","_gather","onlocalcandidate","evt","serializedCandidate","toJSON","complete","RTCIceTransport","onicestatechange","_updateIceConnectionState","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","receive","isIceLite","rejected","remoteIceParameters","remoteDtlsParameters","_updateSignalingState","receiverList","iceOptions","remoteMsid","isComplete","setTransport","setRemoteCandidates","isNewTrack","nativeTrack","removeTrackFromStreamAndFireEvent","states","checking","disconnected","failed","new","connecting","numAudioTracks","numVideoTracks","offerOptions","remoteCodec","rHdrExt","getLocalCandidates","mediaSectionsInOffer","candidateString","selector","MediaStreamTrack","senderOrReceiver","allStats","ortcObjectName","nativeGetstats","nativeStats","mapStats","inboundrtp","outboundrtp","candidatepair","localcandidate","remotecandidate","nativeMethod","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","localUfrag","remoteUfrag","_peerVideoTypeChanged","SignalingEvents","_peerMutedChanged","safeConstraints","rtcStatsSFUP2P","standardVideoBitrates","maxBitratesVideo","tpcUtils","statsinterval","_usesTransceiverCodecPreferences","_capScreenshareBitrate","interop","Interop","SdpSimulcast","numOfLayers","Simulcast","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","senderVideoMaxHeight","getCodecMimeType","codecPreference","what","_remoteStreamAdded","_remoteStreamRemoved","_remoteTrackAdded","onremovetrack","_remoteTrackRemoved","_processStat","statValue","endTime","dumpSDP","_getDesiredMediaDirection","mediaTransferActive","hasAnyTracksOfType","_setVideoType","setMute","getSynchronizationSources","endpoints","endpointTracksByMediaType","findTrackById","onaddtrack","streamAudioTracks","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","ownerEndpointId","getTrackSourceName","peerMediaInfo","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","endpointTrackMap","mediaTrack","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","normalizePlanB","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","fidGroups","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","videoMedia","enforceSendRecv","transformStreamIdentifiers","_adjustRemoteMediaDirection","hasCameraTrack","_mungeCodecOrder","getConfiguredVideoCodec","bitrates","hdBitrate","_isSharingScreen","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","rtxSsrcMapping","rtxSsrc","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","isMediaStreamInPc","findSenderByKind","negotiationNeeded","oldTrackSSRC","mediaActive","MediaDirection","SENDRECV","RECVONLY","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","hasLocalSource","hasRemoteSource","SENDONLY","_mungeOpus","localVideoTrack","videoSender","preference","degradationPreference","presenterEnabled","scaleFactor","layer","enableConferenceFlag","mungeRemoteDescription","currentDescription","toUnifiedPlan","newHeight","encodingsEnabledState","ldStreamIndex","interToneGap","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","clearVideoSsrcCache","peerTracks","_createOfferOrAnswer","isOffer","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","groupsMap","groupSSRCs","extractSSRCMap","_processLocalSSRCsMap","handleFailure","capabilities","setCodecPreferences","oaPromise","trackMSID","newSSRCNum","oldSSRCNum","isSharingLowFpsScreen","currNumSsrcs","audioQuality","mLines","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","defaultCodec","getLocalVideoTracks","primarySsrcs","fidLines","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","correspondingRtxSsrcs","clearSsrcCache","ssrcMapping","sdpTransformer","modifyRtxSsrcs2","primaryVideoSsrcs","correspondingRtxSsrc","previousAssociatedRtxStream","stripRtx","cachedPrimarySsrc","injectRecvOnly","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","_sourceName","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_playCallback","gumStart","gumEnd","gumDuration","ttfm","_getStatus","_addMutedLocalVideoTracksToSDP","localVideos","isInPeerConnection","shouldFakeSdp","requiredSSRCs","ssrcCache","primaryCname","_transformMediaIdentifiers","pcId","streamAndTrackIDs","sessionDesc","audioMLine","kSimulcastFormats","layers","videoBitrateCap","getTarget","millisSinceStart","simulcastFormat","targetHeight","pixels","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","_timeLastBwCapRemoved","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","newVideoBitrateCap","bandwidthLimiter","getBandwidthLimit","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_actOnIceFailed","enableIceRestart","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","_timeoutTrigger","_hasAudioInput","_audioLevel","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","myUserID","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","_calculateVADScore","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingInterval","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","_propagateSendMaxFrameHeight","mediaSession","preferredReceiveMaxFrameHeight","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevelsString","AverageStatReport","calculate","appendReport","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","SphinxService","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_doesEndpointSendNewSourceInfo","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_sourceInfoHandler","_memberLeftHandler","_bindChatRoomEventHandlers","emitAudioMutedEvent","emitVideoMutedEvent","emitVideoTypeEvent","sourceInfoJSON","emitEventsFromHere","endpointSourceState","newMutedState","oldSourceState","newVideoType","newSourceNames","_findEndpointSourceInfoForMediaType","remoteSourceState","sourceInfo","legacyGetPeerMediaInfo","lastPresence","getPeerSourceInfo","mediaInfo","endpointMediaSource","codecTypeNode","codecType","existingOwner","existingName","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","stopActiveDevices","deviceLabel","ProxyConnectionService","jitsiConnection","otherOptions","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","processMessage","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","_selfCloseConnection","xml","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","newCreateLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","_rtc","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AuthUtil","getTokenAuthUrl","urlPattern","roleUpgrade","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","sessionMedia","bLine","bundle","mids","msidSemantic","semantic","current","currentDesc","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","inactiveMid","cmLine","_ssrcCache","_fillSsrcsFromCache","cachedSsrcs","newSsrcs","_parseSimLayers","newMsid","_getSsrcAttribute","newCname","_generateNewSsrcsForSimulcast","addAssociatedAttributes","simSsrcs","simSsrc","_generateSsrc","simulcastSsrcs","mungedSsrcs","mungedSsrcGroups","msCrypto","rnds8","rng","byteToHex","bytesToUuid","buf","bth","v4","rnds","getAnalyticsAttributesFromOptions","video_requested","_mergeNamespaceAndModule","JitsiMeetJS","constants","recording","recordingConstants","sipVideoGW","detection","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","firePermissionPromptIsShownEvent","originalOptions","promiseFulfilled","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","oldResolution","newResolution","resName","getLowerResolution","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptFromUrl","getScriptUrlFromStack","ignoreMessage","getSoleInlineScript","currentScript","thrownErr","near","far","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","scope","Timeout","clearFn","_clearFn","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","removeChild","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","expr","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","_restoreSimulcast","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","Word","TranscriptionService","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","getWord","getBeginTime","getEndTime","audioBlob","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","supportsUnifiedPlan","val","compactObject","isEmptyObject","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","walkStats","resultSet","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","shimAddTrackRemoveTrackWithNative","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","addIceCandidateNullSupported","nativeAddIceCandidate","fixNegotiationNeeded","origMSTEnabled","RTCDtmfSender","RTCDTMFSender","RTCPeerConnectionShim","shimRTCPeerConnection","validTurn","shimReplaceTrack","setTrack","nativeGetUserMedia","nativeGetSettings","nativeApplyConstraints","preferredMediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","_getUserMedia","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","audioTransceiver","setDirection","videoTransceiver","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeAllowExtmapMixed","nativeSRD","adapter","shimChrome","shimFirefox","shimEdge","shimSafari","commonShim","chromeShim","browserShim","firefoxShim","edgeShim","safariShim","adapterFactory"],"mappings":"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","file":"lib-jitsi-meet.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 149);\n","const XMPPEvents = {\r\n    /**\r\n     * Indicates error while adding ice candidate.\r\n     */\r\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\r\n\r\n    // Designates an event indicating that the focus has asked us to mute our\r\n    // audio.\r\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\r\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\r\n    BRIDGE_DOWN: 'xmpp.bridge_down',\r\n\r\n    /**\r\n     * Triggered when 'session-accept' is received from the responder.\r\n     */\r\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\r\n\r\n    // Designates an event indicating that an offer (e.g. Jingle\r\n    // session-initiate) was received.\r\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\r\n\r\n    // Triggered when Jicofo kills our media session, this can happen while\r\n    // we're still in the MUC, when it decides to terminate the media session.\r\n    // For example when the session is idle for too long, because we're the only\r\n    // person in the conference room.\r\n    CALL_ENDED: 'xmpp.callended.jingle',\r\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\r\n\r\n    // The conference properties (as advertised by jicofo) have changed\r\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\r\n\r\n    /**\r\n     * This event is triggered when the ICE connects for the first time.\r\n     */\r\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\r\n\r\n    // Designates an event indicating that the connection to the XMPP server\r\n    // failed.\r\n    CONNECTION_FAILED: 'xmpp.connection.failed',\r\n\r\n    // Designates an event indicating that the media (ICE) connection was\r\n    // interrupted. This should go to the RTC module.\r\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\r\n\r\n    // Designates an event indicating that the media (ICE) connection was\r\n    // restored. This should go to the RTC module.\r\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\r\n\r\n    // Designates an event indicating that the media (ICE) connection failed.\r\n    // This should go to the RTC module.\r\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\r\n\r\n    /**\r\n     * Designates an event indicating connection status changes.\r\n     */\r\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\r\n\r\n    // Designates an event indicating that the display name of a participant\r\n    // has changed.\r\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\r\n\r\n    /**\r\n     * Chat room instance have been added to Strophe.emuc plugin.\r\n     */\r\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\r\n\r\n    /**\r\n     * Chat room instance have been removed from Strophe.emuc plugin.\r\n     */\r\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\r\n    ETHERPAD: 'xmpp.etherpad',\r\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\r\n    FOCUS_LEFT: 'xmpp.focus_left',\r\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\r\n\r\n    /**\r\n     * Event fired when 'transport-replace' Jingle message has been received,\r\n     * before the new offer is set on the PeerConnection.\r\n     */\r\n    ICE_RESTARTING: 'rtc.ice_restarting',\r\n\r\n    /**\r\n     * Event fired after the 'transport-replace' message has been processed\r\n     * and the new offer has been set successfully.\r\n     */\r\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\r\n\r\n    /**\r\n     * Designates an event indicating that we were kicked from the XMPP MUC.\r\n     * @param {boolean} isSelfPresence - whether it is for local participant\r\n     * or another participant.\r\n     * @param {string} actorJid - the jid of the participant who was initator\r\n     * of the kick.\r\n     * @param {?string} participantJid - when it is not a kick for local participant,\r\n     * this is the jid of the participant which was kicked.\r\n     */\r\n    KICKED: 'xmpp.kicked',\r\n\r\n    // Designates an event indicating that our role in the XMPP MUC has changed.\r\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\r\n\r\n    /**\r\n     * Event fired when the unique meeting id is set.\r\n     */\r\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\r\n\r\n    // Designates an event indicating that an XMPP message in the MUC was\r\n    // received.\r\n    MESSAGE_RECEIVED: 'xmpp.message_received',\r\n\r\n    // Designates an event indicating that an invite XMPP message in the MUC was\r\n    // received.\r\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\r\n\r\n    // Designates an event indicating that a private XMPP message in the MUC was\r\n    // received.\r\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\r\n\r\n    // Designates an event indicating that a bot participant type had changed\r\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\r\n\r\n    // Designates an event indicating that the XMPP MUC was destroyed.\r\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\r\n\r\n    // Designates an event indicating that we have joined the XMPP MUC.\r\n    MUC_JOINED: 'xmpp.muc_joined',\r\n\r\n    // Designates an event indicating that a participant joined the XMPP MUC.\r\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\r\n\r\n    // Designates an event indicating that a participant left the XMPP MUC.\r\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\r\n\r\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\r\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\r\n\r\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\r\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\r\n\r\n    // Designates an event indicating that a participant left the XMPP MUC.\r\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\r\n\r\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\r\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\r\n\r\n    // Designates an event indicating that local participant left the muc\r\n    MUC_LEFT: 'xmpp.muc_left',\r\n\r\n    // Designates an event indicating that the MUC role of a participant has\r\n    // changed.\r\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\r\n\r\n    // Designates an event indicating that the MUC has been locked or unlocked.\r\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\r\n\r\n    // Designates an event indicating that the MUC members only config has changed.\r\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\r\n\r\n    // Designates an event indicating that a participant in the XMPP MUC has\r\n    // advertised that they have audio muted (or unmuted).\r\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\r\n\r\n    // Designates an event indicating that a participant in the XMPP MUC has\r\n    // advertised that they have video muted (or unmuted).\r\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\r\n\r\n    // Designates an event indicating that the video type (e.g. 'camera' or\r\n    // 'screen') for a participant has changed.\r\n    // Note: currently this event fires every time we receive presence from\r\n    // someone (regardless of whether or not the \"video type\" changed).\r\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\r\n\r\n    /**\r\n     * Indicates that the features of the participant has been changed.\r\n     */\r\n    PARTCIPANT_FEATURES_CHANGED: 'xmpp.partcipant_features_changed',\r\n    PASSWORD_REQUIRED: 'xmpp.password_required',\r\n\r\n    /**\r\n     * Indicates that phone number changed.\r\n     */\r\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\r\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\r\n    PRESENCE_STATUS: 'xmpp.presence_status',\r\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\r\n\r\n    // xmpp is connected and obtained user media\r\n    READY_TO_JOIN: 'xmpp.ready_to_join',\r\n\r\n    /**\r\n     * Indicates that recording state changed.\r\n     */\r\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\r\n\r\n    // Designates an event indicating that we received statistics from a\r\n    // participant in the MUC.\r\n    REMOTE_STATS: 'xmpp.remote_stats',\r\n\r\n    /**\r\n     * Indicates that the offer / answer renegotiation has failed.\r\n     */\r\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\r\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\r\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\r\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\r\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\r\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\r\n\r\n    /**\r\n     * Indicates that max users limit has been reached.\r\n     */\r\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\r\n\r\n    // Designates an event indicating that we sent an XMPP message to the MUC.\r\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\r\n\r\n    // Designates an event indicating that we sent a private XMPP message to\r\n    // a specific user of the muc.\r\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\r\n\r\n    /**\r\n     * Event fired when we do not get our 'session-accept' acknowledged by\r\n     * Jicofo. It most likely means that there is serious problem with our\r\n     * connection or XMPP server and we should reload the conference.\r\n     *\r\n     * We have seen that to happen in BOSH requests race condition when the BOSH\r\n     * request table containing the 'session-accept' was discarded by Prosody.\r\n     * Jicofo does send the RESULT immediately without any condition, so missing\r\n     * packets means that most likely it has never seen our IQ.\r\n     */\r\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\r\n\r\n    /**\r\n     * Event fired when speaker stats update message is received.\r\n     */\r\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\r\n\r\n    /**\r\n     * Event fired when conference creation timestamp is received.\r\n     */\r\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\r\n\r\n    // Designates an event indicating that we should join the conference with\r\n    // audio and/or video muted.\r\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\r\n\r\n    // Designates an event indicating that the subject of the XMPP MUC has\r\n    // changed.\r\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\r\n\r\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\r\n    // suspending detected\r\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\r\n\r\n    /**\r\n     * Notifies for transcription status changes. The event provides the\r\n     * following parameters to its listeners:\r\n     *\r\n     * @param {String} status - The new status.\r\n     */\r\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\r\n\r\n    /**\r\n     * Event fired when 'transport-info' with new ICE candidates is received.\r\n     */\r\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\r\n\r\n    /**\r\n     * Indicates that video SIP GW state changed.\r\n     *\r\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\r\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\r\n     */\r\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\r\n\r\n    /**\r\n     * Indicates that video SIP GW Session state changed.\r\n     * The statuses are any of the following statuses:\r\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\r\n     * {@see VideoSIPGWConstants}\r\n     *\r\n     * @param {options} event - {address, oldState, newState, displayName}.\r\n     */\r\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\r\n        'xmpp.videoSIPGWSessionStateChanged',\r\n\r\n    // Designates an event indicating that the local ICE connection state has\r\n    // changed.\r\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\r\n\r\n    /**\r\n     * Event which is emitted when the body in an XMPP message in the MUC\r\n     * contains JSON\r\n     */\r\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\r\n};\r\n\r\nmodule.exports = XMPPEvents;\r\n","/**\r\n * The events for the conference.\r\n */\r\n\r\n/**\r\n * Event indicates that the current conference audio input switched between audio\r\n * input states,i.e. with or without audio input.\r\n */\r\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\r\n\r\n/**\r\n * Indicates that authentication status changed.\r\n */\r\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\r\n\r\n/**\r\n * Fired just before the statistics module is disposed and it's the last chance\r\n * to submit some logs to the statistics service (ex. CallStats if enabled),\r\n * before it's disconnected.\r\n */\r\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\r\n\r\n/**\r\n * Indicates that an error occured.\r\n */\r\nexport const CONFERENCE_ERROR = 'conference.error';\r\n\r\n/**\r\n * Indicates that conference failed.\r\n */\r\nexport const CONFERENCE_FAILED = 'conference.failed';\r\n\r\n/**\r\n * Indicates that conference has been joined. The event does NOT provide any\r\n * parameters to its listeners.\r\n */\r\nexport const CONFERENCE_JOINED = 'conference.joined';\r\n\r\n/**\r\n * Indicates that conference has been left.\r\n */\r\nexport const CONFERENCE_LEFT = 'conference.left';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been established\r\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\r\n * state for the first time.\r\n */\r\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been interrupted for some\r\n * reason.\r\n * XXX This is currently fired when the *ICE* connection is interrupted.\r\n */\r\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been restored.\r\n * XXX This is currently fired when the *ICE* connection is restored.\r\n */\r\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\r\n\r\n/**\r\n * A connection to the video bridge's data channel has been established.\r\n */\r\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\r\n\r\n/**\r\n * A user has changed it display name\r\n */\r\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\r\n\r\n/**\r\n * The dominant speaker was changed.\r\n */\r\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\r\n\r\n/**\r\n * UTC conference timestamp when first participant joined.\r\n */\r\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\r\n\r\n/**\r\n * Indicates that DTMF support changed.\r\n */\r\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\r\n\r\n/**\r\n * Indicates that a message from another participant is received on data\r\n * channel.\r\n */\r\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\r\n\r\n/**\r\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\r\n *\r\n * Event emitted when conference transits, between one to one and multiparty JVB\r\n * conference. If the conference switches to P2P it's neither one to one nor\r\n * a multiparty JVB conference, but P2P (the status argument of this event will\r\n * be <tt>false</tt>).\r\n *\r\n * The first argument is a boolean which carries the previous value and\r\n * the seconds argument is a boolean with the new status. The event is emitted\r\n * only if the previous and the new values are different.\r\n *\r\n * @type {string}\r\n */\r\nexport const JVB121_STATUS = 'conference.jvb121Status';\r\n\r\n/**\r\n * You are kicked from the conference.\r\n * @param {JitsiParticipant} the participant that initiated the kick.\r\n */\r\nexport const KICKED = 'conference.kicked';\r\n\r\n/**\r\n * Participant was kicked from the conference.\r\n * @param {JitsiParticipant} the participant that initiated the kick.\r\n * @param {JitsiParticipant} the participant that was kicked.\r\n */\r\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\r\n\r\n/**\r\n * The Last N set is changed.\r\n *\r\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\r\n * which are leaving Last N\r\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\r\n * which are entering Last N\r\n */\r\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\r\n\r\n/**\r\n * Indicates that the room has been locked or unlocked.\r\n */\r\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\r\n\r\n/**\r\n * Indicates that the region of the media server (jitsi-videobridge) that we\r\n * are connected to changed (or was initially set).\r\n * @type {string} the region.\r\n */\r\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\r\n\r\n/**\r\n * An event(library-private) fired when a new media session is added to the conference.\r\n * @type {string}\r\n * @private\r\n */\r\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\r\n\r\n/**\r\n * An event(library-private) fired when the conference switches the currently active media session.\r\n * @type {string}\r\n * @private\r\n */\r\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\r\n\r\n/**\r\n * Indicates that the conference had changed to members only enabled/disabled.\r\n * The first argument of this event is a <tt>boolean</tt> which when set to\r\n * <tt>true</tt> means that the conference is running in members only mode.\r\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\r\n */\r\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\r\n\r\n/**\r\n * New text message was received.\r\n */\r\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\r\n\r\n/**\r\n * Event indicates that the current selected input device has no signal\r\n */\r\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\r\n\r\n/**\r\n * Event indicates that the current microphone used by the conference is noisy.\r\n */\r\nexport const NOISY_MIC = 'conference.noisy_mic';\r\n\r\n/**\r\n * New private text message was received.\r\n */\r\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\r\n\r\n/**\r\n * Event fired when JVB sends notification about interrupted/restored user's\r\n * ICE connection status or we detect local problem with the video track.\r\n * First argument is the ID of the participant and\r\n * the seconds is a string indicating if the connection is currently\r\n * - active - the connection is active\r\n * - inactive - the connection is inactive, was intentionally interrupted by\r\n * the bridge\r\n * - interrupted - a network problem occurred\r\n * - restoring - the connection was inactive and is restoring now\r\n *\r\n * The current status value can be obtained by calling\r\n * JitsiParticipant.getConnectionStatus().\r\n */\r\nexport const PARTICIPANT_CONN_STATUS_CHANGED\r\n    = 'conference.participant_conn_status_changed';\r\n\r\n/**\r\n * Indicates that the features of the participant has been changed.\r\n */\r\nexport const PARTCIPANT_FEATURES_CHANGED\r\n    = 'conference.partcipant_features_changed';\r\n\r\n/**\r\n * Indicates that a the value of a specific property of a specific participant\r\n * has changed.\r\n */\r\nexport const PARTICIPANT_PROPERTY_CHANGED\r\n    = 'conference.participant_property_changed';\r\n\r\n/**\r\n * Indicates that the conference has switched between JVB and P2P connections.\r\n * The first argument of this event is a <tt>boolean</tt> which when set to\r\n * <tt>true</tt> means that the conference is running on the P2P connection.\r\n */\r\nexport const P2P_STATUS = 'conference.p2pStatus';\r\n\r\n/**\r\n * Indicates that phone number changed.\r\n */\r\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\r\n\r\n/**\r\n * The conference properties changed.\r\n * @type {string}\r\n */\r\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\r\n\r\n/**\r\n * Indicates that recording state changed.\r\n */\r\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\r\n\r\n/**\r\n * Indicates that video SIP GW state changed.\r\n * @param {VideoSIPGWConstants} status.\r\n */\r\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\r\n    = 'conference.videoSIPGWAvailabilityChanged';\r\n\r\n/**\r\n * Indicates that video SIP GW Session state changed.\r\n * @param {options} event - {\r\n *     {string} address,\r\n *     {VideoSIPGWConstants} oldState,\r\n *     {VideoSIPGWConstants} newState,\r\n *     {string} displayName}\r\n * }.\r\n */\r\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\r\n    = 'conference.videoSIPGWSessionStateChanged';\r\n\r\n/**\r\n * Indicates that start muted settings changed.\r\n */\r\nexport const START_MUTED_POLICY_CHANGED\r\n    = 'conference.start_muted_policy_changed';\r\n\r\n/**\r\n * Indicates that the local user has started muted.\r\n */\r\nexport const STARTED_MUTED = 'conference.started_muted';\r\n\r\n/**\r\n * Indicates that subject of the conference has changed.\r\n */\r\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\r\n\r\n/**\r\n * Indicates that DTMF support changed.\r\n */\r\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\r\n\r\n/**\r\n * Event indicates that local user is talking while he muted himself\r\n */\r\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\r\n\r\n/**\r\n * A new media track was added to the conference. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {JitsiTrack} track the added JitsiTrack\r\n */\r\nexport const TRACK_ADDED = 'conference.trackAdded';\r\n\r\n/**\r\n * Audio levels of a media track ( attached to the conference) was changed.\r\n */\r\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\r\n\r\n/**\r\n * A media track ( attached to the conference) mute status was changed.\r\n * @param {JitsiParticipant|null} the participant that initiated the mute\r\n * if it is a remote mute.\r\n */\r\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\r\n\r\n/**\r\n * The media track was removed from the conference. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {JitsiTrack} track the removed JitsiTrack\r\n */\r\nexport const TRACK_REMOVED = 'conference.trackRemoved';\r\n\r\n/**\r\n * Notifies for transcription status changes. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {String} status - The new status.\r\n */\r\nexport const TRANSCRIPTION_STATUS_CHANGED\r\n    = 'conference.transcriptionStatusChanged';\r\n\r\n\r\n/**\r\n * A new user joined the conference.\r\n */\r\nexport const USER_JOINED = 'conference.userJoined';\r\n\r\n/**\r\n * A user has left the conference.\r\n */\r\nexport const USER_LEFT = 'conference.userLeft';\r\n\r\n/**\r\n * User role changed.\r\n */\r\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\r\n\r\n/**\r\n * User status changed.\r\n */\r\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\r\n\r\n/**\r\n * Event indicates that the bot participant type changed.\r\n */\r\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\r\n\r\n/**\r\n * A new user joined the lobby room.\r\n */\r\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\r\n\r\n/**\r\n * A user from the lobby room has been update.\r\n */\r\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\r\n\r\n/**\r\n * A user left the lobby room.\r\n */\r\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\r\n\r\n\r\nexport const FORWARDED_SOURCES_CHANGED = 'conference.forwardedSourcesChanged';","(function (global, factory) {\r\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n            typeof define === 'function' && define.amd ? define(factory) :\r\n            (global = global || self, global.strophe = factory());\r\n}(this, function () { 'use strict';\r\n\r\n            var global$1 = (typeof global !== \"undefined\" ? global :\r\n                        typeof self !== \"undefined\" ? self :\r\n                        typeof window !== \"undefined\" ? window : {});\r\n\r\n            function _typeof(obj) {\r\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\r\n                _typeof = function (obj) {\r\n                  return typeof obj;\r\n                };\r\n              } else {\r\n                _typeof = function (obj) {\r\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\r\n                };\r\n              }\r\n\r\n              return _typeof(obj);\r\n            }\r\n\r\n            function _toConsumableArray(arr) {\r\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\r\n            }\r\n\r\n            function _arrayWithoutHoles(arr) {\r\n              if (Array.isArray(arr)) {\r\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\r\n\r\n                return arr2;\r\n              }\r\n            }\r\n\r\n            function _iterableToArray(iter) {\r\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\r\n            }\r\n\r\n            function _nonIterableSpread() {\r\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\r\n            }\r\n\r\n            /*\r\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\r\n             * Digest Algorithm, as defined in RFC 1321.\r\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\r\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n             * Distributed under the BSD License\r\n             * See http://pajhome.org.uk/crypt/md5 for more info.\r\n             */\r\n\r\n            /*\r\n             * Everything that isn't used by Strophe has been stripped here!\r\n             */\r\n\r\n            /*\r\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n             * to work around bugs in some JS interpreters.\r\n             */\r\n            var safe_add = function safe_add(x, y) {\r\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n              return msw << 16 | lsw & 0xFFFF;\r\n            };\r\n            /*\r\n             * Bitwise rotate a 32-bit number to the left.\r\n             */\r\n\r\n\r\n            var bit_rol = function bit_rol(num, cnt) {\r\n              return num << cnt | num >>> 32 - cnt;\r\n            };\r\n            /*\r\n             * Convert a string to an array of little-endian words\r\n             */\r\n\r\n\r\n            var str2binl = function str2binl(str) {\r\n              if (typeof str !== \"string\") {\r\n                throw new Error(\"str2binl was passed a non-string\");\r\n              }\r\n\r\n              var bin = [];\r\n\r\n              for (var i = 0; i < str.length * 8; i += 8) {\r\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\r\n              }\r\n\r\n              return bin;\r\n            };\r\n            /*\r\n             * Convert an array of little-endian words to a string\r\n             */\r\n\r\n\r\n            var binl2str = function binl2str(bin) {\r\n              var str = \"\";\r\n\r\n              for (var i = 0; i < bin.length * 32; i += 8) {\r\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\r\n              }\r\n\r\n              return str;\r\n            };\r\n            /*\r\n             * Convert an array of little-endian words to a hex string.\r\n             */\r\n\r\n\r\n            var binl2hex = function binl2hex(binarray) {\r\n              var hex_tab = \"0123456789abcdef\";\r\n              var str = \"\";\r\n\r\n              for (var i = 0; i < binarray.length * 4; i++) {\r\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\r\n              }\r\n\r\n              return str;\r\n            };\r\n            /*\r\n             * These functions implement the four basic operations the algorithm uses.\r\n             */\r\n\r\n\r\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\r\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\r\n            };\r\n\r\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\r\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\r\n            };\r\n\r\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\r\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\r\n            };\r\n\r\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\r\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\r\n            };\r\n\r\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\r\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\r\n            };\r\n            /*\r\n             * Calculate the MD5 of an array of little-endian words, and a bit length\r\n             */\r\n\r\n\r\n            var core_md5 = function core_md5(x, len) {\r\n              /* append padding */\r\n              x[len >> 5] |= 0x80 << len % 32;\r\n              x[(len + 64 >>> 9 << 4) + 14] = len;\r\n              var a = 1732584193;\r\n              var b = -271733879;\r\n              var c = -1732584194;\r\n              var d = 271733878;\r\n              var olda, oldb, oldc, oldd;\r\n\r\n              for (var i = 0; i < x.length; i += 16) {\r\n                olda = a;\r\n                oldb = b;\r\n                oldc = c;\r\n                oldd = d;\r\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\r\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\r\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\r\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\r\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\r\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\r\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\r\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\r\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\r\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\r\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\r\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\r\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\r\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\r\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\r\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\r\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\r\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\r\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\r\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\r\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\r\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\r\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\r\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\r\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\r\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\r\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\r\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\r\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\r\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\r\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\r\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\r\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\r\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\r\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\r\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\r\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\r\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\r\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\r\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\r\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\r\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\r\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\r\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\r\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\r\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\r\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\r\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\r\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\r\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\r\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\r\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\r\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\r\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\r\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\r\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\r\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\r\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\r\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\r\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\r\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\r\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\r\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\r\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\r\n                a = safe_add(a, olda);\r\n                b = safe_add(b, oldb);\r\n                c = safe_add(c, oldc);\r\n                d = safe_add(d, oldd);\r\n              }\r\n\r\n              return [a, b, c, d];\r\n            };\r\n            /*\r\n             * These are the functions you'll usually want to call.\r\n             * They take string arguments and return either hex or base-64 encoded\r\n             * strings.\r\n             */\r\n\r\n\r\n            var MD5 = {\r\n              hexdigest: function hexdigest(s) {\r\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\r\n              },\r\n              hash: function hash(s) {\r\n                return binl2str(core_md5(str2binl(s), s.length * 8));\r\n              }\r\n            };\r\n\r\n            /*\r\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\r\n             * in FIPS PUB 180-1\r\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\r\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n             * Distributed under the BSD License\r\n             * See http://pajhome.org.uk/crypt/md5 for details.\r\n             */\r\n\r\n            /* global define */\r\n\r\n            /* Some functions and variables have been stripped for use with Strophe */\r\n\r\n            /*\r\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\r\n             */\r\n            function core_sha1(x, len) {\r\n              /* append padding */\r\n              x[len >> 5] |= 0x80 << 24 - len % 32;\r\n              x[(len + 64 >> 9 << 4) + 15] = len;\r\n              var w = new Array(80);\r\n              var a = 1732584193;\r\n              var b = -271733879;\r\n              var c = -1732584194;\r\n              var d = 271733878;\r\n              var e = -1009589776;\r\n              var i, j, t, olda, oldb, oldc, oldd, olde;\r\n\r\n              for (i = 0; i < x.length; i += 16) {\r\n                olda = a;\r\n                oldb = b;\r\n                oldc = c;\r\n                oldd = d;\r\n                olde = e;\r\n\r\n                for (j = 0; j < 80; j++) {\r\n                  if (j < 16) {\r\n                    w[j] = x[i + j];\r\n                  } else {\r\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\r\n                  }\r\n\r\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\r\n                  e = d;\r\n                  d = c;\r\n                  c = rol(b, 30);\r\n                  b = a;\r\n                  a = t;\r\n                }\r\n\r\n                a = safe_add$1(a, olda);\r\n                b = safe_add$1(b, oldb);\r\n                c = safe_add$1(c, oldc);\r\n                d = safe_add$1(d, oldd);\r\n                e = safe_add$1(e, olde);\r\n              }\r\n\r\n              return [a, b, c, d, e];\r\n            }\r\n            /*\r\n             * Perform the appropriate triplet combination function for the current\r\n             * iteration\r\n             */\r\n\r\n\r\n            function sha1_ft(t, b, c, d) {\r\n              if (t < 20) {\r\n                return b & c | ~b & d;\r\n              }\r\n\r\n              if (t < 40) {\r\n                return b ^ c ^ d;\r\n              }\r\n\r\n              if (t < 60) {\r\n                return b & c | b & d | c & d;\r\n              }\r\n\r\n              return b ^ c ^ d;\r\n            }\r\n            /*\r\n             * Determine the appropriate additive constant for the current iteration\r\n             */\r\n\r\n\r\n            function sha1_kt(t) {\r\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\r\n            }\r\n            /*\r\n             * Calculate the HMAC-SHA1 of a key and some data\r\n             */\r\n\r\n\r\n            function core_hmac_sha1(key, data) {\r\n              var bkey = str2binb(key);\r\n\r\n              if (bkey.length > 16) {\r\n                bkey = core_sha1(bkey, key.length * 8);\r\n              }\r\n\r\n              var ipad = new Array(16),\r\n                  opad = new Array(16);\r\n\r\n              for (var i = 0; i < 16; i++) {\r\n                ipad[i] = bkey[i] ^ 0x36363636;\r\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\r\n              }\r\n\r\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\r\n              return core_sha1(opad.concat(hash), 512 + 160);\r\n            }\r\n            /*\r\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n             * to work around bugs in some JS interpreters.\r\n             */\r\n\r\n\r\n            function safe_add$1(x, y) {\r\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n              return msw << 16 | lsw & 0xFFFF;\r\n            }\r\n            /*\r\n             * Bitwise rotate a 32-bit number to the left.\r\n             */\r\n\r\n\r\n            function rol(num, cnt) {\r\n              return num << cnt | num >>> 32 - cnt;\r\n            }\r\n            /*\r\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\r\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\r\n             */\r\n\r\n\r\n            function str2binb(str) {\r\n              var bin = [];\r\n              var mask = 255;\r\n\r\n              for (var i = 0; i < str.length * 8; i += 8) {\r\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\r\n              }\r\n\r\n              return bin;\r\n            }\r\n            /*\r\n             * Convert an array of big-endian words to a base-64 string\r\n             */\r\n\r\n\r\n            function binb2b64(binarray) {\r\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n              var str = \"\";\r\n              var triplet, j;\r\n\r\n              for (var i = 0; i < binarray.length * 4; i += 3) {\r\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\r\n\r\n                for (j = 0; j < 4; j++) {\r\n                  if (i * 8 + j * 6 > binarray.length * 32) {\r\n                    str += \"=\";\r\n                  } else {\r\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\r\n                  }\r\n                }\r\n              }\r\n\r\n              return str;\r\n            }\r\n            /*\r\n             * Convert an array of big-endian words to a string\r\n             */\r\n\r\n\r\n            function binb2str(bin) {\r\n              var str = \"\";\r\n              var mask = 255;\r\n\r\n              for (var i = 0; i < bin.length * 32; i += 8) {\r\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\r\n              }\r\n\r\n              return str;\r\n            }\r\n            /*\r\n             * These are the functions you'll usually want to call\r\n             * They take string arguments and return either hex or base-64 encoded strings\r\n             */\r\n\r\n\r\n            var SHA1 = {\r\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\r\n                return binb2b64(core_hmac_sha1(key, data));\r\n              },\r\n              b64_sha1: function b64_sha1(s) {\r\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\r\n              },\r\n              binb2str: binb2str,\r\n              core_hmac_sha1: core_hmac_sha1,\r\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\r\n                return binb2str(core_hmac_sha1(key, data));\r\n              },\r\n              str_sha1: function str_sha1(s) {\r\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\r\n              }\r\n            };\r\n\r\n            var utils = {\r\n              utf16to8: function utf16to8(str) {\r\n                var i, c;\r\n                var out = \"\";\r\n                var len = str.length;\r\n\r\n                for (i = 0; i < len; i++) {\r\n                  c = str.charCodeAt(i);\r\n\r\n                  if (c >= 0x0000 && c <= 0x007F) {\r\n                    out += str.charAt(i);\r\n                  } else if (c > 0x07FF) {\r\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\r\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\r\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\r\n                  } else {\r\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\r\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\r\n                  }\r\n                }\r\n\r\n                return out;\r\n              },\r\n              addCookies: function addCookies(cookies) {\r\n                /* Parameters:\r\n                 *  (Object) cookies - either a map of cookie names\r\n                 *    to string values or to maps of cookie values.\r\n                 *\r\n                 * For example:\r\n                 * { \"myCookie\": \"1234\" }\r\n                 *\r\n                 * or:\r\n                 * { \"myCookie\": {\r\n                 *      \"value\": \"1234\",\r\n                 *      \"domain\": \".example.org\",\r\n                 *      \"path\": \"/\",\r\n                 *      \"expires\": expirationDate\r\n                 *      }\r\n                 *  }\r\n                 *\r\n                 *  These values get passed to Strophe.Connection via\r\n                 *   options.cookies\r\n                 */\r\n                cookies = cookies || {};\r\n\r\n                for (var cookieName in cookies) {\r\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\r\n                    var expires = '';\r\n                    var domain = '';\r\n                    var path = '';\r\n                    var cookieObj = cookies[cookieName];\r\n                    var isObj = _typeof(cookieObj) === \"object\";\r\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\r\n\r\n                    if (isObj) {\r\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\r\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\r\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\r\n                    }\r\n\r\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\r\n                  }\r\n                }\r\n              }\r\n            };\r\n\r\n            /** Function: $build\r\n             *  Create a Strophe.Builder.\r\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\r\n             *\r\n             *  Parameters:\r\n             *    (String) name - The root element name.\r\n             *    (Object) attrs - The attributes for the root element in object notation.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Builder object.\r\n             */\r\n\r\n            function $build(name, attrs) {\r\n              return new Strophe.Builder(name, attrs);\r\n            }\r\n            /** Function: $msg\r\n             *  Create a Strophe.Builder with a <message/> element as the root.\r\n             *\r\n             *  Parameters:\r\n             *    (Object) attrs - The <message/> element attributes in object notation.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Builder object.\r\n             */\r\n\r\n\r\n            function $msg(attrs) {\r\n              return new Strophe.Builder(\"message\", attrs);\r\n            }\r\n            /** Function: $iq\r\n             *  Create a Strophe.Builder with an <iq/> element as the root.\r\n             *\r\n             *  Parameters:\r\n             *    (Object) attrs - The <iq/> element attributes in object notation.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Builder object.\r\n             */\r\n\r\n\r\n            function $iq(attrs) {\r\n              return new Strophe.Builder(\"iq\", attrs);\r\n            }\r\n            /** Function: $pres\r\n             *  Create a Strophe.Builder with a <presence/> element as the root.\r\n             *\r\n             *  Parameters:\r\n             *    (Object) attrs - The <presence/> element attributes in object notation.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Builder object.\r\n             */\r\n\r\n\r\n            function $pres(attrs) {\r\n              return new Strophe.Builder(\"presence\", attrs);\r\n            }\r\n            /** Class: Strophe\r\n             *  An object container for all Strophe library functions.\r\n             *\r\n             *  This class is just a container for all the objects and constants\r\n             *  used in the library.  It is not meant to be instantiated, but to\r\n             *  provide a namespace for library objects, constants, and functions.\r\n             */\r\n\r\n\r\n            var Strophe = {\r\n              /** Constant: VERSION */\r\n              VERSION: \"@VERSION@\",\r\n\r\n              /** Constants: XMPP Namespace Constants\r\n               *  Common namespace constants from the XMPP RFCs and XEPs.\r\n               *\r\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\r\n               *  NS.BOSH - BOSH namespace from XEP 206.\r\n               *  NS.CLIENT - Main XMPP client namespace.\r\n               *  NS.AUTH - Legacy authentication namespace.\r\n               *  NS.ROSTER - Roster operations namespace.\r\n               *  NS.PROFILE - Profile namespace.\r\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\r\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\r\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\r\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\r\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\r\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\r\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\r\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\r\n               *  NS.XHTML - XHTML body namespace from XEP 71.\r\n               */\r\n              NS: {\r\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\r\n                BOSH: \"urn:xmpp:xbosh\",\r\n                CLIENT: \"jabber:client\",\r\n                AUTH: \"jabber:iq:auth\",\r\n                ROSTER: \"jabber:iq:roster\",\r\n                PROFILE: \"jabber:iq:profile\",\r\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\r\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\r\n                MUC: \"http://jabber.org/protocol/muc\",\r\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\r\n                STREAM: \"http://etherx.jabber.org/streams\",\r\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\r\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\r\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\r\n                VERSION: \"jabber:iq:version\",\r\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\r\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\r\n                XHTML: \"http://www.w3.org/1999/xhtml\"\r\n              },\r\n\r\n              /** Constants: XHTML_IM Namespace\r\n               *  contains allowed tags, tag attributes, and css properties.\r\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\r\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\r\n               *  allowed tags and their attributes.\r\n               */\r\n              XHTML: {\r\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\r\n                attributes: {\r\n                  'a': ['href'],\r\n                  'blockquote': ['style'],\r\n                  'br': [],\r\n                  'cite': ['style'],\r\n                  'em': [],\r\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\r\n                  'li': ['style'],\r\n                  'ol': ['style'],\r\n                  'p': ['style'],\r\n                  'span': ['style'],\r\n                  'strong': [],\r\n                  'ul': ['style'],\r\n                  'body': []\r\n                },\r\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\r\n\r\n                /** Function: XHTML.validTag\r\n                 *\r\n                 * Utility method to determine whether a tag is allowed\r\n                 * in the XHTML_IM namespace.\r\n                 *\r\n                 * XHTML tag names are case sensitive and must be lower case.\r\n                 */\r\n                validTag: function validTag(tag) {\r\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\r\n                    if (tag === Strophe.XHTML.tags[i]) {\r\n                      return true;\r\n                    }\r\n                  }\r\n\r\n                  return false;\r\n                },\r\n\r\n                /** Function: XHTML.validAttribute\r\n                 *\r\n                 * Utility method to determine whether an attribute is allowed\r\n                 * as recommended per XEP-0071\r\n                 *\r\n                 * XHTML attribute names are case sensitive and must be lower case.\r\n                 */\r\n                validAttribute: function validAttribute(tag, attribute) {\r\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\r\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\r\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\r\n                        return true;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  return false;\r\n                },\r\n                validCSS: function validCSS(style) {\r\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\r\n                    if (style === Strophe.XHTML.css[i]) {\r\n                      return true;\r\n                    }\r\n                  }\r\n\r\n                  return false;\r\n                }\r\n              },\r\n\r\n              /** Constants: Connection Status Constants\r\n               *  Connection status constants for use by the connection handler\r\n               *  callback.\r\n               *\r\n               *  Status.ERROR - An error has occurred\r\n               *  Status.CONNECTING - The connection is currently being made\r\n               *  Status.CONNFAIL - The connection attempt failed\r\n               *  Status.AUTHENTICATING - The connection is authenticating\r\n               *  Status.AUTHFAIL - The authentication attempt failed\r\n               *  Status.CONNECTED - The connection has succeeded\r\n               *  Status.DISCONNECTED - The connection has been terminated\r\n               *  Status.DISCONNECTING - The connection is currently being terminated\r\n               *  Status.ATTACHED - The connection has been attached\r\n               *  Status.REDIRECT - The connection has been redirected\r\n               *  Status.CONNTIMEOUT - The connection has timed out\r\n               */\r\n              Status: {\r\n                ERROR: 0,\r\n                CONNECTING: 1,\r\n                CONNFAIL: 2,\r\n                AUTHENTICATING: 3,\r\n                AUTHFAIL: 4,\r\n                CONNECTED: 5,\r\n                DISCONNECTED: 6,\r\n                DISCONNECTING: 7,\r\n                ATTACHED: 8,\r\n                REDIRECT: 9,\r\n                CONNTIMEOUT: 10,\r\n                BINDREQUIRED: 11\r\n              },\r\n              ErrorCondition: {\r\n                BAD_FORMAT: \"bad-format\",\r\n                CONFLICT: \"conflict\",\r\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\r\n                NO_AUTH_MECH: \"no-auth-mech\",\r\n                UNKNOWN_REASON: \"unknown\"\r\n              },\r\n\r\n              /** Constants: Log Level Constants\r\n               *  Logging level indicators.\r\n               *\r\n               *  LogLevel.DEBUG - Debug output\r\n               *  LogLevel.INFO - Informational output\r\n               *  LogLevel.WARN - Warnings\r\n               *  LogLevel.ERROR - Errors\r\n               *  LogLevel.FATAL - Fatal errors\r\n               */\r\n              LogLevel: {\r\n                DEBUG: 0,\r\n                INFO: 1,\r\n                WARN: 2,\r\n                ERROR: 3,\r\n                FATAL: 4\r\n              },\r\n\r\n              /** PrivateConstants: DOM Element Type Constants\r\n               *  DOM element types.\r\n               *\r\n               *  ElementType.NORMAL - Normal element.\r\n               *  ElementType.TEXT - Text data element.\r\n               *  ElementType.FRAGMENT - XHTML fragment element.\r\n               */\r\n              ElementType: {\r\n                NORMAL: 1,\r\n                TEXT: 3,\r\n                CDATA: 4,\r\n                FRAGMENT: 11\r\n              },\r\n\r\n              /** PrivateConstants: Timeout Values\r\n               *  Timeout values for error states.  These values are in seconds.\r\n               *  These should not be changed unless you know exactly what you are\r\n               *  doing.\r\n               *\r\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\r\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\r\n               *      This defaults to 1.1, and with default wait, 66 seconds.\r\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\r\n               *      Strophe can detect early failure, it will consider the request\r\n               *      failed if it doesn't return after\r\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\r\n               *      This defaults to 0.1, and with default wait, 6 seconds.\r\n               */\r\n              TIMEOUT: 1.1,\r\n              SECONDARY_TIMEOUT: 0.1,\r\n\r\n              /** Function: addNamespace\r\n               *  This function is used to extend the current namespaces in\r\n               *  Strophe.NS.  It takes a key and a value with the key being the\r\n               *  name of the new namespace, with its actual value.\r\n               *  For example:\r\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\r\n               *\r\n               *  Parameters:\r\n               *    (String) name - The name under which the namespace will be\r\n               *      referenced under Strophe.NS\r\n               *    (String) value - The actual namespace.\r\n               */\r\n              addNamespace: function addNamespace(name, value) {\r\n                Strophe.NS[name] = value;\r\n              },\r\n\r\n              /** Function: forEachChild\r\n               *  Map a function over some or all child elements of a given element.\r\n               *\r\n               *  This is a small convenience function for mapping a function over\r\n               *  some or all of the children of an element.  If elemName is null, all\r\n               *  children will be passed to the function, otherwise only children\r\n               *  whose tag names match elemName will be passed.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The element to operate on.\r\n               *    (String) elemName - The child element tag name filter.\r\n               *    (Function) func - The function to apply to each child.  This\r\n               *      function should take a single argument, a DOM element.\r\n               */\r\n              forEachChild: function forEachChild(elem, elemName, func) {\r\n                for (var i = 0; i < elem.childNodes.length; i++) {\r\n                  var childNode = elem.childNodes[i];\r\n\r\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\r\n                    func(childNode);\r\n                  }\r\n                }\r\n              },\r\n\r\n              /** Function: isTagEqual\r\n               *  Compare an element's tag name with a string.\r\n               *\r\n               *  This function is case sensitive.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) el - A DOM element.\r\n               *    (String) name - The element name.\r\n               *\r\n               *  Returns:\r\n               *    true if the element's tag name matches _el_, and false\r\n               *    otherwise.\r\n               */\r\n              isTagEqual: function isTagEqual(el, name) {\r\n                return el.tagName === name;\r\n              },\r\n\r\n              /** PrivateVariable: _xmlGenerator\r\n               *  _Private_ variable that caches a DOM document to\r\n               *  generate elements.\r\n               */\r\n              _xmlGenerator: null,\r\n\r\n              /** PrivateFunction: _makeGenerator\r\n               *  _Private_ function that creates a dummy XML DOM document to serve as\r\n               *  an element and text node generator.\r\n               */\r\n              _makeGenerator: function _makeGenerator() {\r\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\r\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\r\n                // less than 10 in the case of IE9 and below.\r\n\r\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\r\n                  doc = this._getIEXmlDom();\r\n                  doc.appendChild(doc.createElement('strophe'));\r\n                } else {\r\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\r\n                }\r\n\r\n                return doc;\r\n              },\r\n\r\n              /** Function: xmlGenerator\r\n               *  Get the DOM document to generate elements.\r\n               *\r\n               *  Returns:\r\n               *    The currently used DOM document.\r\n               */\r\n              xmlGenerator: function xmlGenerator() {\r\n                if (!Strophe._xmlGenerator) {\r\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\r\n                }\r\n\r\n                return Strophe._xmlGenerator;\r\n              },\r\n\r\n              /** PrivateFunction: _getIEXmlDom\r\n               *  Gets IE xml doc object\r\n               *\r\n               *  Returns:\r\n               *    A Microsoft XML DOM Object\r\n               *  See Also:\r\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\r\n               */\r\n              _getIEXmlDom: function _getIEXmlDom() {\r\n                var doc = null;\r\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\r\n\r\n                for (var d = 0; d < docStrings.length; d++) {\r\n                  if (doc === null) {\r\n                    try {\r\n                      doc = new ActiveXObject(docStrings[d]);\r\n                    } catch (e) {\r\n                      doc = null;\r\n                    }\r\n                  } else {\r\n                    break;\r\n                  }\r\n                }\r\n\r\n                return doc;\r\n              },\r\n\r\n              /** Function: xmlElement\r\n               *  Create an XML DOM element.\r\n               *\r\n               *  This function creates an XML DOM element correctly across all\r\n               *  implementations. Note that these are not HTML DOM elements, which\r\n               *  aren't appropriate for XMPP stanzas.\r\n               *\r\n               *  Parameters:\r\n               *    (String) name - The name for the element.\r\n               *    (Array|Object) attrs - An optional array or object containing\r\n               *      key/value pairs to use as element attributes. The object should\r\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\r\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\r\n               *    (String) text - The text child data for the element.\r\n               *\r\n               *  Returns:\r\n               *    A new XML DOM element.\r\n               */\r\n              xmlElement: function xmlElement(name) {\r\n                if (!name) {\r\n                  return null;\r\n                }\r\n\r\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\r\n                // there are more than two optional args\r\n\r\n                for (var a = 1; a < arguments.length; a++) {\r\n                  var arg = arguments[a];\r\n\r\n                  if (!arg) {\r\n                    continue;\r\n                  }\r\n\r\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\r\n                    node.appendChild(Strophe.xmlTextNode(arg));\r\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\r\n                    for (var i = 0; i < arg.length; i++) {\r\n                      var attr = arg[i];\r\n\r\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\r\n                        node.setAttribute(attr[0], attr[1]);\r\n                      }\r\n                    }\r\n                  } else if (_typeof(arg) === \"object\") {\r\n                    for (var k in arg) {\r\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\r\n                        node.setAttribute(k, arg[k]);\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n\r\n                return node;\r\n              },\r\n\r\n              /*  Function: xmlescape\r\n               *  Excapes invalid xml characters.\r\n               *\r\n               *  Parameters:\r\n               *     (String) text - text to escape.\r\n               *\r\n               *  Returns:\r\n               *      Escaped text.\r\n               */\r\n              xmlescape: function xmlescape(text) {\r\n                text = text.replace(/\\&/g, \"&amp;\");\r\n                text = text.replace(/</g, \"&lt;\");\r\n                text = text.replace(/>/g, \"&gt;\");\r\n                text = text.replace(/'/g, \"&apos;\");\r\n                text = text.replace(/\"/g, \"&quot;\");\r\n                return text;\r\n              },\r\n\r\n              /*  Function: xmlunescape\r\n              *  Unexcapes invalid xml characters.\r\n              *\r\n              *  Parameters:\r\n              *     (String) text - text to unescape.\r\n              *\r\n              *  Returns:\r\n              *      Unescaped text.\r\n              */\r\n              xmlunescape: function xmlunescape(text) {\r\n                text = text.replace(/\\&amp;/g, \"&\");\r\n                text = text.replace(/&lt;/g, \"<\");\r\n                text = text.replace(/&gt;/g, \">\");\r\n                text = text.replace(/&apos;/g, \"'\");\r\n                text = text.replace(/&quot;/g, \"\\\"\");\r\n                return text;\r\n              },\r\n\r\n              /** Function: xmlTextNode\r\n               *  Creates an XML DOM text node.\r\n               *\r\n               *  Provides a cross implementation version of document.createTextNode.\r\n               *\r\n               *  Parameters:\r\n               *    (String) text - The content of the text node.\r\n               *\r\n               *  Returns:\r\n               *    A new XML DOM text node.\r\n               */\r\n              xmlTextNode: function xmlTextNode(text) {\r\n                return Strophe.xmlGenerator().createTextNode(text);\r\n              },\r\n\r\n              /** Function: xmlHtmlNode\r\n               *  Creates an XML DOM html node.\r\n               *\r\n               *  Parameters:\r\n               *    (String) html - The content of the html node.\r\n               *\r\n               *  Returns:\r\n               *    A new XML DOM text node.\r\n               */\r\n              xmlHtmlNode: function xmlHtmlNode(html) {\r\n                var node; //ensure text is escaped\r\n\r\n                if (DOMParser) {\r\n                  var parser = new DOMParser();\r\n                  node = parser.parseFromString(html, \"text/xml\");\r\n                } else {\r\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\r\n                  node.async = \"false\";\r\n                  node.loadXML(html);\r\n                }\r\n\r\n                return node;\r\n              },\r\n\r\n              /** Function: getText\r\n               *  Get the concatenation of all text children of an element.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - A DOM element.\r\n               *\r\n               *  Returns:\r\n               *    A String with the concatenated text of all text element children.\r\n               */\r\n              getText: function getText(elem) {\r\n                if (!elem) {\r\n                  return null;\r\n                }\r\n\r\n                var str = \"\";\r\n\r\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\r\n                  str += elem.nodeValue;\r\n                }\r\n\r\n                for (var i = 0; i < elem.childNodes.length; i++) {\r\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\r\n                    str += elem.childNodes[i].nodeValue;\r\n                  }\r\n                }\r\n\r\n                return Strophe.xmlescape(str);\r\n              },\r\n\r\n              /** Function: copyElement\r\n               *  Copy an XML DOM element.\r\n               *\r\n               *  This function copies a DOM element and all its descendants and returns\r\n               *  the new copy.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - A DOM element.\r\n               *\r\n               *  Returns:\r\n               *    A new, copied DOM element tree.\r\n               */\r\n              copyElement: function copyElement(elem) {\r\n                var el;\r\n\r\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\r\n                  el = Strophe.xmlElement(elem.tagName);\r\n\r\n                  for (var i = 0; i < elem.attributes.length; i++) {\r\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\r\n                  }\r\n\r\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\r\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\r\n                  }\r\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\r\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\r\n                }\r\n\r\n                return el;\r\n              },\r\n\r\n              /** Function: createHtml\r\n               *  Copy an HTML DOM element into an XML DOM.\r\n               *\r\n               *  This function copies a DOM element and all its descendants and returns\r\n               *  the new copy.\r\n               *\r\n               *  Parameters:\r\n               *    (HTMLElement) elem - A DOM element.\r\n               *\r\n               *  Returns:\r\n               *    A new, copied DOM element tree.\r\n               */\r\n              createHtml: function createHtml(elem) {\r\n                var el;\r\n\r\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\r\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\r\n\r\n                  if (Strophe.XHTML.validTag(tag)) {\r\n                    try {\r\n                      el = Strophe.xmlElement(tag);\r\n\r\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\r\n                        var attribute = Strophe.XHTML.attributes[tag][i];\r\n                        var value = elem.getAttribute(attribute);\r\n\r\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\r\n                          continue;\r\n                        }\r\n\r\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\r\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\r\n                        } // filter out invalid css styles\r\n\r\n\r\n                        if (attribute === 'style') {\r\n                          var css = [];\r\n                          var cssAttrs = value.split(';');\r\n\r\n                          for (var j = 0; j < cssAttrs.length; j++) {\r\n                            var attr = cssAttrs[j].split(':');\r\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\r\n\r\n                            if (Strophe.XHTML.validCSS(cssName)) {\r\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\r\n                              css.push(cssName + ': ' + cssValue);\r\n                            }\r\n                          }\r\n\r\n                          if (css.length > 0) {\r\n                            value = css.join('; ');\r\n                            el.setAttribute(attribute, value);\r\n                          }\r\n                        } else {\r\n                          el.setAttribute(attribute, value);\r\n                        }\r\n                      }\r\n\r\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\r\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\r\n                      }\r\n                    } catch (e) {\r\n                      // invalid elements\r\n                      el = Strophe.xmlTextNode('');\r\n                    }\r\n                  } else {\r\n                    el = Strophe.xmlGenerator().createDocumentFragment();\r\n\r\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\r\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\r\n                    }\r\n                  }\r\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\r\n                  el = Strophe.xmlGenerator().createDocumentFragment();\r\n\r\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\r\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\r\n                  }\r\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\r\n                  el = Strophe.xmlTextNode(elem.nodeValue);\r\n                }\r\n\r\n                return el;\r\n              },\r\n\r\n              /** Function: escapeNode\r\n               *  Escape the node part (also called local part) of a JID.\r\n               *\r\n               *  Parameters:\r\n               *    (String) node - A node (or local part).\r\n               *\r\n               *  Returns:\r\n               *    An escaped node (or local part).\r\n               */\r\n              escapeNode: function escapeNode(node) {\r\n                if (typeof node !== \"string\") {\r\n                  return node;\r\n                }\r\n\r\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\r\n              },\r\n\r\n              /** Function: unescapeNode\r\n               *  Unescape a node part (also called local part) of a JID.\r\n               *\r\n               *  Parameters:\r\n               *    (String) node - A node (or local part).\r\n               *\r\n               *  Returns:\r\n               *    An unescaped node (or local part).\r\n               */\r\n              unescapeNode: function unescapeNode(node) {\r\n                if (typeof node !== \"string\") {\r\n                  return node;\r\n                }\r\n\r\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\r\n              },\r\n\r\n              /** Function: getNodeFromJid\r\n               *  Get the node portion of a JID String.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - A JID.\r\n               *\r\n               *  Returns:\r\n               *    A String containing the node.\r\n               */\r\n              getNodeFromJid: function getNodeFromJid(jid) {\r\n                if (jid.indexOf(\"@\") < 0) {\r\n                  return null;\r\n                }\r\n\r\n                return jid.split(\"@\")[0];\r\n              },\r\n\r\n              /** Function: getDomainFromJid\r\n               *  Get the domain portion of a JID String.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - A JID.\r\n               *\r\n               *  Returns:\r\n               *    A String containing the domain.\r\n               */\r\n              getDomainFromJid: function getDomainFromJid(jid) {\r\n                var bare = Strophe.getBareJidFromJid(jid);\r\n\r\n                if (bare.indexOf(\"@\") < 0) {\r\n                  return bare;\r\n                } else {\r\n                  var parts = bare.split(\"@\");\r\n                  parts.splice(0, 1);\r\n                  return parts.join('@');\r\n                }\r\n              },\r\n\r\n              /** Function: getResourceFromJid\r\n               *  Get the resource portion of a JID String.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - A JID.\r\n               *\r\n               *  Returns:\r\n               *    A String containing the resource.\r\n               */\r\n              getResourceFromJid: function getResourceFromJid(jid) {\r\n                if (!jid) {\r\n                  return null;\r\n                }\r\n\r\n                var s = jid.split(\"/\");\r\n\r\n                if (s.length < 2) {\r\n                  return null;\r\n                }\r\n\r\n                s.splice(0, 1);\r\n                return s.join('/');\r\n              },\r\n\r\n              /** Function: getBareJidFromJid\r\n               *  Get the bare JID from a JID String.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - A JID.\r\n               *\r\n               *  Returns:\r\n               *    A String containing the bare JID.\r\n               */\r\n              getBareJidFromJid: function getBareJidFromJid(jid) {\r\n                return jid ? jid.split(\"/\")[0] : null;\r\n              },\r\n\r\n              /** PrivateFunction: _handleError\r\n               *  _Private_ function that properly logs an error to the console\r\n               */\r\n              _handleError: function _handleError(e) {\r\n                if (typeof e.stack !== \"undefined\") {\r\n                  Strophe.fatal(e.stack);\r\n                }\r\n\r\n                if (e.sourceURL) {\r\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\r\n                } else if (e.fileName) {\r\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\r\n                } else {\r\n                  Strophe.fatal(\"error: \" + e.message);\r\n                }\r\n              },\r\n\r\n              /** Function: log\r\n               *  User overrideable logging function.\r\n               *\r\n               *  This function is called whenever the Strophe library calls any\r\n               *  of the logging functions.  The default implementation of this\r\n               *  function logs only fatal errors.  If client code wishes to handle the logging\r\n               *  messages, it should override this with\r\n               *  > Strophe.log = function (level, msg) {\r\n               *  >   (user code here)\r\n               *  > };\r\n               *\r\n               *  Please note that data sent and received over the wire is logged\r\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\r\n               *\r\n               *  The different levels and their meanings are\r\n               *\r\n               *    DEBUG - Messages useful for debugging purposes.\r\n               *    INFO - Informational messages.  This is mostly information like\r\n               *      'disconnect was called' or 'SASL auth succeeded'.\r\n               *    WARN - Warnings about potential problems.  This is mostly used\r\n               *      to report transient connection errors like request timeouts.\r\n               *    ERROR - Some error occurred.\r\n               *    FATAL - A non-recoverable fatal error occurred.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) level - The log level of the log message.  This will\r\n               *      be one of the values in Strophe.LogLevel.\r\n               *    (String) msg - The log message.\r\n               */\r\n              log: function log(level, msg) {\r\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\r\n                  window.console.error(msg);\r\n                }\r\n              },\r\n\r\n              /** Function: debug\r\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\r\n               *\r\n               *  Parameters:\r\n               *    (String) msg - The log message.\r\n               */\r\n              debug: function debug(msg) {\r\n                this.log(this.LogLevel.DEBUG, msg);\r\n              },\r\n\r\n              /** Function: info\r\n               *  Log a message at the Strophe.LogLevel.INFO level.\r\n               *\r\n               *  Parameters:\r\n               *    (String) msg - The log message.\r\n               */\r\n              info: function info(msg) {\r\n                this.log(this.LogLevel.INFO, msg);\r\n              },\r\n\r\n              /** Function: warn\r\n               *  Log a message at the Strophe.LogLevel.WARN level.\r\n               *\r\n               *  Parameters:\r\n               *    (String) msg - The log message.\r\n               */\r\n              warn: function warn(msg) {\r\n                this.log(this.LogLevel.WARN, msg);\r\n              },\r\n\r\n              /** Function: error\r\n               *  Log a message at the Strophe.LogLevel.ERROR level.\r\n               *\r\n               *  Parameters:\r\n               *    (String) msg - The log message.\r\n               */\r\n              error: function error(msg) {\r\n                this.log(this.LogLevel.ERROR, msg);\r\n              },\r\n\r\n              /** Function: fatal\r\n               *  Log a message at the Strophe.LogLevel.FATAL level.\r\n               *\r\n               *  Parameters:\r\n               *    (String) msg - The log message.\r\n               */\r\n              fatal: function fatal(msg) {\r\n                this.log(this.LogLevel.FATAL, msg);\r\n              },\r\n\r\n              /** Function: serialize\r\n               *  Render a DOM element and all descendants to a String.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - A DOM element.\r\n               *\r\n               *  Returns:\r\n               *    The serialized element tree as a String.\r\n               */\r\n              serialize: function serialize(elem) {\r\n                if (!elem) {\r\n                  return null;\r\n                }\r\n\r\n                if (typeof elem.tree === \"function\") {\r\n                  elem = elem.tree();\r\n                }\r\n\r\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\r\n                  return elem.attributes[i].nodeName;\r\n                });\r\n\r\n                names.sort();\r\n                var result = names.reduce(function (a, n) {\r\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\r\n                }, \"<\".concat(elem.nodeName));\r\n\r\n                if (elem.childNodes.length > 0) {\r\n                  result += \">\";\r\n\r\n                  for (var i = 0; i < elem.childNodes.length; i++) {\r\n                    var child = elem.childNodes[i];\r\n\r\n                    switch (child.nodeType) {\r\n                      case Strophe.ElementType.NORMAL:\r\n                        // normal element, so recurse\r\n                        result += Strophe.serialize(child);\r\n                        break;\r\n\r\n                      case Strophe.ElementType.TEXT:\r\n                        // text element to escape values\r\n                        result += Strophe.xmlescape(child.nodeValue);\r\n                        break;\r\n\r\n                      case Strophe.ElementType.CDATA:\r\n                        // cdata section so don't escape values\r\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\r\n                    }\r\n                  }\r\n\r\n                  result += \"</\" + elem.nodeName + \">\";\r\n                } else {\r\n                  result += \"/>\";\r\n                }\r\n\r\n                return result;\r\n              },\r\n\r\n              /** PrivateVariable: _requestId\r\n               *  _Private_ variable that keeps track of the request ids for\r\n               *  connections.\r\n               */\r\n              _requestId: 0,\r\n\r\n              /** PrivateVariable: Strophe.connectionPlugins\r\n               *  _Private_ variable Used to store plugin names that need\r\n               *  initialization on Strophe.Connection construction.\r\n               */\r\n              _connectionPlugins: {},\r\n\r\n              /** Function: addConnectionPlugin\r\n               *  Extends the Strophe.Connection object with the given plugin.\r\n               *\r\n               *  Parameters:\r\n               *    (String) name - The name of the extension.\r\n               *    (Object) ptype - The plugin's prototype.\r\n               */\r\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\r\n                Strophe._connectionPlugins[name] = ptype;\r\n              }\r\n            };\r\n            /** Class: Strophe.Builder\r\n             *  XML DOM builder.\r\n             *\r\n             *  This object provides an interface similar to JQuery but for building\r\n             *  DOM elements easily and rapidly.  All the functions except for toString()\r\n             *  and tree() return the object, so calls can be chained.  Here's an\r\n             *  example using the $iq() builder helper.\r\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\r\n             *  >     .c('query', {xmlns: 'strophe:example'})\r\n             *  >     .c('example')\r\n             *  >     .toString()\r\n             *\r\n             *  The above generates this XML fragment\r\n             *  > <iq to='you' from='me' type='get' id='1'>\r\n             *  >   <query xmlns='strophe:example'>\r\n             *  >     <example/>\r\n             *  >   </query>\r\n             *  > </iq>\r\n             *  The corresponding DOM manipulations to get a similar fragment would be\r\n             *  a lot more tedious and probably involve several helper variables.\r\n             *\r\n             *  Since adding children makes new operations operate on the child, up()\r\n             *  is provided to traverse up the tree.  To add two children, do\r\n             *  > builder.c('child1', ...).up().c('child2', ...)\r\n             *  The next operation on the Builder will be relative to the second child.\r\n             */\r\n\r\n            /** Constructor: Strophe.Builder\r\n             *  Create a Strophe.Builder object.\r\n             *\r\n             *  The attributes should be passed in object notation.  For example\r\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\r\n             *  or\r\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\r\n             *\r\n             *  Parameters:\r\n             *    (String) name - The name of the root element.\r\n             *    (Object) attrs - The attributes for the root element in object notation.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Builder.\r\n             */\r\n\r\n            Strophe.Builder = function (name, attrs) {\r\n              // Set correct namespace for jabber:client elements\r\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\r\n                if (attrs && !attrs.xmlns) {\r\n                  attrs.xmlns = Strophe.NS.CLIENT;\r\n                } else if (!attrs) {\r\n                  attrs = {\r\n                    xmlns: Strophe.NS.CLIENT\r\n                  };\r\n                }\r\n              } // Holds the tree being built.\r\n\r\n\r\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\r\n\r\n              this.node = this.nodeTree;\r\n            };\r\n\r\n            Strophe.Builder.prototype = {\r\n              /** Function: tree\r\n               *  Return the DOM tree.\r\n               *\r\n               *  This function returns the current DOM tree as an element object.  This\r\n               *  is suitable for passing to functions like Strophe.Connection.send().\r\n               *\r\n               *  Returns:\r\n               *    The DOM tree as a element object.\r\n               */\r\n              tree: function tree() {\r\n                return this.nodeTree;\r\n              },\r\n\r\n              /** Function: toString\r\n               *  Serialize the DOM tree to a String.\r\n               *\r\n               *  This function returns a string serialization of the current DOM\r\n               *  tree.  It is often used internally to pass data to a\r\n               *  Strophe.Request object.\r\n               *\r\n               *  Returns:\r\n               *    The serialized DOM tree in a String.\r\n               */\r\n              toString: function toString() {\r\n                return Strophe.serialize(this.nodeTree);\r\n              },\r\n\r\n              /** Function: up\r\n               *  Make the current parent element the new current element.\r\n               *\r\n               *  This function is often used after c() to traverse back up the tree.\r\n               *  For example, to add two children to the same element\r\n               *  > builder.c('child1', {}).up().c('child2', {});\r\n               *\r\n               *  Returns:\r\n               *    The Stophe.Builder object.\r\n               */\r\n              up: function up() {\r\n                this.node = this.node.parentNode;\r\n                return this;\r\n              },\r\n\r\n              /** Function: root\r\n               *  Make the root element the new current element.\r\n               *\r\n               *  When at a deeply nested element in the tree, this function can be used\r\n               *  to jump back to the root of the tree, instead of having to repeatedly\r\n               *  call up().\r\n               *\r\n               *  Returns:\r\n               *    The Stophe.Builder object.\r\n               */\r\n              root: function root() {\r\n                this.node = this.nodeTree;\r\n                return this;\r\n              },\r\n\r\n              /** Function: attrs\r\n               *  Add or modify attributes of the current element.\r\n               *\r\n               *  The attributes should be passed in object notation.  This function\r\n               *  does not move the current element pointer.\r\n               *\r\n               *  Parameters:\r\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\r\n               *\r\n               *  Returns:\r\n               *    The Strophe.Builder object.\r\n               */\r\n              attrs: function attrs(moreattrs) {\r\n                for (var k in moreattrs) {\r\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\r\n                    if (moreattrs[k] === undefined) {\r\n                      this.node.removeAttribute(k);\r\n                    } else {\r\n                      this.node.setAttribute(k, moreattrs[k]);\r\n                    }\r\n                  }\r\n                }\r\n\r\n                return this;\r\n              },\r\n\r\n              /** Function: c\r\n               *  Add a child to the current element and make it the new current\r\n               *  element.\r\n               *\r\n               *  This function moves the current element pointer to the child,\r\n               *  unless text is provided.  If you need to add another child, it\r\n               *  is necessary to use up() to go back to the parent in the tree.\r\n               *\r\n               *  Parameters:\r\n               *    (String) name - The name of the child.\r\n               *    (Object) attrs - The attributes of the child in object notation.\r\n               *    (String) text - The text to add to the child.\r\n               *\r\n               *  Returns:\r\n               *    The Strophe.Builder object.\r\n               */\r\n              c: function c(name, attrs, text) {\r\n                var child = Strophe.xmlElement(name, attrs, text);\r\n                this.node.appendChild(child);\r\n\r\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\r\n                  this.node = child;\r\n                }\r\n\r\n                return this;\r\n              },\r\n\r\n              /** Function: cnode\r\n               *  Add a child to the current element and make it the new current\r\n               *  element.\r\n               *\r\n               *  This function is the same as c() except that instead of using a\r\n               *  name and an attributes object to create the child it uses an\r\n               *  existing DOM element object.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - A DOM element.\r\n               *\r\n               *  Returns:\r\n               *    The Strophe.Builder object.\r\n               */\r\n              cnode: function cnode(elem) {\r\n                var impNode;\r\n                var xmlGen = Strophe.xmlGenerator();\r\n\r\n                try {\r\n                  impNode = xmlGen.importNode !== undefined;\r\n                } catch (e) {\r\n                  impNode = false;\r\n                }\r\n\r\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\r\n                this.node.appendChild(newElem);\r\n                this.node = newElem;\r\n                return this;\r\n              },\r\n\r\n              /** Function: t\r\n               *  Add a child text element.\r\n               *\r\n               *  This *does not* make the child the new current element since there\r\n               *  are no children of text elements.\r\n               *\r\n               *  Parameters:\r\n               *    (String) text - The text data to append to the current element.\r\n               *\r\n               *  Returns:\r\n               *    The Strophe.Builder object.\r\n               */\r\n              t: function t(text) {\r\n                var child = Strophe.xmlTextNode(text);\r\n                this.node.appendChild(child);\r\n                return this;\r\n              },\r\n\r\n              /** Function: h\r\n               *  Replace current element contents with the HTML passed in.\r\n               *\r\n               *  This *does not* make the child the new current element\r\n               *\r\n               *  Parameters:\r\n               *    (String) html - The html to insert as contents of current element.\r\n               *\r\n               *  Returns:\r\n               *    The Strophe.Builder object.\r\n               */\r\n              h: function h(html) {\r\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\r\n\r\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\r\n\r\n                var xhtml = Strophe.createHtml(fragment);\r\n\r\n                while (xhtml.childNodes.length > 0) {\r\n                  this.node.appendChild(xhtml.childNodes[0]);\r\n                }\r\n\r\n                return this;\r\n              }\r\n            };\r\n            /** PrivateClass: Strophe.Handler\r\n             *  _Private_ helper class for managing stanza handlers.\r\n             *\r\n             *  A Strophe.Handler encapsulates a user provided callback function to be\r\n             *  executed when matching stanzas are received by the connection.\r\n             *  Handlers can be either one-off or persistant depending on their\r\n             *  return value. Returning true will cause a Handler to remain active, and\r\n             *  returning false will remove the Handler.\r\n             *\r\n             *  Users will not use Strophe.Handler objects directly, but instead they\r\n             *  will use Strophe.Connection.addHandler() and\r\n             *  Strophe.Connection.deleteHandler().\r\n             */\r\n\r\n            /** PrivateConstructor: Strophe.Handler\r\n             *  Create and initialize a new Strophe.Handler.\r\n             *\r\n             *  Parameters:\r\n             *    (Function) handler - A function to be executed when the handler is run.\r\n             *    (String) ns - The namespace to match.\r\n             *    (String) name - The element name to match.\r\n             *    (String) type - The element type to match.\r\n             *    (String) id - The element id attribute to match.\r\n             *    (String) from - The element from attribute to match.\r\n             *    (Object) options - Handler options\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Handler object.\r\n             */\r\n\r\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\r\n              this.handler = handler;\r\n              this.ns = ns;\r\n              this.name = name;\r\n              this.type = type;\r\n              this.id = id;\r\n              this.options = options || {\r\n                'matchBareFromJid': false,\r\n                'ignoreNamespaceFragment': false\r\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\r\n\r\n              if (this.options.matchBare) {\r\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\r\n                this.options.matchBareFromJid = this.options.matchBare;\r\n                delete this.options.matchBare;\r\n              }\r\n\r\n              if (this.options.matchBareFromJid) {\r\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\r\n              } else {\r\n                this.from = from;\r\n              } // whether the handler is a user handler or a system handler\r\n\r\n\r\n              this.user = true;\r\n            };\r\n\r\n            Strophe.Handler.prototype = {\r\n              /** PrivateFunction: getNamespace\r\n               *  Returns the XML namespace attribute on an element.\r\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\r\n               *  URL fragment will be stripped.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The XML element with the namespace.\r\n               *\r\n               *  Returns:\r\n               *    The namespace, with optionally the fragment stripped.\r\n               */\r\n              getNamespace: function getNamespace(elem) {\r\n                var elNamespace = elem.getAttribute(\"xmlns\");\r\n\r\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\r\n                  elNamespace = elNamespace.split('#')[0];\r\n                }\r\n\r\n                return elNamespace;\r\n              },\r\n\r\n              /** PrivateFunction: namespaceMatch\r\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The XML element to test.\r\n               *\r\n               *  Returns:\r\n               *    true if the stanza matches and false otherwise.\r\n               */\r\n              namespaceMatch: function namespaceMatch(elem) {\r\n                var _this = this;\r\n\r\n                var nsMatch = false;\r\n\r\n                if (!this.ns) {\r\n                  return true;\r\n                } else {\r\n                  Strophe.forEachChild(elem, null, function (elem) {\r\n                    if (_this.getNamespace(elem) === _this.ns) {\r\n                      nsMatch = true;\r\n                    }\r\n                  });\r\n                  return nsMatch || this.getNamespace(elem) === this.ns;\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: isMatch\r\n               *  Tests if a stanza matches the Strophe.Handler.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The XML element to test.\r\n               *\r\n               *  Returns:\r\n               *    true if the stanza matches and false otherwise.\r\n               */\r\n              isMatch: function isMatch(elem) {\r\n                var from = elem.getAttribute('from');\r\n\r\n                if (this.options.matchBareFromJid) {\r\n                  from = Strophe.getBareJidFromJid(from);\r\n                }\r\n\r\n                var elem_type = elem.getAttribute(\"type\");\r\n\r\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\r\n                  return true;\r\n                }\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: run\r\n               *  Run the callback on a matching stanza.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The DOM element that triggered the\r\n               *      Strophe.Handler.\r\n               *\r\n               *  Returns:\r\n               *    A boolean indicating if the handler should remain active.\r\n               */\r\n              run: function run(elem) {\r\n                var result = null;\r\n\r\n                try {\r\n                  result = this.handler(elem);\r\n                } catch (e) {\r\n                  Strophe._handleError(e);\r\n\r\n                  throw e;\r\n                }\r\n\r\n                return result;\r\n              },\r\n\r\n              /** PrivateFunction: toString\r\n               *  Get a String representation of the Strophe.Handler object.\r\n               *\r\n               *  Returns:\r\n               *    A String.\r\n               */\r\n              toString: function toString() {\r\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\r\n              }\r\n            };\r\n            /** PrivateClass: Strophe.TimedHandler\r\n             *  _Private_ helper class for managing timed handlers.\r\n             *\r\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\r\n             *  should be called after a certain period of time or at regular\r\n             *  intervals.  The return value of the callback determines whether the\r\n             *  Strophe.TimedHandler will continue to fire.\r\n             *\r\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\r\n             *  they will use Strophe.Connection.addTimedHandler() and\r\n             *  Strophe.Connection.deleteTimedHandler().\r\n             */\r\n\r\n            /** PrivateConstructor: Strophe.TimedHandler\r\n             *  Create and initialize a new Strophe.TimedHandler object.\r\n             *\r\n             *  Parameters:\r\n             *    (Integer) period - The number of milliseconds to wait before the\r\n             *      handler is called.\r\n             *    (Function) handler - The callback to run when the handler fires.  This\r\n             *      function should take no arguments.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.TimedHandler object.\r\n             */\r\n\r\n            Strophe.TimedHandler = function (period, handler) {\r\n              this.period = period;\r\n              this.handler = handler;\r\n              this.lastCalled = new Date().getTime();\r\n              this.user = true;\r\n            };\r\n\r\n            Strophe.TimedHandler.prototype = {\r\n              /** PrivateFunction: run\r\n               *  Run the callback for the Strophe.TimedHandler.\r\n               *\r\n               *  Returns:\r\n               *    true if the Strophe.TimedHandler should be called again, and false\r\n               *      otherwise.\r\n               */\r\n              run: function run() {\r\n                this.lastCalled = new Date().getTime();\r\n                return this.handler();\r\n              },\r\n\r\n              /** PrivateFunction: reset\r\n               *  Reset the last called time for the Strophe.TimedHandler.\r\n               */\r\n              reset: function reset() {\r\n                this.lastCalled = new Date().getTime();\r\n              },\r\n\r\n              /** PrivateFunction: toString\r\n               *  Get a string representation of the Strophe.TimedHandler object.\r\n               *\r\n               *  Returns:\r\n               *    The string representation.\r\n               */\r\n              toString: function toString() {\r\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\r\n              }\r\n            };\r\n            /** Class: Strophe.Connection\r\n             *  XMPP Connection manager.\r\n             *\r\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\r\n             *  connection to an XMPP server and dispatches events to the user callbacks\r\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\r\n             *  and legacy authentication.\r\n             *\r\n             *  After creating a Strophe.Connection object, the user will typically\r\n             *  call connect() with a user supplied callback to handle connection level\r\n             *  events like authentication failure, disconnection, or connection\r\n             *  complete.\r\n             *\r\n             *  The user will also have several event handlers defined by using\r\n             *  addHandler() and addTimedHandler().  These will allow the user code to\r\n             *  respond to interesting stanzas or do something periodically with the\r\n             *  connection. These handlers will be active once authentication is\r\n             *  finished.\r\n             *\r\n             *  To send data to the connection, use send().\r\n             */\r\n\r\n            /** Constructor: Strophe.Connection\r\n             *  Create and initialize a Strophe.Connection object.\r\n             *\r\n             *  The transport-protocol for this connection will be chosen automatically\r\n             *  based on the given service parameter. URLs starting with \"ws://\" or\r\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\r\n             *  or without a protocol will use BOSH.\r\n             *\r\n             *  To make Strophe connect to the current host you can leave out the protocol\r\n             *  and host part and just pass the path, e.g.\r\n             *\r\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\r\n             *\r\n             *  Options common to both Websocket and BOSH:\r\n             *  ------------------------------------------\r\n             *\r\n             *  cookies:\r\n             *\r\n             *  The *cookies* option allows you to pass in cookies to be added to the\r\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\r\n             *  or in the websocket connection.\r\n             *\r\n             *  The passed in value must be a map of cookie names and string values.\r\n             *\r\n             *  > { \"myCookie\": {\r\n             *  >     \"value\": \"1234\",\r\n             *  >     \"domain\": \".example.org\",\r\n             *  >     \"path\": \"/\",\r\n             *  >     \"expires\": expirationDate\r\n             *  >     }\r\n             *  > }\r\n             *\r\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\r\n             *  Those cookies need to be set under those domains, for example they can be\r\n             *  set server-side by making a XHR call to that domain to ask it to set any\r\n             *  necessary cookies.\r\n             *\r\n             *  mechanisms:\r\n             *\r\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\r\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\r\n             *  support.\r\n             *\r\n             *  The value must be an array of objects with Strophe.SASLMechanism\r\n             *  prototypes.\r\n             *\r\n             *  If nothing is specified, then the following mechanisms (and their\r\n             *  priorities) are registered:\r\n             *\r\n             *      SCRAM-SHA1 - 70\r\n             *      DIGEST-MD5 - 60\r\n             *      PLAIN - 50\r\n             *      OAUTH-BEARER - 40\r\n             *      OAUTH-2 - 30\r\n             *      ANONYMOUS - 20\r\n             *      EXTERNAL - 10\r\n             *\r\n             *  explicitResourceBinding:\r\n             *\r\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\r\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\r\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\r\n             *\r\n             *  Making this step explicit allows client authors to first finish other\r\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\r\n             *  session, before binding the JID resource for this session.\r\n             *\r\n             *  WebSocket options:\r\n             *  ------------------\r\n             *\r\n             *  If you want to connect to the current host with a WebSocket connection you\r\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\r\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\r\n             *  for Secure WebSocket.\r\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\r\n             *\r\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\r\n             *\r\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\r\n             *  of the current site.\r\n             *\r\n             *  Also because downgrading security is not permitted by browsers, when using\r\n             *  relative URLs both BOSH and WebSocket connections will use their secure\r\n             *  variants if the current connection to the site is also secure (https).\r\n             *\r\n             *  BOSH options:\r\n             *  -------------\r\n             *\r\n             *  By adding \"sync\" to the options, you can control if requests will\r\n             *  be made synchronously or not. The default behaviour is asynchronous.\r\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\r\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\r\n             *\r\n             *  You can also toggle this on an already established connection.\r\n             *  > conn.options.sync = true;\r\n             *\r\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\r\n             *  included in the XMLHttpRequests made.\r\n             *\r\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\r\n             *  current BOSH session across interruptions such as webpage reloads.\r\n             *\r\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\r\n             *  \"restore\" is called it will check whether there are cached tokens with\r\n             *  which it can resume an existing session.\r\n             *\r\n             *  The *withCredentials* option should receive a Boolean value and is used to\r\n             *  indicate wether cookies should be included in ajax requests (by default\r\n             *  they're not).\r\n             *  Set this value to true if you are connecting to a BOSH service\r\n             *  and for some reason need to send cookies to it.\r\n             *  In order for this to work cross-domain, the server must also enable\r\n             *  credentials by setting the Access-Control-Allow-Credentials response header\r\n             *  to \"true\". For most usecases however this setting should be false (which\r\n             *  is the default).\r\n             *  Additionally, when using Access-Control-Allow-Credentials, the\r\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\r\n             *  instead must be restricted to actual domains.\r\n             *\r\n             *  The *contentType* option can be set to change the default Content-Type\r\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\r\n             *  CORS preflight requests that are sent to the server.\r\n             *\r\n             *  Parameters:\r\n             *    (String) service - The BOSH or WebSocket service URL.\r\n             *    (Object) options - A hash of configuration options\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Connection object.\r\n             */\r\n\r\n            Strophe.Connection = function (service, options) {\r\n              var _this2 = this;\r\n\r\n              // The service URL\r\n              this.service = service; // Configuration options\r\n\r\n              this.options = options || {};\r\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\r\n\r\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\r\n                this._proto = new Strophe.Websocket(this);\r\n              } else {\r\n                this._proto = new Strophe.Bosh(this);\r\n              }\r\n              /* The connected JID. */\r\n\r\n\r\n              this.jid = \"\";\r\n              /* the JIDs domain */\r\n\r\n              this.domain = null;\r\n              /* stream:features */\r\n\r\n              this.features = null; // SASL\r\n\r\n              this._sasl_data = {};\r\n              this.do_session = false;\r\n              this.do_bind = false; // handler lists\r\n\r\n              this.timedHandlers = [];\r\n              this.handlers = [];\r\n              this.removeTimeds = [];\r\n              this.removeHandlers = [];\r\n              this.addTimeds = [];\r\n              this.addHandlers = [];\r\n              this.protocolErrorHandlers = {\r\n                'HTTP': {},\r\n                'websocket': {}\r\n              };\r\n              this._idleTimeout = null;\r\n              this._disconnectTimeout = null;\r\n              this.authenticated = false;\r\n              this.connected = false;\r\n              this.disconnecting = false;\r\n              this.do_authentication = true;\r\n              this.paused = false;\r\n              this.restored = false;\r\n              this._data = [];\r\n              this._uniqueId = 0;\r\n              this._sasl_success_handler = null;\r\n              this._sasl_failure_handler = null;\r\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\r\n\r\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\r\n\r\n              this._idleTimeout = setTimeout(function () {\r\n                return _this2._onIdle();\r\n              }, 100);\r\n              utils.addCookies(this.options.cookies);\r\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\r\n\r\n              for (var k in Strophe._connectionPlugins) {\r\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\r\n                  var F = function F() {};\r\n\r\n                  F.prototype = Strophe._connectionPlugins[k];\r\n                  this[k] = new F();\r\n                  this[k].init(this);\r\n                }\r\n              }\r\n            };\r\n\r\n            Strophe.Connection.prototype = {\r\n              /** Function: reset\r\n               *  Reset the connection.\r\n               *\r\n               *  This function should be called after a connection is disconnected\r\n               *  before that connection is reused.\r\n               */\r\n              reset: function reset() {\r\n                this._proto._reset(); // SASL\r\n\r\n\r\n                this.do_session = false;\r\n                this.do_bind = false; // handler lists\r\n\r\n                this.timedHandlers = [];\r\n                this.handlers = [];\r\n                this.removeTimeds = [];\r\n                this.removeHandlers = [];\r\n                this.addTimeds = [];\r\n                this.addHandlers = [];\r\n                this.authenticated = false;\r\n                this.connected = false;\r\n                this.disconnecting = false;\r\n                this.restored = false;\r\n                this._data = [];\r\n                this._requests = [];\r\n                this._uniqueId = 0;\r\n              },\r\n\r\n              /** Function: pause\r\n               *  Pause the request manager.\r\n               *\r\n               *  This will prevent Strophe from sending any more requests to the\r\n               *  server.  This is very useful for temporarily pausing\r\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\r\n               *  This causes Strophe to send the data in a single request, saving\r\n               *  many request trips.\r\n               */\r\n              pause: function pause() {\r\n                this.paused = true;\r\n              },\r\n\r\n              /** Function: resume\r\n               *  Resume the request manager.\r\n               *\r\n               *  This resumes after pause() has been called.\r\n               */\r\n              resume: function resume() {\r\n                this.paused = false;\r\n              },\r\n\r\n              /** Function: getUniqueId\r\n               *  Generate a unique ID for use in <iq/> elements.\r\n               *\r\n               *  All <iq/> stanzas are required to have unique id attributes.  This\r\n               *  function makes creating these easy.  Each connection instance has\r\n               *  a counter which starts from zero, and the value of this counter\r\n               *  plus a colon followed by the suffix becomes the unique id. If no\r\n               *  suffix is supplied, the counter is used as the unique id.\r\n               *\r\n               *  Suffixes are used to make debugging easier when reading the stream\r\n               *  data, and their use is recommended.  The counter resets to 0 for\r\n               *  every new connection for the same reason.  For connections to the\r\n               *  same server that authenticate the same way, all the ids should be\r\n               *  the same, which makes it easy to see changes.  This is useful for\r\n               *  automated testing as well.\r\n               *\r\n               *  Parameters:\r\n               *    (String) suffix - A optional suffix to append to the id.\r\n               *\r\n               *  Returns:\r\n               *    A unique string to be used for the id attribute.\r\n               */\r\n              getUniqueId: function getUniqueId(suffix) {\r\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n                  var r = Math.random() * 16 | 0,\r\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\r\n                  return v.toString(16);\r\n                });\r\n\r\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\r\n                  return uuid + \":\" + suffix;\r\n                } else {\r\n                  return uuid + \"\";\r\n                }\r\n              },\r\n\r\n              /** Function: addProtocolErrorHandler\r\n               *  Register a handler function for when a protocol (websocker or HTTP)\r\n               *  error occurs.\r\n               *\r\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\r\n               *  Patches that handle websocket errors would be very welcome.\r\n               *\r\n               *  Parameters:\r\n               *    (String) protocol - 'HTTP' or 'websocket'\r\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\r\n               *    (Function) callback - Function that will fire on Http error\r\n               *\r\n               *  Example:\r\n               *  function onError(err_code){\r\n               *    //do stuff\r\n               *  }\r\n               *\r\n               *  let conn = Strophe.connect('http://example.com/http-bind');\r\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\r\n               *  // Triggers HTTP 500 error and onError handler will be called\r\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\r\n               */\r\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\r\n                this.protocolErrorHandlers[protocol][status_code] = callback;\r\n              },\r\n\r\n              /** Function: connect\r\n               *  Starts the connection process.\r\n               *\r\n               *  As the connection process proceeds, the user supplied callback will\r\n               *  be triggered multiple times with status updates.  The callback\r\n               *  should take two arguments - the status code and the error condition.\r\n               *\r\n               *  The status code will be one of the values in the Strophe.Status\r\n               *  constants.  The error condition will be one of the conditions\r\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\r\n               *\r\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\r\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\r\n               *  of the optional parameters.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - The user's JID.  This may be a bare JID,\r\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\r\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\r\n               *      process the provided password value as an access token).\r\n               *    (String) pass - The user's password.\r\n               *    (Function) callback - The connect callback function.\r\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n               *      time the server will wait before returning an empty result for\r\n               *      a request.  The default setting of 60 seconds is recommended.\r\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n               *      number of connections the server will hold at one time.  This\r\n               *      should almost always be set to 1 (the default).\r\n               *    (String) route - The optional route value.\r\n               *    (String) authcid - The optional alternative authentication identity\r\n               *      (username) if intending to impersonate another user.\r\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\r\n               *      with client certificates, then the authcid value is used to\r\n               *      determine whether an authorization JID (authzid) should be sent to\r\n               *      the server. The authzid should not be sent to the server if the\r\n               *      authzid and authcid are the same. So to prevent it from being sent\r\n               *      (for example when the JID is already contained in the client\r\n               *      certificate), set authcid to that same JID. See XEP-178 for more\r\n               *      details.\r\n               */\r\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\r\n                this.jid = jid;\r\n                /** Variable: authzid\r\n                 *  Authorization identity.\r\n                 */\r\n\r\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\r\n                /** Variable: authcid\r\n                 *  Authentication identity (User name).\r\n                 */\r\n\r\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\r\n                /** Variable: pass\r\n                 *  Authentication identity (User password).\r\n                 */\r\n\r\n                this.pass = pass;\r\n                /** Variable: servtype\r\n                 *  Digest MD5 compatibility.\r\n                 */\r\n\r\n                this.servtype = \"xmpp\";\r\n                this.connect_callback = callback;\r\n                this.disconnecting = false;\r\n                this.connected = false;\r\n                this.authenticated = false;\r\n                this.restored = false; // parse jid for domain\r\n\r\n                this.domain = Strophe.getDomainFromJid(this.jid);\r\n\r\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\r\n\r\n                this._proto._connect(wait, hold, route);\r\n              },\r\n\r\n              /** Function: attach\r\n               *  Attach to an already created and authenticated BOSH session.\r\n               *\r\n               *  This function is provided to allow Strophe to attach to BOSH\r\n               *  sessions which have been created externally, perhaps by a Web\r\n               *  application.  This is often used to support auto-login type features\r\n               *  without putting user credentials into the page.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - The full JID that is bound by the session.\r\n               *    (String) sid - The SID of the BOSH session.\r\n               *    (String) rid - The current RID of the BOSH session.  This RID\r\n               *      will be used by the next request.\r\n               *    (Function) callback The connect callback function.\r\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n               *      time the server will wait before returning an empty result for\r\n               *      a request.  The default setting of 60 seconds is recommended.\r\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\r\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n               *      number of connections the server will hold at one time.  This\r\n               *      should almost always be set to 1 (the default).\r\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n               *      allowed range of request ids that are valid.  The default is 5.\r\n               */\r\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\r\n                if (this._proto instanceof Strophe.Bosh) {\r\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\r\n                } else {\r\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\r\n                  error.name = 'StropheSessionError';\r\n                  throw error;\r\n                }\r\n              },\r\n\r\n              /** Function: restore\r\n               *  Attempt to restore a cached BOSH session.\r\n               *\r\n               *  This function is only useful in conjunction with providing the\r\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\r\n               *\r\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\r\n               *  RID (Request ID) and SID (Session ID) and then when this function is\r\n               *  called, it will attempt to restore the session from those cached\r\n               *  tokens.\r\n               *\r\n               *  This function must therefore be called instead of connect or attach.\r\n               *\r\n               *  For an example on how to use it, please see examples/restore.js\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\r\n               *    (Function) callback - The connect callback function.\r\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n               *      time the server will wait before returning an empty result for\r\n               *      a request.  The default setting of 60 seconds is recommended.\r\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n               *      number of connections the server will hold at one time.  This\r\n               *      should almost always be set to 1 (the default).\r\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n               *      allowed range of request ids that are valid.  The default is 5.\r\n               */\r\n              restore: function restore(jid, callback, wait, hold, wind) {\r\n                if (this._sessionCachingSupported()) {\r\n                  this._proto._restore(jid, callback, wait, hold, wind);\r\n                } else {\r\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\r\n                  error.name = 'StropheSessionError';\r\n                  throw error;\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _sessionCachingSupported\r\n               * Checks whether sessionStorage and JSON are supported and whether we're\r\n               * using BOSH.\r\n               */\r\n              _sessionCachingSupported: function _sessionCachingSupported() {\r\n                if (this._proto instanceof Strophe.Bosh) {\r\n                  if (!JSON) {\r\n                    return false;\r\n                  }\r\n\r\n                  try {\r\n                    sessionStorage.setItem('_strophe_', '_strophe_');\r\n                    sessionStorage.removeItem('_strophe_');\r\n                  } catch (e) {\r\n                    return false;\r\n                  }\r\n\r\n                  return true;\r\n                }\r\n\r\n                return false;\r\n              },\r\n\r\n              /** Function: xmlInput\r\n               *  User overrideable function that receives XML data coming into the\r\n               *  connection.\r\n               *\r\n               *  The default function does nothing.  User code can override this with\r\n               *  > Strophe.Connection.xmlInput = function (elem) {\r\n               *  >   (user code)\r\n               *  > };\r\n               *\r\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\r\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\r\n               *\r\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\r\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The XML data received by the connection.\r\n               */\r\n              xmlInput: function xmlInput(elem) {\r\n                return;\r\n              },\r\n\r\n              /** Function: xmlOutput\r\n               *  User overrideable function that receives XML data sent to the\r\n               *  connection.\r\n               *\r\n               *  The default function does nothing.  User code can override this with\r\n               *  > Strophe.Connection.xmlOutput = function (elem) {\r\n               *  >   (user code)\r\n               *  > };\r\n               *\r\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\r\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\r\n               *\r\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\r\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The XMLdata sent by the connection.\r\n               */\r\n              xmlOutput: function xmlOutput(elem) {\r\n                return;\r\n              },\r\n\r\n              /** Function: rawInput\r\n               *  User overrideable function that receives raw data coming into the\r\n               *  connection.\r\n               *\r\n               *  The default function does nothing.  User code can override this with\r\n               *  > Strophe.Connection.rawInput = function (data) {\r\n               *  >   (user code)\r\n               *  > };\r\n               *\r\n               *  Parameters:\r\n               *    (String) data - The data received by the connection.\r\n               */\r\n              rawInput: function rawInput(data) {\r\n                return;\r\n              },\r\n\r\n              /** Function: rawOutput\r\n               *  User overrideable function that receives raw data sent to the\r\n               *  connection.\r\n               *\r\n               *  The default function does nothing.  User code can override this with\r\n               *  > Strophe.Connection.rawOutput = function (data) {\r\n               *  >   (user code)\r\n               *  > };\r\n               *\r\n               *  Parameters:\r\n               *    (String) data - The data sent by the connection.\r\n               */\r\n              rawOutput: function rawOutput(data) {\r\n                return;\r\n              },\r\n\r\n              /** Function: nextValidRid\r\n               *  User overrideable function that receives the new valid rid.\r\n               *\r\n               *  The default function does nothing. User code can override this with\r\n               *  > Strophe.Connection.nextValidRid = function (rid) {\r\n               *  >    (user code)\r\n               *  > };\r\n               *\r\n               *  Parameters:\r\n               *    (Number) rid - The next valid rid\r\n               */\r\n              nextValidRid: function nextValidRid(rid) {\r\n                return;\r\n              },\r\n\r\n              /** Function: send\r\n               *  Send a stanza.\r\n               *\r\n               *  This function is called to push data onto the send queue to\r\n               *  go out over the wire.  Whenever a request is sent to the BOSH\r\n               *  server, all pending data is sent and the queue is flushed.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement |\r\n               *     [XMLElement] |\r\n               *     Strophe.Builder) elem - The stanza to send.\r\n               */\r\n              send: function send(elem) {\r\n                if (elem === null) {\r\n                  return;\r\n                }\r\n\r\n                if (typeof elem.sort === \"function\") {\r\n                  for (var i = 0; i < elem.length; i++) {\r\n                    this._queueData(elem[i]);\r\n                  }\r\n                } else if (typeof elem.tree === \"function\") {\r\n                  this._queueData(elem.tree());\r\n                } else {\r\n                  this._queueData(elem);\r\n                }\r\n\r\n                this._proto._send();\r\n              },\r\n\r\n              /** Function: flush\r\n               *  Immediately send any pending outgoing data.\r\n               *\r\n               *  Normally send() queues outgoing data until the next idle period\r\n               *  (100ms), which optimizes network use in the common cases when\r\n               *  several send()s are called in succession. flush() can be used to\r\n               *  immediately send all pending data.\r\n               */\r\n              flush: function flush() {\r\n                // cancel the pending idle period and run the idle function\r\n                // immediately\r\n                clearTimeout(this._idleTimeout);\r\n\r\n                this._onIdle();\r\n              },\r\n\r\n              /** Function: sendPresence\r\n               *  Helper function to send presence stanzas. The main benefit is for\r\n               *  sending presence stanzas for which you expect a responding presence\r\n               *  stanza with the same id (for example when leaving a chat room).\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The stanza to send.\r\n               *    (Function) callback - The callback function for a successful request.\r\n               *    (Function) errback - The callback function for a failed or timed\r\n               *      out request.  On timeout, the stanza will be null.\r\n               *    (Integer) timeout - The time specified in milliseconds for a\r\n               *      timeout to occur.\r\n               *\r\n               *  Returns:\r\n               *    The id used to send the presence.\r\n               */\r\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\r\n                var _this3 = this;\r\n\r\n                var timeoutHandler = null;\r\n\r\n                if (typeof elem.tree === \"function\") {\r\n                  elem = elem.tree();\r\n                }\r\n\r\n                var id = elem.getAttribute('id');\r\n\r\n                if (!id) {\r\n                  // inject id if not found\r\n                  id = this.getUniqueId(\"sendPresence\");\r\n                  elem.setAttribute(\"id\", id);\r\n                }\r\n\r\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\r\n                  var handler = this.addHandler(function (stanza) {\r\n                    // remove timeout handler if there is one\r\n                    if (timeoutHandler) {\r\n                      _this3.deleteTimedHandler(timeoutHandler);\r\n                    }\r\n\r\n                    if (stanza.getAttribute('type') === 'error') {\r\n                      if (errback) {\r\n                        errback(stanza);\r\n                      }\r\n                    } else if (callback) {\r\n                      callback(stanza);\r\n                    }\r\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\r\n\r\n                  if (timeout) {\r\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\r\n                      // get rid of normal handler\r\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\r\n\r\n\r\n                      if (errback) {\r\n                        errback(null);\r\n                      }\r\n\r\n                      return false;\r\n                    });\r\n                  }\r\n                }\r\n\r\n                this.send(elem);\r\n                return id;\r\n              },\r\n\r\n              /** Function: sendIQ\r\n               *  Helper function to send IQ stanzas.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The stanza to send.\r\n               *    (Function) callback - The callback function for a successful request.\r\n               *    (Function) errback - The callback function for a failed or timed\r\n               *      out request.  On timeout, the stanza will be null.\r\n               *    (Integer) timeout - The time specified in milliseconds for a\r\n               *      timeout to occur.\r\n               *\r\n               *  Returns:\r\n               *    The id used to send the IQ.\r\n              */\r\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\r\n                var _this4 = this;\r\n\r\n                var timeoutHandler = null;\r\n\r\n                if (typeof elem.tree === \"function\") {\r\n                  elem = elem.tree();\r\n                }\r\n\r\n                var id = elem.getAttribute('id');\r\n\r\n                if (!id) {\r\n                  // inject id if not found\r\n                  id = this.getUniqueId(\"sendIQ\");\r\n                  elem.setAttribute(\"id\", id);\r\n                }\r\n\r\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\r\n                  var handler = this.addHandler(function (stanza) {\r\n                    // remove timeout handler if there is one\r\n                    if (timeoutHandler) {\r\n                      _this4.deleteTimedHandler(timeoutHandler);\r\n                    }\r\n\r\n                    var iqtype = stanza.getAttribute('type');\r\n\r\n                    if (iqtype === 'result') {\r\n                      if (callback) {\r\n                        callback(stanza);\r\n                      }\r\n                    } else if (iqtype === 'error') {\r\n                      if (errback) {\r\n                        errback(stanza);\r\n                      }\r\n                    } else {\r\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\r\n                      error.name = \"StropheError\";\r\n                      throw error;\r\n                    }\r\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\r\n\r\n                  if (timeout) {\r\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\r\n                      // get rid of normal handler\r\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\r\n\r\n\r\n                      if (errback) {\r\n                        errback(null);\r\n                      }\r\n\r\n                      return false;\r\n                    });\r\n                  }\r\n                }\r\n\r\n                this.send(elem);\r\n                return id;\r\n              },\r\n\r\n              /** PrivateFunction: _queueData\r\n               *  Queue outgoing data for later sending.  Also ensures that the data\r\n               *  is a DOMElement.\r\n               */\r\n              _queueData: function _queueData(element) {\r\n                if (element === null || !element.tagName || !element.childNodes) {\r\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\r\n                  error.name = \"StropheError\";\r\n                  throw error;\r\n                }\r\n\r\n                this._data.push(element);\r\n              },\r\n\r\n              /** PrivateFunction: _sendRestart\r\n               *  Send an xmpp:restart stanza.\r\n               */\r\n              _sendRestart: function _sendRestart() {\r\n                var _this5 = this;\r\n\r\n                this._data.push(\"restart\");\r\n\r\n                this._proto._sendRestart();\r\n\r\n                this._idleTimeout = setTimeout(function () {\r\n                  return _this5._onIdle();\r\n                }, 100);\r\n              },\r\n\r\n              /** Function: addTimedHandler\r\n               *  Add a timed handler to the connection.\r\n               *\r\n               *  This function adds a timed handler.  The provided handler will\r\n               *  be called every period milliseconds until it returns false,\r\n               *  the connection is terminated, or the handler is removed.  Handlers\r\n               *  that wish to continue being invoked should return true.\r\n               *\r\n               *  Because of method binding it is necessary to save the result of\r\n               *  this function if you wish to remove a handler with\r\n               *  deleteTimedHandler().\r\n               *\r\n               *  Note that user handlers are not active until authentication is\r\n               *  successful.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) period - The period of the handler.\r\n               *    (Function) handler - The callback function.\r\n               *\r\n               *  Returns:\r\n               *    A reference to the handler that can be used to remove it.\r\n               */\r\n              addTimedHandler: function addTimedHandler(period, handler) {\r\n                var thand = new Strophe.TimedHandler(period, handler);\r\n                this.addTimeds.push(thand);\r\n                return thand;\r\n              },\r\n\r\n              /** Function: deleteTimedHandler\r\n               *  Delete a timed handler for a connection.\r\n               *\r\n               *  This function removes a timed handler from the connection.  The\r\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\r\n               *  but is the reference returned from addTimedHandler().\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.TimedHandler) handRef - The handler reference.\r\n               */\r\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\r\n                // this must be done in the Idle loop so that we don't change\r\n                // the handlers during iteration\r\n                this.removeTimeds.push(handRef);\r\n              },\r\n\r\n              /** Function: addHandler\r\n               *  Add a stanza handler for the connection.\r\n               *\r\n               *  This function adds a stanza handler to the connection.  The\r\n               *  handler callback will be called for any stanza that matches\r\n               *  the parameters.  Note that if multiple parameters are supplied,\r\n               *  they must all match for the handler to be invoked.\r\n               *\r\n               *  The handler will receive the stanza that triggered it as its argument.\r\n               *  *The handler should return true if it is to be invoked again;\r\n               *  returning false will remove the handler after it returns.*\r\n               *\r\n               *  As a convenience, the ns parameters applies to the top level element\r\n               *  and also any of its immediate children.  This is primarily to make\r\n               *  matching /iq/query elements easy.\r\n               *\r\n               *  Options\r\n               *  ~~~~~~~\r\n               *  With the options argument, you can specify boolean flags that affect how\r\n               *  matches are being done.\r\n               *\r\n               *  Currently two flags exist:\r\n               *\r\n               *  - matchBareFromJid:\r\n               *      When set to true, the from parameter and the\r\n               *      from attribute on the stanza will be matched as bare JIDs instead\r\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\r\n               *      value of options. The default value for matchBareFromJid is false.\r\n               *\r\n               *  - ignoreNamespaceFragment:\r\n               *      When set to true, a fragment specified on the stanza's namespace\r\n               *      URL will be ignored when it's matched with the one configured for\r\n               *      the handler.\r\n               *\r\n               *      This means that if you register like this:\r\n               *      >   connection.addHandler(\r\n               *      >       handler,\r\n               *      >       'http://jabber.org/protocol/muc',\r\n               *      >       null, null, null, null,\r\n               *      >       {'ignoreNamespaceFragment': true}\r\n               *      >   );\r\n               *\r\n               *      Then a stanza with XML namespace of\r\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\r\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\r\n               *      'http://jabber.org/protocol/muc' will be matched.\r\n               *\r\n               *  Deleting the handler\r\n               *  ~~~~~~~~~~~~~~~~~~~~\r\n               *  The return value should be saved if you wish to remove the handler\r\n               *  with deleteHandler().\r\n               *\r\n               *  Parameters:\r\n               *    (Function) handler - The user callback.\r\n               *    (String) ns - The namespace to match.\r\n               *    (String) name - The stanza name to match.\r\n               *    (String|Array) type - The stanza type (or types if an array) to match.\r\n               *    (String) id - The stanza id attribute to match.\r\n               *    (String) from - The stanza from attribute to match.\r\n               *    (String) options - The handler options\r\n               *\r\n               *  Returns:\r\n               *    A reference to the handler that can be used to remove it.\r\n               */\r\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\r\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\r\n                this.addHandlers.push(hand);\r\n                return hand;\r\n              },\r\n\r\n              /** Function: deleteHandler\r\n               *  Delete a stanza handler for a connection.\r\n               *\r\n               *  This function removes a stanza handler from the connection.  The\r\n               *  handRef parameter is *not* the function passed to addHandler(),\r\n               *  but is the reference returned from addHandler().\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Handler) handRef - The handler reference.\r\n               */\r\n              deleteHandler: function deleteHandler(handRef) {\r\n                // this must be done in the Idle loop so that we don't change\r\n                // the handlers during iteration\r\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\r\n                // prevent it from getting added\r\n\r\n                var i = this.addHandlers.indexOf(handRef);\r\n\r\n                if (i >= 0) {\r\n                  this.addHandlers.splice(i, 1);\r\n                }\r\n              },\r\n\r\n              /** Function: registerSASLMechanisms\r\n               *\r\n               * Register the SASL mechanisms which will be supported by this instance of\r\n               * Strophe.Connection (i.e. which this XMPP client will support).\r\n               *\r\n               *  Parameters:\r\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\r\n               *\r\n               */\r\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\r\n                this.mechanisms = {};\r\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\r\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\r\n              },\r\n\r\n              /** Function: registerSASLMechanism\r\n               *\r\n               * Register a single SASL mechanism, to be supported by this client.\r\n               *\r\n               *  Parameters:\r\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\r\n               *\r\n               */\r\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\r\n                this.mechanisms[mechanism.prototype.name] = mechanism;\r\n              },\r\n\r\n              /** Function: disconnect\r\n               *  Start the graceful disconnection process.\r\n               *\r\n               *  This function starts the disconnection process.  This process starts\r\n               *  by sending unavailable presence and sending BOSH body of type\r\n               *  terminate.  A timeout handler makes sure that disconnection happens\r\n               *  even if the BOSH server does not respond.\r\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\r\n               *  so the connection object won't generate successful requests (which were already opened).\r\n               *\r\n               *  The user supplied connection callback will be notified of the\r\n               *  progress as this process happens.\r\n               *\r\n               *  Parameters:\r\n               *    (String) reason - The reason the disconnect is occuring.\r\n               */\r\n              disconnect: function disconnect(reason) {\r\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\r\n\r\n                Strophe.warn(\"Disconnect was called because: \" + reason);\r\n\r\n                if (this.connected) {\r\n                  var pres = false;\r\n                  this.disconnecting = true;\r\n\r\n                  if (this.authenticated) {\r\n                    pres = $pres({\r\n                      'xmlns': Strophe.NS.CLIENT,\r\n                      'type': 'unavailable'\r\n                    });\r\n                  } // setup timeout handler\r\n\r\n\r\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\r\n\r\n                  this._proto._disconnect(pres);\r\n                } else {\r\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\r\n\r\n                  this._proto._abortAllRequests();\r\n\r\n                  this._doDisconnect();\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _changeConnectStatus\r\n               *  _Private_ helper function that makes sure plugins and the user's\r\n               *  callback are notified of connection status changes.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) status - the new connection status, one of the values\r\n               *      in Strophe.Status\r\n               *    (String) condition - the error condition or null\r\n               *    (XMLElement) elem - The triggering stanza.\r\n               */\r\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\r\n                // notify all plugins listening for status changes\r\n                for (var k in Strophe._connectionPlugins) {\r\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\r\n                    var plugin = this[k];\r\n\r\n                    if (plugin.statusChanged) {\r\n                      try {\r\n                        plugin.statusChanged(status, condition);\r\n                      } catch (err) {\r\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\r\n                      }\r\n                    }\r\n                  }\r\n                } // notify the user's callback\r\n\r\n\r\n                if (this.connect_callback) {\r\n                  try {\r\n                    this.connect_callback(status, condition, elem);\r\n                  } catch (e) {\r\n                    Strophe._handleError(e);\r\n\r\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\r\n                  }\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _doDisconnect\r\n               *  _Private_ function to disconnect.\r\n               *\r\n               *  This is the last piece of the disconnection logic.  This resets the\r\n               *  connection and alerts the user's connection callback.\r\n               */\r\n              _doDisconnect: function _doDisconnect(condition) {\r\n                if (typeof this._idleTimeout === \"number\") {\r\n                  clearTimeout(this._idleTimeout);\r\n                } // Cancel Disconnect Timeout\r\n\r\n\r\n                if (this._disconnectTimeout !== null) {\r\n                  this.deleteTimedHandler(this._disconnectTimeout);\r\n                  this._disconnectTimeout = null;\r\n                }\r\n\r\n                Strophe.debug(\"_doDisconnect was called\");\r\n\r\n                this._proto._doDisconnect();\r\n\r\n                this.authenticated = false;\r\n                this.disconnecting = false;\r\n                this.restored = false; // delete handlers\r\n\r\n                this.handlers = [];\r\n                this.timedHandlers = [];\r\n                this.removeTimeds = [];\r\n                this.removeHandlers = [];\r\n                this.addTimeds = [];\r\n                this.addHandlers = []; // tell the parent we disconnected\r\n\r\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\r\n\r\n                this.connected = false;\r\n              },\r\n\r\n              /** PrivateFunction: _dataRecv\r\n               *  _Private_ handler to processes incoming data from the the connection.\r\n               *\r\n               *  Except for _connect_cb handling the initial connection request,\r\n               *  this function handles the incoming data for all requests.  This\r\n               *  function also fires stanza handlers that match each incoming\r\n               *  stanza.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) req - The request that has data ready.\r\n               *    (string) req - The stanza a raw string (optiona).\r\n               */\r\n              _dataRecv: function _dataRecv(req, raw) {\r\n                var _this6 = this;\r\n\r\n                Strophe.debug(\"_dataRecv called\");\r\n\r\n                var elem = this._proto._reqToData(req);\r\n\r\n                if (elem === null) {\r\n                  return;\r\n                }\r\n\r\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\r\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\r\n                    this.xmlInput(elem.childNodes[0]);\r\n                  } else {\r\n                    this.xmlInput(elem);\r\n                  }\r\n                }\r\n\r\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\r\n                  if (raw) {\r\n                    this.rawInput(raw);\r\n                  } else {\r\n                    this.rawInput(Strophe.serialize(elem));\r\n                  }\r\n                } // remove handlers scheduled for deletion\r\n\r\n\r\n                while (this.removeHandlers.length > 0) {\r\n                  var hand = this.removeHandlers.pop();\r\n                  var i = this.handlers.indexOf(hand);\r\n\r\n                  if (i >= 0) {\r\n                    this.handlers.splice(i, 1);\r\n                  }\r\n                } // add handlers scheduled for addition\r\n\r\n\r\n                while (this.addHandlers.length > 0) {\r\n                  this.handlers.push(this.addHandlers.pop());\r\n                } // handle graceful disconnect\r\n\r\n\r\n                if (this.disconnecting && this._proto._emptyQueue()) {\r\n                  this._doDisconnect();\r\n\r\n                  return;\r\n                }\r\n\r\n                var type = elem.getAttribute(\"type\");\r\n\r\n                if (type !== null && type === \"terminate\") {\r\n                  // Don't process stanzas that come in after disconnect\r\n                  if (this.disconnecting) {\r\n                    return;\r\n                  } // an error occurred\r\n\r\n\r\n                  var cond = elem.getAttribute(\"condition\");\r\n                  var conflict = elem.getElementsByTagName(\"conflict\");\r\n\r\n                  if (cond !== null) {\r\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\r\n                      cond = \"conflict\";\r\n                    }\r\n\r\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\r\n                  } else {\r\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\r\n                  }\r\n\r\n                  this._doDisconnect(cond);\r\n\r\n                  return;\r\n                } // send each incoming stanza through the handler chain\r\n\r\n\r\n                Strophe.forEachChild(elem, null, function (child) {\r\n                  // process handlers\r\n                  var newList = _this6.handlers;\r\n                  _this6.handlers = [];\r\n\r\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\r\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\r\n                    // one of the handlers throws an exception\r\n\r\n                    try {\r\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\r\n                        if (_hand.run(child)) {\r\n                          _this6.handlers.push(_hand);\r\n                        }\r\n                      } else {\r\n                        _this6.handlers.push(_hand);\r\n                      }\r\n                    } catch (e) {\r\n                      // if the handler throws an exception, we consider it as false\r\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\r\n                    }\r\n                  }\r\n                });\r\n              },\r\n\r\n              /** Attribute: mechanisms\r\n               *  SASL Mechanisms available for Connection.\r\n               */\r\n              mechanisms: {},\r\n\r\n              /** PrivateFunction: _connect_cb\r\n               *  _Private_ handler for initial connection request.\r\n               *\r\n               *  This handler is used to process the initial connection request\r\n               *  response from the BOSH server. It is used to set up authentication\r\n               *  handlers and start the authentication process.\r\n               *\r\n               *  SASL authentication will be attempted if available, otherwise\r\n               *  the code will fall back to legacy authentication.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) req - The current request.\r\n               *    (Function) _callback - low level (xmpp) connect callback function.\r\n               *      Useful for plugins with their own xmpp connect callback (when they\r\n               *      want to do something special).\r\n               */\r\n              _connect_cb: function _connect_cb(req, _callback, raw) {\r\n                Strophe.debug(\"_connect_cb was called\");\r\n                this.connected = true;\r\n                var bodyWrap;\r\n\r\n                try {\r\n                  bodyWrap = this._proto._reqToData(req);\r\n                } catch (e) {\r\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\r\n                    throw e;\r\n                  }\r\n\r\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\r\n\r\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\r\n                }\r\n\r\n                if (!bodyWrap) {\r\n                  return;\r\n                }\r\n\r\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\r\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\r\n                    this.xmlInput(bodyWrap.childNodes[0]);\r\n                  } else {\r\n                    this.xmlInput(bodyWrap);\r\n                  }\r\n                }\r\n\r\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\r\n                  if (raw) {\r\n                    this.rawInput(raw);\r\n                  } else {\r\n                    this.rawInput(Strophe.serialize(bodyWrap));\r\n                  }\r\n                }\r\n\r\n                var conncheck = this._proto._connect_cb(bodyWrap);\r\n\r\n                if (conncheck === Strophe.Status.CONNFAIL) {\r\n                  return;\r\n                } // Check for the stream:features tag\r\n\r\n\r\n                var hasFeatures;\r\n\r\n                if (bodyWrap.getElementsByTagNameNS) {\r\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\r\n                } else {\r\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\r\n                }\r\n\r\n                if (!hasFeatures) {\r\n                  this._proto._no_auth_received(_callback);\r\n\r\n                  return;\r\n                }\r\n\r\n                var matched = [];\r\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\r\n\r\n                if (mechanisms.length > 0) {\r\n                  for (var i = 0; i < mechanisms.length; i++) {\r\n                    var mech = Strophe.getText(mechanisms[i]);\r\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\r\n                  }\r\n                }\r\n\r\n                if (matched.length === 0) {\r\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\r\n                    // There are no matching SASL mechanisms and also no legacy\r\n                    // auth available.\r\n                    this._proto._no_auth_received(_callback);\r\n\r\n                    return;\r\n                  }\r\n                }\r\n\r\n                if (this.do_authentication !== false) {\r\n                  this.authenticate(matched);\r\n                }\r\n              },\r\n\r\n              /** Function: sortMechanismsByPriority\r\n               *\r\n               *  Sorts an array of objects with prototype SASLMechanism according to\r\n               *  their priorities.\r\n               *\r\n               *  Parameters:\r\n               *    (Array) mechanisms - Array of SASL mechanisms.\r\n               *\r\n               */\r\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\r\n                // Sorting mechanisms according to priority.\r\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\r\n                  var higher = i;\r\n\r\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\r\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\r\n                      higher = j;\r\n                    }\r\n                  }\r\n\r\n                  if (higher !== i) {\r\n                    var swap = mechanisms[i];\r\n                    mechanisms[i] = mechanisms[higher];\r\n                    mechanisms[higher] = swap;\r\n                  }\r\n                }\r\n\r\n                return mechanisms;\r\n              },\r\n\r\n              /** Function: authenticate\r\n               * Set up authentication\r\n               *\r\n               *  Continues the initial connection request by setting up authentication\r\n               *  handlers and starting the authentication process.\r\n               *\r\n               *  SASL authentication will be attempted if available, otherwise\r\n               *  the code will fall back to legacy authentication.\r\n               *\r\n               *  Parameters:\r\n               *    (Array) matched - Array of SASL mechanisms supported.\r\n               *\r\n               */\r\n              authenticate: function authenticate(matched) {\r\n                if (!this._attemptSASLAuth(matched)) {\r\n                  this._attemptLegacyAuth();\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _attemptSASLAuth\r\n               *\r\n               *  Iterate through an array of SASL mechanisms and attempt authentication\r\n               *  with the highest priority (enabled) mechanism.\r\n               *\r\n               *  Parameters:\r\n               *    (Array) mechanisms - Array of SASL mechanisms.\r\n               *\r\n               *  Returns:\r\n               *    (Boolean) mechanism_found - true or false, depending on whether a\r\n               *          valid SASL mechanism was found with which authentication could be\r\n               *          started.\r\n               */\r\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\r\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\r\n                var mechanism_found = false;\r\n\r\n                for (var i = 0; i < mechanisms.length; ++i) {\r\n                  if (!mechanisms[i].prototype.test(this)) {\r\n                    continue;\r\n                  }\r\n\r\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\r\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\r\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\r\n                  this._sasl_mechanism = new mechanisms[i]();\r\n\r\n                  this._sasl_mechanism.onStart(this);\r\n\r\n                  var request_auth_exchange = $build(\"auth\", {\r\n                    'xmlns': Strophe.NS.SASL,\r\n                    'mechanism': this._sasl_mechanism.name\r\n                  });\r\n\r\n                  if (this._sasl_mechanism.isClientFirst) {\r\n                    var response = this._sasl_mechanism.onChallenge(this, null);\r\n\r\n                    request_auth_exchange.t(btoa(response));\r\n                  }\r\n\r\n                  this.send(request_auth_exchange.tree());\r\n                  mechanism_found = true;\r\n                  break;\r\n                }\r\n\r\n                return mechanism_found;\r\n              },\r\n\r\n              /** PrivateFunction: _sasl_challenge_cb\r\n               *  _Private_ handler for the SASL challenge\r\n               *\r\n               */\r\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\r\n                var challenge = atob(Strophe.getText(elem));\r\n\r\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\r\n\r\n                var stanza = $build('response', {\r\n                  'xmlns': Strophe.NS.SASL\r\n                });\r\n\r\n                if (response !== \"\") {\r\n                  stanza.t(btoa(response));\r\n                }\r\n\r\n                this.send(stanza.tree());\r\n                return true;\r\n              },\r\n\r\n              /** PrivateFunction: _attemptLegacyAuth\r\n               *\r\n               *  Attempt legacy (i.e. non-SASL) authentication.\r\n               */\r\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\r\n                if (Strophe.getNodeFromJid(this.jid) === null) {\r\n                  // we don't have a node, which is required for non-anonymous\r\n                  // client connections\r\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\r\n\r\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\r\n                } else {\r\n                  // Fall back to legacy authentication\r\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\r\n\r\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\r\n\r\n                  this.send($iq({\r\n                    'type': \"get\",\r\n                    'to': this.domain,\r\n                    'id': \"_auth_1\"\r\n                  }).c(\"query\", {\r\n                    xmlns: Strophe.NS.AUTH\r\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _onLegacyAuthIQResult\r\n               *  _Private_ handler for legacy authentication.\r\n               *\r\n               *  This handler is called in response to the initial <iq type='get'/>\r\n               *  for legacy authentication.  It builds an authentication <iq/> and\r\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\r\n               *  handle the result\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The stanza that triggered the callback.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\r\n                // build plaintext auth iq\r\n                var iq = $iq({\r\n                  type: \"set\",\r\n                  id: \"_auth_2\"\r\n                }).c('query', {\r\n                  xmlns: Strophe.NS.AUTH\r\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\r\n\r\n                if (!Strophe.getResourceFromJid(this.jid)) {\r\n                  // since the user has not supplied a resource, we pick\r\n                  // a default one here.  unlike other auth methods, the server\r\n                  // cannot do this for us.\r\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\r\n                }\r\n\r\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\r\n\r\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\r\n\r\n                this.send(iq.tree());\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _sasl_success_cb\r\n               *  _Private_ handler for succesful SASL authentication.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The matching stanza.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _sasl_success_cb: function _sasl_success_cb(elem) {\r\n                var _this7 = this;\r\n\r\n                if (this._sasl_data[\"server-signature\"]) {\r\n                  var serverSignature;\r\n                  var success = atob(Strophe.getText(elem));\r\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\r\n                  var matches = success.match(attribMatch);\r\n\r\n                  if (matches[1] === \"v\") {\r\n                    serverSignature = matches[2];\r\n                  }\r\n\r\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\r\n                    // remove old handlers\r\n                    this.deleteHandler(this._sasl_failure_handler);\r\n                    this._sasl_failure_handler = null;\r\n\r\n                    if (this._sasl_challenge_handler) {\r\n                      this.deleteHandler(this._sasl_challenge_handler);\r\n                      this._sasl_challenge_handler = null;\r\n                    }\r\n\r\n                    this._sasl_data = {};\r\n                    return this._sasl_failure_cb(null);\r\n                  }\r\n                }\r\n\r\n                Strophe.info(\"SASL authentication succeeded.\");\r\n\r\n                if (this._sasl_mechanism) {\r\n                  this._sasl_mechanism.onSuccess();\r\n                } // remove old handlers\r\n\r\n\r\n                this.deleteHandler(this._sasl_failure_handler);\r\n                this._sasl_failure_handler = null;\r\n\r\n                if (this._sasl_challenge_handler) {\r\n                  this.deleteHandler(this._sasl_challenge_handler);\r\n                  this._sasl_challenge_handler = null;\r\n                }\r\n\r\n                var streamfeature_handlers = [];\r\n\r\n                var wrapper = function wrapper(handlers, elem) {\r\n                  while (handlers.length) {\r\n                    _this7.deleteHandler(handlers.pop());\r\n                  }\r\n\r\n                  _this7._onStreamFeaturesAfterSASL(elem);\r\n\r\n                  return false;\r\n                };\r\n\r\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\r\n                  return wrapper(streamfeature_handlers, elem);\r\n                }, null, \"stream:features\", null, null));\r\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\r\n                  return wrapper(streamfeature_handlers, elem);\r\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\r\n\r\n                this._sendRestart();\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The matching stanza.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\r\n                // save stream:features for future usage\r\n                this.features = elem;\r\n\r\n                for (var i = 0; i < elem.childNodes.length; i++) {\r\n                  var child = elem.childNodes[i];\r\n\r\n                  if (child.nodeName === 'bind') {\r\n                    this.do_bind = true;\r\n                  }\r\n\r\n                  if (child.nodeName === 'session') {\r\n                    this.do_session = true;\r\n                  }\r\n                }\r\n\r\n                if (!this.do_bind) {\r\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\r\n\r\n                  return false;\r\n                } else if (!this.options.explicitResourceBinding) {\r\n                  this.bind();\r\n                } else {\r\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\r\n                }\r\n\r\n                return false;\r\n              },\r\n\r\n              /** Function: bind\r\n               *\r\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\r\n               *\r\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\r\n               *\r\n               *  If `explicitResourceBinding` was set to a truthy value in the options\r\n               *  passed to the Strophe.Connection constructor, then this function needs\r\n               *  to be called explicitly by the client author.\r\n               *\r\n               *  Otherwise it'll be called automatically as soon as the XMPP server\r\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\r\n               */\r\n              bind: function bind() {\r\n                if (!this.do_bind) {\r\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\r\n                  return;\r\n                }\r\n\r\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\r\n\r\n                var resource = Strophe.getResourceFromJid(this.jid);\r\n\r\n                if (resource) {\r\n                  this.send($iq({\r\n                    type: \"set\",\r\n                    id: \"_bind_auth_2\"\r\n                  }).c('bind', {\r\n                    xmlns: Strophe.NS.BIND\r\n                  }).c('resource', {}).t(resource).tree());\r\n                } else {\r\n                  this.send($iq({\r\n                    type: \"set\",\r\n                    id: \"_bind_auth_2\"\r\n                  }).c('bind', {\r\n                    xmlns: Strophe.NS.BIND\r\n                  }).tree());\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _onResourceBindIQ\r\n               *  _Private_ handler for binding result and session start.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The matching stanza.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\r\n                if (elem.getAttribute(\"type\") === \"error\") {\r\n                  Strophe.warn(\"Resource binding failed.\");\r\n                  var conflict = elem.getElementsByTagName(\"conflict\");\r\n                  var condition;\r\n\r\n                  if (conflict.length > 0) {\r\n                    condition = Strophe.ErrorCondition.CONFLICT;\r\n                  }\r\n\r\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\r\n\r\n                  return false;\r\n                } // TODO - need to grab errors\r\n\r\n\r\n                var bind = elem.getElementsByTagName(\"bind\");\r\n\r\n                if (bind.length > 0) {\r\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\r\n\r\n                  if (jidNode.length > 0) {\r\n                    this.jid = Strophe.getText(jidNode[0]);\r\n\r\n                    if (this.do_session) {\r\n                      this._establishSession();\r\n                    } else {\r\n                      this.authenticated = true;\r\n\r\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\r\n                    }\r\n                  }\r\n                } else {\r\n                  Strophe.warn(\"Resource binding failed.\");\r\n\r\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\r\n\r\n                  return false;\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _establishSession\r\n               *  Send IQ request to establish a session with the XMPP server.\r\n               *\r\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\r\n               *\r\n               *  Note: The protocol for session establishment has been determined as\r\n               *  unnecessary and removed in RFC-6121.\r\n               */\r\n              _establishSession: function _establishSession() {\r\n                if (!this.do_session) {\r\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\r\n                }\r\n\r\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\r\n\r\n                this.send($iq({\r\n                  type: \"set\",\r\n                  id: \"_session_auth_2\"\r\n                }).c('session', {\r\n                  xmlns: Strophe.NS.SESSION\r\n                }).tree());\r\n              },\r\n\r\n              /** PrivateFunction: _onSessionResultIQ\r\n               *  _Private_ handler for the server's IQ response to a client's session\r\n               *  request.\r\n               *\r\n               *  This sets Connection.authenticated to true on success, which\r\n               *  starts the processing of user handlers.\r\n               *\r\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\r\n               *\r\n               *  Note: The protocol for session establishment has been determined as\r\n               *  unnecessary and removed in RFC-6121.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The matching stanza.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\r\n                if (elem.getAttribute(\"type\") === \"result\") {\r\n                  this.authenticated = true;\r\n\r\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\r\n                } else if (elem.getAttribute(\"type\") === \"error\") {\r\n                  Strophe.warn(\"Session creation failed.\");\r\n\r\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\r\n\r\n                  return false;\r\n                }\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _sasl_failure_cb\r\n               *  _Private_ handler for SASL authentication failure.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The matching stanza.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\r\n                // delete unneeded handlers\r\n                if (this._sasl_success_handler) {\r\n                  this.deleteHandler(this._sasl_success_handler);\r\n                  this._sasl_success_handler = null;\r\n                }\r\n\r\n                if (this._sasl_challenge_handler) {\r\n                  this.deleteHandler(this._sasl_challenge_handler);\r\n                  this._sasl_challenge_handler = null;\r\n                }\r\n\r\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\r\n\r\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _auth2_cb\r\n               *  _Private_ handler to finish legacy authentication.\r\n               *\r\n               *  This handler is called when the result from the jabber:iq:auth\r\n               *  <iq/> stanza is returned.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The stanza that triggered the callback.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _auth2_cb: function _auth2_cb(elem) {\r\n                if (elem.getAttribute(\"type\") === \"result\") {\r\n                  this.authenticated = true;\r\n\r\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\r\n                } else if (elem.getAttribute(\"type\") === \"error\") {\r\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\r\n\r\n                  this.disconnect('authentication failed');\r\n                }\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _addSysTimedHandler\r\n               *  _Private_ function to add a system level timed handler.\r\n               *\r\n               *  This function is used to add a Strophe.TimedHandler for the\r\n               *  library code.  System timed handlers are allowed to run before\r\n               *  authentication is complete.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) period - The period of the handler.\r\n               *    (Function) handler - The callback function.\r\n               */\r\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\r\n                var thand = new Strophe.TimedHandler(period, handler);\r\n                thand.user = false;\r\n                this.addTimeds.push(thand);\r\n                return thand;\r\n              },\r\n\r\n              /** PrivateFunction: _addSysHandler\r\n               *  _Private_ function to add a system level stanza handler.\r\n               *\r\n               *  This function is used to add a Strophe.Handler for the\r\n               *  library code.  System stanza handlers are allowed to run before\r\n               *  authentication is complete.\r\n               *\r\n               *  Parameters:\r\n               *    (Function) handler - The callback function.\r\n               *    (String) ns - The namespace to match.\r\n               *    (String) name - The stanza name to match.\r\n               *    (String) type - The stanza type attribute to match.\r\n               *    (String) id - The stanza id attribute to match.\r\n               */\r\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\r\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\r\n                hand.user = false;\r\n                this.addHandlers.push(hand);\r\n                return hand;\r\n              },\r\n\r\n              /** PrivateFunction: _onDisconnectTimeout\r\n               *  _Private_ timeout handler for handling non-graceful disconnection.\r\n               *\r\n               *  If the graceful disconnect process does not complete within the\r\n               *  time allotted, this handler finishes the disconnect anyway.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\r\n                Strophe.debug(\"_onDisconnectTimeout was called\");\r\n\r\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\r\n\r\n                this._proto._onDisconnectTimeout(); // actually disconnect\r\n\r\n\r\n                this._doDisconnect();\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _onIdle\r\n               *  _Private_ handler to process events during idle cycle.\r\n               *\r\n               *  This handler is called every 100ms to fire timed handlers that\r\n               *  are ready and keep poll requests going.\r\n               */\r\n              _onIdle: function _onIdle() {\r\n                var _this8 = this;\r\n\r\n                // add timed handlers scheduled for addition\r\n                // NOTE: we add before remove in the case a timed handler is\r\n                // added and then deleted before the next _onIdle() call.\r\n                while (this.addTimeds.length > 0) {\r\n                  this.timedHandlers.push(this.addTimeds.pop());\r\n                } // remove timed handlers that have been scheduled for deletion\r\n\r\n\r\n                while (this.removeTimeds.length > 0) {\r\n                  var thand = this.removeTimeds.pop();\r\n                  var i = this.timedHandlers.indexOf(thand);\r\n\r\n                  if (i >= 0) {\r\n                    this.timedHandlers.splice(i, 1);\r\n                  }\r\n                } // call ready timed handlers\r\n\r\n\r\n                var now = new Date().getTime();\r\n                var newList = [];\r\n\r\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\r\n                  var _thand = this.timedHandlers[_i6];\r\n\r\n                  if (this.authenticated || !_thand.user) {\r\n                    var since = _thand.lastCalled + _thand.period;\r\n\r\n                    if (since - now <= 0) {\r\n                      if (_thand.run()) {\r\n                        newList.push(_thand);\r\n                      }\r\n                    } else {\r\n                      newList.push(_thand);\r\n                    }\r\n                  }\r\n                }\r\n\r\n                this.timedHandlers = newList;\r\n                clearTimeout(this._idleTimeout);\r\n\r\n                this._proto._onIdle(); // reactivate the timer only if connected\r\n\r\n\r\n                if (this.connected) {\r\n                  this._idleTimeout = setTimeout(function () {\r\n                    return _this8._onIdle();\r\n                  }, 100);\r\n                }\r\n              }\r\n            };\r\n            /** Class: Strophe.SASLMechanism\r\n             *\r\n             *  encapsulates SASL authentication mechanisms.\r\n             *\r\n             *  User code may override the priority for each mechanism or disable it completely.\r\n             *  See <priority> for information about changing priority and <test> for informatian on\r\n             *  how to disable a mechanism.\r\n             *\r\n             *  By default, all mechanisms are enabled and the priorities are\r\n             *\r\n             *      OAUTHBEARER - 60\r\n             *      SCRAM-SHA1 - 50\r\n             *      DIGEST-MD5 - 40\r\n             *      PLAIN - 30\r\n             *      ANONYMOUS - 20\r\n             *      EXTERNAL - 10\r\n             *\r\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\r\n             */\r\n\r\n            /**\r\n             * PrivateConstructor: Strophe.SASLMechanism\r\n             * SASL auth mechanism abstraction.\r\n             *\r\n             *  Parameters:\r\n             *    (String) name - SASL Mechanism name.\r\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\r\n             *    (Number) priority - Priority.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.SASLMechanism object.\r\n             */\r\n\r\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\r\n              /** PrivateVariable: name\r\n               *  Mechanism name.\r\n               */\r\n              this.name = name;\r\n              /** PrivateVariable: isClientFirst\r\n               *  If client sends response without initial server challenge.\r\n               */\r\n\r\n              this.isClientFirst = isClientFirst;\r\n              /** Variable: priority\r\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\r\n               *  Users may override this to prioritize mechanisms differently.\r\n               *\r\n               *  In the default configuration the priorities are\r\n               *\r\n               *  SCRAM-SHA1 - 40\r\n               *  DIGEST-MD5 - 30\r\n               *  Plain - 20\r\n               *\r\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\r\n               *\r\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\r\n               *\r\n               *  See <SASL mechanisms> for a list of available mechanisms.\r\n               *\r\n               */\r\n\r\n              this.priority = priority;\r\n            };\r\n\r\n            Strophe.SASLMechanism.prototype = {\r\n              /**\r\n               *  Function: test\r\n               *  Checks if mechanism able to run.\r\n               *  To disable a mechanism, make this return false;\r\n               *\r\n               *  To disable plain authentication run\r\n               *  > Strophe.SASLPlain.test = function() {\r\n               *  >   return false;\r\n               *  > }\r\n               *\r\n               *  See <SASL mechanisms> for a list of available mechanisms.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Connection) connection - Target Connection.\r\n               *\r\n               *  Returns:\r\n               *    (Boolean) If mechanism was able to run.\r\n               */\r\n              test: function test(connection) {\r\n                return true;\r\n              },\r\n\r\n              /** PrivateFunction: onStart\r\n               *  Called before starting mechanism on some connection.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Connection) connection - Target Connection.\r\n               */\r\n              onStart: function onStart(connection) {\r\n                this._connection = connection;\r\n              },\r\n\r\n              /** PrivateFunction: onChallenge\r\n               *  Called by protocol implementation on incoming challenge. If client is\r\n               *  first (isClientFirst === true) challenge will be null on the first call.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Connection) connection - Target Connection.\r\n               *    (String) challenge - current challenge to handle.\r\n               *\r\n               *  Returns:\r\n               *    (String) Mechanism response.\r\n               */\r\n              onChallenge: function onChallenge(connection, challenge) {\r\n                throw new Error(\"You should implement challenge handling!\");\r\n              },\r\n\r\n              /** PrivateFunction: onFailure\r\n               *  Protocol informs mechanism implementation about SASL failure.\r\n               */\r\n              onFailure: function onFailure() {\r\n                this._connection = null;\r\n              },\r\n\r\n              /** PrivateFunction: onSuccess\r\n               *  Protocol informs mechanism implementation about SASL success.\r\n               */\r\n              onSuccess: function onSuccess() {\r\n                this._connection = null;\r\n              }\r\n            };\r\n            /** Constants: SASL mechanisms\r\n             *  Available authentication mechanisms\r\n             *\r\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\r\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\r\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\r\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\r\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\r\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\r\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\r\n             */\r\n            // Building SASL callbacks\r\n\r\n            /** PrivateConstructor: SASLAnonymous\r\n             *  SASL ANONYMOUS authentication.\r\n             */\r\n\r\n            Strophe.SASLAnonymous = function () {};\r\n\r\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\r\n\r\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\r\n              return connection.authcid === null;\r\n            };\r\n            /** PrivateConstructor: SASLPlain\r\n             *  SASL PLAIN authentication.\r\n             */\r\n\r\n\r\n            Strophe.SASLPlain = function () {};\r\n\r\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\r\n\r\n            Strophe.SASLPlain.prototype.test = function (connection) {\r\n              return connection.authcid !== null;\r\n            };\r\n\r\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\r\n              var auth_str = connection.authzid;\r\n              auth_str = auth_str + \"\\0\";\r\n              auth_str = auth_str + connection.authcid;\r\n              auth_str = auth_str + \"\\0\";\r\n              auth_str = auth_str + connection.pass;\r\n              return utils.utf16to8(auth_str);\r\n            };\r\n            /** PrivateConstructor: SASLSHA1\r\n             *  SASL SCRAM SHA 1 authentication.\r\n             */\r\n\r\n\r\n            Strophe.SASLSHA1 = function () {};\r\n\r\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\r\n\r\n            Strophe.SASLSHA1.prototype.test = function (connection) {\r\n              return connection.authcid !== null;\r\n            };\r\n\r\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\r\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\r\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\r\n              auth_str += \",r=\";\r\n              auth_str += cnonce;\r\n              connection._sasl_data.cnonce = cnonce;\r\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\r\n              auth_str = \"n,,\" + auth_str;\r\n\r\n              this.onChallenge = function (connection, challenge) {\r\n                var nonce, salt, iter, Hi, U, U_old, i, k;\r\n                var responseText = \"c=biws,\";\r\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\r\n                var cnonce = connection._sasl_data.cnonce;\r\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\r\n\r\n                while (challenge.match(attribMatch)) {\r\n                  var matches = challenge.match(attribMatch);\r\n                  challenge = challenge.replace(matches[0], \"\");\r\n\r\n                  switch (matches[1]) {\r\n                    case \"r\":\r\n                      nonce = matches[2];\r\n                      break;\r\n\r\n                    case \"s\":\r\n                      salt = matches[2];\r\n                      break;\r\n\r\n                    case \"i\":\r\n                      iter = matches[2];\r\n                      break;\r\n                  }\r\n                }\r\n\r\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\r\n                  connection._sasl_data = {};\r\n                  return connection._sasl_failure_cb();\r\n                }\r\n\r\n                responseText += \"r=\" + nonce;\r\n                authMessage += responseText;\r\n                salt = atob(salt);\r\n                salt += \"\\x00\\x00\\x00\\x01\";\r\n                var pass = utils.utf16to8(connection.pass);\r\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\r\n\r\n                for (i = 1; i < iter; i++) {\r\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\r\n\r\n                  for (k = 0; k < 5; k++) {\r\n                    Hi[k] ^= U[k];\r\n                  }\r\n\r\n                  U_old = U;\r\n                }\r\n\r\n                Hi = SHA1.binb2str(Hi);\r\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\r\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\r\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\r\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\r\n\r\n                for (k = 0; k < 5; k++) {\r\n                  clientKey[k] ^= clientSignature[k];\r\n                }\r\n\r\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\r\n                return responseText;\r\n              };\r\n\r\n              return auth_str;\r\n            };\r\n            /** PrivateConstructor: SASLMD5\r\n             *  SASL DIGEST MD5 authentication.\r\n             */\r\n\r\n\r\n            Strophe.SASLMD5 = function () {};\r\n\r\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\r\n\r\n            Strophe.SASLMD5.prototype.test = function (connection) {\r\n              return connection.authcid !== null;\r\n            };\r\n            /** PrivateFunction: _quote\r\n             *  _Private_ utility function to backslash escape and quote strings.\r\n             *\r\n             *  Parameters:\r\n             *    (String) str - The string to be quoted.\r\n             *\r\n             *  Returns:\r\n             *    quoted string\r\n             */\r\n\r\n\r\n            Strophe.SASLMD5.prototype._quote = function (str) {\r\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\r\n            };\r\n\r\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\r\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\r\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\r\n              var realm = \"\";\r\n              var host = null;\r\n              var nonce = \"\";\r\n              var qop = \"\";\r\n\r\n              while (challenge.match(attribMatch)) {\r\n                var matches = challenge.match(attribMatch);\r\n                challenge = challenge.replace(matches[0], \"\");\r\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\r\n\r\n                switch (matches[1]) {\r\n                  case \"realm\":\r\n                    realm = matches[2];\r\n                    break;\r\n\r\n                  case \"nonce\":\r\n                    nonce = matches[2];\r\n                    break;\r\n\r\n                  case \"qop\":\r\n                    qop = matches[2];\r\n                    break;\r\n\r\n                  case \"host\":\r\n                    host = matches[2];\r\n                    break;\r\n                }\r\n              }\r\n\r\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\r\n\r\n              if (host !== null) {\r\n                digest_uri = digest_uri + \"/\" + host;\r\n              }\r\n\r\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\r\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\r\n              var A2 = 'AUTHENTICATE:' + digest_uri;\r\n              var responseText = \"\";\r\n              responseText += 'charset=utf-8,';\r\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\r\n              responseText += 'realm=' + this._quote(realm) + ',';\r\n              responseText += 'nonce=' + this._quote(nonce) + ',';\r\n              responseText += 'nc=00000001,';\r\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\r\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\r\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\r\n              responseText += 'qop=auth';\r\n\r\n              this.onChallenge = function () {\r\n                return \"\";\r\n              };\r\n\r\n              return responseText;\r\n            };\r\n            /** PrivateConstructor: SASLOAuthBearer\r\n             *  SASL OAuth Bearer authentication.\r\n             */\r\n\r\n\r\n            Strophe.SASLOAuthBearer = function () {};\r\n\r\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\r\n\r\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\r\n              return connection.pass !== null;\r\n            };\r\n\r\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\r\n              var auth_str = 'n,';\r\n\r\n              if (connection.authcid !== null) {\r\n                auth_str = auth_str + 'a=' + connection.authzid;\r\n              }\r\n\r\n              auth_str = auth_str + ',';\r\n              auth_str = auth_str + \"\\x01\";\r\n              auth_str = auth_str + 'auth=Bearer ';\r\n              auth_str = auth_str + connection.pass;\r\n              auth_str = auth_str + \"\\x01\";\r\n              auth_str = auth_str + \"\\x01\";\r\n              return utils.utf16to8(auth_str);\r\n            };\r\n            /** PrivateConstructor: SASLExternal\r\n             *  SASL EXTERNAL authentication.\r\n             *\r\n             *  The EXTERNAL mechanism allows a client to request the server to use\r\n             *  credentials established by means external to the mechanism to\r\n             *  authenticate the client. The external means may be, for instance,\r\n             *  TLS services.\r\n             */\r\n\r\n\r\n            Strophe.SASLExternal = function () {};\r\n\r\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\r\n\r\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\r\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\r\n               * authcid contained or implied in the client certificate is the JID (i.e.\r\n               * authzid) with which the user wants to log in as.\r\n               *\r\n               * To NOT send the authzid, the user should therefore set the authcid equal\r\n               * to the JID when instantiating a new Strophe.Connection object.\r\n               */\r\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\r\n            };\r\n            /** PrivateConstructor: SASLXOAuth2\r\n             *  SASL X-OAuth2 authentication.\r\n             */\r\n\r\n\r\n            Strophe.SASLXOAuth2 = function () {};\r\n\r\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\r\n\r\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\r\n              return connection.pass !== null;\r\n            };\r\n\r\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\r\n              var auth_str = \"\\0\";\r\n\r\n              if (connection.authcid !== null) {\r\n                auth_str = auth_str + connection.authzid;\r\n              }\r\n\r\n              auth_str = auth_str + \"\\0\";\r\n              auth_str = auth_str + connection.pass;\r\n              return utils.utf16to8(auth_str);\r\n            };\r\n            var core = {\r\n              'Strophe': Strophe,\r\n              '$build': $build,\r\n              '$iq': $iq,\r\n              '$msg': $msg,\r\n              '$pres': $pres,\r\n              'SHA1': SHA1,\r\n              'MD5': MD5,\r\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\r\n              'b64_sha1': SHA1.b64_sha1,\r\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\r\n              'str_sha1': SHA1.str_sha1\r\n            };\r\n\r\n            /*\r\n                This program is distributed under the terms of the MIT license.\r\n                Please see the LICENSE file for details.\r\n\r\n                Copyright 2006-2008, OGG, LLC\r\n            */\r\n            var Strophe$1 = core.Strophe;\r\n            var $build$1 = core.$build;\r\n            /** PrivateClass: Strophe.Request\r\n             *  _Private_ helper class that provides a cross implementation abstraction\r\n             *  for a BOSH related XMLHttpRequest.\r\n             *\r\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\r\n             *  information.  It is not meant to be used from user's code.\r\n             */\r\n\r\n            /** PrivateConstructor: Strophe.Request\r\n             *  Create and initialize a new Strophe.Request object.\r\n             *\r\n             *  Parameters:\r\n             *    (XMLElement) elem - The XML data to be sent in the request.\r\n             *    (Function) func - The function that will be called when the\r\n             *      XMLHttpRequest readyState changes.\r\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\r\n             *    (Integer) sends - The number of times this same request has been sent.\r\n             */\r\n\r\n            Strophe$1.Request = function (elem, func, rid, sends) {\r\n              this.id = ++Strophe$1._requestId;\r\n              this.xmlData = elem;\r\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\r\n              // from this one.\r\n\r\n              this.origFunc = func;\r\n              this.func = func;\r\n              this.rid = rid;\r\n              this.date = NaN;\r\n              this.sends = sends || 0;\r\n              this.abort = false;\r\n              this.dead = null;\r\n\r\n              this.age = function () {\r\n                if (!this.date) {\r\n                  return 0;\r\n                }\r\n\r\n                var now = new Date();\r\n                return (now - this.date) / 1000;\r\n              };\r\n\r\n              this.timeDead = function () {\r\n                if (!this.dead) {\r\n                  return 0;\r\n                }\r\n\r\n                var now = new Date();\r\n                return (now - this.dead) / 1000;\r\n              };\r\n\r\n              this.xhr = this._newXHR();\r\n            };\r\n\r\n            Strophe$1.Request.prototype = {\r\n              /** PrivateFunction: getResponse\r\n               *  Get a response from the underlying XMLHttpRequest.\r\n               *\r\n               *  This function attempts to get a response from the request and checks\r\n               *  for errors.\r\n               *\r\n               *  Throws:\r\n               *    \"parsererror\" - A parser error occured.\r\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\r\n               *\r\n               *  Returns:\r\n               *    The DOM element tree of the response.\r\n               */\r\n              getResponse: function getResponse() {\r\n                var node = null;\r\n\r\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\r\n                  node = this.xhr.responseXML.documentElement;\r\n\r\n                  if (node.tagName === \"parsererror\") {\r\n                    Strophe$1.error(\"invalid response received\");\r\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\r\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\r\n                    throw new Error(\"parsererror\");\r\n                  }\r\n                } else if (this.xhr.responseText) {\r\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\r\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\r\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\r\n\r\n                  if (!node) {\r\n                    throw new Error('Parsing produced null node');\r\n                  } else if (node.querySelector('parsererror')) {\r\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\r\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\r\n                    var error = new Error();\r\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\r\n                    throw error;\r\n                  }\r\n                }\r\n\r\n                return node;\r\n              },\r\n\r\n              /** PrivateFunction: _newXHR\r\n               *  _Private_ helper function to create XMLHttpRequests.\r\n               *\r\n               *  This function creates XMLHttpRequests across all implementations.\r\n               *\r\n               *  Returns:\r\n               *    A new XMLHttpRequest.\r\n               */\r\n              _newXHR: function _newXHR() {\r\n                var xhr = null;\r\n\r\n                if (window.XMLHttpRequest) {\r\n                  xhr = new XMLHttpRequest();\r\n\r\n                  if (xhr.overrideMimeType) {\r\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\r\n                  }\r\n                } else if (window.ActiveXObject) {\r\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n                } // use Function.bind() to prepend ourselves as an argument\r\n\r\n\r\n                xhr.onreadystatechange = this.func.bind(null, this);\r\n                return xhr;\r\n              }\r\n            };\r\n            /** Class: Strophe.Bosh\r\n             *  _Private_ helper class that handles BOSH Connections\r\n             *\r\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\r\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\r\n             */\r\n\r\n            /** File: bosh.js\r\n             *  A JavaScript library to enable BOSH in Strophejs.\r\n             *\r\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\r\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\r\n             *  More information on BOSH can be found in XEP 124.\r\n             */\r\n\r\n            /** PrivateConstructor: Strophe.Bosh\r\n             *  Create and initialize a Strophe.Bosh object.\r\n             *\r\n             *  Parameters:\r\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Bosh object.\r\n             */\r\n\r\n            Strophe$1.Bosh = function (connection) {\r\n              this._conn = connection;\r\n              /* request id for body tags */\r\n\r\n              this.rid = Math.floor(Math.random() * 4294967295);\r\n              /* The current session ID. */\r\n\r\n              this.sid = null; // default BOSH values\r\n\r\n              this.hold = 1;\r\n              this.wait = 60;\r\n              this.window = 5;\r\n              this.errors = 0;\r\n              this.inactivity = null;\r\n              this.lastResponseHeaders = null;\r\n              this._requests = [];\r\n            };\r\n\r\n            Strophe$1.Bosh.prototype = {\r\n              /** Variable: strip\r\n               *\r\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\r\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\r\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\r\n               *\r\n               *  > Strophe.Bosh.prototype.strip = \"body\";\r\n               *\r\n               *  This will enable stripping of the body tag in both\r\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\r\n               */\r\n              strip: null,\r\n\r\n              /** PrivateFunction: _buildBody\r\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\r\n               *\r\n               *  Returns:\r\n               *    A Strophe.Builder with a <body/> element.\r\n               */\r\n              _buildBody: function _buildBody() {\r\n                var bodyWrap = $build$1('body', {\r\n                  'rid': this.rid++,\r\n                  'xmlns': Strophe$1.NS.HTTPBIND\r\n                });\r\n\r\n                if (this.sid !== null) {\r\n                  bodyWrap.attrs({\r\n                    'sid': this.sid\r\n                  });\r\n                }\r\n\r\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\r\n                  this._cacheSession();\r\n                }\r\n\r\n                return bodyWrap;\r\n              },\r\n\r\n              /** PrivateFunction: _reset\r\n               *  Reset the connection.\r\n               *\r\n               *  This function is called by the reset function of the Strophe Connection\r\n               */\r\n              _reset: function _reset() {\r\n                this.rid = Math.floor(Math.random() * 4294967295);\r\n                this.sid = null;\r\n                this.errors = 0;\r\n\r\n                if (this._conn._sessionCachingSupported()) {\r\n                  window.sessionStorage.removeItem('strophe-bosh-session');\r\n                }\r\n\r\n                this._conn.nextValidRid(this.rid);\r\n              },\r\n\r\n              /** PrivateFunction: _connect\r\n               *  _Private_ function that initializes the BOSH connection.\r\n               *\r\n               *  Creates and sends the Request that initializes the BOSH connection.\r\n               */\r\n              _connect: function _connect(wait, hold, route) {\r\n                this.wait = wait || this.wait;\r\n                this.hold = hold || this.hold;\r\n                this.errors = 0;\r\n\r\n                var body = this._buildBody().attrs({\r\n                  \"to\": this._conn.domain,\r\n                  \"xml:lang\": \"en\",\r\n                  \"wait\": this.wait,\r\n                  \"hold\": this.hold,\r\n                  \"content\": \"text/xml; charset=utf-8\",\r\n                  \"ver\": \"1.6\",\r\n                  \"xmpp:version\": \"1.0\",\r\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\r\n                });\r\n\r\n                if (route) {\r\n                  body.attrs({\r\n                    'route': route\r\n                  });\r\n                }\r\n\r\n                var _connect_cb = this._conn._connect_cb;\r\n\r\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\r\n\r\n                this._throttledRequestHandler();\r\n              },\r\n\r\n              /** PrivateFunction: _attach\r\n               *  Attach to an already created and authenticated BOSH session.\r\n               *\r\n               *  This function is provided to allow Strophe to attach to BOSH\r\n               *  sessions which have been created externally, perhaps by a Web\r\n               *  application.  This is often used to support auto-login type features\r\n               *  without putting user credentials into the page.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - The full JID that is bound by the session.\r\n               *    (String) sid - The SID of the BOSH session.\r\n               *    (String) rid - The current RID of the BOSH session.  This RID\r\n               *      will be used by the next request.\r\n               *    (Function) callback The connect callback function.\r\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n               *      time the server will wait before returning an empty result for\r\n               *      a request.  The default setting of 60 seconds is recommended.\r\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\r\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n               *      number of connections the server will hold at one time.  This\r\n               *      should almost always be set to 1 (the default).\r\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n               *      allowed range of request ids that are valid.  The default is 5.\r\n               */\r\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\r\n                this._conn.jid = jid;\r\n                this.sid = sid;\r\n                this.rid = rid;\r\n                this._conn.connect_callback = callback;\r\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\r\n                this._conn.authenticated = true;\r\n                this._conn.connected = true;\r\n                this.wait = wait || this.wait;\r\n                this.hold = hold || this.hold;\r\n                this.window = wind || this.window;\r\n\r\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\r\n              },\r\n\r\n              /** PrivateFunction: _restore\r\n               *  Attempt to restore a cached BOSH session\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - The full JID that is bound by the session.\r\n               *      This parameter is optional but recommended, specifically in cases\r\n               *      where prebinded BOSH sessions are used where it's important to know\r\n               *      that the right session is being restored.\r\n               *    (Function) callback The connect callback function.\r\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n               *      time the server will wait before returning an empty result for\r\n               *      a request.  The default setting of 60 seconds is recommended.\r\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\r\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n               *      number of connections the server will hold at one time.  This\r\n               *      should almost always be set to 1 (the default).\r\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n               *      allowed range of request ids that are valid.  The default is 5.\r\n               */\r\n              _restore: function _restore(jid, callback, wait, hold, wind) {\r\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\r\n\r\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\r\n                // we compare only the domains:\r\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\r\n                  this._conn.restored = true;\r\n\r\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\r\n                } else {\r\n                  var error = new Error(\"_restore: no restoreable session.\");\r\n                  error.name = \"StropheSessionError\";\r\n                  throw error;\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _cacheSession\r\n               *  _Private_ handler for the beforeunload event.\r\n               *\r\n               *  This handler is used to process the Bosh-part of the initial request.\r\n               *  Parameters:\r\n               *    (Strophe.Request) bodyWrap - The received stanza.\r\n               */\r\n              _cacheSession: function _cacheSession() {\r\n                if (this._conn.authenticated) {\r\n                  if (this._conn.jid && this.rid && this.sid) {\r\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\r\n                      'jid': this._conn.jid,\r\n                      'rid': this.rid,\r\n                      'sid': this.sid\r\n                    }));\r\n                  }\r\n                } else {\r\n                  window.sessionStorage.removeItem('strophe-bosh-session');\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _connect_cb\r\n               *  _Private_ handler for initial connection request.\r\n               *\r\n               *  This handler is used to process the Bosh-part of the initial request.\r\n               *  Parameters:\r\n               *    (Strophe.Request) bodyWrap - The received stanza.\r\n               */\r\n              _connect_cb: function _connect_cb(bodyWrap) {\r\n                var typ = bodyWrap.getAttribute(\"type\");\r\n\r\n                if (typ !== null && typ === \"terminate\") {\r\n                  // an error occurred\r\n                  var cond = bodyWrap.getAttribute(\"condition\");\r\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\r\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\r\n\r\n                  if (cond !== null) {\r\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\r\n                      cond = \"conflict\";\r\n                    }\r\n\r\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\r\n                  } else {\r\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\r\n                  }\r\n\r\n                  this._conn._doDisconnect(cond);\r\n\r\n                  return Strophe$1.Status.CONNFAIL;\r\n                } // check to make sure we don't overwrite these if _connect_cb is\r\n                // called multiple times in the case of missing stream:features\r\n\r\n\r\n                if (!this.sid) {\r\n                  this.sid = bodyWrap.getAttribute(\"sid\");\r\n                }\r\n\r\n                var wind = bodyWrap.getAttribute('requests');\r\n\r\n                if (wind) {\r\n                  this.window = parseInt(wind, 10);\r\n                }\r\n\r\n                var hold = bodyWrap.getAttribute('hold');\r\n\r\n                if (hold) {\r\n                  this.hold = parseInt(hold, 10);\r\n                }\r\n\r\n                var wait = bodyWrap.getAttribute('wait');\r\n\r\n                if (wait) {\r\n                  this.wait = parseInt(wait, 10);\r\n                }\r\n\r\n                var inactivity = bodyWrap.getAttribute('inactivity');\r\n\r\n                if (inactivity) {\r\n                  this.inactivity = parseInt(inactivity, 10);\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _disconnect\r\n               *  _Private_ part of Connection.disconnect for Bosh\r\n               *\r\n               *  Parameters:\r\n               *    (Request) pres - This stanza will be sent before disconnecting.\r\n               */\r\n              _disconnect: function _disconnect(pres) {\r\n                this._sendTerminate(pres);\r\n              },\r\n\r\n              /** PrivateFunction: _doDisconnect\r\n               *  _Private_ function to disconnect.\r\n               *\r\n               *  Resets the SID and RID.\r\n               */\r\n              _doDisconnect: function _doDisconnect() {\r\n                this.sid = null;\r\n                this.rid = Math.floor(Math.random() * 4294967295);\r\n\r\n                if (this._conn._sessionCachingSupported()) {\r\n                  window.sessionStorage.removeItem('strophe-bosh-session');\r\n                }\r\n\r\n                this._conn.nextValidRid(this.rid);\r\n              },\r\n\r\n              /** PrivateFunction: _emptyQueue\r\n               * _Private_ function to check if the Request queue is empty.\r\n               *\r\n               *  Returns:\r\n               *    True, if there are no Requests queued, False otherwise.\r\n               */\r\n              _emptyQueue: function _emptyQueue() {\r\n                return this._requests.length === 0;\r\n              },\r\n\r\n              /** PrivateFunction: _callProtocolErrorHandlers\r\n               *  _Private_ function to call error handlers registered for HTTP errors.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) req - The request that is changing readyState.\r\n               */\r\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\r\n                var reqStatus = this._getRequestStatus(req);\r\n\r\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\r\n\r\n                if (err_callback) {\r\n                  err_callback.call(this, reqStatus);\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _hitError\r\n               *  _Private_ function to handle the error count.\r\n               *\r\n               *  Requests are resent automatically until their error count reaches\r\n               *  5.  Each time an error is encountered, this function is called to\r\n               *  increment the count and disconnect if the count is too high.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) reqStatus - The request status.\r\n               */\r\n              _hitError: function _hitError(reqStatus) {\r\n                this.errors++;\r\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\r\n\r\n                if (this.errors > 4) {\r\n                  this._conn._onDisconnectTimeout();\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _no_auth_received\r\n               *\r\n               * Called on stream start/restart when no stream:features\r\n               * has been received and sends a blank poll request.\r\n               */\r\n              _no_auth_received: function _no_auth_received(callback) {\r\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\r\n\r\n                if (callback) {\r\n                  callback = callback.bind(this._conn);\r\n                } else {\r\n                  callback = this._conn._connect_cb.bind(this._conn);\r\n                }\r\n\r\n                var body = this._buildBody();\r\n\r\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\r\n\r\n                this._throttledRequestHandler();\r\n              },\r\n\r\n              /** PrivateFunction: _onDisconnectTimeout\r\n               *  _Private_ timeout handler for handling non-graceful disconnection.\r\n               *\r\n               *  Cancels all remaining Requests and clears the queue.\r\n               */\r\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\r\n                this._abortAllRequests();\r\n              },\r\n\r\n              /** PrivateFunction: _abortAllRequests\r\n               *  _Private_ helper function that makes sure all pending requests are aborted.\r\n               */\r\n              _abortAllRequests: function _abortAllRequests() {\r\n                while (this._requests.length > 0) {\r\n                  var req = this._requests.pop();\r\n\r\n                  req.abort = true;\r\n                  req.xhr.abort();\r\n\r\n                  req.xhr.onreadystatechange = function () {};\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _onIdle\r\n               *  _Private_ handler called by Strophe.Connection._onIdle\r\n               *\r\n               *  Sends all queued Requests or polls with empty Request if there are none.\r\n               */\r\n              _onIdle: function _onIdle() {\r\n                var data = this._conn._data; // if no requests are in progress, poll\r\n\r\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\r\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\r\n                  data.push(null);\r\n                }\r\n\r\n                if (this._conn.paused) {\r\n                  return;\r\n                }\r\n\r\n                if (this._requests.length < 2 && data.length > 0) {\r\n                  var body = this._buildBody();\r\n\r\n                  for (var i = 0; i < data.length; i++) {\r\n                    if (data[i] !== null) {\r\n                      if (data[i] === \"restart\") {\r\n                        body.attrs({\r\n                          \"to\": this._conn.domain,\r\n                          \"xml:lang\": \"en\",\r\n                          \"xmpp:restart\": \"true\",\r\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\r\n                        });\r\n                      } else {\r\n                        body.cnode(data[i]).up();\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  delete this._conn._data;\r\n                  this._conn._data = [];\r\n\r\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\r\n\r\n                  this._throttledRequestHandler();\r\n                }\r\n\r\n                if (this._requests.length > 0) {\r\n                  var time_elapsed = this._requests[0].age();\r\n\r\n                  if (this._requests[0].dead !== null) {\r\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\r\n                      this._throttledRequestHandler();\r\n                    }\r\n                  }\r\n\r\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\r\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\r\n\r\n                    this._throttledRequestHandler();\r\n                  }\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _getRequestStatus\r\n               *\r\n               *  Returns the HTTP status code from a Strophe.Request\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) req - The Strophe.Request instance.\r\n               *    (Integer) def - The default value that should be returned if no\r\n               *          status value was found.\r\n               */\r\n              _getRequestStatus: function _getRequestStatus(req, def) {\r\n                var reqStatus;\r\n\r\n                if (req.xhr.readyState === 4) {\r\n                  try {\r\n                    reqStatus = req.xhr.status;\r\n                  } catch (e) {\r\n                    // ignore errors from undefined status attribute. Works\r\n                    // around a browser bug\r\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\r\n                  }\r\n                }\r\n\r\n                if (typeof reqStatus === \"undefined\") {\r\n                  reqStatus = typeof def === 'number' ? def : 0;\r\n                }\r\n\r\n                return reqStatus;\r\n              },\r\n\r\n              /** PrivateFunction: _onRequestStateChange\r\n               *  _Private_ handler for Strophe.Request state changes.\r\n               *\r\n               *  This function is called when the XMLHttpRequest readyState changes.\r\n               *  It contains a lot of error handling logic for the many ways that\r\n               *  requests can fail, and calls the request callback when requests\r\n               *  succeed.\r\n               *\r\n               *  Parameters:\r\n               *    (Function) func - The handler for the request.\r\n               *    (Strophe.Request) req - The request that is changing readyState.\r\n               */\r\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\r\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\r\n\r\n                if (req.abort) {\r\n                  req.abort = false;\r\n                  return;\r\n                }\r\n\r\n                if (req.xhr.readyState !== 4) {\r\n                  // The request is not yet complete\r\n                  return;\r\n                }\r\n\r\n                var reqStatus = this._getRequestStatus(req);\r\n\r\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\r\n\r\n                if (this.disconnecting && reqStatus >= 400) {\r\n                  this._hitError(reqStatus);\r\n\r\n                  this._callProtocolErrorHandlers(req);\r\n\r\n                  return;\r\n                }\r\n\r\n                var valid_request = reqStatus > 0 && reqStatus < 500;\r\n                var too_many_retries = req.sends > this._conn.maxRetries;\r\n\r\n                if (valid_request || too_many_retries) {\r\n                  // remove from internal queue\r\n                  this._removeRequest(req);\r\n\r\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\r\n                }\r\n\r\n                if (reqStatus === 200) {\r\n                  // request succeeded\r\n                  var reqIs0 = this._requests[0] === req;\r\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\r\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\r\n                  // restart the other - both will be in the first spot, as the\r\n                  // completed request has been removed from the queue already\r\n\r\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\r\n                    this._restartRequest(0);\r\n                  }\r\n\r\n                  this._conn.nextValidRid(Number(req.rid) + 1);\r\n\r\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\r\n                  func(req); // call handler\r\n\r\n                  this.errors = 0;\r\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\r\n                  // request failed\r\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\r\n\r\n                  this._hitError(reqStatus);\r\n\r\n                  this._callProtocolErrorHandlers(req);\r\n\r\n                  if (reqStatus >= 400 && reqStatus < 500) {\r\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\r\n\r\n                    this._conn._doDisconnect();\r\n                  }\r\n                } else {\r\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\r\n                }\r\n\r\n                if (!valid_request && !too_many_retries) {\r\n                  this._throttledRequestHandler();\r\n                } else if (too_many_retries && !this._conn.connected) {\r\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _processRequest\r\n               *  _Private_ function to process a request in the queue.\r\n               *\r\n               *  This function takes requests off the queue and sends them and\r\n               *  restarts dead requests.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) i - The index of the request in the queue.\r\n               */\r\n              _processRequest: function _processRequest(i) {\r\n                var _this = this;\r\n\r\n                var req = this._requests[i];\r\n\r\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\r\n\r\n\r\n                if (req.sends > this._conn.maxRetries) {\r\n                  this._conn._onDisconnectTimeout();\r\n\r\n                  return;\r\n                }\r\n\r\n                var time_elapsed = req.age();\r\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\r\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\r\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\r\n\r\n                if (primary_timeout || secondary_timeout || server_error) {\r\n                  if (secondary_timeout) {\r\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\r\n                  }\r\n\r\n                  req.abort = true;\r\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\r\n\r\n                  req.xhr.onreadystatechange = function () {};\r\n\r\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\r\n                  req = this._requests[i];\r\n                }\r\n\r\n                if (req.xhr.readyState === 0) {\r\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\r\n\r\n                  try {\r\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\r\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\r\n\r\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\r\n                      // IE9 doesn't have setRequestHeader\r\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\r\n                    }\r\n\r\n                    if (this._conn.options.withCredentials) {\r\n                      req.xhr.withCredentials = true;\r\n                    }\r\n                  } catch (e2) {\r\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\r\n\r\n                    if (!this._conn.connected) {\r\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\r\n                    }\r\n\r\n                    this._conn.disconnect();\r\n\r\n                    return;\r\n                  } // Fires the XHR request -- may be invoked immediately\r\n                  // or on a gradually expanding retry window for reconnects\r\n\r\n\r\n                  var sendFunc = function sendFunc() {\r\n                    req.date = new Date();\r\n\r\n                    if (_this._conn.options.customHeaders) {\r\n                      var headers = _this._conn.options.customHeaders;\r\n\r\n                      for (var header in headers) {\r\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\r\n                          req.xhr.setRequestHeader(header, headers[header]);\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    req.xhr.send(req.data);\r\n                  }; // Implement progressive backoff for reconnects --\r\n                  // First retry (send === 1) should also be instantaneous\r\n\r\n\r\n                  if (req.sends > 1) {\r\n                    // Using a cube of the retry number creates a nicely\r\n                    // expanding retry window\r\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\r\n                    setTimeout(function () {\r\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\r\n                      sendFunc();\r\n                    }, backoff);\r\n                  } else {\r\n                    sendFunc();\r\n                  }\r\n\r\n                  req.sends++;\r\n\r\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\r\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\r\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\r\n                    } else {\r\n                      this._conn.xmlOutput(req.xmlData);\r\n                    }\r\n                  }\r\n\r\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\r\n                    this._conn.rawOutput(req.data);\r\n                  }\r\n                } else {\r\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _removeRequest\r\n               *  _Private_ function to remove a request from the queue.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) req - The request to remove.\r\n               */\r\n              _removeRequest: function _removeRequest(req) {\r\n                Strophe$1.debug(\"removing request\");\r\n\r\n                for (var i = this._requests.length - 1; i >= 0; i--) {\r\n                  if (req === this._requests[i]) {\r\n                    this._requests.splice(i, 1);\r\n                  }\r\n                } // IE6 fails on setting to null, so set to empty function\r\n\r\n\r\n                req.xhr.onreadystatechange = function () {};\r\n\r\n                this._throttledRequestHandler();\r\n              },\r\n\r\n              /** PrivateFunction: _restartRequest\r\n               *  _Private_ function to restart a request that is presumed dead.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) i - The index of the request in the queue.\r\n               */\r\n              _restartRequest: function _restartRequest(i) {\r\n                var req = this._requests[i];\r\n\r\n                if (req.dead === null) {\r\n                  req.dead = new Date();\r\n                }\r\n\r\n                this._processRequest(i);\r\n              },\r\n\r\n              /** PrivateFunction: _reqToData\r\n               * _Private_ function to get a stanza out of a request.\r\n               *\r\n               * Tries to extract a stanza out of a Request Object.\r\n               * When this fails the current connection will be disconnected.\r\n               *\r\n               *  Parameters:\r\n               *    (Object) req - The Request.\r\n               *\r\n               *  Returns:\r\n               *    The stanza that was passed.\r\n               */\r\n              _reqToData: function _reqToData(req) {\r\n                try {\r\n                  return req.getResponse();\r\n                } catch (e) {\r\n                  if (e.message !== \"parsererror\") {\r\n                    throw e;\r\n                  }\r\n\r\n                  this._conn.disconnect(\"strophe-parsererror\");\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _sendTerminate\r\n               *  _Private_ function to send initial disconnect sequence.\r\n               *\r\n               *  This is the first step in a graceful disconnect.  It sends\r\n               *  the BOSH server a terminate body and includes an unavailable\r\n               *  presence if authentication has completed.\r\n               */\r\n              _sendTerminate: function _sendTerminate(pres) {\r\n                Strophe$1.debug(\"_sendTerminate was called\");\r\n\r\n                var body = this._buildBody().attrs({\r\n                  type: \"terminate\"\r\n                });\r\n\r\n                if (pres) {\r\n                  body.cnode(pres.tree());\r\n                }\r\n\r\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\r\n\r\n                this._requests.push(req);\r\n\r\n                this._throttledRequestHandler();\r\n              },\r\n\r\n              /** PrivateFunction: _send\r\n               *  _Private_ part of the Connection.send function for BOSH\r\n               *\r\n               * Just triggers the RequestHandler to send the messages that are in the queue\r\n               */\r\n              _send: function _send() {\r\n                var _this2 = this;\r\n\r\n                clearTimeout(this._conn._idleTimeout);\r\n\r\n                this._throttledRequestHandler();\r\n\r\n                this._conn._idleTimeout = setTimeout(function () {\r\n                  return _this2._conn._onIdle();\r\n                }, 100);\r\n              },\r\n\r\n              /** PrivateFunction: _sendRestart\r\n               *\r\n               *  Send an xmpp:restart stanza.\r\n               */\r\n              _sendRestart: function _sendRestart() {\r\n                this._throttledRequestHandler();\r\n\r\n                clearTimeout(this._conn._idleTimeout);\r\n              },\r\n\r\n              /** PrivateFunction: _throttledRequestHandler\r\n               *  _Private_ function to throttle requests to the connection window.\r\n               *\r\n               *  This function makes sure we don't send requests so fast that the\r\n               *  request ids overflow the connection window in the case that one\r\n               *  request died.\r\n               */\r\n              _throttledRequestHandler: function _throttledRequestHandler() {\r\n                if (!this._requests) {\r\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\r\n                } else {\r\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\r\n                }\r\n\r\n                if (!this._requests || this._requests.length === 0) {\r\n                  return;\r\n                }\r\n\r\n                if (this._requests.length > 0) {\r\n                  this._processRequest(0);\r\n                }\r\n\r\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\r\n                  this._processRequest(1);\r\n                }\r\n              }\r\n            };\r\n\r\n            /*\r\n                This program is distributed under the terms of the MIT license.\r\n                Please see the LICENSE file for details.\r\n\r\n                Copyright 2006-2008, OGG, LLC\r\n            */\r\n            var Strophe$2 = core.Strophe;\r\n            var $build$2 = core.$build;\r\n            /** Class: Strophe.WebSocket\r\n             *  _Private_ helper class that handles WebSocket Connections\r\n             *\r\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\r\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\r\n             */\r\n\r\n            /** File: websocket.js\r\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\r\n             *\r\n             *  This file implements XMPP over WebSockets for Strophejs.\r\n             *  If a Connection is established with a Websocket url (ws://...)\r\n             *  Strophe will use WebSockets.\r\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\r\n             *  http://tools.ietf.org/html/rfc7395\r\n             *\r\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\r\n             */\r\n\r\n            /** PrivateConstructor: Strophe.Websocket\r\n             *  Create and initialize a Strophe.WebSocket object.\r\n             *  Currently only sets the connection Object.\r\n             *\r\n             *  Parameters:\r\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.WebSocket object.\r\n             */\r\n\r\n            Strophe$2.Websocket = function (connection) {\r\n              this._conn = connection;\r\n              this.strip = \"wrapper\";\r\n              var service = connection.service;\r\n\r\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\r\n                // If the service is not an absolute URL, assume it is a path and put the absolute\r\n                // URL together from options, current URL and the path.\r\n                var new_service = \"\";\r\n\r\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\r\n                  new_service += \"ws\";\r\n                } else {\r\n                  new_service += \"wss\";\r\n                }\r\n\r\n                new_service += \"://\" + window.location.host;\r\n\r\n                if (service.indexOf(\"/\") !== 0) {\r\n                  new_service += window.location.pathname + service;\r\n                } else {\r\n                  new_service += service;\r\n                }\r\n\r\n                connection.service = new_service;\r\n              }\r\n            };\r\n\r\n            Strophe$2.Websocket.prototype = {\r\n              /** PrivateFunction: _buildStream\r\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\r\n               *\r\n               *  Returns:\r\n               *    A Strophe.Builder with a <stream> element.\r\n               */\r\n              _buildStream: function _buildStream() {\r\n                return $build$2(\"open\", {\r\n                  \"xmlns\": Strophe$2.NS.FRAMING,\r\n                  \"to\": this._conn.domain,\r\n                  \"version\": '1.0'\r\n                });\r\n              },\r\n\r\n              /** PrivateFunction: _check_streamerror\r\n               * _Private_ checks a message for stream:error\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) bodyWrap - The received stanza.\r\n               *    connectstatus - The ConnectStatus that will be set on error.\r\n               *  Returns:\r\n               *     true if there was a streamerror, false otherwise.\r\n               */\r\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\r\n                var errors;\r\n\r\n                if (bodyWrap.getElementsByTagNameNS) {\r\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\r\n                } else {\r\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\r\n                }\r\n\r\n                if (errors.length === 0) {\r\n                  return false;\r\n                }\r\n\r\n                var error = errors[0];\r\n                var condition = \"\";\r\n                var text = \"\";\r\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\r\n\r\n                for (var i = 0; i < error.childNodes.length; i++) {\r\n                  var e = error.childNodes[i];\r\n\r\n                  if (e.getAttribute(\"xmlns\") !== ns) {\r\n                    break;\r\n                  }\r\n\r\n                  if (e.nodeName === \"text\") {\r\n                    text = e.textContent;\r\n                  } else {\r\n                    condition = e.nodeName;\r\n                  }\r\n                }\r\n\r\n                var errorString = \"WebSocket stream error: \";\r\n\r\n                if (condition) {\r\n                  errorString += condition;\r\n                } else {\r\n                  errorString += \"unknown\";\r\n                }\r\n\r\n                if (text) {\r\n                  errorString += \" - \" + text;\r\n                }\r\n\r\n                Strophe$2.error(errorString); // close the connection on stream_error\r\n\r\n                this._conn._changeConnectStatus(connectstatus, condition);\r\n\r\n                this._conn._doDisconnect();\r\n\r\n                return true;\r\n              },\r\n\r\n              /** PrivateFunction: _reset\r\n               *  Reset the connection.\r\n               *\r\n               *  This function is called by the reset function of the Strophe Connection.\r\n               *  Is not needed by WebSockets.\r\n               */\r\n              _reset: function _reset() {\r\n                return;\r\n              },\r\n\r\n              /** PrivateFunction: _connect\r\n               *  _Private_ function called by Strophe.Connection.connect\r\n               *\r\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\r\n               *  Does nothing if there already is a WebSocket.\r\n               */\r\n              _connect: function _connect() {\r\n                // Ensure that there is no open WebSocket from a previous Connection.\r\n                this._closeSocket(); // Create the new WobSocket\r\n\r\n\r\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\r\n                this.socket.onopen = this._onOpen.bind(this);\r\n                this.socket.onerror = this._onError.bind(this);\r\n                this.socket.onclose = this._onClose.bind(this);\r\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\r\n              },\r\n\r\n              /** PrivateFunction: _connect_cb\r\n               *  _Private_ function called by Strophe.Connection._connect_cb\r\n               *\r\n               * checks for stream:error\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) bodyWrap - The received stanza.\r\n               */\r\n              _connect_cb: function _connect_cb(bodyWrap) {\r\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\r\n\r\n                if (error) {\r\n                  return Strophe$2.Status.CONNFAIL;\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _handleStreamStart\r\n               * _Private_ function that checks the opening <open /> tag for errors.\r\n               *\r\n               * Disconnects if there is an error and returns false, true otherwise.\r\n               *\r\n               *  Parameters:\r\n               *    (Node) message - Stanza containing the <open /> tag.\r\n               */\r\n              _handleStreamStart: function _handleStreamStart(message) {\r\n                var error = false; // Check for errors in the <open /> tag\r\n\r\n                var ns = message.getAttribute(\"xmlns\");\r\n\r\n                if (typeof ns !== \"string\") {\r\n                  error = \"Missing xmlns in <open />\";\r\n                } else if (ns !== Strophe$2.NS.FRAMING) {\r\n                  error = \"Wrong xmlns in <open />: \" + ns;\r\n                }\r\n\r\n                var ver = message.getAttribute(\"version\");\r\n\r\n                if (typeof ver !== \"string\") {\r\n                  error = \"Missing version in <open />\";\r\n                } else if (ver !== \"1.0\") {\r\n                  error = \"Wrong version in <open />: \" + ver;\r\n                }\r\n\r\n                if (error) {\r\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\r\n\r\n                  this._conn._doDisconnect();\r\n\r\n                  return false;\r\n                }\r\n\r\n                return true;\r\n              },\r\n\r\n              /** PrivateFunction: _connect_cb_wrapper\r\n               * _Private_ function that handles the first connection messages.\r\n               *\r\n               * On receiving an opening stream tag this callback replaces itself with the real\r\n               * message handler. On receiving a stream error the connection is terminated.\r\n               */\r\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\r\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\r\n                  // Strip the XML Declaration, if there is one\r\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\r\n                  if (data === '') return;\r\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\r\n\r\n                  this._conn.xmlInput(streamStart);\r\n\r\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\r\n\r\n\r\n                  if (this._handleStreamStart(streamStart)) {\r\n                    //_connect_cb will check for stream:error and disconnect on error\r\n                    this._connect_cb(streamStart);\r\n                  }\r\n                } else if (message.data.indexOf(\"<close \") === 0) {\r\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\r\n                  // Parse the raw string to an XML element\r\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\r\n\r\n                  this._conn.xmlInput(parsedMessage);\r\n\r\n                  this._conn.rawInput(message.data);\r\n\r\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\r\n\r\n                  if (see_uri) {\r\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\r\n\r\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\r\n\r\n                    if (isSecureRedirect) {\r\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\r\n\r\n                      this._conn.reset();\r\n\r\n                      this._conn.service = see_uri;\r\n\r\n                      this._connect();\r\n                    }\r\n                  } else {\r\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\r\n\r\n                    this._conn._doDisconnect();\r\n                  }\r\n                } else {\r\n                  var string = this._streamWrap(message.data);\r\n\r\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\r\n                  this.socket.onmessage = this._onMessage.bind(this);\r\n\r\n                  this._conn._connect_cb(elem, null, message.data);\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _disconnect\r\n               *  _Private_ function called by Strophe.Connection.disconnect\r\n               *\r\n               *  Disconnects and sends a last stanza if one is given\r\n               *\r\n               *  Parameters:\r\n               *    (Request) pres - This stanza will be sent before disconnecting.\r\n               */\r\n              _disconnect: function _disconnect(pres) {\r\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\r\n                  if (pres) {\r\n                    this._conn.send(pres);\r\n                  }\r\n\r\n                  var close = $build$2(\"close\", {\r\n                    \"xmlns\": Strophe$2.NS.FRAMING\r\n                  });\r\n\r\n                  this._conn.xmlOutput(close.tree());\r\n\r\n                  var closeString = Strophe$2.serialize(close);\r\n\r\n                  this._conn.rawOutput(closeString);\r\n\r\n                  try {\r\n                    this.socket.send(closeString);\r\n                  } catch (e) {\r\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\r\n                  }\r\n                }\r\n\r\n                this._conn._doDisconnect();\r\n              },\r\n\r\n              /** PrivateFunction: _doDisconnect\r\n               *  _Private_ function to disconnect.\r\n               *\r\n               *  Just closes the Socket for WebSockets\r\n               */\r\n              _doDisconnect: function _doDisconnect() {\r\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\r\n\r\n                this._closeSocket();\r\n              },\r\n\r\n              /** PrivateFunction _streamWrap\r\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\r\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\r\n               */\r\n              _streamWrap: function _streamWrap(stanza) {\r\n                return \"<wrapper>\" + stanza + '</wrapper>';\r\n              },\r\n\r\n              /** PrivateFunction: _closeSocket\r\n               *  _Private_ function to close the WebSocket.\r\n               *\r\n               *  Closes the socket if it is still open and deletes it\r\n               */\r\n              _closeSocket: function _closeSocket() {\r\n                if (this.socket) {\r\n                  try {\r\n                    this.socket.onclose = null;\r\n                    this.socket.onerror = null;\r\n                    this.socket.onmessage = null;\r\n                    this.socket.close();\r\n                  } catch (e) {\r\n                    Strophe$2.debug(e.message);\r\n                  }\r\n                }\r\n\r\n                this.socket = null;\r\n              },\r\n\r\n              /** PrivateFunction: _emptyQueue\r\n               * _Private_ function to check if the message queue is empty.\r\n               *\r\n               *  Returns:\r\n               *    True, because WebSocket messages are send immediately after queueing.\r\n               */\r\n              _emptyQueue: function _emptyQueue() {\r\n                return true;\r\n              },\r\n\r\n              /** PrivateFunction: _onClose\r\n               * _Private_ function to handle websockets closing.\r\n               *\r\n               * Nothing to do here for WebSockets\r\n               */\r\n              _onClose: function _onClose(e) {\r\n                if (this._conn.connected && !this._conn.disconnecting) {\r\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\r\n\r\n                  this._conn._doDisconnect();\r\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\r\n                  // in case the onError callback was not called (Safari 10 does not\r\n                  // call onerror when the initial connection fails) we need to\r\n                  // dispatch a CONNFAIL status update to be consistent with the\r\n                  // behavior on other browsers.\r\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\r\n\r\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\r\n\r\n                  this._conn._doDisconnect();\r\n                } else {\r\n                  Strophe$2.debug(\"Websocket closed\");\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _no_auth_received\r\n               *\r\n               * Called on stream start/restart when no stream:features\r\n               * has been received.\r\n               */\r\n              _no_auth_received: function _no_auth_received(callback) {\r\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\r\n\r\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\r\n\r\n                if (callback) {\r\n                  callback.call(this._conn);\r\n                }\r\n\r\n                this._conn._doDisconnect();\r\n              },\r\n\r\n              /** PrivateFunction: _onDisconnectTimeout\r\n               *  _Private_ timeout handler for handling non-graceful disconnection.\r\n               *\r\n               *  This does nothing for WebSockets\r\n               */\r\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\r\n\r\n              /** PrivateFunction: _abortAllRequests\r\n               *  _Private_ helper function that makes sure all pending requests are aborted.\r\n               */\r\n              _abortAllRequests: function _abortAllRequests() {},\r\n\r\n              /** PrivateFunction: _onError\r\n               * _Private_ function to handle websockets errors.\r\n               *\r\n               * Parameters:\r\n               * (Object) error - The websocket error.\r\n               */\r\n              _onError: function _onError(error) {\r\n                Strophe$2.error(\"Websocket error \" + error);\r\n\r\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\r\n\r\n                this._disconnect();\r\n              },\r\n\r\n              /** PrivateFunction: _onIdle\r\n               *  _Private_ function called by Strophe.Connection._onIdle\r\n               *\r\n               *  sends all queued stanzas\r\n               */\r\n              _onIdle: function _onIdle() {\r\n                var data = this._conn._data;\r\n\r\n                if (data.length > 0 && !this._conn.paused) {\r\n                  for (var i = 0; i < data.length; i++) {\r\n                    if (data[i] !== null) {\r\n                      var stanza = void 0;\r\n\r\n                      if (data[i] === \"restart\") {\r\n                        stanza = this._buildStream().tree();\r\n                      } else {\r\n                        stanza = data[i];\r\n                      }\r\n\r\n                      var rawStanza = Strophe$2.serialize(stanza);\r\n\r\n                      this._conn.xmlOutput(stanza);\r\n\r\n                      this._conn.rawOutput(rawStanza);\r\n\r\n                      this.socket.send(rawStanza);\r\n                    }\r\n                  }\r\n\r\n                  this._conn._data = [];\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _onMessage\r\n               * _Private_ function to handle websockets messages.\r\n               *\r\n               * This function parses each of the messages as if they are full documents.\r\n               * [TODO : We may actually want to use a SAX Push parser].\r\n               *\r\n               * Since all XMPP traffic starts with\r\n               *  <stream:stream version='1.0'\r\n               *                 xml:lang='en'\r\n               *                 xmlns='jabber:client'\r\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\r\n               *                 id='3697395463'\r\n               *                 from='SERVER'>\r\n               *\r\n               * The first stanza will always fail to be parsed.\r\n               *\r\n               * Additionally, the seconds stanza will always be <stream:features> with\r\n               * the stream NS defined in the previous stanza, so we need to 'force'\r\n               * the inclusion of the NS in this stanza.\r\n               *\r\n               * Parameters:\r\n               * (string) message - The websocket message.\r\n               */\r\n              _onMessage: function _onMessage(message) {\r\n                var elem; // check for closing stream\r\n\r\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\r\n\r\n                if (message.data === close) {\r\n                  this._conn.rawInput(close);\r\n\r\n                  this._conn.xmlInput(message);\r\n\r\n                  if (!this._conn.disconnecting) {\r\n                    this._conn._doDisconnect();\r\n                  }\r\n\r\n                  return;\r\n                } else if (message.data.search(\"<open \") === 0) {\r\n                  // This handles stream restarts\r\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\r\n\r\n                  if (!this._handleStreamStart(elem)) {\r\n                    return;\r\n                  }\r\n                } else {\r\n                  var data = this._streamWrap(message.data);\r\n\r\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\r\n                }\r\n\r\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\r\n                  return;\r\n                } //handle unavailable presence stanza before disconnecting\r\n\r\n\r\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\r\n                  this._conn.xmlInput(elem);\r\n\r\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\r\n                  // wait for the </stream:stream> tag before we close the connection\r\n\r\n\r\n                  return;\r\n                }\r\n\r\n                this._conn._dataRecv(elem, message.data);\r\n              },\r\n\r\n              /** PrivateFunction: _onOpen\r\n               * _Private_ function to handle websockets connection setup.\r\n               *\r\n               * The opening stream tag is sent here.\r\n               */\r\n              _onOpen: function _onOpen() {\r\n                Strophe$2.debug(\"Websocket open\");\r\n\r\n                var start = this._buildStream();\r\n\r\n                this._conn.xmlOutput(start.tree());\r\n\r\n                var startString = Strophe$2.serialize(start);\r\n\r\n                this._conn.rawOutput(startString);\r\n\r\n                this.socket.send(startString);\r\n              },\r\n\r\n              /** PrivateFunction: _reqToData\r\n               * _Private_ function to get a stanza out of a request.\r\n               *\r\n               * WebSockets don't use requests, so the passed argument is just returned.\r\n               *\r\n               *  Parameters:\r\n               *    (Object) stanza - The stanza.\r\n               *\r\n               *  Returns:\r\n               *    The stanza that was passed.\r\n               */\r\n              _reqToData: function _reqToData(stanza) {\r\n                return stanza;\r\n              },\r\n\r\n              /** PrivateFunction: _send\r\n               *  _Private_ part of the Connection.send function for WebSocket\r\n               *\r\n               * Just flushes the messages that are in the queue\r\n               */\r\n              _send: function _send() {\r\n                this._conn.flush();\r\n              },\r\n\r\n              /** PrivateFunction: _sendRestart\r\n               *\r\n               *  Send an xmpp:restart stanza.\r\n               */\r\n              _sendRestart: function _sendRestart() {\r\n                clearTimeout(this._conn._idleTimeout);\r\n\r\n                this._conn._onIdle.bind(this._conn)();\r\n              }\r\n            };\r\n\r\n            global$1.Strophe = core.Strophe;\r\n            global$1.$build = core.$build;\r\n            global$1.$iq = core.$iq;\r\n            global$1.$msg = core.$msg;\r\n            global$1.$pres = core.$pres;\r\n\r\n            return core;\r\n\r\n}));\r\n","import BrowserCapabilities from './BrowserCapabilities';\r\n\r\nexport default new BrowserCapabilities();\r\n","/* Copyright @ 2015-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Logger = require(\"./Logger\");\r\nvar LogCollector = require(\"./LogCollector\");\r\n\r\n/**\r\n * Definition of the log method\r\n * @name log_method\r\n * @function\r\n * @param {...*} log_args the arguments to be logged\r\n */\r\n/**\r\n * The logger's transport type definition.\r\n *\r\n * @typedef {object} LoggerTransport\r\n *\r\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\r\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\r\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\r\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\r\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\r\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\r\n */\r\n\r\n/**\r\n * Map with the created loggers with ID.\r\n */\r\nvar idLoggers = {};\r\n\r\n/**\r\n * Array with the loggers without id.\r\n */\r\nvar loggers = [];\r\n\r\n/**\r\n * Log level for the lbrary.\r\n */\r\nvar curLevel = Logger.levels.TRACE;\r\n\r\n\r\nmodule.exports = {\r\n    /**\r\n     * Adds given {@link LoggerTransport} instance to the list of global\r\n     * transports which means that it'll be used by all {@link Logger}s\r\n     * @param {LoggerTransport} transport\r\n     */\r\n    addGlobalTransport: function(transport) {\r\n        Logger.addGlobalTransport(transport);\r\n    },\r\n    /**\r\n     * Removes given {@link LoggerTransport} instance from the list of global\r\n     * transports\r\n     * @param {LoggerTransport} transport\r\n     */\r\n    removeGlobalTransport: function(transport) {\r\n        Logger.removeGlobalTransport(transport);\r\n    },\r\n    /**\r\n    * Sets global options which will be used by all loggers. Changing these\r\n    * works even after other loggers are created.\r\n    */\r\n    setGlobalOptions: function(options) {\r\n        Logger.setGlobalOptions(options);\r\n    },\r\n    /**\r\n     * Creates new logger.\r\n     * @arguments the same as Logger constructor\r\n     */\r\n    getLogger: function(id, transports, options) {\r\n        var logger = new Logger(curLevel, id, transports, options);\r\n        if(id) {\r\n            idLoggers[id] = idLoggers[id] || [];\r\n            idLoggers[id].push(logger);\r\n        } else {\r\n            loggers.push(logger);\r\n        }\r\n        return logger;\r\n    },\r\n    /**\r\n     * Changes the log level for the existing loggers by id.\r\n     * @param level the new log level.\r\n     * @param id if specified the level will be changed only for loggers with the\r\n     * same id. Otherwise the operation will affect all loggers that don't\r\n     * have id.\r\n     */\r\n    setLogLevelById: function(level, id) {\r\n        var l = id? (idLoggers[id] || []) : loggers;\r\n        for(var i = 0; i < l.length; i++) {\r\n            l[i].setLevel(level);\r\n        }\r\n    },\r\n    /**\r\n     * Changes the log level for all existing loggers.\r\n     * @param level the new log level.\r\n     */\r\n    setLogLevel: function (level) {\r\n        curLevel = level;\r\n        var i = 0;\r\n        for(; i < loggers.length; i++) {\r\n            loggers[i].setLevel(level);\r\n        }\r\n\r\n        for(var id in idLoggers) {\r\n            var l = idLoggers[id] || [];\r\n            for(i = 0; i < l.length; i++) {\r\n                l[i].setLevel(level);\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * The supported log levels.\r\n     */\r\n    levels: Logger.levels,\r\n    /**\r\n     * Exports the <tt>LogCollector</tt>.\r\n     */\r\n    LogCollector: LogCollector\r\n};\r\n","/**\r\n * The audio type.\r\n */\r\nexport const AUDIO = 'audio';\r\n\r\n/**\r\n * The presenter type.\r\n */\r\nexport const PRESENTER = 'presenter';\r\n\r\n/**\r\n * The video type.\r\n */\r\nexport const VIDEO = 'video';\r\n\r\nexport const MediaType = {\r\n    /**\r\n     * The audio type.\r\n     */\r\n    AUDIO : 'audio',\r\n\r\n    /**\r\n     * The presenter type.\r\n     */\r\n    PRESENTER : 'presenter',\r\n\r\n    /**\r\n     * The video type.\r\n     */\r\n    VIDEO : 'video'\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport browser from '../browser';\r\nimport ScriptUtil from '../util/ScriptUtil';\r\n\r\nimport analytics from './AnalyticsAdapter';\r\nimport CallStats from './CallStats';\r\nimport LocalStats from './LocalStatsCollector';\r\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\r\nimport RTPStats from './RTPStatsCollector';\r\nimport { CALLSTATS_SCRIPT_URL } from './constants';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * Stores all active {@link Statistics} instances.\r\n * @type {Set<Statistics>}\r\n */\r\nlet _instances;\r\n\r\n/**\r\n * True if callstats API is loaded\r\n */\r\nlet isCallstatsLoaded = false;\r\n\r\n/**\r\n * Since callstats.io is a third party, we cannot guarantee the quality of their\r\n * service. More specifically, their server may take noticeably long time to\r\n * respond. Consequently, it is in our best interest (in the sense that the\r\n * intergration of callstats.io is pretty important to us but not enough to\r\n * allow it to prevent people from joining a conference) to (1) start\r\n * downloading their API as soon as possible and (2) do the downloading\r\n * asynchronously.\r\n *\r\n * @param {StatisticsOptions} options - Options to use for downloading and\r\n * initializing callstats backend.\r\n */\r\nfunction loadCallStatsAPI(options) {\r\n    if (!isCallstatsLoaded) {\r\n        ScriptUtil.loadScript(\r\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\r\n            /* async */ true,\r\n            /* prepend */ true,\r\n            /* relativeURL */ undefined,\r\n            /* loadCallback */ () => _initCallStatsBackend(options)\r\n        );\r\n        isCallstatsLoaded = true;\r\n    }\r\n}\r\n\r\n/**\r\n * Initializes Callstats backend.\r\n *\r\n * @param {StatisticsOptions} options - The options to use for initializing\r\n * callstats backend.\r\n * @private\r\n */\r\nfunction _initCallStatsBackend(options) {\r\n    if (CallStats.isBackendInitialized()) {\r\n        return;\r\n    }\r\n\r\n    if (!CallStats.initBackend({\r\n        callStatsID: options.callStatsID,\r\n        callStatsSecret: options.callStatsSecret,\r\n        userName: options.userName,\r\n        aliasName: options.aliasName,\r\n        applicationName: options.applicationName,\r\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\r\n        confID: options.confID,\r\n        siteID: options.siteID\r\n    })) {\r\n        logger.error('CallStats Backend initialization failed bad');\r\n    }\r\n}\r\n\r\n/**\r\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\r\n * \"message\" and \"constraintName\". So we need to bundle additional information\r\n * from JitsiTrackError into error passed to callstats to preserve valuable\r\n * information about error.\r\n * @param {JitsiTrackError} error\r\n */\r\nfunction formatJitsiTrackErrorForCallStats(error) {\r\n    const err = new Error();\r\n\r\n    // Just copy original stack from error\r\n    err.stack = error.stack;\r\n\r\n    // Combine name from error's name plus (possibly) name of original GUM error\r\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\r\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\r\n\r\n    // Put all constraints into this field. For constraint failed errors we will\r\n    // still know which exactly constraint failed as it will be a part of\r\n    // message.\r\n    err.constraintName = error.gum && error.gum.constraints\r\n        ? JSON.stringify(error.gum.constraints) : '';\r\n\r\n    // Just copy error's message.\r\n    err.message = error.message;\r\n\r\n    return err;\r\n}\r\n\r\n/**\r\n * Init statistic options\r\n * @param options\r\n */\r\nStatistics.init = function(options) {\r\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\r\n    if (typeof options.pcStatsInterval === 'number') {\r\n        Statistics.pcStatsInterval = options.pcStatsInterval;\r\n    }\r\n\r\n    if (typeof options.audioLevelsInterval === 'number') {\r\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\r\n    }\r\n\r\n    if (typeof options.longTasksStatsInterval === 'number') {\r\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\r\n    }\r\n\r\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\r\n};\r\n\r\n/**\r\n * The options to configure Statistics.\r\n * @typedef {Object} StatisticsOptions\r\n * @property {string} applicationName - The application name to pass to\r\n * callstats.\r\n * @property {string} aliasName - The alias name to use when initializing callstats.\r\n * @property {string} userName - The user name to use when initializing callstats.\r\n * @property {string} confID - The callstats conference ID to use.\r\n * @property {string} callStatsID - Callstats credentials - the id.\r\n * @property {string} callStatsSecret - Callstats credentials - the secret.\r\n * @property {string} customScriptUrl - A custom lib url to use when downloading\r\n * callstats library.\r\n * @property {string} roomName - The room name we are currently in.\r\n */\r\n/**\r\n *\r\n * @param xmpp\r\n * @param {StatisticsOptions} options - The options to use creating the\r\n * Statistics.\r\n */\r\nexport default function Statistics(xmpp, options) {\r\n    /**\r\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\r\n     * collect RTP statistics for each peerconnection.\r\n     * @type {Map<string, RTPStats}\r\n     */\r\n    this.rtpStatsMap = new Map();\r\n    this.eventEmitter = new EventEmitter();\r\n    this.xmpp = xmpp;\r\n    this.options = options || {};\r\n\r\n    this.callStatsIntegrationEnabled\r\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\r\n\r\n            // Even though AppID and AppSecret may be specified, the integration\r\n            // of callstats.io may be disabled because of globally-disallowed\r\n            // requests to any third parties.\r\n            && (Statistics.disableThirdPartyRequests !== true);\r\n    if (this.callStatsIntegrationEnabled) {\r\n        this.callStatsApplicationLogsDisabled\r\n            = this.options.callStatsApplicationLogsDisabled;\r\n        if (browser.isReactNative()) {\r\n            _initCallStatsBackend(this.options);\r\n        } else {\r\n            loadCallStatsAPI(this.options);\r\n        }\r\n\r\n        if (!this.options.confID) {\r\n            logger.warn('\"confID\" is not defined');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores {@link CallStats} instances for each\r\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\r\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\r\n     * @type {Map<number, CallStats>}\r\n     */\r\n    this.callsStatsInstances = new Map();\r\n\r\n    Statistics.instances.add(this);\r\n}\r\nStatistics.audioLevelsEnabled = false;\r\nStatistics.audioLevelsInterval = 200;\r\nStatistics.pcStatsInterval = 10000;\r\nStatistics.disableThirdPartyRequests = false;\r\nStatistics.analytics = analytics;\r\n\r\nObject.defineProperty(Statistics, 'instances', {\r\n    /**\r\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\r\n     * initializes the Set to allow any Set polyfills to be applied.\r\n     * @type {Set<Statistics>}\r\n     */\r\n    get() {\r\n        if (!_instances) {\r\n            _instances = new Set();\r\n        }\r\n\r\n        return _instances;\r\n    }\r\n});\r\n\r\n/**\r\n * Starts collecting RTP stats for given peerconnection.\r\n * @param {TraceablePeerConnection} peerconnection\r\n */\r\nStatistics.prototype.startRemoteStats = function(peerconnection) {\r\n    this.stopRemoteStats(peerconnection);\r\n\r\n    try {\r\n        const rtpStats\r\n            = new RTPStats(\r\n                peerconnection,\r\n                Statistics.audioLevelsInterval,\r\n                Statistics.pcStatsInterval,\r\n                this.eventEmitter);\r\n\r\n        rtpStats.start(Statistics.audioLevelsEnabled);\r\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\r\n    } catch (e) {\r\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\r\n    }\r\n};\r\n\r\nStatistics.localStats = [];\r\n\r\nStatistics.startLocalStats = function(stream, callback) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\r\n        callback);\r\n\r\n    this.localStats.push(localStats);\r\n    localStats.start();\r\n};\r\n\r\nStatistics.prototype.addAudioLevelListener = function(listener) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\r\n};\r\n\r\nStatistics.prototype.removeAudioLevelListener = function(listener) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\r\n};\r\n\r\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\r\n};\r\n\r\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\r\n    this.eventEmitter.removeListener(\r\n        StatisticsEvents.BEFORE_DISPOSED, listener);\r\n};\r\n\r\nStatistics.prototype.addConnectionStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(\r\n        StatisticsEvents.CONNECTION_STATS,\r\n        listener);\r\n};\r\n\r\nStatistics.prototype.addByteSentStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\r\n        listener);\r\n};\r\n\r\n/**\r\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\r\n *\r\n * @param {Function} listener a function that would be called when notified.\r\n * @returns {void}\r\n */\r\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\r\n};\r\n\r\n/**\r\n * Creates an instance of {@link PerformanceObserverStats} and starts the\r\n * observer that records the stats periodically.\r\n *\r\n * @returns {void}\r\n */\r\nStatistics.prototype.attachLongTasksStats = function(conference) {\r\n    if (!browser.supportsPerformanceObserver()) {\r\n        logger.warn('Performance observer for long tasks not supported by browser!');\r\n\r\n        return;\r\n    }\r\n\r\n    this.performanceObserverStats = new PerformanceObserverStats(\r\n        this.eventEmitter,\r\n        Statistics.longTasksStatsInterval);\r\n\r\n    conference.on(\r\n        JitsiConferenceEvents.CONFERENCE_JOINED,\r\n        () => this.performanceObserverStats.startObserver());\r\n    conference.on(\r\n        JitsiConferenceEvents.CONFERENCE_LEFT,\r\n        () => this.performanceObserverStats.stopObserver());\r\n};\r\n\r\n/**\r\n * Obtains the current value of the LongTasks event statistics.\r\n *\r\n * @returns {Object|null} stats object if the observer has been\r\n * created, null otherwise.\r\n */\r\nStatistics.prototype.getLongTasksStats = function() {\r\n    return this.performanceObserverStats\r\n        ? this.performanceObserverStats.getLongTasksStats()\r\n        : null;\r\n};\r\n\r\n/**\r\n * Removes the given listener for the LONG_TASKS_STATS event.\r\n *\r\n * @param {Function} listener the listener we want to remove.\r\n * @returns {void}\r\n */\r\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.dispose = function() {\r\n    try {\r\n        // NOTE Before reading this please see the comment in stopCallStats...\r\n        //\r\n        // Here we prevent from emitting the event twice in case it will be\r\n        // triggered from stopCallStats.\r\n        // If the event is triggered from here it means that the logs will not\r\n        // be submitted anyway (because there is no CallStats instance), but\r\n        // we're doing that for the sake of some kind of consistency.\r\n        if (!this.callsStatsInstances.size) {\r\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\r\n        }\r\n        for (const callStats of this.callsStatsInstances.values()) {\r\n            this.stopCallStats(callStats.tpc);\r\n        }\r\n        for (const tpcId of this.rtpStatsMap.keys()) {\r\n            this._stopRemoteStats(tpcId);\r\n        }\r\n        if (this.eventEmitter) {\r\n            this.eventEmitter.removeAllListeners();\r\n        }\r\n    } finally {\r\n        Statistics.instances.delete(this);\r\n    }\r\n};\r\n\r\nStatistics.stopLocalStats = function(stream) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < Statistics.localStats.length; i++) {\r\n        if (Statistics.localStats[i].stream === stream) {\r\n            const localStats = Statistics.localStats.splice(i, 1);\r\n\r\n            localStats[0].stop();\r\n            break;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Stops remote RTP stats for given peerconnection ID.\r\n * @param {string} tpcId {@link TraceablePeerConnection.id}\r\n * @private\r\n */\r\nStatistics.prototype._stopRemoteStats = function(tpcId) {\r\n    const rtpStats = this.rtpStatsMap.get(tpcId);\r\n\r\n    if (rtpStats) {\r\n        rtpStats.stop();\r\n        this.rtpStatsMap.delete(tpcId);\r\n    }\r\n};\r\n\r\n/**\r\n * Stops collecting RTP stats for given peerconnection\r\n * @param {TraceablePeerConnection} tpc\r\n */\r\nStatistics.prototype.stopRemoteStats = function(tpc) {\r\n    this._stopRemoteStats(tpc.id);\r\n};\r\n\r\n// CALSTATS METHODS\r\n\r\n/**\r\n * Initializes the callstats.io API.\r\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\r\n * instance for which CalStats will be started.\r\n * @param {string} remoteUserID\r\n */\r\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\r\n    if (!this.callStatsIntegrationEnabled) {\r\n        return;\r\n    } else if (this.callsStatsInstances.has(tpc.id)) {\r\n        logger.error('CallStats instance for ${tpc} exists already');\r\n\r\n        return;\r\n    }\r\n\r\n    logger.info(`Starting CallStats for ${tpc}...`);\r\n\r\n    const newInstance\r\n        = new CallStats(\r\n            tpc,\r\n            {\r\n                confID: this.options.confID,\r\n                remoteUserID\r\n            });\r\n\r\n    this.callsStatsInstances.set(tpc.id, newInstance);\r\n};\r\n\r\n/**\r\n * Obtains the list of *all* {@link CallStats} instances collected from every\r\n * valid {@link Statistics} instance.\r\n * @return {Set<CallStats>}\r\n * @private\r\n */\r\nStatistics._getAllCallStatsInstances = function() {\r\n    const csInstances = new Set();\r\n\r\n    for (const statistics of Statistics.instances) {\r\n        for (const cs of statistics.callsStatsInstances.values()) {\r\n            csInstances.add(cs);\r\n        }\r\n    }\r\n\r\n    return csInstances;\r\n};\r\n\r\n/**\r\n * Removes the callstats.io instances.\r\n */\r\nStatistics.prototype.stopCallStats = function(tpc) {\r\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (callStatsInstance) {\r\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\r\n        // able to submit the last log batch from jitsi-meet to CallStats. After\r\n        // recent changes we dispose the CallStats earlier\r\n        // (before Statistics.dispose), so we need to emit this event here to\r\n        // give this last chance for final log batch submission.\r\n        //\r\n        // Eventually there should be a separate module called \"log storage\"\r\n        // which should emit proper events when it's underlying\r\n        // CallStats instance is going away.\r\n        if (this.callsStatsInstances.size === 1) {\r\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\r\n        }\r\n        this.callsStatsInstances.delete(tpc.id);\r\n\r\n        // The fabric needs to be terminated when being stopped\r\n        callStatsInstance.sendTerminateEvent();\r\n    }\r\n};\r\n\r\n/**\r\n * Returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n *\r\n * @returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n */\r\nStatistics.prototype.isCallstatsEnabled = function() {\r\n    return this.callStatsIntegrationEnabled;\r\n};\r\n\r\n/**\r\n * Logs either resume or hold event for the given peer connection.\r\n * @param {TraceablePeerConnection} tpc the connection for which event will be\r\n * reported\r\n * @param {boolean} isResume true for resume or false for hold\r\n */\r\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendResumeOrHoldEvent(isResume);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats and analytics (if present) for ice connection failed\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendIceConnectionFailedEvent();\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats for mute events\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n * @param {boolean} muted true for muted and false for not muted\r\n * @param {String} type \"audio\"/\"video\"\r\n */\r\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\r\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\r\n\r\n    CallStats.sendMuteEvent(muted, type, instance);\r\n};\r\n\r\n/**\r\n * Notifies CallStats for screen sharing events\r\n * @param start {boolean} true for starting screen sharing and\r\n * false for not stopping\r\n * @param {string|null} ssrc - optional ssrc value, used only when\r\n * starting screen sharing.\r\n */\r\nStatistics.prototype.sendScreenSharingEvent\r\n    = function(start, ssrc) {\r\n        for (const cs of this.callsStatsInstances.values()) {\r\n            cs.sendScreenSharingEvent(start, ssrc);\r\n        }\r\n    };\r\n\r\n/**\r\n * Notifies the statistics module that we are now the dominant speaker of the\r\n * conference.\r\n * @param {String} roomJid - The room jid where the speaker event occurred.\r\n */\r\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\r\n    for (const cs of this.callsStatsInstances.values()) {\r\n        cs.sendDominantSpeakerEvent();\r\n    }\r\n\r\n    // xmpp send dominant speaker event\r\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\r\n};\r\n\r\n/**\r\n * Notifies about active device.\r\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\r\n *      their data\r\n */\r\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\r\n    const globalSet = Statistics._getAllCallStatsInstances();\r\n\r\n    if (globalSet.size) {\r\n        for (const cs of globalSet) {\r\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\r\n        }\r\n    } else {\r\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\r\n    }\r\n};\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Lets the underlying statistics module know where is given SSRC rendered by\r\n * providing renderer tag ID.\r\n * @param {TraceablePeerConnection} tpc the connection to which the stream\r\n * belongs to\r\n * @param {number} ssrc the SSRC of the stream\r\n * @param {boolean} isLocal\r\n * @param {string} userId\r\n * @param {string} usageLabel  meaningful usage label of this stream like\r\n *        'microphone', 'camera' or 'screen'.\r\n * @param {string} containerId the id of media 'audio' or 'video' tag which\r\n *        renders the stream.\r\n */\r\nStatistics.prototype.associateStreamWithVideoTag = function(\r\n        tpc,\r\n        ssrc,\r\n        isLocal,\r\n        userId,\r\n        usageLabel,\r\n        containerId) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.associateStreamWithVideoTag(\r\n            ssrc,\r\n            isLocal,\r\n            userId,\r\n            usageLabel,\r\n            containerId);\r\n    }\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Notifies CallStats that getUserMedia failed.\r\n *\r\n * @param {Error} e error to send\r\n */\r\nStatistics.sendGetUserMediaFailed = function(e) {\r\n    const error\r\n        = e instanceof JitsiTrackError\r\n            ? formatJitsiTrackErrorForCallStats(e) : e;\r\n    const globalSet = Statistics._getAllCallStatsInstances();\r\n\r\n    if (globalSet.size) {\r\n        for (const cs of globalSet) {\r\n            CallStats.sendGetUserMediaFailed(error, cs);\r\n        }\r\n    } else {\r\n        CallStats.sendGetUserMediaFailed(error, null);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to create offer.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendCreateOfferFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to create answer.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\r\n */\r\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendCreateAnswerFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to set local description.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendSetLocalDescFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to set remote description.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendSetRemoteDescFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to add ICE candidate.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendAddIceCandidateFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Adds to CallStats an application log.\r\n *\r\n * @param {String} m a log message to send or an {Error} object to be reported\r\n */\r\nStatistics.sendLog = function(m) {\r\n    const globalSubSet = new Set();\r\n\r\n    // FIXME we don't want to duplicate logs over P2P instance, but\r\n    // here we should go over instances and call this method for each\r\n    // unique conference ID rather than selecting the first one.\r\n    // We don't have such use case though, so leaving as is for now.\r\n    for (const stats of Statistics.instances) {\r\n        if (stats.callStatsApplicationLogsDisabled) {\r\n            return;\r\n        }\r\n\r\n        if (stats.callsStatsInstances.size) {\r\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\r\n        }\r\n    }\r\n\r\n    if (globalSubSet.size) {\r\n        for (const csPerStats of globalSubSet) {\r\n            CallStats.sendApplicationLog(m, csPerStats);\r\n        }\r\n    } else {\r\n        CallStats.sendApplicationLog(m, null);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends the given feedback through CallStats.\r\n *\r\n * @param overall an integer between 1 and 5 indicating the user's rating.\r\n * @param comment the comment from the user.\r\n * @returns {Promise} Resolves when callstats feedback has been submitted\r\n * successfully.\r\n */\r\nStatistics.prototype.sendFeedback = function(overall, comment) {\r\n    // Statistics.analytics.sendEvent is currently fire and forget, without\r\n    // confirmation of successful send.\r\n    Statistics.analytics.sendEvent(\r\n        FEEDBACK,\r\n        {\r\n            rating: overall,\r\n            comment\r\n        });\r\n\r\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\r\n};\r\n\r\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\r\n\r\n/**\r\n * Reports global error to CallStats.\r\n *\r\n * @param {Error} error\r\n */\r\nStatistics.reportGlobalError = function(error) {\r\n    if (error instanceof JitsiTrackError && error.gum) {\r\n        Statistics.sendGetUserMediaFailed(error);\r\n    } else {\r\n        Statistics.sendLog(error);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends event to analytics and logs a message to the logger/console. Console\r\n * messages might also be logged to callstats automatically.\r\n *\r\n * @param {string | Object} event the event name, or an object which\r\n * represents the entire event.\r\n * @param {Object} properties properties to attach to the event (if an event\r\n * name as opposed to an event object is provided).\r\n */\r\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\r\n    if (!event) {\r\n        logger.warn('No event or event name given.');\r\n\r\n        return;\r\n    }\r\n\r\n    let eventToLog;\r\n\r\n    // Also support an API with a single object as an event.\r\n    if (typeof event === 'object') {\r\n        eventToLog = event;\r\n    } else {\r\n        eventToLog = {\r\n            name: event,\r\n            properties\r\n        };\r\n    }\r\n\r\n    logger.log(JSON.stringify(eventToLog));\r\n\r\n    // We do this last, because it may modify the object which is passed.\r\n    this.analytics.sendEvent(event, properties);\r\n};\r\n\r\n/**\r\n * Sends event to analytics.\r\n *\r\n * @param {string | Object} eventName the event name, or an object which\r\n * represents the entire event.\r\n * @param {Object} properties properties to attach to the event\r\n */\r\nStatistics.sendAnalytics = function(eventName, properties = {}) {\r\n    this.analytics.sendEvent(eventName, properties);\r\n};\r\n","export const RTCEvents = {\r\n    /**\r\n     * Indicates error while create answer call.\r\n     */\r\n    CREATE_ANSWER_FAILED : 'rtc.create_answer_failed',\r\n\r\n    /**\r\n     * Indicates error while create offer call.\r\n     */\r\n    CREATE_OFFER_FAILED : 'rtc.create_offer_failed',\r\n    DATA_CHANNEL_OPEN : 'rtc.data_channel_open',\r\n    ENDPOINT_CONN_STATUS_CHANGED : 'rtc.endpoint_conn_status_changed',\r\n    DOMINANT_SPEAKER_CHANGED : 'rtc.dominant_speaker_changed',\r\n    LASTN_ENDPOINT_CHANGED : 'rtc.lastn_endpoint_changed',\r\n    FORWARDED_SOURCES_CHANGED : 'rtc.forwarded_sources_changed',\r\n\r\n    /**\r\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\r\n     * Used to keep track of the granted permissions on browsers which don't\r\n     * support the Permissions API.\r\n     */\r\n    PERMISSIONS_CHANGED : 'rtc.permissions_changed',\r\n\r\n    SENDER_VIDEO_CONSTRAINTS_CHANGED : 'rtc.sender_video_constraints_changed',\r\n\r\n    /**\r\n     * Event emitted when {@link RTC.setLastN} method is called to update with\r\n     * the new value set.\r\n     * The first argument is the value passed to {@link RTC.setLastN}.\r\n     */\r\n    LASTN_VALUE_CHANGED : 'rtc.lastn_value_changed',\r\n\r\n    /**\r\n     * Event emitted when ssrc for a local track is extracted and stored\r\n     * in {@link TraceablePeerConnection}.\r\n     * @param {JitsiLocalTrack} track which ssrc was updated\r\n     * @param {string} ssrc that was stored\r\n     */\r\n    LOCAL_TRACK_SSRC_UPDATED : 'rtc.local_track_ssrc_updated',\r\n\r\n    /**\r\n     * The max enabled resolution of a local video track was changed.\r\n     */\r\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED : 'rtc.local_track_max_enabled_resolution_changed',\r\n\r\n    TRACK_ATTACHED : 'rtc.track_attached',\r\n\r\n    /**\r\n     * Event fired when we remote track is added to the conference.\r\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\r\n     **/\r\n    REMOTE_TRACK_ADDED : 'rtc.remote_track_added',\r\n\r\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\r\n    // (currently implemented for local tracks only)\r\n    REMOTE_TRACK_MUTE : 'rtc.remote_track_mute',\r\n\r\n    /**\r\n     * Indicates that the remote track has been removed from the conference.\r\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\r\n     */\r\n    REMOTE_TRACK_REMOVED : 'rtc.remote_track_removed',\r\n\r\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\r\n    // (currently implemented for local tracks only)\r\n    REMOTE_TRACK_UNMUTE : 'rtc.remote_track_unmute',\r\n\r\n    /**\r\n     * Indicates error while set local description.\r\n     */\r\n    SET_LOCAL_DESCRIPTION_FAILED : 'rtc.set_local_description_failed',\r\n\r\n    /**\r\n     * Indicates error while set remote description.\r\n     */\r\n    SET_REMOTE_DESCRIPTION_FAILED : 'rtc.set_remote_description_failed',\r\n    AUDIO_OUTPUT_DEVICE_CHANGED : 'rtc.audio_output_device_changed',\r\n    DEVICE_LIST_CHANGED : 'rtc.device_list_changed',\r\n\r\n    /**\r\n     * Indicates that the list with available devices will change.\r\n     */\r\n    DEVICE_LIST_WILL_CHANGE : 'rtc.device_list_will_change',\r\n    DEVICE_LIST_AVAILABLE : 'rtc.device_list_available',\r\n\r\n    /**\r\n     * Indicates that a message from another participant is received on\r\n     * data channel.\r\n     */\r\n    ENDPOINT_MESSAGE_RECEIVED : 'rtc.endpoint_message_received',\r\n\r\n    /**\r\n     * Indicates that the remote endpoint stats have been received on data channel.\r\n     */\r\n    ENDPOINT_STATS_RECEIVED : 'rtc.endpoint_stats_received',\r\n\r\n    /**\r\n     * Designates an event indicating that the local ICE username fragment of\r\n     * the jingle session has changed.\r\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\r\n     * is the source of the event.\r\n     * The second argument is the actual \"ufrag\" string.\r\n     */\r\n    LOCAL_UFRAG_CHANGED : 'rtc.local_ufrag_changed',\r\n\r\n    /**\r\n     * Designates an event indicating that the local ICE username fragment of\r\n     * the jingle session has changed.\r\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\r\n     * is the source of the event.\r\n     * The second argument is the actual \"ufrag\" string.\r\n     */\r\n    REMOTE_UFRAG_CHANGED : 'rtc.remote_ufrag_changed'\r\n};\r\n\r\nexport const CREATE_ANSWER_FAILED = RTCEvents.CREATE_ANSWER_FAILED;\r\nexport const CREATE_OFFER_FAILED = RTCEvents.CREATE_OFFER_FAILED;\r\nexport const DATA_CHANNEL_OPEN = RTCEvents.DATA_CHANNEL_OPEN;\r\nexport const ENDPOINT_CONN_STATUS_CHANGED = RTCEvents.ENDPOINT_CONN_STATUS_CHANGED;\r\nexport const DOMINANT_SPEAKER_CHANGED = RTCEvents.DOMINANT_SPEAKER_CHANGED;\r\nexport const LASTN_ENDPOINT_CHANGED = RTCEvents.LASTN_ENDPOINT_CHANGED;\r\nexport const FORWARDED_SOURCES_CHANGED = RTCEvents.FORWARDED_SOURCES_CHANGED;\r\nexport const PERMISSIONS_CHANGED = RTCEvents.PERMISSIONS_CHANGED;\r\nexport const SENDER_VIDEO_CONSTRAINTS_CHANGED = RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED;\r\nexport const LASTN_VALUE_CHANGED = RTCEvents.LASTN_VALUE_CHANGED;\r\nexport const LOCAL_TRACK_SSRC_UPDATED = RTCEvents.LOCAL_TRACK_SSRC_UPDATED;\r\nexport const LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED;\r\nexport const TRACK_ATTACHED = RTCEvents.TRACK_ATTACHED;\r\nexport const REMOTE_TRACK_ADDED = RTCEvents.REMOTE_TRACK_ADDED;\r\nexport const REMOTE_TRACK_MUTE = RTCEvents.REMOTE_TRACK_MUTE;\r\nexport const REMOTE_TRACK_REMOVED = RTCEvents.REMOTE_TRACK_REMOVED;\r\nexport const REMOTE_TRACK_UNMUTE = RTCEvents.REMOTE_TRACK_UNMUTE;\r\nexport const SET_LOCAL_DESCRIPTION_FAILED = RTCEvents.SET_LOCAL_DESCRIPTION_FAILED;\r\nexport const SET_REMOTE_DESCRIPTION_FAILED = RTCEvents.SET_REMOTE_DESCRIPTION_FAILED;\r\nexport const AUDIO_OUTPUT_DEVICE_CHANGED = RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED;\r\nexport const DEVICE_LIST_CHANGED = RTCEvents.DEVICE_LIST_CHANGED;\r\nexport const DEVICE_LIST_WILL_CHANGE = RTCEvents.DEVICE_LIST_WILL_CHANGE;\r\nexport const DEVICE_LIST_AVAILABLE = RTCEvents.DEVICE_LIST_AVAILABLE;\r\nexport const ENDPOINT_MESSAGE_RECEIVED = RTCEvents.ENDPOINT_MESSAGE_RECEIVED;\r\nexport const ENDPOINT_STATS_RECEIVED = RTCEvents.ENDPOINT_STATS_RECEIVED;\r\nexport const LOCAL_UFRAG_CHANGED = RTCEvents.LOCAL_UFRAG_CHANGED;\r\nexport const REMOTE_UFRAG_CHANGED = RTCEvents.REMOTE_UFRAG_CHANGED;\r\n\r\n// TODO: this was a pre-ES6 module using module.exports = RTCEvents which doesn't translate well\r\n// it is used in a number of places and should be updated to use the named export\r\n\r\nexport default RTCEvents;","/**\r\n * This class exports constants and factory methods related to the analytics\r\n * API provided by AnalyticsAdapter. In order for entries in a database to be\r\n * somewhat easily traceable back to the code which produced them, events sent\r\n * through analytics should be defined here.\r\n *\r\n * Since the AnalyticsAdapter API can be used in different ways, for some events\r\n * it is more convenient to just define the event name as a constant. For other\r\n * events a factory function is easier.\r\n *\r\n * A general approach for adding a new event:\r\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\r\n * operational.\r\n * 2. Determine whether the event is related to other existing events, and\r\n * which fields are desired to be set: name, action, actionSubject, source.\r\n * 3. If the name is sufficient (the other fields are not important), use a\r\n * constant. Otherwise use a factory function.\r\n *\r\n * Note that the AnalyticsAdapter uses the events passed to its functions for\r\n * its own purposes, and might modify them. Because of this, factory functions\r\n * should create new objects.\r\n *\r\n */\r\n\r\n/**\r\n * The constant which identifies an event of type \"operational\".\r\n * @type {string}\r\n */\r\nexport const TYPE_OPERATIONAL = 'operational';\r\n\r\n/**\r\n * The constant which identifies an event of type \"page\".\r\n * @type {string}\r\n */\r\nexport const TYPE_PAGE = 'page';\r\n\r\n/**\r\n * The constant which identifies an event of type \"track\".\r\n * @type {string}\r\n */\r\nexport const TYPE_TRACK = 'track';\r\n\r\n/**\r\n * The constant which identifies an event of type \"ui\".\r\n * @type {string}\r\n */\r\nexport const TYPE_UI = 'ui';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that the Jingle session\r\n * was restarted (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_RESTART = 'restart';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-accept\r\n * timed out (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-initiate\r\n * was received.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-initiate\r\n * not arrived within a timeout (the value is specified in\r\n * the {@link JingleSessionPC}.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\r\n\r\n/**\r\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\r\n * the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a transport-replace\r\n * was received.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TR_RECEIVED\r\n    = 'transport-replace.received';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a transport-replace\r\n * succeeded (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TR_SUCCESS\r\n    = 'transport-replace.success';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\r\n * because the mandatory requirements were not met.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_DECLINED = 'decline';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that a connection was\r\n * established (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_ESTABLISHED = 'established';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that something failed.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_FAILED = 'failed';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that a switch to\r\n * jitsi-videobridge happened.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\r\n\r\n/**\r\n * The name of an event which indicates an available device. We send one such\r\n * event per available device once when the available devices are first known,\r\n * and every time that they change\r\n * @type {string}\r\n *\r\n * Properties:\r\n *      audio_input_device_count: the number of audio input devices available at\r\n *          the time the event was sent.\r\n *      audio_output_device_count: the number of audio output devices available\r\n *          at the time the event was sent.\r\n *      video_input_device_count: the number of video input devices available at\r\n *          the time the event was sent.\r\n *      video_output_device_count: the number of video output devices available\r\n *          at the time the event was sent.\r\n *      device_id: an identifier of the device described in this event.\r\n *      device_group_id:\r\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\r\n *          'videooutput'.\r\n *      device_label: a string which describes the device.\r\n */\r\nexport const AVAILABLE_DEVICE = 'available.device';\r\n\r\n/**\r\n * This appears to be fired only in certain cases when the XMPP connection\r\n * disconnects (and it was intentional?). It is currently never observed to\r\n * fire in production.\r\n *\r\n * TODO: document\r\n *\r\n * Properties:\r\n *      message: an error message\r\n */\r\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\r\n\r\n/**\r\n * Indicates that the user of the application provided feedback in terms of a\r\n * rating (an integer from 1 to 5) and an optional comment.\r\n * Properties:\r\n *      value: the user's rating (an integer from 1 to 5)\r\n *      comment: the user's comment\r\n */\r\nexport const FEEDBACK = 'feedback';\r\n\r\n/**\r\n * Indicates the duration of a particular phase of the ICE connectivity\r\n * establishment.\r\n *\r\n * Properties:\r\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\r\n *      value: the duration in milliseconds.\r\n *      p2p: whether the associated ICE connection is p2p or towards a\r\n *          jitsi-videobridge\r\n *      initiator: whether the local Jingle peer is the initiator or responder\r\n *          in the Jingle session. XXX we probably actually care about the ICE\r\n *          role (controlling vs controlled), and we assume that this correlates\r\n *          with the Jingle initiator.\r\n */\r\nexport const ICE_DURATION = 'ice.duration';\r\n\r\n/**\r\n * Indicates the difference in milliseconds between the ICE establishment time\r\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\r\n * P2P connection took 10ms more than JVB connection to establish).\r\n *\r\n * Properties:\r\n *      value: the difference in establishment durations in milliseconds.\r\n *\r\n */\r\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\r\n    = 'ice.establishment.duration.diff';\r\n\r\n/**\r\n * Indicates that the ICE state has changed.\r\n *\r\n * Properties:\r\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\r\n *          'completed', etc).\r\n *      value: the time in milliseconds (as reported by\r\n *          window.performance.now()) that the state change occurred.\r\n *      p2p: whether the associated ICE connection is p2p or towards a\r\n *          jitsi-videobridge\r\n *      signalingState: The signaling state of the associated PeerConnection\r\n *      reconnect: whether the associated Jingle session is in the process of\r\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\r\n */\r\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\r\n\r\n/**\r\n * Indicates that no bytes have been sent for the track.\r\n *\r\n * Properties:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n */\r\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\r\n\r\n/**\r\n * Indicates that a track was unmuted (?).\r\n *\r\n * Properties:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n *      trackType: the type of the track ('local' or 'remote').\r\n *      value: TODO: document\r\n */\r\nexport const TRACK_UNMUTED = 'track.unmuted';\r\n\r\n/**\r\n * Creates an operational event which indicates that we have received a\r\n * \"bridge down\" event from jicofo.\r\n */\r\nexport const createBridgeDownEvent = function() {\r\n    const bridgeDown = 'bridge.down';\r\n\r\n    return {\r\n        action: bridgeDown,\r\n        actionSubject: bridgeDown,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that the XMPP connection failed\r\n * @param errorType TODO\r\n * @param errorMessage TODO\r\n * @param detail connection failed details.\r\n */\r\nexport const createConnectionFailedEvent\r\n    = function(errorType, errorMessage, details) {\r\n        return {\r\n            type: TYPE_OPERATIONAL,\r\n            action: 'connection.failed',\r\n            attributes: {\r\n                'error_type': errorType,\r\n                'error_message': errorMessage,\r\n                ...details\r\n            }\r\n        };\r\n    };\r\n\r\n/**\r\n * Creates a conference event.\r\n *\r\n * @param {string} action - The action of the event.\r\n * @param {Object} attributes - The attributes to be added to the event.\r\n * @returns {{type: string, source: string, action: string, attributes: object}}\r\n */\r\nexport function createConferenceEvent(action, attributes) {\r\n    return {\r\n        action,\r\n        attributes,\r\n        source: 'conference',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an operational event which indicates that a particular connection\r\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\r\n * state).\r\n *\r\n * @param stage the stage which was reached\r\n * @param attributes additional attributes for the event. This should be an\r\n * object with a \"value\" property indicating a timestamp in milliseconds\r\n * relative to the beginning of the document's lifetime.\r\n *\r\n */\r\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\r\n    const action = 'connection.stage.reached';\r\n\r\n    return {\r\n        action,\r\n        actionSubject: stage,\r\n        attributes,\r\n        source: action,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an operational event for the end-to-end round trip time to a\r\n * specific remote participant.\r\n * @param participantId the ID of the remote participant.\r\n * @param region the region of the remote participant\r\n * @param rtt the rtt\r\n */\r\nexport const createE2eRttEvent = function(participantId, region, rtt) {\r\n    const attributes = {\r\n        'participant_id': participantId,\r\n        region,\r\n        rtt\r\n    };\r\n\r\n    return {\r\n        attributes,\r\n        name: 'e2e_rtt',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that the focus has left the MUC.\r\n */\r\nexport const createFocusLeftEvent = function() {\r\n    const action = 'focus.left';\r\n\r\n    return {\r\n        action,\r\n        actionSubject: action,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event related to a getUserMedia call.\r\n *\r\n * @param action the type of the result that the event represents: 'error',\r\n * 'success', 'warning', etc.\r\n * @param attributes the attributes to attach to the event.\r\n * @returns {{type: string, source: string, name: string}}\r\n */\r\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        source: 'get.user.media',\r\n        action,\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event related to remote participant connection status changes.\r\n *\r\n * @param attributes the attributes to attach to the event.\r\n * @returns {{type: string, source: string, name: string}}\r\n */\r\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\r\n    const action = 'duration';\r\n\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        source: 'peer.conn.status',\r\n        action,\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event for a Jingle-related event.\r\n * @param action the action of the event\r\n * @param attributes attributes to add to the event.\r\n */\r\nexport const createJingleEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action,\r\n        source: 'jingle',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that a local track was not able to read\r\n * data from its source (a camera or a microphone).\r\n *\r\n * @param mediaType {String} the media type of the local track ('audio' or\r\n * 'video').\r\n */\r\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\r\n    return {\r\n        attributes: {\r\n            'media_type': mediaType,\r\n            value\r\n        },\r\n        action: 'track.no.data.from.source',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event for a p2p-related event.\r\n * @param action the action of the event\r\n * @param attributes attributes to add to the event.\r\n */\r\nexport const createP2PEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action,\r\n        source: 'p2p',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Indicates that we received a remote command to mute.\r\n */\r\nexport const createRemotelyMutedEvent = function() {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'remotely.muted'\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains RTP statistics such as RTT and packet loss.\r\n *\r\n * All average RTP stats are currently reported under 1 event name, but with\r\n * different properties that allows to distinguish between a P2P call, a\r\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\r\n *\r\n * The structure of the event is:\r\n *\r\n * {\r\n *      p2p: true,\r\n *      conferenceSize: 2,\r\n *      localCandidateType: \"relay\",\r\n *      remoteCandidateType: \"relay\",\r\n *      transportType: \"udp\",\r\n *\r\n *      // Average RTT of 200ms\r\n *      \"rtt.avg\": 200,\r\n *      \"rtt.samples\": \"[100, 200, 300]\",\r\n *\r\n *      // Average packet loss of 10%\r\n *      \"packet.loss.avg\": 10,\r\n *      \"packet.loss.samples\": '[5, 10, 15]'\r\n *\r\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\r\n *      // The e2e RTT through jvb is 15ms shorter:\r\n *      \"rtt.diff\": 15,\r\n *\r\n *      // End-to-end RTT through JVB is ms.\r\n *      \"end2end.rtt.avg\" = 100\r\n * }\r\n *\r\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\r\n * and not JSON arrays, as events' attributes can not be nested. The samples are\r\n * currently included for debug purposes only and can be removed anytime soon\r\n * from the structure.\r\n *\r\n * Also note that not all of values are present in each event, as values are\r\n * obtained and calculated as part of different process/event pipe. For example\r\n * {@link ConnectionAvgStats} instances are doing the reports for each\r\n * {@link TraceablePeerConnection} and work independently from the main stats\r\n * pipe.\r\n */\r\nexport const createRtpStatsEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'rtp.stats',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains the round trip time (RTT) to a set of\r\n * regions.\r\n *\r\n * @param attributes\r\n * @returns {{type: string, action: string, attributes: *}}\r\n */\r\nexport const createRttByRegionEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'rtt.by.region',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains the local and remote ICE candidate types\r\n * for the transport that is currently selected.\r\n *\r\n * @param attributes\r\n * @returns {{type: string, action: string, attributes: *}}\r\n */\r\nexport const createTransportStatsEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'transport.stats',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\r\n * the local audio levels and the remote audio levels that triggered the event).\r\n *\r\n * @param {string} userID - The user id of the affected participant.\r\n * @param {*} localAudioLevels - The local audio levels.\r\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\r\n */\r\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'audio.output.problem',\r\n        attributes: {\r\n            userID,\r\n            localAudioLevels,\r\n            remoteAudioLevels\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an event which contains an information related to the bridge channel close event.\r\n *\r\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\r\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\r\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\r\n */\r\nexport const createBridgeChannelClosedEvent = function(code, reason) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'bridge-channel.error',\r\n        attributes: {\r\n            code,\r\n            reason\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates the Time To First Media (TTFM).\r\n * It is measured in milliseconds relative to the beginning of the document's\r\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\r\n * the following:\r\n * 1. The delay due to getUserMedia()\r\n * 2. The period between the MUC being joined and the reception of the Jingle\r\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\r\n * session until there are at least 2 participants in the room.\r\n *\r\n * @param attributes the attributes to add to the event. Currently used fields:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n *      muted: whether the track has ever been muted (?)\r\n *      value: the TTMF in milliseconds.\r\n */\r\nexport const createTtfmEvent = function(attributes) {\r\n    return createConnectionStageReachedEvent('ttfm', attributes);\r\n};\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nconst logger = getLogger(__filename);\r\n\r\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport browser from '../browser';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nconst SDPUtil = {\r\n    filterSpecialChars(text) {\r\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\r\n        // \"\", etc.) \"contain\" special chars.\r\n        // eslint-disable-next-line no-useless-escape\r\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\r\n    },\r\n    iceparams(mediadesc, sessiondesc) {\r\n        let data = null;\r\n        let pwd, ufrag;\r\n\r\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\r\n                && (pwd\r\n                    = SDPUtil.findLine(\r\n                        mediadesc,\r\n                        'a=ice-pwd:',\r\n                        sessiondesc))) {\r\n            data = {\r\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\r\n                pwd: SDPUtil.parseICEPwd(pwd)\r\n            };\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseICEUfrag(line) {\r\n        return line.substring(12);\r\n    },\r\n    buildICEUfrag(frag) {\r\n        return `a=ice-ufrag:${frag}`;\r\n    },\r\n    parseICEPwd(line) {\r\n        return line.substring(10);\r\n    },\r\n    buildICEPwd(pwd) {\r\n        return `a=ice-pwd:${pwd}`;\r\n    },\r\n    parseMID(line) {\r\n        return line.substring(6);\r\n    },\r\n    parseMLine(line) {\r\n        const data = {};\r\n        const parts = line.substring(2).split(' ');\r\n\r\n        data.media = parts.shift();\r\n        data.port = parts.shift();\r\n        data.proto = parts.shift();\r\n        if (parts[parts.length - 1] === '') { // trailing whitespace\r\n            parts.pop();\r\n        }\r\n        data.fmt = parts;\r\n\r\n        return data;\r\n    },\r\n    buildMLine(mline) {\r\n        return (\r\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\r\n                mline.fmt.join(' ')}`);\r\n    },\r\n    parseRTPMap(line) {\r\n        const data = {};\r\n        let parts = line.substring(9).split(' ');\r\n\r\n        data.id = parts.shift();\r\n        parts = parts[0].split('/');\r\n        data.name = parts.shift();\r\n        data.clockrate = parts.shift();\r\n        data.channels = parts.length ? parts.shift() : '1';\r\n\r\n        return data;\r\n    },\r\n\r\n    /**\r\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\r\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\r\n     * @returns [SCTP port number, protocol, streams]\r\n     */\r\n    parseSCTPMap(line) {\r\n        const parts = line.substring(10).split(' ');\r\n        const sctpPort = parts[0];\r\n        const protocol = parts[1];\r\n\r\n        // Stream count is optional\r\n        const streamCount = parts.length > 2 ? parts[2] : null;\r\n\r\n\r\n        return [ sctpPort, protocol, streamCount ];// SCTP port\r\n    },\r\n    buildRTPMap(el) {\r\n        let line\r\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\r\n                el.getAttribute('clockrate')}`;\r\n\r\n        if (el.getAttribute('channels')\r\n            && el.getAttribute('channels') !== '1') {\r\n            line += `/${el.getAttribute('channels')}`;\r\n        }\r\n\r\n        return line;\r\n    },\r\n    parseCrypto(line) {\r\n        const data = {};\r\n        const parts = line.substring(9).split(' ');\r\n\r\n        data.tag = parts.shift();\r\n        data['crypto-suite'] = parts.shift();\r\n        data['key-params'] = parts.shift();\r\n        if (parts.length) {\r\n            data['session-params'] = parts.join(' ');\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseFingerprint(line) { // RFC 4572\r\n        const data = {};\r\n        const parts = line.substring(14).split(' ');\r\n\r\n        data.hash = parts.shift();\r\n        data.fingerprint = parts.shift();\r\n\r\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\r\n        return data;\r\n    },\r\n    parseFmtp(line) {\r\n        const data = [];\r\n        let parts = line.split(' ');\r\n\r\n        parts.shift();\r\n        parts = parts.join(' ').split(';');\r\n        for (let i = 0; i < parts.length; i++) {\r\n            let key = parts[i].split('=')[0];\r\n\r\n            while (key.length && key[0] === ' ') {\r\n                key = key.substring(1);\r\n            }\r\n            const value = parts[i].split('=')[1];\r\n\r\n            if (key && value) {\r\n                data.push({ name: key,\r\n                    value });\r\n            } else if (key) {\r\n                // rfc 4733 (DTMF) style stuff\r\n                data.push({ name: '',\r\n                    value: key });\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseICECandidate(line) {\r\n        const candidate = {};\r\n        const elems = line.split(' ');\r\n\r\n        candidate.foundation = elems[0].substring(12);\r\n        candidate.component = elems[1];\r\n        candidate.protocol = elems[2].toLowerCase();\r\n        candidate.priority = elems[3];\r\n        candidate.ip = elems[4];\r\n        candidate.port = elems[5];\r\n\r\n        // elems[6] => \"typ\"\r\n        candidate.type = elems[7];\r\n        candidate.generation = 0; // default value, may be overwritten below\r\n        for (let i = 8; i < elems.length; i += 2) {\r\n            switch (elems[i]) {\r\n            case 'raddr':\r\n                candidate['rel-addr'] = elems[i + 1];\r\n                break;\r\n            case 'rport':\r\n                candidate['rel-port'] = elems[i + 1];\r\n                break;\r\n            case 'generation':\r\n                candidate.generation = elems[i + 1];\r\n                break;\r\n            case 'tcptype':\r\n                candidate.tcptype = elems[i + 1];\r\n                break;\r\n            default: // TODO\r\n                logger.log(\r\n                    `parseICECandidate not translating \"${\r\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\r\n            }\r\n        }\r\n        candidate.network = '1';\r\n\r\n        // not applicable to SDP -- FIXME: should be unique, not just random\r\n        // eslint-disable-next-line newline-per-chained-call\r\n        candidate.id = Math.random().toString(36).substr(2, 10);\r\n\r\n        return candidate;\r\n    },\r\n    buildICECandidate(cand) {\r\n        let line = [\r\n            `a=candidate:${cand.foundation}`,\r\n            cand.component,\r\n            cand.protocol,\r\n            cand.priority,\r\n            cand.ip,\r\n            cand.port,\r\n            'typ',\r\n            cand.type\r\n        ].join(' ');\r\n\r\n        line += ' ';\r\n        switch (cand.type) {\r\n        case 'srflx':\r\n        case 'prflx':\r\n        case 'relay':\r\n            if (cand.hasOwnAttribute('rel-addr')\r\n                    && cand.hasOwnAttribute('rel-port')) {\r\n                line += 'raddr';\r\n                line += ' ';\r\n                line += cand['rel-addr'];\r\n                line += ' ';\r\n                line += 'rport';\r\n                line += ' ';\r\n                line += cand['rel-port'];\r\n                line += ' ';\r\n            }\r\n            break;\r\n        }\r\n        if (cand.hasOwnAttribute('tcptype')) {\r\n            line += 'tcptype';\r\n            line += ' ';\r\n            line += cand.tcptype;\r\n            line += ' ';\r\n        }\r\n        line += 'generation';\r\n        line += ' ';\r\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\r\n\r\n        return line;\r\n    },\r\n    parseSSRC(desc) {\r\n        // proprietary mapping of a=ssrc lines\r\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\r\n        // on google docs and parse according to that\r\n        const data = new Map();\r\n        const lines = desc.split('\\r\\n');\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\r\n                // FIXME: Use regex to smartly find the ssrc.\r\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\r\n\r\n                if (!data.get(ssrc)) {\r\n                    data.set(ssrc, []);\r\n                }\r\n\r\n                data.get(ssrc).push(lines[i]);\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseRTCPFB(line) {\r\n        const parts = line.substr(10).split(' ');\r\n        const data = {};\r\n\r\n        data.pt = parts.shift();\r\n        data.type = parts.shift();\r\n        data.params = parts;\r\n\r\n        return data;\r\n    },\r\n    parseExtmap(line) {\r\n        const parts = line.substr(9).split(' ');\r\n        const data = {};\r\n\r\n        data.value = parts.shift();\r\n        if (data.value.indexOf('/') === -1) {\r\n            data.direction = 'both';\r\n        } else {\r\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\r\n            data.value = data.value.substr(0, data.value.indexOf('/'));\r\n        }\r\n        data.uri = parts.shift();\r\n        data.params = parts;\r\n\r\n        return data;\r\n    },\r\n    findLine(haystack, needle, sessionpart) {\r\n        let lines = haystack.split('\\r\\n');\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, needle.length) === needle) {\r\n                return lines[i];\r\n            }\r\n        }\r\n        if (!sessionpart) {\r\n            return false;\r\n        }\r\n\r\n        // search session part\r\n        lines = sessionpart.split('\\r\\n');\r\n        for (let j = 0; j < lines.length; j++) {\r\n            if (lines[j].substring(0, needle.length) === needle) {\r\n                return lines[j];\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n    findLines(haystack, needle, sessionpart) {\r\n        let lines = haystack.split('\\r\\n');\r\n        const needles = [];\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, needle.length) === needle) {\r\n                needles.push(lines[i]);\r\n            }\r\n        }\r\n        if (needles.length || !sessionpart) {\r\n            return needles;\r\n        }\r\n\r\n        // search session part\r\n        lines = sessionpart.split('\\r\\n');\r\n        for (let j = 0; j < lines.length; j++) {\r\n            if (lines[j].substring(0, needle.length) === needle) {\r\n                needles.push(lines[j]);\r\n            }\r\n        }\r\n\r\n        return needles;\r\n    },\r\n    candidateToJingle(line) {\r\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\r\n        // generation 0\r\n        //      <candidate component=... foundation=... generation=... id=...\r\n        // ip=... network=... port=... priority=... protocol=... type=.../>\r\n        if (line.indexOf('candidate:') === 0) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            line = `a=${line}`;\r\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\r\n            logger.log(\r\n                'parseCandidate called with a line that is not a candidate'\r\n                    + ' line');\r\n            logger.log(line);\r\n\r\n            return null;\r\n        }\r\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\r\n            // eslint-disable-next-line no-param-reassign\r\n            line = line.substring(0, line.length - 2);\r\n        }\r\n        const candidate = {};\r\n        const elems = line.split(' ');\r\n\r\n        if (elems[6] !== 'typ') {\r\n            logger.log('did not find typ in the right place');\r\n            logger.log(line);\r\n\r\n            return null;\r\n        }\r\n        candidate.foundation = elems[0].substring(12);\r\n        candidate.component = elems[1];\r\n        candidate.protocol = elems[2].toLowerCase();\r\n        candidate.priority = elems[3];\r\n        candidate.ip = elems[4];\r\n        candidate.port = elems[5];\r\n\r\n        // elems[6] => \"typ\"\r\n        candidate.type = elems[7];\r\n\r\n        candidate.generation = '0'; // default, may be overwritten below\r\n        for (let i = 8; i < elems.length; i += 2) {\r\n            switch (elems[i]) {\r\n            case 'raddr':\r\n                candidate['rel-addr'] = elems[i + 1];\r\n                break;\r\n            case 'rport':\r\n                candidate['rel-port'] = elems[i + 1];\r\n                break;\r\n            case 'generation':\r\n                candidate.generation = elems[i + 1];\r\n                break;\r\n            case 'tcptype':\r\n                candidate.tcptype = elems[i + 1];\r\n                break;\r\n            default: // TODO\r\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\r\n            }\r\n        }\r\n        candidate.network = '1';\r\n\r\n        // not applicable to SDP -- FIXME: should be unique, not just random\r\n        // eslint-disable-next-line newline-per-chained-call\r\n        candidate.id = Math.random().toString(36).substr(2, 10);\r\n\r\n        return candidate;\r\n    },\r\n    candidateFromJingle(cand) {\r\n        let line = 'a=candidate:';\r\n\r\n        line += cand.getAttribute('foundation');\r\n        line += ' ';\r\n        line += cand.getAttribute('component');\r\n        line += ' ';\r\n\r\n        let protocol = cand.getAttribute('protocol');\r\n\r\n        // use tcp candidates for FF\r\n\r\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\r\n            protocol = 'tcp';\r\n        }\r\n\r\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\r\n        line += ' ';\r\n        line += cand.getAttribute('priority');\r\n        line += ' ';\r\n        line += cand.getAttribute('ip');\r\n        line += ' ';\r\n        line += cand.getAttribute('port');\r\n        line += ' ';\r\n        line += 'typ';\r\n        line += ` ${cand.getAttribute('type')}`;\r\n        line += ' ';\r\n        switch (cand.getAttribute('type')) {\r\n        case 'srflx':\r\n        case 'prflx':\r\n        case 'relay':\r\n            if (cand.getAttribute('rel-addr')\r\n                    && cand.getAttribute('rel-port')) {\r\n                line += 'raddr';\r\n                line += ' ';\r\n                line += cand.getAttribute('rel-addr');\r\n                line += ' ';\r\n                line += 'rport';\r\n                line += ' ';\r\n                line += cand.getAttribute('rel-port');\r\n                line += ' ';\r\n            }\r\n            break;\r\n        }\r\n        if (protocol.toLowerCase() === 'tcp') {\r\n            line += 'tcptype';\r\n            line += ' ';\r\n            line += cand.getAttribute('tcptype');\r\n            line += ' ';\r\n        }\r\n        line += 'generation';\r\n        line += ' ';\r\n        line += cand.getAttribute('generation') || '0';\r\n\r\n        return `${line}\\r\\n`;\r\n    },\r\n\r\n    /**\r\n     * Parse the 'most' primary video ssrc from the given m line\r\n     * @param {object} mLine object as parsed from transform.parse\r\n     * @return {number} the primary video ssrc from the given m line\r\n     */\r\n    parsePrimaryVideoSsrc(videoMLine) {\r\n        const numSsrcs = videoMLine.ssrcs\r\n            .map(ssrcInfo => ssrcInfo.id)\r\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\r\n            .length;\r\n        const numGroups\r\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\r\n\r\n        if (numSsrcs > 1 && numGroups === 0) {\r\n            // Ambiguous, can't figure out the primary\r\n            return;\r\n        }\r\n        let primarySsrc = null;\r\n\r\n        if (numSsrcs === 1) {\r\n            primarySsrc = videoMLine.ssrcs[0].id;\r\n        } else if (numSsrcs === 2) {\r\n            // Can figure it out if there's an FID group\r\n            const fidGroup\r\n                = videoMLine.ssrcGroups.find(\r\n                    group => group.semantics === 'FID');\r\n\r\n            if (fidGroup) {\r\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\r\n            }\r\n        } else if (numSsrcs >= 3) {\r\n            // Can figure it out if there's a sim group\r\n            const simGroup\r\n                = videoMLine.ssrcGroups.find(\r\n                    group => group.semantics === 'SIM');\r\n\r\n            if (simGroup) {\r\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\r\n            }\r\n        }\r\n\r\n        return primarySsrc;\r\n    },\r\n\r\n    /**\r\n     * Generate an ssrc\r\n     * @returns {number} an ssrc\r\n     */\r\n    generateSsrc() {\r\n        return RandomUtil.randomInt(1, 0xffffffff);\r\n    },\r\n\r\n    /**\r\n     * Get an attribute for the given ssrc with the given attributeName\r\n     *  from the given mline\r\n     * @param {object} mLine an mLine object as parsed from transform.parse\r\n     * @param {number} ssrc the ssrc for which an attribute is desired\r\n     * @param {string} attributeName the name of the desired attribute\r\n     * @returns {string} the value corresponding to the given ssrc\r\n     *  and attributeName\r\n     */\r\n    getSsrcAttribute(mLine, ssrc, attributeName) {\r\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\r\n            const ssrcLine = mLine.ssrcs[i];\r\n\r\n            if (ssrcLine.id === ssrc\r\n                && ssrcLine.attribute === attributeName) {\r\n                return ssrcLine.value;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Parses the ssrcs from the group sdp line and\r\n     *  returns them as a list of numbers\r\n     * @param {object} the ssrcGroup object as parsed from\r\n     *  sdp-transform\r\n     * @returns {list<number>} a list of the ssrcs in the group\r\n     *  parsed as numbers\r\n     */\r\n    parseGroupSsrcs(ssrcGroup) {\r\n        return ssrcGroup\r\n            .ssrcs\r\n            .split(' ')\r\n            .map(ssrcStr => parseInt(ssrcStr, 10));\r\n    },\r\n\r\n    /**\r\n     * Get the mline of the given type from the given sdp\r\n     * @param {object} sdp sdp as parsed from transform.parse\r\n     * @param {string} type the type of the desired mline (e.g. \"video\")\r\n     * @returns {object} a media object\r\n     */\r\n    getMedia(sdp, type) {\r\n        return sdp.media.find(m => m.type === type);\r\n    },\r\n\r\n    /**\r\n     * Extracts the ICE username fragment from an SDP string.\r\n     * @param {string} sdp the SDP in raw text format\r\n     */\r\n    getUfrag(sdp) {\r\n        const ufragLines\r\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\r\n\r\n        if (ufragLines.length > 0) {\r\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the given codecName as the preferred codec by moving it to the beginning\r\n     * of the payload types list (modifies the given mline in place). All instances\r\n     * of the codec are moved up.\r\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\r\n     * @param {string} codecName the name of the preferred codec\r\n     */\r\n    preferCodec(mline, codecName) {\r\n        if (!mline || !codecName) {\r\n            return;\r\n        }\r\n\r\n        const matchingPayloadTypes = mline.rtp\r\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\r\n            .map(rtp => rtp.payload);\r\n\r\n        if (matchingPayloadTypes) {\r\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\r\n            // payloads as a number, instead of a string, when there is only one payload.\r\n            const payloadTypes\r\n                = mline.payloads\r\n                .toString()\r\n                .split(' ')\r\n                .map(p => parseInt(p, 10));\r\n\r\n            for (const pt of matchingPayloadTypes.reverse()) {\r\n                const payloadIndex = payloadTypes.indexOf(pt);\r\n\r\n                payloadTypes.splice(payloadIndex, 1);\r\n                payloadTypes.unshift(pt);\r\n            }\r\n            mline.payloads = payloadTypes.join(' ');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Strips the given codec from the given mline. All related RTX payload\r\n     * types are also stripped. If the resulting mline would have no codecs,\r\n     * it's disabled.\r\n     *\r\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\r\n     * @param {string} codecName the name of the codec which will be stripped.\r\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\r\n     * stripped from the sdp when the passed codecName is H264.\r\n     */\r\n    stripCodec(mLine, codecName, highProfile = false) {\r\n        if (!mLine || !codecName) {\r\n            return;\r\n        }\r\n\r\n        const h264Pts = [];\r\n        let removePts = [];\r\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\r\n\r\n        for (const rtp of mLine.rtp) {\r\n            if (rtp.codec\r\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\r\n                if (stripH264HighCodec) {\r\n                    h264Pts.push(rtp.payload);\r\n                } else {\r\n                    removePts.push(rtp.payload);\r\n                }\r\n            }\r\n        }\r\n\r\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\r\n        if (stripH264HighCodec) {\r\n            removePts = mLine.fmtp\r\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\r\n                .map(item => item.payload);\r\n        }\r\n\r\n        if (removePts.length > 0) {\r\n            // We also need to remove the payload types that are related to RTX\r\n            // for the codecs we want to disable.\r\n            const rtxApts = removePts.map(item => `apt=${item}`);\r\n            const rtxPts = mLine.fmtp.filter(\r\n                item => rtxApts.indexOf(item.config) !== -1);\r\n\r\n            removePts.push(...rtxPts.map(item => item.payload));\r\n\r\n            // Call toString() on payloads to get around an issue within\r\n            // SDPTransform that sets payloads as a number, instead of a string,\r\n            // when there is only one payload.\r\n            const allPts = mLine.payloads\r\n                .toString()\r\n                .split(' ')\r\n                .map(Number);\r\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\r\n\r\n            if (keepPts.length === 0) {\r\n                // There are no other codecs, disable the stream.\r\n                mLine.port = 0;\r\n                mLine.direction = 'inactive';\r\n                mLine.payloads = '*';\r\n            } else {\r\n                mLine.payloads = keepPts.join(' ');\r\n            }\r\n\r\n            mLine.rtp = mLine.rtp.filter(\r\n                item => keepPts.indexOf(item.payload) !== -1);\r\n            mLine.fmtp = mLine.fmtp.filter(\r\n                item => keepPts.indexOf(item.payload) !== -1);\r\n            if (mLine.rtcpFb) {\r\n                mLine.rtcpFb = mLine.rtcpFb.filter(\r\n                    item => keepPts.indexOf(item.payload) !== -1);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default SDPUtil;\r\n","/* global\r\n          __filename,\r\n          MediaStreamTrack,\r\n          RTCIceCandidate: true,\r\n          RTCPeerConnection,\r\n          RTCSessionDescription: true\r\n*/\r\n\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport clonedeep from 'lodash.clonedeep';\r\n\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport Resolutions from '../../service/RTC/Resolutions';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport SDPUtil from '../xmpp/SDPUtil';\r\n\r\nimport screenObtainer from './ScreenObtainer';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Require adapter only for certain browsers. This is being done for\r\n// react-native, which has its own shims, and while browsers are being migrated\r\n// over to use adapter's shims.\r\nif (browser.usesAdapter()) {\r\n    require('webrtc-adapter');\r\n}\r\n\r\nconst eventEmitter = new EventEmitter();\r\n\r\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\r\n\r\n/**\r\n * Default resolution to obtain for video tracks if no resolution is specified.\r\n * This default is used for old gum flow only, as new gum flow uses\r\n * {@link DEFAULT_CONSTRAINTS}.\r\n */\r\nconst OLD_GUM_DEFAULT_RESOLUTION = 720;\r\n\r\n/**\r\n * Default devices to obtain when no specific devices are specified. This\r\n * default is used for old gum flow only.\r\n */\r\nconst OLD_GUM_DEFAULT_DEVICES = [ 'audio', 'video' ];\r\n\r\n/**\r\n * Default MediaStreamConstraints to use for calls to getUserMedia.\r\n *\r\n * @private\r\n */\r\nconst DEFAULT_CONSTRAINTS = {\r\n    video: {\r\n        height: {\r\n            ideal: 720,\r\n            max: 720,\r\n            min: 240\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * The default frame rate for Screen Sharing.\r\n */\r\nconst SS_DEFAULT_FRAME_RATE = 5;\r\n\r\n// Currently audio output device change is supported only in Chrome and\r\n// default output always has 'default' device ID\r\nlet audioOutputDeviceId = 'default'; // default device\r\n// whether user has explicitly set a device to use\r\nlet audioOutputChanged = false;\r\n\r\n// Disables all audio processing\r\nlet disableAP = false;\r\n\r\n// Disables Acoustic Echo Cancellation\r\nlet disableAEC = false;\r\n\r\n// Disables Noise Suppression\r\nlet disableNS = false;\r\n\r\n// Disables Automatic Gain Control\r\nlet disableAGC = false;\r\n\r\n// Disables Highpass Filter\r\nlet disableHPF = false;\r\n\r\nconst featureDetectionAudioEl = document.createElement('audio');\r\nconst isAudioOutputDeviceChangeAvailable\r\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\r\n\r\nlet availableDevices;\r\nlet availableDevicesPollTimer;\r\n\r\n/**\r\n * An empty function.\r\n */\r\nfunction emptyFuncton() {\r\n    // no-op\r\n}\r\n\r\n/**\r\n * Initialize wrapper function for enumerating devices.\r\n * TODO: remove this, it should no longer be needed.\r\n *\r\n * @returns {?Function}\r\n */\r\nfunction initEnumerateDevicesWithCallback() {\r\n    if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\r\n        return callback => {\r\n            navigator.mediaDevices.enumerateDevices()\r\n                .then(devices => {\r\n                    updateKnownDevices(devices);\r\n                    callback(devices);\r\n                }, () => {\r\n                    updateKnownDevices([]);\r\n                    callback([]);\r\n                });\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * @param constraints\r\n * @param isNewStyleConstraintsSupported\r\n * @param resolution\r\n */\r\nfunction setResolutionConstraints(\r\n        constraints,\r\n        isNewStyleConstraintsSupported,\r\n        resolution) {\r\n    if (Resolutions[resolution]) {\r\n        if (isNewStyleConstraintsSupported) {\r\n            constraints.video.width = {\r\n                ideal: Resolutions[resolution].width\r\n            };\r\n            constraints.video.height = {\r\n                ideal: Resolutions[resolution].height\r\n            };\r\n        }\r\n\r\n        constraints.video.mandatory.minWidth = Resolutions[resolution].width;\r\n        constraints.video.mandatory.minHeight = Resolutions[resolution].height;\r\n    }\r\n\r\n    if (constraints.video.mandatory.minWidth) {\r\n        constraints.video.mandatory.maxWidth\r\n            = constraints.video.mandatory.minWidth;\r\n    }\r\n\r\n    if (constraints.video.mandatory.minHeight) {\r\n        constraints.video.mandatory.maxHeight\r\n            = constraints.video.mandatory.minHeight;\r\n    }\r\n}\r\n\r\n/**\r\n * @param {string[]} um required user media types\r\n *\r\n * @param {Object} [options={}] optional parameters\r\n * @param {string} options.resolution\r\n * @param {number} options.bandwidth\r\n * @param {number} options.fps\r\n * @param {string} options.desktopStream\r\n * @param {string} options.cameraDeviceId\r\n * @param {string} options.micDeviceId\r\n * @param {CameraFacingMode} options.facingMode\r\n * @param {bool} firefox_fake_device\r\n * @param {Object} options.frameRate - used only for dekstop sharing.\r\n * @param {Object} options.frameRate.min - Minimum fps\r\n * @param {Object} options.frameRate.max - Maximum fps\r\n * @param {bool}   options.screenShareAudio - Used by electron clients to\r\n * enable system audio screen sharing.\r\n */\r\nfunction getConstraints(um, options = {}) {\r\n    const constraints = {\r\n        audio: false,\r\n        video: false\r\n    };\r\n\r\n    // Don't mix new and old style settings for Chromium as this leads\r\n    // to TypeError in new Chromium versions. @see\r\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=614716\r\n    // This is a temporary solution, in future we will fully split old and\r\n    // new style constraints when new versions of Chromium and Firefox will\r\n    // have stable support of new constraints format. For more information\r\n    // @see https://github.com/jitsi/lib-jitsi-meet/pull/136\r\n    const isNewStyleConstraintsSupported\r\n        = browser.isFirefox()\r\n            || browser.isSafari()\r\n            || browser.isReactNative();\r\n\r\n    if (um.indexOf('video') >= 0) {\r\n        // same behaviour as true\r\n        constraints.video = { mandatory: {},\r\n            optional: [] };\r\n\r\n        if (options.cameraDeviceId) {\r\n            if (isNewStyleConstraintsSupported) {\r\n                // New style of setting device id.\r\n                constraints.video.deviceId = options.cameraDeviceId;\r\n            }\r\n\r\n            // Old style.\r\n            constraints.video.mandatory.sourceId = options.cameraDeviceId;\r\n        } else {\r\n            // Prefer the front i.e. user-facing camera (to the back i.e.\r\n            // environment-facing camera, for example).\r\n            // TODO: Maybe use \"exact\" syntax if options.facingMode is defined,\r\n            // but this probably needs to be decided when updating other\r\n            // constraints, as we currently don't use \"exact\" syntax anywhere.\r\n            const facingMode = options.facingMode || CameraFacingMode.USER;\r\n\r\n            if (isNewStyleConstraintsSupported) {\r\n                constraints.video.facingMode = facingMode;\r\n            }\r\n            constraints.video.optional.push({\r\n                facingMode\r\n            });\r\n        }\r\n\r\n        if (options.minFps || options.maxFps || options.fps) {\r\n            // for some cameras it might be necessary to request 30fps\r\n            // so they choose 30fps mjpg over 10fps yuy2\r\n            if (options.minFps || options.fps) {\r\n                // Fall back to options.fps for backwards compatibility\r\n                options.minFps = options.minFps || options.fps;\r\n                constraints.video.mandatory.minFrameRate = options.minFps;\r\n            }\r\n            if (options.maxFps) {\r\n                constraints.video.mandatory.maxFrameRate = options.maxFps;\r\n            }\r\n        }\r\n\r\n        setResolutionConstraints(\r\n            constraints, isNewStyleConstraintsSupported, options.resolution);\r\n    }\r\n    if (um.indexOf('audio') >= 0) {\r\n        if (browser.isReactNative()) {\r\n            // The react-native-webrtc project that we're currently using\r\n            // expects the audio constraint to be a boolean.\r\n            constraints.audio = true;\r\n        } else if (browser.isFirefox()) {\r\n            if (options.micDeviceId) {\r\n                constraints.audio = {\r\n                    mandatory: {},\r\n                    deviceId: options.micDeviceId, // new style\r\n                    optional: [ {\r\n                        sourceId: options.micDeviceId // old style\r\n                    } ] };\r\n            } else {\r\n                constraints.audio = true;\r\n            }\r\n        } else {\r\n            // same behaviour as true\r\n            constraints.audio = { mandatory: {},\r\n                optional: [] };\r\n            if (options.micDeviceId) {\r\n                if (isNewStyleConstraintsSupported) {\r\n                    // New style of setting device id.\r\n                    constraints.audio.deviceId = options.micDeviceId;\r\n                }\r\n\r\n                // Old style.\r\n                constraints.audio.optional.push({\r\n                    sourceId: options.micDeviceId\r\n                });\r\n            }\r\n\r\n            // if it is good enough for hangouts...\r\n            constraints.audio.optional.push(\r\n                { echoCancellation: !disableAEC && !disableAP },\r\n                { googEchoCancellation: !disableAEC && !disableAP },\r\n                { googAutoGainControl: !disableAGC && !disableAP },\r\n                { googNoiseSuppression: !disableNS && !disableAP },\r\n                { googHighpassFilter: !disableHPF && !disableAP },\r\n                { googNoiseSuppression2: !disableNS && !disableAP },\r\n                { googEchoCancellation2: !disableAEC && !disableAP },\r\n                { googAutoGainControl2: !disableAGC && !disableAP }\r\n            );\r\n        }\r\n    }\r\n    if (um.indexOf('screen') >= 0) {\r\n        if (browser.isChrome()) {\r\n            constraints.video = {\r\n                mandatory: getSSConstraints({\r\n                    ...options,\r\n                    source: 'screen'\r\n                }),\r\n                optional: []\r\n            };\r\n\r\n        } else if (browser.isFirefox()) {\r\n            constraints.video = {\r\n                mozMediaSource: 'window',\r\n                mediaSource: 'window',\r\n                frameRate: options.frameRate || {\r\n                    min: SS_DEFAULT_FRAME_RATE,\r\n                    max: SS_DEFAULT_FRAME_RATE\r\n                }\r\n            };\r\n\r\n        } else {\r\n            const errmsg\r\n                = '\\'screen\\' WebRTC media source is supported only in Chrome'\r\n                    + ' and Firefox';\r\n\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n            logger.error(errmsg);\r\n        }\r\n    }\r\n    if (um.indexOf('desktop') >= 0) {\r\n        constraints.video = {\r\n            mandatory: getSSConstraints({\r\n                ...options,\r\n                source: 'desktop'\r\n            }),\r\n            optional: []\r\n        };\r\n\r\n        // Audio screen sharing for electron only works for screen type devices.\r\n        // i.e. when the user shares the whole desktop.\r\n        if (browser.isElectron() && options.screenShareAudio\r\n            && (options.desktopStream.indexOf('screen') >= 0)) {\r\n\r\n            // Provide constraints as described by the electron desktop capturer\r\n            // documentation here:\r\n            // https://www.electronjs.org/docs/api/desktop-capturer\r\n            // Note. The documentation specifies that chromeMediaSourceId should not be present\r\n            // which, in the case a users has multiple monitors, leads to them being shared all\r\n            // at once. However we tested with chromeMediaSourceId present and it seems to be\r\n            // working properly and also takes care of the previously mentioned issue.\r\n            constraints.audio = { mandatory: {\r\n                chromeMediaSource: constraints.video.mandatory.chromeMediaSource\r\n            } };\r\n        }\r\n    }\r\n\r\n    if (options.bandwidth) {\r\n        if (!constraints.video) {\r\n            // same behaviour as true\r\n            constraints.video = { mandatory: {},\r\n                optional: [] };\r\n        }\r\n        constraints.video.optional.push({ bandwidth: options.bandwidth });\r\n    }\r\n\r\n    // we turn audio for both audio and video tracks, the fake audio & video\r\n    // seems to work only when enabled in one getUserMedia call, we cannot get\r\n    // fake audio separate by fake video this later can be a problem with some\r\n    // of the tests\r\n    if (browser.isFirefox() && options.firefox_fake_device) {\r\n        // seems to be fixed now, removing this experimental fix, as having\r\n        // multiple audio tracks brake the tests\r\n        // constraints.audio = true;\r\n        constraints.fake = true;\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Creates a constraints object to be passed into a call to getUserMedia.\r\n *\r\n * @param {Array} um - An array of user media types to get. The accepted\r\n * types are \"video\", \"audio\", and \"desktop.\"\r\n * @param {Object} options - Various values to be added to the constraints.\r\n * @param {string} options.cameraDeviceId - The device id for the video\r\n * capture device to get video from.\r\n * @param {Object} options.constraints - Default constraints object to use\r\n * as a base for the returned constraints.\r\n * @param {Object} options.desktopStream - The desktop source id from which\r\n * to capture a desktop sharing video.\r\n * @param {string} options.facingMode - Which direction the camera is\r\n * pointing to.\r\n * @param {string} options.micDeviceId - The device id for the audio capture\r\n * device to get audio from.\r\n * @param {Object} options.frameRate - used only for dekstop sharing.\r\n * @param {Object} options.frameRate.min - Minimum fps\r\n * @param {Object} options.frameRate.max - Maximum fps\r\n * @private\r\n * @returns {Object}\r\n */\r\nfunction newGetConstraints(um = [], options = {}) {\r\n    // Create a deep copy of the constraints to avoid any modification of\r\n    // the passed in constraints object.\r\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\r\n\r\n    if (um.indexOf('video') >= 0) {\r\n        if (!constraints.video) {\r\n            constraints.video = {};\r\n        }\r\n\r\n        // Override the constraints on Safari because of the following webkit bug.\r\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\r\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\r\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\r\n        if (browser.isSafari()) {\r\n            if (constraints.video.height && constraints.video.height.ideal) {\r\n                constraints.video.height = { ideal: clonedeep(constraints.video.height.ideal) };\r\n            } else {\r\n                logger.warn('Ideal camera height missing, camera may not start properly');\r\n            }\r\n            if (constraints.video.width && constraints.video.width.ideal) {\r\n                constraints.video.width = { ideal: clonedeep(constraints.video.width.ideal) };\r\n            } else {\r\n                logger.warn('Ideal camera width missing, camera may not start properly');\r\n            }\r\n        }\r\n        if (options.cameraDeviceId) {\r\n            constraints.video.deviceId = options.cameraDeviceId;\r\n        } else {\r\n            const facingMode = options.facingMode || CameraFacingMode.USER;\r\n\r\n            constraints.video.facingMode = facingMode;\r\n        }\r\n    } else {\r\n        constraints.video = false;\r\n    }\r\n\r\n    if (um.indexOf('audio') >= 0) {\r\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\r\n            constraints.audio = {};\r\n        }\r\n\r\n        // Use the standard audio constraints on non-chromium browsers.\r\n        if (browser.isFirefox() || browser.isSafari()) {\r\n            constraints.audio = {\r\n                deviceId: options.micDeviceId,\r\n                autoGainControl: !disableAGC && !disableAP,\r\n                echoCancellation: !disableAEC && !disableAP,\r\n                noiseSuppression: !disableNS && !disableAP\r\n            };\r\n        } else {\r\n            // NOTE(brian): the new-style ('advanced' instead of 'optional')\r\n            // doesn't seem to carry through the googXXX constraints\r\n            // Changing back to 'optional' here (even with video using\r\n            // the 'advanced' style) allows them to be passed through\r\n            // but also requires the device id to capture to be set in optional\r\n            // as sourceId otherwise the constraints are considered malformed.\r\n            if (!constraints.audio.optional) {\r\n                constraints.audio.optional = [];\r\n            }\r\n            constraints.audio.optional.push(\r\n                { sourceId: options.micDeviceId },\r\n                { echoCancellation: !disableAEC && !disableAP },\r\n                { googEchoCancellation: !disableAEC && !disableAP },\r\n                { googAutoGainControl: !disableAGC && !disableAP },\r\n                { googNoiseSuppression: !disableNS && !disableAP },\r\n                { googHighpassFilter: !disableHPF && !disableAP },\r\n                { googNoiseSuppression2: !disableNS && !disableAP },\r\n                { googEchoCancellation2: !disableAEC && !disableAP },\r\n                { googAutoGainControl2: !disableAGC && !disableAP }\r\n            );\r\n        }\r\n    } else {\r\n        constraints.audio = false;\r\n    }\r\n\r\n    if (um.indexOf('desktop') >= 0) {\r\n        if (!constraints.video || typeof constraints.video === 'boolean') {\r\n            constraints.video = {};\r\n        }\r\n\r\n        constraints.video = {\r\n            mandatory: getSSConstraints({\r\n                ...options,\r\n                source: 'desktop'\r\n            })\r\n        };\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Generates GUM constraints for screen sharing.\r\n *\r\n * @param {Object} options - The options passed to\r\n * <tt>obtainAudioAndVideoPermissions</tt>.\r\n * @returns {Object} - GUM constraints.\r\n *\r\n * TODO: Currently only the new GUM flow and Chrome is using the method. We\r\n * should make it work for all use cases.\r\n */\r\nfunction getSSConstraints(options = {}) {\r\n    const {\r\n        desktopStream,\r\n        frameRate = {\r\n            min: SS_DEFAULT_FRAME_RATE,\r\n            max: SS_DEFAULT_FRAME_RATE\r\n        }\r\n    } = options;\r\n    const { max, min } = frameRate;\r\n\r\n    const constraints = {\r\n        chromeMediaSource: options.source,\r\n        maxWidth: window.screen.width,\r\n        maxHeight: window.screen.height\r\n    };\r\n\r\n    if (typeof min === 'number') {\r\n        constraints.minFrameRate = min;\r\n    }\r\n\r\n    if (typeof max === 'number') {\r\n        constraints.maxFrameRate = max;\r\n    }\r\n\r\n    if (typeof desktopStream !== 'undefined') {\r\n        constraints.chromeMediaSourceId = desktopStream;\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Generates constraints for screen sharing when using getDisplayMedia.\r\n * The constraints(MediaTrackConstraints) are applied to the resulting track.\r\n *\r\n * @returns {Object} - MediaTrackConstraints constraints.\r\n */\r\nfunction getTrackSSConstraints(options = {}) {\r\n    // we used to set height and width in the constraints, but this can lead\r\n    // to inconsistencies if the browser is on a lower resolution screen\r\n    // and we share a screen with bigger resolution, so they are now not set\r\n    const constraints = {\r\n        frameRate: SS_DEFAULT_FRAME_RATE\r\n    };\r\n    const { desktopSharingFrameRate } = options;\r\n\r\n    if (desktopSharingFrameRate && desktopSharingFrameRate.max) {\r\n        constraints.frameRate = desktopSharingFrameRate.max;\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Updates the granted permissions based on the options we requested and the\r\n * streams we received.\r\n * @param um the options we requested to getUserMedia.\r\n * @param stream the stream we received from calling getUserMedia.\r\n */\r\nfunction updateGrantedPermissions(um, stream) {\r\n    const audioTracksReceived\r\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\r\n    const videoTracksReceived\r\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\r\n    const grantedPermissions = {};\r\n\r\n    if (um.indexOf('video') !== -1) {\r\n        grantedPermissions.video = videoTracksReceived;\r\n    }\r\n    if (um.indexOf('audio') !== -1) {\r\n        grantedPermissions.audio = audioTracksReceived;\r\n    }\r\n\r\n    eventEmitter.emit(RTCEvents.GRANTED_PERMISSIONS, grantedPermissions);\r\n}\r\n\r\n/**\r\n * Checks if new list of available media devices differs from previous one.\r\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\r\n * @returns {boolean} - true if list is different, false otherwise.\r\n */\r\nfunction compareAvailableMediaDevices(newDevices) {\r\n    if (newDevices.length !== availableDevices.length) {\r\n        return true;\r\n    }\r\n\r\n    /* eslint-disable newline-per-chained-call */\r\n\r\n    return (\r\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\r\n            !== availableDevices\r\n                .map(mediaDeviceInfoToJSON).sort().join(''));\r\n\r\n    /* eslint-enable newline-per-chained-call */\r\n\r\n    /**\r\n     *\r\n     * @param info\r\n     */\r\n    function mediaDeviceInfoToJSON(info) {\r\n        return JSON.stringify({\r\n            kind: info.kind,\r\n            deviceId: info.deviceId,\r\n            groupId: info.groupId,\r\n            label: info.label,\r\n            facing: info.facing\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Sends analytics event with the passed device list.\r\n *\r\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\r\n * available devices.\r\n * @returns {void}\r\n */\r\nfunction sendDeviceListToAnalytics(deviceList) {\r\n    const audioInputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'audioinput').length;\r\n    const audioOutputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\r\n    const videoInputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'videoinput').length;\r\n    const videoOutputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'videooutput').length;\r\n\r\n    deviceList.forEach(device => {\r\n        const attributes = {\r\n            'audio_input_device_count': audioInputDeviceCount,\r\n            'audio_output_device_count': audioOutputDeviceCount,\r\n            'video_input_device_count': videoInputDeviceCount,\r\n            'video_output_device_count': videoOutputDeviceCount,\r\n            'device_id': device.deviceId,\r\n            'device_group_id': device.groupId,\r\n            'device_kind': device.kind,\r\n            'device_label': device.label\r\n        };\r\n\r\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Update known devices.\r\n *\r\n * @param {Array<Object>} pds - The new devices.\r\n * @returns {void}\r\n *\r\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\r\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\r\n * a row, which can cause async post devicechange processing to collide.\r\n */\r\nfunction updateKnownDevices(pds) {\r\n    if (compareAvailableMediaDevices(pds)) {\r\n        onMediaDevicesListChanged(pds);\r\n    }\r\n}\r\n\r\n/**\r\n * Event handler for the 'devicechange' event.\r\n *\r\n * @param {MediaDeviceInfo[]} devices - list of media devices.\r\n * @emits RTCEvents.DEVICE_LIST_CHANGED\r\n */\r\nfunction onMediaDevicesListChanged(devicesReceived) {\r\n    availableDevices = devicesReceived.slice(0);\r\n    logger.info(\r\n        'list of media devices has changed:',\r\n        availableDevices);\r\n\r\n    sendDeviceListToAnalytics(availableDevices);\r\n\r\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\r\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, devicesReceived);\r\n\r\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, devicesReceived);\r\n}\r\n\r\n/**\r\n * Handles the newly created Media Streams.\r\n * @param streams the new Media Streams\r\n * @param resolution the resolution of the video streams\r\n * @returns {*[]} object that describes the new streams\r\n */\r\nfunction handleLocalStream(streams, resolution) {\r\n    let audioStream, desktopStream, videoStream;\r\n    const res = [];\r\n\r\n    // XXX The function obtainAudioAndVideoPermissions has examined the type of\r\n    // the browser, its capabilities, etc. and has taken the decision whether to\r\n    // invoke getUserMedia per device (e.g. Firefox) or once for both audio and\r\n    // video (e.g. Chrome). In order to not duplicate the logic here, examine\r\n    // the specified streams and figure out what we've received based on\r\n    // obtainAudioAndVideoPermissions' decision.\r\n    if (streams) {\r\n        // As mentioned above, certian types of browser (e.g. Chrome) support\r\n        // (with a result which meets our requirements expressed bellow) calling\r\n        // getUserMedia once for both audio and video.\r\n        const audioVideo = streams.audioVideo;\r\n\r\n        if (audioVideo) {\r\n            const audioTracks = audioVideo.getAudioTracks();\r\n\r\n            if (audioTracks.length) {\r\n                audioStream = new MediaStream();\r\n                for (let i = 0; i < audioTracks.length; i++) {\r\n                    audioStream.addTrack(audioTracks[i]);\r\n                }\r\n            }\r\n\r\n            const videoTracks = audioVideo.getVideoTracks();\r\n\r\n            if (videoTracks.length) {\r\n                videoStream = new MediaStream();\r\n                for (let j = 0; j < videoTracks.length; j++) {\r\n                    videoStream.addTrack(videoTracks[j]);\r\n                }\r\n            }\r\n        } else {\r\n            // On other types of browser (e.g. Firefox) we choose (namely,\r\n            // obtainAudioAndVideoPermissions) to call getUserMedia per device\r\n            // (type).\r\n            audioStream = streams.audio;\r\n            videoStream = streams.video;\r\n        }\r\n\r\n        desktopStream = streams.desktop;\r\n    }\r\n\r\n    if (desktopStream) {\r\n        const { stream, sourceId, sourceType } = desktopStream;\r\n\r\n        res.push({\r\n            stream,\r\n            sourceId,\r\n            sourceType,\r\n            track: stream.getVideoTracks()[0],\r\n            mediaType: MediaType.VIDEO,\r\n            videoType: VideoType.DESKTOP\r\n        });\r\n    }\r\n    if (audioStream) {\r\n        res.push({\r\n            stream: audioStream,\r\n            track: audioStream.getAudioTracks()[0],\r\n            mediaType: MediaType.AUDIO,\r\n            videoType: null\r\n        });\r\n    }\r\n    if (videoStream) {\r\n        res.push({\r\n            stream: videoStream,\r\n            track: videoStream.getVideoTracks()[0],\r\n            mediaType: MediaType.VIDEO,\r\n            videoType: VideoType.CAMERA,\r\n            resolution\r\n        });\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n/**\r\n * Represents a default implementation of setting a <tt>MediaStream</tt> as the\r\n * source of a video element that tries to be browser-agnostic through feature\r\n * checking. Note though that it was not completely clear from the predating\r\n * browser-specific implementations what &quot;videoSrc&quot; was because one\r\n * implementation of {@link RTCUtils#getVideoSrc} would return\r\n * <tt>MediaStream</tt> (e.g. Firefox), another a <tt>string</tt> representation\r\n * of the <tt>URL</tt> of the <tt>MediaStream</tt> (e.g. Chrome) and the return\r\n * value was only used by {@link RTCUIHelper#getVideoId} which itself did not\r\n * appear to be used anywhere. Generally, the implementation will try to follow\r\n * the related standards i.e. work with the <tt>srcObject</tt> and <tt>src</tt>\r\n * properties of the specified <tt>element</tt> taking into account vender\r\n * prefixes.\r\n *\r\n * @param element the element whose video source/src is to be set to the\r\n * specified <tt>stream</tt>\r\n * @param {MediaStream} stream the <tt>MediaStream</tt> to set as the video\r\n * source/src of <tt>element</tt>\r\n */\r\nfunction defaultSetVideoSrc(element, stream) {\r\n    // srcObject\r\n    let srcObjectPropertyName = 'srcObject';\r\n\r\n    if (!(srcObjectPropertyName in element)) {\r\n        srcObjectPropertyName = 'mozSrcObject';\r\n        if (!(srcObjectPropertyName in element)) {\r\n            srcObjectPropertyName = null;\r\n        }\r\n    }\r\n    if (srcObjectPropertyName) {\r\n        element[srcObjectPropertyName] = stream;\r\n\r\n        return;\r\n    }\r\n\r\n    // src\r\n    let src;\r\n\r\n    if (stream) {\r\n        src = stream.jitsiObjectURL;\r\n\r\n        // Save the created URL for stream so we can reuse it and not keep\r\n        // creating URLs.\r\n        if (!src) {\r\n            stream.jitsiObjectURL = src = URL.createObjectURL(stream);\r\n        }\r\n    }\r\n    element.src = src || '';\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass RTCUtils extends Listenable {\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        super(eventEmitter);\r\n    }\r\n\r\n    /**\r\n     * Depending on the browser, sets difference instance methods for\r\n     * interacting with user media and adds methods to native WebRTC-related\r\n     * objects. Also creates an instance variable for peer connection\r\n     * constraints.\r\n     *\r\n     * @param {Object} options\r\n     * @returns {void}\r\n     */\r\n    init(options = {}) {\r\n        if (typeof options.disableAEC === 'boolean') {\r\n            disableAEC = options.disableAEC;\r\n            logger.info(`Disable AEC: ${disableAEC}`);\r\n        }\r\n        if (typeof options.disableNS === 'boolean') {\r\n            disableNS = options.disableNS;\r\n            logger.info(`Disable NS: ${disableNS}`);\r\n        }\r\n        if (typeof options.disableAP === 'boolean') {\r\n            disableAP = options.disableAP;\r\n            logger.info(`Disable AP: ${disableAP}`);\r\n        }\r\n        if (typeof options.disableAGC === 'boolean') {\r\n            disableAGC = options.disableAGC;\r\n            logger.info(`Disable AGC: ${disableAGC}`);\r\n        }\r\n        if (typeof options.disableHPF === 'boolean') {\r\n            disableHPF = options.disableHPF;\r\n            logger.info(`Disable HPF: ${disableHPF}`);\r\n        }\r\n\r\n        availableDevices = [];\r\n        window.clearInterval(availableDevicesPollTimer);\r\n        availableDevicesPollTimer = undefined;\r\n\r\n        this.enumerateDevices = initEnumerateDevicesWithCallback();\r\n\r\n        if (browser.usesNewGumFlow()) {\r\n            console.error(\"RTCUtils > usesNewGumFlow\")\r\n            this.RTCPeerConnectionType = RTCPeerConnection;\r\n\r\n            this.attachMediaStream\r\n                = wrapAttachMediaStream((element, stream) => {\r\n                    if (element) {\r\n                        element.srcObject = stream;\r\n                    }\r\n                });\r\n\r\n            this.getStreamID = ({ id }) => id;\r\n            this.getTrackID = ({ id }) => id;\r\n        } else if (browser.isChromiumBased() // this is chrome < 61\r\n                || browser.isReactNative()) {\r\n                    console.error(\"RTCUtils > isChromiumBased || isReactNative\")\r\n            this.RTCPeerConnectionType = RTCPeerConnection;\r\n\r\n            this.attachMediaStream\r\n                = wrapAttachMediaStream((element, stream) => {\r\n                    defaultSetVideoSrc(element, stream);\r\n\r\n                    return element;\r\n                });\r\n\r\n            this.getStreamID = function({ id }) {\r\n                // A. MediaStreams from FF endpoints have the characters '{' and\r\n                // '}' that make jQuery choke.\r\n                // B. The react-native-webrtc implementation that we use at the\r\n                // time of this writing returns a number for the id of\r\n                // MediaStream. Let's just say that a number contains no special\r\n                // characters.\r\n                return (\r\n                    typeof id === 'number'\r\n                        ? id\r\n                        : SDPUtil.filterSpecialChars(id));\r\n            };\r\n            this.getTrackID = ({ id }) => id;\r\n\r\n            if (!MediaStream.prototype.getVideoTracks) {\r\n                MediaStream.prototype.getVideoTracks = function() {\r\n                    return this.videoTracks;\r\n                };\r\n            }\r\n            if (!MediaStream.prototype.getAudioTracks) {\r\n                MediaStream.prototype.getAudioTracks = function() {\r\n                    return this.audioTracks;\r\n                };\r\n            }\r\n        } else {\r\n            console.error(\"RTCUtils > else\")\r\n            const message = 'Endpoint does not appear to be WebRTC-capable';\r\n\r\n            logger.error(message);\r\n            throw new Error(message);\r\n        }\r\n\r\n        this._initPCConstraints();\r\n\r\n        screenObtainer.init(\r\n            options,\r\n            this.getUserMediaWithConstraints.bind(this));\r\n\r\n        if (this.isDeviceListAvailable()) {\r\n            this.enumerateDevices(ds => {\r\n                availableDevices = ds.splice(0);\r\n\r\n                logger.debug('Available devices: ', availableDevices);\r\n                sendDeviceListToAnalytics(availableDevices);\r\n\r\n                eventEmitter.emit(\r\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\r\n                    availableDevices);\r\n\r\n                if (browser.supportsDeviceChangeEvent()) {\r\n                    navigator.mediaDevices.addEventListener(\r\n                        'devicechange',\r\n                        () => this.enumerateDevices(emptyFuncton));\r\n                } else {\r\n                    // Periodically poll enumerateDevices() method to check if\r\n                    // list of media devices has changed.\r\n                    availableDevicesPollTimer = window.setInterval(\r\n                        () => this.enumerateDevices(emptyFuncton),\r\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates instance objects for peer connection constraints both for p2p\r\n     * and outside of p2p.\r\n     */\r\n    _initPCConstraints() {\r\n        if (browser.isFirefox()) {\r\n            this.pcConstraints = {};\r\n        } else if (browser.isChromiumBased() || browser.isReactNative()) {\r\n            this.pcConstraints = { optional: [\r\n                { googHighStartBitrate: 0 },\r\n                { googPayloadPadding: true },\r\n                { googScreencastMinBitrate: 100 },\r\n                { googCpuOveruseDetection: true },\r\n                { googCpuOveruseEncodeUsage: true },\r\n                { googCpuUnderuseThreshold: 55 },\r\n                { googCpuOveruseThreshold: 85 }\r\n            ] };\r\n\r\n            this.p2pPcConstraints\r\n                = JSON.parse(JSON.stringify(this.pcConstraints));\r\n        }\r\n\r\n        this.p2pPcConstraints = this.p2pPcConstraints || this.pcConstraints;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n    * @param {string[]} um required user media types\r\n    * @param {Object} [options] optional parameters\r\n    * @param {string} options.resolution\r\n    * @param {number} options.bandwidth\r\n    * @param {number} options.fps\r\n    * @param {string} options.desktopStream\r\n    * @param {string} options.cameraDeviceId\r\n    * @param {string} options.micDeviceId\r\n    * @param {Object} options.frameRate - used only for dekstop sharing.\r\n    * @param {Object} options.frameRate.min - Minimum fps\r\n    * @param {Object} options.frameRate.max - Maximum fps\r\n    * @param {bool}   options.screenShareAudio - Used by electron clients to\r\n    * enable system audio screen sharing.\r\n    * @returns {Promise} Returns a media stream on success or a JitsiTrackError\r\n    * on failure.\r\n    **/\r\n    getUserMediaWithConstraints(um, options = {}) {\r\n        const constraints = getConstraints(um, options);\r\n\r\n        logger.info('Get media constraints', constraints);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            navigator.mediaDevices.getUserMedia(constraints)\r\n            .then(stream => {\r\n                logger.log('onUserMediaSuccess');\r\n                updateGrantedPermissions(um, stream);\r\n                resolve(stream);\r\n            })\r\n            .catch(error => {\r\n                logger.warn('Failed to get access to local media. '\r\n                    + ` ${error} ${constraints} `);\r\n                updateGrantedPermissions(um, undefined);\r\n                reject(new JitsiTrackError(error, constraints, um));\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Acquires a media stream via getUserMedia that\r\n     * matches the given constraints\r\n     *\r\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\r\n     * @param {Object} constraints - Stream specifications to use.\r\n     * @returns {Promise}\r\n     */\r\n    _newGetUserMediaWithConstraints(umDevices, constraints = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            navigator.mediaDevices.getUserMedia(constraints)\r\n                .then(stream => {\r\n                    logger.log('onUserMediaSuccess');\r\n                    updateGrantedPermissions(umDevices, stream);\r\n                    resolve(stream);\r\n                })\r\n                .catch(error => {\r\n                    logger.warn('Failed to get access to local media. '\r\n                        + ` ${error} ${constraints} `);\r\n                    updateGrantedPermissions(umDevices, undefined);\r\n                    reject(new JitsiTrackError(error, constraints, umDevices));\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Acquire a display stream via the screenObtainer. This requires extra\r\n     * logic compared to use screenObtainer versus normal device capture logic\r\n     * in RTCUtils#_newGetUserMediaWithConstraints.\r\n     *\r\n     * @param {Object} options\r\n     * @param {string[]} options.desktopSharingSources\r\n     * @param {Object} options.desktopSharingFrameRate\r\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\r\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\r\n     * @returns {Promise} A promise which will be resolved with an object which\r\n     * contains the acquired display stream. If desktop sharing is not supported\r\n     * then a rejected promise will be returned.\r\n     */\r\n    _newGetDesktopMedia(options) {\r\n        if (!screenObtainer.isSupported() || !browser.supportsVideo()) {\r\n            return Promise.reject(\r\n                new Error('Desktop sharing is not supported!'));\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            screenObtainer.obtainStream(\r\n                this._parseDesktopSharingOptions(options),\r\n                stream => {\r\n                    resolve(stream);\r\n                },\r\n                error => {\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Creates the local MediaStreams.\r\n     * @param {Object} [options] optional parameters\r\n     * @param {Array} options.devices the devices that will be requested\r\n     * @param {string} options.resolution resolution constraints\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @param {Object} options.desktopSharingFrameRate\r\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\r\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\r\n     * @returns {*} Promise object that will receive the new JitsiTracks\r\n     */\r\n    obtainAudioAndVideoPermissions(options = {}) {\r\n        options.devices = options.devices || [ ...OLD_GUM_DEFAULT_DEVICES ];\r\n        options.resolution = options.resolution || OLD_GUM_DEFAULT_RESOLUTION;\r\n\r\n        const requestingDesktop = options.devices.includes('desktop');\r\n\r\n        if (requestingDesktop && !screenObtainer.isSupported()) {\r\n            return Promise.reject(\r\n                new Error('Desktop sharing is not supported!'));\r\n        }\r\n\r\n        return this._getAudioAndVideoStreams(options).then(streams =>\r\n            handleLocalStream(streams, options.resolution));\r\n    }\r\n\r\n    /**\r\n     * Performs one call to getUserMedia for audio and/or video and another call\r\n     * for desktop.\r\n     *\r\n     * @param {Object} options - An object describing how the gUM request should\r\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\r\n     * @returns {*} Promise object that will receive the new JitsiTracks on\r\n     * success or a JitsiTrackError on failure.\r\n     */\r\n    _getAudioAndVideoStreams(options) {\r\n        const requestingDesktop = options.devices.includes('desktop');\r\n\r\n        options.devices = options.devices.filter(device =>\r\n            device !== 'desktop');\r\n\r\n        const gumPromise = options.devices.length\r\n            ? this.getUserMediaWithConstraints(options.devices, options)\r\n            : Promise.resolve(null);\r\n\r\n        return gumPromise\r\n            .then(avStream => {\r\n                // If any requested devices are missing, call gum again in\r\n                // an attempt to obtain the actual error. For example, the\r\n                // requested video device is missing or permission was\r\n                // denied.\r\n                const missingTracks\r\n                    = this._getMissingTracks(options.devices, avStream);\r\n\r\n                if (missingTracks.length) {\r\n                    this.stopMediaStream(avStream);\r\n\r\n                    return this.getUserMediaWithConstraints(\r\n                        missingTracks, options)\r\n\r\n                        // GUM has already failed earlier and this success\r\n                        // handling should not be reached.\r\n                        .then(() => Promise.reject(new JitsiTrackError(\r\n                            { name: 'UnknownError' },\r\n                            getConstraints(options.devices, options),\r\n                            missingTracks)));\r\n                }\r\n\r\n                return avStream;\r\n            })\r\n            .then(audioVideo => {\r\n                if (!requestingDesktop) {\r\n                    return { audioVideo };\r\n                }\r\n\r\n                if (options.desktopSharingSourceDevice) {\r\n                    this.stopMediaStream(audioVideo);\r\n\r\n                    throw new Error('Using a camera as screenshare source is'\r\n                        + 'not supported on this browser.');\r\n                }\r\n\r\n                return new Promise((resolve, reject) => {\r\n                    screenObtainer.obtainStream(\r\n                        this._parseDesktopSharingOptions(options),\r\n                        desktop => resolve({\r\n                            audioVideo,\r\n                            desktop\r\n                        }),\r\n                        error => {\r\n                            if (audioVideo) {\r\n                                this.stopMediaStream(audioVideo);\r\n                            }\r\n                            reject(error);\r\n                        });\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Private utility for determining if the passed in MediaStream contains\r\n     * tracks of the type(s) specified in the requested devices.\r\n     *\r\n     * @param {string[]} requestedDevices - The track types that are expected to\r\n     * be includes in the stream.\r\n     * @param {MediaStream} stream - The MediaStream to check if it has the\r\n     * expected track types.\r\n     * @returns {string[]} An array of string with the missing track types. The\r\n     * array will be empty if all requestedDevices are found in the stream.\r\n     */\r\n    _getMissingTracks(requestedDevices = [], stream) {\r\n        const missingDevices = [];\r\n\r\n        const audioDeviceRequested = requestedDevices.includes('audio');\r\n        const audioTracksReceived\r\n            = stream && stream.getAudioTracks().length > 0;\r\n\r\n        if (audioDeviceRequested && !audioTracksReceived) {\r\n            missingDevices.push('audio');\r\n        }\r\n\r\n        const videoDeviceRequested = requestedDevices.includes('video');\r\n        const videoTracksReceived\r\n            = stream && stream.getVideoTracks().length > 0;\r\n\r\n        if (videoDeviceRequested && !videoTracksReceived) {\r\n            missingDevices.push('video');\r\n        }\r\n\r\n        return missingDevices;\r\n    }\r\n\r\n    /**\r\n     * Returns an object formatted for specifying desktop sharing parameters.\r\n     *\r\n     * @param {Object} options - Takes in the same options object as\r\n     * {@link obtainAudioAndVideoPermissions}.\r\n     * @returns {Object}\r\n     */\r\n    _parseDesktopSharingOptions(options) {\r\n        return {\r\n            desktopSharingSources: options.desktopSharingSources,\r\n            gumOptions: {\r\n                frameRate: options.desktopSharingFrameRate\r\n            },\r\n            trackOptions: getTrackSSConstraints(options)\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets streams from specified device types. This function intentionally\r\n     * ignores errors for upstream to catch and handle instead.\r\n     *\r\n     * @param {Object} options - A hash describing what devices to get and\r\n     * relevant constraints.\r\n     * @param {string[]} options.devices - The types of media to capture. Valid\r\n     * values are \"desktop\", \"audio\", and \"video\".\r\n     * @param {Object} options.desktopSharingFrameRate\r\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\r\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\r\n     * @param {String} options.desktopSharingSourceDevice - The device id or\r\n     * label for a video input source that should be used for screensharing.\r\n     * @returns {Promise} The promise, when successful, will return an array of\r\n     * meta data for the requested device type, which includes the stream and\r\n     * track. If an error occurs, it will be deferred to the caller for\r\n     * handling.\r\n     */\r\n    newObtainAudioAndVideoPermissions(options) {\r\n        logger.info('Using the new gUM flow');\r\n\r\n        const mediaStreamsMetaData = [];\r\n\r\n        // Declare private functions to be used in the promise chain below.\r\n        // These functions are declared in the scope of this function because\r\n        // they are not being used anywhere else, so only this function needs to\r\n        // know about them.\r\n\r\n        /**\r\n         * Executes a request for desktop media if specified in options.\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        const maybeRequestDesktopDevice = function() {\r\n            const umDevices = options.devices || [];\r\n            const isDesktopDeviceRequested\r\n                = umDevices.indexOf('desktop') !== -1;\r\n\r\n            if (!isDesktopDeviceRequested) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            const {\r\n                desktopSharingSourceDevice,\r\n                desktopSharingSources,\r\n                desktopSharingFrameRate\r\n            } = options;\r\n\r\n            // Attempt to use a video input device as a screenshare source if\r\n            // the option is defined.\r\n            if (desktopSharingSourceDevice) {\r\n                const matchingDevice\r\n                    = availableDevices && availableDevices.find(device =>\r\n                        device.kind === 'videoinput'\r\n                            && (device.deviceId === desktopSharingSourceDevice\r\n                            || device.label === desktopSharingSourceDevice));\r\n\r\n                if (!matchingDevice) {\r\n                    return Promise.reject(new JitsiTrackError(\r\n                        { name: 'ConstraintNotSatisfiedError' },\r\n                        {},\r\n                        [ desktopSharingSourceDevice ]\r\n                    ));\r\n                }\r\n\r\n                const requestedDevices = [ 'video' ];\r\n\r\n                // Leverage the helper used by {@link _newGetDesktopMedia} to\r\n                // get constraints for the desktop stream.\r\n                const { gumOptions, trackOptions }\r\n                    = this._parseDesktopSharingOptions(options);\r\n\r\n                const constraints = {\r\n                    video: {\r\n                        ...gumOptions,\r\n                        deviceId: matchingDevice.deviceId\r\n                    }\r\n                };\r\n\r\n                return this._newGetUserMediaWithConstraints(\r\n                    requestedDevices, constraints)\r\n                    .then(stream => {\r\n                        const track = stream && stream.getTracks()[0];\r\n                        const applyConstrainsPromise\r\n                            = track && track.applyConstraints\r\n                                ? track.applyConstraints(trackOptions)\r\n                                : Promise.resolve();\r\n\r\n                        return applyConstrainsPromise\r\n                            .then(() => {\r\n                                return {\r\n                                    sourceType: 'device',\r\n                                    stream\r\n                                };\r\n                            });\r\n                    });\r\n            }\r\n\r\n            return this._newGetDesktopMedia({\r\n                desktopSharingSources,\r\n                desktopSharingFrameRate\r\n            });\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Creates a meta data object about the passed in desktopStream and\r\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\r\n         * returned later.\r\n         *\r\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\r\n         * capture.\r\n         * @returns {void}\r\n         */\r\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\r\n            if (!desktopStream) {\r\n                return;\r\n            }\r\n\r\n            const { stream, sourceId, sourceType } = desktopStream;\r\n\r\n            const desktopAudioTracks = stream.getAudioTracks();\r\n\r\n            if (desktopAudioTracks.length) {\r\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: desktopAudioStream,\r\n                    sourceId,\r\n                    sourceType,\r\n                    track: desktopAudioStream.getAudioTracks()[0]\r\n                });\r\n            }\r\n\r\n            const desktopVideoTracks = stream.getVideoTracks();\r\n\r\n            if (desktopVideoTracks.length) {\r\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: desktopVideoStream,\r\n                    sourceId,\r\n                    sourceType,\r\n                    track: desktopVideoStream.getVideoTracks()[0],\r\n                    videoType: VideoType.DESKTOP\r\n                });\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Executes a request for audio and/or video, as specified in options.\r\n         * By default both audio and video will be captured if options.devices\r\n         * is not defined.\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        const maybeRequestCaptureDevices = function() {\r\n            const umDevices = options.devices || [ 'audio', 'video' ];\r\n            const requestedCaptureDevices = umDevices.filter(device =>\r\n                device === 'audio'\r\n                || (device === 'video' && browser.supportsVideo()));\r\n\r\n            if (!requestedCaptureDevices.length) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            const constraints = newGetConstraints(\r\n                requestedCaptureDevices, options);\r\n\r\n            logger.info('Got media constraints: ', constraints);\r\n\r\n            return this._newGetUserMediaWithConstraints(\r\n                requestedCaptureDevices, constraints);\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Splits the passed in media stream into separate audio and video\r\n         * streams and creates meta data objects for each and pushes them to the\r\n         * internal array mediaStreamsMetaData to be returned later.\r\n         *\r\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\r\n         * video track.\r\n         * @returns {void}\r\n         */\r\n        const maybeCreateAndAddAVTracks = function(avStream) {\r\n            if (!avStream) {\r\n                return;\r\n            }\r\n\r\n            const audioTracks = avStream.getAudioTracks();\r\n\r\n            if (audioTracks.length) {\r\n                const audioStream = new MediaStream(audioTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: audioStream,\r\n                    track: audioStream.getAudioTracks()[0],\r\n                    effects: options.effects\r\n                });\r\n            }\r\n\r\n            const videoTracks = avStream.getVideoTracks();\r\n\r\n            if (videoTracks.length) {\r\n                const videoStream = new MediaStream(videoTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: videoStream,\r\n                    track: videoStream.getVideoTracks()[0],\r\n                    videoType: VideoType.CAMERA,\r\n                    effects: options.effects\r\n                });\r\n            }\r\n        };\r\n\r\n        return maybeRequestDesktopDevice()\r\n            .then(maybeCreateAndAddDesktopTrack)\r\n            .then(maybeRequestCaptureDevices)\r\n            .then(maybeCreateAndAddAVTracks)\r\n            .then(() => mediaStreamsMetaData)\r\n            .catch(error => {\r\n                mediaStreamsMetaData.forEach(({ stream }) => {\r\n                    this.stopMediaStream(stream);\r\n                });\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Checks whether it is possible to enumerate available cameras/microphones.\r\n     *\r\n     * @returns {boolean} {@code true} if the device listing is available;\r\n     * {@code false}, otherwise.\r\n     */\r\n    isDeviceListAvailable() {\r\n        return Boolean(\r\n            navigator.mediaDevices\r\n                && navigator.mediaDevices.enumerateDevices);\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @params {string} [deviceType] - type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        return deviceType === 'output' || deviceType === 'audiooutput'\r\n            ? isAudioOutputDeviceChangeAvailable\r\n            : true;\r\n    }\r\n\r\n    /**\r\n     * A method to handle stopping of the stream.\r\n     * One point to handle the differences in various implementations.\r\n     * @param mediaStream MediaStream object to stop.\r\n     */\r\n    stopMediaStream(mediaStream) {\r\n        if (!mediaStream) {\r\n            return;\r\n        }\r\n\r\n        mediaStream.getTracks().forEach(track => {\r\n            if (track.stop) {\r\n                track.stop();\r\n            }\r\n        });\r\n\r\n        // leave stop for implementation still using it\r\n        if (mediaStream.stop) {\r\n            mediaStream.stop();\r\n        }\r\n\r\n        // The MediaStream implementation of the react-native-webrtc project has\r\n        // an explicit release method that is to be invoked in order to release\r\n        // used resources such as memory.\r\n        if (mediaStream.release) {\r\n            mediaStream.release();\r\n        }\r\n\r\n        // if we have done createObjectURL, lets clean it\r\n        const url = mediaStream.jitsiObjectURL;\r\n\r\n        if (url) {\r\n            delete mediaStream.jitsiObjectURL;\r\n            URL.revokeObjectURL(url);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     * @returns {boolean}\r\n     */\r\n    isDesktopSharingEnabled() {\r\n        return screenObtainer.isSupported();\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\r\n     *      device\r\n     * @returns {Promise} - resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    setAudioOutputDevice(deviceId) {\r\n        if (!this.isDeviceChangeAvailable('output')) {\r\n            return Promise.reject(\r\n                new Error('Audio output device change is not supported'));\r\n        }\r\n\r\n        return featureDetectionAudioEl.setSinkId(deviceId)\r\n            .then(() => {\r\n                audioOutputDeviceId = deviceId;\r\n                audioOutputChanged = true;\r\n\r\n                logger.log(`Audio output device set to ${deviceId}`);\r\n\r\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                    deviceId);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, '' stands for default\r\n     * device\r\n     * @returns {string}\r\n     */\r\n    getAudioOutputDevice() {\r\n        return audioOutputDeviceId;\r\n    }\r\n\r\n    /**\r\n     * Returns list of available media devices if its obtained, otherwise an\r\n     * empty array is returned/\r\n     * @returns {Array} list of available media devices.\r\n     */\r\n    getCurrentlyAvailableMediaDevices() {\r\n        return availableDevices;\r\n    }\r\n\r\n    /**\r\n     * Returns event data for device to be reported to stats.\r\n     * @returns {MediaDeviceInfo} device.\r\n     */\r\n    getEventDataForActiveDevice(device) {\r\n        const deviceList = [];\r\n        const deviceData = {\r\n            'deviceId': device.deviceId,\r\n            'kind': device.kind,\r\n            'label': device.label,\r\n            'groupId': device.groupId\r\n        };\r\n\r\n        deviceList.push(deviceData);\r\n\r\n        return { deviceList };\r\n    }\r\n\r\n    /**\r\n     * Configures the given PeerConnection constraints to either enable or\r\n     * disable (according to the value of the 'enable' parameter) the\r\n     * 'googSuspendBelowMinBitrate' option.\r\n     * @param constraints the constraints on which to operate.\r\n     * @param enable {boolean} whether to enable or disable the suspend video\r\n     * option.\r\n     */\r\n    setSuspendVideo(constraints, enable) {\r\n        if (!constraints.optional) {\r\n            constraints.optional = [];\r\n        }\r\n\r\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\r\n        // that the elements of constraints.optional contain a single property).\r\n        constraints.optional\r\n            = constraints.optional.filter(\r\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\r\n\r\n        if (enable) {\r\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\r\n        }\r\n    }\r\n}\r\n\r\nconst rtcUtils = new RTCUtils();\r\n\r\n/**\r\n * Wraps original attachMediaStream function to set current audio output device\r\n * if this is supported.\r\n * @param {Function} origAttachMediaStream\r\n * @returns {Function}\r\n */\r\nfunction wrapAttachMediaStream(origAttachMediaStream) {\r\n    return function(element, stream) {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\r\n\r\n        if (stream\r\n                && rtcUtils.isDeviceChangeAvailable('output')\r\n                && stream.getAudioTracks\r\n                && stream.getAudioTracks().length\r\n\r\n                // we skip setting audio output if there was no explicit change\r\n                && audioOutputChanged) {\r\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\r\n                .catch(function(ex) {\r\n                    const err\r\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\r\n\r\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\r\n                        promise: this, // eslint-disable-line no-invalid-this\r\n                        reason: err\r\n                    });\r\n\r\n                    logger.warn(\r\n                        'Failed to set audio output device for the element.'\r\n                            + ' Default audio output device will be used'\r\n                            + ' instead',\r\n                        element,\r\n                        err);\r\n                });\r\n        }\r\n\r\n        return res;\r\n    };\r\n}\r\n\r\nexport default rtcUtils;\r\n","/* global module */\r\n/**\r\n * Enumeration of the video types\r\n * @type {{CAMERA: string, DESKTOP: string}}\r\n */\r\nconst VideoType = {\r\n    /**\r\n     * The camera video type.\r\n     */\r\n    CAMERA: 'camera',\r\n\r\n    /**\r\n     * The desktop video type.\r\n     */\r\n    DESKTOP: 'desktop'\r\n};\r\n\r\nmodule.exports = VideoType;\r\n","/**\r\n * This utility class defines custom onerror and onunhandledrejection functions.\r\n * The custom error handlers respect the previously-defined error handlers.\r\n * GlobalOnErrorHandler class provides utilities to add many custom error\r\n * handlers and to execute the error handlers directly.\r\n */\r\n\r\n\r\n/**\r\n * List with global error handlers that will be executed.\r\n */\r\nconst handlers = [];\r\n\r\n// If an old handler exists, also fire its events.\r\nconst oldOnErrorHandler = window.onerror;\r\n\r\n/**\r\n * Custom error handler that calls the old global error handler and executes\r\n * all handlers that were previously added.\r\n */\r\nfunction JitsiGlobalErrorHandler(...args) {\r\n    handlers.forEach(handler => handler(...args));\r\n    oldOnErrorHandler && oldOnErrorHandler(...args);\r\n}\r\n\r\n// If an old handler exists, also fire its events.\r\nconst oldOnUnhandledRejection = window.onunhandledrejection;\r\n\r\n/**\r\n * Custom handler that calls the old global handler and executes all handlers\r\n * that were previously added. This handler handles rejected Promises.\r\n */\r\nfunction JitsiGlobalUnhandledRejection(event) {\r\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\r\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\r\n}\r\n\r\n// Setting the custom error handlers.\r\nwindow.onerror = JitsiGlobalErrorHandler;\r\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\r\n\r\nconst GlobalOnErrorHandler = {\r\n    /**\r\n     * Adds new error handlers.\r\n     * @param handler the new handler.\r\n     */\r\n    addHandler(handler) {\r\n        handlers.push(handler);\r\n    },\r\n\r\n    /**\r\n     * Calls the global error handler if there is one.\r\n     * @param error the error to pass to the error handler\r\n     */\r\n    callErrorHandler(error) {\r\n        const errHandler = window.onerror;\r\n\r\n        if (!errHandler) {\r\n            return;\r\n        }\r\n        errHandler(null, null, null, null, error);\r\n    },\r\n\r\n    /**\r\n     * Calls the global rejection handler if there is one.\r\n     * @param error the error to pass to the rejection handler.\r\n     */\r\n    callUnhandledRejectionHandler(error) {\r\n        const errHandler = window.onunhandledrejection;\r\n\r\n        if (!errHandler) {\r\n            return;\r\n        }\r\n        errHandler(error);\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = GlobalOnErrorHandler;\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport { safeCounterIncrement } from '../util/MathUtil';\r\n\r\nimport BridgeChannel from './BridgeChannel';\r\nimport JitsiLocalTrack from './JitsiLocalTrack';\r\nimport RTCUtils from './RTCUtils';\r\nimport TraceablePeerConnection from './TraceablePeerConnection';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The counter used to generated id numbers assigned to peer connections\r\n * @type {number}\r\n */\r\nlet peerConnectionIdCounter = 0;\r\n\r\n/**\r\n * The counter used to generate id number for the local\r\n * <code>MediaStreamTrack</code>s.\r\n * @type {number}\r\n */\r\nlet rtcTrackIdCounter = 0;\r\n\r\n/**\r\n *\r\n * @param tracksInfo\r\n * @param options\r\n */\r\nfunction createLocalTracks(tracksInfo, options) {\r\n    const newTracks = [];\r\n    let deviceId = null;\r\n\r\n    tracksInfo.forEach(trackInfo => {\r\n        if (trackInfo.mediaType === MediaType.AUDIO) {\r\n            deviceId = options.micDeviceId;\r\n        } else if (trackInfo.videoType === VideoType.CAMERA) {\r\n            deviceId = options.cameraDeviceId;\r\n        }\r\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\r\n        const localTrack = new JitsiLocalTrack({\r\n            ...trackInfo,\r\n            deviceId,\r\n            facingMode: options.facingMode,\r\n            rtcId: rtcTrackIdCounter,\r\n            effects: options.effects\r\n        });\r\n\r\n        newTracks.push(localTrack);\r\n    });\r\n\r\n    return newTracks;\r\n}\r\n\r\n/**\r\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\r\n * about MedieaTracks.\r\n *\r\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\r\n * MediaTrack instances. Each can look like:\r\n * {{\r\n *     stream: MediaStream instance that holds a track with audio or video,\r\n *     track: MediaTrack within the MediaStream,\r\n *     videoType: \"camera\" or \"desktop\" or falsy,\r\n *     sourceId: ID of the desktopsharing source,\r\n *     sourceType: The desktopsharing source type,\r\n *     effects: Array of effect types\r\n * }}\r\n */\r\nfunction _newCreateLocalTracks(mediaStreamMetaData = []) {\r\n    return mediaStreamMetaData.map(metaData => {\r\n        const {\r\n            sourceId,\r\n            sourceType,\r\n            stream,\r\n            track,\r\n            videoType,\r\n            effects\r\n        } = metaData;\r\n\r\n        const { deviceId, facingMode } = track.getSettings();\r\n\r\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\r\n        // so RTC does not need to handle ID management. This move would be\r\n        // safer to do once the old createLocalTracks is removed.\r\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\r\n\r\n        return new JitsiLocalTrack({\r\n            deviceId,\r\n            facingMode,\r\n            mediaType: track.kind,\r\n            rtcId: rtcTrackIdCounter,\r\n            sourceId,\r\n            sourceType,\r\n            stream,\r\n            track,\r\n            videoType: videoType || null,\r\n            effects\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport default class RTC extends Listenable {\r\n    /**\r\n     *\r\n     * @param conference\r\n     * @param options\r\n     */\r\n    constructor(conference, options = {}) {\r\n        super();\r\n        this.conference = conference;\r\n\r\n        /**\r\n         * A map of active <tt>TraceablePeerConnection</tt>.\r\n         * @type {Map.<number, TraceablePeerConnection>}\r\n         */\r\n        this.peerConnections = new Map();\r\n\r\n        this.localTracks = [];\r\n\r\n        this.options = options;\r\n\r\n        // BridgeChannel instance.\r\n        // @private\r\n        // @type {BridgeChannel}\r\n        this._channel = null;\r\n\r\n        /**\r\n         * The value specified to the last invocation of setLastN before the\r\n         * channel completed opening. If non-null, the value will be sent\r\n         * through a channel (once) as soon as it opens and will then be\r\n         * discarded.\r\n         * @private\r\n         * @type {number}\r\n         */\r\n        this._lastN = -1;\r\n\r\n        /**\r\n         * Defines the last N endpoints list. It can be null or an array once\r\n         * initialised with a channel last N event.\r\n         * @type {Array<string>|null}\r\n         * @private\r\n         */\r\n        this._lastNEndpoints = null;\r\n\r\n        this._forwardedSources = null;\r\n\r\n        /*\r\n         * Holds the sender video constraints signaled from the bridge.\r\n         */\r\n        this._senderVideoConstraints = {};\r\n\r\n        /**\r\n         * The number representing the maximum video height the local client\r\n         * should receive from the bridge.\r\n         *\r\n         * @type {number|undefined}\r\n         * @private\r\n         */\r\n        this._maxFrameHeight = undefined;\r\n\r\n        /**\r\n         * The endpoint ID of currently pinned participant or <tt>null</tt> if\r\n         * no user is pinned.\r\n         * @type {string|null}\r\n         * @private\r\n         */\r\n        this._pinnedEndpoint = null;\r\n\r\n        /**\r\n         * The endpoint IDs of currently selected participants.\r\n         *\r\n         * @type {Array}\r\n         * @private\r\n         */\r\n        this._selectedEndpoints = [];\r\n\r\n        // The last N change listener.\r\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\r\n\r\n        this._forwardedSourcesChangeListener = this._onForwardedSourcesChanged.bind(this);\r\n\r\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\r\n        this._updateAudioOutputForAudioTracks\r\n            = this._updateAudioOutputForAudioTracks.bind(this);\r\n\r\n        this._videoType = 'none';\r\n\r\n        // Switch audio output device on all remote audio tracks. Local audio\r\n        // tracks handle this event by themselves.\r\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\r\n            RTCUtils.addListener(\r\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._updateAudioOutputForAudioTracks\r\n            );\r\n\r\n            RTCUtils.addListener(\r\n                RTCEvents.DEVICE_LIST_CHANGED,\r\n                this._onDeviceListChanged\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes any listeners and stored state from this {@code RTC} instance.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    destroy() {\r\n        RTCUtils.removeListener(\r\n            RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n            this._updateAudioOutputForAudioTracks\r\n        );\r\n\r\n        RTCUtils.removeListener(\r\n            RTCEvents.DEVICE_LIST_CHANGED,\r\n            this._onDeviceListChanged\r\n        );\r\n\r\n        this.removeListener(\r\n            RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n            this._lastNChangeListener\r\n        );\r\n\r\n        if (this._channelOpenListener) {\r\n            this.removeListener(\r\n                RTCEvents.DATA_CHANNEL_OPEN,\r\n                this._channelOpenListener\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exposes the private helper for converting a WebRTC MediaStream to a\r\n     * JitsiLocalTrack.\r\n     *\r\n     * @param {Array<Object>} tracksInfo\r\n     * @returns {Array<JitsiLocalTrack>}\r\n     */\r\n    static newCreateLocalTracks(tracksInfo) {\r\n        return _newCreateLocalTracks(tracksInfo);\r\n    }\r\n\r\n    /**\r\n     * Creates the local MediaStreams.\r\n     * @param {object} [options] Optional parameters.\r\n     * @param {array} options.devices The devices that will be requested.\r\n     * @param {string} options.resolution Resolution constraints.\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @returns {*} Promise object that will receive the new JitsiTracks\r\n     */\r\n    static obtainAudioAndVideoPermissions(options) {\r\n        const usesNewGumFlow = browser.usesNewGumFlow();\r\n        const obtainMediaPromise = usesNewGumFlow\r\n            ? RTCUtils.newObtainAudioAndVideoPermissions(options)\r\n            : RTCUtils.obtainAudioAndVideoPermissions(options);\r\n\r\n        return obtainMediaPromise.then(tracksInfo => {\r\n            if (usesNewGumFlow) {\r\n                return _newCreateLocalTracks(tracksInfo);\r\n            }\r\n\r\n            return createLocalTracks(tracksInfo, options);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes the bridge channel of this instance.\r\n     * At least one of both, peerconnection or wsUrl parameters, must be\r\n     * given.\r\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\r\n     * instance.\r\n     * @param {string} [wsUrl] WebSocket URL.\r\n     */\r\n    initializeBridgeChannel(peerconnection, wsUrl) {\r\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\r\n\r\n        this._channelOpenListener = () => {\r\n            const logError = (error, msgType, value) => {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\r\n            };\r\n\r\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\r\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\r\n            if (this._receiverVideoConstraints) {\r\n                try {\r\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\r\n                } catch (error) {\r\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\r\n                }\r\n            }\r\n            if (this._selectedEndpoints) {\r\n                try {\r\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\r\n                } catch (error) {\r\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\r\n                }\r\n            }\r\n            if (typeof this._maxFrameHeight !== 'undefined') {\r\n                try {\r\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\r\n                } catch (error) {\r\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\r\n                }\r\n            }\r\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\r\n                try {\r\n                    this._channel.sendSetLastNMessage(this._lastN);\r\n                } catch (error) {\r\n                    logError(error, 'LastNChangedEvent', this._lastN);\r\n                }\r\n            }\r\n            if (!FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                try {\r\n                    this._channel.sendVideoTypeMessage(this._videoType);\r\n                } catch (error) {\r\n                    logError(error, 'VideoTypeMessage', this._videoType);\r\n                }\r\n            }\r\n        };\r\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\r\n\r\n        // Add Last N change listener.\r\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\r\n\r\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n            // Add forwarded sources change listener.\r\n            this.addListener(RTCEvents.FORWARDED_SOURCES_CHANGED, this._forwardedSourcesChangeListener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the list of known audio and video devices has\r\n     * been updated. Attempts to update the known available audio output\r\n     * devices.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onDeviceListChanged() {\r\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\r\n    }\r\n\r\n    /**\r\n     * Notifies this instance that the sender video constraints signaled from the bridge have changed.\r\n     *\r\n     * @param {Object} senderVideoConstraints the sender video constraints from the bridge.\r\n     * @private\r\n     */\r\n    _senderVideoConstraintsChanged(senderVideoConstraints) {\r\n        logger.info(`Received remote max frame height of ${senderVideoConstraints} on the bridge channel`);\r\n        this._senderVideoConstraints = senderVideoConstraints;\r\n        this.eventEmitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * Receives events when Last N had changed.\r\n     * @param {array} lastNEndpoints The new Last N endpoints.\r\n     * @private\r\n     */\r\n    _onLastNChanged(lastNEndpoints = []) {\r\n        const oldLastNEndpoints = this._lastNEndpoints || [];\r\n        let leavingLastNEndpoints = [];\r\n        let enteringLastNEndpoints = [];\r\n\r\n        this._lastNEndpoints = lastNEndpoints;\r\n\r\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\r\n            id => !this.isInLastN(id));\r\n\r\n        enteringLastNEndpoints = lastNEndpoints.filter(\r\n            id => oldLastNEndpoints.indexOf(id) === -1);\r\n\r\n        this.conference.eventEmitter.emit(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            leavingLastNEndpoints,\r\n            enteringLastNEndpoints);\r\n    }\r\n\r\n    /**\r\n     * Should be called when current media session ends and after the\r\n     * PeerConnection has been closed using PeerConnection.close() method.\r\n     */\r\n    onCallEnded() {\r\n        if (this._channel) {\r\n            // The BridgeChannel is not explicitly closed as the PeerConnection\r\n            // is closed on call ended which triggers datachannel onclose\r\n            // events. If using a WebSocket, the channel must be closed since\r\n            // it is not managed by the PeerConnection.\r\n            // The reference is cleared to disable any logic related to the\r\n            // channel.\r\n            if (this._channel && this._channel.mode === 'websocket') {\r\n                this._channel.close();\r\n            }\r\n\r\n            this._channel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\r\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\r\n     * is established.\r\n     * @param {*} constraints\r\n     */\r\n     setNewReceiverVideoConstraints(constraints) {\r\n        this._receiverVideoConstraints = constraints;\r\n\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum video size the local participant should receive from\r\n     * remote participants. Will cache the value and send it through the channel\r\n     * once it is created.\r\n     *\r\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\r\n     * this receiver is willing to receive.\r\n     * @returns {void}\r\n     */\r\n    setReceiverVideoConstraint(maxFrameHeight) {\r\n        this._maxFrameHeight = maxFrameHeight;\r\n\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the video type and availability for the local video source.\r\n     *\r\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\r\n     * 'none' for when local video source is muted or removed from the peerconnection.\r\n     * @returns {void}\r\n     */\r\n     setVideoType(videoType) {\r\n        if (this._videoType !== videoType) {\r\n            this._videoType = videoType;\r\n\r\n            if (this._channel && this._channel.isOpen()) {\r\n                this._channel.sendVideoTypeMessage(videoType);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the track's  video type to the JVB.\r\n     * @param {SourceName} sourceName - the track's source name.\r\n     * @param {BridgeVideoType} videoType - the track's video type.\r\n     */\r\n    sendSourceVideoType(sourceName, videoType) {\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elects the participants with the given ids to be the selected\r\n     * participants in order to always receive video for this participant (even\r\n     * when last n is enabled). If there is no channel we store it and send it\r\n     * through the channel once it is created.\r\n     *\r\n     * @param {Array<string>} ids - The user ids.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails.\r\n     * @returns {void}\r\n     */\r\n    selectEndpoints(ids) {\r\n        this._selectedEndpoints = ids;\r\n\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendSelectedEndpointsMessage(ids);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elects the participant with the given id to be the pinned participant in\r\n     * order to always receive video for this participant (even when last n is\r\n     * enabled).\r\n     * @param {stirng} id The user id.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails.\r\n     */\r\n    pinEndpoint(id) {\r\n        // Cache the value if channel is missing, till we open it.\r\n        this._pinnedEndpoint = id;\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendPinnedEndpointMessage(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param eventType\r\n     * @param listener\r\n     */\r\n    static addListener(eventType, listener) {\r\n        RTCUtils.addListener(eventType, listener);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param eventType\r\n     * @param listener\r\n     */\r\n    static removeListener(eventType, listener) {\r\n        RTCUtils.removeListener(eventType, listener);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param options\r\n     */\r\n    static init(options = {}) {\r\n        this.options = options;\r\n\r\n        return RTCUtils.init(this.options);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>TraceablePeerConnection</tt>\r\n     * @param {SignalingLayer} signaling The signaling layer that will\r\n     *      provide information about the media or participants which is not\r\n     *      carried over SDP.\r\n     * @param {object} iceConfig An object describing the ICE config like\r\n     *      defined in the WebRTC specification.\r\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\r\n     *      in a peer to peer type of session.\r\n     * @param {object} options The config options.\r\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\r\n     * enabled on the PeerConnection.\r\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\r\n     *      the simulcast.\r\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\r\n     *      RTX.\r\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\r\n     *      disabled by removing it from the SDP.\r\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\r\n     *      preferred over other video codecs.\r\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\r\n     * @return {TraceablePeerConnection}\r\n     */\r\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\r\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\r\n\r\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\r\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\r\n\r\n            Statistics.analytics.addPermanentProperties(\r\n                { abtestSuspendVideo: options.abtestSuspendVideo });\r\n        }\r\n\r\n        if (options.enableInsertableStreams) {\r\n            logger.debug('E2EE - setting insertable streams constraints');\r\n            pcConfig.encodedInsertableStreams = true;\r\n        }\r\n\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n        pcConfig.sdpSemantics = 'unified-plan';\r\n\r\n        if (browser.supportsSdpSemantics()) {\r\n            logger.debug('WebRTC application is running in plan-b mode');\r\n            pcConfig.sdpSemantics = 'plan-b';\r\n        }\r\n\r\n        if (options.forceTurnRelay) {\r\n            pcConfig.iceTransportPolicy = 'relay';\r\n        }\r\n\r\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\r\n        // The default policy generates separate ice candidates for audio and video connections.\r\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\r\n        pcConfig.bundlePolicy = 'max-bundle';\r\n\r\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\r\n\r\n        const newConnection\r\n            = new TraceablePeerConnection(\r\n                this,\r\n                peerConnectionIdCounter,\r\n                signaling,\r\n                pcConfig, pcConstraints,\r\n                isP2P, options);\r\n\r\n        this.peerConnections.set(newConnection.id, newConnection);\r\n\r\n        return newConnection;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Removed given peer connection from this RTC module instance.\r\n     * @param {TraceablePeerConnection} traceablePeerConnection\r\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\r\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\r\n     * this RTC instance.\r\n     */\r\n    _removePeerConnection(traceablePeerConnection) {\r\n        const id = traceablePeerConnection.id;\r\n\r\n        if (this.peerConnections.has(id)) {\r\n            // NOTE Remote tracks are not removed here.\r\n            this.peerConnections.delete(id);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param track\r\n     */\r\n    addLocalTrack(track) {\r\n        if (!track) {\r\n            throw new Error('track must not be null nor undefined');\r\n        }\r\n\r\n        this.localTracks.push(track);\r\n\r\n        track.conference = this.conference;\r\n    }\r\n\r\n    /**\r\n     * Returns the current value for \"lastN\" - the amount of videos are going\r\n     * to be delivered. When set to -1 for unlimited or all available videos.\r\n     * @return {number}\r\n     */\r\n    getLastN() {\r\n        return this._lastN;\r\n    }\r\n\r\n    /**\r\n     * @return {Object} The sender video constraints signaled from the brridge.\r\n     */\r\n    getSenderVideoConstraints() {\r\n        return this._senderVideoConstraints;\r\n    }\r\n\r\n    /**\r\n     * Get local video track.\r\n     * @returns {JitsiLocalTrack|undefined}\r\n     */\r\n    getLocalVideoTrack() {\r\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\r\n\r\n\r\n        return localVideo.length ? localVideo[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Get local audio track.\r\n     * @returns {JitsiLocalTrack|undefined}\r\n     */\r\n    getLocalAudioTrack() {\r\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\r\n\r\n\r\n        return localAudio.length ? localAudio[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns the local tracks of the given media type, or all local tracks if\r\n     * no specific type is given.\r\n     * @param {MediaType} [mediaType] Optional media type filter.\r\n     * (audio or video).\r\n     */\r\n    getLocalTracks(mediaType) {\r\n        let tracks = this.localTracks.slice();\r\n\r\n        if (mediaType !== undefined) {\r\n            tracks = tracks.filter(\r\n                track => track.getType() === mediaType);\r\n        }\r\n\r\n        return tracks;\r\n    }\r\n\r\n    /**\r\n     * Obtains all remote tracks currently known to this RTC module instance.\r\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\r\n     *      by their media type if this argument is specified.\r\n     * @return {Array<JitsiRemoteTrack>}\r\n     */\r\n    getRemoteTracks(mediaType) {\r\n        let remoteTracks = [];\r\n\r\n        for (const tpc of this.peerConnections.values()) {\r\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\r\n\r\n            if (pcRemoteTracks) {\r\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\r\n            }\r\n        }\r\n\r\n        return remoteTracks;\r\n    }\r\n\r\n    /**\r\n     * Set mute for all local audio streams attached to the conference.\r\n     * @param value The mute value.\r\n     * @returns {Promise}\r\n     */\r\n    setAudioMute(value) {\r\n        const mutePromises = [];\r\n\r\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\r\n            // this is a Promise\r\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\r\n        });\r\n\r\n        // We return a Promise from all Promises so we can wait for their\r\n        // execution.\r\n        return Promise.all(mutePromises);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param track\r\n     */\r\n    removeLocalTrack(track) {\r\n        const pos = this.localTracks.indexOf(track);\r\n\r\n        if (pos === -1) {\r\n            return;\r\n        }\r\n\r\n        this.localTracks.splice(pos, 1);\r\n    }\r\n\r\n    /**\r\n     * Removes all JitsiRemoteTracks associated with given MUC nickname\r\n     * (resource part of the JID). Returns array of removed tracks.\r\n     *\r\n     * @param {string} Owner The resource part of the MUC JID.\r\n     * @returns {JitsiRemoteTrack[]}\r\n     */\r\n    removeRemoteTracks(owner) {\r\n        let removedTracks = [];\r\n\r\n        for (const tpc of this.peerConnections.values()) {\r\n            const pcRemovedTracks = tpc.removeRemoteTracks(owner);\r\n\r\n            removedTracks = removedTracks.concat(pcRemovedTracks);\r\n        }\r\n\r\n        logger.debug(\r\n            `Removed remote tracks for ${owner}`\r\n                + ` count: ${removedTracks.length}`);\r\n\r\n        return removedTracks;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    static getPCConstraints(isP2P) {\r\n        const pcConstraints\r\n            = isP2P ? RTCUtils.p2pPcConstraints : RTCUtils.pcConstraints;\r\n\r\n        if (!pcConstraints) {\r\n            return {};\r\n        }\r\n\r\n        return JSON.parse(JSON.stringify(pcConstraints));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param elSelector\r\n     * @param stream\r\n     */\r\n    static attachMediaStream(elSelector, stream) {\r\n        return RTCUtils.attachMediaStream(elSelector, stream);\r\n    }\r\n\r\n    /**\r\n     * Returns the id of the given stream.\r\n     * @param {MediaStream} stream\r\n     */\r\n    static getStreamID(stream) {\r\n        return RTCUtils.getStreamID(stream);\r\n    }\r\n\r\n    /**\r\n     * Returns the id of the given track.\r\n     * @param {MediaStreamTrack} track\r\n     */\r\n    static getTrackID(track) {\r\n        return RTCUtils.getTrackID(track);\r\n    }\r\n\r\n    /**\r\n     * Returns true if retrieving the the list of input devices is supported\r\n     * and false if not.\r\n     */\r\n    static isDeviceListAvailable() {\r\n        return RTCUtils.isDeviceListAvailable();\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @param {string} [deviceType] Type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    static isDeviceChangeAvailable(deviceType) {\r\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the current execution environment supports WebRTC (for\r\n     * use within this library).\r\n     *\r\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\r\n     * execution environment (for use within this library); {@code false},\r\n     * otherwise.\r\n     */\r\n    static isWebRtcSupported() {\r\n        return browser.isSupported();\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, '' stands for default\r\n     * device\r\n     * @returns {string}\r\n     */\r\n    static getAudioOutputDevice() {\r\n        return RTCUtils.getAudioOutputDevice();\r\n    }\r\n\r\n    /**\r\n     * Returns list of available media devices if its obtained, otherwise an\r\n     * empty array is returned/\r\n     * @returns {array} list of available media devices.\r\n     */\r\n    static getCurrentlyAvailableMediaDevices() {\r\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\r\n    }\r\n\r\n    /**\r\n     * Returns event data for device to be reported to stats.\r\n     * @returns {MediaDeviceInfo} device.\r\n     */\r\n    static getEventDataForActiveDevice(device) {\r\n        return RTCUtils.getEventDataForActiveDevice(device);\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId Id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices().\r\n     * @returns {Promise} resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    static setAudioOutputDevice(deviceId) {\r\n        return RTCUtils.setAudioOutputDevice(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\r\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\r\n     * \"mixed\" JVB stream.\r\n     *\r\n     * Clients that implement Unified Plan, such as Firefox use recvonly\r\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\r\n     * to Plan B where there are only 3 channels: audio, video and data.\r\n     *\r\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\r\n     * @returns {boolean}\r\n     */\r\n    static isUserStream(stream) {\r\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\r\n     * ID is considered a valid \"user\" stream which means that it's not a\r\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\r\n     *\r\n     * Clients that implement Unified Plan, such as Firefox use recvonly\r\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\r\n     * to Plan B where there are only 3 channels: audio, video and data.\r\n     *\r\n     * @param {string} streamId The id of WebRTC MediaStream.\r\n     * @returns {boolean}\r\n     */\r\n    static isUserStreamById(streamId) {\r\n        return streamId && streamId !== 'mixedmslabel'\r\n            && streamId !== 'default';\r\n    }\r\n\r\n    /**\r\n     * Allows to receive list of available cameras/microphones.\r\n     * @param {function} callback Would receive array of devices as an\r\n     *      argument.\r\n     */\r\n    static enumerateDevices(callback) {\r\n        RTCUtils.enumerateDevices(callback);\r\n    }\r\n\r\n    /**\r\n     * A method to handle stopping of the stream.\r\n     * One point to handle the differences in various implementations.\r\n     * @param {MediaStream} mediaStream MediaStream object to stop.\r\n     */\r\n    static stopMediaStream(mediaStream) {\r\n        RTCUtils.stopMediaStream(mediaStream);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     * @returns {boolean}\r\n     */\r\n    static isDesktopSharingEnabled() {\r\n        return RTCUtils.isDesktopSharingEnabled();\r\n    }\r\n\r\n    /**\r\n     * Closes the currently opened bridge channel.\r\n     */\r\n    closeBridgeChannel() {\r\n        if (this._channel) {\r\n            this._channel.close();\r\n            this._channel = null;\r\n\r\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n                this._lastNChangeListener);\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     *\r\n     * @param {TraceablePeerConnection} tpc\r\n     * @param {number} ssrc\r\n     * @param {number} audioLevel\r\n     * @param {boolean} isLocal\r\n     */\r\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\r\n        const track = tpc.getTrackBySSRC(ssrc);\r\n\r\n        if (!track) {\r\n            return;\r\n        } else if (!track.isAudioTrack()) {\r\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\r\n\r\n            return;\r\n        } else if (track.isLocal() !== isLocal) {\r\n            logger.error(\r\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\r\n        }\r\n\r\n        track.setAudioLevel(audioLevel, tpc);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Sends message via the bridge channel.\r\n     * @param {string} to The id of the endpoint that should receive the\r\n     *      message. If \"\" the message will be sent to all participants.\r\n     * @param {object} payload The payload of the message.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails or there is no data channel created.\r\n     */\r\n    sendChannelMessage(to, payload) {\r\n        if (this._channel) {\r\n            this._channel.sendMessage(to, payload);\r\n        } else {\r\n            throw new Error('Channel support is disabled!');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Selects a new value for \"lastN\". The requested amount of videos are going\r\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\r\n     * all available videos.\r\n     * @param {number} value the new value for lastN.\r\n     */\r\n    setLastN(value) {\r\n        if (this._lastN !== value) {\r\n            this._lastN = value;\r\n            if (this._channel && this._channel.isOpen()) {\r\n                this._channel.sendSetLastNMessage(value);\r\n            }\r\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates if the endpoint id is currently included in the last N.\r\n     * @param {string} id The endpoint id that we check for last N.\r\n     * @returns {boolean} true if the endpoint id is in the last N or if we\r\n     * don't have bridge channel support, otherwise we return false.\r\n     */\r\n    isInLastN(id) {\r\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\r\n            || this._lastNEndpoints.indexOf(id) > -1;\r\n    }\r\n\r\n    /**\r\n     * Updates the target audio output device for all remote audio tracks.\r\n     *\r\n     * @param {string} deviceId - The device id of the audio ouput device to\r\n     * use for all remote tracks.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _updateAudioOutputForAudioTracks(deviceId) {\r\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\r\n\r\n        for (const track of remoteAudioTracks) {\r\n            track.setAudioOutput(deviceId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Receives events when forwarded sources had changed.\r\n     *\r\n     * @param {array} forwardedSources The new forwarded sources.\r\n     * @private\r\n     */\r\n     _onForwardedSourcesChanged(forwardedSources = []) {\r\n        const oldForwardedSources = this._forwardedSources || [];\r\n        let leavingForwardedSources = [];\r\n        let enteringForwardedSources = [];\r\n\r\n        this._forwardedSources = forwardedSources;\r\n\r\n        leavingForwardedSources = oldForwardedSources.filter(sourceName => !this.isInForwardedSources(sourceName));\r\n\r\n        enteringForwardedSources = forwardedSources.filter(\r\n            sourceName => oldForwardedSources.indexOf(sourceName) === -1);\r\n\r\n        this.conference.eventEmitter.emit(\r\n            JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED,\r\n            leavingForwardedSources,\r\n            enteringForwardedSources,\r\n            Date.now());\r\n    }\r\n\r\n    /**\r\n     * Indicates if the source name is currently included in the forwarded sources.\r\n     *\r\n     * @param {string} sourceName The source name that we check for forwarded sources.\r\n     * @returns {boolean} true if the source name is in the forwarded sources or if we don't have bridge channel\r\n     * support, otherwise we return false.\r\n     */\r\n     isInForwardedSources(sourceName) {\r\n        return !this._forwardedSources // forwardedSources not initialised yet.\r\n            || this._forwardedSources.indexOf(sourceName) > -1;\r\n    }\r\n}\r\n","/**\r\n * The errors for the JitsiTrack objects.\r\n */\r\n\r\n/**\r\n * An error which indicates that some of requested constraints in\r\n * getUserMedia call were not satisfied.\r\n */\r\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\r\n\r\n/**\r\n * A generic error which indicates an error occurred while selecting\r\n * a DesktopCapturerSource from the electron app.\r\n */\r\nexport const ELECTRON_DESKTOP_PICKER_ERROR\r\n    = 'gum.electron_desktop_picker_error';\r\n\r\n/**\r\n * An error which indicates a custom desktop picker could not be detected\r\n * for the electron app.\r\n */\r\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\r\n    = 'gum.electron_desktop_picker_not_found';\r\n\r\n/**\r\n * Generic getUserMedia error.\r\n */\r\nexport const GENERAL = 'gum.general';\r\n\r\n/**\r\n * An error which indicates that requested device was not found.\r\n */\r\nexport const NOT_FOUND = 'gum.not_found';\r\n\r\n/**\r\n * An error which indicates that user denied permission to share requested\r\n * device.\r\n */\r\nexport const PERMISSION_DENIED = 'gum.permission_denied';\r\n\r\n/**\r\n * Generic error for screensharing failure.\r\n */\r\nexport const SCREENSHARING_GENERIC_ERROR\r\n    = 'gum.screensharing_generic_error';\r\n\r\n/**\r\n * An error which indicates that user canceled screen sharing window\r\n * selection dialog.\r\n */\r\nexport const SCREENSHARING_USER_CANCELED\r\n    = 'gum.screensharing_user_canceled';\r\n\r\n/**\r\n * An error which indicates that track has been already disposed and cannot\r\n * be longer used.\r\n */\r\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\r\n\r\n/**\r\n * An error which indicates that track has no MediaStream associated.\r\n */\r\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\r\n\r\n/**\r\n * An error which indicates that requested video resolution is not supported\r\n * by a webcam.\r\n */\r\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\r\n","/**\r\n * The media track was removed to the conference.\r\n */\r\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\r\n\r\n/**\r\n * Audio levels of a this track was changed.\r\n * The first argument is a number with audio level value in range [0, 1].\r\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\r\n * connection which measured the audio level (one audio track can be added\r\n * to multiple peer connection at the same time). This argument is optional for\r\n * local tracks for which we can measure audio level without the peer\r\n * connection (the value will be <tt>undefined</tt>).\r\n *\r\n * NOTE The second argument should be treated as library internal and can be\r\n * removed at any time.\r\n */\r\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\r\n\r\n/**\r\n * The audio output of the track was changed.\r\n */\r\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\r\n\r\n/**\r\n * A media track mute status was changed.\r\n */\r\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\r\n\r\n/**\r\n * The video type(\"camera\" or \"desktop\") of the track was changed.\r\n */\r\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\r\n\r\n/**\r\n * Indicates that the track is not receiving any data even though we expect it\r\n * to receive data (i.e. the stream is not stopped).\r\n */\r\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\r\n\r\n/**\r\n * Indicates that the local audio track is not receiving any audio input from\r\n * the microphone that is currently selected.\r\n */\r\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\r\n","var parser = require('./parser');\r\nvar writer = require('./writer');\r\n\r\nexports.write = writer;\r\nexports.parse = parser.parse;\r\nexports.parseFmtpConfig = parser.parseFmtpConfig;\r\nexports.parseParams = parser.parseParams;\r\nexports.parsePayloads = parser.parsePayloads;\r\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\r\nexports.parseImageAttributes = parser.parseImageAttributes;\r\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\r\n","/**\r\n * The errors for the conference.\r\n */\r\n\r\n/**\r\n * Indicates that client must be authenticated to create the conference.\r\n */\r\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\r\n\r\n/**\r\n * Indicates that chat error occurred.\r\n */\r\nexport const CHAT_ERROR = 'conference.chatError';\r\n\r\n/**\r\n * Indicates that conference has been destroyed.\r\n */\r\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\r\n\r\n/**\r\n * Indicates that max users limit has been reached.\r\n */\r\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\r\n\r\n/**\r\n * Indicates that a connection error occurred when trying to join a conference.\r\n */\r\nexport const CONNECTION_ERROR = 'conference.connectionError';\r\n\r\n/**\r\n * Indicates that a connection error is due to not allowed,\r\n * occurred when trying to join a conference.\r\n */\r\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\r\n\r\n/**\r\n * Indicates that a connection error is due to not allowed,\r\n * occurred when trying to join a conference, only approved members are allowed to join.\r\n */\r\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\r\n\r\n/**\r\n * Indicates that a connection error is due to denied access to the room,\r\n * occurred after joining a lobby room and access is denied by the room moderators.\r\n */\r\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\r\n\r\n/**\r\n * Indicates that focus error happened.\r\n */\r\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\r\n\r\n/**\r\n * Indicates that focus left the conference.\r\n */\r\nexport const FOCUS_LEFT = 'conference.focusLeft';\r\n\r\n/**\r\n * Indicates that graceful shutdown happened.\r\n */\r\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\r\n\r\n/**\r\n * Indicates that the media connection has failed.\r\n */\r\nexport const ICE_FAILED = 'conference.iceFailed';\r\n\r\n/**\r\n * Indicates that the versions of the server side components are incompatible\r\n * with the client side.\r\n */\r\nexport const INCOMPATIBLE_SERVER_VERSIONS\r\n    = 'conference.incompatible_server_versions';\r\n\r\n/**\r\n * Indicates that offer/answer had failed.\r\n */\r\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\r\n\r\n/**\r\n * Indicates that password cannot be set for this conference.\r\n */\r\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\r\n\r\n/**\r\n * Indicates that a password is required in order to join the conference.\r\n */\r\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\r\n\r\n/**\r\n * Indicates that reservation system returned error.\r\n */\r\nexport const RESERVATION_ERROR = 'conference.reservationError';\r\n\r\n/**\r\n * Indicates that there is no available videobridge.\r\n */\r\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\r\n","// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nvar R = typeof Reflect === 'object' ? Reflect : null\r\nvar ReflectApply = R && typeof R.apply === 'function'\r\n  ? R.apply\r\n  : function ReflectApply(target, receiver, args) {\r\n    return Function.prototype.apply.call(target, receiver, args);\r\n  }\r\n\r\nvar ReflectOwnKeys\r\nif (R && typeof R.ownKeys === 'function') {\r\n  ReflectOwnKeys = R.ownKeys\r\n} else if (Object.getOwnPropertySymbols) {\r\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\r\n    return Object.getOwnPropertyNames(target)\r\n      .concat(Object.getOwnPropertySymbols(target));\r\n  };\r\n} else {\r\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\r\n    return Object.getOwnPropertyNames(target);\r\n  };\r\n}\r\n\r\nfunction ProcessEmitWarning(warning) {\r\n  if (console && console.warn) console.warn(warning);\r\n}\r\n\r\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\r\n  return value !== value;\r\n}\r\n\r\nfunction EventEmitter() {\r\n  EventEmitter.init.call(this);\r\n}\r\nmodule.exports = EventEmitter;\r\nmodule.exports.once = once;\r\n\r\n// Backwards-compat with node 0.10.x\r\nEventEmitter.EventEmitter = EventEmitter;\r\n\r\nEventEmitter.prototype._events = undefined;\r\nEventEmitter.prototype._eventsCount = 0;\r\nEventEmitter.prototype._maxListeners = undefined;\r\n\r\n// By default EventEmitters will print a warning if more than 10 listeners are\r\n// added to it. This is a useful default which helps finding memory leaks.\r\nvar defaultMaxListeners = 10;\r\n\r\nfunction checkListener(listener) {\r\n  if (typeof listener !== 'function') {\r\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\r\n  }\r\n}\r\n\r\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return defaultMaxListeners;\r\n  },\r\n  set: function(arg) {\r\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\r\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\r\n    }\r\n    defaultMaxListeners = arg;\r\n  }\r\n});\r\n\r\nEventEmitter.init = function() {\r\n\r\n  if (this._events === undefined ||\r\n      this._events === Object.getPrototypeOf(this)._events) {\r\n    this._events = Object.create(null);\r\n    this._eventsCount = 0;\r\n  }\r\n\r\n  this._maxListeners = this._maxListeners || undefined;\r\n};\r\n\r\n// Obviously not all Emitters should be limited to 10. This function allows\r\n// that to be increased. Set to zero for unlimited.\r\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\r\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\r\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\r\n  }\r\n  this._maxListeners = n;\r\n  return this;\r\n};\r\n\r\nfunction _getMaxListeners(that) {\r\n  if (that._maxListeners === undefined)\r\n    return EventEmitter.defaultMaxListeners;\r\n  return that._maxListeners;\r\n}\r\n\r\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\r\n  return _getMaxListeners(this);\r\n};\r\n\r\nEventEmitter.prototype.emit = function emit(type) {\r\n  var args = [];\r\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\r\n  var doError = (type === 'error');\r\n\r\n  var events = this._events;\r\n  if (events !== undefined)\r\n    doError = (doError && events.error === undefined);\r\n  else if (!doError)\r\n    return false;\r\n\r\n  // If there is no 'error' event listener then throw.\r\n  if (doError) {\r\n    var er;\r\n    if (args.length > 0)\r\n      er = args[0];\r\n    if (er instanceof Error) {\r\n      // Note: The comments on the `throw` lines are intentional, they show\r\n      // up in Node's output if this results in an unhandled exception.\r\n      throw er; // Unhandled 'error' event\r\n    }\r\n    // At least give some kind of context to the user\r\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\r\n    err.context = er;\r\n    throw err; // Unhandled 'error' event\r\n  }\r\n\r\n  var handler = events[type];\r\n\r\n  if (handler === undefined)\r\n    return false;\r\n\r\n  if (typeof handler === 'function') {\r\n    ReflectApply(handler, this, args);\r\n  } else {\r\n    var len = handler.length;\r\n    var listeners = arrayClone(handler, len);\r\n    for (var i = 0; i < len; ++i)\r\n      ReflectApply(listeners[i], this, args);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction _addListener(target, type, listener, prepend) {\r\n  var m;\r\n  var events;\r\n  var existing;\r\n\r\n  checkListener(listener);\r\n\r\n  events = target._events;\r\n  if (events === undefined) {\r\n    events = target._events = Object.create(null);\r\n    target._eventsCount = 0;\r\n  } else {\r\n    // To avoid recursion in the case that type === \"newListener\"! Before\r\n    // adding it to the listeners, first emit \"newListener\".\r\n    if (events.newListener !== undefined) {\r\n      target.emit('newListener', type,\r\n                  listener.listener ? listener.listener : listener);\r\n\r\n      // Re-assign `events` because a newListener handler could have caused the\r\n      // this._events to be assigned to a new object\r\n      events = target._events;\r\n    }\r\n    existing = events[type];\r\n  }\r\n\r\n  if (existing === undefined) {\r\n    // Optimize the case of one listener. Don't need the extra array object.\r\n    existing = events[type] = listener;\r\n    ++target._eventsCount;\r\n  } else {\r\n    if (typeof existing === 'function') {\r\n      // Adding the second element, need to change to array.\r\n      existing = events[type] =\r\n        prepend ? [listener, existing] : [existing, listener];\r\n      // If we've already got an array, just append.\r\n    } else if (prepend) {\r\n      existing.unshift(listener);\r\n    } else {\r\n      existing.push(listener);\r\n    }\r\n\r\n    // Check for listener leak\r\n    m = _getMaxListeners(target);\r\n    if (m > 0 && existing.length > m && !existing.warned) {\r\n      existing.warned = true;\r\n      // No error code for this since it is a Warning\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\r\n                          existing.length + ' ' + String(type) + ' listeners ' +\r\n                          'added. Use emitter.setMaxListeners() to ' +\r\n                          'increase limit');\r\n      w.name = 'MaxListenersExceededWarning';\r\n      w.emitter = target;\r\n      w.type = type;\r\n      w.count = existing.length;\r\n      ProcessEmitWarning(w);\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nEventEmitter.prototype.addListener = function addListener(type, listener) {\r\n  return _addListener(this, type, listener, false);\r\n};\r\n\r\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\r\n\r\nEventEmitter.prototype.prependListener =\r\n    function prependListener(type, listener) {\r\n      return _addListener(this, type, listener, true);\r\n    };\r\n\r\nfunction onceWrapper() {\r\n  if (!this.fired) {\r\n    this.target.removeListener(this.type, this.wrapFn);\r\n    this.fired = true;\r\n    if (arguments.length === 0)\r\n      return this.listener.call(this.target);\r\n    return this.listener.apply(this.target, arguments);\r\n  }\r\n}\r\n\r\nfunction _onceWrap(target, type, listener) {\r\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\r\n  var wrapped = onceWrapper.bind(state);\r\n  wrapped.listener = listener;\r\n  state.wrapFn = wrapped;\r\n  return wrapped;\r\n}\r\n\r\nEventEmitter.prototype.once = function once(type, listener) {\r\n  checkListener(listener);\r\n  this.on(type, _onceWrap(this, type, listener));\r\n  return this;\r\n};\r\n\r\nEventEmitter.prototype.prependOnceListener =\r\n    function prependOnceListener(type, listener) {\r\n      checkListener(listener);\r\n      this.prependListener(type, _onceWrap(this, type, listener));\r\n      return this;\r\n    };\r\n\r\n// Emits a 'removeListener' event if and only if the listener was removed.\r\nEventEmitter.prototype.removeListener =\r\n    function removeListener(type, listener) {\r\n      var list, events, position, i, originalListener;\r\n\r\n      checkListener(listener);\r\n\r\n      events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      list = events[type];\r\n      if (list === undefined)\r\n        return this;\r\n\r\n      if (list === listener || list.listener === listener) {\r\n        if (--this._eventsCount === 0)\r\n          this._events = Object.create(null);\r\n        else {\r\n          delete events[type];\r\n          if (events.removeListener)\r\n            this.emit('removeListener', type, list.listener || listener);\r\n        }\r\n      } else if (typeof list !== 'function') {\r\n        position = -1;\r\n\r\n        for (i = list.length - 1; i >= 0; i--) {\r\n          if (list[i] === listener || list[i].listener === listener) {\r\n            originalListener = list[i].listener;\r\n            position = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (position < 0)\r\n          return this;\r\n\r\n        if (position === 0)\r\n          list.shift();\r\n        else {\r\n          spliceOne(list, position);\r\n        }\r\n\r\n        if (list.length === 1)\r\n          events[type] = list[0];\r\n\r\n        if (events.removeListener !== undefined)\r\n          this.emit('removeListener', type, originalListener || listener);\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\r\n\r\nEventEmitter.prototype.removeAllListeners =\r\n    function removeAllListeners(type) {\r\n      var listeners, events, i;\r\n\r\n      events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      // not listening for removeListener, no need to emit\r\n      if (events.removeListener === undefined) {\r\n        if (arguments.length === 0) {\r\n          this._events = Object.create(null);\r\n          this._eventsCount = 0;\r\n        } else if (events[type] !== undefined) {\r\n          if (--this._eventsCount === 0)\r\n            this._events = Object.create(null);\r\n          else\r\n            delete events[type];\r\n        }\r\n        return this;\r\n      }\r\n\r\n      // emit removeListener for all listeners on all events\r\n      if (arguments.length === 0) {\r\n        var keys = Object.keys(events);\r\n        var key;\r\n        for (i = 0; i < keys.length; ++i) {\r\n          key = keys[i];\r\n          if (key === 'removeListener') continue;\r\n          this.removeAllListeners(key);\r\n        }\r\n        this.removeAllListeners('removeListener');\r\n        this._events = Object.create(null);\r\n        this._eventsCount = 0;\r\n        return this;\r\n      }\r\n\r\n      listeners = events[type];\r\n\r\n      if (typeof listeners === 'function') {\r\n        this.removeListener(type, listeners);\r\n      } else if (listeners !== undefined) {\r\n        // LIFO order\r\n        for (i = listeners.length - 1; i >= 0; i--) {\r\n          this.removeListener(type, listeners[i]);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nfunction _listeners(target, type, unwrap) {\r\n  var events = target._events;\r\n\r\n  if (events === undefined)\r\n    return [];\r\n\r\n  var evlistener = events[type];\r\n  if (evlistener === undefined)\r\n    return [];\r\n\r\n  if (typeof evlistener === 'function')\r\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\r\n\r\n  return unwrap ?\r\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\r\n}\r\n\r\nEventEmitter.prototype.listeners = function listeners(type) {\r\n  return _listeners(this, type, true);\r\n};\r\n\r\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\r\n  return _listeners(this, type, false);\r\n};\r\n\r\nEventEmitter.listenerCount = function(emitter, type) {\r\n  if (typeof emitter.listenerCount === 'function') {\r\n    return emitter.listenerCount(type);\r\n  } else {\r\n    return listenerCount.call(emitter, type);\r\n  }\r\n};\r\n\r\nEventEmitter.prototype.listenerCount = listenerCount;\r\nfunction listenerCount(type) {\r\n  var events = this._events;\r\n\r\n  if (events !== undefined) {\r\n    var evlistener = events[type];\r\n\r\n    if (typeof evlistener === 'function') {\r\n      return 1;\r\n    } else if (evlistener !== undefined) {\r\n      return evlistener.length;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nEventEmitter.prototype.eventNames = function eventNames() {\r\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\r\n};\r\n\r\nfunction arrayClone(arr, n) {\r\n  var copy = new Array(n);\r\n  for (var i = 0; i < n; ++i)\r\n    copy[i] = arr[i];\r\n  return copy;\r\n}\r\n\r\nfunction spliceOne(list, index) {\r\n  for (; index + 1 < list.length; index++)\r\n    list[index] = list[index + 1];\r\n  list.pop();\r\n}\r\n\r\nfunction unwrapListeners(arr) {\r\n  var ret = new Array(arr.length);\r\n  for (var i = 0; i < ret.length; ++i) {\r\n    ret[i] = arr[i].listener || arr[i];\r\n  }\r\n  return ret;\r\n}\r\n\r\nfunction once(emitter, name) {\r\n  return new Promise(function (resolve, reject) {\r\n    function eventListener() {\r\n      if (errorListener !== undefined) {\r\n        emitter.removeListener('error', errorListener);\r\n      }\r\n      resolve([].slice.call(arguments));\r\n    };\r\n    var errorListener;\r\n\r\n    // Adding an error listener is not optional because\r\n    // if an error is thrown on an event emitter we cannot\r\n    // guarantee that the actual event we are waiting will\r\n    // be fired. The result could be a silent way to create\r\n    // memory or file descriptor leaks, which is something\r\n    // we should avoid.\r\n    if (name !== 'error') {\r\n      errorListener = function errorListener(err) {\r\n        emitter.removeListener(name, eventListener);\r\n        reject(err);\r\n      };\r\n\r\n      emitter.once('error', errorListener);\r\n    }\r\n\r\n    emitter.once(name, eventListener);\r\n  });\r\n}\r\n","/* global $ */\r\n\r\nimport browser from '../browser';\r\n\r\nimport SDPUtil from './SDPUtil';\r\n\r\n/**\r\n *\r\n * @param sdp\r\n */\r\nexport default function SDP(sdp) {\r\n    const media = sdp.split('\\r\\nm=');\r\n\r\n    for (let i = 1, length = media.length; i < length; i++) {\r\n        let mediaI = `m=${media[i]}`;\r\n\r\n        if (i !== length - 1) {\r\n            mediaI += '\\r\\n';\r\n        }\r\n        media[i] = mediaI;\r\n    }\r\n    const session = `${media.shift()}\\r\\n`;\r\n\r\n    this.media = media;\r\n    this.raw = session + media.join('');\r\n    this.session = session;\r\n}\r\n\r\n/**\r\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\r\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\r\n * failure. The flag is used in the automated testing.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.failICE = false;\r\n\r\n/**\r\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.removeTcpCandidates = false;\r\n\r\n/**\r\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.removeUdpCandidates = false;\r\n\r\n/**\r\n * Returns map of MediaChannel mapped per channel idx.\r\n */\r\nSDP.prototype.getMediaSsrcMap = function() {\r\n    const mediaSSRCs = {};\r\n\r\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\r\n        const mid\r\n            = SDPUtil.parseMID(\r\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\r\n        const media = {\r\n            mediaindex,\r\n            mid,\r\n            ssrcs: {},\r\n            ssrcGroups: []\r\n        };\r\n\r\n        mediaSSRCs[mediaindex] = media;\r\n\r\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\r\n            const linessrc = line.substring(7).split(' ')[0];\r\n\r\n            // allocate new ChannelSsrc\r\n\r\n            if (!media.ssrcs[linessrc]) {\r\n                media.ssrcs[linessrc] = {\r\n                    ssrc: linessrc,\r\n                    lines: []\r\n                };\r\n            }\r\n            media.ssrcs[linessrc].lines.push(line);\r\n        });\r\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\r\n            const idx = line.indexOf(' ');\r\n            const semantics = line.substr(0, idx).substr(13);\r\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\r\n\r\n            if (ssrcs.length) {\r\n                media.ssrcGroups.push({\r\n                    semantics,\r\n                    ssrcs\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return mediaSSRCs;\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if this SDP contains given SSRC.\r\n * @param ssrc the ssrc to check.\r\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\r\n */\r\nSDP.prototype.containsSSRC = function(ssrc) {\r\n    // FIXME this code is really strange - improve it if you can\r\n    const medias = this.getMediaSsrcMap();\r\n    let result = false;\r\n\r\n    Object.keys(medias).forEach(mediaindex => {\r\n        if (result) {\r\n            return;\r\n        }\r\n        if (medias[mediaindex].ssrcs[ssrc]) {\r\n            result = true;\r\n        }\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\n// add content's to a jingle element\r\nSDP.prototype.toJingle = function(elem, thecreator) {\r\n    // https://xmpp.org/extensions/xep-0338.html\r\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\r\n        const parts = line.split(' ');\r\n        const semantics = parts.shift().substr(8);\r\n\r\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\r\n            semantics });\r\n        for (let j = 0; j < parts.length; j++) {\r\n            elem.c('content', { name: parts[j] }).up();\r\n        }\r\n        elem.up();\r\n    });\r\n\r\n    for (let i = 0; i < this.media.length; i++) {\r\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\r\n\r\n        if (!(mline.media === 'audio'\r\n              || mline.media === 'video'\r\n              || mline.media === 'application')) {\r\n            continue; // eslint-disable-line no-continue\r\n        }\r\n\r\n        let ssrc;\r\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\r\n\r\n        if (assrcline) {\r\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\r\n        } else {\r\n            ssrc = false;\r\n        }\r\n\r\n        elem.c('content', { creator: thecreator,\r\n            name: mline.media });\r\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\r\n\r\n        if (amidline) {\r\n            // prefer identifier from a=mid if present\r\n            const mid = SDPUtil.parseMID(amidline);\r\n\r\n            elem.attrs({ name: mid });\r\n        }\r\n\r\n        if (mline.media === 'audio' || mline.media === 'video') {\r\n            elem.c('description',\r\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\r\n                    media: mline.media });\r\n            if (ssrc) {\r\n                elem.attrs({ ssrc });\r\n            }\r\n            for (let j = 0; j < mline.fmt.length; j++) {\r\n                const rtpmap\r\n                    = SDPUtil.findLine(\r\n                        this.media[i],\r\n                        `a=rtpmap:${mline.fmt[j]}`);\r\n\r\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\r\n\r\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\r\n                // value=bar/>\r\n                const afmtpline\r\n                    = SDPUtil.findLine(\r\n                        this.media[i],\r\n                        `a=fmtp:${mline.fmt[j]}`);\r\n\r\n                if (afmtpline) {\r\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    for (let k = 0; k < fmtpParameters.length; k++) {\r\n                        elem.c('parameter', fmtpParameters[k]).up();\r\n                    }\r\n                }\r\n\r\n                // XEP-0293 -- map a=rtcp-fb\r\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\r\n\r\n                elem.up();\r\n            }\r\n\r\n            if (ssrc) {\r\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\r\n\r\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\r\n                    elem.c('source', {\r\n                        ssrc: availableSsrc,\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n\r\n                    ssrcParameters.forEach(ssrcSdpLine => {\r\n                        // get everything after first space\r\n                        const idx = ssrcSdpLine.indexOf(' ');\r\n                        const kv = ssrcSdpLine.substr(idx + 1);\r\n\r\n                        elem.c('parameter');\r\n                        if (kv.indexOf(':') === -1) {\r\n                            elem.attrs({ name: kv });\r\n                        } else {\r\n                            const name = kv.split(':', 2)[0];\r\n\r\n                            elem.attrs({ name });\r\n\r\n                            let v = kv.split(':', 2)[1];\r\n\r\n                            v = SDPUtil.filterSpecialChars(v);\r\n                            elem.attrs({ value: v });\r\n                        }\r\n                        elem.up();\r\n                    });\r\n\r\n                    elem.up();\r\n                }\r\n\r\n                // XEP-0339 handle ssrc-group attributes\r\n                const ssrcGroupLines\r\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\r\n\r\n                ssrcGroupLines.forEach(line => {\r\n                    const idx = line.indexOf(' ');\r\n                    const semantics = line.substr(0, idx).substr(13);\r\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\r\n\r\n                    if (ssrcs.length) {\r\n                        elem.c('ssrc-group', { semantics,\r\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\r\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\r\n                        elem.up();\r\n                    }\r\n                });\r\n            }\r\n\r\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid');\r\n\r\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\r\n                // Map a line which looks like \"a=rid:2 send\" to just\r\n                // the rid (\"2\")\r\n                const rids = ridLines\r\n                    .map(ridLine => ridLine.split(':')[1])\r\n                    .map(ridInfo => ridInfo.split(' ')[0]);\r\n\r\n                rids.forEach(rid => {\r\n                    elem.c('source', {\r\n                        rid,\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n                    elem.up();\r\n                });\r\n                const unifiedSimulcast\r\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast');\r\n\r\n                if (unifiedSimulcast) {\r\n                    elem.c('rid-group', {\r\n                        semantics: 'SIM',\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n                    rids.forEach(rid => {\r\n                        elem.c('source', { rid }).up();\r\n                    });\r\n                    elem.up();\r\n                }\r\n            }\r\n\r\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\r\n                elem.c('rtcp-mux').up();\r\n            }\r\n\r\n            // XEP-0293 -- map a=rtcp-fb:*\r\n            this.rtcpFbToJingle(i, elem, '*');\r\n\r\n            // XEP-0294\r\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\r\n\r\n            for (let j = 0; j < extmapLines.length; j++) {\r\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\r\n\r\n                elem.c('rtp-hdrext', {\r\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\r\n                    uri: extmap.uri,\r\n                    id: extmap.value\r\n                });\r\n\r\n                // eslint-disable-next-line max-depth\r\n                if (extmap.hasOwnProperty('direction')) {\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    switch (extmap.direction) {\r\n                    case 'sendonly':\r\n                        elem.attrs({ senders: 'responder' });\r\n                        break;\r\n                    case 'recvonly':\r\n                        elem.attrs({ senders: 'initiator' });\r\n                        break;\r\n                    case 'sendrecv':\r\n                        elem.attrs({ senders: 'both' });\r\n                        break;\r\n                    case 'inactive':\r\n                        elem.attrs({ senders: 'none' });\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // TODO: handle params\r\n                elem.up();\r\n            }\r\n            elem.up(); // end of description\r\n        }\r\n\r\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\r\n        this.transportToJingle(i, elem);\r\n\r\n        const m = this.media[i];\r\n\r\n        if (SDPUtil.findLine(m, 'a=sendrecv', this.session)) {\r\n            elem.attrs({ senders: 'both' });\r\n        } else if (SDPUtil.findLine(m, 'a=sendonly', this.session)) {\r\n            elem.attrs({ senders: 'initiator' });\r\n        } else if (SDPUtil.findLine(m, 'a=recvonly', this.session)) {\r\n            elem.attrs({ senders: 'responder' });\r\n        } else if (SDPUtil.findLine(m, 'a=inactive', this.session)) {\r\n            elem.attrs({ senders: 'none' });\r\n        }\r\n\r\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\r\n        // The port is automatically set to 0 when bundle-only is used.\r\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\r\n            // estos hack to reject an m-line\r\n            elem.attrs({ senders: 'rejected' });\r\n        }\r\n        elem.up(); // end of content\r\n    }\r\n    elem.up();\r\n\r\n    return elem;\r\n};\r\n\r\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\r\n    elem.c('transport');\r\n\r\n    // XEP-0343 DTLS/SCTP\r\n    const sctpmap\r\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\r\n\r\n    if (sctpmap) {\r\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\r\n\r\n        elem.c('sctpmap', {\r\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\r\n            number: sctpAttrs[0], /* SCTP port */\r\n            protocol: sctpAttrs[1] /* protocol */\r\n        });\r\n\r\n        // Optional stream count attribute\r\n        if (sctpAttrs.length > 2) {\r\n            elem.attrs({ streams: sctpAttrs[2] });\r\n        }\r\n        elem.up();\r\n    }\r\n\r\n    // XEP-0320\r\n    const fingerprints\r\n        = SDPUtil.findLines(\r\n            this.media[mediaindex],\r\n            'a=fingerprint:',\r\n            this.session);\r\n\r\n    fingerprints.forEach(line => {\r\n        const fingerprint = SDPUtil.parseFingerprint(line);\r\n\r\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\r\n        elem.c('fingerprint').t(fingerprint.fingerprint);\r\n        delete fingerprint.fingerprint;\r\n\r\n        const setupLine\r\n            = SDPUtil.findLine(\r\n                this.media[mediaindex],\r\n                'a=setup:',\r\n                this.session);\r\n\r\n        if (setupLine) {\r\n            fingerprint.setup = setupLine.substr(8);\r\n        }\r\n        elem.attrs(fingerprint);\r\n        elem.up(); // end of fingerprint\r\n    });\r\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\r\n\r\n    if (iceParameters) {\r\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n        elem.attrs(iceParameters);\r\n\r\n        // XEP-0176\r\n        const candidateLines\r\n            = SDPUtil.findLines(\r\n                this.media[mediaindex],\r\n                'a=candidate:',\r\n                this.session);\r\n\r\n        candidateLines.forEach(line => { // add any a=candidate lines\r\n            const candidate = SDPUtil.candidateToJingle(line);\r\n\r\n            if (this.failICE) {\r\n                candidate.ip = '1.1.1.1';\r\n            }\r\n            const protocol\r\n                = candidate && typeof candidate.protocol === 'string'\r\n                    ? candidate.protocol.toLowerCase()\r\n                    : '';\r\n\r\n            if ((this.removeTcpCandidates\r\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\r\n                || (this.removeUdpCandidates && protocol === 'udp')) {\r\n                return;\r\n            }\r\n            elem.c('candidate', candidate).up();\r\n        });\r\n    }\r\n    elem.up(); // end of transport\r\n};\r\n\r\n// XEP-0293\r\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\r\n    const lines\r\n        = SDPUtil.findLines(\r\n            this.media[mediaindex],\r\n            `a=rtcp-fb:${payloadtype}`);\r\n\r\n    lines.forEach(line => {\r\n        const feedback = SDPUtil.parseRTCPFB(line);\r\n\r\n        if (feedback.type === 'trr-int') {\r\n            elem.c('rtcp-fb-trr-int', {\r\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\r\n                value: feedback.params[0]\r\n            });\r\n            elem.up();\r\n        } else {\r\n            elem.c('rtcp-fb', {\r\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\r\n                type: feedback.type\r\n            });\r\n            if (feedback.params.length > 0) {\r\n                elem.attrs({ 'subtype': feedback.params[0] });\r\n            }\r\n            elem.up();\r\n        }\r\n    });\r\n};\r\n\r\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\r\n    let sdp = '';\r\n    const feedbackElementTrrInt\r\n        = elem.find(\r\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\r\n\r\n    if (feedbackElementTrrInt.length) {\r\n        sdp += 'a=rtcp-fb:* trr-int ';\r\n        if (feedbackElementTrrInt.attr('value')) {\r\n            sdp += feedbackElementTrrInt.attr('value');\r\n        } else {\r\n            sdp += '0';\r\n        }\r\n        sdp += '\\r\\n';\r\n    }\r\n\r\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\r\n\r\n    feedbackElements.each((_, fb) => {\r\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\r\n        if (fb.hasAttribute('subtype')) {\r\n            sdp += ` ${fb.getAttribute('subtype')}`;\r\n        }\r\n        sdp += '\\r\\n';\r\n    });\r\n\r\n    return sdp;\r\n};\r\n\r\n// construct an SDP from a jingle stanza\r\nSDP.prototype.fromJingle = function(jingle) {\r\n    const sessionId = Date.now();\r\n\r\n    // Use a unique session id for every TPC.\r\n    this.raw = 'v=0\\r\\n'\r\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\r\n        + 's=-\\r\\n'\r\n        + 't=0 0\\r\\n';\r\n\r\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\r\n    // #section-8\r\n    const groups\r\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\r\n\r\n    if (groups.length) {\r\n        groups.each((idx, group) => {\r\n            const contents\r\n                = $(group)\r\n                    .find('>content')\r\n                    .map((_, content) => content.getAttribute('name'))\r\n                    .get();\r\n\r\n            if (contents.length > 0) {\r\n                this.raw\r\n                    += `a=group:${\r\n                        group.getAttribute('semantics')\r\n                            || group.getAttribute('type')} ${\r\n                        contents.join(' ')}\\r\\n`;\r\n            }\r\n        });\r\n    }\r\n\r\n    this.session = this.raw;\r\n    jingle.find('>content').each((_, content) => {\r\n        const m = this.jingle2media($(content));\r\n\r\n        this.media.push(m);\r\n    });\r\n\r\n    // reconstruct msid-semantic -- apparently not necessary\r\n    /*\r\n     var msid = SDPUtil.parseSSRC(this.raw);\r\n     if (msid.hasOwnProperty('mslabel')) {\r\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\r\n     }\r\n     */\r\n\r\n    this.raw = this.session + this.media.join('');\r\n};\r\n\r\n// translate a jingle content element into an an SDP media part\r\nSDP.prototype.jingle2media = function(content) {\r\n    const desc = content.find('>description');\r\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\r\n    let sdp = '';\r\n    const sctp = transport.find(\r\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\r\n\r\n    const media = { media: desc.attr('media') };\r\n\r\n    media.port = '1';\r\n    if (content.attr('senders') === 'rejected') {\r\n        // estos hack to reject an m-line.\r\n        media.port = '0';\r\n    }\r\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\r\n        media.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\r\n    } else {\r\n        media.proto = 'RTP/AVPF';\r\n    }\r\n    if (sctp.length) {\r\n        sdp += `m=application ${media.port} DTLS/SCTP ${\r\n            sctp.attr('number')}\\r\\n`;\r\n        sdp += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\r\n\r\n        const streamCount = sctp.attr('streams');\r\n\r\n        if (streamCount) {\r\n            sdp += ` ${streamCount}\\r\\n`;\r\n        } else {\r\n            sdp += '\\r\\n';\r\n        }\r\n    } else {\r\n        media.fmt\r\n            = desc\r\n                .find('>payload-type')\r\n                .map((_, payloadType) => payloadType.getAttribute('id'))\r\n                .get();\r\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\r\n    }\r\n\r\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\r\n    if (!sctp.length) {\r\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\r\n    }\r\n\r\n    // XEP-0176 ICE parameters\r\n    if (transport.length) {\r\n        if (transport.attr('ufrag')) {\r\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\r\n        }\r\n        if (transport.attr('pwd')) {\r\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\r\n        }\r\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\r\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\r\n            sdp += ` ${$(fingerprint).text()}`;\r\n            sdp += '\\r\\n';\r\n            if (fingerprint.hasAttribute('setup')) {\r\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\r\n            }\r\n        });\r\n    }\r\n\r\n    // XEP-0176 ICE candidates\r\n    transport.find('>candidate')\r\n        .each((_, candidate) => {\r\n            let protocol = candidate.getAttribute('protocol');\r\n\r\n            protocol\r\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\r\n\r\n            if ((this.removeTcpCandidates\r\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\r\n                || (this.removeUdpCandidates && protocol === 'udp')) {\r\n                return;\r\n            } else if (this.failICE) {\r\n                candidate.setAttribute('ip', '1.1.1.1');\r\n            }\r\n\r\n            sdp += SDPUtil.candidateFromJingle(candidate);\r\n        });\r\n\r\n    switch (content.attr('senders')) {\r\n    case 'initiator':\r\n        sdp += 'a=sendonly\\r\\n';\r\n        break;\r\n    case 'responder':\r\n        sdp += 'a=recvonly\\r\\n';\r\n        break;\r\n    case 'none':\r\n        sdp += 'a=inactive\\r\\n';\r\n        break;\r\n    case 'both':\r\n        sdp += 'a=sendrecv\\r\\n';\r\n        break;\r\n    }\r\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\r\n\r\n    // <description><rtcp-mux/></description>\r\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\r\n    // though\r\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\r\n    if (desc.find('>rtcp-mux').length) {\r\n        sdp += 'a=rtcp-mux\\r\\n';\r\n    }\r\n\r\n    desc.find('>payload-type').each((_, payloadType) => {\r\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\r\n        if ($(payloadType).find('>parameter').length) {\r\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\r\n            sdp\r\n                += $(payloadType)\r\n                    .find('>parameter')\r\n                    .map((__, parameter) => {\r\n                        const name = parameter.getAttribute('name');\r\n\r\n                        return (\r\n                            (name ? `${name}=` : '')\r\n                                + parameter.getAttribute('value'));\r\n                    })\r\n                    .get()\r\n                    .join('; ');\r\n            sdp += '\\r\\n';\r\n        }\r\n\r\n        // xep-0293\r\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\r\n    });\r\n\r\n    // xep-0293\r\n    sdp += this.rtcpFbFromJingle(desc, '*');\r\n\r\n    // xep-0294\r\n    desc\r\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\r\n        .each((_, hdrExt) => {\r\n            sdp\r\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\r\n                    hdrExt.getAttribute('uri')}\\r\\n`;\r\n        });\r\n\r\n    // XEP-0339 handle ssrc-group attributes\r\n    desc\r\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n        .each((_, ssrcGroup) => {\r\n            const semantics = ssrcGroup.getAttribute('semantics');\r\n            const ssrcs\r\n                = $(ssrcGroup)\r\n                    .find('>source')\r\n                    .map((__, source) => source.getAttribute('ssrc'))\r\n                    .get();\r\n\r\n            if (ssrcs.length) {\r\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\r\n            }\r\n        });\r\n\r\n    // XEP-0339 handle source attributes\r\n    desc\r\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n        .each((_, source) => {\r\n            const ssrc = source.getAttribute('ssrc');\r\n\r\n            $(source)\r\n                .find('>parameter')\r\n                .each((__, parameter) => {\r\n                    const name = parameter.getAttribute('name');\r\n                    let value = parameter.getAttribute('value');\r\n\r\n                    value = SDPUtil.filterSpecialChars(value);\r\n                    sdp += `a=ssrc:${ssrc} ${name}`;\r\n                    if (value && value.length) {\r\n                        sdp += `:${value}`;\r\n                    }\r\n                    sdp += '\\r\\n';\r\n                });\r\n        });\r\n\r\n    return sdp;\r\n};\r\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\r\n\r\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\r\n\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\r\n    = 'Video resolution is not supported: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\r\n    = 'User canceled screen sharing prompt';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\r\n    = 'Unknown error from screensharing';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\r\n    = 'Unkown error from desktop picker';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\r\n    = 'Failed to detect desktop picker';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\r\n    = 'Generic getUserMedia error';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\r\n    = 'User denied permission to use device(s): ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\r\n    = 'Requested device(s) was/were not found: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\r\n    = 'Constraint could not be satisfied: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\r\n    = 'Track has been already disposed';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\r\n    = 'Track does not have an associated Media Stream';\r\n\r\n// FIXME: Using prototype inheritance because otherwise instanceof is not\r\n// working properly (see https://github.com/babel/babel/issues/3083)\r\n\r\n/**\r\n *\r\n * Represents an error that occurred to a JitsiTrack. Can represent various\r\n * types of errors. For error descriptions (@see JitsiTrackErrors).\r\n *\r\n * @extends Error\r\n *\r\n *\r\n * @constructor\r\n * @param {Object|string} error - error object or error name\r\n * @param {Object|string} (options) - getUserMedia constraints object or\r\n * error message\r\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\r\n * list of getUserMedia requested devices\r\n */\r\nfunction JitsiTrackError(error, options, devices) {\r\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\r\n        /**\r\n         * Additional information about original getUserMedia error\r\n         * and constraints.\r\n         * @type {{\r\n         *     error: Object,\r\n         *     constraints: Object,\r\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\r\n         * }}\r\n         */\r\n        this.gum = {\r\n            error,\r\n            constraints: options,\r\n            devices: devices && Array.isArray(devices)\r\n                ? devices.slice(0)\r\n                : undefined\r\n        };\r\n\r\n        switch (error.name) {\r\n        case 'NotAllowedError':\r\n        case 'PermissionDeniedError':\r\n        case 'SecurityError':\r\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\r\n            this.message\r\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                    + (this.gum.devices || []).join(', ');\r\n            break;\r\n        case 'DevicesNotFoundError':\r\n        case 'NotFoundError':\r\n            this.name = JitsiTrackErrors.NOT_FOUND;\r\n            this.message\r\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                    + (this.gum.devices || []).join(', ');\r\n            break;\r\n        case 'ConstraintNotSatisfiedError':\r\n        case 'OverconstrainedError': {\r\n            const constraintName = error.constraintName || error.constraint;\r\n\r\n            // we treat deviceId as unsupported resolution, as we want to\r\n            // retry and finally if everything fails to remove deviceId from\r\n            // mandatory constraints\r\n            if (options\r\n                    && options.video\r\n                    && (!devices || devices.indexOf('video') > -1)\r\n                    && (constraintName === 'minWidth'\r\n                        || constraintName === 'maxWidth'\r\n                        || constraintName === 'minHeight'\r\n                        || constraintName === 'maxHeight'\r\n                        || constraintName === 'width'\r\n                        || constraintName === 'height'\r\n                        || constraintName === 'deviceId')) {\r\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\r\n                this.message\r\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                        + getResolutionFromFailedConstraint(\r\n                            constraintName,\r\n                            options);\r\n            } else {\r\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\r\n                this.message\r\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                        + error.constraintName;\r\n            }\r\n            break;\r\n        }\r\n\r\n        default:\r\n            this.name = JitsiTrackErrors.GENERAL;\r\n            this.message\r\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\r\n            break;\r\n        }\r\n    } else if (typeof error === 'string') {\r\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\r\n            this.name = error;\r\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\r\n        } else {\r\n            // this is some generic error that do not fit any of our\r\n            // pre-defined errors, so don't give it any specific name, just\r\n            // store message\r\n            this.message = error;\r\n        }\r\n    } else {\r\n        throw new Error('Invalid arguments');\r\n    }\r\n\r\n    this.stack = error.stack || (new Error()).stack;\r\n}\r\n\r\nJitsiTrackError.prototype = Object.create(Error.prototype);\r\nJitsiTrackError.prototype.constructor = JitsiTrackError;\r\n\r\n/**\r\n * Gets failed resolution constraint from corresponding object.\r\n * @param {string} failedConstraintName\r\n * @param {Object} constraints\r\n * @returns {string|number}\r\n */\r\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\r\n    if (constraints && constraints.video && constraints.video.mandatory) {\r\n        switch (failedConstraintName) {\r\n        case 'width':\r\n            return constraints.video.mandatory.minWidth;\r\n        case 'height':\r\n            return constraints.video.mandatory.minHeight;\r\n        default:\r\n            return constraints.video.mandatory[failedConstraintName] || '';\r\n        }\r\n    }\r\n\r\n    return '';\r\n}\r\n\r\nexport default JitsiTrackError;\r\n","import EventEmitter from 'events';\r\n\r\n/**\r\n * The class implements basic event operations - add/remove listener.\r\n * NOTE: The purpose of the class is to be extended in order to add\r\n * this functionality to other classes.\r\n */\r\nexport default class Listenable {\r\n    /**\r\n     * Creates new instance.\r\n     * @param {EventEmitter} eventEmitter\r\n     * @constructor\r\n     */\r\n    constructor(eventEmitter = new EventEmitter()) {\r\n        this.eventEmitter = eventEmitter;\r\n\r\n        // aliases for addListener/removeListener\r\n        this.addEventListener = this.on = this.addListener;\r\n        this.removeEventListener = this.off = this.removeListener;\r\n    }\r\n\r\n    /**\r\n     * Adds new listener.\r\n     * @param {String} eventName the name of the event\r\n     * @param {Function} listener the listener.\r\n     * @returns {Function} - The unsubscribe function.\r\n     */\r\n    addListener(eventName, listener) {\r\n        this.eventEmitter.addListener(eventName, listener);\r\n\r\n        return () => this.removeEventListener(eventName, listener);\r\n    }\r\n\r\n    /**\r\n     * Removes listener.\r\n     * @param {String} eventName the name of the event that triggers the\r\n     * listener\r\n     * @param {Function} listener the listener.\r\n     */\r\n    removeListener(eventName, listener) {\r\n        this.eventEmitter.removeListener(eventName, listener);\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport browser from '../browser';\r\n\r\nconst logger = getLogger('FeatureFlags');\r\n\r\n/**\r\n * A global module for accessing information about different feature flags state.\r\n */\r\nclass FeatureFlags {\r\n    /**\r\n     * Configures the module.\r\n     *\r\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\r\n     */\r\n    init(flags) {\r\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\r\n        this._sendMultipleVideoStreams = Boolean(flags.sendMultipleVideoStreams);\r\n\r\n        // For Chromium, check if Unified plan is enabled.\r\n        this._usesUnifiedPlan = browser.usesUnifiedPlan()\r\n            && (!browser.isChromiumBased() || (flags.enableUnifiedOnChrome ? flags.enableUnifiedOnChrome : true));\r\n\r\n        logger.info(`Source name signaling: ${this._sourceNameSignaling},`\r\n            + ` Send multiple video streams: ${this._sendMultipleVideoStreams},`\r\n            + ` uses Unified plan: ${this._usesUnifiedPlan}`);\r\n    }\r\n\r\n    /**\r\n     * Checks if multiple local video streams support is enabled.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isMultiStreamSupportEnabled() {\r\n        return this._sourceNameSignaling && this._sendMultipleVideoStreams && this._usesUnifiedPlan;\r\n    }\r\n\r\n    /**\r\n     * Checks if the source name signaling is enabled.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isSourceNameSignalingEnabled() {\r\n        return this._sourceNameSignaling;\r\n    }\r\n}\r\n\r\nexport default new FeatureFlags();","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\r\n// this values needs to be as they are becuse they are going to analytics,\r\n// callstats, etc.\r\n\r\nexport const CHROME = 'chrome';\r\n\r\nexport const OPERA = 'opera';\r\n\r\nexport const FIREFOX = 'firefox';\r\n\r\nexport const INTERNET_EXPLORER = 'iexplorer';\r\n\r\nexport const SAFARI = 'safari';\r\n\r\nexport const NWJS = 'nwjs';\r\n\r\nexport const ELECTRON = 'electron';\r\n\r\nexport const REACT_NATIVE = 'react-native';\r\n\r\nexport const UNKNOWN = 'unknown';\r\n","import Bowser from 'bowser';\r\n\r\nimport {\r\n    CHROME,\r\n    OPERA,\r\n    FIREFOX,\r\n    INTERNET_EXPLORER,\r\n    SAFARI,\r\n    NWJS,\r\n    ELECTRON,\r\n    REACT_NATIVE,\r\n    UNKNOWN\r\n} from './browsers';\r\n\r\n/**\r\n * Maps the names of the browsers from bowser to the internal names defined in\r\n * ./browsers.js\r\n */\r\nconst bowserNameToJitsiName = {\r\n    'Chrome': CHROME,\r\n    'Chromium': CHROME,\r\n    'Opera': OPERA,\r\n    'Firefox': FIREFOX,\r\n    'Internet Explorer': INTERNET_EXPLORER,\r\n    'Safari': SAFARI\r\n};\r\n\r\n/**\r\n * Detects a Chromium based environent.\r\n *\r\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\r\n * it too. We need to check explicitly for chromium based Edge first and then\r\n * detect other chromium based browsers.\r\n *\r\n * @returns {Object|undefined} - The name (CHROME) and version.\r\n */\r\nfunction _detectChromiumBased() {\r\n    const userAgent = navigator.userAgent;\r\n    const browserInfo = {\r\n        name: UNKNOWN,\r\n        version: undefined\r\n    };\r\n\r\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\r\n        // Edge is currenly supported only on desktop and android.\r\n        if (userAgent.match(/Edg(A?)/)) {\r\n            // Compare the underlying chromium version.\r\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\r\n\r\n            if (Number.parseInt(version, 10) > 72) {\r\n                browserInfo.name = CHROME;\r\n                browserInfo.version = version;\r\n            }\r\n        } else {\r\n            browserInfo.name = CHROME;\r\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\r\n        }\r\n    }\r\n\r\n    return browserInfo;\r\n}\r\n\r\n/**\r\n * Detects Electron environment.\r\n *\r\n * @returns {Object|undefined} - The name (ELECTRON) and version.\r\n */\r\nfunction _detectElectron() {\r\n    const userAgent = navigator.userAgent;\r\n\r\n    if (userAgent.match(/Electron/)) {\r\n        const version = userAgent.match(/Electron\\/([\\d.]+)/)[1];\r\n\r\n        return {\r\n            name: ELECTRON,\r\n            version\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Detects NWJS environment.\r\n *\r\n * @returns {Object|undefined} - The name (NWJS) and version.\r\n */\r\nfunction _detectNWJS() {\r\n    const userAgent = navigator.userAgent;\r\n\r\n    if (userAgent.match(/JitsiMeetNW/)) {\r\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\r\n\r\n        return {\r\n            name: NWJS,\r\n            version\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Detects React Native environment.\r\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\r\n */\r\nfunction _detectReactNative() {\r\n    const match\r\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\r\n    let version;\r\n\r\n    // If we're remote debugging a React Native app, it may be treated as\r\n    // Chrome. Check navigator.product as well and always return some version\r\n    // even if we can't get the real one.\r\n\r\n    if (match || navigator.product === 'ReactNative') {\r\n        let name;\r\n\r\n        if (match && match.length > 2) {\r\n            name = match[1];\r\n            version = match[2];\r\n        }\r\n        name || (name = 'react-native');\r\n        version || (version = 'unknown');\r\n\r\n        return {\r\n            name: REACT_NATIVE,\r\n            version\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Returns information about the current browser.\r\n * @param {Object} - The bowser instance.\r\n * @returns {Object} - The name and version of the browser.\r\n */\r\nfunction _detect(bowser) {\r\n    let browserInfo;\r\n    const detectors = [\r\n        _detectReactNative,\r\n        _detectElectron,\r\n        _detectNWJS\r\n    ];\r\n\r\n    // Try all browser detectors\r\n    for (let i = 0; i < detectors.length; i++) {\r\n        browserInfo = detectors[i]();\r\n        if (browserInfo) {\r\n            return browserInfo;\r\n        }\r\n    }\r\n\r\n    const name = bowser.getBrowserName();\r\n\r\n    if (name in bowserNameToJitsiName) {\r\n        return {\r\n            name: bowserNameToJitsiName[name],\r\n            version: bowser.getBrowserVersion()\r\n        };\r\n    }\r\n\r\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\r\n    browserInfo = _detectChromiumBased();\r\n    if (browserInfo) {\r\n        return browserInfo;\r\n    }\r\n\r\n    return {\r\n        name: UNKNOWN,\r\n        version: undefined\r\n    };\r\n}\r\n\r\n/**\r\n * Implements browser detection.\r\n */\r\nexport default class BrowserDetection {\r\n    /**\r\n     * Creates new BrowserDetection instance.\r\n     *\r\n     * @param {Object} [browserInfo] - Information about the browser.\r\n     * @param {string} browserInfo.name - The name of the browser.\r\n     * @param {string} browserInfo.version - The version of the browser.\r\n     */\r\n    constructor(browserInfo) {\r\n        let name, version;\r\n\r\n        this._bowser = Bowser.getParser(navigator.userAgent);\r\n        if (typeof browserInfo === 'undefined') {\r\n            const detectedBrowserInfo = _detect(this._bowser);\r\n\r\n            name = detectedBrowserInfo.name;\r\n            version = detectedBrowserInfo.version;\r\n        } else if (browserInfo.name in bowserNameToJitsiName) {\r\n            name = bowserNameToJitsiName[browserInfo.name];\r\n            version = browserInfo.version;\r\n        } else {\r\n            name = UNKNOWN;\r\n            version = undefined;\r\n        }\r\n\r\n        this._name = name;\r\n        this._version = version;\r\n    }\r\n\r\n    /**\r\n     * Gets current browser name.\r\n     * @returns {string}\r\n     */\r\n    getName() {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * Checks if current browser is Chrome.\r\n     * @returns {boolean}\r\n     */\r\n    isChrome() {\r\n        return this._name === CHROME;\r\n    }\r\n\r\n    /**\r\n     * Checks if current browser is Opera.\r\n     * @returns {boolean}\r\n     */\r\n    isOpera() {\r\n        return this._name === OPERA;\r\n    }\r\n\r\n    /**\r\n     * Checks if current browser is Firefox.\r\n     * @returns {boolean}\r\n     */\r\n    isFirefox() {\r\n        return this._name === FIREFOX;\r\n    }\r\n\r\n    /**\r\n     * Checks if current browser is Internet Explorer.\r\n     * @returns {boolean}\r\n     */\r\n    isIExplorer() {\r\n        return this._name === INTERNET_EXPLORER;\r\n    }\r\n\r\n    /**\r\n     * Checks if current browser is Safari.\r\n     * @returns {boolean}\r\n     */\r\n    isSafari() {\r\n        return this._name === SAFARI;\r\n    }\r\n\r\n    /**\r\n     * Checks if current environment is NWJS.\r\n     * @returns {boolean}\r\n     */\r\n    isNWJS() {\r\n        return this._name === NWJS;\r\n    }\r\n\r\n    /**\r\n     * Checks if current environment is Electron.\r\n     * @returns {boolean}\r\n     */\r\n    isElectron() {\r\n        return this._name === ELECTRON;\r\n    }\r\n\r\n    /**\r\n     * Checks if current environment is React Native.\r\n     * @returns {boolean}\r\n     */\r\n    isReactNative() {\r\n        return this._name === REACT_NATIVE;\r\n    }\r\n\r\n    /**\r\n     * Returns the version of the current browser.\r\n     * @returns {string}\r\n     */\r\n    getVersion() {\r\n        return this._version;\r\n    }\r\n\r\n    /**\r\n     * Check if the parsed browser matches the passed condition.\r\n     *\r\n     * @param {Object} checkTree - It's one or two layered object, which can include a\r\n     * platform or an OS on the first layer and should have browsers specs on the\r\n     * bottom layer.\r\n     * Eg. { chrome: '>71.1.0' }\r\n     *     { windows: { chrome: '<70.2' } }\r\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\r\n     * conditions, false if not and undefined when the browser is not defined in the\r\n     * checktree object or when the current browser's version is unknown.\r\n     * @private\r\n     */\r\n    _checkCondition(checkTree) {\r\n        if (this._version) {\r\n            return this._bowser.satisfies(checkTree);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compares the passed version with the current browser version.\r\n     *\r\n     * @param {*} version - The version to compare with. Anything different\r\n     * than string will be converted to string.\r\n     * @returns {boolean|undefined} - Returns true if the current version is\r\n     * greater than the passed version and false otherwise. Returns undefined if\r\n     * the current browser version is unknown.\r\n     */\r\n    isVersionGreaterThan(version) {\r\n        return this._checkCondition({ [this._name]: `>${version}` });\r\n    }\r\n\r\n    /**\r\n     * Compares the passed version with the current browser version.\r\n     *\r\n     * @param {*} version - The version to compare with. Anything different\r\n     * than string will be converted to string.\r\n     * @returns {boolean|undefined} - Returns true if the current version is\r\n     * lower than the passed version and false otherwise. Returns undefined if\r\n     * the current browser version is unknown.\r\n     */\r\n    isVersionLessThan(version) {\r\n        return this._checkCondition({ [this._name]: `<${version}` });\r\n    }\r\n\r\n    /**\r\n     * Compares the passed version with the current browser version.\r\n     *\r\n     * @param {*} version - The version to compare with. Anything different\r\n     * than string will be converted to string.\r\n     * @returns {boolean|undefined} - Returns true if the current version is\r\n     * equal to the passed version and false otherwise. Returns undefined if\r\n     * the current browser version is unknown.\r\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\r\n     */\r\n    isVersionEqualTo(version) {\r\n        return this._checkCondition({ [this._name]: `~${version}` });\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\n/**\r\n * Dummy implementation of Storage interface.\r\n */\r\nclass DummyLocalStorage extends EventEmitter {\r\n\r\n    /**\r\n     * The object used for storage.\r\n     */\r\n    _storage = {};\r\n\r\n    /**\r\n     * Empties all keys out of the storage.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    clear() {\r\n        this._storage = {};\r\n    }\r\n\r\n    /**\r\n     * Returns the number of data items stored in the Storage object.\r\n     *\r\n     * @returns {number} - The number of data items stored in the Storage object.\r\n     */\r\n    get length() {\r\n        return Object.keys(this._storage).length;\r\n    }\r\n\r\n    /**\r\n     * Will return that key's value associated to the passed key name.\r\n     *\r\n     * @param {string} keyName - The key name.\r\n     * @returns {*} - The key value.\r\n     */\r\n    getItem(keyName) {\r\n        return this._storage[keyName];\r\n    }\r\n\r\n    /**\r\n     * When passed a key name and value, will add that key to the storage,\r\n     * or update that key's value if it already exists.\r\n     *\r\n     * @param {string} keyName - The key name.\r\n     * @param {*} keyValue - The key value.\r\n     * @returns {void}\r\n     */\r\n    setItem(keyName, keyValue) {\r\n        this._storage[keyName] = keyValue;\r\n    }\r\n\r\n    /**\r\n     * When passed a key name, will remove that key from the storage.\r\n     *\r\n     * @param {string} keyName - The key name.\r\n     * @returns {void}\r\n     */\r\n    removeItem(keyName) {\r\n        delete this._storage[keyName];\r\n    }\r\n\r\n    /**\r\n     * When passed a number n, this method will return the name of the nth key in the storage.\r\n     *\r\n     * @param {number} idx - The index of the key.\r\n     * @returns {string} - The nth key name.\r\n     */\r\n    key(n) {\r\n        const keys = Object.keys(this._storage);\r\n\r\n        if (keys.length <= n) {\r\n            return undefined;\r\n        }\r\n\r\n        return keys[n];\r\n    }\r\n\r\n    /**\r\n     * Serializes the content of the storage.\r\n     *\r\n     * @returns {string} - The serialized content.\r\n     */\r\n    serialize() {\r\n        return JSON.stringify(this._storage);\r\n    }\r\n}\r\n\r\n/**\r\n * Wrapper class for browser's local storage object.\r\n */\r\nclass JitsiLocalStorage extends EventEmitter {\r\n    /**\r\n     * @constructor\r\n     * @param {Storage} storage browser's local storage object.\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        try {\r\n            this._storage = window.localStorage;\r\n            this._localStorageDisabled = false;\r\n        } catch (ignore) {\r\n            // localStorage throws an exception.\r\n        }\r\n\r\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\r\n            console.warn('Local storage is disabled.');\r\n            this._storage = new DummyLocalStorage();\r\n            this._localStorageDisabled = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if window.localStorage is disabled and false otherwise.\r\n     *\r\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\r\n     */\r\n    isLocalStorageDisabled() {\r\n        return this._localStorageDisabled;\r\n    }\r\n\r\n    /**\r\n     * Empties all keys out of the storage.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    clear() {\r\n        this._storage.clear();\r\n        this.emit('changed');\r\n    }\r\n\r\n    /**\r\n     * Returns the number of data items stored in the Storage object.\r\n     *\r\n     * @returns {number} - The number of data items stored in the Storage object.\r\n     */\r\n    get length() {\r\n        return this._storage.length;\r\n    }\r\n\r\n    /**\r\n     * Returns that passed key's value.\r\n     * @param {string} keyName the name of the key you want to retrieve\r\n     * the value of.\r\n     * @returns {String|null} the value of the key. If the key does not exist,\r\n     * null is returned.\r\n     */\r\n    getItem(keyName) {\r\n        return this._storage.getItem(keyName);\r\n    }\r\n\r\n    /**\r\n     * Adds a key to the storage, or update key's value if it already exists.\r\n     * @param {string} keyName - the name of the key you want to create/update.\r\n     * @param {string} keyValue - the value you want to give the key you are\r\n     * creating/updating.\r\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\r\n     */\r\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\r\n        this._storage.setItem(keyName, keyValue);\r\n\r\n        if (!dontEmitChangedEvent) {\r\n            this.emit('changed');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a key from the storage.\r\n     * @param {string} keyName the name of the key you want to remove.\r\n     */\r\n    removeItem(keyName) {\r\n        this._storage.removeItem(keyName);\r\n        this.emit('changed');\r\n    }\r\n\r\n    /**\r\n     * Returns the name of the nth key in the list, or null if n is greater\r\n     * than or equal to the number of key/value pairs in the object.\r\n     *\r\n     * @param {number} i - The index of the key in the list.\r\n     * @returns {string}\r\n     */\r\n    key(i) {\r\n        return this._storage.key(i);\r\n    }\r\n\r\n    /**\r\n     * Serializes the content of the storage.\r\n     *\r\n     * @returns {string} - The serialized content.\r\n     */\r\n    serialize() {\r\n        if (this.isLocalStorageDisabled) {\r\n            return this._storage.serialize();\r\n        }\r\n\r\n        const length = this._storage.length;\r\n        const localStorageContent = {};\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            const key = this._storage.key(i);\r\n\r\n            localStorageContent[key] = this._storage.getItem(key);\r\n        }\r\n\r\n        return JSON.stringify(localStorageContent);\r\n    }\r\n}\r\n\r\nexport const jitsiLocalStorage = new JitsiLocalStorage();\r\n","/**\r\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\r\n * versa.\r\n * @event\r\n * @type {boolean} - true when service has changed to active false otherwise.\r\n */\r\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\r\n\r\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\r\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\r\n * it starts receiving audio levels !== 0 after being in a state of no audio.\r\n * @event\r\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\r\n */\r\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\r\n\r\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\r\n * for a period of time, meaning that the device is either broken or hardware/software muted.\r\n * @event\r\n * @type {void}\r\n */\r\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\r\n\r\n/**\r\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\r\n *  @event\r\n *  @type {Object}\r\n */\r\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\r\n\r\n/**\r\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\r\n * The generated objects are of type Array<Object>, one score for each monitored device.\r\n * @event VAD_REPORT_PUBLISHED\r\n * @type Array<Object> with the following structure:\r\n * @property {Date} timestamp - Timestamp at which the compute took place.\r\n * @property {number} avgVAD - Average VAD score over monitored period of time.\r\n * @property {string} deviceId - Associate local audio device ID.\r\n */\r\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\r\n\r\n/**\r\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\r\n *\r\n * @event\r\n * @type {Object}\r\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\r\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\r\n * @property {string} deviceId - Device id of the associated track.\r\n */\r\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\r\n\r\n/**\r\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\r\n *\r\n *  @event\r\n *  @type {Object}\r\n */\r\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\r\n","/**\r\n * Notifies about audio level in RTP statistics by SSRC.\r\n *\r\n * @param ssrc - The synchronization source identifier (SSRC) of the\r\n * endpoint/participant whose audio level is being reported.\r\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\r\n * RTP statistics.\r\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\r\n * local endpoint/participant; otherwise, <tt>false</tt>.\r\n */\r\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\r\n\r\n/**\r\n * An event fired just before the statistics module gets disposes and it's\r\n * the last chance to submit some logs that will end up in stats services like\r\n * CallStats (if enabled).\r\n */\r\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\r\n\r\n/**\r\n * An event carrying all statistics by ssrc.\r\n */\r\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\r\n\r\n/**\r\n * An event carrying connection statistics.\r\n *\r\n * @param {object} connectionStats - The connection statistics carried by the\r\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\r\n * <tt>resolution</tt>, and <tt>transport</tt>.\r\n */\r\nexport const CONNECTION_STATS = 'statistics.connectionstats';\r\n\r\n/**\r\n * An event carrying performance stats.\r\n */\r\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\r\n","/**\r\n * Status that video SIP GW service is available.\r\n * @type {string}\r\n */\r\nexport const STATUS_AVAILABLE = 'available';\r\n\r\n/**\r\n * Status that video SIP GW service is not available.\r\n * @type {string}\r\n */\r\nexport const STATUS_UNDEFINED = 'undefined';\r\n\r\n/**\r\n * Status that video SIP GW service is available but there are no free nodes\r\n * at the moment to serve new requests.\r\n * @type {string}\r\n */\r\nexport const STATUS_BUSY = 'busy';\r\n\r\n/**\r\n * Video SIP GW session state, currently running.\r\n * @type {string}\r\n */\r\nexport const STATE_ON = 'on';\r\n\r\n/**\r\n * Video SIP GW session state, currently stopped and not running.\r\n * @type {string}\r\n */\r\nexport const STATE_OFF = 'off';\r\n\r\n/**\r\n * Video SIP GW session state, currently is starting.\r\n * @type {string}\r\n */\r\nexport const STATE_PENDING = 'pending';\r\n\r\n/**\r\n * Video SIP GW session state, has observed some issues and is retrying at the\r\n * moment.\r\n * @type {string}\r\n */\r\nexport const STATE_RETRYING = 'retrying';\r\n\r\n/**\r\n * Video SIP GW session state, tried to start but it failed.\r\n * @type {string}\r\n */\r\nexport const STATE_FAILED = 'failed';\r\n\r\n/**\r\n * Error on trying to create video SIP GW session in conference where\r\n * there is no room connection (hasn't joined or has left the room).\r\n * @type {string}\r\n */\r\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\r\n\r\n/**\r\n * Error on trying to create video SIP GW session with address for which\r\n * there is an already created session.\r\n * @type {string}\r\n */\r\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\r\n","/**\r\n * The events for the connection.\r\n */\r\n\r\n/**\r\n * Indicates that the connection has been disconnected. The event provides\r\n * the following parameters to its listeners:\r\n *\r\n * @param msg {string} a message associated with the disconnect such as the\r\n * last (known) error message\r\n */\r\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\r\n\r\n/**\r\n * Indicates that the connection has been established. The event provides\r\n * the following parameters to its listeners:\r\n *\r\n * @param id {string} the ID of the local endpoint/participant/peer (within\r\n * the context of the established connection)\r\n */\r\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\r\n\r\n/**\r\n * Indicates that the connection has been failed for some reason. The event\r\n * provides the following parameters to its listeners:\r\n *\r\n * @param errType {JitsiConnectionErrors} the type of error associated with\r\n * the failure\r\n * @param errReason {string} the error (message) associated with the failure\r\n * @param credentials {object} the credentials used to connect (if any)\r\n * @param errReasonDetails {object} an optional object with details about\r\n * the error, like shard moving, suspending. Used for analytics purposes.\r\n */\r\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\r\n\r\n/**\r\n * Indicates that the performed action cannot be executed because the\r\n * connection is not in the correct state(connected, disconnected, etc.)\r\n */\r\nexport const WRONG_STATE = 'connection.wrongState';\r\n\r\n/**\r\n * Indicates that the display name is required over this connection and need to be supplied when\r\n * joining the room.\r\n * There are cases like lobby room where display name is required.\r\n */\r\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\r\n","/* global module */\r\n/**\r\n * Enumeration of the codec mime types\r\n * @type {{H264: string, VP8: string, VP9: string}}\r\n */\r\nconst CodecMimeType = {\r\n    /**\r\n     * The h264 codec mime type\r\n     */\r\n    H264: 'h264',\r\n\r\n    /**\r\n     * The vp8 codec mime type.\r\n     */\r\n    VP8: 'vp8',\r\n\r\n    /**\r\n     * The vp9 codec mime type.\r\n     */\r\n    VP9: 'vp9'\r\n\r\n};\r\n\r\nmodule.exports = CodecMimeType;\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $msg, Strophe } from 'strophe.js';\r\nimport 'strophejs-plugin-disco';\r\n\r\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\r\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport browser from '../browser';\r\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nimport Caps from './Caps';\r\nimport XmppConnection from './XmppConnection';\r\nimport MucConnectionPlugin from './strophe.emuc';\r\nimport JingleConnectionPlugin from './strophe.jingle';\r\nimport initStropheLogger from './strophe.logger';\r\nimport RayoConnectionPlugin from './strophe.rayo';\r\nimport initStropheUtil from './strophe.util';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Creates XMPP connection.\r\n *\r\n * @param {Object} options\r\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\r\n * Prosody).\r\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\r\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\r\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\r\n * @returns {XmppConnection}\r\n */\r\nfunction createConnection({ enableWebsocketResume, serviceUrl = '/http-bind', token, websocketKeepAlive }) {\r\n    // Append token as URL param\r\n    if (token) {\r\n        // eslint-disable-next-line no-param-reassign\r\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\r\n    }\r\n\r\n    return new XmppConnection({\r\n        enableWebsocketResume,\r\n        serviceUrl,\r\n        websocketKeepAlive\r\n    });\r\n}\r\n\r\n/**\r\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\r\n * {@link XmppConnection} wrapper.\r\n *\r\n * @returns {void}\r\n */\r\nfunction initStropheNativePlugins() {\r\n    initStropheUtil();\r\n    initStropheLogger();\r\n}\r\n\r\n// FIXME: remove once we have a default config template. -saghul\r\n/**\r\n * A list of ice servers to use by default for P2P.\r\n */\r\nexport const DEFAULT_STUN_SERVERS = [\r\n    { urls: 'stun:stun.l.google.com:19302' },\r\n    { urls: 'stun:stun1.l.google.com:19302' },\r\n    { urls: 'stun:stun2.l.google.com:19302' }\r\n];\r\n\r\n/**\r\n * The name of the field used to recognize a chat message as carrying a JSON\r\n * payload from another endpoint.\r\n * If the json-message of a chat message contains a valid JSON object, and\r\n * the JSON has this key, then it is a valid json-message to be sent.\r\n */\r\nexport const JITSI_MEET_MUC_TYPE = 'type';\r\n\r\n/**\r\n *\r\n */\r\nexport default class XMPP extends Listenable {\r\n    /**\r\n     * FIXME describe all options\r\n     * @param {Object} options\r\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\r\n     * connection with the server.\r\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\r\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\r\n     * module try to resume the session in case the Websocket connection breaks.\r\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\r\n     * constructor for more details.\r\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\r\n     * @param token\r\n     */\r\n    constructor(options, token) {\r\n        super();\r\n        this.connection = null;\r\n        this.disconnectInProgress = false;\r\n        this.connectionTimes = {};\r\n        this.options = options;\r\n        this.token = token;\r\n        this.authenticatedUser = false;\r\n\r\n        initStropheNativePlugins();\r\n\r\n        this.connection = createConnection({\r\n            enableWebsocketResume: options.enableWebsocketResume,\r\n\r\n            // FIXME remove deprecated bosh option at some point\r\n            serviceUrl: options.serviceUrl || options.bosh,\r\n            token,\r\n            websocketKeepAlive: options.websocketKeepAlive\r\n        });\r\n\r\n        this._initStrophePlugins();\r\n\r\n        this.caps = new Caps(this.connection, this.options.clientNode);\r\n\r\n        // Initialize features advertised in disco-info\r\n        this.initFeaturesList();\r\n\r\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\r\n        // sounds like they would want that. A problem for them though may be if\r\n        // they wanted to utilize the connected connection in an unload handler\r\n        // of their own. However, it should be fairly easy for them to do that\r\n        // by registering their unload handler before us.\r\n        $(window).on('beforeunload unload', ev => {\r\n            this.disconnect(ev).catch(() => {\r\n                // ignore errors in order to not brake the unload.\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes the list of feature advertised through the disco-info\r\n     * mechanism.\r\n     */\r\n    initFeaturesList() {\r\n        // http://xmpp.org/extensions/xep-0167.html#support\r\n        // http://xmpp.org/extensions/xep-0176.html#support\r\n        this.caps.addFeature('urn:xmpp:jingle:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\r\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\r\n\r\n        // Disable RTX on Firefox because of https://bugzilla.mozilla.org/show_bug.cgi?id=1668028.\r\n        if (!(this.options.disableRtx || browser.isFirefox())) {\r\n            this.caps.addFeature('urn:ietf:rfc:4588');\r\n        }\r\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\r\n            this.caps.addFeature('http://jitsi.org/opus-red');\r\n        }\r\n\r\n        // this is dealt with by SDP O/A so we don't need to announce this\r\n        // XEP-0293\r\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\r\n        // XEP-0294\r\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\r\n\r\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\r\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\r\n\r\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\r\n\r\n        // Enable Lipsync ?\r\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\r\n            logger.info('Lip-sync enabled !');\r\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\r\n        }\r\n\r\n        if (this.connection.rayo) {\r\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\r\n        }\r\n\r\n        if (E2EEncryption.isSupported(this.options)) {\r\n            this.caps.addFeature('https://jitsi.org/meet/e2ee');\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getConnection() {\r\n        return this.connection;\r\n    }\r\n\r\n    /**\r\n     * Receive connection status changes and handles them.\r\n     *\r\n     * @param {Object} credentials\r\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\r\n     * connect method. For example, 'user@xmpp.com'.\r\n     * @param {string} credentials.password - The password passed to the connect\r\n     * method.\r\n     * @param {string} status - One of Strophe's connection status strings.\r\n     * @param {string} [msg] - The connection error message provided by Strophe.\r\n     */\r\n    connectionHandler(credentials = {}, status, msg) {\r\n        const now = window.performance.now();\r\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\r\n\r\n        this.connectionTimes[statusStr] = now;\r\n        logger.log(\r\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\r\n            now);\r\n\r\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\r\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\r\n            this.connection.jingle.getStunAndTurnCredentials();\r\n\r\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\r\n\r\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\r\n            this._resetState();\r\n\r\n            // Schedule ping ?\r\n            const pingJid = this.connection.domain;\r\n\r\n            // FIXME no need to do it again on stream resume\r\n            this.caps.getFeaturesAndIdentities(pingJid)\r\n                .then(({ features, identities }) => {\r\n                    if (!features.has(Strophe.NS.PING)) {\r\n                        logger.error(\r\n                            `Ping NOT supported by ${pingJid} - please enable ping in your XMPP server config`);\r\n                    }\r\n\r\n                    // check for speakerstats\r\n                    identities.forEach(identity => {\r\n                        if (identity.type === 'speakerstats') {\r\n                            this.speakerStatsComponentAddress = identity.name;\r\n                        }\r\n\r\n                        if (identity.type === 'conference_duration') {\r\n                            this.conferenceDurationComponentAddress = identity.name;\r\n                        }\r\n\r\n                        if (identity.type === 'lobbyrooms') {\r\n                            this.lobbySupported = true;\r\n                            identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\r\n                                .then(({ features: f }) => {\r\n                                    f.forEach(fr => {\r\n                                        if (fr.endsWith('#displayname_required')) {\r\n                                            this.eventEmitter.emit(\r\n                                                JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\r\n                                        }\r\n                                    });\r\n                                })\r\n                                .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\r\n                        }\r\n                    });\r\n\r\n                    if (this.speakerStatsComponentAddress\r\n                        || this.conferenceDurationComponentAddress) {\r\n                        this.connection.addHandler(\r\n                            this._onPrivateMessage.bind(this), null,\r\n                            'message', null, null);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    const errmsg = 'Feature discovery error';\r\n\r\n                    GlobalOnErrorHandler.callErrorHandler(\r\n                        new Error(`${errmsg}: ${error}`));\r\n                    logger.error(errmsg, error);\r\n                });\r\n\r\n            if (credentials.password) {\r\n                this.authenticatedUser = true;\r\n            }\r\n            if (this.connection && this.connection.connected\r\n                && Strophe.getResourceFromJid(this.connection.jid)) {\r\n                // .connected is true while connecting?\r\n                // this.connection.send($pres());\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\r\n                    Strophe.getResourceFromJid(this.connection.jid));\r\n            }\r\n        } else if (status === Strophe.Status.CONNFAIL) {\r\n            if (msg === 'x-strophe-bad-non-anon-jid') {\r\n                this.anonymousConnectionFailed = true;\r\n            } else {\r\n                this.connectionFailed = true;\r\n            }\r\n            this.lastErrorMsg = msg;\r\n            if (msg === 'giving-up') {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\r\n            }\r\n        } else if (status === Strophe.Status.ERROR) {\r\n            this.lastErrorMsg = msg;\r\n        } else if (status === Strophe.Status.DISCONNECTED) {\r\n            // Stop ping interval\r\n            this.connection.ping.stopInterval();\r\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\r\n            const errMsg = msg || this.lastErrorMsg;\r\n\r\n            if (this.anonymousConnectionFailed) {\r\n                // prompt user for username and password\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\r\n            } else if (this.connectionFailed) {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.OTHER_ERROR,\r\n                    errMsg,\r\n                    undefined, /* credentials */\r\n                    this._getConnectionFailedReasonDetails());\r\n            } else if (wasIntentionalDisconnect) {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\r\n            } else {\r\n                // XXX if Strophe drops the connection while not being asked to,\r\n                // it means that most likely some serious error has occurred.\r\n                // One currently known case is when a BOSH request fails for\r\n                // more than 4 times. The connection is dropped without\r\n                // supplying a reason(error message/event) through the API.\r\n                logger.error('XMPP connection dropped!');\r\n\r\n                // XXX if the last request error is within 5xx range it means it\r\n                // was a server failure\r\n                const lastErrorStatus = Strophe.getLastErrorStatus();\r\n\r\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConnectionEvents.CONNECTION_FAILED,\r\n                        JitsiConnectionErrors.SERVER_ERROR,\r\n                        errMsg || 'server-error',\r\n                        /* credentials */ undefined,\r\n                        this._getConnectionFailedReasonDetails());\r\n                } else {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConnectionEvents.CONNECTION_FAILED,\r\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\r\n                        errMsg || 'connection-dropped-error',\r\n                        /* credentials */ undefined,\r\n                        this._getConnectionFailedReasonDetails());\r\n                }\r\n            }\r\n        } else if (status === Strophe.Status.AUTHFAIL) {\r\n            // wrong password or username, prompt user\r\n            this.eventEmitter.emit(\r\n                JitsiConnectionEvents.CONNECTION_FAILED,\r\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\r\n                msg,\r\n                credentials);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     */\r\n    _connect(jid, password) {\r\n        // connection.connect() starts the connection process.\r\n        //\r\n        // As the connection process proceeds, the user supplied callback will\r\n        // be triggered multiple times with status updates. The callback should\r\n        // take two arguments - the status code and the error condition.\r\n        //\r\n        // The status code will be one of the values in the Strophe.Status\r\n        // constants. The error condition will be one of the conditions defined\r\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\r\n        //\r\n        // The Parameters wait, hold and route are optional and only relevant\r\n        // for BOSH connections. Please see XEP 124 for a more detailed\r\n        // explanation of the optional parameters.\r\n        //\r\n        // Connection status constants for use by the connection handler\r\n        // callback.\r\n        //\r\n        //  Status.ERROR - An error has occurred (websockets specific)\r\n        //  Status.CONNECTING - The connection is currently being made\r\n        //  Status.CONNFAIL - The connection attempt failed\r\n        //  Status.AUTHENTICATING - The connection is authenticating\r\n        //  Status.AUTHFAIL - The authentication attempt failed\r\n        //  Status.CONNECTED - The connection has succeeded\r\n        //  Status.DISCONNECTED - The connection has been terminated\r\n        //  Status.DISCONNECTING - The connection is currently being terminated\r\n        //  Status.ATTACHED - The connection has been attached\r\n\r\n        this._resetState();\r\n        this.connection.connect(\r\n            jid,\r\n            password,\r\n            this.connectionHandler.bind(this, {\r\n                jid,\r\n                password\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Attach to existing connection. Can be used for optimizations. For\r\n     * example: if the connection is created on the server we can attach to it\r\n     * and start using it.\r\n     *\r\n     * @param options {object} connecting options - rid, sid, jid and password.\r\n     */\r\n    attach(options) {\r\n        this._resetState();\r\n        const now = this.connectionTimes.attaching = window.performance.now();\r\n\r\n        logger.log('(TIME) Strophe Attaching:\\t', now);\r\n        this.connection.attach(options.jid, options.sid,\r\n            parseInt(options.rid, 10) + 1,\r\n            this.connectionHandler.bind(this, {\r\n                jid: options.jid,\r\n                password: options.password\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Resets any state/flag before starting a new connection.\r\n     * @private\r\n     */\r\n    _resetState() {\r\n        this.anonymousConnectionFailed = false;\r\n        this.connectionFailed = false;\r\n        this.lastErrorMsg = undefined;\r\n        this.disconnectInProgress = undefined;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     */\r\n    connect(jid, password) {\r\n        if (!jid) {\r\n            const { anonymousdomain, domain } = this.options.hosts;\r\n            let configDomain = anonymousdomain || domain;\r\n\r\n            // Force authenticated domain if room is appended with '?login=true'\r\n            // or if we're joining with the token\r\n\r\n            // FIXME Do not rely on window.location because (1) React Native\r\n            // does not have a window.location by default and (2) here we cannot\r\n            // know for sure that query/search has not be stripped from\r\n            // window.location by the time the following executes.\r\n            const { location } = window;\r\n\r\n            if (anonymousdomain) {\r\n                const search = location && location.search;\r\n\r\n                if ((search && search.indexOf('login=true') !== -1)\r\n                        || this.token) {\r\n                    configDomain = domain;\r\n                }\r\n            }\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            jid = configDomain || (location && location.hostname);\r\n        }\r\n\r\n        return this._connect(jid, password);\r\n    }\r\n\r\n    /**\r\n     * Joins or creates a muc with the provided jid, created from the passed\r\n     * in room name and muc host and onCreateResource result.\r\n     *\r\n     * @param {string} roomName - The name of the muc to join.\r\n     * @param {Object} options - Configuration for how to join the muc.\r\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\r\n     * is to be added to the jid.\r\n     * @returns {Promise} Resolves with an instance of a strophe muc.\r\n     */\r\n    createRoom(roomName, options, onCreateResource) {\r\n        // There are cases (when using subdomain) where muc can hold an uppercase part\r\n        let roomjid = `${roomName}@${options.customDomain\r\n            ? options.customDomain : this.options.hosts.muc.toLowerCase()}/`;\r\n\r\n        const mucNickname = onCreateResource\r\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\r\n            : RandomUtil.randomHexString(8).toLowerCase();\r\n\r\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\r\n        roomjid += mucNickname;\r\n\r\n        return this.connection.emuc.createRoom(roomjid, null, options);\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the participant associated with the Strophe connection.\r\n     *\r\n     * @returns {string} The jid of the participant.\r\n     */\r\n    getJid() {\r\n        return this.connection.jid;\r\n    }\r\n\r\n    /**\r\n     * Returns the logs from strophe.jingle.\r\n     * @returns {Object}\r\n     */\r\n    getJingleLog() {\r\n        const jingle = this.connection.jingle;\r\n\r\n\r\n        return jingle ? jingle.getLog() : {};\r\n    }\r\n\r\n    /**\r\n     * Returns the logs from strophe.\r\n     */\r\n    getXmppLog() {\r\n        return (this.connection.logger || {}).log || null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    dial(...args) {\r\n        this.connection.rayo.dial(...args);\r\n    }\r\n\r\n    /**\r\n     * Pings the server.\r\n     * @param timeout how many ms before a timeout should occur.\r\n     * @returns {Promise} resolved on ping success and reject on an error or\r\n     * a timeout.\r\n     */\r\n    ping(timeout) {\r\n        return new Promise((resolve, reject) => {\r\n            this.connection.ping\r\n                    .ping(this.connection.domain, resolve, reject, timeout);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getSessions() {\r\n        return this.connection.jingle.sessions;\r\n    }\r\n\r\n    /**\r\n     * Disconnects this from the XMPP server (if this is connected).\r\n     *\r\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\r\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\r\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\r\n     */\r\n    disconnect(ev) {\r\n        if (this.disconnectInProgress) {\r\n            return this.disconnectInProgress;\r\n        } else if (!this.connection) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this.disconnectInProgress = new Promise(resolve => {\r\n            const disconnectListener = (credentials, status) => {\r\n                if (status === Strophe.Status.DISCONNECTED) {\r\n                    resolve();\r\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\r\n                }\r\n            };\r\n\r\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\r\n        });\r\n\r\n        this._cleanupXmppConnection(ev);\r\n\r\n        return this.disconnectInProgress;\r\n    }\r\n\r\n    /**\r\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\r\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\r\n     *\r\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\r\n     * (e.g. beforeunload, unload).\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _cleanupXmppConnection(ev) {\r\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\r\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\r\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\r\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\r\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\r\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\r\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\r\n        // possible.\r\n        !this.connection.isUsingWebSocket && this.connection.flush();\r\n\r\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\r\n            const evType = ev.type;\r\n\r\n            if (evType === 'beforeunload' || evType === 'unload') {\r\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\r\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\r\n                // depending on whether we want to run with it for some time.\r\n                this.connection.options.sync = true;\r\n\r\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\r\n                if (this.connection.sendUnavailableBeacon()) {\r\n\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.connection.disconnect();\r\n\r\n        if (this.connection.options.sync !== true) {\r\n            this.connection.flush();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    _initStrophePlugins() {\r\n        const iceConfig = {\r\n            jvb: { iceServers: [ ] },\r\n            p2p: { iceServers: [ ] }\r\n        };\r\n\r\n        const p2pStunServers = (this.options.p2p\r\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\r\n\r\n        if (Array.isArray(p2pStunServers)) {\r\n            logger.info('P2P STUN servers: ', p2pStunServers);\r\n            iceConfig.p2p.iceServers = p2pStunServers;\r\n        }\r\n\r\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\r\n            logger.info('P2P ICE transport policy: ',\r\n                this.options.p2p.iceTransportPolicy);\r\n\r\n            iceConfig.p2p.iceTransportPolicy\r\n                = this.options.p2p.iceTransportPolicy;\r\n        }\r\n\r\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\r\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\r\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\r\n    }\r\n\r\n    /**\r\n     * Returns details about connection failure. Shard change or is it after\r\n     * suspend.\r\n     * @returns {object} contains details about a connection failure.\r\n     * @private\r\n     */\r\n    _getConnectionFailedReasonDetails() {\r\n        const details = {};\r\n\r\n        // check for moving between shard if information is available\r\n        if (this.options.deploymentInfo\r\n            && this.options.deploymentInfo.shard\r\n            && this.connection.lastResponseHeaders) {\r\n\r\n            // split headers by line\r\n            const headersArr = this.connection.lastResponseHeaders\r\n                .trim().split(/[\\r\\n]+/);\r\n            const headers = {};\r\n\r\n            headersArr.forEach(line => {\r\n                const parts = line.split(': ');\r\n                const header = parts.shift();\r\n                const value = parts.join(': ');\r\n\r\n                headers[header] = value;\r\n            });\r\n\r\n            /* eslint-disable camelcase */\r\n            details.shard_changed\r\n                = this.options.deploymentInfo.shard\r\n                    !== headers['x-jitsi-shard'];\r\n            /* eslint-enable camelcase */\r\n        }\r\n\r\n        /* eslint-disable camelcase */\r\n        // check for possible suspend\r\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\r\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\r\n        /* eslint-enable camelcase */\r\n\r\n        return details;\r\n    }\r\n\r\n    /**\r\n     * Notifies speaker stats component if available that we are the new\r\n     * dominant speaker in the conference.\r\n     * @param {String} roomJid - The room jid where the speaker event occurred.\r\n     */\r\n    sendDominantSpeakerEvent(roomJid) {\r\n        // no speaker stats component advertised\r\n        if (!this.speakerStatsComponentAddress || !roomJid) {\r\n            return;\r\n        }\r\n\r\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\r\n\r\n        msg.c('speakerstats', {\r\n            xmlns: 'http://jitsi.org/jitmeet',\r\n            room: roomJid })\r\n            .up();\r\n\r\n        this.connection.send(msg);\r\n    }\r\n\r\n    /**\r\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\r\n     * parsing it and checking if it has a field called 'type'.\r\n     *\r\n     * @param {string} jsonString check if this string is a valid json string\r\n     * and contains the special structure.\r\n     * @returns {boolean, object} if given object is a valid JSON string, return\r\n     * the json object. Otherwise, returns false.\r\n     */\r\n    tryParseJSONAndVerify(jsonString) {\r\n        try {\r\n            const json = JSON.parse(jsonString);\r\n\r\n            // Handle non-exception-throwing cases:\r\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\r\n            // hence the type-checking,\r\n            // but... JSON.parse(null) returns null, and\r\n            // typeof null === \"object\",\r\n            // so we must check for that, too.\r\n            // Thankfully, null is falsey, so this suffices:\r\n            if (json && typeof json === 'object') {\r\n                const type = json[JITSI_MEET_MUC_TYPE];\r\n\r\n                if (typeof type !== 'undefined') {\r\n                    return json;\r\n                }\r\n\r\n                logger.debug('parsing valid json but does not have correct '\r\n                    + 'structure', 'topic: ', type);\r\n            }\r\n        } catch (e) {\r\n            logger.error(e);\r\n\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * A private message is received, message that is not addressed to the muc.\r\n     * We expect private message coming from plugins component if it is\r\n     * enabled and running.\r\n     *\r\n     * @param {string} msg - The message.\r\n     */\r\n    _onPrivateMessage(msg) {\r\n        const from = msg.getAttribute('from');\r\n\r\n        if (!(from === this.speakerStatsComponentAddress\r\n            || from === this.conferenceDurationComponentAddress)) {\r\n            return true;\r\n        }\r\n\r\n        const jsonMessage = $(msg).find('>json-message')\r\n            .text();\r\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\r\n\r\n        if (parsedJson\r\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats'\r\n            && parsedJson.users) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\r\n        }\r\n\r\n        if (parsedJson\r\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration'\r\n            && parsedJson.created_timestamp) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","\r\n/**\r\n * The method will increase the given number by 1. If the given counter is equal\r\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\r\n * 1.\r\n * @param {number} number - An integer counter value to be incremented.\r\n * @return {number} the next counter value increased by 1 (see the description\r\n * above for exception).\r\n */\r\nexport function safeCounterIncrement(number) {\r\n    let nextValue = number;\r\n\r\n    if (number >= Number.MAX_SAFE_INTEGER) {\r\n        nextValue = 0;\r\n    }\r\n\r\n    return nextValue + 1;\r\n}\r\n\r\n/**\r\n * Calculates the average value of am Array of numbers.\r\n *\r\n * @param {Float32Array} valueArray - Array of numbers.\r\n * @returns {number} - Number array average.\r\n */\r\nexport function calculateAverage(valueArray) {\r\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\r\n}\r\n\r\n/**\r\n * Calculates a unique hash for a given string similar to Java's\r\n * implementation of String.hashCode()\r\n *\r\n * @param {String} string - String whose hash has to be calculated.\r\n * @returns {number} - Unique hash code calculated.\r\n */\r\nexport function hashString(string) {\r\n    let hash = 0;\r\n\r\n    for (let i = 0; i < string.length; i++) {\r\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\r\n\r\n        /* eslint-disable no-bitwise */\r\n        hash = hash & hash; // Convert to 32bit integer\r\n    }\r\n\r\n    return Math.abs(hash);\r\n}\r\n\r\n/**\r\n * Returns only the positive values from an array of numbers.\r\n *\r\n * @param {Float32Array} valueArray - Array of vad scores.\r\n * @returns {Array} - Array of positive numbers.\r\n */\r\nexport function filterPositiveValues(valueArray) {\r\n    return valueArray.filter(value => value >= 0);\r\n}\r\n\r\n/**\r\n * This class calculates a simple running average that continually changes\r\n * as more data points are collected and added.\r\n */\r\nexport class RunningAverage {\r\n    /**\r\n     * Creates an instance of the running average calculator.\r\n     */\r\n    constructor() {\r\n        this.average = 0;\r\n        this.n = 0;\r\n    }\r\n\r\n    /**\r\n     * Adds a new data point to the existing set of values and recomputes\r\n     * the running average.\r\n     * @param {number} value\r\n     * @returns {void}\r\n     */\r\n    addNext(value) {\r\n        if (typeof value !== 'number') {\r\n            return;\r\n        }\r\n        this.n += 1;\r\n        this.average = this.average + ((value - this.average) / this.n);\r\n    }\r\n\r\n    /**\r\n     * Obtains the average value for the current subset of values.\r\n     * @returns {number} - computed average.\r\n     */\r\n    getAverage() {\r\n        return this.average;\r\n    }\r\n}\r\n","import { jitsiLocalStorage } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nimport UsernameGenerator from '../util/UsernameGenerator';\r\n\r\nlet _callStatsUserName;\r\n\r\nlet _machineId;\r\n\r\n/**\r\n *\r\n */\r\nexport default {\r\n\r\n    /**\r\n     * The storage used to store the settings.\r\n     */\r\n    _storage: jitsiLocalStorage,\r\n\r\n    /**\r\n     * Initializes the Settings class.\r\n     *\r\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\r\n     * used for storing data instead of jitsiLocalStorage if specified.\r\n     */\r\n    init(externalStorage) {\r\n        this._storage = externalStorage || jitsiLocalStorage;\r\n    },\r\n\r\n    /**\r\n     * Returns fake username for callstats\r\n     * @returns {string} fake username for callstats\r\n     */\r\n    get callStatsUserName() {\r\n        if (!_callStatsUserName) {\r\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\r\n            if (!_callStatsUserName) {\r\n                _callStatsUserName = generateCallStatsUserName();\r\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\r\n            }\r\n        }\r\n\r\n        return _callStatsUserName;\r\n    },\r\n\r\n    /**\r\n     * Returns current machine id.\r\n     * @returns {string} machine id\r\n     */\r\n    get machineId() {\r\n        if (!_machineId) {\r\n            _machineId = this._storage.getItem('jitsiMeetId');\r\n            if (!_machineId) {\r\n                _machineId = generateJitsiMeetId();\r\n                this._storage.setItem('jitsiMeetId', _machineId);\r\n            }\r\n        }\r\n\r\n        return _machineId;\r\n    },\r\n\r\n    /**\r\n     * Returns current session id.\r\n     * @returns {string} current session id\r\n     */\r\n    get sessionId() {\r\n        // We may update sessionId in localStorage from another JitsiConference\r\n        // instance and that's why we should always re-read it.\r\n        return this._storage.getItem('sessionId');\r\n    },\r\n\r\n    /**\r\n     * Save current session id.\r\n     * @param {string} sessionId session id\r\n     */\r\n    set sessionId(sessionId) {\r\n        if (sessionId) {\r\n            this._storage.setItem('sessionId', sessionId);\r\n        } else {\r\n            this._storage.removeItem('sessionId');\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Generate fake username for callstats.\r\n * @returns {string} fake random username\r\n */\r\nfunction generateCallStatsUserName() {\r\n    const username = UsernameGenerator.generateUsername();\r\n\r\n    logger.log('generated callstats uid', username);\r\n\r\n    return username;\r\n}\r\n\r\n/**\r\n * Generate unique id.\r\n * @returns {string} random unique id\r\n */\r\nfunction generateJitsiMeetId() {\r\n    const jitsiMeetId = generateUniqueId();\r\n\r\n    logger.log('generated id', jitsiMeetId);\r\n\r\n    return jitsiMeetId;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction generateUniqueId() {\r\n    return _p8() + _p8() + _p8() + _p8();\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction _p8() {\r\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\r\n}\r\n","import * as transform from 'sdp-transform';\r\n\r\n/**\r\n * Parses the primary SSRC of given SSRC group.\r\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\r\n * @return {Number} the primary SSRC number\r\n */\r\nexport function parsePrimarySSRC(group) {\r\n    return parseInt(group.ssrcs.split(' ')[0], 10);\r\n}\r\n\r\n/**\r\n * Parses the secondary SSRC of given SSRC group.\r\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\r\n * @return {Number} the secondary SSRC number\r\n */\r\nexport function parseSecondarySSRC(group) {\r\n    return parseInt(group.ssrcs.split(' ')[1], 10);\r\n}\r\n\r\n/**\r\n * Tells how many distinct SSRCs are contained in given media line.\r\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\r\n * @return {number}\r\n */\r\nfunction _getSSRCCount(mLine) {\r\n    if (!mLine.ssrcs) {\r\n        return 0;\r\n    }\r\n\r\n    return mLine.ssrcs\r\n        .map(ssrcInfo => ssrcInfo.id)\r\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\r\n        .length;\r\n}\r\n\r\n/**\r\n * A wrapper around 'sdp-transform' media description object which provides\r\n * utility methods for common SDP/SSRC related operations.\r\n */\r\nclass MLineWrap {\r\n\r\n    /**\r\n     * Creates new <tt>MLineWrap</t>>\r\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\r\n     * lib.\r\n     */\r\n    constructor(mLine) {\r\n        if (!mLine) {\r\n            throw new Error('mLine is undefined');\r\n        }\r\n\r\n        this.mLine = mLine;\r\n    }\r\n\r\n    /**\r\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\r\n     * one will be preassigned.\r\n     *\r\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\r\n     * objects.\r\n     */\r\n    get ssrcs() {\r\n        if (!this.mLine.ssrcs) {\r\n            this.mLine.ssrcs = [];\r\n        }\r\n\r\n        return this.mLine.ssrcs;\r\n    }\r\n\r\n    /**\r\n     * Setter for the mLine's \"ssrcs\" array.\r\n     *\r\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\r\n     * objects.\r\n     */\r\n    set ssrcs(ssrcs) {\r\n        this.mLine.ssrcs = ssrcs;\r\n    }\r\n\r\n    /**\r\n     * Returns the direction of the underlying media description.\r\n     * @return {string} the media direction name as defined in the SDP.\r\n     */\r\n    get direction() {\r\n        return this.mLine.direction;\r\n    }\r\n\r\n    /**\r\n     * Modifies the direction of the underlying media description.\r\n     * @param {string} direction the new direction to be set\r\n     */\r\n    set direction(direction) {\r\n        this.mLine.direction = direction;\r\n    }\r\n\r\n    /**\r\n     * Exposes the SSRC group array of the underlying media description object.\r\n     * @return {Array.<Object>}\r\n     */\r\n    get ssrcGroups() {\r\n        if (!this.mLine.ssrcGroups) {\r\n            this.mLine.ssrcGroups = [];\r\n        }\r\n\r\n        return this.mLine.ssrcGroups;\r\n    }\r\n\r\n    /**\r\n     * Modifies the SSRC groups array of the underlying media description\r\n     * object.\r\n     * @param {Array.<Object>} ssrcGroups\r\n     */\r\n    set ssrcGroups(ssrcGroups) {\r\n        this.mLine.ssrcGroups = ssrcGroups;\r\n    }\r\n\r\n    /**\r\n     * Obtains value from SSRC attribute.\r\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\r\n     * found\r\n     * @param {string} attrName the name of the SSRC attribute to be found.\r\n     * @return {string|undefined} the value of SSRC attribute or\r\n     * <tt>undefined</tt> if no such attribute exists.\r\n     */\r\n    getSSRCAttrValue(ssrcNumber, attrName) {\r\n        const attribute = this.ssrcs.find(\r\n            ssrcObj => ssrcObj.id === ssrcNumber\r\n            && ssrcObj.attribute === attrName);\r\n\r\n\r\n        return attribute && attribute.value;\r\n    }\r\n\r\n    /**\r\n     * Removes all attributes for given SSRC number.\r\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\r\n     * removed.\r\n     */\r\n    removeSSRC(ssrcNum) {\r\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcs\r\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\r\n    }\r\n\r\n    /**\r\n     * Adds SSRC attribute\r\n     * @param {object} ssrcObj the SSRC attribute object as defined in\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    addSSRCAttribute(ssrcObj) {\r\n        this.ssrcs.push(ssrcObj);\r\n    }\r\n\r\n    /**\r\n     * Finds a SSRC group matching both semantics and SSRCs in order.\r\n     * @param {string} semantics the name of the semantics\r\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\r\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\r\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\r\n     * not found.\r\n     */\r\n    findGroup(semantics, ssrcs) {\r\n        return this.ssrcGroups.find(\r\n            group =>\r\n                group.semantics === semantics\r\n                    && (!ssrcs || ssrcs === group.ssrcs));\r\n    }\r\n\r\n    /**\r\n     * Finds all groups matching given semantic's name.\r\n     * @param {string} semantics the name of the semantics\r\n     * @return {Array.<object>} an array of SSRC group objects as defined by\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    findGroups(semantics) {\r\n        return this.ssrcGroups.filter(\r\n            group => group.semantics === semantics);\r\n    }\r\n\r\n    /**\r\n     * Finds all groups matching given semantic's name and group's primary SSRC.\r\n     * @param {string} semantics the name of the semantics\r\n     * @param {number} primarySSRC the primary SSRC number to be matched\r\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\r\n     */\r\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\r\n        return this.ssrcGroups.find(\r\n            group => group.semantics === semantics\r\n                && parsePrimarySSRC(group) === primarySSRC);\r\n    }\r\n\r\n    /**\r\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\r\n     * the first SSRC object with any 'msid' value.\r\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\r\n     * lib.\r\n     */\r\n    findSSRCByMSID(msid) {\r\n        return this.ssrcs.find(\r\n            ssrcObj => ssrcObj.attribute === 'msid'\r\n                && (msid === null || ssrcObj.value === msid));\r\n    }\r\n\r\n    /**\r\n     * Gets the SSRC count for the underlying media description.\r\n     * @return {number}\r\n     */\r\n    getSSRCCount() {\r\n        return _getSSRCCount(this.mLine);\r\n    }\r\n\r\n    /**\r\n     * Checks whether the underlying media description contains any SSRC groups.\r\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\r\n     * <tt>false</tt> otherwise.\r\n     */\r\n    containsAnySSRCGroups() {\r\n        return this.mLine.ssrcGroups !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Finds the primary video SSRC.\r\n     * @returns {number|undefined} the primary video ssrc\r\n     * @throws Error if the underlying media description is not a video\r\n     */\r\n    getPrimaryVideoSsrc() {\r\n        const mediaType = this.mLine.type;\r\n\r\n        if (mediaType !== 'video') {\r\n            throw new Error(\r\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\r\n        }\r\n\r\n        const numSsrcs = _getSSRCCount(this.mLine);\r\n\r\n        if (numSsrcs === 1) {\r\n            // Not using \"ssrcs\" getter on purpose here\r\n            return this.mLine.ssrcs[0].id;\r\n        }\r\n\r\n        // Look for a SIM, FID, or FEC-FR group\r\n        if (this.mLine.ssrcGroups) {\r\n            const simGroup = this.findGroup('SIM');\r\n\r\n            if (simGroup) {\r\n                return parsePrimarySSRC(simGroup);\r\n            }\r\n            const fidGroup = this.findGroup('FID');\r\n\r\n            if (fidGroup) {\r\n                return parsePrimarySSRC(fidGroup);\r\n            }\r\n            const fecGroup = this.findGroup('FEC-FR');\r\n\r\n            if (fecGroup) {\r\n                return parsePrimarySSRC(fecGroup);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Obtains RTX SSRC from the underlying video description (the\r\n     * secondary SSRC of the first \"FID\" group found)\r\n     * @param {number} primarySsrc the video ssrc for which to find the\r\n     * corresponding rtx ssrc\r\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\r\n     * one)\r\n     */\r\n    getRtxSSRC(primarySsrc) {\r\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\r\n\r\n\r\n        return fidGroup && parseSecondarySSRC(fidGroup);\r\n    }\r\n\r\n    /**\r\n     * Obtains all SSRCs contained in the underlying media description.\r\n     * @return {Array.<number>} an array with all SSRC as numbers.\r\n     */\r\n    getSSRCs() {\r\n        return this.ssrcs\r\n            .map(ssrcInfo => ssrcInfo.id)\r\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\r\n    }\r\n\r\n    /**\r\n     * Obtains primary video SSRCs.\r\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\r\n     * @throws Error if the wrapped media description is not a video.\r\n     */\r\n    getPrimaryVideoSSRCs() {\r\n        const mediaType = this.mLine.type;\r\n\r\n        if (mediaType !== 'video') {\r\n            throw new Error(\r\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\r\n        }\r\n\r\n        const videoSSRCs = this.getSSRCs();\r\n\r\n        for (const ssrcGroupInfo of this.ssrcGroups) {\r\n            // Right now, FID and FEC-FR groups are the only ones we parse to\r\n            // disqualify streams.  If/when others arise we'll\r\n            // need to add support for them here\r\n            if (ssrcGroupInfo.semantics === 'FID'\r\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\r\n                // secondary streams should be filtered out\r\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\r\n\r\n                videoSSRCs.splice(\r\n                    videoSSRCs.indexOf(secondarySsrc), 1);\r\n            }\r\n        }\r\n\r\n        return videoSSRCs;\r\n    }\r\n\r\n    /**\r\n     * Dumps all SSRC groups of this media description to JSON.\r\n     */\r\n    dumpSSRCGroups() {\r\n        return JSON.stringify(this.mLine.ssrcGroups);\r\n    }\r\n\r\n    /**\r\n     * Removes all SSRC groups which contain given SSRC number at any position.\r\n     * @param {number} ssrc the SSRC for which all matching groups are to be\r\n     * removed.\r\n     */\r\n    removeGroupsWithSSRC(ssrc) {\r\n        if (!this.mLine.ssrcGroups) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\r\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\r\n    }\r\n\r\n    /**\r\n     * Removes groups that match given semantics.\r\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\r\n     */\r\n    removeGroupsBySemantics(semantics) {\r\n        if (!this.mLine.ssrcGroups) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcGroups\r\n            = this.mLine.ssrcGroups\r\n                .filter(groupInfo => groupInfo.semantics !== semantics);\r\n    }\r\n\r\n    /**\r\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\r\n     * @param {number} oldSSRC the old SSRC number\r\n     * @param {number} newSSRC the new SSRC number\r\n     */\r\n    replaceSSRC(oldSSRC, newSSRC) {\r\n        if (this.mLine.ssrcs) {\r\n            this.mLine.ssrcs.forEach(ssrcInfo => {\r\n                if (ssrcInfo.id === oldSSRC) {\r\n                    ssrcInfo.id = newSSRC;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds given SSRC group to this media description.\r\n     * @param {object} group the SSRC group object as defined by\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    addSSRCGroup(group) {\r\n        this.ssrcGroups.push(group);\r\n    }\r\n}\r\n\r\n/**\r\n * Utility class for SDP manipulation using the 'sdp-transform' library.\r\n *\r\n * Typical use usage scenario:\r\n *\r\n * const transformer = new SdpTransformWrap(rawSdp);\r\n * const videoMLine = transformer.selectMedia('video);\r\n * if (videoMLine) {\r\n *     videoMLiner.addSSRCAttribute({\r\n *         id: 2342343,\r\n *         attribute: \"cname\",\r\n *         value: \"someCname\"\r\n *     });\r\n *     rawSdp = transformer.toRawSdp();\r\n * }\r\n */\r\nexport class SdpTransformWrap {\r\n\r\n    /**\r\n     * Creates new instance and parses the raw SDP into objects using\r\n     * 'sdp-transform' lib.\r\n     * @param {string} rawSDP the SDP in raw text format.\r\n     */\r\n    constructor(rawSDP) {\r\n        this.parsedSDP = transform.parse(rawSDP);\r\n    }\r\n\r\n    /**\r\n     * Selects the first media SDP of given name.\r\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\r\n     * 'data'.\r\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\r\n     * line or <tt>null</tt> if not found. The object returned references\r\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\r\n     * (it's not a copy).\r\n     */\r\n    selectMedia(mediaType) {\r\n        const selectedMLine\r\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\r\n\r\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\r\n    }\r\n\r\n    /**\r\n     * Converts the currently stored SDP state in this instance to raw text SDP\r\n     * format.\r\n     * @return {string}\r\n     */\r\n    toRawSDP() {\r\n        return transform.write(this.parsedSDP);\r\n    }\r\n}\r\n","/**\r\n * Indicates that the local connection statistics were updated.\r\n */\r\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\r\n\r\n/**\r\n * Indicates that the connection statistics for a particular remote participant\r\n * were updated.\r\n */\r\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\r\n","export const SignalingEvents = {\r\n    /**\r\n     * Event triggered when participant's muted status changes.\r\n     *\r\n     * @param {string} endpointId the track owner's identifier (MUC nickname)\r\n     * @param {MediaType} mediaType \"audio\" or \"video\"\r\n     * @param {boolean} isMuted the new muted state\r\n     */\r\n    PEER_MUTED_CHANGED : 'signaling.peerMuted',\r\n\r\n    /**\r\n     * Event triggered when participant's video type changes.\r\n     *\r\n     * @param {string} endpointId the video owner's ID (MUC nickname)\r\n     * @param {VideoType} videoType the new value\r\n     */\r\n    PEER_VIDEO_TYPE_CHANGED : 'signaling.peerVideoType',\r\n\r\n    /**\r\n     * Event triggered when source's muted status changes.\r\n     *\r\n     * @param {string} sourceName - The name of the source.\r\n     * @param {boolean} isMuted - The new muted state.\r\n     */\r\n    SOURCE_MUTED_CHANGED : 'signaling.sourceMuted',\r\n\r\n    /**\r\n     * Event triggered when source's video type changes.\r\n     *\r\n     * @param {string} source - The name of the source.\r\n     * @param {VideoType} videoType - The new value.\r\n     */\r\n    SOURCE_VIDEO_TYPE_CHANGED : 'signaling.sourceVideoType'\r\n}\r\n\r\n// exported for backward compatibility\r\nexport const PEER_MUTED_CHANGED = SignalingEvents.PEER_MUTED_CHANGED;\r\nexport const PEER_VIDEO_TYPE_CHANGED = SignalingEvents.PEER_VIDEO_TYPE_CHANGED;\r\nexport const SOURCE_MUTED_CHANGED = SignalingEvents.SOURCE_MUTED_CHANGED;\r\nexport const SOURCE_VIDEO_TYPE_CHANGED = SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED;","/**\r\n * The pending Jingle session state which means the session as defined in\r\n * XEP-0166(before 'session-invite/session-accept' took place).\r\n *\r\n * @type {string}\r\n */\r\nexport const PENDING = 'pending';\r\n\r\n/**\r\n * The active Jingle session state as defined in XEP-0166\r\n * (after 'session-invite'/'session-accept').\r\n *\r\n * @type {string}\r\n */\r\nexport const ACTIVE = 'active';\r\n\r\n/**\r\n * The ended Jingle session state as defined in XEP-0166\r\n * (after 'session-terminate').\r\n * @type {string}\r\n */\r\nexport const ENDED = 'ended';\r\n","/**\r\n * The know jingle actions that can be sent and should be acted upon by\r\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\r\n */\r\nexport const ACTIONS = {\r\n    ACCEPT: 'session-accept',\r\n    CONNECTION_ERROR: 'connection-error-encountered',\r\n    INITIATE: 'session-initiate',\r\n    TERMINATE: 'session-terminate',\r\n    TRANSPORT_INFO: 'transport-info',\r\n    UNAVAILABLE: 'unavailable'\r\n};\r\n","const Resolutions = {\r\n    '1080': {\r\n        width: 1920,\r\n        height: 1080,\r\n        order: 8\r\n    },\r\n    'fullhd': {\r\n        width: 1920,\r\n        height: 1080,\r\n        order: 8\r\n    },\r\n    '720': {\r\n        width: 1280,\r\n        height: 720,\r\n        order: 7\r\n    },\r\n    'hd': {\r\n        width: 1280,\r\n        height: 720,\r\n        order: 7\r\n    },\r\n    '960': {\r\n        width: 960,\r\n        height: 720,\r\n        order: 6\r\n    },\r\n    '540': {\r\n        width: 960,\r\n        height: 540,\r\n        order: 5\r\n    },\r\n    'qhd': {\r\n        width: 960,\r\n        height: 540,\r\n        order: 5\r\n    },\r\n\r\n    // 16:9 resolution first.\r\n    '360': {\r\n        width: 640,\r\n        height: 360,\r\n        order: 4\r\n    },\r\n    '640': {\r\n        width: 640,\r\n        height: 480,\r\n        order: 3\r\n    },\r\n    'vga': {\r\n        width: 640,\r\n        height: 480,\r\n        order: 3\r\n    },\r\n\r\n    // 16:9 resolution first.\r\n    '180': {\r\n        width: 320,\r\n        height: 180,\r\n        order: 2\r\n    },\r\n    '320': {\r\n        width: 320,\r\n        height: 240,\r\n        order: 1\r\n    }\r\n};\r\n\r\nmodule.exports = Resolutions;\r\n","/* global callstats */\r\n\r\nimport browser from '../browser';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * We define enumeration of wrtcFuncNames as we need them before\r\n * callstats is initialized to queue events.\r\n * @const\r\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\r\n */\r\nconst wrtcFuncNames = {\r\n    createOffer: 'createOffer',\r\n    createAnswer: 'createAnswer',\r\n    setLocalDescription: 'setLocalDescription',\r\n    setRemoteDescription: 'setRemoteDescription',\r\n    addIceCandidate: 'addIceCandidate',\r\n    getUserMedia: 'getUserMedia',\r\n    iceConnectionFailure: 'iceConnectionFailure',\r\n    signalingError: 'signalingError',\r\n    applicationLog: 'applicationLog'\r\n};\r\n\r\n/**\r\n * We define enumeration of fabricEvent as we need them before\r\n * callstats is initialized to queue events.\r\n * @const\r\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\r\n */\r\nconst fabricEvent = {\r\n    fabricHold: 'fabricHold',\r\n    fabricResume: 'fabricResume',\r\n    audioMute: 'audioMute',\r\n    audioUnmute: 'audioUnmute',\r\n    videoPause: 'videoPause',\r\n    videoResume: 'videoResume',\r\n    fabricUsageEvent: 'fabricUsageEvent',\r\n    fabricStats: 'fabricStats',\r\n    fabricTerminated: 'fabricTerminated',\r\n    screenShareStart: 'screenShareStart',\r\n    screenShareStop: 'screenShareStop',\r\n    dominantSpeaker: 'dominantSpeaker',\r\n    activeDeviceList: 'activeDeviceList'\r\n};\r\n\r\n/**\r\n * The user id to report to callstats as destination.\r\n * @type {string}\r\n */\r\nconst DEFAULT_REMOTE_USER = 'jitsi';\r\n\r\n/**\r\n * Type of pending reports, can be event or an error.\r\n * @type {{ERROR: string, EVENT: string}}\r\n */\r\nconst reportType = {\r\n    ERROR: 'error',\r\n    EVENT: 'event',\r\n    MST_WITH_USERID: 'mstWithUserID'\r\n};\r\n\r\n/**\r\n * Set of currently existing {@link CallStats} instances.\r\n * @type {Set<CallStats>}\r\n */\r\nlet _fabrics;\r\n\r\n/**\r\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\r\n * reports one peer connection the the CallStats backend and is allocated with\r\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\r\n * reporting various events. A fabric is considered disposed when\r\n * {@link CallStats.sendTerminateEvent} is executed.\r\n *\r\n * Currently only one backend instance can be created ever and it's done using\r\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\r\n * explicitly shutdown the backend, but it's supposed to close it's connection\r\n * automatically, after all fabrics have been terminated.\r\n */\r\nexport default class CallStats {\r\n    /**\r\n     * A callback passed to {@link callstats.addNewFabric}.\r\n     * @param {string} error 'success' means ok\r\n     * @param {string} msg some more details\r\n     * @private\r\n     */\r\n    static _addNewFabricCallback(error, msg) {\r\n        if (CallStats.backend && error !== 'success') {\r\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback passed to {@link callstats.initialize} (backend initialization)\r\n     * @param {string} error 'success' means ok\r\n     * @param {String} msg\r\n     * @private\r\n     */\r\n    static _initCallback(error, msg) {\r\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\r\n\r\n        // there is no lib, nothing to report to\r\n        if (error !== 'success') {\r\n            return;\r\n        }\r\n\r\n        CallStats.backendInitialized = true;\r\n\r\n        // I hate that\r\n        let atLeastOneFabric = false;\r\n        let defaultInstance = null;\r\n\r\n        for (const callStatsInstance of CallStats.fabrics.values()) {\r\n            if (!callStatsInstance.hasFabric) {\r\n                logger.debug('addNewFabric - initCallback');\r\n                if (callStatsInstance._addNewFabric()) {\r\n                    atLeastOneFabric = true;\r\n                    if (!defaultInstance) {\r\n                        defaultInstance = callStatsInstance;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!atLeastOneFabric) {\r\n            return;\r\n        }\r\n\r\n        CallStats._emptyReportQueue(defaultInstance);\r\n    }\r\n\r\n    /**\r\n     * Empties report queue.\r\n     *\r\n     * @param {CallStats} csInstance - The callstats instance.\r\n     * @private\r\n     */\r\n    static _emptyReportQueue(csInstance) {\r\n        // There is no conference ID nor a PeerConnection available when some of\r\n        // the events are scheduled on the reportsQueue, so those will be\r\n        // reported on the first initialized fabric.\r\n        const defaultConfID = csInstance.confID;\r\n        const defaultPC = csInstance.peerconnection;\r\n\r\n        // notify callstats about failures if there were any\r\n        for (const report of CallStats.reportsQueue) {\r\n            if (report.type === reportType.ERROR) {\r\n                const errorData = report.data;\r\n\r\n                CallStats._reportError(\r\n                    csInstance,\r\n                    errorData.type,\r\n                    errorData.error,\r\n                    errorData.pc || defaultPC);\r\n            } else if (report.type === reportType.EVENT) {\r\n                // if we have and event to report and we failed to add\r\n                // fabric this event will not be reported anyway, returning\r\n                // an error\r\n                const eventData = report.data;\r\n\r\n                CallStats.backend.sendFabricEvent(\r\n                    report.pc || defaultPC,\r\n                    eventData.event,\r\n                    defaultConfID,\r\n                    eventData.eventData);\r\n            } else if (report.type === reportType.MST_WITH_USERID) {\r\n                const data = report.data;\r\n\r\n                CallStats.backend.associateMstWithUserID(\r\n                    report.pc || defaultPC,\r\n                    data.callStatsId,\r\n                    defaultConfID,\r\n                    data.ssrc,\r\n                    data.usageLabel,\r\n                    data.containerId\r\n                );\r\n            }\r\n        }\r\n        CallStats.reportsQueue.length = 0;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Reports an error to callstats.\r\n     *\r\n     * @param {CallStats} [cs]\r\n     * @param type the type of the error, which will be one of the wrtcFuncNames\r\n     * @param error the error\r\n     * @param pc the peerconnection\r\n     * @private\r\n     */\r\n    static _reportError(cs, type, error, pc) {\r\n        let _error = error;\r\n\r\n        if (!_error) {\r\n            logger.warn('No error is passed!');\r\n            _error = new Error('Unknown error');\r\n        }\r\n        if (CallStats.backendInitialized && cs) {\r\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                type: reportType.ERROR,\r\n                data: {\r\n                    error: _error,\r\n                    pc,\r\n                    type\r\n                }\r\n            });\r\n        }\r\n\r\n        // else just ignore it\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Reports an error to callstats.\r\n     *\r\n     * @param {CallStats} cs\r\n     * @param event the type of the event, which will be one of the fabricEvent\r\n     * @param eventData additional data to pass to event\r\n     * @private\r\n     */\r\n    static _reportEvent(cs, event, eventData) {\r\n        const pc = cs && cs.peerconnection;\r\n        const confID = cs && cs.confID;\r\n\r\n        if (CallStats.backendInitialized && cs) {\r\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                confID,\r\n                pc,\r\n                type: reportType.EVENT,\r\n                data: { event,\r\n                    eventData }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wraps some of the CallStats API method and logs their calls with\r\n     * arguments on the debug logging level. Also wraps some of the backend\r\n     * methods execution into try catch blocks to not crash the app in case\r\n     * there is a problem with the backend itself.\r\n     * @param {callstats} theBackend\r\n     * @private\r\n     */\r\n    static _traceAndCatchBackendCalls(theBackend) {\r\n        const tryCatchMethods = [\r\n            'associateMstWithUserID',\r\n            'sendFabricEvent',\r\n            'sendUserFeedback'\r\n\r\n            // 'reportError', - this one needs special handling - see code below\r\n        ];\r\n\r\n        for (const methodName of tryCatchMethods) {\r\n            const originalMethod = theBackend[methodName];\r\n\r\n            theBackend[methodName] = function(...theArguments) {\r\n                try {\r\n                    return originalMethod.apply(theBackend, theArguments);\r\n                } catch (e) {\r\n                    GlobalOnErrorHandler.callErrorHandler(e);\r\n                }\r\n            };\r\n        }\r\n        const debugMethods = [\r\n            'associateMstWithUserID',\r\n            'sendFabricEvent',\r\n            'sendUserFeedback'\r\n\r\n            // 'reportError', - this one needs special handling - see code below\r\n        ];\r\n\r\n        for (const methodName of debugMethods) {\r\n            const originalMethod = theBackend[methodName];\r\n\r\n            theBackend[methodName] = function(...theArguments) {\r\n                logger.debug(methodName, theArguments);\r\n                originalMethod.apply(theBackend, theArguments);\r\n            };\r\n        }\r\n        const originalReportError = theBackend.reportError;\r\n\r\n        /* eslint-disable max-params */\r\n        theBackend.reportError = function(pc, cs, type, ...args) {\r\n            // Logs from the logger are submitted on the applicationLog event\r\n            // \"type\". Logging the arguments on the logger will create endless\r\n            // loop, because it will put all the logs to the logger queue again.\r\n            if (type === wrtcFuncNames.applicationLog) {\r\n                // NOTE otherArguments are not logged to the console on purpose\r\n                // to not log the whole log batch\r\n                // FIXME check the current logging level (currently not exposed\r\n                // by the logger implementation)\r\n                // NOTE it is not safe to log whole objects on react-native as\r\n                // those contain too many circular references and may crash\r\n                // the app.\r\n                if (!browser.isReactNative()) {\r\n                    console && console.debug('reportError', pc, cs, type);\r\n                }\r\n            } else {\r\n                logger.debug('reportError', pc, cs, type, ...args);\r\n            }\r\n            try {\r\n                originalReportError.call(theBackend, pc, cs, type, ...args);\r\n            } catch (exception) {\r\n                if (type === wrtcFuncNames.applicationLog) {\r\n                    console && console.error('reportError', exception);\r\n                } else {\r\n                    GlobalOnErrorHandler.callErrorHandler(exception);\r\n                }\r\n            }\r\n        };\r\n\r\n        /* eslint-enable max-params */\r\n    }\r\n\r\n    /**\r\n     * Returns the Set with the currently existing {@link CallStats} instances.\r\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\r\n     * @type {Set<CallStats>}\r\n     */\r\n    static get fabrics() {\r\n        if (!_fabrics) {\r\n            _fabrics = new Set();\r\n        }\r\n\r\n        return _fabrics;\r\n    }\r\n\r\n    /**\r\n     * Initializes the CallStats backend. Should be called only if\r\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\r\n     * @param {object} options\r\n     * @param {String} options.callStatsID CallStats credentials - ID\r\n     * @param {String} options.callStatsSecret CallStats credentials - secret\r\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\r\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\r\n     * @param {string} options.userName the <tt>userName</tt> part of\r\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\r\n     *\r\n     */\r\n    static initBackend(options) {\r\n        if (CallStats.backend) {\r\n            throw new Error('CallStats backend has been initialized already!');\r\n        }\r\n        try {\r\n            const CallStatsBackend = callstats;\r\n\r\n            CallStats.backend = new CallStatsBackend();\r\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\r\n            CallStats.userID = {\r\n                aliasName: options.aliasName,\r\n                userName: options.userName\r\n            };\r\n            CallStats.callStatsID = options.callStatsID;\r\n            CallStats.callStatsSecret = options.callStatsSecret;\r\n\r\n            let configParams;\r\n\r\n            if (options.applicationName) {\r\n                configParams = {\r\n                    applicationVersion:\r\n                        `${options.applicationName} (${\r\n                            browser.getName()})`\r\n                };\r\n            }\r\n\r\n            if (options.confID) {\r\n                // we first check is there a tenant in the confID\r\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\r\n\r\n                // if there is no tenant, we will just set '/'\r\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\r\n            }\r\n\r\n            // userID is generated or given by the origin server\r\n            CallStats.backend.initialize(\r\n                CallStats.callStatsID,\r\n                CallStats.callStatsSecret,\r\n                CallStats.userID,\r\n                CallStats._initCallback,\r\n                undefined,\r\n                configParams);\r\n\r\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\r\n\r\n            if (getWiFiStatsMethod) {\r\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\r\n\r\n                getWiFiStatsMethod().then(result => {\r\n                    if (result) {\r\n                        logger.info('Reported wifi addresses:'\r\n                            , JSON.parse(result).addresses);\r\n                    }\r\n                })\r\n                .catch(() => {});// eslint-disable-line no-empty-function\r\n            }\r\n\r\n            return true;\r\n        } catch (e) {\r\n            // The callstats.io API failed to initialize (e.g. because its\r\n            // download did not succeed in general or on time). Further attempts\r\n            // to utilize it cannot possibly succeed.\r\n            GlobalOnErrorHandler.callErrorHandler(e);\r\n            CallStats.backend = null;\r\n            logger.error(e);\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the CallStats backend has been created. It does not mean that\r\n     * it has been initialized, but only that the API instance has been\r\n     * allocated successfully.\r\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\r\n     * otherwise\r\n     */\r\n    static isBackendInitialized() {\r\n        return Boolean(CallStats.backend);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats about active device.\r\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\r\n     * their data\r\n     * @param {CallStats} cs callstats instance related to the event\r\n     */\r\n    static sendActiveDeviceListEvent(devicesData, cs) {\r\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that there is a log we want to report.\r\n     *\r\n     * @param {Error} e error to send or {String} message\r\n     * @param {CallStats} cs callstats instance related to the error (optional)\r\n     */\r\n    static sendApplicationLog(e, cs) {\r\n        try {\r\n            CallStats._reportError(\r\n                cs,\r\n                wrtcFuncNames.applicationLog,\r\n                e,\r\n                cs && cs.peerconnection);\r\n        } catch (error) {\r\n            // If sendApplicationLog fails it should not be printed to\r\n            // the logger, because it will try to push the logs again\r\n            // (through sendApplicationLog) and an endless loop is created.\r\n            if (console && (typeof console.error === 'function')) {\r\n                // FIXME send analytics event as well\r\n                console.error('sendApplicationLog failed', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the given feedback through CallStats.\r\n     *\r\n     * @param {string} conferenceID the conference ID for which the feedback\r\n     * will be reported.\r\n     * @param overall an integer between 1 and 5 indicating the\r\n     * user feedback\r\n     * @param comment detailed feedback from the user.\r\n     */\r\n    static sendFeedback(conferenceID, overall, comment) {\r\n        return new Promise((resolve, reject) => {\r\n            if (CallStats.backend) {\r\n                CallStats.backend.sendUserFeedback(\r\n                    conferenceID,\r\n                    {\r\n                        userID: CallStats.userID,\r\n                        overall,\r\n                        comment\r\n                    },\r\n                    (status, message) => {\r\n                        if (status === 'success') {\r\n                            resolve(message);\r\n                        } else {\r\n                            reject(message);\r\n                        }\r\n                    });\r\n            } else {\r\n                const reason = 'Failed to submit feedback to CallStats - no backend';\r\n\r\n                logger.error(reason);\r\n                reject(reason);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that getUserMedia failed.\r\n     *\r\n     * @param {Error} e error to send\r\n     * @param {CallStats} cs callstats instance related to the error (optional)\r\n     */\r\n    static sendGetUserMediaFailed(e, cs) {\r\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for mute events\r\n     * @param mute {boolean} true for muted and false for not muted\r\n     * @param type {String} \"audio\"/\"video\"\r\n     * @param {CallStats} cs callstats instance related to the event\r\n     */\r\n    static sendMuteEvent(mute, type, cs) {\r\n        let event;\r\n\r\n        if (type === 'video') {\r\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\r\n        } else {\r\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\r\n        }\r\n\r\n        CallStats._reportEvent(cs, event);\r\n    }\r\n\r\n    /**\r\n     * Creates new CallStats instance that handles all callstats API calls for\r\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\r\n     * one CallStats fabric added with 'addFabric' API method for the\r\n     * {@link TraceablePeerConnection} instance passed in the constructor.\r\n     * @param {TraceablePeerConnection} tpc\r\n     * @param {Object} options\r\n     * @param {string} options.confID the conference ID that wil be used to\r\n     * report the session.\r\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\r\n     * which given <tt>tpc</tt> is connected.\r\n     */\r\n    constructor(tpc, options) {\r\n        this.confID = options.confID;\r\n        this.tpc = tpc;\r\n        this.peerconnection = tpc.peerconnection;\r\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\r\n        this.hasFabric = false;\r\n\r\n        CallStats.fabrics.add(this);\r\n\r\n        if (CallStats.backendInitialized) {\r\n            this._addNewFabric();\r\n\r\n            // if this is the first fabric let's try to empty the\r\n            // report queue. Reports all events that we recorded between\r\n            // backend initialization and receiving the first fabric\r\n            if (CallStats.fabrics.size === 1) {\r\n                CallStats._emptyReportQueue(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\r\n     * the peer connection associated with this instance.\r\n     * @return {boolean} true if the call was successful or false otherwise.\r\n     */\r\n    _addNewFabric() {\r\n        logger.info('addNewFabric', this.remoteUserID);\r\n        try {\r\n            const fabricAttributes = {\r\n                remoteEndpointType:\r\n                    this.tpc.isP2P\r\n                        ? CallStats.backend.endpointType.peer\r\n                        : CallStats.backend.endpointType.server\r\n            };\r\n            const ret\r\n                = CallStats.backend.addNewFabric(\r\n                    this.peerconnection,\r\n                    this.remoteUserID,\r\n                    CallStats.backend.fabricUsage.multiplex,\r\n                    this.confID,\r\n                    fabricAttributes,\r\n                    CallStats._addNewFabricCallback);\r\n\r\n            this.hasFabric = true;\r\n\r\n            const success = ret.status === 'success';\r\n\r\n            if (!success) {\r\n                logger.error('callstats fabric not initilized', ret.message);\r\n            }\r\n\r\n            return success;\r\n\r\n        } catch (error) {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Lets CallStats module know where is given SSRC rendered by providing\r\n     * renderer tag ID.\r\n     * If the lib is not initialized yet queue the call for later, when it's\r\n     * ready.\r\n     * @param {number} ssrc the SSRC of the stream\r\n     * @param {boolean} isLocal indicates whether this the stream is local\r\n     * @param {string|null} streamEndpointId if the stream is not local the it\r\n     * needs to contain the stream owner's ID\r\n     * @param {string} usageLabel meaningful usage label of this stream like\r\n     *        'microphone', 'camera' or 'screen'.\r\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\r\n     *        renders the stream.\r\n     */\r\n    associateStreamWithVideoTag(\r\n            ssrc,\r\n            isLocal,\r\n            streamEndpointId,\r\n            usageLabel,\r\n            containerId) {\r\n        if (!CallStats.backend) {\r\n            return;\r\n        }\r\n\r\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\r\n\r\n        if (CallStats.backendInitialized) {\r\n            CallStats.backend.associateMstWithUserID(\r\n                this.peerconnection,\r\n                callStatsId,\r\n                this.confID,\r\n                ssrc,\r\n                usageLabel,\r\n                containerId);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                type: reportType.MST_WITH_USERID,\r\n                pc: this.peerconnection,\r\n                data: {\r\n                    callStatsId,\r\n                    containerId,\r\n                    ssrc,\r\n                    usageLabel\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Notifies CallStats that we are the new dominant speaker in the\r\n     * conference.\r\n     */\r\n    sendDominantSpeakerEvent() {\r\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that the fabric for the underlying peerconnection was\r\n     * closed and no evens should be reported, after this call.\r\n     */\r\n    sendTerminateEvent() {\r\n        if (CallStats.backendInitialized) {\r\n            CallStats.backend.sendFabricEvent(\r\n                this.peerconnection,\r\n                CallStats.backend.fabricEvent.fabricTerminated,\r\n                this.confID);\r\n        }\r\n        CallStats.fabrics.delete(this);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for ice connection failed\r\n     */\r\n    sendIceConnectionFailedEvent() {\r\n        CallStats._reportError(\r\n            this,\r\n            wrtcFuncNames.iceConnectionFailure,\r\n            null,\r\n            this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to create offer.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendCreateOfferFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to create answer.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendCreateAnswerFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Sends either resume or hold event for the fabric associated with\r\n     * the underlying peerconnection.\r\n     * @param {boolean} isResume true to resume or false to hold\r\n     */\r\n    sendResumeOrHoldEvent(isResume) {\r\n        CallStats._reportEvent(\r\n            this,\r\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for screen sharing events\r\n     * @param {boolean} start true for starting screen sharing and\r\n     * false for not stopping\r\n     * @param {string|null} ssrc - optional ssrc value, used only when\r\n     * starting screen sharing.\r\n     */\r\n    sendScreenSharingEvent(start, ssrc) {\r\n        let eventData;\r\n\r\n        if (ssrc) {\r\n            eventData = { ssrc };\r\n        }\r\n\r\n        CallStats._reportEvent(\r\n            this,\r\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\r\n            eventData);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to set local description.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendSetLocalDescFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to set remote description.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendSetRemoteDescFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to add ICE candidate.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendAddIceCandidateFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\r\n    }\r\n}\r\n\r\n/**\r\n * The CallStats API backend instance\r\n * @type {callstats}\r\n */\r\nCallStats.backend = null;\r\n\r\n// some errors/events may happen before CallStats init\r\n// in this case we accumulate them in this array\r\n// and send them to callstats on init\r\nCallStats.reportsQueue = [];\r\n\r\n/**\r\n * Whether the library was successfully initialized(the backend) using its\r\n * initialize method.\r\n * @type {boolean}\r\n */\r\nCallStats.backendInitialized = false;\r\n\r\n/**\r\n * Part of the CallStats credentials - application ID\r\n * @type {string}\r\n */\r\nCallStats.callStatsID = null;\r\n\r\n/**\r\n * Part of the CallStats credentials - application secret\r\n * @type {string}\r\n */\r\nCallStats.callStatsSecret = null;\r\n\r\n/**\r\n * Local CallStats user ID structure. Can be set only once when\r\n * {@link backend} is initialized, so it's static for the time being.\r\n * See CallStats API for more info:\r\n * https://www.callstats.io/api/#userid\r\n * @type {object}\r\n */\r\nCallStats.userID = null;\r\n","import Listenable from '../util/Listenable';\r\n\r\n/**\r\n * Creates ConnectionPlugin class that extends the passed class.\r\n * @param {Class} base the definition of the class that will be extended by\r\n * ConnectionPlugin\r\n */\r\nfunction getConnectionPluginDefinition(base = class {}) {\r\n    /**\r\n     * Base class for strophe connection plugins.\r\n     */\r\n    return class extends base {\r\n        /**\r\n         *\r\n         */\r\n        constructor(...args) {\r\n            super(...args);\r\n            this.connection = null;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param connection\r\n         */\r\n        init(connection) {\r\n            this.connection = connection;\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * ConnectionPlugin class.\r\n */\r\nexport default getConnectionPluginDefinition();\r\n\r\n/**\r\n * ConnectionPlugin class that extends Listenable.\r\n */\r\nexport const ConnectionPluginListenable\r\n    = getConnectionPluginDefinition(Listenable);\r\n","/**\r\n * @const\r\n */\r\nconst ALPHANUM\r\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n/**\r\n * Hexadecimal digits.\r\n * @const\r\n */\r\nconst HEX_DIGITS = '0123456789abcdef';\r\n\r\n/**\r\n * Generates random int within the range [min, max]\r\n * @param min the minimum value for the generated number\r\n * @param max the maximum value for the generated number\r\n * @returns random int number\r\n */\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * Get random element from array or string.\r\n * @param {Array|string} arr source\r\n * @returns array element or string character\r\n */\r\nfunction randomElement(arr) {\r\n    return arr[randomInt(0, arr.length - 1)];\r\n}\r\n\r\n/**\r\n * Generate random alphanumeric string.\r\n * @param {number} length expected string length\r\n * @returns {string} random string of specified length\r\n */\r\nfunction randomAlphanumStr(length) {\r\n    let result = '';\r\n\r\n    for (let i = 0; i < length; i += 1) {\r\n        result += randomElement(ALPHANUM);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Exported interface.\r\n */\r\nconst RandomUtil = {\r\n    /**\r\n     * Returns a random hex digit.\r\n     * @returns {*}\r\n     */\r\n    randomHexDigit() {\r\n        return randomElement(HEX_DIGITS);\r\n    },\r\n\r\n    /**\r\n     * Returns a random string of hex digits with length 'len'.\r\n     * @param len the length.\r\n     */\r\n    randomHexString(len) {\r\n        let ret = '';\r\n\r\n        while (len--) { // eslint-disable-line no-param-reassign\r\n            ret += this.randomHexDigit();\r\n        }\r\n\r\n        return ret;\r\n    },\r\n    randomElement,\r\n    randomAlphanumStr,\r\n    randomInt\r\n};\r\n\r\nmodule.exports = RandomUtil;\r\n","/**\r\n * The errors for the connection.\r\n */\r\n\r\n/**\r\n * Indicates that the connection was dropped with an error which was most likely\r\n * caused by some networking issues. The dropped term in this context means that\r\n * the connection was closed unexpectedly (not on user's request).\r\n *\r\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\r\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\r\n * could also happen when BOSH request is sent to the server with the session-id\r\n * that is not know to the server. But this should not happen in lib-jitsi-meet\r\n * case as long as the service is configured correctly (there is no bug).\r\n */\r\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\r\n\r\n/**\r\n * Not specified errors.\r\n */\r\nexport const OTHER_ERROR = 'connection.otherError';\r\n\r\n/**\r\n * Indicates that a password is required in order to join the conference.\r\n */\r\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\r\n\r\n/**\r\n * Indicates that the connection was dropped, because of too many 5xx HTTP\r\n * errors on BOSH requests.\r\n */\r\nexport const SERVER_ERROR = 'connection.serverError';\r\n","/**\r\n * lodash (Custom Build) <https://lodash.com/>\r\n * Build: `lodash modularize exports=\"npm\" -o ./`\r\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\r\n * Released under MIT license <https://lodash.com/license>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n */\r\n\r\n/** Used as the size to enable large array optimizations. */\r\nvar LARGE_ARRAY_SIZE = 200;\r\n\r\n/** Used to stand-in for `undefined` hash values. */\r\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n/** `Object#toString` result references. */\r\nvar argsTag = '[object Arguments]',\r\n    arrayTag = '[object Array]',\r\n    boolTag = '[object Boolean]',\r\n    dateTag = '[object Date]',\r\n    errorTag = '[object Error]',\r\n    funcTag = '[object Function]',\r\n    genTag = '[object GeneratorFunction]',\r\n    mapTag = '[object Map]',\r\n    numberTag = '[object Number]',\r\n    objectTag = '[object Object]',\r\n    promiseTag = '[object Promise]',\r\n    regexpTag = '[object RegExp]',\r\n    setTag = '[object Set]',\r\n    stringTag = '[object String]',\r\n    symbolTag = '[object Symbol]',\r\n    weakMapTag = '[object WeakMap]';\r\n\r\nvar arrayBufferTag = '[object ArrayBuffer]',\r\n    dataViewTag = '[object DataView]',\r\n    float32Tag = '[object Float32Array]',\r\n    float64Tag = '[object Float64Array]',\r\n    int8Tag = '[object Int8Array]',\r\n    int16Tag = '[object Int16Array]',\r\n    int32Tag = '[object Int32Array]',\r\n    uint8Tag = '[object Uint8Array]',\r\n    uint8ClampedTag = '[object Uint8ClampedArray]',\r\n    uint16Tag = '[object Uint16Array]',\r\n    uint32Tag = '[object Uint32Array]';\r\n\r\n/**\r\n * Used to match `RegExp`\r\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\r\n */\r\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\r\n\r\n/** Used to match `RegExp` flags from their coerced string values. */\r\nvar reFlags = /\\w*$/;\r\n\r\n/** Used to detect host constructors (Safari). */\r\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\r\n\r\n/** Used to detect unsigned integer values. */\r\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n/** Used to identify `toStringTag` values supported by `_.clone`. */\r\nvar cloneableTags = {};\r\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\r\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\r\ncloneableTags[boolTag] = cloneableTags[dateTag] =\r\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\r\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\r\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\r\ncloneableTags[numberTag] = cloneableTags[objectTag] =\r\ncloneableTags[regexpTag] = cloneableTags[setTag] =\r\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\r\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\r\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\r\ncloneableTags[errorTag] = cloneableTags[funcTag] =\r\ncloneableTags[weakMapTag] = false;\r\n\r\n/** Detect free variable `global` from Node.js. */\r\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\r\n\r\n/** Detect free variable `self`. */\r\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n\r\n/** Used as a reference to the global object. */\r\nvar root = freeGlobal || freeSelf || Function('return this')();\r\n\r\n/** Detect free variable `exports`. */\r\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\r\n\r\n/** Detect free variable `module`. */\r\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\r\n\r\n/** Detect the popular CommonJS extension `module.exports`. */\r\nvar moduleExports = freeModule && freeModule.exports === freeExports;\r\n\r\n/**\r\n * Adds the key-value `pair` to `map`.\r\n *\r\n * @private\r\n * @param {Object} map The map to modify.\r\n * @param {Array} pair The key-value pair to add.\r\n * @returns {Object} Returns `map`.\r\n */\r\nfunction addMapEntry(map, pair) {\r\n  // Don't return `map.set` because it's not chainable in IE 11.\r\n  map.set(pair[0], pair[1]);\r\n  return map;\r\n}\r\n\r\n/**\r\n * Adds `value` to `set`.\r\n *\r\n * @private\r\n * @param {Object} set The set to modify.\r\n * @param {*} value The value to add.\r\n * @returns {Object} Returns `set`.\r\n */\r\nfunction addSetEntry(set, value) {\r\n  // Don't return `set.add` because it's not chainable in IE 11.\r\n  set.add(value);\r\n  return set;\r\n}\r\n\r\n/**\r\n * A specialized version of `_.forEach` for arrays without support for\r\n * iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction arrayEach(array, iteratee) {\r\n  var index = -1,\r\n      length = array ? array.length : 0;\r\n\r\n  while (++index < length) {\r\n    if (iteratee(array[index], index, array) === false) {\r\n      break;\r\n    }\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * Appends the elements of `values` to `array`.\r\n *\r\n * @private\r\n * @param {Array} array The array to modify.\r\n * @param {Array} values The values to append.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction arrayPush(array, values) {\r\n  var index = -1,\r\n      length = values.length,\r\n      offset = array.length;\r\n\r\n  while (++index < length) {\r\n    array[offset + index] = values[index];\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * A specialized version of `_.reduce` for arrays without support for\r\n * iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @param {*} [accumulator] The initial value.\r\n * @param {boolean} [initAccum] Specify using the first element of `array` as\r\n *  the initial value.\r\n * @returns {*} Returns the accumulated value.\r\n */\r\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\r\n  var index = -1,\r\n      length = array ? array.length : 0;\r\n\r\n  if (initAccum && length) {\r\n    accumulator = array[++index];\r\n  }\r\n  while (++index < length) {\r\n    accumulator = iteratee(accumulator, array[index], index, array);\r\n  }\r\n  return accumulator;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.times` without support for iteratee shorthands\r\n * or max array length checks.\r\n *\r\n * @private\r\n * @param {number} n The number of times to invoke `iteratee`.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns the array of results.\r\n */\r\nfunction baseTimes(n, iteratee) {\r\n  var index = -1,\r\n      result = Array(n);\r\n\r\n  while (++index < n) {\r\n    result[index] = iteratee(index);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the value at `key` of `object`.\r\n *\r\n * @private\r\n * @param {Object} [object] The object to query.\r\n * @param {string} key The key of the property to get.\r\n * @returns {*} Returns the property value.\r\n */\r\nfunction getValue(object, key) {\r\n  return object == null ? undefined : object[key];\r\n}\r\n\r\n/**\r\n * Checks if `value` is a host object in IE < 9.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\r\n */\r\nfunction isHostObject(value) {\r\n  // Many host objects are `Object` objects that can coerce to strings\r\n  // despite having improperly defined `toString` methods.\r\n  var result = false;\r\n  if (value != null && typeof value.toString != 'function') {\r\n    try {\r\n      result = !!(value + '');\r\n    } catch (e) {}\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Converts `map` to its key-value pairs.\r\n *\r\n * @private\r\n * @param {Object} map The map to convert.\r\n * @returns {Array} Returns the key-value pairs.\r\n */\r\nfunction mapToArray(map) {\r\n  var index = -1,\r\n      result = Array(map.size);\r\n\r\n  map.forEach(function(value, key) {\r\n    result[++index] = [key, value];\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a unary function that invokes `func` with its argument transformed.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {Function} transform The argument transform.\r\n * @returns {Function} Returns the new function.\r\n */\r\nfunction overArg(func, transform) {\r\n  return function(arg) {\r\n    return func(transform(arg));\r\n  };\r\n}\r\n\r\n/**\r\n * Converts `set` to an array of its values.\r\n *\r\n * @private\r\n * @param {Object} set The set to convert.\r\n * @returns {Array} Returns the values.\r\n */\r\nfunction setToArray(set) {\r\n  var index = -1,\r\n      result = Array(set.size);\r\n\r\n  set.forEach(function(value) {\r\n    result[++index] = value;\r\n  });\r\n  return result;\r\n}\r\n\r\n/** Used for built-in method references. */\r\nvar arrayProto = Array.prototype,\r\n    funcProto = Function.prototype,\r\n    objectProto = Object.prototype;\r\n\r\n/** Used to detect overreaching core-js shims. */\r\nvar coreJsData = root['__core-js_shared__'];\r\n\r\n/** Used to detect methods masquerading as native. */\r\nvar maskSrcKey = (function() {\r\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\r\n  return uid ? ('Symbol(src)_1.' + uid) : '';\r\n}());\r\n\r\n/** Used to resolve the decompiled source of functions. */\r\nvar funcToString = funcProto.toString;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar objectToString = objectProto.toString;\r\n\r\n/** Used to detect if a method is native. */\r\nvar reIsNative = RegExp('^' +\r\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\r\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\r\n);\r\n\r\n/** Built-in value references. */\r\nvar Buffer = moduleExports ? root.Buffer : undefined,\r\n    Symbol = root.Symbol,\r\n    Uint8Array = root.Uint8Array,\r\n    getPrototype = overArg(Object.getPrototypeOf, Object),\r\n    objectCreate = Object.create,\r\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\r\n    splice = arrayProto.splice;\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\r\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\r\n    nativeKeys = overArg(Object.keys, Object);\r\n\r\n/* Built-in method references that are verified to be native. */\r\nvar DataView = getNative(root, 'DataView'),\r\n    Map = getNative(root, 'Map'),\r\n    Promise = getNative(root, 'Promise'),\r\n    Set = getNative(root, 'Set'),\r\n    WeakMap = getNative(root, 'WeakMap'),\r\n    nativeCreate = getNative(Object, 'create');\r\n\r\n/** Used to detect maps, sets, and weakmaps. */\r\nvar dataViewCtorString = toSource(DataView),\r\n    mapCtorString = toSource(Map),\r\n    promiseCtorString = toSource(Promise),\r\n    setCtorString = toSource(Set),\r\n    weakMapCtorString = toSource(WeakMap);\r\n\r\n/** Used to convert symbols to primitives and strings. */\r\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\r\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\r\n\r\n/**\r\n * Creates a hash object.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction Hash(entries) {\r\n  var index = -1,\r\n      length = entries ? entries.length : 0;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the hash.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf Hash\r\n */\r\nfunction hashClear() {\r\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the hash.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf Hash\r\n * @param {Object} hash The hash to modify.\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction hashDelete(key) {\r\n  return this.has(key) && delete this.__data__[key];\r\n}\r\n\r\n/**\r\n * Gets the hash value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf Hash\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction hashGet(key) {\r\n  var data = this.__data__;\r\n  if (nativeCreate) {\r\n    var result = data[key];\r\n    return result === HASH_UNDEFINED ? undefined : result;\r\n  }\r\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\r\n}\r\n\r\n/**\r\n * Checks if a hash value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf Hash\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction hashHas(key) {\r\n  var data = this.__data__;\r\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\r\n}\r\n\r\n/**\r\n * Sets the hash `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Hash\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the hash instance.\r\n */\r\nfunction hashSet(key, value) {\r\n  var data = this.__data__;\r\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\r\n  return this;\r\n}\r\n\r\n// Add methods to `Hash`.\r\nHash.prototype.clear = hashClear;\r\nHash.prototype['delete'] = hashDelete;\r\nHash.prototype.get = hashGet;\r\nHash.prototype.has = hashHas;\r\nHash.prototype.set = hashSet;\r\n\r\n/**\r\n * Creates an list cache object.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction ListCache(entries) {\r\n  var index = -1,\r\n      length = entries ? entries.length : 0;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the list cache.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf ListCache\r\n */\r\nfunction listCacheClear() {\r\n  this.__data__ = [];\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the list cache.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction listCacheDelete(key) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  if (index < 0) {\r\n    return false;\r\n  }\r\n  var lastIndex = data.length - 1;\r\n  if (index == lastIndex) {\r\n    data.pop();\r\n  } else {\r\n    splice.call(data, index, 1);\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Gets the list cache value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction listCacheGet(key) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  return index < 0 ? undefined : data[index][1];\r\n}\r\n\r\n/**\r\n * Checks if a list cache value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf ListCache\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction listCacheHas(key) {\r\n  return assocIndexOf(this.__data__, key) > -1;\r\n}\r\n\r\n/**\r\n * Sets the list cache `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the list cache instance.\r\n */\r\nfunction listCacheSet(key, value) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  if (index < 0) {\r\n    data.push([key, value]);\r\n  } else {\r\n    data[index][1] = value;\r\n  }\r\n  return this;\r\n}\r\n\r\n// Add methods to `ListCache`.\r\nListCache.prototype.clear = listCacheClear;\r\nListCache.prototype['delete'] = listCacheDelete;\r\nListCache.prototype.get = listCacheGet;\r\nListCache.prototype.has = listCacheHas;\r\nListCache.prototype.set = listCacheSet;\r\n\r\n/**\r\n * Creates a map cache object to store key-value pairs.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction MapCache(entries) {\r\n  var index = -1,\r\n      length = entries ? entries.length : 0;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the map.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf MapCache\r\n */\r\nfunction mapCacheClear() {\r\n  this.__data__ = {\r\n    'hash': new Hash,\r\n    'map': new (Map || ListCache),\r\n    'string': new Hash\r\n  };\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the map.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction mapCacheDelete(key) {\r\n  return getMapData(this, key)['delete'](key);\r\n}\r\n\r\n/**\r\n * Gets the map value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction mapCacheGet(key) {\r\n  return getMapData(this, key).get(key);\r\n}\r\n\r\n/**\r\n * Checks if a map value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf MapCache\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction mapCacheHas(key) {\r\n  return getMapData(this, key).has(key);\r\n}\r\n\r\n/**\r\n * Sets the map `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the map cache instance.\r\n */\r\nfunction mapCacheSet(key, value) {\r\n  getMapData(this, key).set(key, value);\r\n  return this;\r\n}\r\n\r\n// Add methods to `MapCache`.\r\nMapCache.prototype.clear = mapCacheClear;\r\nMapCache.prototype['delete'] = mapCacheDelete;\r\nMapCache.prototype.get = mapCacheGet;\r\nMapCache.prototype.has = mapCacheHas;\r\nMapCache.prototype.set = mapCacheSet;\r\n\r\n/**\r\n * Creates a stack cache object to store key-value pairs.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction Stack(entries) {\r\n  this.__data__ = new ListCache(entries);\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the stack.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf Stack\r\n */\r\nfunction stackClear() {\r\n  this.__data__ = new ListCache;\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the stack.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction stackDelete(key) {\r\n  return this.__data__['delete'](key);\r\n}\r\n\r\n/**\r\n * Gets the stack value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction stackGet(key) {\r\n  return this.__data__.get(key);\r\n}\r\n\r\n/**\r\n * Checks if a stack value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf Stack\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction stackHas(key) {\r\n  return this.__data__.has(key);\r\n}\r\n\r\n/**\r\n * Sets the stack `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the stack cache instance.\r\n */\r\nfunction stackSet(key, value) {\r\n  var cache = this.__data__;\r\n  if (cache instanceof ListCache) {\r\n    var pairs = cache.__data__;\r\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\r\n      pairs.push([key, value]);\r\n      return this;\r\n    }\r\n    cache = this.__data__ = new MapCache(pairs);\r\n  }\r\n  cache.set(key, value);\r\n  return this;\r\n}\r\n\r\n// Add methods to `Stack`.\r\nStack.prototype.clear = stackClear;\r\nStack.prototype['delete'] = stackDelete;\r\nStack.prototype.get = stackGet;\r\nStack.prototype.has = stackHas;\r\nStack.prototype.set = stackSet;\r\n\r\n/**\r\n * Creates an array of the enumerable property names of the array-like `value`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @param {boolean} inherited Specify returning inherited property names.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction arrayLikeKeys(value, inherited) {\r\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\r\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\r\n  var result = (isArray(value) || isArguments(value))\r\n    ? baseTimes(value.length, String)\r\n    : [];\r\n\r\n  var length = result.length,\r\n      skipIndexes = !!length;\r\n\r\n  for (var key in value) {\r\n    if ((inherited || hasOwnProperty.call(value, key)) &&\r\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\r\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * for equality comparisons.\r\n *\r\n * @private\r\n * @param {Object} object The object to modify.\r\n * @param {string} key The key of the property to assign.\r\n * @param {*} value The value to assign.\r\n */\r\nfunction assignValue(object, key, value) {\r\n  var objValue = object[key];\r\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\r\n      (value === undefined && !(key in object))) {\r\n    object[key] = value;\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the index at which the `key` is found in `array` of key-value pairs.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {*} key The key to search for.\r\n * @returns {number} Returns the index of the matched value, else `-1`.\r\n */\r\nfunction assocIndexOf(array, key) {\r\n  var length = array.length;\r\n  while (length--) {\r\n    if (eq(array[length][0], key)) {\r\n      return length;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.assign` without support for multiple sources\r\n * or `customizer` functions.\r\n *\r\n * @private\r\n * @param {Object} object The destination object.\r\n * @param {Object} source The source object.\r\n * @returns {Object} Returns `object`.\r\n */\r\nfunction baseAssign(object, source) {\r\n  return object && copyObject(source, keys(source), object);\r\n}\r\n\r\n/**\r\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\r\n * traversed objects.\r\n *\r\n * @private\r\n * @param {*} value The value to clone.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @param {boolean} [isFull] Specify a clone including symbols.\r\n * @param {Function} [customizer] The function to customize cloning.\r\n * @param {string} [key] The key of `value`.\r\n * @param {Object} [object] The parent object of `value`.\r\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\r\n * @returns {*} Returns the cloned value.\r\n */\r\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\r\n  var result;\r\n  if (customizer) {\r\n    result = object ? customizer(value, key, object, stack) : customizer(value);\r\n  }\r\n  if (result !== undefined) {\r\n    return result;\r\n  }\r\n  if (!isObject(value)) {\r\n    return value;\r\n  }\r\n  var isArr = isArray(value);\r\n  if (isArr) {\r\n    result = initCloneArray(value);\r\n    if (!isDeep) {\r\n      return copyArray(value, result);\r\n    }\r\n  } else {\r\n    var tag = getTag(value),\r\n        isFunc = tag == funcTag || tag == genTag;\r\n\r\n    if (isBuffer(value)) {\r\n      return cloneBuffer(value, isDeep);\r\n    }\r\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\r\n      if (isHostObject(value)) {\r\n        return object ? value : {};\r\n      }\r\n      result = initCloneObject(isFunc ? {} : value);\r\n      if (!isDeep) {\r\n        return copySymbols(value, baseAssign(result, value));\r\n      }\r\n    } else {\r\n      if (!cloneableTags[tag]) {\r\n        return object ? value : {};\r\n      }\r\n      result = initCloneByTag(value, tag, baseClone, isDeep);\r\n    }\r\n  }\r\n  // Check for circular references and return its corresponding clone.\r\n  stack || (stack = new Stack);\r\n  var stacked = stack.get(value);\r\n  if (stacked) {\r\n    return stacked;\r\n  }\r\n  stack.set(value, result);\r\n\r\n  if (!isArr) {\r\n    var props = isFull ? getAllKeys(value) : keys(value);\r\n  }\r\n  arrayEach(props || value, function(subValue, key) {\r\n    if (props) {\r\n      key = subValue;\r\n      subValue = value[key];\r\n    }\r\n    // Recursively populate clone (susceptible to call stack limits).\r\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.create` without support for assigning\r\n * properties to the created object.\r\n *\r\n * @private\r\n * @param {Object} prototype The object to inherit from.\r\n * @returns {Object} Returns the new object.\r\n */\r\nfunction baseCreate(proto) {\r\n  return isObject(proto) ? objectCreate(proto) : {};\r\n}\r\n\r\n/**\r\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\r\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\r\n * symbols of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {Function} keysFunc The function to get the keys of `object`.\r\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\r\n * @returns {Array} Returns the array of property names and symbols.\r\n */\r\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\r\n  var result = keysFunc(object);\r\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\r\n}\r\n\r\n/**\r\n * The base implementation of `getTag`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the `toStringTag`.\r\n */\r\nfunction baseGetTag(value) {\r\n  return objectToString.call(value);\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isNative` without bad shim checks.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a native function,\r\n *  else `false`.\r\n */\r\nfunction baseIsNative(value) {\r\n  if (!isObject(value) || isMasked(value)) {\r\n    return false;\r\n  }\r\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\r\n  return pattern.test(toSource(value));\r\n}\r\n\r\n/**\r\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction baseKeys(object) {\r\n  if (!isPrototype(object)) {\r\n    return nativeKeys(object);\r\n  }\r\n  var result = [];\r\n  for (var key in Object(object)) {\r\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a clone of  `buffer`.\r\n *\r\n * @private\r\n * @param {Buffer} buffer The buffer to clone.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Buffer} Returns the cloned buffer.\r\n */\r\nfunction cloneBuffer(buffer, isDeep) {\r\n  if (isDeep) {\r\n    return buffer.slice();\r\n  }\r\n  var result = new buffer.constructor(buffer.length);\r\n  buffer.copy(result);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a clone of `arrayBuffer`.\r\n *\r\n * @private\r\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\r\n * @returns {ArrayBuffer} Returns the cloned array buffer.\r\n */\r\nfunction cloneArrayBuffer(arrayBuffer) {\r\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\r\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a clone of `dataView`.\r\n *\r\n * @private\r\n * @param {Object} dataView The data view to clone.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the cloned data view.\r\n */\r\nfunction cloneDataView(dataView, isDeep) {\r\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\r\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\r\n}\r\n\r\n/**\r\n * Creates a clone of `map`.\r\n *\r\n * @private\r\n * @param {Object} map The map to clone.\r\n * @param {Function} cloneFunc The function to clone values.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the cloned map.\r\n */\r\nfunction cloneMap(map, isDeep, cloneFunc) {\r\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\r\n  return arrayReduce(array, addMapEntry, new map.constructor);\r\n}\r\n\r\n/**\r\n * Creates a clone of `regexp`.\r\n *\r\n * @private\r\n * @param {Object} regexp The regexp to clone.\r\n * @returns {Object} Returns the cloned regexp.\r\n */\r\nfunction cloneRegExp(regexp) {\r\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\r\n  result.lastIndex = regexp.lastIndex;\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a clone of `set`.\r\n *\r\n * @private\r\n * @param {Object} set The set to clone.\r\n * @param {Function} cloneFunc The function to clone values.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the cloned set.\r\n */\r\nfunction cloneSet(set, isDeep, cloneFunc) {\r\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\r\n  return arrayReduce(array, addSetEntry, new set.constructor);\r\n}\r\n\r\n/**\r\n * Creates a clone of the `symbol` object.\r\n *\r\n * @private\r\n * @param {Object} symbol The symbol object to clone.\r\n * @returns {Object} Returns the cloned symbol object.\r\n */\r\nfunction cloneSymbol(symbol) {\r\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\r\n}\r\n\r\n/**\r\n * Creates a clone of `typedArray`.\r\n *\r\n * @private\r\n * @param {Object} typedArray The typed array to clone.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the cloned typed array.\r\n */\r\nfunction cloneTypedArray(typedArray, isDeep) {\r\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\r\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\r\n}\r\n\r\n/**\r\n * Copies the values of `source` to `array`.\r\n *\r\n * @private\r\n * @param {Array} source The array to copy values from.\r\n * @param {Array} [array=[]] The array to copy values to.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction copyArray(source, array) {\r\n  var index = -1,\r\n      length = source.length;\r\n\r\n  array || (array = Array(length));\r\n  while (++index < length) {\r\n    array[index] = source[index];\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * Copies properties of `source` to `object`.\r\n *\r\n * @private\r\n * @param {Object} source The object to copy properties from.\r\n * @param {Array} props The property identifiers to copy.\r\n * @param {Object} [object={}] The object to copy properties to.\r\n * @param {Function} [customizer] The function to customize copied values.\r\n * @returns {Object} Returns `object`.\r\n */\r\nfunction copyObject(source, props, object, customizer) {\r\n  object || (object = {});\r\n\r\n  var index = -1,\r\n      length = props.length;\r\n\r\n  while (++index < length) {\r\n    var key = props[index];\r\n\r\n    var newValue = customizer\r\n      ? customizer(object[key], source[key], key, object, source)\r\n      : undefined;\r\n\r\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\r\n  }\r\n  return object;\r\n}\r\n\r\n/**\r\n * Copies own symbol properties of `source` to `object`.\r\n *\r\n * @private\r\n * @param {Object} source The object to copy symbols from.\r\n * @param {Object} [object={}] The object to copy symbols to.\r\n * @returns {Object} Returns `object`.\r\n */\r\nfunction copySymbols(source, object) {\r\n  return copyObject(source, getSymbols(source), object);\r\n}\r\n\r\n/**\r\n * Creates an array of own enumerable property names and symbols of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names and symbols.\r\n */\r\nfunction getAllKeys(object) {\r\n  return baseGetAllKeys(object, keys, getSymbols);\r\n}\r\n\r\n/**\r\n * Gets the data for `map`.\r\n *\r\n * @private\r\n * @param {Object} map The map to query.\r\n * @param {string} key The reference key.\r\n * @returns {*} Returns the map data.\r\n */\r\nfunction getMapData(map, key) {\r\n  var data = map.__data__;\r\n  return isKeyable(key)\r\n    ? data[typeof key == 'string' ? 'string' : 'hash']\r\n    : data.map;\r\n}\r\n\r\n/**\r\n * Gets the native function at `key` of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {string} key The key of the method to get.\r\n * @returns {*} Returns the function if it's native, else `undefined`.\r\n */\r\nfunction getNative(object, key) {\r\n  var value = getValue(object, key);\r\n  return baseIsNative(value) ? value : undefined;\r\n}\r\n\r\n/**\r\n * Creates an array of the own enumerable symbol properties of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of symbols.\r\n */\r\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\r\n\r\n/**\r\n * Gets the `toStringTag` of `value`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the `toStringTag`.\r\n */\r\nvar getTag = baseGetTag;\r\n\r\n// Fallback for data views, maps, sets, and weak maps in IE 11,\r\n// for data views in Edge < 14, and promises in Node.js.\r\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\r\n    (Map && getTag(new Map) != mapTag) ||\r\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\r\n    (Set && getTag(new Set) != setTag) ||\r\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\r\n  getTag = function(value) {\r\n    var result = objectToString.call(value),\r\n        Ctor = result == objectTag ? value.constructor : undefined,\r\n        ctorString = Ctor ? toSource(Ctor) : undefined;\r\n\r\n    if (ctorString) {\r\n      switch (ctorString) {\r\n        case dataViewCtorString: return dataViewTag;\r\n        case mapCtorString: return mapTag;\r\n        case promiseCtorString: return promiseTag;\r\n        case setCtorString: return setTag;\r\n        case weakMapCtorString: return weakMapTag;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Initializes an array clone.\r\n *\r\n * @private\r\n * @param {Array} array The array to clone.\r\n * @returns {Array} Returns the initialized clone.\r\n */\r\nfunction initCloneArray(array) {\r\n  var length = array.length,\r\n      result = array.constructor(length);\r\n\r\n  // Add properties assigned by `RegExp#exec`.\r\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\r\n    result.index = array.index;\r\n    result.input = array.input;\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Initializes an object clone.\r\n *\r\n * @private\r\n * @param {Object} object The object to clone.\r\n * @returns {Object} Returns the initialized clone.\r\n */\r\nfunction initCloneObject(object) {\r\n  return (typeof object.constructor == 'function' && !isPrototype(object))\r\n    ? baseCreate(getPrototype(object))\r\n    : {};\r\n}\r\n\r\n/**\r\n * Initializes an object clone based on its `toStringTag`.\r\n *\r\n * **Note:** This function only supports cloning values with tags of\r\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\r\n *\r\n * @private\r\n * @param {Object} object The object to clone.\r\n * @param {string} tag The `toStringTag` of the object to clone.\r\n * @param {Function} cloneFunc The function to clone values.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the initialized clone.\r\n */\r\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\r\n  var Ctor = object.constructor;\r\n  switch (tag) {\r\n    case arrayBufferTag:\r\n      return cloneArrayBuffer(object);\r\n\r\n    case boolTag:\r\n    case dateTag:\r\n      return new Ctor(+object);\r\n\r\n    case dataViewTag:\r\n      return cloneDataView(object, isDeep);\r\n\r\n    case float32Tag: case float64Tag:\r\n    case int8Tag: case int16Tag: case int32Tag:\r\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\r\n      return cloneTypedArray(object, isDeep);\r\n\r\n    case mapTag:\r\n      return cloneMap(object, isDeep, cloneFunc);\r\n\r\n    case numberTag:\r\n    case stringTag:\r\n      return new Ctor(object);\r\n\r\n    case regexpTag:\r\n      return cloneRegExp(object);\r\n\r\n    case setTag:\r\n      return cloneSet(object, isDeep, cloneFunc);\r\n\r\n    case symbolTag:\r\n      return cloneSymbol(object);\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if `value` is a valid array-like index.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n */\r\nfunction isIndex(value, length) {\r\n  length = length == null ? MAX_SAFE_INTEGER : length;\r\n  return !!length &&\r\n    (typeof value == 'number' || reIsUint.test(value)) &&\r\n    (value > -1 && value % 1 == 0 && value < length);\r\n}\r\n\r\n/**\r\n * Checks if `value` is suitable for use as unique object key.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\r\n */\r\nfunction isKeyable(value) {\r\n  var type = typeof value;\r\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\r\n    ? (value !== '__proto__')\r\n    : (value === null);\r\n}\r\n\r\n/**\r\n * Checks if `func` has its source masked.\r\n *\r\n * @private\r\n * @param {Function} func The function to check.\r\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\r\n */\r\nfunction isMasked(func) {\r\n  return !!maskSrcKey && (maskSrcKey in func);\r\n}\r\n\r\n/**\r\n * Checks if `value` is likely a prototype object.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\r\n */\r\nfunction isPrototype(value) {\r\n  var Ctor = value && value.constructor,\r\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\r\n\r\n  return value === proto;\r\n}\r\n\r\n/**\r\n * Converts `func` to its source code.\r\n *\r\n * @private\r\n * @param {Function} func The function to process.\r\n * @returns {string} Returns the source code.\r\n */\r\nfunction toSource(func) {\r\n  if (func != null) {\r\n    try {\r\n      return funcToString.call(func);\r\n    } catch (e) {}\r\n    try {\r\n      return (func + '');\r\n    } catch (e) {}\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * This method is like `_.clone` except that it recursively clones `value`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 1.0.0\r\n * @category Lang\r\n * @param {*} value The value to recursively clone.\r\n * @returns {*} Returns the deep cloned value.\r\n * @see _.clone\r\n * @example\r\n *\r\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\r\n *\r\n * var deep = _.cloneDeep(objects);\r\n * console.log(deep[0] === objects[0]);\r\n * // => false\r\n */\r\nfunction cloneDeep(value) {\r\n  return baseClone(value, true, true);\r\n}\r\n\r\n/**\r\n * Performs a\r\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * comparison between two values to determine if they are equivalent.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to compare.\r\n * @param {*} other The other value to compare.\r\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n * @example\r\n *\r\n * var object = { 'a': 1 };\r\n * var other = { 'a': 1 };\r\n *\r\n * _.eq(object, object);\r\n * // => true\r\n *\r\n * _.eq(object, other);\r\n * // => false\r\n *\r\n * _.eq('a', 'a');\r\n * // => true\r\n *\r\n * _.eq('a', Object('a'));\r\n * // => false\r\n *\r\n * _.eq(NaN, NaN);\r\n * // => true\r\n */\r\nfunction eq(value, other) {\r\n  return value === other || (value !== value && other !== other);\r\n}\r\n\r\n/**\r\n * Checks if `value` is likely an `arguments` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n *  else `false`.\r\n * @example\r\n *\r\n * _.isArguments(function() { return arguments; }());\r\n * // => true\r\n *\r\n * _.isArguments([1, 2, 3]);\r\n * // => false\r\n */\r\nfunction isArguments(value) {\r\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\r\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\r\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\r\n}\r\n\r\n/**\r\n * Checks if `value` is classified as an `Array` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\r\n * @example\r\n *\r\n * _.isArray([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArray(document.body.children);\r\n * // => false\r\n *\r\n * _.isArray('abc');\r\n * // => false\r\n *\r\n * _.isArray(_.noop);\r\n * // => false\r\n */\r\nvar isArray = Array.isArray;\r\n\r\n/**\r\n * Checks if `value` is array-like. A value is considered array-like if it's\r\n * not a function and has a `value.length` that's an integer greater than or\r\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n * @example\r\n *\r\n * _.isArrayLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArrayLike(document.body.children);\r\n * // => true\r\n *\r\n * _.isArrayLike('abc');\r\n * // => true\r\n *\r\n * _.isArrayLike(_.noop);\r\n * // => false\r\n */\r\nfunction isArrayLike(value) {\r\n  return value != null && isLength(value.length) && !isFunction(value);\r\n}\r\n\r\n/**\r\n * This method is like `_.isArrayLike` except that it also checks if `value`\r\n * is an object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an array-like object,\r\n *  else `false`.\r\n * @example\r\n *\r\n * _.isArrayLikeObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArrayLikeObject(document.body.children);\r\n * // => true\r\n *\r\n * _.isArrayLikeObject('abc');\r\n * // => false\r\n *\r\n * _.isArrayLikeObject(_.noop);\r\n * // => false\r\n */\r\nfunction isArrayLikeObject(value) {\r\n  return isObjectLike(value) && isArrayLike(value);\r\n}\r\n\r\n/**\r\n * Checks if `value` is a buffer.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.3.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\r\n * @example\r\n *\r\n * _.isBuffer(new Buffer(2));\r\n * // => true\r\n *\r\n * _.isBuffer(new Uint8Array(2));\r\n * // => false\r\n */\r\nvar isBuffer = nativeIsBuffer || stubFalse;\r\n\r\n/**\r\n * Checks if `value` is classified as a `Function` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n * @example\r\n *\r\n * _.isFunction(_);\r\n * // => true\r\n *\r\n * _.isFunction(/abc/);\r\n * // => false\r\n */\r\nfunction isFunction(value) {\r\n  // The use of `Object#toString` avoids issues with the `typeof` operator\r\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\r\n  var tag = isObject(value) ? objectToString.call(value) : '';\r\n  return tag == funcTag || tag == genTag;\r\n}\r\n\r\n/**\r\n * Checks if `value` is a valid array-like length.\r\n *\r\n * **Note:** This method is loosely based on\r\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\r\n * @example\r\n *\r\n * _.isLength(3);\r\n * // => true\r\n *\r\n * _.isLength(Number.MIN_VALUE);\r\n * // => false\r\n *\r\n * _.isLength(Infinity);\r\n * // => false\r\n *\r\n * _.isLength('3');\r\n * // => false\r\n */\r\nfunction isLength(value) {\r\n  return typeof value == 'number' &&\r\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\r\n}\r\n\r\n/**\r\n * Checks if `value` is the\r\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n * @example\r\n *\r\n * _.isObject({});\r\n * // => true\r\n *\r\n * _.isObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObject(_.noop);\r\n * // => true\r\n *\r\n * _.isObject(null);\r\n * // => false\r\n */\r\nfunction isObject(value) {\r\n  var type = typeof value;\r\n  return !!value && (type == 'object' || type == 'function');\r\n}\r\n\r\n/**\r\n * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n * and has a `typeof` result of \"object\".\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n * @example\r\n *\r\n * _.isObjectLike({});\r\n * // => true\r\n *\r\n * _.isObjectLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObjectLike(_.noop);\r\n * // => false\r\n *\r\n * _.isObjectLike(null);\r\n * // => false\r\n */\r\nfunction isObjectLike(value) {\r\n  return !!value && typeof value == 'object';\r\n}\r\n\r\n/**\r\n * Creates an array of the own enumerable property names of `object`.\r\n *\r\n * **Note:** Non-object values are coerced to objects. See the\r\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\r\n * for more details.\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category Object\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n * @example\r\n *\r\n * function Foo() {\r\n *   this.a = 1;\r\n *   this.b = 2;\r\n * }\r\n *\r\n * Foo.prototype.c = 3;\r\n *\r\n * _.keys(new Foo);\r\n * // => ['a', 'b'] (iteration order is not guaranteed)\r\n *\r\n * _.keys('hi');\r\n * // => ['0', '1']\r\n */\r\nfunction keys(object) {\r\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\r\n}\r\n\r\n/**\r\n * This method returns a new empty array.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.13.0\r\n * @category Util\r\n * @returns {Array} Returns the new empty array.\r\n * @example\r\n *\r\n * var arrays = _.times(2, _.stubArray);\r\n *\r\n * console.log(arrays);\r\n * // => [[], []]\r\n *\r\n * console.log(arrays[0] === arrays[1]);\r\n * // => false\r\n */\r\nfunction stubArray() {\r\n  return [];\r\n}\r\n\r\n/**\r\n * This method returns `false`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.13.0\r\n * @category Util\r\n * @returns {boolean} Returns `false`.\r\n * @example\r\n *\r\n * _.times(2, _.stubFalse);\r\n * // => [false, false]\r\n */\r\nfunction stubFalse() {\r\n  return false;\r\n}\r\n\r\nmodule.exports = cloneDeep;\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $pres, Strophe } from 'strophe.js';\r\nimport 'strophejs-plugin-stream-management';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport ResumeTask from './ResumeTask';\r\nimport LastSuccessTracker from './StropheLastSuccess';\r\nimport PingConnectionPlugin from './strophe.ping';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\r\n */\r\nexport default class XmppConnection extends Listenable {\r\n    /**\r\n     * The list of {@link XmppConnection} events.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    static get Events() {\r\n        return {\r\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * The list of Xmpp connection statuses.\r\n     *\r\n     * @returns {Strophe.Status}\r\n     */\r\n    static get Status() {\r\n        return Strophe.Status;\r\n    }\r\n\r\n    /**\r\n     * Initializes new connection instance.\r\n     *\r\n     * @param {Object} options\r\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\r\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\r\n     * It will enable automatically by default if supported by the XMPP server.\r\n     * @param {Number} [options.websocketKeepAlive=240000] - The websocket keep alive interval. It's 4 minutes by\r\n     * default with jitter. Pass -1 to disable. The actual interval equation is:\r\n     * jitterDelay = (interval * 0.2) + (0.8 * interval * Math.random())\r\n     * The keep alive is HTTP GET request to the {@link options.serviceUrl}.\r\n     */\r\n    constructor({ enableWebsocketResume, websocketKeepAlive, serviceUrl }) {\r\n        super();\r\n        this._options = {\r\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\r\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 4 * 60 * 1000 : Number(websocketKeepAlive)\r\n        };\r\n\r\n        this._stropheConn = new Strophe.Connection(serviceUrl);\r\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\r\n\r\n        // The default maxRetries is 5, which is too long.\r\n        this._stropheConn.maxRetries = 3;\r\n\r\n        this._lastSuccessTracker = new LastSuccessTracker();\r\n        this._lastSuccessTracker.startTracking(this, this._stropheConn);\r\n\r\n        this._resumeTask = new ResumeTask(this._stropheConn);\r\n\r\n        /**\r\n         * @typedef DeferredSendIQ Object\r\n         * @property {Element} iq - The IQ to send.\r\n         * @property {function} resolve - The resolve method of the deferred Promise.\r\n         * @property {function} reject - The reject method of the deferred Promise.\r\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\r\n         */\r\n        /**\r\n         * Deferred IQs to be sent upon reconnect.\r\n         * @type {Array<DeferredSendIQ>}\r\n         * @private\r\n         */\r\n        this._deferredIQs = [];\r\n\r\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\r\n        // is broken (WebSocket/TCP connection not closed gracefully).\r\n        this.addConnectionPlugin(\r\n            'ping',\r\n            new PingConnectionPlugin({\r\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded()\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * A getter for the connected state.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    get connected() {\r\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\r\n\r\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\r\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\r\n    }\r\n\r\n    /**\r\n     * Retrieves the feature discovery plugin instance.\r\n     *\r\n     * @returns {Strophe.Connection.disco}\r\n     */\r\n    get disco() {\r\n        return this._stropheConn.disco;\r\n    }\r\n\r\n    /**\r\n     * A getter for the disconnecting state.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    get disconnecting() {\r\n        return this._stropheConn.disconnecting === true;\r\n    }\r\n\r\n    /**\r\n     * A getter for the domain.\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    get domain() {\r\n        return this._stropheConn.domain;\r\n    }\r\n\r\n    /**\r\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\r\n     * for BOSH.\r\n     * @returns {boolean}\r\n     */\r\n    get isUsingWebSocket() {\r\n        return this._usesWebsocket;\r\n    }\r\n\r\n    /**\r\n     * A getter for the JID.\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    get jid() {\r\n        return this._stropheConn.jid;\r\n    }\r\n\r\n    /**\r\n     * Returns headers for the last BOSH response received.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get lastResponseHeaders() {\r\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\r\n    }\r\n\r\n    /**\r\n     * A getter for the logger plugin instance.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    get logger() {\r\n        return this._stropheConn.logger;\r\n    }\r\n\r\n    /**\r\n     * A getter for the connection options.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    get options() {\r\n        return this._stropheConn.options;\r\n    }\r\n\r\n    /**\r\n     * A getter for the service URL.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get service() {\r\n        return this._stropheConn.service;\r\n    }\r\n\r\n    /**\r\n     * Returns the current connection status.\r\n     *\r\n     * @returns {Strophe.Status}\r\n     */\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * Adds a connection plugin to this instance.\r\n     *\r\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\r\n     * instance.\r\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\r\n     */\r\n    addConnectionPlugin(name, plugin) {\r\n        this[name] = plugin;\r\n        plugin.init(this);\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.addHandler}\r\n     *\r\n     * @returns {void}\r\n     */\r\n    addHandler(...args) {\r\n        this._stropheConn.addHandler(...args);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\r\n     * See {@link Strophe.Connection.attach} for the params description.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    attach(jid, sid, rid, callback, ...args) {\r\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\r\n    }\r\n\r\n    /**\r\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\r\n     * See {@link Strophe.Connection.connect} for the params description.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    connect(jid, pass, callback, ...args) {\r\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Handles {@link Strophe.Status} updates for the current connection.\r\n     *\r\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\r\n     * the connect methods.\r\n     * @param {Strophe.Status} status - The new connection status.\r\n     * @param {*} args - The rest of the arguments passed by Strophe.\r\n     * @private\r\n     */\r\n    _stropheConnectionCb(targetCallback, status, ...args) {\r\n        this._status = status;\r\n\r\n        let blockCallback = false;\r\n\r\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\r\n            this._maybeEnableStreamResume();\r\n            this._maybeStartWSKeepAlive();\r\n            this._processDeferredIQs();\r\n            this._resumeTask.cancel();\r\n            this.ping.startInterval(this.domain);\r\n        } else if (status === Strophe.Status.DISCONNECTED) {\r\n            this.ping.stopInterval();\r\n\r\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\r\n            blockCallback = this._tryResumingConnection();\r\n            if (!blockCallback) {\r\n                clearTimeout(this._wsKeepAlive);\r\n            }\r\n        }\r\n\r\n        if (!blockCallback) {\r\n            targetCallback(status, ...args);\r\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the list of IQs and rejects deferred Promises with an error.\r\n     *\r\n     * @private\r\n     */\r\n    _clearDeferredIQs() {\r\n        for (const deferred of this._deferredIQs) {\r\n            deferred.reject(new Error('disconnect'));\r\n        }\r\n        this._deferredIQs = [];\r\n    }\r\n\r\n    /**\r\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    closeWebsocket() {\r\n        if (this._stropheConn && this._stropheConn._proto) {\r\n            this._stropheConn._proto._closeSocket();\r\n            this._stropheConn._proto._onClose(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.disconnect}.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    disconnect(...args) {\r\n        this._resumeTask.cancel();\r\n        clearTimeout(this._wsKeepAlive);\r\n        this._clearDeferredIQs();\r\n        this._stropheConn.disconnect(...args);\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.flush}.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    flush(...args) {\r\n        this._stropheConn.flush(...args);\r\n    }\r\n\r\n    /**\r\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\r\n     *\r\n     * @returns {number|null}\r\n     */\r\n    getTimeSinceLastSuccess() {\r\n        return this._lastSuccessTracker.getTimeSinceLastSuccess();\r\n    }\r\n\r\n    /**\r\n     * Requests a resume token from the server if enabled and all requirements are met.\r\n     *\r\n     * @private\r\n     */\r\n    _maybeEnableStreamResume() {\r\n        if (!this._options.enableWebsocketResume) {\r\n\r\n            return;\r\n        }\r\n\r\n        const { streamManagement } = this._stropheConn;\r\n\r\n        if (!this.isUsingWebSocket) {\r\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\r\n        } else if (!streamManagement) {\r\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\r\n        } else if (!streamManagement.isSupported()) {\r\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\r\n        } else if (!streamManagement.getResumeToken()) {\r\n            logger.info('Enabling XEP-0198 stream management');\r\n            streamManagement.enable(/* resume */ true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the Websocket keep alive if enabled.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _maybeStartWSKeepAlive() {\r\n        const { websocketKeepAlive } = this._options;\r\n\r\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\r\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\r\n            clearTimeout(this._wsKeepAlive);\r\n\r\n            const intervalWithJitter\r\n                = /* base */ (websocketKeepAlive * 0.2) + /* jitter */ (Math.random() * 0.8 * websocketKeepAlive);\r\n\r\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\r\n\r\n            this._wsKeepAlive = setTimeout(() => {\r\n                const url = this.service.replace('wss://', 'https://').replace('ws://', 'http://');\r\n\r\n                fetch(url).catch(\r\n                    error => {\r\n                        logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\r\n                    })\r\n                    .then(() => this._maybeStartWSKeepAlive());\r\n            }, intervalWithJitter);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _processDeferredIQs() {\r\n        for (const deferred of this._deferredIQs) {\r\n            if (deferred.iq) {\r\n                clearTimeout(deferred.timeout);\r\n\r\n                const timeLeft = Date.now() - deferred.start;\r\n\r\n                this.sendIQ(\r\n                    deferred.iq,\r\n                    result => deferred.resolve(result),\r\n                    error => deferred.reject(error),\r\n                    timeLeft);\r\n            }\r\n        }\r\n\r\n        this._deferredIQs = [];\r\n    }\r\n\r\n    /**\r\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\r\n     *\r\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\r\n     * @returns {void}\r\n     */\r\n    send(stanza) {\r\n        if (!this.connected) {\r\n            throw new Error('Not connected');\r\n        }\r\n        this._stropheConn.send(stanza);\r\n    }\r\n\r\n    /**\r\n     * Helper function to send IQ stanzas.\r\n     *\r\n     * @param {Element} elem - The stanza to send.\r\n     * @param {Function} callback - The callback function for a successful request.\r\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\r\n     * be null.\r\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\r\n     * @returns {number} - The id used to send the IQ.\r\n     */\r\n    sendIQ(elem, callback, errback, timeout) {\r\n        if (!this.connected) {\r\n            errback('Not connected');\r\n\r\n            return;\r\n        }\r\n\r\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\r\n    }\r\n\r\n    /**\r\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\r\n     * which would fail immediately if disconnected).\r\n     *\r\n     * @param {Element} iq - The IQ to send.\r\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\r\n     * included, which means that the IQ may never be sent and still fail with a timeout.\r\n     */\r\n    sendIQ2(iq, { timeout }) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.connected) {\r\n                this.sendIQ(\r\n                    iq,\r\n                    result => resolve(result),\r\n                    error => reject(error),\r\n                    timeout);\r\n            } else {\r\n                const deferred = {\r\n                    iq,\r\n                    resolve,\r\n                    reject,\r\n                    start: Date.now(),\r\n                    timeout: setTimeout(() => {\r\n                        // clears the IQ on timeout and invalidates the deferred task\r\n                        deferred.iq = undefined;\r\n\r\n                        // Strophe calls with undefined on timeout\r\n                        reject(undefined);\r\n                    }, timeout)\r\n                };\r\n\r\n                this._deferredIQs.push(deferred);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called by the ping plugin when ping fails too many times.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _onPingErrorThresholdExceeded() {\r\n        if (this.isUsingWebSocket) {\r\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\r\n            this.closeWebsocket();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\r\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\r\n     *\r\n     * @param {Element} elem - The stanza to send.\r\n     * @param {Function} callback - The callback function for a successful request.\r\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\r\n     * be null.\r\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\r\n     * @returns {number} - The id used to send the presence.\r\n     */\r\n    sendPresence(elem, callback, errback, timeout) {\r\n        if (!this.connected) {\r\n            errback('Not connected');\r\n\r\n            return;\r\n        }\r\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\r\n    }\r\n\r\n    /**\r\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\r\n     *\r\n     * @returns {boolean} - true if the beacon was sent.\r\n     */\r\n    sendUnavailableBeacon() {\r\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\r\n            return false;\r\n        }\r\n\r\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\r\n        this._stropheConn.disconnecting = true;\r\n\r\n        const body = this._stropheConn._proto._buildBody()\r\n            .attrs({\r\n                type: 'terminate'\r\n            });\r\n        const pres = $pres({\r\n            xmlns: Strophe.NS.CLIENT,\r\n            type: 'unavailable'\r\n        });\r\n\r\n        body.cnode(pres.tree());\r\n\r\n        const res = navigator.sendBeacon(\r\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\r\n            Strophe.serialize(body.tree()));\r\n\r\n        logger.info(`Successfully send unavailable beacon ${res}`);\r\n\r\n        this._stropheConn._proto._abortAllRequests();\r\n        this._stropheConn._doDisconnect();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\r\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\r\n     * the token is present it means the connection can be resumed.\r\n     *\r\n     * @private\r\n     * @returns {boolean}\r\n     */\r\n    _tryResumingConnection() {\r\n        const { streamManagement } = this._stropheConn;\r\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\r\n\r\n        if (resumeToken) {\r\n            this._resumeTask.schedule();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","/**\r\n * The possible camera facing modes. For now support only 'user' and\r\n * 'environment' because 'left' and 'right' are not used anywhere in our\r\n * projects at the time of this writing. For more information please refer to\r\n * https://w3c.github.io/mediacapture-main/getusermedia.html\r\n * #def-constraint-facingMode.\r\n *\r\n * @enum {string}\r\n */\r\nconst CameraFacingMode = {\r\n    /**\r\n     * The mode which specifies the environment-facing camera.\r\n     */\r\n    ENVIRONMENT: 'environment',\r\n\r\n    /**\r\n     * The mode which specifies the user-facing camera.\r\n     */\r\n    USER: 'user'\r\n};\r\n\r\nmodule.exports = CameraFacingMode;\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || new Function(\"return this\")();\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","/**\r\n * Lodash (Custom Build) <https://lodash.com/>\r\n * Build: `lodash modularize exports=\"npm\" -o ./`\r\n * Copyright JS Foundation and other contributors <https://js.foundation/>\r\n * Released under MIT license <https://lodash.com/license>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n */\r\n\r\n/** Used as the size to enable large array optimizations. */\r\nvar LARGE_ARRAY_SIZE = 200;\r\n\r\n/** Used to stand-in for `undefined` hash values. */\r\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\r\n\r\n/** Used to compose bitmasks for value comparisons. */\r\nvar COMPARE_PARTIAL_FLAG = 1,\r\n    COMPARE_UNORDERED_FLAG = 2;\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n/** `Object#toString` result references. */\r\nvar argsTag = '[object Arguments]',\r\n    arrayTag = '[object Array]',\r\n    asyncTag = '[object AsyncFunction]',\r\n    boolTag = '[object Boolean]',\r\n    dateTag = '[object Date]',\r\n    errorTag = '[object Error]',\r\n    funcTag = '[object Function]',\r\n    genTag = '[object GeneratorFunction]',\r\n    mapTag = '[object Map]',\r\n    numberTag = '[object Number]',\r\n    nullTag = '[object Null]',\r\n    objectTag = '[object Object]',\r\n    promiseTag = '[object Promise]',\r\n    proxyTag = '[object Proxy]',\r\n    regexpTag = '[object RegExp]',\r\n    setTag = '[object Set]',\r\n    stringTag = '[object String]',\r\n    symbolTag = '[object Symbol]',\r\n    undefinedTag = '[object Undefined]',\r\n    weakMapTag = '[object WeakMap]';\r\n\r\nvar arrayBufferTag = '[object ArrayBuffer]',\r\n    dataViewTag = '[object DataView]',\r\n    float32Tag = '[object Float32Array]',\r\n    float64Tag = '[object Float64Array]',\r\n    int8Tag = '[object Int8Array]',\r\n    int16Tag = '[object Int16Array]',\r\n    int32Tag = '[object Int32Array]',\r\n    uint8Tag = '[object Uint8Array]',\r\n    uint8ClampedTag = '[object Uint8ClampedArray]',\r\n    uint16Tag = '[object Uint16Array]',\r\n    uint32Tag = '[object Uint32Array]';\r\n\r\n/**\r\n * Used to match `RegExp`\r\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\r\n */\r\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\r\n\r\n/** Used to detect host constructors (Safari). */\r\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\r\n\r\n/** Used to detect unsigned integer values. */\r\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n/** Used to identify `toStringTag` values of typed arrays. */\r\nvar typedArrayTags = {};\r\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\r\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\r\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\r\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\r\ntypedArrayTags[uint32Tag] = true;\r\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\r\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\r\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\r\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\r\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\r\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\r\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\r\ntypedArrayTags[weakMapTag] = false;\r\n\r\n/** Detect free variable `global` from Node.js. */\r\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\r\n\r\n/** Detect free variable `self`. */\r\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n\r\n/** Used as a reference to the global object. */\r\nvar root = freeGlobal || freeSelf || Function('return this')();\r\n\r\n/** Detect free variable `exports`. */\r\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\r\n\r\n/** Detect free variable `module`. */\r\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\r\n\r\n/** Detect the popular CommonJS extension `module.exports`. */\r\nvar moduleExports = freeModule && freeModule.exports === freeExports;\r\n\r\n/** Detect free variable `process` from Node.js. */\r\nvar freeProcess = moduleExports && freeGlobal.process;\r\n\r\n/** Used to access faster Node.js helpers. */\r\nvar nodeUtil = (function() {\r\n  try {\r\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\r\n  } catch (e) {}\r\n}());\r\n\r\n/* Node.js helper references. */\r\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\r\n\r\n/**\r\n * A specialized version of `_.filter` for arrays without support for\r\n * iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} predicate The function invoked per iteration.\r\n * @returns {Array} Returns the new filtered array.\r\n */\r\nfunction arrayFilter(array, predicate) {\r\n  var index = -1,\r\n      length = array == null ? 0 : array.length,\r\n      resIndex = 0,\r\n      result = [];\r\n\r\n  while (++index < length) {\r\n    var value = array[index];\r\n    if (predicate(value, index, array)) {\r\n      result[resIndex++] = value;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Appends the elements of `values` to `array`.\r\n *\r\n * @private\r\n * @param {Array} array The array to modify.\r\n * @param {Array} values The values to append.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction arrayPush(array, values) {\r\n  var index = -1,\r\n      length = values.length,\r\n      offset = array.length;\r\n\r\n  while (++index < length) {\r\n    array[offset + index] = values[index];\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * A specialized version of `_.some` for arrays without support for iteratee\r\n * shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} predicate The function invoked per iteration.\r\n * @returns {boolean} Returns `true` if any element passes the predicate check,\r\n *  else `false`.\r\n */\r\nfunction arraySome(array, predicate) {\r\n  var index = -1,\r\n      length = array == null ? 0 : array.length;\r\n\r\n  while (++index < length) {\r\n    if (predicate(array[index], index, array)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.times` without support for iteratee shorthands\r\n * or max array length checks.\r\n *\r\n * @private\r\n * @param {number} n The number of times to invoke `iteratee`.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns the array of results.\r\n */\r\nfunction baseTimes(n, iteratee) {\r\n  var index = -1,\r\n      result = Array(n);\r\n\r\n  while (++index < n) {\r\n    result[index] = iteratee(index);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.unary` without support for storing metadata.\r\n *\r\n * @private\r\n * @param {Function} func The function to cap arguments for.\r\n * @returns {Function} Returns the new capped function.\r\n */\r\nfunction baseUnary(func) {\r\n  return function(value) {\r\n    return func(value);\r\n  };\r\n}\r\n\r\n/**\r\n * Checks if a `cache` value for `key` exists.\r\n *\r\n * @private\r\n * @param {Object} cache The cache to query.\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction cacheHas(cache, key) {\r\n  return cache.has(key);\r\n}\r\n\r\n/**\r\n * Gets the value at `key` of `object`.\r\n *\r\n * @private\r\n * @param {Object} [object] The object to query.\r\n * @param {string} key The key of the property to get.\r\n * @returns {*} Returns the property value.\r\n */\r\nfunction getValue(object, key) {\r\n  return object == null ? undefined : object[key];\r\n}\r\n\r\n/**\r\n * Converts `map` to its key-value pairs.\r\n *\r\n * @private\r\n * @param {Object} map The map to convert.\r\n * @returns {Array} Returns the key-value pairs.\r\n */\r\nfunction mapToArray(map) {\r\n  var index = -1,\r\n      result = Array(map.size);\r\n\r\n  map.forEach(function(value, key) {\r\n    result[++index] = [key, value];\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a unary function that invokes `func` with its argument transformed.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {Function} transform The argument transform.\r\n * @returns {Function} Returns the new function.\r\n */\r\nfunction overArg(func, transform) {\r\n  return function(arg) {\r\n    return func(transform(arg));\r\n  };\r\n}\r\n\r\n/**\r\n * Converts `set` to an array of its values.\r\n *\r\n * @private\r\n * @param {Object} set The set to convert.\r\n * @returns {Array} Returns the values.\r\n */\r\nfunction setToArray(set) {\r\n  var index = -1,\r\n      result = Array(set.size);\r\n\r\n  set.forEach(function(value) {\r\n    result[++index] = value;\r\n  });\r\n  return result;\r\n}\r\n\r\n/** Used for built-in method references. */\r\nvar arrayProto = Array.prototype,\r\n    funcProto = Function.prototype,\r\n    objectProto = Object.prototype;\r\n\r\n/** Used to detect overreaching core-js shims. */\r\nvar coreJsData = root['__core-js_shared__'];\r\n\r\n/** Used to resolve the decompiled source of functions. */\r\nvar funcToString = funcProto.toString;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n\r\n/** Used to detect methods masquerading as native. */\r\nvar maskSrcKey = (function() {\r\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\r\n  return uid ? ('Symbol(src)_1.' + uid) : '';\r\n}());\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar nativeObjectToString = objectProto.toString;\r\n\r\n/** Used to detect if a method is native. */\r\nvar reIsNative = RegExp('^' +\r\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\r\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\r\n);\r\n\r\n/** Built-in value references. */\r\nvar Buffer = moduleExports ? root.Buffer : undefined,\r\n    Symbol = root.Symbol,\r\n    Uint8Array = root.Uint8Array,\r\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\r\n    splice = arrayProto.splice,\r\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\r\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\r\n    nativeKeys = overArg(Object.keys, Object);\r\n\r\n/* Built-in method references that are verified to be native. */\r\nvar DataView = getNative(root, 'DataView'),\r\n    Map = getNative(root, 'Map'),\r\n    Promise = getNative(root, 'Promise'),\r\n    Set = getNative(root, 'Set'),\r\n    WeakMap = getNative(root, 'WeakMap'),\r\n    nativeCreate = getNative(Object, 'create');\r\n\r\n/** Used to detect maps, sets, and weakmaps. */\r\nvar dataViewCtorString = toSource(DataView),\r\n    mapCtorString = toSource(Map),\r\n    promiseCtorString = toSource(Promise),\r\n    setCtorString = toSource(Set),\r\n    weakMapCtorString = toSource(WeakMap);\r\n\r\n/** Used to convert symbols to primitives and strings. */\r\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\r\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\r\n\r\n/**\r\n * Creates a hash object.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction Hash(entries) {\r\n  var index = -1,\r\n      length = entries == null ? 0 : entries.length;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the hash.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf Hash\r\n */\r\nfunction hashClear() {\r\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\r\n  this.size = 0;\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the hash.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf Hash\r\n * @param {Object} hash The hash to modify.\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction hashDelete(key) {\r\n  var result = this.has(key) && delete this.__data__[key];\r\n  this.size -= result ? 1 : 0;\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the hash value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf Hash\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction hashGet(key) {\r\n  var data = this.__data__;\r\n  if (nativeCreate) {\r\n    var result = data[key];\r\n    return result === HASH_UNDEFINED ? undefined : result;\r\n  }\r\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\r\n}\r\n\r\n/**\r\n * Checks if a hash value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf Hash\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction hashHas(key) {\r\n  var data = this.__data__;\r\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\r\n}\r\n\r\n/**\r\n * Sets the hash `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Hash\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the hash instance.\r\n */\r\nfunction hashSet(key, value) {\r\n  var data = this.__data__;\r\n  this.size += this.has(key) ? 0 : 1;\r\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\r\n  return this;\r\n}\r\n\r\n// Add methods to `Hash`.\r\nHash.prototype.clear = hashClear;\r\nHash.prototype['delete'] = hashDelete;\r\nHash.prototype.get = hashGet;\r\nHash.prototype.has = hashHas;\r\nHash.prototype.set = hashSet;\r\n\r\n/**\r\n * Creates an list cache object.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction ListCache(entries) {\r\n  var index = -1,\r\n      length = entries == null ? 0 : entries.length;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the list cache.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf ListCache\r\n */\r\nfunction listCacheClear() {\r\n  this.__data__ = [];\r\n  this.size = 0;\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the list cache.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction listCacheDelete(key) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  if (index < 0) {\r\n    return false;\r\n  }\r\n  var lastIndex = data.length - 1;\r\n  if (index == lastIndex) {\r\n    data.pop();\r\n  } else {\r\n    splice.call(data, index, 1);\r\n  }\r\n  --this.size;\r\n  return true;\r\n}\r\n\r\n/**\r\n * Gets the list cache value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction listCacheGet(key) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  return index < 0 ? undefined : data[index][1];\r\n}\r\n\r\n/**\r\n * Checks if a list cache value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf ListCache\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction listCacheHas(key) {\r\n  return assocIndexOf(this.__data__, key) > -1;\r\n}\r\n\r\n/**\r\n * Sets the list cache `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the list cache instance.\r\n */\r\nfunction listCacheSet(key, value) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  if (index < 0) {\r\n    ++this.size;\r\n    data.push([key, value]);\r\n  } else {\r\n    data[index][1] = value;\r\n  }\r\n  return this;\r\n}\r\n\r\n// Add methods to `ListCache`.\r\nListCache.prototype.clear = listCacheClear;\r\nListCache.prototype['delete'] = listCacheDelete;\r\nListCache.prototype.get = listCacheGet;\r\nListCache.prototype.has = listCacheHas;\r\nListCache.prototype.set = listCacheSet;\r\n\r\n/**\r\n * Creates a map cache object to store key-value pairs.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction MapCache(entries) {\r\n  var index = -1,\r\n      length = entries == null ? 0 : entries.length;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the map.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf MapCache\r\n */\r\nfunction mapCacheClear() {\r\n  this.size = 0;\r\n  this.__data__ = {\r\n    'hash': new Hash,\r\n    'map': new (Map || ListCache),\r\n    'string': new Hash\r\n  };\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the map.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction mapCacheDelete(key) {\r\n  var result = getMapData(this, key)['delete'](key);\r\n  this.size -= result ? 1 : 0;\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the map value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction mapCacheGet(key) {\r\n  return getMapData(this, key).get(key);\r\n}\r\n\r\n/**\r\n * Checks if a map value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf MapCache\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction mapCacheHas(key) {\r\n  return getMapData(this, key).has(key);\r\n}\r\n\r\n/**\r\n * Sets the map `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the map cache instance.\r\n */\r\nfunction mapCacheSet(key, value) {\r\n  var data = getMapData(this, key),\r\n      size = data.size;\r\n\r\n  data.set(key, value);\r\n  this.size += data.size == size ? 0 : 1;\r\n  return this;\r\n}\r\n\r\n// Add methods to `MapCache`.\r\nMapCache.prototype.clear = mapCacheClear;\r\nMapCache.prototype['delete'] = mapCacheDelete;\r\nMapCache.prototype.get = mapCacheGet;\r\nMapCache.prototype.has = mapCacheHas;\r\nMapCache.prototype.set = mapCacheSet;\r\n\r\n/**\r\n *\r\n * Creates an array cache object to store unique values.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [values] The values to cache.\r\n */\r\nfunction SetCache(values) {\r\n  var index = -1,\r\n      length = values == null ? 0 : values.length;\r\n\r\n  this.__data__ = new MapCache;\r\n  while (++index < length) {\r\n    this.add(values[index]);\r\n  }\r\n}\r\n\r\n/**\r\n * Adds `value` to the array cache.\r\n *\r\n * @private\r\n * @name add\r\n * @memberOf SetCache\r\n * @alias push\r\n * @param {*} value The value to cache.\r\n * @returns {Object} Returns the cache instance.\r\n */\r\nfunction setCacheAdd(value) {\r\n  this.__data__.set(value, HASH_UNDEFINED);\r\n  return this;\r\n}\r\n\r\n/**\r\n * Checks if `value` is in the array cache.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf SetCache\r\n * @param {*} value The value to search for.\r\n * @returns {number} Returns `true` if `value` is found, else `false`.\r\n */\r\nfunction setCacheHas(value) {\r\n  return this.__data__.has(value);\r\n}\r\n\r\n// Add methods to `SetCache`.\r\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\r\nSetCache.prototype.has = setCacheHas;\r\n\r\n/**\r\n * Creates a stack cache object to store key-value pairs.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction Stack(entries) {\r\n  var data = this.__data__ = new ListCache(entries);\r\n  this.size = data.size;\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the stack.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf Stack\r\n */\r\nfunction stackClear() {\r\n  this.__data__ = new ListCache;\r\n  this.size = 0;\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the stack.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction stackDelete(key) {\r\n  var data = this.__data__,\r\n      result = data['delete'](key);\r\n\r\n  this.size = data.size;\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the stack value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction stackGet(key) {\r\n  return this.__data__.get(key);\r\n}\r\n\r\n/**\r\n * Checks if a stack value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf Stack\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction stackHas(key) {\r\n  return this.__data__.has(key);\r\n}\r\n\r\n/**\r\n * Sets the stack `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the stack cache instance.\r\n */\r\nfunction stackSet(key, value) {\r\n  var data = this.__data__;\r\n  if (data instanceof ListCache) {\r\n    var pairs = data.__data__;\r\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\r\n      pairs.push([key, value]);\r\n      this.size = ++data.size;\r\n      return this;\r\n    }\r\n    data = this.__data__ = new MapCache(pairs);\r\n  }\r\n  data.set(key, value);\r\n  this.size = data.size;\r\n  return this;\r\n}\r\n\r\n// Add methods to `Stack`.\r\nStack.prototype.clear = stackClear;\r\nStack.prototype['delete'] = stackDelete;\r\nStack.prototype.get = stackGet;\r\nStack.prototype.has = stackHas;\r\nStack.prototype.set = stackSet;\r\n\r\n/**\r\n * Creates an array of the enumerable property names of the array-like `value`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @param {boolean} inherited Specify returning inherited property names.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction arrayLikeKeys(value, inherited) {\r\n  var isArr = isArray(value),\r\n      isArg = !isArr && isArguments(value),\r\n      isBuff = !isArr && !isArg && isBuffer(value),\r\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\r\n      skipIndexes = isArr || isArg || isBuff || isType,\r\n      result = skipIndexes ? baseTimes(value.length, String) : [],\r\n      length = result.length;\r\n\r\n  for (var key in value) {\r\n    if ((inherited || hasOwnProperty.call(value, key)) &&\r\n        !(skipIndexes && (\r\n           // Safari 9 has enumerable `arguments.length` in strict mode.\r\n           key == 'length' ||\r\n           // Node.js 0.10 has enumerable non-index properties on buffers.\r\n           (isBuff && (key == 'offset' || key == 'parent')) ||\r\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\r\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\r\n           // Skip index properties.\r\n           isIndex(key, length)\r\n        ))) {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the index at which the `key` is found in `array` of key-value pairs.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {*} key The key to search for.\r\n * @returns {number} Returns the index of the matched value, else `-1`.\r\n */\r\nfunction assocIndexOf(array, key) {\r\n  var length = array.length;\r\n  while (length--) {\r\n    if (eq(array[length][0], key)) {\r\n      return length;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n/**\r\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\r\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\r\n * symbols of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {Function} keysFunc The function to get the keys of `object`.\r\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\r\n * @returns {Array} Returns the array of property names and symbols.\r\n */\r\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\r\n  var result = keysFunc(object);\r\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\r\n}\r\n\r\n/**\r\n * The base implementation of `getTag` without fallbacks for buggy environments.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the `toStringTag`.\r\n */\r\nfunction baseGetTag(value) {\r\n  if (value == null) {\r\n    return value === undefined ? undefinedTag : nullTag;\r\n  }\r\n  return (symToStringTag && symToStringTag in Object(value))\r\n    ? getRawTag(value)\r\n    : objectToString(value);\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isArguments`.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n */\r\nfunction baseIsArguments(value) {\r\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isEqual` which supports partial comparisons\r\n * and tracks traversed objects.\r\n *\r\n * @private\r\n * @param {*} value The value to compare.\r\n * @param {*} other The other value to compare.\r\n * @param {boolean} bitmask The bitmask flags.\r\n *  1 - Unordered comparison\r\n *  2 - Partial comparison\r\n * @param {Function} [customizer] The function to customize comparisons.\r\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\r\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n */\r\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\r\n  if (value === other) {\r\n    return true;\r\n  }\r\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\r\n    return value !== value && other !== other;\r\n  }\r\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\r\n}\r\n\r\n/**\r\n * A specialized version of `baseIsEqual` for arrays and objects which performs\r\n * deep comparisons and tracks traversed objects enabling objects with circular\r\n * references to be compared.\r\n *\r\n * @private\r\n * @param {Object} object The object to compare.\r\n * @param {Object} other The other object to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\r\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n */\r\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\r\n  var objIsArr = isArray(object),\r\n      othIsArr = isArray(other),\r\n      objTag = objIsArr ? arrayTag : getTag(object),\r\n      othTag = othIsArr ? arrayTag : getTag(other);\r\n\r\n  objTag = objTag == argsTag ? objectTag : objTag;\r\n  othTag = othTag == argsTag ? objectTag : othTag;\r\n\r\n  var objIsObj = objTag == objectTag,\r\n      othIsObj = othTag == objectTag,\r\n      isSameTag = objTag == othTag;\r\n\r\n  if (isSameTag && isBuffer(object)) {\r\n    if (!isBuffer(other)) {\r\n      return false;\r\n    }\r\n    objIsArr = true;\r\n    objIsObj = false;\r\n  }\r\n  if (isSameTag && !objIsObj) {\r\n    stack || (stack = new Stack);\r\n    return (objIsArr || isTypedArray(object))\r\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\r\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\r\n  }\r\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\r\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\r\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\r\n\r\n    if (objIsWrapped || othIsWrapped) {\r\n      var objUnwrapped = objIsWrapped ? object.value() : object,\r\n          othUnwrapped = othIsWrapped ? other.value() : other;\r\n\r\n      stack || (stack = new Stack);\r\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\r\n    }\r\n  }\r\n  if (!isSameTag) {\r\n    return false;\r\n  }\r\n  stack || (stack = new Stack);\r\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isNative` without bad shim checks.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a native function,\r\n *  else `false`.\r\n */\r\nfunction baseIsNative(value) {\r\n  if (!isObject(value) || isMasked(value)) {\r\n    return false;\r\n  }\r\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\r\n  return pattern.test(toSource(value));\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n */\r\nfunction baseIsTypedArray(value) {\r\n  return isObjectLike(value) &&\r\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\r\n}\r\n\r\n/**\r\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction baseKeys(object) {\r\n  if (!isPrototype(object)) {\r\n    return nativeKeys(object);\r\n  }\r\n  var result = [];\r\n  for (var key in Object(object)) {\r\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * A specialized version of `baseIsEqualDeep` for arrays with support for\r\n * partial deep comparisons.\r\n *\r\n * @private\r\n * @param {Array} array The array to compare.\r\n * @param {Array} other The other array to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} stack Tracks traversed `array` and `other` objects.\r\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\r\n */\r\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\r\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\r\n      arrLength = array.length,\r\n      othLength = other.length;\r\n\r\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\r\n    return false;\r\n  }\r\n  // Assume cyclic values are equal.\r\n  var stacked = stack.get(array);\r\n  if (stacked && stack.get(other)) {\r\n    return stacked == other;\r\n  }\r\n  var index = -1,\r\n      result = true,\r\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\r\n\r\n  stack.set(array, other);\r\n  stack.set(other, array);\r\n\r\n  // Ignore non-index properties.\r\n  while (++index < arrLength) {\r\n    var arrValue = array[index],\r\n        othValue = other[index];\r\n\r\n    if (customizer) {\r\n      var compared = isPartial\r\n        ? customizer(othValue, arrValue, index, other, array, stack)\r\n        : customizer(arrValue, othValue, index, array, other, stack);\r\n    }\r\n    if (compared !== undefined) {\r\n      if (compared) {\r\n        continue;\r\n      }\r\n      result = false;\r\n      break;\r\n    }\r\n    // Recursively compare arrays (susceptible to call stack limits).\r\n    if (seen) {\r\n      if (!arraySome(other, function(othValue, othIndex) {\r\n            if (!cacheHas(seen, othIndex) &&\r\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\r\n              return seen.push(othIndex);\r\n            }\r\n          })) {\r\n        result = false;\r\n        break;\r\n      }\r\n    } else if (!(\r\n          arrValue === othValue ||\r\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\r\n        )) {\r\n      result = false;\r\n      break;\r\n    }\r\n  }\r\n  stack['delete'](array);\r\n  stack['delete'](other);\r\n  return result;\r\n}\r\n\r\n/**\r\n * A specialized version of `baseIsEqualDeep` for comparing objects of\r\n * the same `toStringTag`.\r\n *\r\n * **Note:** This function only supports comparing values with tags of\r\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\r\n *\r\n * @private\r\n * @param {Object} object The object to compare.\r\n * @param {Object} other The other object to compare.\r\n * @param {string} tag The `toStringTag` of the objects to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} stack Tracks traversed `object` and `other` objects.\r\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n */\r\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\r\n  switch (tag) {\r\n    case dataViewTag:\r\n      if ((object.byteLength != other.byteLength) ||\r\n          (object.byteOffset != other.byteOffset)) {\r\n        return false;\r\n      }\r\n      object = object.buffer;\r\n      other = other.buffer;\r\n\r\n    case arrayBufferTag:\r\n      if ((object.byteLength != other.byteLength) ||\r\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\r\n        return false;\r\n      }\r\n      return true;\r\n\r\n    case boolTag:\r\n    case dateTag:\r\n    case numberTag:\r\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\r\n      // Invalid dates are coerced to `NaN`.\r\n      return eq(+object, +other);\r\n\r\n    case errorTag:\r\n      return object.name == other.name && object.message == other.message;\r\n\r\n    case regexpTag:\r\n    case stringTag:\r\n      // Coerce regexes to strings and treat strings, primitives and objects,\r\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\r\n      // for more details.\r\n      return object == (other + '');\r\n\r\n    case mapTag:\r\n      var convert = mapToArray;\r\n\r\n    case setTag:\r\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\r\n      convert || (convert = setToArray);\r\n\r\n      if (object.size != other.size && !isPartial) {\r\n        return false;\r\n      }\r\n      // Assume cyclic values are equal.\r\n      var stacked = stack.get(object);\r\n      if (stacked) {\r\n        return stacked == other;\r\n      }\r\n      bitmask |= COMPARE_UNORDERED_FLAG;\r\n\r\n      // Recursively compare objects (susceptible to call stack limits).\r\n      stack.set(object, other);\r\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\r\n      stack['delete'](object);\r\n      return result;\r\n\r\n    case symbolTag:\r\n      if (symbolValueOf) {\r\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\r\n      }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * A specialized version of `baseIsEqualDeep` for objects with support for\r\n * partial deep comparisons.\r\n *\r\n * @private\r\n * @param {Object} object The object to compare.\r\n * @param {Object} other The other object to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} stack Tracks traversed `object` and `other` objects.\r\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n */\r\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\r\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\r\n      objProps = getAllKeys(object),\r\n      objLength = objProps.length,\r\n      othProps = getAllKeys(other),\r\n      othLength = othProps.length;\r\n\r\n  if (objLength != othLength && !isPartial) {\r\n    return false;\r\n  }\r\n  var index = objLength;\r\n  while (index--) {\r\n    var key = objProps[index];\r\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\r\n      return false;\r\n    }\r\n  }\r\n  // Assume cyclic values are equal.\r\n  var stacked = stack.get(object);\r\n  if (stacked && stack.get(other)) {\r\n    return stacked == other;\r\n  }\r\n  var result = true;\r\n  stack.set(object, other);\r\n  stack.set(other, object);\r\n\r\n  var skipCtor = isPartial;\r\n  while (++index < objLength) {\r\n    key = objProps[index];\r\n    var objValue = object[key],\r\n        othValue = other[key];\r\n\r\n    if (customizer) {\r\n      var compared = isPartial\r\n        ? customizer(othValue, objValue, key, other, object, stack)\r\n        : customizer(objValue, othValue, key, object, other, stack);\r\n    }\r\n    // Recursively compare objects (susceptible to call stack limits).\r\n    if (!(compared === undefined\r\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\r\n          : compared\r\n        )) {\r\n      result = false;\r\n      break;\r\n    }\r\n    skipCtor || (skipCtor = key == 'constructor');\r\n  }\r\n  if (result && !skipCtor) {\r\n    var objCtor = object.constructor,\r\n        othCtor = other.constructor;\r\n\r\n    // Non `Object` object instances with different constructors are not equal.\r\n    if (objCtor != othCtor &&\r\n        ('constructor' in object && 'constructor' in other) &&\r\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\r\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\r\n      result = false;\r\n    }\r\n  }\r\n  stack['delete'](object);\r\n  stack['delete'](other);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates an array of own enumerable property names and symbols of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names and symbols.\r\n */\r\nfunction getAllKeys(object) {\r\n  return baseGetAllKeys(object, keys, getSymbols);\r\n}\r\n\r\n/**\r\n * Gets the data for `map`.\r\n *\r\n * @private\r\n * @param {Object} map The map to query.\r\n * @param {string} key The reference key.\r\n * @returns {*} Returns the map data.\r\n */\r\nfunction getMapData(map, key) {\r\n  var data = map.__data__;\r\n  return isKeyable(key)\r\n    ? data[typeof key == 'string' ? 'string' : 'hash']\r\n    : data.map;\r\n}\r\n\r\n/**\r\n * Gets the native function at `key` of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {string} key The key of the method to get.\r\n * @returns {*} Returns the function if it's native, else `undefined`.\r\n */\r\nfunction getNative(object, key) {\r\n  var value = getValue(object, key);\r\n  return baseIsNative(value) ? value : undefined;\r\n}\r\n\r\n/**\r\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the raw `toStringTag`.\r\n */\r\nfunction getRawTag(value) {\r\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\r\n      tag = value[symToStringTag];\r\n\r\n  try {\r\n    value[symToStringTag] = undefined;\r\n    var unmasked = true;\r\n  } catch (e) {}\r\n\r\n  var result = nativeObjectToString.call(value);\r\n  if (unmasked) {\r\n    if (isOwn) {\r\n      value[symToStringTag] = tag;\r\n    } else {\r\n      delete value[symToStringTag];\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates an array of the own enumerable symbols of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of symbols.\r\n */\r\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\r\n  if (object == null) {\r\n    return [];\r\n  }\r\n  object = Object(object);\r\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\r\n    return propertyIsEnumerable.call(object, symbol);\r\n  });\r\n};\r\n\r\n/**\r\n * Gets the `toStringTag` of `value`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the `toStringTag`.\r\n */\r\nvar getTag = baseGetTag;\r\n\r\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\r\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\r\n    (Map && getTag(new Map) != mapTag) ||\r\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\r\n    (Set && getTag(new Set) != setTag) ||\r\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\r\n  getTag = function(value) {\r\n    var result = baseGetTag(value),\r\n        Ctor = result == objectTag ? value.constructor : undefined,\r\n        ctorString = Ctor ? toSource(Ctor) : '';\r\n\r\n    if (ctorString) {\r\n      switch (ctorString) {\r\n        case dataViewCtorString: return dataViewTag;\r\n        case mapCtorString: return mapTag;\r\n        case promiseCtorString: return promiseTag;\r\n        case setCtorString: return setTag;\r\n        case weakMapCtorString: return weakMapTag;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Checks if `value` is a valid array-like index.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n */\r\nfunction isIndex(value, length) {\r\n  length = length == null ? MAX_SAFE_INTEGER : length;\r\n  return !!length &&\r\n    (typeof value == 'number' || reIsUint.test(value)) &&\r\n    (value > -1 && value % 1 == 0 && value < length);\r\n}\r\n\r\n/**\r\n * Checks if `value` is suitable for use as unique object key.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\r\n */\r\nfunction isKeyable(value) {\r\n  var type = typeof value;\r\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\r\n    ? (value !== '__proto__')\r\n    : (value === null);\r\n}\r\n\r\n/**\r\n * Checks if `func` has its source masked.\r\n *\r\n * @private\r\n * @param {Function} func The function to check.\r\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\r\n */\r\nfunction isMasked(func) {\r\n  return !!maskSrcKey && (maskSrcKey in func);\r\n}\r\n\r\n/**\r\n * Checks if `value` is likely a prototype object.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\r\n */\r\nfunction isPrototype(value) {\r\n  var Ctor = value && value.constructor,\r\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\r\n\r\n  return value === proto;\r\n}\r\n\r\n/**\r\n * Converts `value` to a string using `Object.prototype.toString`.\r\n *\r\n * @private\r\n * @param {*} value The value to convert.\r\n * @returns {string} Returns the converted string.\r\n */\r\nfunction objectToString(value) {\r\n  return nativeObjectToString.call(value);\r\n}\r\n\r\n/**\r\n * Converts `func` to its source code.\r\n *\r\n * @private\r\n * @param {Function} func The function to convert.\r\n * @returns {string} Returns the source code.\r\n */\r\nfunction toSource(func) {\r\n  if (func != null) {\r\n    try {\r\n      return funcToString.call(func);\r\n    } catch (e) {}\r\n    try {\r\n      return (func + '');\r\n    } catch (e) {}\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * Performs a\r\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * comparison between two values to determine if they are equivalent.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to compare.\r\n * @param {*} other The other value to compare.\r\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n * @example\r\n *\r\n * var object = { 'a': 1 };\r\n * var other = { 'a': 1 };\r\n *\r\n * _.eq(object, object);\r\n * // => true\r\n *\r\n * _.eq(object, other);\r\n * // => false\r\n *\r\n * _.eq('a', 'a');\r\n * // => true\r\n *\r\n * _.eq('a', Object('a'));\r\n * // => false\r\n *\r\n * _.eq(NaN, NaN);\r\n * // => true\r\n */\r\nfunction eq(value, other) {\r\n  return value === other || (value !== value && other !== other);\r\n}\r\n\r\n/**\r\n * Checks if `value` is likely an `arguments` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n *  else `false`.\r\n * @example\r\n *\r\n * _.isArguments(function() { return arguments; }());\r\n * // => true\r\n *\r\n * _.isArguments([1, 2, 3]);\r\n * // => false\r\n */\r\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\r\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\r\n    !propertyIsEnumerable.call(value, 'callee');\r\n};\r\n\r\n/**\r\n * Checks if `value` is classified as an `Array` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\r\n * @example\r\n *\r\n * _.isArray([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArray(document.body.children);\r\n * // => false\r\n *\r\n * _.isArray('abc');\r\n * // => false\r\n *\r\n * _.isArray(_.noop);\r\n * // => false\r\n */\r\nvar isArray = Array.isArray;\r\n\r\n/**\r\n * Checks if `value` is array-like. A value is considered array-like if it's\r\n * not a function and has a `value.length` that's an integer greater than or\r\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n * @example\r\n *\r\n * _.isArrayLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArrayLike(document.body.children);\r\n * // => true\r\n *\r\n * _.isArrayLike('abc');\r\n * // => true\r\n *\r\n * _.isArrayLike(_.noop);\r\n * // => false\r\n */\r\nfunction isArrayLike(value) {\r\n  return value != null && isLength(value.length) && !isFunction(value);\r\n}\r\n\r\n/**\r\n * Checks if `value` is a buffer.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.3.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\r\n * @example\r\n *\r\n * _.isBuffer(new Buffer(2));\r\n * // => true\r\n *\r\n * _.isBuffer(new Uint8Array(2));\r\n * // => false\r\n */\r\nvar isBuffer = nativeIsBuffer || stubFalse;\r\n\r\n/**\r\n * Performs a deep comparison between two values to determine if they are\r\n * equivalent.\r\n *\r\n * **Note:** This method supports comparing arrays, array buffers, booleans,\r\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\r\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\r\n * by their own, not inherited, enumerable properties. Functions and DOM\r\n * nodes are compared by strict equality, i.e. `===`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to compare.\r\n * @param {*} other The other value to compare.\r\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n * @example\r\n *\r\n * var object = { 'a': 1 };\r\n * var other = { 'a': 1 };\r\n *\r\n * _.isEqual(object, other);\r\n * // => true\r\n *\r\n * object === other;\r\n * // => false\r\n */\r\nfunction isEqual(value, other) {\r\n  return baseIsEqual(value, other);\r\n}\r\n\r\n/**\r\n * Checks if `value` is classified as a `Function` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n * @example\r\n *\r\n * _.isFunction(_);\r\n * // => true\r\n *\r\n * _.isFunction(/abc/);\r\n * // => false\r\n */\r\nfunction isFunction(value) {\r\n  if (!isObject(value)) {\r\n    return false;\r\n  }\r\n  // The use of `Object#toString` avoids issues with the `typeof` operator\r\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\r\n  var tag = baseGetTag(value);\r\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\r\n}\r\n\r\n/**\r\n * Checks if `value` is a valid array-like length.\r\n *\r\n * **Note:** This method is loosely based on\r\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\r\n * @example\r\n *\r\n * _.isLength(3);\r\n * // => true\r\n *\r\n * _.isLength(Number.MIN_VALUE);\r\n * // => false\r\n *\r\n * _.isLength(Infinity);\r\n * // => false\r\n *\r\n * _.isLength('3');\r\n * // => false\r\n */\r\nfunction isLength(value) {\r\n  return typeof value == 'number' &&\r\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\r\n}\r\n\r\n/**\r\n * Checks if `value` is the\r\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n * @example\r\n *\r\n * _.isObject({});\r\n * // => true\r\n *\r\n * _.isObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObject(_.noop);\r\n * // => true\r\n *\r\n * _.isObject(null);\r\n * // => false\r\n */\r\nfunction isObject(value) {\r\n  var type = typeof value;\r\n  return value != null && (type == 'object' || type == 'function');\r\n}\r\n\r\n/**\r\n * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n * and has a `typeof` result of \"object\".\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n * @example\r\n *\r\n * _.isObjectLike({});\r\n * // => true\r\n *\r\n * _.isObjectLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObjectLike(_.noop);\r\n * // => false\r\n *\r\n * _.isObjectLike(null);\r\n * // => false\r\n */\r\nfunction isObjectLike(value) {\r\n  return value != null && typeof value == 'object';\r\n}\r\n\r\n/**\r\n * Checks if `value` is classified as a typed array.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n * @example\r\n *\r\n * _.isTypedArray(new Uint8Array);\r\n * // => true\r\n *\r\n * _.isTypedArray([]);\r\n * // => false\r\n */\r\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\r\n\r\n/**\r\n * Creates an array of the own enumerable property names of `object`.\r\n *\r\n * **Note:** Non-object values are coerced to objects. See the\r\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\r\n * for more details.\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category Object\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n * @example\r\n *\r\n * function Foo() {\r\n *   this.a = 1;\r\n *   this.b = 2;\r\n * }\r\n *\r\n * Foo.prototype.c = 3;\r\n *\r\n * _.keys(new Foo);\r\n * // => ['a', 'b'] (iteration order is not guaranteed)\r\n *\r\n * _.keys('hi');\r\n * // => ['0', '1']\r\n */\r\nfunction keys(object) {\r\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\r\n}\r\n\r\n/**\r\n * This method returns a new empty array.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.13.0\r\n * @category Util\r\n * @returns {Array} Returns the new empty array.\r\n * @example\r\n *\r\n * var arrays = _.times(2, _.stubArray);\r\n *\r\n * console.log(arrays);\r\n * // => [[], []]\r\n *\r\n * console.log(arrays[0] === arrays[1]);\r\n * // => false\r\n */\r\nfunction stubArray() {\r\n  return [];\r\n}\r\n\r\n/**\r\n * This method returns `false`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.13.0\r\n * @category Util\r\n * @returns {boolean} Returns `false`.\r\n * @example\r\n *\r\n * _.times(2, _.stubFalse);\r\n * // => [false, false]\r\n */\r\nfunction stubFalse() {\r\n  return false;\r\n}\r\n\r\nmodule.exports = isEqual;\r\n","\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\r\nimport browser from '../browser';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\nlet gumFunction = null;\r\n\r\n/**\r\n * Handles obtaining a stream from a screen capture on different browsers.\r\n */\r\nconst ScreenObtainer = {\r\n    /**\r\n     * If not <tt>null</tt> it means that the initialization process is still in\r\n     * progress. It is used to make desktop stream request wait and continue\r\n     * after it's done.\r\n     * {@type Promise|null}\r\n     */\r\n\r\n    obtainStream: null,\r\n\r\n    /**\r\n     * Initializes the function used to obtain a screen capture\r\n     * (this.obtainStream).\r\n     *\r\n     * @param {object} options\r\n     * @param {Function} gum GUM method\r\n     */\r\n    init(options = {}, gum) {\r\n        this.options = options;\r\n        gumFunction = gum;\r\n\r\n        this.obtainStream = this._createObtainStreamMethod();\r\n\r\n        if (!this.obtainStream) {\r\n            logger.info('Desktop sharing disabled');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns a method which will be used to obtain the screen sharing stream\r\n     * (based on the browser type).\r\n     *\r\n     * @returns {Function}\r\n     * @private\r\n     */\r\n    _createObtainStreamMethod() {\r\n        if (browser.isNWJS()) {\r\n            return (_, onSuccess, onFailure) => {\r\n                window.JitsiMeetNW.obtainDesktopStream(\r\n                    onSuccess,\r\n                    (error, constraints) => {\r\n                        let jitsiError;\r\n\r\n                        // FIXME:\r\n                        // This is very very dirty fix for recognising that the\r\n                        // user have clicked the cancel button from the Desktop\r\n                        // sharing pick window. The proper solution would be to\r\n                        // detect this in the NWJS application by checking the\r\n                        // streamId === \"\". Even better solution would be to\r\n                        // stop calling GUM from the NWJS app and just pass the\r\n                        // streamId to lib-jitsi-meet. This way the desktop\r\n                        // sharing implementation for NWJS and chrome extension\r\n                        // will be the same and lib-jitsi-meet will be able to\r\n                        // control the constraints, check the streamId, etc.\r\n                        //\r\n                        // I cannot find documentation about \"InvalidStateError\"\r\n                        // but this is what we are receiving from GUM when the\r\n                        // streamId for the desktop sharing is \"\".\r\n\r\n                        if (error && error.name === 'InvalidStateError') {\r\n                            jitsiError = new JitsiTrackError(\r\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\r\n                            );\r\n                        } else {\r\n                            jitsiError = new JitsiTrackError(\r\n                                error, constraints, [ 'desktop' ]);\r\n                        }\r\n                        (typeof onFailure === 'function')\r\n                            && onFailure(jitsiError);\r\n                    });\r\n            };\r\n        } else if (browser.isElectron()) {\r\n            return this.obtainScreenOnElectron;\r\n        } else if (browser.supportsGetDisplayMedia()) {\r\n            return this.obtainScreenFromGetDisplayMedia;\r\n        }\r\n        logger.log('Screen sharing not supported on ', browser.getName());\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Checks whether obtaining a screen capture is supported in the current\r\n     * environment.\r\n     * @returns {boolean}\r\n     */\r\n    isSupported() {\r\n        return this.obtainStream !== null;\r\n    },\r\n\r\n    /**\r\n     * Obtains a screen capture stream on Electron.\r\n     *\r\n     * @param {Object} [options] - Screen sharing options.\r\n     * @param {Array<string>} [options.desktopSharingSources] - Array with the\r\n     * sources that have to be displayed in the desktop picker window ('screen',\r\n     * 'window', etc.).\r\n     * @param onSuccess - Success callback.\r\n     * @param onFailure - Failure callback.\r\n     */\r\n    obtainScreenOnElectron(options = {}, onSuccess, onFailure) {\r\n        if (window.JitsiMeetScreenObtainer\r\n            && window.JitsiMeetScreenObtainer.openDesktopPicker) {\r\n            const { desktopSharingSources, gumOptions } = options;\r\n\r\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\r\n                {\r\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\r\n                },\r\n                (streamId, streamType, screenShareAudio = false) =>\r\n                    onGetStreamResponse(\r\n                        {\r\n                            response: {\r\n                                streamId,\r\n                                streamType,\r\n                                screenShareAudio\r\n                            },\r\n                            gumOptions\r\n                        },\r\n                        onSuccess,\r\n                        onFailure\r\n                    ),\r\n                err => onFailure(new JitsiTrackError(\r\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\r\n                    err\r\n                ))\r\n            );\r\n        } else {\r\n            onFailure(new JitsiTrackError(\r\n                JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Obtains a screen capture stream using getDisplayMedia.\r\n     *\r\n     * @param callback - The success callback.\r\n     * @param errorCallback - The error callback.\r\n     */\r\n    obtainScreenFromGetDisplayMedia(options, callback, errorCallback) {\r\n        logger.info('Using getDisplayMedia for screen sharing');\r\n\r\n        let getDisplayMedia;\r\n\r\n        if (navigator.getDisplayMedia) {\r\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\r\n        } else {\r\n            // eslint-disable-next-line max-len\r\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\r\n        }\r\n\r\n        getDisplayMedia({\r\n            video: true,\r\n            audio: true,\r\n            cursor: 'always'\r\n        })\r\n            .then(stream => {\r\n                let applyConstraintsPromise;\r\n\r\n                if (stream\r\n                    && stream.getTracks()\r\n                    && stream.getTracks().length > 0) {\r\n                    const videoTrack = stream.getVideoTracks()[0];\r\n\r\n                    // Apply video track constraint.\r\n                    if (videoTrack) {\r\n                        applyConstraintsPromise = videoTrack.applyConstraints(options.trackOptions);\r\n                    }\r\n                } else {\r\n                    applyConstraintsPromise = Promise.resolve();\r\n                }\r\n\r\n                applyConstraintsPromise.then(() =>\r\n                    callback({\r\n                        stream,\r\n                        sourceId: stream.id\r\n                    }));\r\n            })\r\n            .catch(error => {\r\n                const errorDetails = {\r\n                    errorName: error && error.name,\r\n                    errorMsg: error && error.message,\r\n                    errorStack: error && error.stack\r\n                };\r\n\r\n                logger.error('getDisplayMedia error', errorDetails);\r\n\r\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\r\n                    // On Chrome this is the only thing different between error returned when user cancels\r\n                    // and when no permission was given on the OS level.\r\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\r\n\r\n                    return;\r\n                }\r\n\r\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\r\n            });\r\n    }\r\n};\r\n\r\n/**\r\n * Handles response from external application / extension and calls GUM to\r\n * receive the desktop streams or reports error.\r\n * @param {object} options\r\n * @param {object} options.response\r\n * @param {string} options.response.streamId - the streamId for the desktop\r\n * stream.\r\n * @param {bool}   options.response.screenShareAudio - Used by electron clients to\r\n * enable system audio screen sharing.\r\n * @param {string} options.response.error - error to be reported.\r\n * @param {object} options.gumOptions - options passed to GUM.\r\n * @param {Function} onSuccess - callback for success.\r\n * @param {Function} onFailure - callback for failure.\r\n * @param {object} gumOptions - options passed to GUM.\r\n */\r\nfunction onGetStreamResponse(\r\n        options = {\r\n            response: {},\r\n            gumOptions: {}\r\n        },\r\n        onSuccess,\r\n        onFailure) {\r\n    const { streamId, streamType, screenShareAudio, error } = options.response || {};\r\n\r\n    if (streamId) {\r\n        const gumOptions = {\r\n            desktopStream: streamId,\r\n            screenShareAudio,\r\n            ...options.gumOptions\r\n        };\r\n\r\n        gumFunction([ 'desktop' ], gumOptions)\r\n            .then(stream => onSuccess({\r\n                stream,\r\n                sourceId: streamId,\r\n                sourceType: streamType\r\n            }), onFailure);\r\n    } else {\r\n        // As noted in Chrome Desktop Capture API:\r\n        // If user didn't select any source (i.e. canceled the prompt)\r\n        // then the callback is called with an empty streamId.\r\n        if (streamId === '') {\r\n            onFailure(new JitsiTrackError(\r\n                JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\r\n\r\n            return;\r\n        }\r\n\r\n        onFailure(new JitsiTrackError(\r\n            JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR,\r\n            error));\r\n    }\r\n}\r\n\r\nexport default ScreenObtainer;\r\n","const currentExecutingScript = require('current-executing-script');\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Implements utility functions which facilitate the dealing with scripts such\r\n * as the download and execution of a JavaScript file.\r\n */\r\nconst ScriptUtil = {\r\n    /**\r\n     * Loads a script from a specific source.\r\n     *\r\n     * @param src the source from the which the script is to be (down)loaded\r\n     * @param async true to asynchronously load the script or false to\r\n     * synchronously load the script\r\n     * @param prepend true to schedule the loading of the script as soon as\r\n     * possible or false to schedule the loading of the script at the end of the\r\n     * scripts known at the time\r\n     * @param relativeURL whether we need load the library from url relative\r\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\r\n     * library from different location than the app that is using it\r\n     * @param loadCallback on load callback function\r\n     * @param errorCallback callback to be called on error loading the script\r\n     */\r\n    loadScript(\r\n            src,\r\n            async,\r\n            prepend,\r\n            relativeURL,\r\n            loadCallback,\r\n            errorCallback) {\r\n        const d = document;\r\n        const tagName = 'script';\r\n        const script = d.createElement(tagName);\r\n        const referenceNode = d.getElementsByTagName(tagName)[0];\r\n\r\n        script.async = async;\r\n\r\n        if (relativeURL) {\r\n            // finds the src url of the current loaded script\r\n            // and use it as base of the src supplied argument\r\n            const scriptEl = currentExecutingScript();\r\n\r\n            if (scriptEl) {\r\n                const scriptSrc = scriptEl.src;\r\n                const baseScriptSrc\r\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\r\n\r\n                if (scriptSrc && baseScriptSrc) {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    src = baseScriptSrc + src;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (loadCallback) {\r\n            script.onload = loadCallback;\r\n        }\r\n        if (errorCallback) {\r\n            script.onerror = errorCallback;\r\n        }\r\n\r\n        script.src = src;\r\n        if (prepend) {\r\n            referenceNode.parentNode.insertBefore(script, referenceNode);\r\n        } else {\r\n            referenceNode.parentNode.appendChild(script);\r\n        }\r\n    }\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\nmodule.exports = ScriptUtil;\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Default value of 500 milliseconds for\r\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\r\n *\r\n * @type {number}\r\n */\r\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\r\n\r\n/**\r\n * Default value of 2000 milliseconds for\r\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\r\n *\r\n * @type {number}\r\n */\r\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\r\n\r\n/**\r\n * The time to wait a track to be restored. Track which was out of lastN\r\n * should be inactive and when entering lastN it becomes restoring and when\r\n * data is received from bridge it will become active, but if no data is\r\n * received for some time we set status of that participant connection to\r\n * interrupted.\r\n * @type {number}\r\n */\r\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\r\n\r\n/**\r\n * Participant connection statuses.\r\n *\r\n * @type {{\r\n *      ACTIVE: string,\r\n *      INACTIVE: string,\r\n *      INTERRUPTED: string,\r\n *      RESTORING: string\r\n * }}\r\n */\r\nexport const ParticipantConnectionStatus = {\r\n    /**\r\n     * Status indicating that connection is currently active.\r\n     */\r\n    ACTIVE: 'active',\r\n\r\n    /**\r\n     * Status indicating that connection is currently inactive.\r\n     * Inactive means the connection was stopped on purpose from the bridge,\r\n     * like exiting lastN or adaptivity decided to drop video because of not\r\n     * enough bandwidth.\r\n     */\r\n    INACTIVE: 'inactive',\r\n\r\n    /**\r\n     * Status indicating that connection is currently interrupted.\r\n     */\r\n    INTERRUPTED: 'interrupted',\r\n\r\n    /**\r\n     * Status indicating that connection is currently restoring.\r\n     */\r\n    RESTORING: 'restoring'\r\n};\r\n\r\n/**\r\n * Class is responsible for emitting\r\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\r\n */\r\nexport default class ParticipantConnectionStatusHandler {\r\n    /* eslint-disable max-params*/\r\n    /**\r\n     * Calculates the new {@link ParticipantConnectionStatus} based on\r\n     * the values given for some specific remote user. It is assumed that\r\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\r\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\r\n     * data from the user for the last 15 seconds.\r\n     * @param {boolean} isInLastN indicates whether the user is in the last N\r\n     * set. When set to false it means that JVB is not sending any video for\r\n     * the user.\r\n     * @param {boolean} isRestoringTimedout if true it means that the user has\r\n     * been outside of last N too long to be considered\r\n     * {@link ParticipantConnectionStatus.RESTORING}.\r\n     * @param {boolean} isVideoMuted true if the user is video muted and we\r\n     * should not expect to receive any video.\r\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\r\n     * frozen detection then it will be set to true when the video track is\r\n     * frozen. If the current browser does not support frozen detection the it's\r\n     * always false.\r\n     * @return {ParticipantConnectionStatus} the new connection status for\r\n     * the user for whom the values above were provided.\r\n     * @private\r\n     */\r\n    static _getNewStateForJvbMode(\r\n            isConnectionActiveByJvb,\r\n            isInLastN,\r\n            isRestoringTimedout,\r\n            isVideoMuted,\r\n            isVideoTrackFrozen) {\r\n        if (!isConnectionActiveByJvb) {\r\n            // when there is a connection problem signaled from jvb\r\n            // it means no media was flowing for at least 15secs, so both audio\r\n            // and video are most likely interrupted\r\n            return ParticipantConnectionStatus.INTERRUPTED;\r\n        } else if (isVideoMuted) {\r\n            // If the connection is active according to JVB and the user is\r\n            // video muted there is no way for the connection to be inactive,\r\n            // because the detection logic below only makes sense for video.\r\n            return ParticipantConnectionStatus.ACTIVE;\r\n        }\r\n\r\n        // Logic when isVideoTrackFrozen is supported\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n            if (!isVideoTrackFrozen) {\r\n                // If the video is playing we're good\r\n                return ParticipantConnectionStatus.ACTIVE;\r\n            } else if (isInLastN) {\r\n                return isRestoringTimedout\r\n                    ? ParticipantConnectionStatus.INTERRUPTED\r\n                    : ParticipantConnectionStatus.RESTORING;\r\n            }\r\n\r\n            return ParticipantConnectionStatus.INACTIVE;\r\n        }\r\n\r\n        // Because this browser is incapable of detecting frozen video we must\r\n        // rely on the lastN value\r\n        return isInLastN\r\n            ? ParticipantConnectionStatus.ACTIVE\r\n            : ParticipantConnectionStatus.INACTIVE;\r\n    }\r\n\r\n    /* eslint-enable max-params*/\r\n\r\n    /**\r\n     * In P2P mode we don't care about any values coming from the JVB and\r\n     * the connection status can be only active or interrupted.\r\n     * @param {boolean} isVideoMuted the user if video muted\r\n     * @param {boolean} isVideoTrackFrozen true if the video track for\r\n     * the remote user is currently frozen. If the current browser does not\r\n     * support video frozen detection then it's always false.\r\n     * @return {ParticipantConnectionStatus}\r\n     * @private\r\n     */\r\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\r\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\r\n            // There's no way to detect problems in P2P when there's no video\r\n            // track frozen detection...\r\n            return ParticipantConnectionStatus.ACTIVE;\r\n        }\r\n\r\n        return isVideoMuted || !isVideoTrackFrozen\r\n            ? ParticipantConnectionStatus.ACTIVE\r\n            : ParticipantConnectionStatus.INTERRUPTED;\r\n    }\r\n\r\n    /**\r\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\r\n     *\r\n     * @constructor\r\n     * @param {RTC} rtc the RTC service instance\r\n     * @param {JitsiConference} conference parent conference instance\r\n     * @param {Object} options\r\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\r\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\r\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\r\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\r\n     */\r\n    constructor(rtc, conference, options) {\r\n        this.rtc = rtc;\r\n        this.conference = conference;\r\n\r\n        /**\r\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\r\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\r\n         * window.setTimeout.\r\n         * @type {Object.<string, number>}\r\n         */\r\n        this.trackTimers = {};\r\n\r\n        /**\r\n         * This map holds the endpoint connection status received from the JVB\r\n         * (as it might be different than the one stored in JitsiParticipant).\r\n         * Required for getting back in sync when remote video track is removed.\r\n         * @type {Object.<string, boolean>}\r\n         */\r\n        this.connStatusFromJvb = { };\r\n\r\n        /**\r\n         * If video track frozen detection through RTC mute event is supported,\r\n         * we wait some time until video track is considered frozen. But because\r\n         * when the user falls out of last N it is expected for the video to\r\n         * freeze this timeout must be significantly reduced in \"out of last N\"\r\n         * case.\r\n         *\r\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\r\n         * user is not in last N.\r\n         * @type {number}\r\n         */\r\n        this.outOfLastNTimeout\r\n            = typeof options.outOfLastNTimeout === 'number'\r\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\r\n\r\n        /**\r\n         * How long we're going to wait after the RTC video track muted event\r\n         * for the corresponding signalling mute event, before the connection\r\n         * interrupted is fired. The default value is\r\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\r\n         *\r\n         * @type {number} amount of time in milliseconds\r\n         */\r\n        this.rtcMuteTimeout\r\n            = typeof options.rtcMuteTimeout === 'number'\r\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\r\n\r\n        /**\r\n         * This map holds a timestamp indicating  when participant's video track\r\n         * was RTC muted (it is assumed that each participant can have only 1\r\n         * video track at a time). The purpose of storing the timestamp is to\r\n         * avoid the transition to disconnected status in case of legitimate\r\n         * video mute operation where the signalling video muted event can\r\n         * arrive shortly after RTC muted event.\r\n         *\r\n         * The key is participant's ID which is the same as endpoint id in\r\n         * the Colibri conference allocated on the JVB.\r\n         *\r\n         * The value is a timestamp measured in milliseconds obtained with\r\n         * <tt>Date.now()</tt>.\r\n         *\r\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\r\n         *       implemented in JitsiLocalTrack by extending the event to\r\n         *       the remote track and allowing to set different timeout for\r\n         *       local and remote tracks.\r\n         *\r\n         * @type {Object.<string, number>}\r\n         */\r\n        this.rtcMutedTimestamp = { };\r\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\r\n\r\n        /**\r\n         * This map holds the timestamps indicating when participant's video\r\n         * entered lastN set. Participants entering lastN will have connection\r\n         * status restoring and when we start receiving video will become\r\n         * active, but if video is not received for certain time\r\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\r\n         * will become interrupted.\r\n         *\r\n         * @type {Map<string, number>}\r\n         */\r\n        this.enteredLastNTimestamp = new Map();\r\n\r\n        /**\r\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\r\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\r\n         * scheduled using window.setTimeout.\r\n         *\r\n         * @type {Map<string, number>}\r\n         */\r\n        this.restoringTimers = new Map();\r\n\r\n        /**\r\n         * A map that holds the current connection status (along with all the internal events that happen\r\n         * while in that state).\r\n         *\r\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\r\n         */\r\n        this.connectionStatusMap = new Map();\r\n    }\r\n\r\n    /**\r\n     * Gets the video frozen timeout for given user.\r\n     * @param {string} id endpoint/participant ID\r\n     * @return {number} how long are we going to wait since RTC video muted\r\n     * even, before a video track is considered frozen.\r\n     * @private\r\n     */\r\n    _getVideoFrozenTimeout(id) {\r\n        return this.rtc.isInLastN(id)\r\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\r\n    }\r\n\r\n    /**\r\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\r\n     * listeners.\r\n     */\r\n    init() {\r\n\r\n        this._onEndpointConnStatusChanged\r\n            = this.onEndpointConnStatusChanged.bind(this);\r\n\r\n        this.rtc.addListener(\r\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n            this._onEndpointConnStatusChanged);\r\n\r\n        // Handles P2P status changes\r\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\r\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\r\n\r\n        // Used to send analytics events for the participant that left the call.\r\n        this._onUserLeft = this.onUserLeft.bind(this);\r\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\r\n        // events for video type tracks when they stop receiving data which is\r\n        // often a sign that remote user is having connectivity issues\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n\r\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\r\n            this.rtc.addListener(\r\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\r\n\r\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\r\n            this.rtc.addListener(\r\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\r\n\r\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\r\n            // event handlers\r\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\r\n            this.conference.on(\r\n                JitsiConferenceEvents.TRACK_ADDED,\r\n                this._onRemoteTrackAdded);\r\n\r\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\r\n            this.conference.on(\r\n                JitsiConferenceEvents.TRACK_REMOVED,\r\n                this._onRemoteTrackRemoved);\r\n\r\n            // Listened which will be bound to JitsiRemoteTrack to listen for\r\n            // signalling mute/unmute events.\r\n            this._onSignallingMuteChanged\r\n                = this.onSignallingMuteChanged.bind(this);\r\n\r\n            // Used to send an analytics event when the video type changes.\r\n            this._onTrackVideoTypeChanged\r\n                = this.onTrackVideoTypeChanged.bind(this);\r\n        }\r\n\r\n        this._onLastNChanged = this._onLastNChanged.bind(this);\r\n        this.conference.on(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            this._onLastNChanged);\r\n\r\n        this._onLastNValueChanged\r\n            = this.refreshConnectionStatusForAll.bind(this);\r\n        this.rtc.on(\r\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\r\n    }\r\n\r\n    /**\r\n     * Removes all event listeners and disposes of all resources held by this\r\n     * instance.\r\n     */\r\n    dispose() {\r\n\r\n        this.rtc.removeListener(\r\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n            this._onEndpointConnStatusChanged);\r\n\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n            this.rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_MUTE,\r\n                this._onTrackRtcMuted);\r\n            this.rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_UNMUTE,\r\n                this._onTrackRtcUnmuted);\r\n\r\n            this.conference.off(\r\n                JitsiConferenceEvents.TRACK_ADDED,\r\n                this._onRemoteTrackAdded);\r\n            this.conference.off(\r\n                JitsiConferenceEvents.TRACK_REMOVED,\r\n                this._onRemoteTrackRemoved);\r\n        }\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            this._onLastNChanged);\r\n\r\n        this.rtc.removeListener(\r\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n        const participantIds = Object.keys(this.trackTimers);\r\n\r\n        for (const participantId of participantIds) {\r\n            this.clearTimeout(participantId);\r\n            this.clearRtcMutedTimestamp(participantId);\r\n        }\r\n\r\n        for (const id in this.connectionStatusMap) {\r\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\r\n                this.onUserLeft(id);\r\n            }\r\n        }\r\n\r\n        // Clear RTC connection status cache\r\n        this.connStatusFromJvb = {};\r\n    }\r\n\r\n    /**\r\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\r\n     * notification over the data channel from the bridge about endpoint's\r\n     * connection status update.\r\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\r\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\r\n     */\r\n    onEndpointConnStatusChanged(endpointId, isActive) {\r\n\r\n        logger.debug(\r\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\r\n                endpointId}: ${isActive}`);\r\n\r\n        // Filter out events for the local JID for now\r\n        if (endpointId !== this.conference.myUserId()) {\r\n            // Store the status received over the data channels\r\n            this.connStatusFromJvb[endpointId] = isActive;\r\n            this.figureOutConnectionStatus(endpointId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes connection status.\r\n     * @param {JitsiParticipant} participant\r\n     * @param newStatus\r\n     */\r\n    _changeConnectionStatus(participant, newStatus) {\r\n        if (participant.getConnectionStatus() !== newStatus) {\r\n\r\n            const endpointId = participant.getId();\r\n\r\n            participant._setConnectionStatus(newStatus);\r\n\r\n            logger.debug(\r\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\r\n                    newStatus}`);\r\n\r\n            // Log the event on CallStats\r\n            Statistics.sendLog(\r\n                JSON.stringify({\r\n                    id: 'peer.conn.status',\r\n                    participant: endpointId,\r\n                    status: newStatus\r\n                }));\r\n\r\n\r\n            this.conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\r\n                endpointId, newStatus);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the postponed \"connection interrupted\" event which was previously\r\n     * scheduled as a timeout on RTC 'onmute' event.\r\n     *\r\n     * @param {string} participantId - The participant for which the \"connection\r\n     * interrupted\" timeout was scheduled.\r\n     */\r\n    clearTimeout(participantId) {\r\n        if (this.trackTimers[participantId]) {\r\n            window.clearTimeout(this.trackTimers[participantId]);\r\n            this.trackTimers[participantId] = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the timestamp of the RTC muted event for participant's video track\r\n     * @param {string} participantId the id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     */\r\n    clearRtcMutedTimestamp(participantId) {\r\n        this.rtcMutedTimestamp[participantId] = null;\r\n    }\r\n\r\n    /**\r\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\r\n     * a new one is added to the conference.\r\n     *\r\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\r\n     * the conference.\r\n     */\r\n    onRemoteTrackAdded(remoteTrack) {\r\n        if (!remoteTrack.isLocal()\r\n                && remoteTrack.getType() === MediaType.VIDEO) {\r\n\r\n            logger.debug(\r\n                `Detector on remote track added for: ${\r\n                    remoteTrack.getParticipantId()}`);\r\n\r\n            remoteTrack.on(\r\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n                this._onSignallingMuteChanged);\r\n            remoteTrack.on(\r\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\r\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all event listeners bound to the remote video track and clears\r\n     * any related timeouts.\r\n     *\r\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\r\n     * removed from the conference.\r\n     */\r\n    onRemoteTrackRemoved(remoteTrack) {\r\n        if (!remoteTrack.isLocal()\r\n                && remoteTrack.getType() === MediaType.VIDEO) {\r\n\r\n            const endpointId = remoteTrack.getParticipantId();\r\n\r\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\r\n\r\n            remoteTrack.off(\r\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n                this._onSignallingMuteChanged);\r\n\r\n            this.clearTimeout(endpointId);\r\n            this.clearRtcMutedTimestamp(endpointId);\r\n\r\n            this.figureOutConnectionStatus(endpointId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if given participant's video is considered frozen.\r\n     * @param {JitsiParticipant} participant - The participant.\r\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\r\n     * participant or <tt>false</tt> when it's either not considered frozen\r\n     * (yet) or if freeze detection is not supported by the current browser.\r\n     *\r\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\r\n     *       implemented in JitsiLocalTrack by extending the event to\r\n     *       the remote track and allowing to set different timeout for\r\n     *       local and remote tracks.\r\n     *\r\n     */\r\n    isVideoTrackFrozen(participant) {\r\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\r\n            return false;\r\n        }\r\n\r\n        const id = participant.getId();\r\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\r\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\r\n        const timeout = this._getVideoFrozenTimeout(id);\r\n\r\n        return hasAnyVideoRTCMuted\r\n            && typeof rtcMutedTimestamp === 'number'\r\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\r\n    }\r\n\r\n    /**\r\n     * Goes over every participant and updates connectivity status.\r\n     * Should be called when a parameter which affects all of the participants\r\n     * is changed (P2P for example).\r\n     */\r\n    refreshConnectionStatusForAll() {\r\n        const participants = this.conference.getParticipants();\r\n\r\n        for (const participant of participants) {\r\n            this.figureOutConnectionStatus(participant.getId());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Figures out (and updates) the current connectivity status for\r\n     * the participant identified by the given id.\r\n     *\r\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\r\n     */\r\n    figureOutConnectionStatus(id) {\r\n        const participant = this.conference.getParticipantById(id);\r\n\r\n        if (!participant) {\r\n            // Probably the participant is no longer in the conference\r\n            // (at the time of writing this code, participant is\r\n            // detached from the conference and TRACK_REMOVED events are\r\n            // fired),\r\n            // so we don't care, but let's print a log message for debugging purposes.\r\n            logger.debug(`figure out conn status - no participant for: ${id}`);\r\n\r\n            return;\r\n        }\r\n\r\n        const inP2PMode = this.conference.isP2PActive();\r\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\r\n        const audioOnlyMode = this.rtc.getLastN() === 0;\r\n\r\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\r\n        // any detection based on video playback or the last N.\r\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\r\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\r\n        const isInLastN = this.rtc.isInLastN(id);\r\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\r\n\r\n        if (typeof isConnActiveByJvb !== 'boolean') {\r\n            // If no status was received from the JVB it means that it's active\r\n            // (the bridge does not send notification unless there is a problem)\r\n            logger.debug('Assuming connection active by JVB - no notification');\r\n            isConnActiveByJvb = true;\r\n        }\r\n\r\n        const newState\r\n            = inP2PMode\r\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\r\n                    isVideoMuted,\r\n                    isVideoTrackFrozen)\r\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\r\n                    isConnActiveByJvb,\r\n                    isInLastN,\r\n                    isRestoringTimedOut,\r\n                    isVideoMuted,\r\n                    isVideoTrackFrozen);\r\n\r\n        // if the new state is not restoring clear timers and timestamps\r\n        // that we use to track the restoring state\r\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\r\n            this._clearRestoringTimer(id);\r\n        }\r\n\r\n        logger.debug(\r\n            `Figure out conn status for ${id}, is video muted: ${\r\n                isVideoMuted} is active(jvb): ${\r\n                isConnActiveByJvb} video track frozen: ${\r\n                isVideoTrackFrozen} p2p mode: ${\r\n                inP2PMode} is in last N: ${\r\n                isInLastN} currentStatus => newStatus: ${\r\n                participant.getConnectionStatus()} => ${newState}`);\r\n\r\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\r\n\r\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\r\n        // since the last time this code block run).\r\n        if (!('p2p' in oldConnectionStatus)\r\n            || !('connectionStatus' in oldConnectionStatus)\r\n            || oldConnectionStatus.p2p !== inP2PMode\r\n            || oldConnectionStatus.connectionStatus !== newState) {\r\n\r\n            const nowMs = Date.now();\r\n\r\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\r\n\r\n            this.connectionStatusMap[id] = {\r\n                ...oldConnectionStatus,\r\n                connectionStatus: newState,\r\n                p2p: inP2PMode,\r\n                startedMs: nowMs\r\n            };\r\n\r\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\r\n            // video type is not in oldConnectionStatus.\r\n            if (!('videoType' in this.connectionStatusMap[id])) {\r\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n\r\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\r\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\r\n                }\r\n            }\r\n        }\r\n        this._changeConnectionStatus(participant, newState);\r\n    }\r\n\r\n    /**\r\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\r\n     * in the INTERRUPTED state) and sends a participant connection status event.\r\n     * @param {string} id - The jid of the participant.\r\n     * @param {Number} nowMs - The current time (in millis).\r\n     * @returns {void}\r\n     */\r\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\r\n        const participantConnectionStatus = this.connectionStatusMap[id];\r\n\r\n        if (participantConnectionStatus\r\n            && 'startedMs' in participantConnectionStatus\r\n            && 'videoType' in participantConnectionStatus\r\n            && 'connectionStatus' in participantConnectionStatus\r\n            && 'p2p' in participantConnectionStatus) {\r\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\r\n            Statistics.sendAnalytics(\r\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On change in Last N set check all leaving and entering participants to\r\n     * change their corresponding statuses.\r\n     *\r\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\r\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\r\n     * @private\r\n     */\r\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\r\n        const now = Date.now();\r\n\r\n        logger.debug(\r\n            'leaving/entering lastN', leavingLastN, enteringLastN, now);\r\n\r\n        for (const id of leavingLastN) {\r\n            this.enteredLastNTimestamp.delete(id);\r\n            this._clearRestoringTimer(id);\r\n            this.figureOutConnectionStatus(id);\r\n        }\r\n        for (const id of enteringLastN) {\r\n            // store the timestamp this id is entering lastN\r\n            this.enteredLastNTimestamp.set(id, now);\r\n            this.figureOutConnectionStatus(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the restoring timer for participant's video track and the\r\n     * timestamp for entering lastN.\r\n     *\r\n     * @param {string} participantId - The id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     */\r\n    _clearRestoringTimer(participantId) {\r\n        const rTimer = this.restoringTimers.get(participantId);\r\n\r\n        if (rTimer) {\r\n            clearTimeout(rTimer);\r\n            this.restoringTimers.delete(participantId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a track had stayed enough in restoring state, compares\r\n     * current time and the time the track entered in lastN. If it hasn't\r\n     * timedout and there is no timer added, add new timer in order to give it\r\n     * more time to become active or mark it as interrupted on next check.\r\n     *\r\n     * @param {string} participantId - The id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\r\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\r\n     * set its status to interrupted.\r\n     * @private\r\n     */\r\n    _isRestoringTimedout(participantId) {\r\n        const enteredLastNTimestamp\r\n            = this.enteredLastNTimestamp.get(participantId);\r\n\r\n        if (enteredLastNTimestamp\r\n            && (Date.now() - enteredLastNTimestamp)\r\n                >= DEFAULT_RESTORING_TIMEOUT) {\r\n            return true;\r\n        }\r\n\r\n        // still haven't reached timeout, if there is no timer scheduled,\r\n        // schedule one so we can track the restoring state and change it after\r\n        // reaching the timeout\r\n        const rTimer = this.restoringTimers.get(participantId);\r\n\r\n        if (!rTimer) {\r\n            this.restoringTimers.set(participantId, setTimeout(\r\n                () => this.figureOutConnectionStatus(participantId),\r\n                DEFAULT_RESTORING_TIMEOUT));\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sends a last/final participant connection status event for the participant that left the conference.\r\n     * @param {string} id - The id of the participant that left the conference.\r\n     * @returns {void}\r\n     */\r\n    onUserLeft(id) {\r\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\r\n        delete this.connectionStatusMap[id];\r\n    }\r\n\r\n    /**\r\n     * Handles RTC 'onmute' event for the video track.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\r\n     * will be processed.\r\n     */\r\n    onTrackRtcMuted(track) {\r\n        const participantId = track.getParticipantId();\r\n        const participant = this.conference.getParticipantById(participantId);\r\n\r\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\r\n        if (!participant) {\r\n            logger.error(`No participant for id: ${participantId}`);\r\n\r\n            return;\r\n        }\r\n        this.rtcMutedTimestamp[participantId] = Date.now();\r\n        if (!participant.isVideoMuted()) {\r\n            // If the user is not muted according to the signalling we'll give\r\n            // it some time, before the connection interrupted event is\r\n            // triggered.\r\n            this.clearTimeout(participantId);\r\n\r\n            // The timeout is reduced when user is not in the last N\r\n            const timeout = this._getVideoFrozenTimeout(participantId);\r\n\r\n            this.trackTimers[participantId] = window.setTimeout(() => {\r\n                logger.debug(\r\n                    `Set RTC mute timeout for: ${participantId}\\\r\n                     of ${timeout} ms`);\r\n                this.clearTimeout(participantId);\r\n                this.figureOutConnectionStatus(participantId);\r\n            }, timeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles RTC 'onunmute' event for the video track.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\r\n     * event will be processed.\r\n     */\r\n    onTrackRtcUnmuted(track) {\r\n        const participantId = track.getParticipantId();\r\n\r\n        logger.debug(\r\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\r\n\r\n        this.clearTimeout(participantId);\r\n        this.clearRtcMutedTimestamp(participantId);\r\n\r\n        this.figureOutConnectionStatus(participantId);\r\n    }\r\n\r\n    /**\r\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The remote video track for which\r\n     * the signalling mute/unmute event will be processed.\r\n     */\r\n    onSignallingMuteChanged(track) {\r\n        const participantId = track.getParticipantId();\r\n\r\n        logger.debug(\r\n            `Detector on track signalling mute changed: ${participantId}`,\r\n            track.isMuted());\r\n\r\n        this.figureOutConnectionStatus(participantId);\r\n    }\r\n\r\n    /**\r\n     * Sends a participant connection status event as a result of the video type\r\n     * changing.\r\n     * @param {JitsiRemoteTrack} track - The track.\r\n     * @param {VideoType} type - The video type.\r\n     * @returns {void}\r\n     */\r\n    onTrackVideoTypeChanged(track, type) {\r\n        const id = track.getParticipantId();\r\n        const nowMs = Date.now();\r\n\r\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\r\n\r\n        this.connectionStatusMap[id] = {\r\n            ...this.connectionStatusMap[id] || {},\r\n            videoType: type,\r\n            startedMs: nowMs\r\n        };\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Module provides information about the current status of the internet\r\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\r\n * online/offline, but rather it relies on the information supplied by the app\r\n * that uses it. By default the online state is assumed and the lib acts as if\r\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\r\n */\r\nexport class NetworkInfo extends Listenable {\r\n    /**\r\n     * Creates new {@link NetworkInfo} instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._current = {\r\n            isOnline: true\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Updates the network info state.\r\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\r\n     */\r\n    updateNetworkInfo({ isOnline }) {\r\n        logger.debug('updateNetworkInfo', { isOnline });\r\n        this._current = {\r\n            isOnline: isOnline === true\r\n        };\r\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\r\n    }\r\n\r\n    /**\r\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\r\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\r\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\r\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\r\n     * @returns {boolean}\r\n     */\r\n    isOnline() {\r\n        return this._current.isOnline === true;\r\n    }\r\n}\r\n\r\nconst networkInfo = new NetworkInfo();\r\n\r\nexport default networkInfo;\r\n","/* eslint-env node */\r\n'use strict';\r\n\r\n// SDP helpers.\r\nvar SDPUtils = {};\r\n\r\n// Generate an alphanumeric identifier for cname or mids.\r\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\r\nSDPUtils.generateIdentifier = function() {\r\n  return Math.random().toString(36).substr(2, 10);\r\n};\r\n\r\n// The RTCP CNAME used by all peerconnections from the same JS.\r\nSDPUtils.localCName = SDPUtils.generateIdentifier();\r\n\r\n// Splits SDP into lines, dealing with both CRLF and LF.\r\nSDPUtils.splitLines = function(blob) {\r\n  return blob.trim().split('\\n').map(function(line) {\r\n    return line.trim();\r\n  });\r\n};\r\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\r\nSDPUtils.splitSections = function(blob) {\r\n  var parts = blob.split('\\nm=');\r\n  return parts.map(function(part, index) {\r\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\r\n  });\r\n};\r\n\r\n// returns the session description.\r\nSDPUtils.getDescription = function(blob) {\r\n  var sections = SDPUtils.splitSections(blob);\r\n  return sections && sections[0];\r\n};\r\n\r\n// returns the individual media sections.\r\nSDPUtils.getMediaSections = function(blob) {\r\n  var sections = SDPUtils.splitSections(blob);\r\n  sections.shift();\r\n  return sections;\r\n};\r\n\r\n// Returns lines that start with a certain prefix.\r\nSDPUtils.matchPrefix = function(blob, prefix) {\r\n  return SDPUtils.splitLines(blob).filter(function(line) {\r\n    return line.indexOf(prefix) === 0;\r\n  });\r\n};\r\n\r\n// Parses an ICE candidate line. Sample input:\r\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\r\n// rport 55996\"\r\nSDPUtils.parseCandidate = function(line) {\r\n  var parts;\r\n  // Parse both variants.\r\n  if (line.indexOf('a=candidate:') === 0) {\r\n    parts = line.substring(12).split(' ');\r\n  } else {\r\n    parts = line.substring(10).split(' ');\r\n  }\r\n\r\n  var candidate = {\r\n    foundation: parts[0],\r\n    component: parseInt(parts[1], 10),\r\n    protocol: parts[2].toLowerCase(),\r\n    priority: parseInt(parts[3], 10),\r\n    ip: parts[4],\r\n    address: parts[4], // address is an alias for ip.\r\n    port: parseInt(parts[5], 10),\r\n    // skip parts[6] == 'typ'\r\n    type: parts[7]\r\n  };\r\n\r\n  for (var i = 8; i < parts.length; i += 2) {\r\n    switch (parts[i]) {\r\n      case 'raddr':\r\n        candidate.relatedAddress = parts[i + 1];\r\n        break;\r\n      case 'rport':\r\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\r\n        break;\r\n      case 'tcptype':\r\n        candidate.tcpType = parts[i + 1];\r\n        break;\r\n      case 'ufrag':\r\n        candidate.ufrag = parts[i + 1]; // for backward compability.\r\n        candidate.usernameFragment = parts[i + 1];\r\n        break;\r\n      default: // extension handling, in particular ufrag\r\n        candidate[parts[i]] = parts[i + 1];\r\n        break;\r\n    }\r\n  }\r\n  return candidate;\r\n};\r\n\r\n// Translates a candidate object into SDP candidate attribute.\r\nSDPUtils.writeCandidate = function(candidate) {\r\n  var sdp = [];\r\n  sdp.push(candidate.foundation);\r\n  sdp.push(candidate.component);\r\n  sdp.push(candidate.protocol.toUpperCase());\r\n  sdp.push(candidate.priority);\r\n  sdp.push(candidate.address || candidate.ip);\r\n  sdp.push(candidate.port);\r\n\r\n  var type = candidate.type;\r\n  sdp.push('typ');\r\n  sdp.push(type);\r\n  if (type !== 'host' && candidate.relatedAddress &&\r\n      candidate.relatedPort) {\r\n    sdp.push('raddr');\r\n    sdp.push(candidate.relatedAddress);\r\n    sdp.push('rport');\r\n    sdp.push(candidate.relatedPort);\r\n  }\r\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\r\n    sdp.push('tcptype');\r\n    sdp.push(candidate.tcpType);\r\n  }\r\n  if (candidate.usernameFragment || candidate.ufrag) {\r\n    sdp.push('ufrag');\r\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\r\n  }\r\n  return 'candidate:' + sdp.join(' ');\r\n};\r\n\r\n// Parses an ice-options line, returns an array of option tags.\r\n// a=ice-options:foo bar\r\nSDPUtils.parseIceOptions = function(line) {\r\n  return line.substr(14).split(' ');\r\n};\r\n\r\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\r\n// a=rtpmap:111 opus/48000/2\r\nSDPUtils.parseRtpMap = function(line) {\r\n  var parts = line.substr(9).split(' ');\r\n  var parsed = {\r\n    payloadType: parseInt(parts.shift(), 10) // was: id\r\n  };\r\n\r\n  parts = parts[0].split('/');\r\n\r\n  parsed.name = parts[0];\r\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\r\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\r\n  // legacy alias, got renamed back to channels in ORTC.\r\n  parsed.numChannels = parsed.channels;\r\n  return parsed;\r\n};\r\n\r\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\r\n// RTCRtpCodecParameters.\r\nSDPUtils.writeRtpMap = function(codec) {\r\n  var pt = codec.payloadType;\r\n  if (codec.preferredPayloadType !== undefined) {\r\n    pt = codec.preferredPayloadType;\r\n  }\r\n  var channels = codec.channels || codec.numChannels || 1;\r\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\r\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\r\n};\r\n\r\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\r\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\r\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\r\nSDPUtils.parseExtmap = function(line) {\r\n  var parts = line.substr(9).split(' ');\r\n  return {\r\n    id: parseInt(parts[0], 10),\r\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\r\n    uri: parts[1]\r\n  };\r\n};\r\n\r\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\r\n// RTCRtpHeaderExtension.\r\nSDPUtils.writeExtmap = function(headerExtension) {\r\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\r\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\r\n        ? '/' + headerExtension.direction\r\n        : '') +\r\n      ' ' + headerExtension.uri + '\\r\\n';\r\n};\r\n\r\n// Parses an ftmp line, returns dictionary. Sample input:\r\n// a=fmtp:96 vbr=on;cng=on\r\n// Also deals with vbr=on; cng=on\r\nSDPUtils.parseFmtp = function(line) {\r\n  var parsed = {};\r\n  var kv;\r\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\r\n  for (var j = 0; j < parts.length; j++) {\r\n    kv = parts[j].trim().split('=');\r\n    parsed[kv[0].trim()] = kv[1];\r\n  }\r\n  return parsed;\r\n};\r\n\r\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\r\nSDPUtils.writeFmtp = function(codec) {\r\n  var line = '';\r\n  var pt = codec.payloadType;\r\n  if (codec.preferredPayloadType !== undefined) {\r\n    pt = codec.preferredPayloadType;\r\n  }\r\n  if (codec.parameters && Object.keys(codec.parameters).length) {\r\n    var params = [];\r\n    Object.keys(codec.parameters).forEach(function(param) {\r\n      if (codec.parameters[param]) {\r\n        params.push(param + '=' + codec.parameters[param]);\r\n      } else {\r\n        params.push(param);\r\n      }\r\n    });\r\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\r\n  }\r\n  return line;\r\n};\r\n\r\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\r\n// a=rtcp-fb:98 nack rpsi\r\nSDPUtils.parseRtcpFb = function(line) {\r\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\r\n  return {\r\n    type: parts.shift(),\r\n    parameter: parts.join(' ')\r\n  };\r\n};\r\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\r\nSDPUtils.writeRtcpFb = function(codec) {\r\n  var lines = '';\r\n  var pt = codec.payloadType;\r\n  if (codec.preferredPayloadType !== undefined) {\r\n    pt = codec.preferredPayloadType;\r\n  }\r\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\r\n    // FIXME: special handling for trr-int?\r\n    codec.rtcpFeedback.forEach(function(fb) {\r\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\r\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\r\n          '\\r\\n';\r\n    });\r\n  }\r\n  return lines;\r\n};\r\n\r\n// Parses an RFC 5576 ssrc media attribute. Sample input:\r\n// a=ssrc:3735928559 cname:something\r\nSDPUtils.parseSsrcMedia = function(line) {\r\n  var sp = line.indexOf(' ');\r\n  var parts = {\r\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\r\n  };\r\n  var colon = line.indexOf(':', sp);\r\n  if (colon > -1) {\r\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\r\n    parts.value = line.substr(colon + 1);\r\n  } else {\r\n    parts.attribute = line.substr(sp + 1);\r\n  }\r\n  return parts;\r\n};\r\n\r\nSDPUtils.parseSsrcGroup = function(line) {\r\n  var parts = line.substr(13).split(' ');\r\n  return {\r\n    semantics: parts.shift(),\r\n    ssrcs: parts.map(function(ssrc) {\r\n      return parseInt(ssrc, 10);\r\n    })\r\n  };\r\n};\r\n\r\n// Extracts the MID (RFC 5888) from a media section.\r\n// returns the MID or undefined if no mid line was found.\r\nSDPUtils.getMid = function(mediaSection) {\r\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\r\n  if (mid) {\r\n    return mid.substr(6);\r\n  }\r\n};\r\n\r\nSDPUtils.parseFingerprint = function(line) {\r\n  var parts = line.substr(14).split(' ');\r\n  return {\r\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\r\n    value: parts[1]\r\n  };\r\n};\r\n\r\n// Extracts DTLS parameters from SDP media section or sessionpart.\r\n// FIXME: for consistency with other functions this should only\r\n//   get the fingerprint line as input. See also getIceParameters.\r\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\r\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=fingerprint:');\r\n  // Note: a=setup line is ignored since we use the 'auto' role.\r\n  // Note2: 'algorithm' is not case sensitive except in Edge.\r\n  return {\r\n    role: 'auto',\r\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\r\n  };\r\n};\r\n\r\n// Serializes DTLS parameters to SDP.\r\nSDPUtils.writeDtlsParameters = function(params, setupType) {\r\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\r\n  params.fingerprints.forEach(function(fp) {\r\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\r\n  });\r\n  return sdp;\r\n};\r\n\r\n// Parses a=crypto lines into\r\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\r\nSDPUtils.parseCryptoLine = function(line) {\r\n  var parts = line.substr(9).split(' ');\r\n  return {\r\n    tag: parseInt(parts[0], 10),\r\n    cryptoSuite: parts[1],\r\n    keyParams: parts[2],\r\n    sessionParams: parts.slice(3),\r\n  };\r\n};\r\n\r\nSDPUtils.writeCryptoLine = function(parameters) {\r\n  return 'a=crypto:' + parameters.tag + ' ' +\r\n    parameters.cryptoSuite + ' ' +\r\n    (typeof parameters.keyParams === 'object'\r\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\r\n      : parameters.keyParams) +\r\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\r\n    '\\r\\n';\r\n};\r\n\r\n// Parses the crypto key parameters into\r\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\r\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\r\n  if (keyParams.indexOf('inline:') !== 0) {\r\n    return null;\r\n  }\r\n  var parts = keyParams.substr(7).split('|');\r\n  return {\r\n    keyMethod: 'inline',\r\n    keySalt: parts[0],\r\n    lifeTime: parts[1],\r\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\r\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\r\n  };\r\n};\r\n\r\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\r\n  return keyParams.keyMethod + ':'\r\n    + keyParams.keySalt +\r\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\r\n    (keyParams.mkiValue && keyParams.mkiLength\r\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\r\n      : '');\r\n};\r\n\r\n// Extracts all SDES paramters.\r\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\r\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=crypto:');\r\n  return lines.map(SDPUtils.parseCryptoLine);\r\n};\r\n\r\n// Parses ICE information from SDP media section or sessionpart.\r\n// FIXME: for consistency with other functions this should only\r\n//   get the ice-ufrag and ice-pwd lines as input.\r\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\r\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=ice-ufrag:')[0];\r\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=ice-pwd:')[0];\r\n  if (!(ufrag && pwd)) {\r\n    return null;\r\n  }\r\n  return {\r\n    usernameFragment: ufrag.substr(12),\r\n    password: pwd.substr(10),\r\n  };\r\n};\r\n\r\n// Serializes ICE parameters to SDP.\r\nSDPUtils.writeIceParameters = function(params) {\r\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\r\n      'a=ice-pwd:' + params.password + '\\r\\n';\r\n};\r\n\r\n// Parses the SDP media section and returns RTCRtpParameters.\r\nSDPUtils.parseRtpParameters = function(mediaSection) {\r\n  var description = {\r\n    codecs: [],\r\n    headerExtensions: [],\r\n    fecMechanisms: [],\r\n    rtcp: []\r\n  };\r\n  var lines = SDPUtils.splitLines(mediaSection);\r\n  var mline = lines[0].split(' ');\r\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\r\n    var pt = mline[i];\r\n    var rtpmapline = SDPUtils.matchPrefix(\r\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\r\n    if (rtpmapline) {\r\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\r\n      var fmtps = SDPUtils.matchPrefix(\r\n        mediaSection, 'a=fmtp:' + pt + ' ');\r\n      // Only the first a=fmtp:<pt> is considered.\r\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\r\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\r\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\r\n        .map(SDPUtils.parseRtcpFb);\r\n      description.codecs.push(codec);\r\n      // parse FEC mechanisms from rtpmap lines.\r\n      switch (codec.name.toUpperCase()) {\r\n        case 'RED':\r\n        case 'ULPFEC':\r\n          description.fecMechanisms.push(codec.name.toUpperCase());\r\n          break;\r\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\r\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\r\n  });\r\n  // FIXME: parse rtcp.\r\n  return description;\r\n};\r\n\r\n// Generates parts of the SDP media section describing the capabilities /\r\n// parameters.\r\nSDPUtils.writeRtpDescription = function(kind, caps) {\r\n  var sdp = '';\r\n\r\n  // Build the mline.\r\n  sdp += 'm=' + kind + ' ';\r\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\r\n  sdp += ' UDP/TLS/RTP/SAVPF ';\r\n  sdp += caps.codecs.map(function(codec) {\r\n    if (codec.preferredPayloadType !== undefined) {\r\n      return codec.preferredPayloadType;\r\n    }\r\n    return codec.payloadType;\r\n  }).join(' ') + '\\r\\n';\r\n\r\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\r\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\r\n\r\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\r\n  caps.codecs.forEach(function(codec) {\r\n    sdp += SDPUtils.writeRtpMap(codec);\r\n    sdp += SDPUtils.writeFmtp(codec);\r\n    sdp += SDPUtils.writeRtcpFb(codec);\r\n  });\r\n  var maxptime = 0;\r\n  caps.codecs.forEach(function(codec) {\r\n    if (codec.maxptime > maxptime) {\r\n      maxptime = codec.maxptime;\r\n    }\r\n  });\r\n  if (maxptime > 0) {\r\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\r\n  }\r\n  sdp += 'a=rtcp-mux\\r\\n';\r\n\r\n  if (caps.headerExtensions) {\r\n    caps.headerExtensions.forEach(function(extension) {\r\n      sdp += SDPUtils.writeExtmap(extension);\r\n    });\r\n  }\r\n  // FIXME: write fecMechanisms.\r\n  return sdp;\r\n};\r\n\r\n// Parses the SDP media section and returns an array of\r\n// RTCRtpEncodingParameters.\r\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\r\n  var encodingParameters = [];\r\n  var description = SDPUtils.parseRtpParameters(mediaSection);\r\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\r\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\r\n\r\n  // filter a=ssrc:... cname:, ignore PlanB-msid\r\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\r\n    .map(function(line) {\r\n      return SDPUtils.parseSsrcMedia(line);\r\n    })\r\n    .filter(function(parts) {\r\n      return parts.attribute === 'cname';\r\n    });\r\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\r\n  var secondarySsrc;\r\n\r\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\r\n    .map(function(line) {\r\n      var parts = line.substr(17).split(' ');\r\n      return parts.map(function(part) {\r\n        return parseInt(part, 10);\r\n      });\r\n    });\r\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\r\n    secondarySsrc = flows[0][1];\r\n  }\r\n\r\n  description.codecs.forEach(function(codec) {\r\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\r\n      var encParam = {\r\n        ssrc: primarySsrc,\r\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\r\n      };\r\n      if (primarySsrc && secondarySsrc) {\r\n        encParam.rtx = {ssrc: secondarySsrc};\r\n      }\r\n      encodingParameters.push(encParam);\r\n      if (hasRed) {\r\n        encParam = JSON.parse(JSON.stringify(encParam));\r\n        encParam.fec = {\r\n          ssrc: primarySsrc,\r\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\r\n        };\r\n        encodingParameters.push(encParam);\r\n      }\r\n    }\r\n  });\r\n  if (encodingParameters.length === 0 && primarySsrc) {\r\n    encodingParameters.push({\r\n      ssrc: primarySsrc\r\n    });\r\n  }\r\n\r\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\r\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\r\n  if (bandwidth.length) {\r\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\r\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\r\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\r\n      // use formula from JSEP to convert b=AS to TIAS value.\r\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\r\n          - (50 * 40 * 8);\r\n    } else {\r\n      bandwidth = undefined;\r\n    }\r\n    encodingParameters.forEach(function(params) {\r\n      params.maxBitrate = bandwidth;\r\n    });\r\n  }\r\n  return encodingParameters;\r\n};\r\n\r\n// parses http://draft.ortc.org/#rtcrtcpparameters*\r\nSDPUtils.parseRtcpParameters = function(mediaSection) {\r\n  var rtcpParameters = {};\r\n\r\n  // Gets the first SSRC. Note tha with RTX there might be multiple\r\n  // SSRCs.\r\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\r\n    .map(function(line) {\r\n      return SDPUtils.parseSsrcMedia(line);\r\n    })\r\n    .filter(function(obj) {\r\n      return obj.attribute === 'cname';\r\n    })[0];\r\n  if (remoteSsrc) {\r\n    rtcpParameters.cname = remoteSsrc.value;\r\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\r\n  }\r\n\r\n  // Edge uses the compound attribute instead of reducedSize\r\n  // compound is !reducedSize\r\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\r\n  rtcpParameters.reducedSize = rsize.length > 0;\r\n  rtcpParameters.compound = rsize.length === 0;\r\n\r\n  // parses the rtcp-mux attrіbute.\r\n  // Note that Edge does not support unmuxed RTCP.\r\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\r\n  rtcpParameters.mux = mux.length > 0;\r\n\r\n  return rtcpParameters;\r\n};\r\n\r\n// parses either a=msid: or a=ssrc:... msid lines and returns\r\n// the id of the MediaStream and MediaStreamTrack.\r\nSDPUtils.parseMsid = function(mediaSection) {\r\n  var parts;\r\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\r\n  if (spec.length === 1) {\r\n    parts = spec[0].substr(7).split(' ');\r\n    return {stream: parts[0], track: parts[1]};\r\n  }\r\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\r\n    .map(function(line) {\r\n      return SDPUtils.parseSsrcMedia(line);\r\n    })\r\n    .filter(function(msidParts) {\r\n      return msidParts.attribute === 'msid';\r\n    });\r\n  if (planB.length > 0) {\r\n    parts = planB[0].value.split(' ');\r\n    return {stream: parts[0], track: parts[1]};\r\n  }\r\n};\r\n\r\n// SCTP\r\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\r\n// to draft-ietf-mmusic-sctp-sdp-05\r\nSDPUtils.parseSctpDescription = function(mediaSection) {\r\n  var mline = SDPUtils.parseMLine(mediaSection);\r\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\r\n  var maxMessageSize;\r\n  if (maxSizeLine.length > 0) {\r\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\r\n  }\r\n  if (isNaN(maxMessageSize)) {\r\n    maxMessageSize = 65536;\r\n  }\r\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\r\n  if (sctpPort.length > 0) {\r\n    return {\r\n      port: parseInt(sctpPort[0].substr(12), 10),\r\n      protocol: mline.fmt,\r\n      maxMessageSize: maxMessageSize\r\n    };\r\n  }\r\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\r\n  if (sctpMapLines.length > 0) {\r\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]\r\n      .substr(10)\r\n      .split(' ');\r\n    return {\r\n      port: parseInt(parts[0], 10),\r\n      protocol: parts[1],\r\n      maxMessageSize: maxMessageSize\r\n    };\r\n  }\r\n};\r\n\r\n// SCTP\r\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\r\n// support by now receiving in this format, unless we originally parsed\r\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\r\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\r\nSDPUtils.writeSctpDescription = function(media, sctp) {\r\n  var output = [];\r\n  if (media.protocol !== 'DTLS/SCTP') {\r\n    output = [\r\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\r\n      'c=IN IP4 0.0.0.0\\r\\n',\r\n      'a=sctp-port:' + sctp.port + '\\r\\n'\r\n    ];\r\n  } else {\r\n    output = [\r\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\r\n      'c=IN IP4 0.0.0.0\\r\\n',\r\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'\r\n    ];\r\n  }\r\n  if (sctp.maxMessageSize !== undefined) {\r\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\r\n  }\r\n  return output.join('');\r\n};\r\n\r\n// Generate a session ID for SDP.\r\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\r\n// recommends using a cryptographically random +ve 64-bit value\r\n// but right now this should be acceptable and within the right range\r\nSDPUtils.generateSessionId = function() {\r\n  return Math.random().toString().substr(2, 21);\r\n};\r\n\r\n// Write boilder plate for start of SDP\r\n// sessId argument is optional - if not supplied it will\r\n// be generated randomly\r\n// sessVersion is optional and defaults to 2\r\n// sessUser is optional and defaults to 'thisisadapterortc'\r\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\r\n  var sessionId;\r\n  var version = sessVer !== undefined ? sessVer : 2;\r\n  if (sessId) {\r\n    sessionId = sessId;\r\n  } else {\r\n    sessionId = SDPUtils.generateSessionId();\r\n  }\r\n  var user = sessUser || 'thisisadapterortc';\r\n  // FIXME: sess-id should be an NTP timestamp.\r\n  return 'v=0\\r\\n' +\r\n      'o=' + user + ' ' + sessionId + ' ' + version +\r\n        ' IN IP4 127.0.0.1\\r\\n' +\r\n      's=-\\r\\n' +\r\n      't=0 0\\r\\n';\r\n};\r\n\r\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\r\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\r\n\r\n  // Map ICE parameters (ufrag, pwd) to SDP.\r\n  sdp += SDPUtils.writeIceParameters(\r\n    transceiver.iceGatherer.getLocalParameters());\r\n\r\n  // Map DTLS parameters to SDP.\r\n  sdp += SDPUtils.writeDtlsParameters(\r\n    transceiver.dtlsTransport.getLocalParameters(),\r\n    type === 'offer' ? 'actpass' : 'active');\r\n\r\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\r\n\r\n  if (transceiver.direction) {\r\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\r\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\r\n    sdp += 'a=sendrecv\\r\\n';\r\n  } else if (transceiver.rtpSender) {\r\n    sdp += 'a=sendonly\\r\\n';\r\n  } else if (transceiver.rtpReceiver) {\r\n    sdp += 'a=recvonly\\r\\n';\r\n  } else {\r\n    sdp += 'a=inactive\\r\\n';\r\n  }\r\n\r\n  if (transceiver.rtpSender) {\r\n    // spec.\r\n    var msid = 'msid:' + stream.id + ' ' +\r\n        transceiver.rtpSender.track.id + '\\r\\n';\r\n    sdp += 'a=' + msid;\r\n\r\n    // for Chrome.\r\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\r\n        ' ' + msid;\r\n    if (transceiver.sendEncodingParameters[0].rtx) {\r\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n          ' ' + msid;\r\n      sdp += 'a=ssrc-group:FID ' +\r\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\r\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n          '\\r\\n';\r\n    }\r\n  }\r\n  // FIXME: this should be written by writeRtpDescription.\r\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\r\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\r\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\r\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\r\n  }\r\n  return sdp;\r\n};\r\n\r\n// Gets the direction from the mediaSection or the sessionpart.\r\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\r\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\r\n  var lines = SDPUtils.splitLines(mediaSection);\r\n  for (var i = 0; i < lines.length; i++) {\r\n    switch (lines[i]) {\r\n      case 'a=sendrecv':\r\n      case 'a=sendonly':\r\n      case 'a=recvonly':\r\n      case 'a=inactive':\r\n        return lines[i].substr(2);\r\n      default:\r\n        // FIXME: What should happen here?\r\n    }\r\n  }\r\n  if (sessionpart) {\r\n    return SDPUtils.getDirection(sessionpart);\r\n  }\r\n  return 'sendrecv';\r\n};\r\n\r\nSDPUtils.getKind = function(mediaSection) {\r\n  var lines = SDPUtils.splitLines(mediaSection);\r\n  var mline = lines[0].split(' ');\r\n  return mline[0].substr(2);\r\n};\r\n\r\nSDPUtils.isRejected = function(mediaSection) {\r\n  return mediaSection.split(' ', 2)[1] === '0';\r\n};\r\n\r\nSDPUtils.parseMLine = function(mediaSection) {\r\n  var lines = SDPUtils.splitLines(mediaSection);\r\n  var parts = lines[0].substr(2).split(' ');\r\n  return {\r\n    kind: parts[0],\r\n    port: parseInt(parts[1], 10),\r\n    protocol: parts[2],\r\n    fmt: parts.slice(3).join(' ')\r\n  };\r\n};\r\n\r\nSDPUtils.parseOLine = function(mediaSection) {\r\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\r\n  var parts = line.substr(2).split(' ');\r\n  return {\r\n    username: parts[0],\r\n    sessionId: parts[1],\r\n    sessionVersion: parseInt(parts[2], 10),\r\n    netType: parts[3],\r\n    addressType: parts[4],\r\n    address: parts[5]\r\n  };\r\n};\r\n\r\n// a very naive interpretation of a valid SDP.\r\nSDPUtils.isValidSDP = function(blob) {\r\n  if (typeof blob !== 'string' || blob.length === 0) {\r\n    return false;\r\n  }\r\n  var lines = SDPUtils.splitLines(blob);\r\n  for (var i = 0; i < lines.length; i++) {\r\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\r\n      return false;\r\n    }\r\n    // TODO: check the modifier a bit more.\r\n  }\r\n  return true;\r\n};\r\n\r\n// Expose public methods.\r\nif (typeof module === 'object') {\r\n  module.exports = SDPUtils;\r\n}\r\n","/**\r\n * A collection of utility functions for taking in XML and parsing it to return\r\n * certain values.\r\n */\r\nexport default {\r\n    /**\r\n     * Parses the presence update of the focus and returns an object with the\r\n     * statuses related to recording.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {Object} The current presence values related to recording.\r\n     */\r\n    getFocusRecordingUpdate(presence) {\r\n        const jibriStatus = presence\r\n            && presence.getElementsByTagName('jibri-recording-status')[0];\r\n\r\n        if (!jibriStatus) {\r\n            return;\r\n        }\r\n\r\n        return {\r\n            error: jibriStatus.getAttribute('failure_reason'),\r\n            initiator: jibriStatus.getAttribute('initiator'),\r\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\r\n            sessionID: jibriStatus.getAttribute('session_id'),\r\n            status: jibriStatus.getAttribute('status')\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Parses the presence update from a hidden domain participant and returns\r\n     * an object with the statuses related to recording.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {Object} The current presence values related to recording.\r\n     */\r\n    getHiddenDomainUpdate(presence) {\r\n        const liveStreamViewURLContainer\r\n            = presence.getElementsByTagName('live-stream-view-url')[0];\r\n        const liveStreamViewURL = liveStreamViewURLContainer\r\n            && liveStreamViewURLContainer.textContent;\r\n        const modeContainer\r\n            = presence.getElementsByTagName('mode')[0];\r\n        const mode = modeContainer\r\n            && modeContainer.textContent\r\n            && modeContainer.textContent.toLowerCase();\r\n        const sessionIDContainer\r\n            = presence.getElementsByTagName('session_id')[0];\r\n        const sessionID\r\n            = sessionIDContainer && sessionIDContainer.textContent;\r\n\r\n        return {\r\n            liveStreamViewURL,\r\n            mode,\r\n            sessionID\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Returns the recording session ID from a successful IQ.\r\n     *\r\n     * @param {Node} response - The response from the IQ.\r\n     * @returns {string} The session ID of the recording session.\r\n     */\r\n    getSessionIdFromIq(response) {\r\n        const jibri = response && response.getElementsByTagName('jibri')[0];\r\n\r\n        return jibri && jibri.getAttribute('session_id');\r\n    },\r\n\r\n    /**\r\n     * Returns the recording session ID from a presence, if it exists.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {string|undefined} The session ID of the recording session.\r\n     */\r\n    getSessionId(presence) {\r\n        const sessionIdContainer\r\n            = presence.getElementsByTagName('session_id')[0];\r\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\r\n\r\n        return sessionId;\r\n    },\r\n\r\n    /**\r\n     * Returns whether or not a presence is from the focus.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {boolean} True if the presence is from the focus.\r\n     */\r\n    isFromFocus(presence) {\r\n        return presence.getAttribute('from').includes('focus');\r\n    }\r\n};\r\n","/* global __filename, Olm */\r\n\r\nimport base64js from 'base64-js';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport Deferred from '../util/Deferred';\r\nimport Listenable from '../util/Listenable';\r\nimport { JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nconst REQ_TIMEOUT = 5 * 1000;\r\nconst OLM_MESSAGE_TYPE = 'olm';\r\nconst OLM_MESSAGE_TYPES = {\r\n    ERROR: 'error',\r\n    KEY_INFO: 'key-info',\r\n    KEY_INFO_ACK: 'key-info-ack',\r\n    SESSION_ACK: 'session-ack',\r\n    SESSION_INIT: 'session-init'\r\n};\r\n\r\nconst kOlmData = Symbol('OlmData');\r\n\r\nconst OlmAdapterEvents = {\r\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\r\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\r\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\r\n};\r\n\r\n/**\r\n * This class implements an End-to-End Encrypted communication channel between every two peers\r\n * in the conference. This channel uses libolm to achieve E2EE.\r\n *\r\n * The created channel is then used to exchange the secret key that each participant will use\r\n * to encrypt the actual media (see {@link E2EEContext}).\r\n *\r\n * A simple JSON message based protocol is implemented, which follows a request - response model:\r\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\r\n *                 by the participant who just joined, to everyone else.\r\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\r\n *                encrypted data, more specifically the sender's current key.\r\n * - key-info: Includes the sender's most up to date key information.\r\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\r\n *                 the sender's key information, if available.\r\n * - error: Indicates a request processing error has occurred.\r\n *\r\n * These requessts and responses are transport independent. Currently they are sent using XMPP\r\n * MUC private messages.\r\n */\r\nexport class OlmAdapter extends Listenable {\r\n    /**\r\n     * Creates an adapter instance for the given conference.\r\n     */\r\n    constructor(conference) {\r\n        super();\r\n\r\n        this._conf = conference;\r\n        this._init = new Deferred();\r\n        this._key = undefined;\r\n        this._keyIndex = -1;\r\n        this._reqs = new Map();\r\n\r\n        if (OlmAdapter.isSupported()) {\r\n            this._bootstrapOlm();\r\n\r\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\r\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_JOINED, this._onConferenceJoined.bind(this));\r\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\r\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\r\n        } else {\r\n            this._init.reject(new Error('Olm not supported'));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates if olm is supported on the current platform.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    static isSupported() {\r\n        return typeof window.Olm !== 'undefined';\r\n    }\r\n\r\n    /**\r\n     * Updates the current participant key and distributes it to all participants in the conference\r\n     * by sending a key-info message.\r\n     *\r\n     * @param {Uint8Array|boolean} key - The new key.\r\n     * @returns {number}\r\n     */\r\n    async updateCurrentKey(key) {\r\n        this._key = key;\r\n\r\n        return this._keyIndex;\r\n    }\r\n\r\n    /**\r\n     * Updates the current participant key and distributes it to all participants in the conference\r\n     * by sending a key-info message.\r\n     *\r\n     * @param {Uint8Array|boolean} key - The new key.\r\n     * @retrns {Promise<Number>}\r\n     */\r\n    async updateKey(key) {\r\n        // Store it locally for new sessions.\r\n        this._key = key;\r\n        this._keyIndex++;\r\n\r\n        // Broadcast it.\r\n        const promises = [];\r\n\r\n        for (const participant of this._conf.getParticipants()) {\r\n            const pId = participant.getId();\r\n            const olmData = this._getParticipantOlmData(participant);\r\n\r\n            // TODO: skip those who don't support E2EE.\r\n\r\n            if (!olmData.session) {\r\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\r\n\r\n                // eslint-disable-next-line no-continue\r\n                continue;\r\n            }\r\n\r\n            const uuid = uuidv4();\r\n            const data = {\r\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                olm: {\r\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\r\n                    data: {\r\n                        ciphertext: this._encryptKeyInfo(olmData.session),\r\n                        uuid\r\n                    }\r\n                }\r\n            };\r\n            const d = new Deferred();\r\n\r\n            d.setRejectTimeout(REQ_TIMEOUT);\r\n            d.catch(() => {\r\n                this._reqs.delete(uuid);\r\n            });\r\n            this._reqs.set(uuid, d);\r\n            promises.push(d);\r\n\r\n            this._sendMessage(data, pId);\r\n        }\r\n\r\n        await Promise.allSettled(promises);\r\n\r\n        // TODO: retry failed ones?\r\n\r\n        return this._keyIndex;\r\n    }\r\n\r\n    /**\r\n     * Internal helper to bootstrap the olm library.\r\n     *\r\n     * @returns {Promise<void>}\r\n     * @private\r\n     */\r\n    async _bootstrapOlm() {\r\n        logger.debug('Initializing Olm...');\r\n\r\n        try {\r\n            await Olm.init();\r\n\r\n            this._olmAccount = new Olm.Account();\r\n            this._olmAccount.create();\r\n\r\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\r\n\r\n            this._idKey = idKeys.curve25519;\r\n\r\n            logger.debug('Olm initialized!');\r\n            this._init.resolve();\r\n            this.eventEmitter.emit(OlmAdapterEvents.OLM_ID_KEY_READY, this._idKey);\r\n        } catch (e) {\r\n            logger.error('Failed to initialize Olm', e);\r\n            this._init.reject(e);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Internal helper for encrypting the current key information for a given participant.\r\n     *\r\n     * @param {Olm.Session} session - Participant's session.\r\n     * @returns {string} - The encrypted text with the key information.\r\n     * @private\r\n     */\r\n    _encryptKeyInfo(session) {\r\n        const keyInfo = {};\r\n\r\n        if (this._key !== undefined) {\r\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\r\n            keyInfo.keyIndex = this._keyIndex;\r\n        }\r\n\r\n        return session.encrypt(JSON.stringify(keyInfo));\r\n    }\r\n\r\n    /**\r\n     * Internal helper for getting the olm related data associated with a participant.\r\n     *\r\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\r\n     * @returns {Object}\r\n     * @private\r\n     */\r\n    _getParticipantOlmData(participant) {\r\n        participant[kOlmData] = participant[kOlmData] || {};\r\n\r\n        return participant[kOlmData];\r\n    }\r\n\r\n    /**\r\n     * Handles the conference joined event. Upon joining a conference, the participant\r\n     * who just joined will start new olm sessions with every other participant.\r\n     *\r\n     * @private\r\n     */\r\n    async _onConferenceJoined() {\r\n        logger.debug('Conference joined');\r\n\r\n        await this._init;\r\n\r\n        const promises = [];\r\n\r\n        // Establish a 1-to-1 Olm session with every participant in the conference.\r\n        // We are forcing the last user to join the conference to start the exchange\r\n        // so we can send some pre-established secrets in the ACK.\r\n        for (const participant of this._conf.getParticipants()) {\r\n            promises.push(this._sendSessionInit(participant));\r\n        }\r\n\r\n        await Promise.allSettled(promises);\r\n\r\n        // TODO: retry failed ones.\r\n        // TODO: skip participants which don't support E2EE.\r\n    }\r\n\r\n    /**\r\n     * Handles leaving the conference, cleaning up olm sessions.\r\n     *\r\n     * @private\r\n     */\r\n    async _onConferenceLeft() {\r\n        logger.debug('Conference left');\r\n\r\n        await this._init;\r\n\r\n        for (const participant of this._conf.getParticipants()) {\r\n            this._onParticipantLeft(participant.getId(), participant);\r\n        }\r\n\r\n        if (this._olmAccount) {\r\n            this._olmAccount.free();\r\n            this._olmAccount = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Main message handler. Handles 1-to-1 messages received from other participants\r\n     * and send the appropriate replies.\r\n     *\r\n     * @private\r\n     */\r\n    async _onEndpointMessageReceived(participant, payload) {\r\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\r\n            return;\r\n        }\r\n\r\n        if (!payload.olm) {\r\n            logger.warn('Incorrectly formatted message');\r\n\r\n            return;\r\n        }\r\n\r\n        await this._init;\r\n\r\n        const msg = payload.olm;\r\n        const pId = participant.getId();\r\n        const olmData = this._getParticipantOlmData(participant);\r\n\r\n        switch (msg.type) {\r\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\r\n            if (olmData.session) {\r\n                logger.warn(`Participant ${pId} already has a session`);\r\n\r\n                this._sendError(participant, 'Session already established');\r\n            } else {\r\n                // Create a session for communicating with this participant.\r\n\r\n                const session = new Olm.Session();\r\n\r\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\r\n                olmData.session = session;\r\n\r\n                // Send ACK\r\n                const ack = {\r\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                    olm: {\r\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\r\n                        data: {\r\n                            ciphertext: this._encryptKeyInfo(session),\r\n                            uuid: msg.data.uuid\r\n                        }\r\n                    }\r\n                };\r\n\r\n                this._sendMessage(ack, pId);\r\n\r\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\r\n            }\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\r\n            if (olmData.session) {\r\n                logger.warn(`Participant ${pId} already has a session`);\r\n\r\n                this._sendError(participant, 'No session found');\r\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\r\n                const { ciphertext } = msg.data;\r\n                const d = this._reqs.get(msg.data.uuid);\r\n                const session = new Olm.Session();\r\n\r\n                session.create_inbound(this._olmAccount, ciphertext.body);\r\n\r\n                // Remove OT keys that have been used to setup this session.\r\n                this._olmAccount.remove_one_time_keys(session);\r\n\r\n                // Decrypt first message.\r\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\r\n\r\n                olmData.session = session;\r\n                olmData.pendingSessionUuid = undefined;\r\n\r\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\r\n\r\n                this._reqs.delete(msg.data.uuid);\r\n                d.resolve();\r\n\r\n                const json = safeJsonParse(data);\r\n\r\n                if (json.key) {\r\n                    const key = base64js.toByteArray(json.key);\r\n                    const keyIndex = json.keyIndex;\r\n\r\n                    olmData.lastKey = key;\r\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\r\n                }\r\n            } else {\r\n                logger.warn('Received ACK with the wrong UUID');\r\n\r\n                this._sendError(participant, 'Invalid UUID');\r\n            }\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.ERROR: {\r\n            logger.error(msg.data.error);\r\n\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\r\n            if (olmData.session) {\r\n                const { ciphertext } = msg.data;\r\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\r\n                const json = safeJsonParse(data);\r\n\r\n                if (json.key !== undefined && json.keyIndex !== undefined) {\r\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\r\n                    const keyIndex = json.keyIndex;\r\n\r\n                    if (!isEqual(olmData.lastKey, key)) {\r\n                        olmData.lastKey = key;\r\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\r\n                    }\r\n\r\n                    // Send ACK.\r\n                    const ack = {\r\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                        olm: {\r\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\r\n                            data: {\r\n                                ciphertext: this._encryptKeyInfo(olmData.session),\r\n                                uuid: msg.data.uuid\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    this._sendMessage(ack, pId);\r\n                }\r\n            } else {\r\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\r\n\r\n                this._sendError(participant, 'No session found while processing key-info');\r\n            }\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\r\n            if (olmData.session) {\r\n                const { ciphertext } = msg.data;\r\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\r\n                const json = safeJsonParse(data);\r\n\r\n                if (json.key !== undefined && json.keyIndex !== undefined) {\r\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\r\n                    const keyIndex = json.keyIndex;\r\n\r\n                    if (!isEqual(olmData.lastKey, key)) {\r\n                        olmData.lastKey = key;\r\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\r\n                    }\r\n                }\r\n\r\n                const d = this._reqs.get(msg.data.uuid);\r\n\r\n                this._reqs.delete(msg.data.uuid);\r\n                d.resolve();\r\n            } else {\r\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\r\n\r\n                this._sendError(participant, 'No session found while processing key-info-ack');\r\n            }\r\n            break;\r\n        }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\r\n     *\r\n     * @private\r\n     */\r\n    _onParticipantLeft(id, participant) {\r\n        logger.debug(`Participant ${id} left`);\r\n\r\n        const olmData = this._getParticipantOlmData(participant);\r\n\r\n        if (olmData.session) {\r\n            olmData.session.free();\r\n            olmData.session = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds and sends an error message to the target participant.\r\n     *\r\n     * @param {JitsiParticipant} participant - The target participant.\r\n     * @param {string} error - The error message.\r\n     * @returns {void}\r\n     */\r\n    _sendError(participant, error) {\r\n        const pId = participant.getId();\r\n        const err = {\r\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n            olm: {\r\n                type: OLM_MESSAGE_TYPES.ERROR,\r\n                data: {\r\n                    error\r\n                }\r\n            }\r\n        };\r\n\r\n        this._sendMessage(err, pId);\r\n    }\r\n\r\n    /**\r\n     * Internal helper to send the given object to the given participant ID.\r\n     * This function merely exists so the transport can be easily swapped.\r\n     * Currently messages are transmitted via XMPP MUC private messages.\r\n     *\r\n     * @param {object} data - The data that will be sent to the target participant.\r\n     * @param {string} participantId - ID of the target participant.\r\n     */\r\n    _sendMessage(data, participantId) {\r\n        this._conf.sendMessage(data, participantId);\r\n    }\r\n\r\n    /**\r\n     * Builds and sends the session-init request to the target participant.\r\n     *\r\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\r\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\r\n     * @private\r\n     */\r\n    _sendSessionInit(participant) {\r\n        const pId = participant.getId();\r\n        const olmData = this._getParticipantOlmData(participant);\r\n\r\n        if (olmData.session) {\r\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\r\n\r\n            return Promise.reject();\r\n        }\r\n\r\n        if (olmData.pendingSessionUuid !== undefined) {\r\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\r\n\r\n            return Promise.reject();\r\n        }\r\n\r\n        // Generate a One Time Key.\r\n        this._olmAccount.generate_one_time_keys(1);\r\n\r\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\r\n        const otKey = Object.values(otKeys.curve25519)[0];\r\n\r\n        if (!otKey) {\r\n            return Promise.reject(new Error('No one-time-keys generated'));\r\n        }\r\n\r\n        // Mark the OT keys (one really) as published so they are not reused.\r\n        this._olmAccount.mark_keys_as_published();\r\n\r\n        const uuid = uuidv4();\r\n        const init = {\r\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n            olm: {\r\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\r\n                data: {\r\n                    idKey: this._idKey,\r\n                    otKey,\r\n                    uuid\r\n                }\r\n            }\r\n        };\r\n\r\n        const d = new Deferred();\r\n\r\n        d.setRejectTimeout(REQ_TIMEOUT);\r\n        d.catch(() => {\r\n            this._reqs.delete(uuid);\r\n            olmData.pendingSessionUuid = undefined;\r\n        });\r\n        this._reqs.set(uuid, d);\r\n\r\n        this._sendMessage(init, pId);\r\n\r\n        // Store the UUID for matching with the ACK.\r\n        olmData.pendingSessionUuid = uuid;\r\n\r\n        return d;\r\n    }\r\n}\r\n\r\nOlmAdapter.events = OlmAdapterEvents;\r\n\r\n/**\r\n * Helper to ensure JSON parsing always returns an object.\r\n *\r\n * @param {string} data - The data that needs to be parsed.\r\n * @returns {object} - Parsed data or empty object in case of failure.\r\n */\r\nfunction safeJsonParse(data) {\r\n    try {\r\n        return JSON.parse(data);\r\n    } catch (e) {\r\n        return {};\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport debounce from 'lodash.debounce';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport browser from '../browser';\r\n\r\nimport E2EEContext from './E2EEContext';\r\nimport { OlmAdapter } from './OlmAdapter';\r\nimport { importKey, ratchet } from './crypto-utils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Period which we'll wait before updating / rotating our keys when a participant\r\n// joins or leaves.\r\nconst DEBOUNCE_PERIOD = 5000;\r\n\r\n/**\r\n * This module integrates {@link E2EEContext} with {@link JitsiConference} in order to enable E2E encryption.\r\n */\r\nexport class E2EEncryption {\r\n    /**\r\n     * A constructor.\r\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\r\n     */\r\n    constructor(conference) {\r\n        this.conference = conference;\r\n\r\n        this._conferenceJoined = false;\r\n        this._enabled = false;\r\n        this._initialized = false;\r\n        this._key = undefined;\r\n\r\n        this._e2eeCtx = new E2EEContext();\r\n        this._olmAdapter = new OlmAdapter(conference);\r\n\r\n        // Debounce key rotation / ratcheting to avoid a storm of messages.\r\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\r\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\r\n\r\n        // Participant join / leave operations. Used for key advancement / rotation.\r\n        //\r\n\r\n        this.conference.on(\r\n            JitsiConferenceEvents.CONFERENCE_JOINED,\r\n            () => {\r\n                this._conferenceJoined = true;\r\n            });\r\n        this.conference.on(\r\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\r\n            this._onParticipantPropertyChanged.bind(this));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this._onParticipantJoined.bind(this));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this._onParticipantLeft.bind(this));\r\n\r\n        // Conference media events in order to attach the encryptor / decryptor.\r\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\r\n        // added instead of shenanigans around conference track events and track muted.\r\n        //\r\n\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n            this._onMediaSessionStarted.bind(this));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.TRACK_ADDED,\r\n            track => track.isLocal() && this._onLocalTrackAdded(track));\r\n        this.conference.rtc.on(\r\n            RTCEvents.REMOTE_TRACK_ADDED,\r\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\r\n            this._trackMuteChanged.bind(this));\r\n\r\n        // Olm signalling events.\r\n        this._olmAdapter.on(\r\n            OlmAdapter.events.OLM_ID_KEY_READY,\r\n            this._onOlmIdKeyReady.bind(this));\r\n        this._olmAdapter.on(\r\n            OlmAdapter.events.PARTICIPANT_E2EE_CHANNEL_READY,\r\n            this._onParticipantE2EEChannelReady.bind(this));\r\n        this._olmAdapter.on(\r\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\r\n            this._onParticipantKeyUpdated.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Indicates if E2EE is supported in the current platform.\r\n     *\r\n     * @param {object} config - Global configuration.\r\n     * @returns {boolean}\r\n     */\r\n    static isSupported(config) {\r\n        return browser.supportsInsertableStreams()\r\n            && OlmAdapter.isSupported()\r\n            && !(config.testing && config.testing.disableE2EE);\r\n    }\r\n\r\n    /**\r\n     * Indicates whether E2EE is currently enabled or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isEnabled() {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * Enables / disables End-To-End encryption.\r\n     *\r\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\r\n     * @returns {void}\r\n     */\r\n    setEnabled(enabled) {\r\n        if (enabled === this._enabled) {\r\n            return;\r\n        }\r\n\r\n        this._enabled = enabled;\r\n\r\n        if (!this._initialized && enabled) {\r\n            // Need to re-create the peerconnections in order to apply the insertable streams constraint.\r\n            // TODO: this was necessary due to some audio issues when indertable streams are used\r\n            // even though encryption is not performed. This should be fixed in the browser eventually.\r\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1103280\r\n            this.conference._restartMediaSessions();\r\n\r\n            this._initialized = true;\r\n        }\r\n\r\n        // Generate a random key in case we are enabling.\r\n        this._key = enabled ? this._generateKey() : false;\r\n\r\n        // Send it to others using the E2EE olm channel.\r\n        this._olmAdapter.updateKey(this._key).then(index => {\r\n            // Set our key so we begin encrypting.\r\n            this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates a new 256 bit random key.\r\n     *\r\n     * @returns {Uint8Array}\r\n     * @private\r\n     */\r\n    _generateKey() {\r\n        return window.crypto.getRandomValues(new Uint8Array(32));\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\r\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\r\n     * @private\r\n     */\r\n    _onLocalTrackAdded(track) {\r\n        for (const session of this.conference._getMediaSessions()) {\r\n            this._setupSenderE2EEForTrack(session, track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setups E2E encryption for the new session.\r\n     * @param {JingleSessionPC} session - the new media session.\r\n     * @private\r\n     */\r\n    _onMediaSessionStarted(session) {\r\n        const localTracks = this.conference.getLocalTracks();\r\n\r\n        for (const track of localTracks) {\r\n            this._setupSenderE2EEForTrack(session, track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Publushes our own Olmn id key in presence.\r\n     * @private\r\n     */\r\n    _onOlmIdKeyReady(idKey) {\r\n        logger.debug(`Olm id key ready: ${idKey}`);\r\n\r\n        // Publish it in presence.\r\n        this.conference.setLocalParticipantProperty('e2ee.idKey', idKey);\r\n    }\r\n\r\n    /**\r\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\r\n     * @private\r\n     */\r\n    _onParticipantJoined(id) {\r\n        logger.debug(`Participant ${id} joined`);\r\n\r\n        if (this._conferenceJoined && this._enabled) {\r\n            this._ratchetKey();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rotates the current key when a participant leaves the conference.\r\n     * @private\r\n     */\r\n    _onParticipantLeft(id) {\r\n        logger.debug(`Participant ${id} left`);\r\n\r\n        this._e2eeCtx.cleanup(id);\r\n\r\n        if (this._enabled) {\r\n            this._rotateKey();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event posted when the E2EE signalling channel has been established with the given participant.\r\n     * @private\r\n     */\r\n    _onParticipantE2EEChannelReady(id) {\r\n        logger.debug(`E2EE channel with participant ${id} is ready`);\r\n    }\r\n\r\n    /**\r\n     * Handles an update in a participant's key.\r\n     *\r\n     * @param {string} id - The participant ID.\r\n     * @param {Uint8Array | boolean} key - The new key for the participant.\r\n     * @param {Number} index - The new key's index.\r\n     * @private\r\n     */\r\n    _onParticipantKeyUpdated(id, key, index) {\r\n        logger.debug(`Participant ${id} updated their key`);\r\n\r\n        this._e2eeCtx.setKey(id, key, index);\r\n    }\r\n\r\n    /**\r\n     * Handles an update in a participant's presence property.\r\n     *\r\n     * @param {JitsiParticipant} participant - The participant.\r\n     * @param {string} name - The name of the property that changed.\r\n     * @param {*} oldValue - The property's previous value.\r\n     * @param {*} newValue - The property's new value.\r\n     * @private\r\n     */\r\n    _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\r\n        switch (name) {\r\n        case 'e2ee.idKey':\r\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Advances the current key by using ratcheting.\r\n     *\r\n     * @private\r\n     */\r\n    async _ratchetKeyImpl() {\r\n        logger.debug('Ratchetting key');\r\n\r\n        const material = await importKey(this._key);\r\n        const newKey = await ratchet(material);\r\n\r\n        this._key = new Uint8Array(newKey);\r\n\r\n        const index = await this._olmAdapter.updateCurrentKey(this._key);\r\n\r\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\r\n    }\r\n\r\n    /**\r\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\r\n     * to all participants and once they all received it, start using it.\r\n     *\r\n     * @private\r\n     */\r\n    async _rotateKeyImpl() {\r\n        logger.debug('Rotating key');\r\n\r\n        this._key = this._generateKey();\r\n        const index = await this._olmAdapter.updateKey(this._key);\r\n\r\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE for the receiving side.\r\n     *\r\n     * @private\r\n     */\r\n    _setupReceiverE2EEForTrack(tpc, track) {\r\n        if (!this._enabled) {\r\n            return;\r\n        }\r\n\r\n        const receiver = tpc.findReceiverForTrack(track.track);\r\n\r\n        if (receiver) {\r\n            this._e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\r\n        } else {\r\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE for the sending side.\r\n     *\r\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\r\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\r\n     * @private\r\n     */\r\n    _setupSenderE2EEForTrack(session, track) {\r\n        if (!this._enabled) {\r\n            return;\r\n        }\r\n\r\n        const pc = session.peerconnection;\r\n        const sender = pc && pc.findSenderForTrack(track.track);\r\n\r\n        if (sender) {\r\n            this._e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\r\n        } else {\r\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE on the sender that is created for the unmuted local video track.\r\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\r\n     * @private\r\n     */\r\n    _trackMuteChanged(track) {\r\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\r\n            for (const session of this.conference._getMediaSessions()) {\r\n                this._setupSenderE2EEForTrack(session, track);\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* global __filename, $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport {\r\n    ICE_DURATION,\r\n    ICE_STATE_CHANGED\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport AsyncQueue from '../util/AsyncQueue';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport { integerHash } from '../util/StringUtils';\r\n\r\nimport browser from './../browser';\r\nimport JingleSession from './JingleSession';\r\nimport * as JingleSessionState from './JingleSessionState';\r\nimport MediaSessionEvents from './MediaSessionEvents';\r\nimport SDP from './SDP';\r\nimport SDPDiffer from './SDPDiffer';\r\nimport SDPUtil from './SDPUtil';\r\nimport XmppConnection from './XmppConnection';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Constant tells how long we're going to wait for IQ response, before timeout\r\n * error is  triggered.\r\n * @type {number}\r\n */\r\nconst IQ_TIMEOUT = 10000;\r\n\r\n/*\r\n * The default number of samples (per stat) to keep when webrtc stats gathering\r\n * is enabled in TraceablePeerConnection.\r\n */\r\nconst DEFAULT_MAX_STATS = 300;\r\n\r\n/**\r\n * @typedef {Object} JingleSessionPCOptions\r\n * @property {Object} abTesting - A/B testing related options (ask George).\r\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\r\n * video test ?(ask George).\r\n * @property {boolean} disableH264 - Described in the config.js[1].\r\n * @property {boolean} disableRtx - Described in the config.js[1].\r\n * @property {boolean} disableSimulcast - Described in the config.js[1].\r\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\r\n * on the PeerConnection.\r\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\r\n * @property {boolean} failICE - it's an option used in the tests. Set to\r\n * <tt>true</tt> to block any real candidates and make the ICE fail.\r\n * @property {boolean} gatherStats - Described in the config.js[1].\r\n * @property {object} p2p - Peer to peer related options (FIXME those could be\r\n * fetched from config.p2p on the upper level).\r\n * @property {boolean} p2p.disableH264 - Described in the config.js[1].\r\n * @property {boolean} p2p.preferH264 - Described in the config.js[1].\r\n * @property {boolean} preferH264 - Described in the config.js[1].\r\n * @property {Object} testing - Testing and/or experimental options.\r\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\r\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\r\n *\r\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\r\n */\r\n/**\r\n *\r\n */\r\nexport default class JingleSessionPC extends JingleSession {\r\n    /**\r\n     * Parses 'senders' attribute of the video content.\r\n     * @param {jQuery} jingleContents\r\n     * @return {string|null} one of the values of content \"senders\" attribute\r\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\r\n     * invalid then <tt>null</tt> will be returned.\r\n     * @private\r\n     */\r\n    static parseVideoSenders(jingleContents) {\r\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\r\n\r\n        if (videoContents.length) {\r\n            const senders = videoContents[0].getAttribute('senders');\r\n\r\n            if (senders === 'both'\r\n                || senders === 'initiator'\r\n                || senders === 'responder'\r\n                || senders === 'none') {\r\n                return senders;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parses the video max frame height value out of the 'content-modify' IQ.\r\n     *\r\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\r\n     * @returns {Number|null}\r\n     */\r\n    static parseMaxFrameHeight(jingleContents) {\r\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\r\n\r\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>JingleSessionPC</tt>\r\n     * @param {string} sid the Jingle Session ID - random string which\r\n     * identifies the session\r\n     * @param {string} localJid our JID\r\n     * @param {string} remoteJid remote peer JID\r\n     * @param {XmppConnection} connection - The XMPP connection instance.\r\n     * @param mediaConstraints the media constraints object passed to\r\n     * createOffer/Answer, as defined by the WebRTC standard\r\n     * @param iceConfig the ICE servers config object as defined by the WebRTC\r\n     * standard.\r\n     * @param {boolean} isP2P indicates whether this instance is\r\n     * meant to be used in a direct, peer to peer connection or <tt>false</tt>\r\n     * if it's a JVB connection.\r\n     * @param {boolean} isInitiator indicates if it will be the side which\r\n     * initiates the session.\r\n     * @constructor\r\n     *\r\n     * @implements {SignalingLayer}\r\n     */\r\n    constructor(\r\n            sid,\r\n            localJid,\r\n            remoteJid,\r\n            connection,\r\n            mediaConstraints,\r\n            iceConfig,\r\n            isP2P,\r\n            isInitiator) {\r\n        super(\r\n            sid,\r\n            localJid,\r\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\r\n\r\n        /**\r\n         * The bridge session's identifier. One Jingle session can during\r\n         * it's lifetime participate in multiple bridge sessions managed by\r\n         * Jicofo. A new bridge session is started whenever Jicofo sends\r\n         * 'session-initiate' or 'transport-replace'.\r\n         *\r\n         * @type {?string}\r\n         * @private\r\n         */\r\n        this._bridgeSessionId = null;\r\n\r\n        /**\r\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\r\n         * used to update Jicofo once the XMPP connection goes back online.\r\n         * @type {SDP|undefined}\r\n         * @private\r\n         */\r\n        this._cachedOldLocalSdp = undefined;\r\n\r\n        /**\r\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\r\n         * used to update Jicofo once the XMPP connection goes back online.\r\n         * @type {SDP|undefined}\r\n         * @private\r\n         */\r\n        this._cachedNewLocalSdp = undefined;\r\n\r\n        /**\r\n         * Stores result of {@link window.performance.now()} at the time when\r\n         * ICE enters 'checking' state.\r\n         * @type {number|null} null if no value has been stored yet\r\n         * @private\r\n         */\r\n        this._iceCheckingStartedTimestamp = null;\r\n\r\n        /**\r\n         * Stores result of {@link window.performance.now()} at the time when\r\n         * first ICE candidate is spawned by the peerconnection to mark when\r\n         * ICE gathering started. That's, because ICE gathering state changed\r\n         * events are not supported by most of the browsers, so we try something\r\n         * that will work everywhere. It may not be as accurate, but given that\r\n         * 'host' candidate usually comes first, the delay should be minimal.\r\n         * @type {number|null} null if no value has been stored yet\r\n         * @private\r\n         */\r\n        this._gatheringStartedTimestamp = null;\r\n\r\n        /**\r\n         * Local preference for the receive video max frame height.\r\n         *\r\n         * @type {Number|undefined}\r\n         */\r\n        this.localRecvMaxFrameHeight = undefined;\r\n\r\n        /**\r\n         * Indicates whether or not this session is willing to send/receive\r\n         * video media. When set to <tt>false</tt> the underlying peer\r\n         * connection will disable local video transfer and the remote peer will\r\n         * be will be asked to stop sending video via 'content-modify' IQ\r\n         * (the senders attribute of video contents will be adjusted\r\n         * accordingly). Note that this notification is sent only in P2P\r\n         * session, because Jicofo does not support it yet. Obviously when\r\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\r\n         * notification will be sent to resume video transfer on the remote\r\n         * side.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._localVideoActive = true;\r\n\r\n        /**\r\n         * Indicates whether or not the remote peer has video transfer active.\r\n         * When set to <tt>true</tt> it means that remote peer is neither\r\n         * sending nor willing to receive video. In such case we'll ask\r\n         * our peerconnection to stop sending video by calling\r\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\r\n         * <tt>false</tt>.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._remoteVideoActive = true;\r\n\r\n        /**\r\n         * Marks that ICE gathering duration has been reported already. That\r\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\r\n         * conference migration/ICE restart).\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._gatheringReported = false;\r\n\r\n        this.lasticecandidate = false;\r\n        this.closed = false;\r\n\r\n        /**\r\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\r\n         * a peer to peer type of session.\r\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\r\n         * session or <tt>false</tt> if it's a JVB session\r\n         */\r\n        this.isP2P = isP2P;\r\n\r\n        /**\r\n         * Remote preference for the receive video max frame height.\r\n         *\r\n         * @type {Number|undefined}\r\n         */\r\n        this.remoteRecvMaxFrameHeight = undefined;\r\n\r\n        /**\r\n         * The queue used to serialize operations done on the peerconnection.\r\n         *\r\n         * @type {AsyncQueue}\r\n         */\r\n        this.modificationQueue = new AsyncQueue();\r\n\r\n        /**\r\n         * Flag used to guarantee that the connection established event is\r\n         * triggered just once.\r\n         * @type {boolean}\r\n         */\r\n        this.wasConnected = false;\r\n\r\n        /**\r\n         * Keeps track of how long (in ms) it took from ICE start to ICE\r\n         * connect.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.establishmentDuration = undefined;\r\n\r\n        this._xmppListeners = [];\r\n        this._xmppListeners.push(\r\n            connection.addEventListener(\r\n                XmppConnection.Events.CONN_STATUS_CHANGED,\r\n                this.onXmppStatusChanged.bind(this))\r\n        );\r\n\r\n        this._removeSenderVideoConstraintsChangeListener = undefined;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Checks whether or not this session instance is still operational.\r\n     * @private\r\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\r\n     */\r\n    _assertNotEnded() {\r\n        return this.state !== JingleSessionState.ENDED;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @param {JingleSessionPCOptions} options  - a set of config options.\r\n     */\r\n    doInitialize(options) {\r\n        this.failICE = Boolean(options.failICE);\r\n        this.lasticecandidate = false;\r\n        this.options = options;\r\n\r\n        /**\r\n         * {@code true} if reconnect is in progress.\r\n         * @type {boolean}\r\n         */\r\n        this.isReconnect = false;\r\n\r\n        /**\r\n         * Set to {@code true} if the connection was ever stable\r\n         * @type {boolean}\r\n         */\r\n        this.wasstable = false;\r\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\r\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\r\n\r\n        const pcOptions = { disableRtx: options.disableRtx };\r\n\r\n        if (options.gatherStats) {\r\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\r\n        }\r\n        pcOptions.capScreenshareBitrate = false;\r\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\r\n        pcOptions.videoQuality = options.videoQuality;\r\n\r\n        // codec preference options for jvb connection.\r\n        if (pcOptions.videoQuality) {\r\n            pcOptions.disabledCodec = pcOptions.videoQuality.disabledCodec;\r\n            pcOptions.preferredCodec = pcOptions.videoQuality.preferredCodec;\r\n        }\r\n\r\n        if (this.isP2P) {\r\n            // simulcast needs to be disabled for P2P (121) calls\r\n            pcOptions.disableSimulcast = true;\r\n            pcOptions.disableH264 = options.p2p && options.p2p.disableH264;\r\n            pcOptions.preferH264 = options.p2p && options.p2p.preferH264;\r\n\r\n            // codec preference options for p2p.\r\n            if (options.p2p) {\r\n                // Do not negotiate H246 codec when insertable streams is used because of issues like this -\r\n                // https://bugs.chromium.org/p/webrtc/issues/detail?id=11886\r\n                pcOptions.disabledCodec = options.enableInsertableStreams\r\n                    ? CodecMimeType.H264\r\n                    : options.p2p.disabledCodec;\r\n                pcOptions.preferredCodec = options.p2p.preferredCodec;\r\n            }\r\n\r\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\r\n\r\n            if (typeof abtestSuspendVideo !== 'undefined') {\r\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\r\n            }\r\n        } else {\r\n            // H264 does not support simulcast, so it needs to be disabled.\r\n            pcOptions.disableSimulcast\r\n                = options.disableSimulcast\r\n                    || (options.preferH264 && !options.disableH264);\r\n            pcOptions.preferH264 = options.preferH264;\r\n\r\n            // disable simulcast for screenshare and set the max bitrate to\r\n            // 500Kbps if the testing flag is present in config.js.\r\n            if (options.testing\r\n                && options.testing.capScreenshareBitrate\r\n                && typeof options.testing.capScreenshareBitrate === 'number') {\r\n                pcOptions.capScreenshareBitrate\r\n                    = Math.random()\r\n                    < options.testing.capScreenshareBitrate;\r\n\r\n                // add the capScreenshareBitrate to the permanent properties so\r\n                // that it's included with every event that we send to the\r\n                // analytics backend.\r\n                Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\r\n            }\r\n        }\r\n\r\n        if (options.startSilent) {\r\n            pcOptions.startSilent = true;\r\n        }\r\n\r\n        this.peerconnection\r\n            = this.rtc.createPeerConnection(\r\n                    this._signalingLayer,\r\n                    this.iceConfig,\r\n                    this.isP2P,\r\n                    pcOptions);\r\n\r\n        this.peerconnection.onicecandidate = ev => {\r\n            if (!ev) {\r\n                // There was an incomplete check for ev before which left\r\n                // the last line of the function unprotected from a potential\r\n                // throw of an exception. Consequently, it may be argued that\r\n                // the check is unnecessary. Anyway, I'm leaving it and making\r\n                // the check complete.\r\n                return;\r\n            }\r\n\r\n            // XXX this is broken, candidate is not parsed.\r\n            const candidate = ev.candidate;\r\n            const now = window.performance.now();\r\n\r\n            if (candidate) {\r\n                if (this._gatheringStartedTimestamp === null) {\r\n                    this._gatheringStartedTimestamp = now;\r\n                }\r\n\r\n                // Discard candidates of disabled protocols.\r\n                let protocol = candidate.protocol;\r\n\r\n                if (typeof protocol === 'string') {\r\n                    protocol = protocol.toLowerCase();\r\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\r\n                        if (this.webrtcIceTcpDisable) {\r\n                            return;\r\n                        }\r\n                    } else if (protocol === 'udp') {\r\n                        if (this.webrtcIceUdpDisable) {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (!this._gatheringReported) {\r\n                // End of gathering\r\n                Statistics.sendAnalytics(\r\n                    ICE_DURATION,\r\n                    {\r\n                        phase: 'gathering',\r\n                        value: now - this._gatheringStartedTimestamp,\r\n                        p2p: this.isP2P,\r\n                        initiator: this.isInitiator\r\n                    });\r\n                this._gatheringReported = true;\r\n            }\r\n            this.sendIceCandidate(candidate);\r\n        };\r\n\r\n        // Note there is a change in the spec about closed:\r\n        // This value moved into the RTCPeerConnectionState enum in\r\n        // the May 13, 2016 draft of the specification, as it reflects the state\r\n        // of the RTCPeerConnection, not the signaling connection. You now\r\n        // detect a closed connection by checking for connectionState to be\r\n        // \"closed\" instead.\r\n        // I suppose at some point this will be moved to onconnectionstatechange\r\n        this.peerconnection.onsignalingstatechange = () => {\r\n            if (this.peerconnection.signalingState === 'stable') {\r\n                this.wasstable = true;\r\n            } else if (this.peerconnection.signalingState === 'closed'\r\n                || this.peerconnection.connectionState === 'closed') {\r\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * The oniceconnectionstatechange event handler contains the code to\r\n         * execute when the iceconnectionstatechange event, of type Event,\r\n         * is received by this RTCPeerConnection. Such an event is sent when\r\n         * the value of RTCPeerConnection.iceConnectionState changes.\r\n         */\r\n        this.peerconnection.oniceconnectionstatechange = () => {\r\n            const now = window.performance.now();\r\n\r\n            if (!this.isP2P) {\r\n                this.room.connectionTimes[\r\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\r\n                    = now;\r\n            }\r\n            logger.log(\r\n                `(TIME) ICE ${this.peerconnection.iceConnectionState}`\r\n                    + ` P2P? ${this.isP2P}:\\t`,\r\n                now);\r\n\r\n            Statistics.sendAnalytics(\r\n                ICE_STATE_CHANGED,\r\n                {\r\n                    p2p: this.isP2P,\r\n                    state: this.peerconnection.iceConnectionState,\r\n                    'signaling_state': this.peerconnection.signalingState,\r\n                    reconnect: this.isReconnect,\r\n                    value: now\r\n                });\r\n\r\n            this.room.eventEmitter.emit(\r\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\r\n                this,\r\n                this.peerconnection.iceConnectionState);\r\n            switch (this.peerconnection.iceConnectionState) {\r\n            case 'checking':\r\n                this._iceCheckingStartedTimestamp = now;\r\n                break;\r\n            case 'connected':\r\n                // Informs interested parties that the connection has been\r\n                // restored.\r\n                if (this.peerconnection.signalingState === 'stable') {\r\n                    if (this.isReconnect) {\r\n                        this.room.eventEmitter.emit(\r\n                            XMPPEvents.CONNECTION_RESTORED, this);\r\n                    }\r\n                }\r\n\r\n                if (!this.wasConnected && this.wasstable) {\r\n\r\n                    Statistics.sendAnalytics(\r\n                        ICE_DURATION,\r\n                        {\r\n                            phase: 'checking',\r\n                            value: now - this._iceCheckingStartedTimestamp,\r\n                            p2p: this.isP2P,\r\n                            initiator: this.isInitiator\r\n                        });\r\n\r\n                    // Switch between ICE gathering and ICE checking whichever\r\n                    // started first (scenarios are different for initiator\r\n                    // vs responder)\r\n                    const iceStarted\r\n                        = Math.min(\r\n                            this._iceCheckingStartedTimestamp,\r\n                            this._gatheringStartedTimestamp);\r\n\r\n                    this.establishmentDuration = now - iceStarted;\r\n\r\n                    Statistics.sendAnalytics(\r\n                        ICE_DURATION,\r\n                        {\r\n                            phase: 'establishment',\r\n                            value: this.establishmentDuration,\r\n                            p2p: this.isP2P,\r\n                            initiator: this.isInitiator\r\n                        });\r\n\r\n                    this.wasConnected = true;\r\n                    this.room.eventEmitter.emit(\r\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\r\n                }\r\n                this.isReconnect = false;\r\n                break;\r\n            case 'disconnected':\r\n                this.isReconnect = true;\r\n\r\n                // Informs interested parties that the connection has been\r\n                // interrupted.\r\n                if (this.wasstable) {\r\n                    this.room.eventEmitter.emit(\r\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\r\n                }\r\n                break;\r\n            case 'failed':\r\n                this.room.eventEmitter.emit(\r\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\r\n                break;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * The negotiationneeded event is fired whenever we shake the media on the\r\n         * RTCPeerConnection object.\r\n         */\r\n        this.peerconnection.onnegotiationneeded = () => {\r\n            const state = this.peerconnection.signalingState;\r\n            const remoteDescription = this.peerconnection.remoteDescription;\r\n\r\n            if (browser.usesUnifiedPlan() && state === 'stable'\r\n                && remoteDescription && typeof remoteDescription.sdp === 'string') {\r\n                logger.debug(`onnegotiationneeded fired on ${this.peerconnection} in state: ${state}`);\r\n                const workFunction = finishedCallback => {\r\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                    this._renegotiate()\r\n                        .then(() => {\r\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\r\n                            finishedCallback();\r\n                        },\r\n                        finishedCallback /* will be called with en error */);\r\n                };\r\n\r\n                this.modificationQueue.push(\r\n                    workFunction,\r\n                    error => {\r\n                        if (error) {\r\n                            logger.error('onnegotiationneeded error', error);\r\n                        } else {\r\n                            logger.debug('onnegotiationneeded executed - OK');\r\n                        }\r\n                    });\r\n            }\r\n        };\r\n\r\n        if (!this.isP2P && options.enableLayerSuspension) {\r\n            // If this is the bridge session, we'll listen for\r\n            // SENDER_VIDEO_CONSTRAINTS_CHANGED events and notify the peer connection\r\n            this._removeSenderVideoConstraintsChangeListener = this.rtc.addListener(\r\n                RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, () => {\r\n                    this.eventEmitter.emit(\r\n                        MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remote preference for receive video max frame height.\r\n     *\r\n     * @returns {Number|undefined}\r\n     */\r\n    getRemoteRecvMaxFrameHeight() {\r\n        if (this.isP2P) {\r\n            return this.remoteRecvMaxFrameHeight;\r\n        }\r\n\r\n        return this.options.enableLayerSuspension ? this.rtc.getSenderVideoConstraints().idealHeight : undefined;\r\n    }\r\n\r\n    /**\r\n     * Sends given candidate in Jingle 'transport-info' message.\r\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\r\n     * @private\r\n     */\r\n    sendIceCandidate(candidate) {\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\r\n            const ice\r\n                = SDPUtil.iceparams(\r\n                    localSDP.media[candidate.sdpMLineIndex], localSDP.session);\r\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\r\n\r\n            if (!(ice && jcand)) {\r\n                const errorMesssage = 'failed to get ice && jcand';\r\n\r\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\r\n                logger.error(errorMesssage);\r\n\r\n                return;\r\n            }\r\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n\r\n            if (this.usedrip) {\r\n                if (this.dripContainer.length === 0) {\r\n                    // start 20ms callout\r\n                    setTimeout(() => {\r\n                        if (this.dripContainer.length === 0) {\r\n                            return;\r\n                        }\r\n                        this.sendIceCandidates(this.dripContainer);\r\n                        this.dripContainer = [];\r\n                    }, 20);\r\n                }\r\n                this.dripContainer.push(candidate);\r\n            } else {\r\n                this.sendIceCandidates([ candidate ]);\r\n            }\r\n        } else {\r\n            logger.log('sendIceCandidate: last candidate.');\r\n\r\n            // FIXME: remember to re-think in ICE-restart\r\n            this.lasticecandidate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends given candidates in Jingle 'transport-info' message.\r\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\r\n     * candidate instances\r\n     * @private\r\n     */\r\n    sendIceCandidates(candidates) {\r\n        if (!this._assertNotEnded('sendIceCandidates')) {\r\n\r\n            return;\r\n        }\r\n\r\n        logger.log('sendIceCandidates', candidates);\r\n        const cand = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-info',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid });\r\n\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\r\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\r\n            const mline\r\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\r\n\r\n            if (cands.length > 0) {\r\n                const ice\r\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\r\n\r\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n                cand.c('content', {\r\n                    creator: this.initiatorJid === this.localJid\r\n                        ? 'initiator' : 'responder',\r\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\r\n                }).c('transport', ice);\r\n                for (let i = 0; i < cands.length; i++) {\r\n                    const candidate\r\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\r\n\r\n                    // Mangle ICE candidate if 'failICE' test option is enabled\r\n\r\n                    if (this.failICE) {\r\n                        candidate.ip = '1.1.1.1';\r\n                    }\r\n                    cand.c('candidate', candidate).up();\r\n                }\r\n\r\n                // add fingerprint\r\n                const fingerprintLine\r\n                    = SDPUtil.findLine(\r\n                        localSDP.media[mid],\r\n                        'a=fingerprint:', localSDP.session);\r\n\r\n                if (fingerprintLine) {\r\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\r\n\r\n                    tmp.required = true;\r\n                    cand.c(\r\n                        'fingerprint',\r\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\r\n                        .t(tmp.fingerprint);\r\n                    delete tmp.fingerprint;\r\n                    cand.attrs(tmp);\r\n                    cand.up();\r\n                }\r\n                cand.up(); // transport\r\n                cand.up(); // content\r\n            }\r\n        }\r\n\r\n        // might merge last-candidate notification into this, but it is called\r\n        // a lot later. See webrtc issue #2340\r\n        // logger.log('was this the last candidate', this.lasticecandidate);\r\n        this.connection.sendIQ(\r\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\r\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\r\n     * that the ICE connection has entered the failed state. It can then\r\n     * choose to re-create JVB channels and send 'transport-replace' to\r\n     * retry the connection.\r\n     */\r\n    sendIceFailedNotification() {\r\n        const sessionInfo\r\n            = $iq({\r\n                to: this.remoteJid,\r\n                type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'session-info',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid })\r\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\r\n            .t('failed')\r\n            .up();\r\n\r\n        this._bridgeSessionId\r\n            && sessionInfo.c(\r\n                'bridge-session', {\r\n                    xmlns: 'http://jitsi.org/protocol/focus',\r\n                    id: this._bridgeSessionId\r\n                });\r\n\r\n        this.connection.sendIQ2(\r\n            sessionInfo, {\r\n                /*\r\n                 * This message will be often sent when there are connectivity\r\n                 * issues, so make it slightly longer than Prosody's default BOSH\r\n                 * inactivity timeout of 60 seconds.\r\n                 */\r\n                timeout: 65\r\n            })\r\n            .catch(this.newJingleErrorHandler(sessionInfo));\r\n    }\r\n\r\n    /**\r\n     * {@inheritDoc}\r\n     */\r\n    addIceCandidates(elem) {\r\n        if (this.peerconnection.signalingState === 'closed') {\r\n            logger.warn('Ignored add ICE candidate when in closed state');\r\n\r\n            return;\r\n        }\r\n\r\n        const iceCandidates = [];\r\n\r\n        elem.find('>content>transport>candidate')\r\n            .each((idx, candidate) => {\r\n                let line = SDPUtil.candidateFromJingle(candidate);\r\n\r\n                line = line.replace('\\r\\n', '').replace('a=', '');\r\n\r\n                // FIXME this code does not care to handle\r\n                // non-bundle transport\r\n                const rtcCandidate = new RTCIceCandidate({\r\n                    sdpMLineIndex: 0,\r\n\r\n                    // FF comes up with more complex names like audio-23423,\r\n                    // Given that it works on both Chrome and FF without\r\n                    // providing it, let's leave it like this for the time\r\n                    // being...\r\n                    // sdpMid: 'audio',\r\n                    sdpMid: '',\r\n                    candidate: line\r\n                });\r\n\r\n                iceCandidates.push(rtcCandidate);\r\n            });\r\n\r\n        if (!iceCandidates.length) {\r\n            logger.error(\r\n                'No ICE candidates to add ?', elem[0] && elem[0].outerHTML);\r\n\r\n            return;\r\n        }\r\n\r\n        // We want to have this task queued, so that we know it is executed,\r\n        // after the initial sRD/sLD offer/answer cycle was done (based on\r\n        // the assumption that candidates are spawned after the offer/answer\r\n        // and XMPP preserves order).\r\n        const workFunction = finishedCallback => {\r\n            for (const iceCandidate of iceCandidates) {\r\n                this.peerconnection.addIceCandidate(iceCandidate)\r\n                    .then(\r\n                        () => logger.debug('addIceCandidate ok!'),\r\n                        err => logger.error('addIceCandidate failed!', err));\r\n            }\r\n\r\n            finishedCallback();\r\n        };\r\n\r\n        logger.debug(\r\n            `Queued add (${iceCandidates.length}) ICE candidates task...`);\r\n        this.modificationQueue.push(workFunction);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param contents\r\n     */\r\n    readSsrcInfo(contents) {\r\n        const ssrcs = $(contents).find('>description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n        ssrcs.each((i, ssrcElement) => {\r\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\r\n\r\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                if (ssrcElement.hasAttribute('name')) {\r\n                    const sourceName = ssrcElement.getAttribute('name');\r\n\r\n                    this._signalingLayer.setTrackSourceName(ssrc, sourceName);\r\n                }\r\n            }\r\n\r\n            if (this.isP2P) {\r\n                // In P2P all SSRCs are owner by the remote peer\r\n                this._signalingLayer.setSSRCOwner(ssrc, Strophe.getResourceFromJid(this.remoteJid));\r\n            } else {\r\n                $(ssrcElement)\r\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\r\n                    .each((i3, ssrcInfoElement) => {\r\n                        const owner = ssrcInfoElement.getAttribute('owner');\r\n\r\n                        if (owner?.length) {\r\n                            if (isNaN(ssrc) || ssrc < 0) {\r\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\r\n                            } else {\r\n                                this._signalingLayer.setSSRCOwner(ssrc, getEndpointId(owner));\r\n                            }\r\n                        }\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\r\n     * the recvonly video stream.\r\n     * @deprecated\r\n     */\r\n    generateRecvonlySsrc() {\r\n        if (this.peerconnection) {\r\n            this.peerconnection.generateRecvonlySsrc();\r\n        } else {\r\n            logger.error(\r\n                'Unable to generate recvonly SSRC - no peerconnection');\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Accepts incoming Jingle 'session-initiate' and should send\r\n     * 'session-accept' in result.\r\n     * @param jingleOffer jQuery selector pointing to the jingle element of\r\n     * the offer IQ\r\n     * @param success callback called when we accept incoming session\r\n     * successfully and receive RESULT packet to 'session-accept' sent.\r\n     * @param failure function(error) called if for any reason we fail to accept\r\n     * the incoming offer. 'error' argument can be used to log some details\r\n     * about the error.\r\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\r\n     * the local tracks that will be added, before the offer/answer cycle\r\n     * executes. We allow the localTracks to optionally be passed in so that\r\n     * the addition of the local tracks and the processing of the initial offer\r\n     * can all be done atomically. We want to make sure that any other\r\n     * operations which originate in the XMPP Jingle messages related with\r\n     * this session to be executed with an assumption that the initial\r\n     * offer/answer cycle has been executed already.\r\n     */\r\n    acceptOffer(jingleOffer, success, failure, localTracks) {\r\n        this.setOfferAnswerCycle(\r\n            jingleOffer,\r\n            () => {\r\n                // FIXME we may not care about RESULT packet for session-accept\r\n                // then we should either call 'success' here immediately or\r\n                // modify sendSessionAccept method to do that\r\n                this.sendSessionAccept(success, failure);\r\n            },\r\n            failure,\r\n            localTracks);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\r\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\r\n     * added, before the offer/answer cycle executes (for the local track\r\n     * addition to be an atomic operation together with the offer/answer).\r\n     */\r\n    invite(localTracks = []) {\r\n        if (!this.isInitiator) {\r\n            throw new Error('Trying to invite from the responder session');\r\n        }\r\n        const workFunction = finishedCallback => {\r\n            const addTracks = [];\r\n\r\n            for (const localTrack of localTracks) {\r\n                addTracks.push(this.peerconnection.addTrack(localTrack, this.isInitiator));\r\n            }\r\n\r\n            Promise.all(addTracks)\r\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\r\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\r\n                .then(() => {\r\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\r\n                    // the transformation chain.\r\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\r\n                })\r\n                .then(() => finishedCallback(), error => finishedCallback(error));\r\n        };\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error('invite error', error);\r\n                } else {\r\n                    logger.debug('invite executed - OK');\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sends 'session-initiate' to the remote peer.\r\n     *\r\n     * NOTE this method is synchronous and we're not waiting for the RESULT\r\n     * response which would delay the startup process.\r\n     *\r\n     * @param {string} offerSdp  - The local session description which will be\r\n     * used to generate an offer.\r\n     * @private\r\n     */\r\n    sendSessionInitiate(offerSdp) {\r\n        let init = $iq({\r\n            to: this.remoteJid,\r\n            type: 'set'\r\n        }).c('jingle', {\r\n            xmlns: 'urn:xmpp:jingle:1',\r\n            action: 'session-initiate',\r\n            initiator: this.initiatorJid,\r\n            sid: this.sid\r\n        });\r\n\r\n        new SDP(offerSdp).toJingle(\r\n            init,\r\n            this.isInitiator ? 'initiator' : 'responder');\r\n        init = init.tree();\r\n        logger.info('Session-initiate: ', init);\r\n        this.connection.sendIQ(init,\r\n            () => {\r\n                logger.info('Got RESULT for \"session-initiate\"');\r\n            },\r\n            error => {\r\n                logger.error('\"session-initiate\" error', error);\r\n            },\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sets the answer received from the remote peer.\r\n     * @param jingleAnswer\r\n     */\r\n    setAnswer(jingleAnswer) {\r\n        if (!this.isInitiator) {\r\n            throw new Error('Trying to set an answer on the responder session');\r\n        }\r\n        this.setOfferAnswerCycle(\r\n            jingleAnswer,\r\n            () => {\r\n                logger.info('setAnswer - succeeded');\r\n            },\r\n            error => {\r\n                logger.error('setAnswer failed: ', error);\r\n            });\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\r\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\r\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\r\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\r\n     *        of the offer (or answer) IQ\r\n     * @param success callback called when sRD/sLD cycle finishes successfully.\r\n     * @param failure callback called with an error object as an argument if we\r\n     *        fail at any point during setRD, createAnswer, setLD.\r\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\r\n     * the local tracks that will be added, before the offer/answer cycle\r\n     * executes (for the local track addition to be an atomic operation together\r\n     * with the offer/answer).\r\n     */\r\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\r\n        const workFunction = finishedCallback => {\r\n            const addTracks = [];\r\n\r\n            for (const track of localTracks) {\r\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\r\n            }\r\n\r\n            const newRemoteSdp\r\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\r\n            const oldLocalSdp\r\n                = this.peerconnection.localDescription.sdp;\r\n\r\n            const bridgeSession\r\n                = $(jingleOfferAnswerIq)\r\n                    .find('>bridge-session['\r\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\r\n            const bridgeSessionId = bridgeSession.attr('id');\r\n\r\n            if (bridgeSessionId !== this._bridgeSessionId) {\r\n                this._bridgeSessionId = bridgeSessionId;\r\n            }\r\n\r\n            Promise.all(addTracks)\r\n                .then(() => this._renegotiate(newRemoteSdp.raw))\r\n                .then(() => {\r\n                    if (this.state === JingleSessionState.PENDING) {\r\n                        this.state = JingleSessionState.ACTIVE;\r\n\r\n                        // #1 Sync up video transfer active/inactive only after\r\n                        // the initial O/A cycle. We want to adjust the video\r\n                        // media direction only in the local SDP and the Jingle\r\n                        // contents direction included in the initial\r\n                        // offer/answer is mapped to the remote SDP. Jingle\r\n                        // 'content-modify' IQ is processed in a way that it\r\n                        // will only modify local SDP when remote peer is no\r\n                        // longer interested in receiving video content.\r\n                        // Changing media direction in the remote SDP will mess\r\n                        // up our SDP translation chain (simulcast, video mute,\r\n                        // RTX etc.)\r\n                        //\r\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\r\n                        if (this.isP2P\r\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\r\n                            this.sendContentModify();\r\n                        }\r\n                    }\r\n\r\n                    // Old local SDP will be available when we're setting answer\r\n                    // for the first time, but not when offer and it's fine\r\n                    // since we're generating an answer now it will contain all\r\n                    // our SSRCs\r\n                    if (oldLocalSdp) {\r\n                        const newLocalSdp\r\n                            = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.notifyMySSRCUpdate(\r\n                            new SDP(oldLocalSdp), newLocalSdp);\r\n                    }\r\n                })\r\n                .then(() => finishedCallback(), error => finishedCallback(error));\r\n        };\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                error ? failure(error) : success();\r\n            });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Although it states \"replace transport\" it does accept full Jingle offer\r\n     * which should contain new ICE transport details.\r\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\r\n     *        transport info.\r\n     * @param success callback called when we succeed to accept new offer.\r\n     * @param failure function(error) called when we fail to accept new offer.\r\n     */\r\n    replaceTransport(jingleOfferElem, success, failure) {\r\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\r\n\r\n        // We need to first reject the 'data' section to have the SCTP stack\r\n        // cleaned up to signal the known data channel is now invalid. After\r\n        // that the original offer is set to have the SCTP connection\r\n        // established with the new bridge.\r\n        const originalOffer = jingleOfferElem.clone();\r\n\r\n        jingleOfferElem\r\n            .find('>content[name=\\'data\\']')\r\n            .attr('senders', 'rejected');\r\n\r\n        // Remove all remote sources in order to reset the client's state\r\n        // for the remote MediaStreams. When a conference is moved to\r\n        // another bridge it will start streaming with a sequence number\r\n        // that is not in sync with the most recently seen by the client.\r\n        // The symptoms include frozen or black video and lots of \"failed to\r\n        // unprotect SRTP packets\" in Chrome logs.\r\n        jingleOfferElem\r\n            .find('>content>description>source')\r\n            .remove();\r\n        jingleOfferElem\r\n            .find('>content>description>ssrc-group')\r\n            .remove();\r\n\r\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\r\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\r\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\r\n        // fingerprint has changed by setting an all zeros key.\r\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\r\n\r\n        newFingerprint.attr('hash', 'sha-1');\r\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\r\n\r\n        // First set an offer with a rejected 'data' section\r\n        this.setOfferAnswerCycle(\r\n            jingleOfferElem,\r\n            () => {\r\n                // Now set the original offer(with the 'data' section)\r\n                this.setOfferAnswerCycle(\r\n                    originalOffer,\r\n                    () => {\r\n                        const localSDP\r\n                            = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.sendTransportAccept(localSDP, success, failure);\r\n\r\n                        this.room.eventEmitter.emit(\r\n                            XMPPEvents.ICE_RESTART_SUCCESS,\r\n                            this,\r\n                            originalOffer);\r\n                    },\r\n                    failure);\r\n            },\r\n            failure\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'session-accept' message.\r\n     * @param {function()} success callback called when we receive 'RESULT'\r\n     *        packet for the 'session-accept'\r\n     * @param {function(error)} failure called when we receive an error response\r\n     *        or when the request has timed out.\r\n     * @private\r\n     */\r\n    sendSessionAccept(success, failure) {\r\n        // NOTE: since we're just reading from it, we don't need to be within\r\n        //  the modification queue to access the local description\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n        let accept = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'session-accept',\r\n                initiator: this.initiatorJid,\r\n                responder: this.responderJid,\r\n                sid: this.sid });\r\n\r\n        if (this.webrtcIceTcpDisable) {\r\n            localSDP.removeTcpCandidates = true;\r\n        }\r\n        if (this.webrtcIceUdpDisable) {\r\n            localSDP.removeUdpCandidates = true;\r\n        }\r\n        if (this.failICE) {\r\n            localSDP.failICE = true;\r\n        }\r\n        localSDP.toJingle(\r\n            accept,\r\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder',\r\n            null);\r\n\r\n        // Calling tree() to print something useful\r\n        accept = accept.tree();\r\n        logger.info('Sending session-accept', accept);\r\n        this.connection.sendIQ(accept,\r\n            success,\r\n            this.newJingleErrorHandler(accept, error => {\r\n                failure(error);\r\n\r\n                // 'session-accept' is a critical timeout and we'll\r\n                // have to restart\r\n                this.room.eventEmitter.emit(\r\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\r\n            }),\r\n            IQ_TIMEOUT);\r\n\r\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\r\n        // fingerprint and setup) ASAP in order to start the connection\r\n        // establishment.\r\n        //\r\n        // FIXME Flushing the connection at this point triggers an issue with\r\n        // BOSH request handling in Prosody on slow connections.\r\n        //\r\n        // The problem is that this request will be quite large and it may take\r\n        // time before it reaches Prosody. In the meantime Strophe may decide\r\n        // to send the next one. And it was observed that a small request with\r\n        // 'transport-info' usually follows this one. It does reach Prosody\r\n        // before the previous one was completely received. 'rid' on the server\r\n        // is increased and Prosody ignores the request with 'session-accept'.\r\n        // It will never reach Jicofo and everything in the request table is\r\n        // lost. Removing the flush does not guarantee it will never happen, but\r\n        // makes it much less likely('transport-info' is bundled with\r\n        // 'session-accept' and any immediate requests).\r\n        //\r\n        // this.connection.flush();\r\n    }\r\n\r\n    /**\r\n     * Will send 'content-modify' IQ in order to ask the remote peer to\r\n     * either stop or resume sending video media or to adjust sender's video constraints.\r\n     * @private\r\n     */\r\n    sendContentModify() {\r\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\r\n        const senders = this._localVideoActive ? 'both' : 'none';\r\n\r\n        let sessionModify\r\n            = $iq({\r\n                to: this.remoteJid,\r\n                type: 'set'\r\n            })\r\n                .c('jingle', {\r\n                    xmlns: 'urn:xmpp:jingle:1',\r\n                    action: 'content-modify',\r\n                    initiator: this.initiatorJid,\r\n                    sid: this.sid\r\n                })\r\n                .c('content', {\r\n                    name: 'video',\r\n                    senders\r\n                });\r\n\r\n        if (typeof maxFrameHeight !== 'undefined') {\r\n            sessionModify = sessionModify\r\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\r\n                .t(maxFrameHeight);\r\n        }\r\n\r\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\r\n\r\n        this.connection.sendIQ(\r\n            sessionModify,\r\n            null,\r\n            this.newJingleErrorHandler(sessionModify),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\r\n     * the remote party.\r\n     *\r\n     * @param {Number} maxFrameHeight - the new value to set.\r\n     */\r\n    setReceiverVideoConstraint(maxFrameHeight) {\r\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\r\n\r\n        this.localRecvMaxFrameHeight = maxFrameHeight;\r\n\r\n        if (this.isP2P) {\r\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\r\n            // be synced after offer/answer.\r\n            if (this.state === JingleSessionState.ACTIVE) {\r\n                this.sendContentModify();\r\n            }\r\n        } else {\r\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'transport-accept' message which is a response to\r\n     * 'transport-replace'.\r\n     * @param localSDP the 'SDP' object with local session description\r\n     * @param success callback called when we receive 'RESULT' packet for\r\n     *        'transport-replace'\r\n     * @param failure function(error) called when we receive an error response\r\n     *        or when the request has timed out.\r\n     * @private\r\n     */\r\n    sendTransportAccept(localSDP, success, failure) {\r\n        let transportAccept = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-accept',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            });\r\n\r\n        localSDP.media.forEach((medialines, idx) => {\r\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\r\n\r\n            transportAccept.c('content',\r\n                {\r\n                    creator:\r\n                        this.initiatorJid === this.localJid\r\n                            ? 'initiator'\r\n                            : 'responder',\r\n                    name: mline.media\r\n                }\r\n            );\r\n            localSDP.transportToJingle(idx, transportAccept);\r\n            transportAccept.up();\r\n        });\r\n\r\n        // Calling tree() to print something useful to the logger\r\n        transportAccept = transportAccept.tree();\r\n        logger.info('Sending transport-accept: ', transportAccept);\r\n\r\n        this.connection.sendIQ(transportAccept,\r\n            success,\r\n            this.newJingleErrorHandler(transportAccept, failure),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'transport-reject' message which is a response to\r\n     * 'transport-replace'.\r\n     * @param success callback called when we receive 'RESULT' packet for\r\n     *        'transport-replace'\r\n     * @param failure function(error) called when we receive an error response\r\n     *        or when the request has timed out.\r\n     *\r\n     * FIXME method should be marked as private, but there's some spaghetti that\r\n     *       needs to be fixed prior doing that\r\n     */\r\n    sendTransportReject(success, failure) {\r\n        // Send 'transport-reject', so that the focus will\r\n        // know that we've failed\r\n        let transportReject = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-reject',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            });\r\n\r\n        transportReject = transportReject.tree();\r\n        logger.info('Sending \\'transport-reject', transportReject);\r\n\r\n        this.connection.sendIQ(transportReject,\r\n            success,\r\n            this.newJingleErrorHandler(transportReject, failure),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum bitrates on the local video track. Bitrate values from\r\n     * videoQuality settings in config.js will be used for configuring the sender.\r\n     * @returns {Promise<void>} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n    setSenderMaxBitrates() {\r\n        if (this._assertNotEnded()) {\r\n            return this.peerconnection.setMaxBitRate();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Sets the resolution constraint on the local camera track.\r\n     * @param {number} maxFrameHeight - The user preferred max frame height.\r\n     * @returns {Promise} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n    setSenderVideoConstraint(maxFrameHeight) {\r\n        if (this._assertNotEnded()) {\r\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}`);\r\n\r\n            return this.peerconnection.setSenderVideoConstraint(maxFrameHeight);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Sets the degradation preference on the video sender. This setting determines if\r\n     * resolution or framerate will be preferred when bandwidth or cpu is constrained.\r\n     * @returns {Promise<void>} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n    setSenderVideoDegradationPreference() {\r\n        if (this._assertNotEnded()) {\r\n            return this.peerconnection.setSenderVideoDegradationPreference();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    terminate(success, failure, options) {\r\n        if (this.state === JingleSessionState.ENDED) {\r\n            return;\r\n        }\r\n\r\n        if (!options || Boolean(options.sendSessionTerminate)) {\r\n            let sessionTerminate\r\n                = $iq({\r\n                    to: this.remoteJid,\r\n                    type: 'set'\r\n                })\r\n                    .c('jingle', {\r\n                        xmlns: 'urn:xmpp:jingle:1',\r\n                        action: 'session-terminate',\r\n                        initiator: this.initiatorJid,\r\n                        sid: this.sid\r\n                    })\r\n                    .c('reason')\r\n                    .c((options && options.reason) || 'success')\r\n                    .up();\r\n\r\n            if (options && options.reasonDescription) {\r\n                sessionTerminate\r\n                    .c('text')\r\n                    .t(options.reasonDescription)\r\n                    .up()\r\n                    .up();\r\n            } else {\r\n                sessionTerminate.up();\r\n            }\r\n\r\n            this._bridgeSessionId\r\n                && sessionTerminate.c(\r\n                    'bridge-session', {\r\n                        xmlns: 'http://jitsi.org/protocol/focus',\r\n                        id: this._bridgeSessionId,\r\n                        restart: options && options.requestRestart === true\r\n                    }).up();\r\n\r\n            // Calling tree() to print something useful\r\n            sessionTerminate = sessionTerminate.tree();\r\n            logger.info('Sending session-terminate', sessionTerminate);\r\n            this.connection.sendIQ(\r\n                sessionTerminate,\r\n                success,\r\n                this.newJingleErrorHandler(sessionTerminate, failure),\r\n                IQ_TIMEOUT);\r\n        } else {\r\n            logger.info(`Skipped sending session-terminate for ${this}`);\r\n        }\r\n\r\n        // this should result in 'onTerminated' being called by strope.jingle.js\r\n        this.connection.jingle.terminate(this.sid);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param reasonCondition\r\n     * @param reasonText\r\n     */\r\n    onTerminated(reasonCondition, reasonText) {\r\n        // Do something with reason and reasonCondition when we start to care\r\n        // this.reasonCondition = reasonCondition;\r\n        // this.reasonText = reasonText;\r\n        logger.info(`Session terminated ${this}`, reasonCondition, reasonText);\r\n\r\n        this._xmppListeners.forEach(removeListener => removeListener());\r\n        this._xmppListeners = [];\r\n\r\n        if (this._removeSenderVideoConstraintsChangeListener) {\r\n            this._removeSenderVideoConstraintsChangeListener();\r\n        }\r\n\r\n        this.close();\r\n    }\r\n\r\n    /**\r\n     * Handles XMPP connection state changes.\r\n     *\r\n     * @param {XmppConnection.Status} status - The new status.\r\n     */\r\n    onXmppStatusChanged(status) {\r\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\r\n            logger.info('Sending SSRC update on reconnect');\r\n            this.notifyMySSRCUpdate(\r\n                this._cachedOldLocalSdp,\r\n                this._cachedNewLocalSdp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse the information from the xml sourceAddElem and translate it\r\n     *  into sdp lines\r\n     * @param {jquery xml element} sourceAddElem the source-add\r\n     *  element from jingle\r\n     * @param {SDP object} currentRemoteSdp the current remote\r\n     *  sdp (as of this new source-add)\r\n     * @returns {list} a list of SDP line strings that should\r\n     *  be added to the remote SDP\r\n     */\r\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\r\n        const addSsrcInfo = [];\r\n\r\n        $(sourceAddElem).each((i1, content) => {\r\n            const name = $(content).attr('name');\r\n            let lines = '';\r\n\r\n            $(content)\r\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n                .each(function() {\r\n                    // eslint-disable-next-line no-invalid-this\r\n                    const semantics = this.getAttribute('semantics');\r\n                    const ssrcs\r\n                        = $(this) // eslint-disable-line no-invalid-this\r\n                            .find('>source')\r\n                            .map(function() {\r\n                                // eslint-disable-next-line no-invalid-this\r\n                                return this.getAttribute('ssrc');\r\n                            })\r\n                            .get();\r\n\r\n                    if (ssrcs.length) {\r\n                        lines\r\n                            += `a=ssrc-group:${semantics} ${\r\n                                ssrcs.join(' ')}\\r\\n`;\r\n                    }\r\n                });\r\n\r\n            // handles both >source and >description>source\r\n            const tmp\r\n                = $(content).find(\r\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n            /* eslint-disable no-invalid-this */\r\n            tmp.each(function() {\r\n                const ssrc = $(this).attr('ssrc');\r\n\r\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\r\n                    logger.warn(\r\n                        `Source-add request for existing SSRC: ${ssrc}`);\r\n\r\n                    return;\r\n                }\r\n\r\n                // eslint-disable-next-line newline-per-chained-call\r\n                $(this).find('>parameter').each(function() {\r\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\r\n                    if ($(this).attr('value') && $(this).attr('value').length) {\r\n                        lines += `:${$(this).attr('value')}`;\r\n                    }\r\n                    lines += '\\r\\n';\r\n                });\r\n            });\r\n\r\n            /* eslint-enable no-invalid-this */\r\n            currentRemoteSdp.media.forEach((media, i2) => {\r\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\r\n                    return;\r\n                }\r\n                if (!addSsrcInfo[i2]) {\r\n                    addSsrcInfo[i2] = '';\r\n                }\r\n                addSsrcInfo[i2] += lines;\r\n            });\r\n        });\r\n\r\n        return addSsrcInfo;\r\n    }\r\n\r\n    /**\r\n     * Handles a Jingle source-add message for this Jingle session.\r\n     * @param elem An array of Jingle \"content\" elements.\r\n     */\r\n    addRemoteStream(elem) {\r\n        this._addOrRemoveRemoteStream(true /* add */, elem);\r\n    }\r\n\r\n    /**\r\n     * Handles a Jingle source-remove message for this Jingle session.\r\n     * @param elem An array of Jingle \"content\" elements.\r\n     */\r\n    removeRemoteStream(elem) {\r\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\r\n    }\r\n\r\n    /**\r\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\r\n     *\r\n     * @param {string} id Endpoint id of the participant that has left the call.\r\n     * @returns {void}\r\n     */\r\n     removeRemoteStreamsOnLeave(id) {\r\n        const workFunction = finishCallback => {\r\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\r\n\r\n            if (removeSsrcInfo.length) {\r\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\r\n\r\n                this._renegotiate(newRemoteSdp.raw)\r\n                    .then(() => {\r\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\r\n                        finishCallback();\r\n                    })\r\n                    .catch(err => finishCallback(err));\r\n            } else {\r\n                finishCallback();\r\n            }\r\n        };\r\n\r\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\r\n                } else {\r\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\r\n     * Jingle session.\r\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\r\n     * otherwise.\r\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\r\n     * @private\r\n     */\r\n    _addOrRemoveRemoteStream(isAdd, elem) {\r\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\r\n\r\n        if (isAdd) {\r\n            this.readSsrcInfo(elem);\r\n        }\r\n\r\n        const workFunction = finishedCallback => {\r\n            if (!this.peerconnection.localDescription\r\n                || !this.peerconnection.localDescription.sdp) {\r\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\r\n\r\n                logger.error(errMsg);\r\n                finishedCallback(errMsg);\r\n\r\n                return;\r\n            }\r\n\r\n            logger.log(`Processing ${logPrefix}`);\r\n            logger.log(\r\n                'ICE connection state: ',\r\n                this.peerconnection.iceConnectionState);\r\n\r\n            const oldLocalSdp\r\n                = new SDP(this.peerconnection.localDescription.sdp);\r\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\r\n            const addOrRemoveSsrcInfo\r\n                = isAdd\r\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\r\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\r\n            const newRemoteSdp\r\n                = isAdd\r\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\r\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\r\n\r\n            this._renegotiate(newRemoteSdp.raw)\r\n                .then(() => {\r\n                    const newLocalSdp\r\n                        = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                    logger.log(\r\n                        `${logPrefix} - OK, SDPs: `, oldLocalSdp, newLocalSdp);\r\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\r\n                    finishedCallback();\r\n                }, error => {\r\n                    logger.error(`${logPrefix} failed:`, error);\r\n                    finishedCallback(error);\r\n                });\r\n        };\r\n\r\n        // Queue and execute\r\n        this.modificationQueue.push(workFunction);\r\n    }\r\n\r\n    /**\r\n     * Takes in a jingle offer iq, returns the new sdp offer\r\n     * @param {jquery xml element} offerIq the incoming offer\r\n     * @returns {SDP object} the jingle offer translated to SDP\r\n     */\r\n    _processNewJingleOfferIq(offerIq) {\r\n        const remoteSdp = new SDP('');\r\n\r\n        if (this.webrtcIceTcpDisable) {\r\n            remoteSdp.removeTcpCandidates = true;\r\n        }\r\n        if (this.webrtcIceUdpDisable) {\r\n            remoteSdp.removeUdpCandidates = true;\r\n        }\r\n        if (this.failICE) {\r\n            remoteSdp.failICE = true;\r\n        }\r\n\r\n        remoteSdp.fromJingle(offerIq);\r\n        this.readSsrcInfo($(offerIq).find('>content'));\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Remove the given ssrc lines from the current remote sdp\r\n     * @param {list} removeSsrcInfo a list of SDP line strings that\r\n     *  should be removed from the remote SDP\r\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\r\n     *  in removeSsrcInfo\r\n     */\r\n    _processRemoteRemoveSource(removeSsrcInfo) {\r\n        const remoteSdp = browser.usesPlanB()\r\n            ? new SDP(this.peerconnection.remoteDescription.sdp)\r\n            : new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\r\n\r\n        removeSsrcInfo.forEach((lines, idx) => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            lines = lines.split('\\r\\n');\r\n            lines.pop(); // remove empty last element;\r\n            if (browser.usesPlanB()) {\r\n                lines.forEach(line => {\r\n                    remoteSdp.media[idx]\r\n                        = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\r\n                });\r\n            } else {\r\n                lines.forEach(line => {\r\n                    const mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\r\n\r\n                    if (mid > -1) {\r\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\r\n\r\n                        // Change the direction to \"inactive\" only on Firefox. Audio fails on\r\n                        // Safari (possibly Chrome in unified plan mode) when we try to re-use inactive\r\n                        // m-lines due to a webkit bug.\r\n                        // https://bugs.webkit.org/show_bug.cgi?id=211181\r\n                        if (browser.isFirefox()) {\r\n                            remoteSdp.media[mid] = remoteSdp.media[mid].replace('a=sendonly', 'a=inactive');\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Add the given ssrc lines to the current remote sdp\r\n     * @param {list} addSsrcInfo a list of SDP line strings that\r\n     *  should be added to the remote SDP\r\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\r\n     *  in removeSsrcInfo\r\n     */\r\n    _processRemoteAddSource(addSsrcInfo) {\r\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\r\n\r\n        addSsrcInfo.forEach((lines, idx) => {\r\n            remoteSdp.media[idx] += lines;\r\n        });\r\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Do a new o/a flow using the existing remote description\r\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\r\n     *  to use.  If not provided, the remote sdp from the\r\n     *  peerconnection will be used\r\n     * @returns {Promise} promise which resolves when the\r\n     *  o/a flow is complete with no arguments or\r\n     *  rejects with an error {string}\r\n     */\r\n    _renegotiate(optionalRemoteSdp) {\r\n        if (this.peerconnection.signalingState === 'closed') {\r\n            const error = new Error('Attempted to renegotiate in state closed');\r\n\r\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        const remoteSdp\r\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\r\n\r\n        if (!remoteSdp) {\r\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\r\n\r\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        const remoteDescription = new RTCSessionDescription({\r\n            type: this.isInitiator ? 'answer' : 'offer',\r\n            sdp: remoteSdp\r\n        });\r\n\r\n        if (this.isInitiator) {\r\n            return this._initiatorRenegotiate(remoteDescription);\r\n        }\r\n\r\n        return this._responderRenegotiate(remoteDescription);\r\n    }\r\n\r\n    /**\r\n     * Renegotiate cycle implementation for the responder case.\r\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\r\n     * which will be used as remote description in the cycle.\r\n     * @private\r\n     */\r\n    _responderRenegotiate(remoteDescription) {\r\n        logger.debug('Renegotiate: setting remote description');\r\n\r\n        return this.peerconnection.setRemoteDescription(remoteDescription)\r\n            .then(() => {\r\n                logger.debug('Renegotiate: creating answer');\r\n\r\n                return this.peerconnection.createAnswer(this.mediaConstraints)\r\n                    .then(answer => {\r\n                        logger.debug('Renegotiate: setting local description');\r\n\r\n                        return this.peerconnection.setLocalDescription(answer);\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Renegotiate cycle implementation for the initiator's case.\r\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\r\n     * which will be used as remote description in the cycle.\r\n     * @private\r\n     */\r\n    _initiatorRenegotiate(remoteDescription) {\r\n        logger.debug('Renegotiate: creating offer');\r\n\r\n        return this.peerconnection.createOffer(this.mediaConstraints)\r\n            .then(offer => {\r\n                logger.debug('Renegotiate: setting local description');\r\n\r\n                return this.peerconnection.setLocalDescription(offer)\r\n                    .then(() => {\r\n                        logger.debug(\r\n                            'Renegotiate: setting remote description');\r\n\r\n                        // eslint-disable-next-line max-len\r\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\r\n     * offer/answer cycle after both operations are done. Either\r\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\r\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\r\n     * <tt>oldTrack</tt>\r\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\r\n     * replaced\r\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\r\n     * @returns {Promise} which resolves once the replacement is complete\r\n     *  with no arguments or rejects with an error {string}\r\n     */\r\n    replaceTrack(oldTrack, newTrack) {\r\n        const workFunction = finishedCallback => {\r\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\r\n\r\n            if (browser.usesPlanB()) {\r\n                // NOTE the code below assumes that no more than 1 video track\r\n                // can be added to the peer connection.\r\n                // Transition from camera to desktop share\r\n                // or transition from one camera source to another.\r\n                if (this.peerconnection.options.capScreenshareBitrate\r\n                    && oldTrack && newTrack && newTrack.isVideoTrack()) {\r\n                    // Clearing current primary SSRC will make\r\n                    // the SdpConsistency generate a new one which will result\r\n                    // with:\r\n                    // 1. source-remove for the old video stream.\r\n                    // 2. source-add for the new video stream.\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n                }\r\n\r\n                // Transition from no video to video (unmute).\r\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\r\n                    // Clearing current primary SSRC will make\r\n                    // the SdpConsistency generate a new one which will result\r\n                    // with:\r\n                    // 1. source-remove for the recvonly\r\n                    // 2. source-add for the new video stream\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n\r\n                // Transition from video to no video\r\n                } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\r\n                    // Clearing current primary SSRC and generating the recvonly\r\n                    // will result in:\r\n                    // 1. source-remove for the old video stream\r\n                    // 2. source-add for the recvonly stream\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n                    this.peerconnection.generateRecvonlySsrc();\r\n                }\r\n            }\r\n\r\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\r\n                .then(shouldRenegotiate => {\r\n                    let promise = Promise.resolve();\r\n\r\n                    if (shouldRenegotiate\r\n                        && (oldTrack || newTrack)\r\n                        && this.state === JingleSessionState.ACTIVE) {\r\n                        promise = this._renegotiate().then(() => {\r\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\r\n                        });\r\n                    }\r\n\r\n                    return promise.then(() => {\r\n                        if (newTrack && newTrack.isVideoTrack()) {\r\n                            // FIXME set all sender parameters in one go?\r\n                            // Set the degradation preference on the new video sender.\r\n                            return this.peerconnection.setSenderVideoDegradationPreference()\r\n\r\n                                // Apply the cached video constraints on the new video sender.\r\n                                .then(() => this.peerconnection.setSenderVideoConstraint())\r\n                                .then(() => this.peerconnection.setMaxBitRate());\r\n                        }\r\n                    });\r\n                })\r\n                .then(() => finishedCallback(), error => finishedCallback(error));\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        logger.error('Replace track error:', error);\r\n                        reject(error);\r\n                    } else {\r\n                        logger.info('Replace track done!');\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parse the information from the xml sourceRemoveElem and translate it\r\n     *  into sdp lines\r\n     * @param {jquery xml element} sourceRemoveElem the source-remove\r\n     *  element from jingle\r\n     * @param {SDP object} currentRemoteSdp the current remote\r\n     *  sdp (as of this new source-remove)\r\n     * @returns {list} a list of SDP line strings that should\r\n     *  be removed from the remote SDP\r\n     */\r\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\r\n        const removeSsrcInfo = [];\r\n\r\n        $(sourceRemoveElem).each((i1, content) => {\r\n            const name = $(content).attr('name');\r\n            let lines = '';\r\n\r\n            $(content)\r\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n                .each(function() {\r\n                    /* eslint-disable no-invalid-this */\r\n                    const semantics = this.getAttribute('semantics');\r\n                    const ssrcs\r\n                        = $(this)\r\n                            .find('>source')\r\n                            .map(function() {\r\n                                return this.getAttribute('ssrc');\r\n                            })\r\n                            .get();\r\n\r\n                    if (ssrcs.length) {\r\n                        lines\r\n                            += `a=ssrc-group:${semantics} ${\r\n                                ssrcs.join(' ')}\\r\\n`;\r\n                    }\r\n\r\n                    /* eslint-enable no-invalid-this */\r\n                });\r\n            const ssrcs = [];\r\n\r\n            // handles both >source and >description>source versions\r\n            const tmp\r\n                = $(content).find(\r\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n            tmp.each(function() {\r\n                // eslint-disable-next-line no-invalid-this\r\n                const ssrc = $(this).attr('ssrc');\r\n\r\n                ssrcs.push(ssrc);\r\n            });\r\n            currentRemoteSdp.media.forEach((media, i2) => {\r\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\r\n                    return;\r\n                }\r\n                if (!removeSsrcInfo[i2]) {\r\n                    removeSsrcInfo[i2] = '';\r\n                }\r\n                ssrcs.forEach(ssrc => {\r\n                    const ssrcLines\r\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\r\n\r\n                    if (ssrcLines.length) {\r\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\r\n                    }\r\n                });\r\n                removeSsrcInfo[i2] += lines;\r\n            });\r\n        });\r\n\r\n        return removeSsrcInfo;\r\n    }\r\n\r\n    /**\r\n     * Will print an error if there is any difference, between the SSRCs given\r\n     * in the <tt>oldSDP</tt> and the ones currently described in\r\n     * the peerconnection's local description.\r\n     * @param {string} operationName the operation's name which will be printed\r\n     * in the error message.\r\n     * @param {SDP} oldSDP the old local SDP which will be compared with\r\n     * the current one.\r\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\r\n     * otherwise.\r\n     * @private\r\n     */\r\n    _verifyNoSSRCChanged(operationName, oldSDP) {\r\n        const currentLocalSDP\r\n            = new SDP(this.peerconnection.localDescription.sdp);\r\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\r\n        const addedMedia = sdpDiff.getNewMedia();\r\n\r\n        if (Object.keys(addedMedia).length) {\r\n            logger.error(\r\n                `${this} - some SSRC were added on ${operationName}`,\r\n                addedMedia);\r\n\r\n            return false;\r\n        }\r\n\r\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\r\n        const removedMedia = sdpDiff.getNewMedia();\r\n\r\n        if (Object.keys(removedMedia).length) {\r\n            logger.error(\r\n                `${this} - some SSRCs were removed on ${operationName}`,\r\n                removedMedia);\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Adds local track back to this session, as part of the unmute operation.\r\n     * @param {JitsiLocalTrack} track\r\n     * @return {Promise} a promise that will resolve once the local track is\r\n     * added back to this session and renegotiation succeeds. Will be rejected\r\n     * with a <tt>string</tt> that provides some error details in case something\r\n     * goes wrong.\r\n     */\r\n    addTrackAsUnmute(track) {\r\n        return this._addRemoveTrackAsMuteUnmute(\r\n            false /* add as unmute */, track)\r\n            .then(() => {\r\n                // Apply the video constraints, max bitrates and degradation preference on\r\n                // the video sender if needed.\r\n                if (track.isVideoTrack() && browser.doesVideoMuteByStreamRemove()) {\r\n                    return this.setSenderMaxBitrates()\r\n                        .then(() => this.setSenderVideoDegradationPreference())\r\n                        .then(() => this.setSenderVideoConstraint());\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Remove local track as part of the mute operation.\r\n     * @param {JitsiLocalTrack} track the local track to be removed\r\n     * @return {Promise} a promise which will be resolved once the local track\r\n     * is removed from this session and the renegotiation is performed.\r\n     * The promise will be rejected with a <tt>string</tt> that the describes\r\n     * the error if anything goes wrong.\r\n     */\r\n    removeTrackAsMute(track) {\r\n        return this._addRemoveTrackAsMuteUnmute(\r\n            true /* remove as mute */, track);\r\n    }\r\n\r\n    /**\r\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\r\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\r\n     * <tt>false</tt> for \"add as unmute\".\r\n     * @param {JitsiLocalTrack} track the track that will be added/removed\r\n     * @private\r\n     */\r\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\r\n        if (!track) {\r\n            return Promise.reject('invalid \"track\" argument value');\r\n        }\r\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\r\n        const workFunction = finishedCallback => {\r\n            const tpc = this.peerconnection;\r\n\r\n            if (!tpc) {\r\n                finishedCallback(\r\n                    `Error:  tried ${operationName} track with no active peer`\r\n                        + 'connection');\r\n\r\n                return;\r\n            }\r\n            const oldLocalSDP = tpc.localDescription.sdp;\r\n            const operationPromise\r\n                = isMute\r\n                    ? tpc.removeTrackMute(track)\r\n                    : tpc.addTrackUnmute(track);\r\n\r\n            operationPromise\r\n                .then(shouldRenegotiate => {\r\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\r\n                        this._renegotiate()\r\n                            .then(() => {\r\n                                // The results are ignored, as this check failure is not\r\n                                // enough to fail the whole operation. It will log\r\n                                // an error inside.\r\n                                this._verifyNoSSRCChanged(\r\n                                    operationName, new SDP(oldLocalSDP));\r\n                                finishedCallback();\r\n                            });\r\n                    } else {\r\n                        finishedCallback();\r\n                    }\r\n                },\r\n                finishedCallback /* will be called with an error */);\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Resumes or suspends media transfer over the underlying peer connection.\r\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\r\n     * transfer or <tt>false</tt> to suspend audio media transmission.\r\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\r\n     * transfer or <tt>false</tt> to suspend video media transmission.\r\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\r\n     * the operation is done. It will be rejected with an error description as\r\n     * a string in case anything goes wrong.\r\n     */\r\n    setMediaTransferActive(audioActive, videoActive) {\r\n        if (!this.peerconnection) {\r\n            return Promise.reject(\r\n                'Can not modify transfer active state,'\r\n                    + ' before \"initialize\" is called');\r\n        }\r\n\r\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\r\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\r\n\r\n        logger.info(`Queued make ${logVideoStr}, ${logAudioStr} task...`);\r\n\r\n        const workFunction = finishedCallback => {\r\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\r\n\r\n            // Because the value is modified on the queue it's impossible to\r\n            // check it's final value reliably prior to submitting the task.\r\n            // The rule here is that the last submitted state counts.\r\n            // Check the values here to avoid unnecessary renegotiation cycle.\r\n            const audioActiveChanged\r\n                = this.peerconnection.setAudioTransferActive(audioActive);\r\n\r\n            if (this._localVideoActive !== videoActive) {\r\n                this._localVideoActive = videoActive;\r\n\r\n                // Do only for P2P - Jicofo will reply with 'bad-request'\r\n                // We don't want to send 'content-modify', before the initial\r\n                // O/A (state === JingleSessionState.ACTIVE), because that will\r\n                // mess up video media direction in the remote SDP.\r\n                // 'content-modify' when processed only affects the media\r\n                // direction in the local SDP. We're doing that, because setting\r\n                // 'inactive' on video media in remote SDP will mess up our SDP\r\n                // translation chain (simulcast, RTX, video mute etc.).\r\n                if (this.isP2P && isSessionActive) {\r\n                    this.sendContentModify();\r\n                }\r\n            }\r\n\r\n            const pcVideoActiveChanged\r\n                = this.peerconnection.setVideoTransferActive(\r\n                    this._localVideoActive && this._remoteVideoActive);\r\n\r\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\r\n            // direction\r\n            if (isSessionActive\r\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\r\n                this._renegotiate()\r\n                    .then(\r\n                        finishedCallback,\r\n                        finishedCallback /* will be called with an error */);\r\n            } else {\r\n                finishedCallback();\r\n            }\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Will put and execute on the queue a session modify task. Currently it\r\n     * only checks the senders attribute of the video content in order to figure\r\n     * out if the remote peer has video in the inactive state (stored locally\r\n     * in {@link _remoteVideoActive} - see field description for more info).\r\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\r\n     * element of the session modify IQ.\r\n     * @see {@link _remoteVideoActive}\r\n     * @see {@link _localVideoActive}\r\n     */\r\n    modifyContents(jingleContents) {\r\n        const newVideoSenders\r\n            = JingleSessionPC.parseVideoSenders(jingleContents);\r\n        const newMaxFrameHeight\r\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\r\n\r\n        // frame height is optional in our content-modify protocol\r\n        if (newMaxFrameHeight) {\r\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\r\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\r\n            this.eventEmitter.emit(\r\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\r\n        }\r\n\r\n        if (newVideoSenders === null) {\r\n            logger.error(\r\n                `${this} - failed to parse video \"senders\" attribute in`\r\n                    + '\"content-modify\" action');\r\n\r\n            return;\r\n        }\r\n\r\n        const workFunction = finishedCallback => {\r\n            if (this._assertNotEnded('content-modify')\r\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\r\n                // Will do the sRD/sLD cycle to update SDPs and adjust\r\n                // the media direction\r\n                this._renegotiate()\r\n                    .then(finishedCallback, finishedCallback /* (error) */);\r\n            } else {\r\n                finishedCallback();\r\n            }\r\n        };\r\n\r\n        logger.debug(\r\n            `${this} queued \"content-modify\" task`\r\n                + `(video senders=\"${newVideoSenders}\")`);\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error('\"content-modify\" failed', error);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\r\n     * to apply it for {@link _remoteVideoActive}.\r\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\r\n     * Jingle video content element advertised by remote peer.\r\n     * @return {boolean} <tt>true</tt> if the change affected state of\r\n     * the underlying peerconnection and renegotiation is required for\r\n     * the changes to take effect.\r\n     * @private\r\n     */\r\n    _modifyRemoteVideoActive(remoteVideoSenders) {\r\n        const isRemoteVideoActive\r\n            = remoteVideoSenders === 'both'\r\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\r\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\r\n\r\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\r\n            logger.debug(\r\n                `${this} new remote video active: ${isRemoteVideoActive}`);\r\n            this._remoteVideoActive = isRemoteVideoActive;\r\n        }\r\n\r\n        return this.peerconnection.setVideoTransferActive(\r\n            this._localVideoActive && this._remoteVideoActive);\r\n    }\r\n\r\n    /**\r\n     * Figures out added/removed ssrcs and send update IQs.\r\n     * @param oldSDP SDP object for old description.\r\n     * @param newSDP SDP object for new description.\r\n     */\r\n    notifyMySSRCUpdate(oldSDP, newSDP) {\r\n\r\n        if (this.state !== JingleSessionState.ACTIVE) {\r\n            logger.warn(`Skipping SSRC update in '${this.state} ' state.`);\r\n\r\n            return;\r\n        }\r\n\r\n        if (!this.connection.connected) {\r\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\r\n            if (!this._cachedOldLocalSdp) {\r\n                this._cachedOldLocalSdp = oldSDP;\r\n            }\r\n            this._cachedNewLocalSdp = newSDP;\r\n            logger.warn('Not sending SSRC update while the signaling is disconnected');\r\n\r\n            return;\r\n        }\r\n\r\n        this._cachedOldLocalSdp = undefined;\r\n        this._cachedNewLocalSdp = undefined;\r\n\r\n        // send source-remove IQ.\r\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\r\n        const remove = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'source-remove',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            }\r\n            );\r\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\r\n\r\n        if (removedAnySSRCs) {\r\n            logger.info('Sending source-remove', remove.tree());\r\n            this.connection.sendIQ(\r\n                remove, null,\r\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\r\n        } else {\r\n            logger.log('removal not necessary');\r\n        }\r\n\r\n        // send source-add IQ.\r\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\r\n        const add = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'source-add',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            }\r\n            );\r\n\r\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\r\n\r\n        if (containsNewSSRCs) {\r\n            logger.info('Sending source-add', add.tree());\r\n            this.connection.sendIQ(\r\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\r\n        } else {\r\n            logger.log('addition not necessary');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method returns function(errorResponse) which is a callback to be passed\r\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\r\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\r\n     * structure is as follows:\r\n     * {\r\n     *  code: {XMPP error response code}\r\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\r\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\r\n     *  source: {request.tree() that provides original request}\r\n     *  session: {this JingleSessionPC.toString()}\r\n     * }\r\n     * @param request Strophe IQ instance which is the request to be dumped into\r\n     *        the error structure\r\n     * @param failureCb function(error) called when error response was returned\r\n     *        or when a timeout has occurred.\r\n     * @returns {function(this:JingleSessionPC)}\r\n     */\r\n    newJingleErrorHandler(request, failureCb) {\r\n        return errResponse => {\r\n\r\n            const error = {};\r\n\r\n            // Get XMPP error code and condition(reason)\r\n            const errorElSel = $(errResponse).find('error');\r\n\r\n            if (errorElSel.length) {\r\n                error.code = errorElSel.attr('code');\r\n                const errorReasonSel = $(errResponse).find('error :first');\r\n\r\n                if (errorReasonSel.length) {\r\n                    error.reason = errorReasonSel[0].tagName;\r\n                }\r\n\r\n                const errorMsgSel = errorElSel.find('>text');\r\n\r\n                if (errorMsgSel.length) {\r\n                    error.msg = errorMsgSel.text();\r\n                }\r\n            }\r\n\r\n            if (!errResponse) {\r\n                error.reason = 'timeout';\r\n            }\r\n\r\n            error.session = this.toString();\r\n\r\n            if (failureCb) {\r\n                failureCb(error);\r\n            } else if (this.state === JingleSessionState.ENDED\r\n                        && error.reason === 'item-not-found') {\r\n                // When remote peer decides to terminate the session, but it\r\n                // still have few messages on the queue for processing,\r\n                // it will first send us 'session-terminate' (we enter ENDED)\r\n                // and then follow with 'item-not-found' for the queued requests\r\n                // We don't want to have that logged on error level.\r\n                logger.debug(`Jingle error: ${JSON.stringify(error)}`);\r\n            } else {\r\n                GlobalOnErrorHandler.callErrorHandler(\r\n                    new Error(\r\n                        `Jingle error: ${JSON.stringify(error)}`));\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the ice connection state for the peer connection.\r\n     * @returns the ice connection state for the peer connection.\r\n     */\r\n    getIceConnectionState() {\r\n        return this.peerconnection.getConnectionState();\r\n    }\r\n\r\n    /**\r\n     * Closes the peerconnection.\r\n     */\r\n    close() {\r\n        this.state = JingleSessionState.ENDED;\r\n        this.establishmentDuration = undefined;\r\n\r\n        if (this.peerconnection) {\r\n            this.peerconnection.onicecandidate = null;\r\n            this.peerconnection.oniceconnectionstatechange = null;\r\n            this.peerconnection.onnegotiationneeded = null;\r\n            this.peerconnection.onsignalingstatechange = null;\r\n        }\r\n\r\n        // Remove any pending tasks from the queue\r\n        this.modificationQueue.clear();\r\n\r\n        this.modificationQueue.push(finishCallback => {\r\n            // do not try to close if already closed.\r\n            this.peerconnection && this.peerconnection.close();\r\n            finishCallback();\r\n        });\r\n\r\n        // No more tasks can go in after the close task\r\n        this.modificationQueue.shutdown();\r\n    }\r\n\r\n    /**\r\n     * Converts to string with minor summary.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `JingleSessionPC[p2p=${this.isP2P},`\r\n                    + `initiator=${this.isInitiator},sid=${this.sid}]`;\r\n    }\r\n\r\n    /**\r\n     * If the A/B test for suspend video is disabled according to the room's\r\n     * configuration, returns undefined. Otherwise returns a boolean which\r\n     * indicates whether the suspend video option should be enabled or disabled.\r\n     * @param {JingleSessionPCOptions} options - The config options.\r\n     */\r\n    _abtestSuspendVideoEnabled({ abTesting }) {\r\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\r\n            return;\r\n        }\r\n\r\n        // We want the two participants in a P2P call to agree on the value of\r\n        // the \"suspend\" option. We use the JID of the initiator, because it is\r\n        // both randomly selected and agreed upon by both participants.\r\n        const jid = this._getInitiatorJid();\r\n\r\n        return integerHash(jid) % 2 === 0;\r\n    }\r\n}\r\n","export default {\r\n    /**\r\n     * Event triggered when the remote party signals it's receive video max frame height.\r\n     */\r\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\r\n};\r\n","/**\r\n * The events for the media devices.\r\n */\r\n\r\n/**\r\n * Indicates that the list of available media devices has been changed. The\r\n * event provides the following parameters to its listeners:\r\n *\r\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\r\n *  MediaDeviceInfo-like objects that are currently connected.\r\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\r\n */\r\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\r\n\r\n/**\r\n * Indicates that the environment is currently showing permission prompt to\r\n * access camera and/or microphone. The event provides the following\r\n * parameters to its listeners:\r\n *\r\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\r\n *  |'react-native'|'android'} environmentType - type of browser or\r\n *  other execution environment.\r\n */\r\nexport const PERMISSION_PROMPT_IS_SHOWN\r\n    = 'mediaDevices.permissionPromptIsShown';\r\n","'use strict'\r\n\r\nexports.byteLength = byteLength\r\nexports.toByteArray = toByteArray\r\nexports.fromByteArray = fromByteArray\r\n\r\nvar lookup = []\r\nvar revLookup = []\r\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\r\n\r\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\r\nfor (var i = 0, len = code.length; i < len; ++i) {\r\n  lookup[i] = code[i]\r\n  revLookup[code.charCodeAt(i)] = i\r\n}\r\n\r\n// Support decoding URL-safe base64 strings, as Node.js does.\r\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\r\nrevLookup['-'.charCodeAt(0)] = 62\r\nrevLookup['_'.charCodeAt(0)] = 63\r\n\r\nfunction getLens (b64) {\r\n  var len = b64.length\r\n\r\n  if (len % 4 > 0) {\r\n    throw new Error('Invalid string. Length must be a multiple of 4')\r\n  }\r\n\r\n  // Trim off extra bytes after placeholder bytes are found\r\n  // See: https://github.com/beatgammit/base64-js/issues/42\r\n  var validLen = b64.indexOf('=')\r\n  if (validLen === -1) validLen = len\r\n\r\n  var placeHoldersLen = validLen === len\r\n    ? 0\r\n    : 4 - (validLen % 4)\r\n\r\n  return [validLen, placeHoldersLen]\r\n}\r\n\r\n// base64 is 4/3 + up to two characters of the original data\r\nfunction byteLength (b64) {\r\n  var lens = getLens(b64)\r\n  var validLen = lens[0]\r\n  var placeHoldersLen = lens[1]\r\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\r\n}\r\n\r\nfunction _byteLength (b64, validLen, placeHoldersLen) {\r\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\r\n}\r\n\r\nfunction toByteArray (b64) {\r\n  var tmp\r\n  var lens = getLens(b64)\r\n  var validLen = lens[0]\r\n  var placeHoldersLen = lens[1]\r\n\r\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\r\n\r\n  var curByte = 0\r\n\r\n  // if there are placeholders, only get up to the last complete 4 chars\r\n  var len = placeHoldersLen > 0\r\n    ? validLen - 4\r\n    : validLen\r\n\r\n  var i\r\n  for (i = 0; i < len; i += 4) {\r\n    tmp =\r\n      (revLookup[b64.charCodeAt(i)] << 18) |\r\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\r\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\r\n      revLookup[b64.charCodeAt(i + 3)]\r\n    arr[curByte++] = (tmp >> 16) & 0xFF\r\n    arr[curByte++] = (tmp >> 8) & 0xFF\r\n    arr[curByte++] = tmp & 0xFF\r\n  }\r\n\r\n  if (placeHoldersLen === 2) {\r\n    tmp =\r\n      (revLookup[b64.charCodeAt(i)] << 2) |\r\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\r\n    arr[curByte++] = tmp & 0xFF\r\n  }\r\n\r\n  if (placeHoldersLen === 1) {\r\n    tmp =\r\n      (revLookup[b64.charCodeAt(i)] << 10) |\r\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\r\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\r\n    arr[curByte++] = (tmp >> 8) & 0xFF\r\n    arr[curByte++] = tmp & 0xFF\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\nfunction tripletToBase64 (num) {\r\n  return lookup[num >> 18 & 0x3F] +\r\n    lookup[num >> 12 & 0x3F] +\r\n    lookup[num >> 6 & 0x3F] +\r\n    lookup[num & 0x3F]\r\n}\r\n\r\nfunction encodeChunk (uint8, start, end) {\r\n  var tmp\r\n  var output = []\r\n  for (var i = start; i < end; i += 3) {\r\n    tmp =\r\n      ((uint8[i] << 16) & 0xFF0000) +\r\n      ((uint8[i + 1] << 8) & 0xFF00) +\r\n      (uint8[i + 2] & 0xFF)\r\n    output.push(tripletToBase64(tmp))\r\n  }\r\n  return output.join('')\r\n}\r\n\r\nfunction fromByteArray (uint8) {\r\n  var tmp\r\n  var len = uint8.length\r\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\r\n  var parts = []\r\n  var maxChunkLength = 16383 // must be multiple of 3\r\n\r\n  // go through the array every three bytes, we'll deal with trailing stuff later\r\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\r\n    parts.push(encodeChunk(\r\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\r\n    ))\r\n  }\r\n\r\n  // pad the end with zeros, but make sure to not forget the extra bytes\r\n  if (extraBytes === 1) {\r\n    tmp = uint8[len - 1]\r\n    parts.push(\r\n      lookup[tmp >> 2] +\r\n      lookup[(tmp << 4) & 0x3F] +\r\n      '=='\r\n    )\r\n  } else if (extraBytes === 2) {\r\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\r\n    parts.push(\r\n      lookup[tmp >> 10] +\r\n      lookup[(tmp >> 4) & 0x3F] +\r\n      lookup[(tmp << 2) & 0x3F] +\r\n      '='\r\n    )\r\n  }\r\n\r\n  return parts.join('')\r\n}\r\n","import SDPUtil from './SDPUtil';\r\n\r\n// this could be useful in Array.prototype.\r\n/**\r\n *\r\n * @param array1\r\n * @param array2\r\n */\r\nfunction arrayEquals(array1, array2) {\r\n    // if the other array is a falsy value, return\r\n    if (!array2) {\r\n        return false;\r\n    }\r\n\r\n    // compare lengths - can save a lot of time\r\n    if (array1.length !== array2.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0, l = array1.length; i < l; i++) {\r\n        // Check if we have nested arrays\r\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\r\n            // recurse into the nested arrays\r\n            if (!array1[i].equals(array2[i])) {\r\n                return false;\r\n            }\r\n        } else if (array1[i] !== array2[i]) {\r\n            // Warning - two different object instances will never be\r\n            // equal: {x:20} != {x:20}\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n *\r\n * @param mySDP\r\n * @param otherSDP\r\n */\r\nexport default function SDPDiffer(mySDP, otherSDP) {\r\n    this.mySDP = mySDP;\r\n    this.otherSDP = otherSDP;\r\n    if (!mySDP) {\r\n        throw new Error('\"mySDP\" is undefined!');\r\n    } else if (!otherSDP) {\r\n        throw new Error('\"otherSDP\" is undefined!');\r\n    }\r\n}\r\n\r\n/**\r\n * Returns map of MediaChannel that contains media contained in\r\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\r\n */\r\nSDPDiffer.prototype.getNewMedia = function() {\r\n\r\n    const myMedias = this.mySDP.getMediaSsrcMap();\r\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\r\n    const newMedia = {};\r\n\r\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\r\n        const myMedia = myMedias[othersMediaIdx];\r\n        const othersMedia = othersMedias[othersMediaIdx];\r\n\r\n        if (!myMedia && othersMedia) {\r\n            // Add whole channel\r\n            newMedia[othersMediaIdx] = othersMedia;\r\n\r\n            return;\r\n        }\r\n\r\n        // Look for new ssrcs across the channel\r\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\r\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\r\n                // Allocate channel if we've found ssrc that doesn't exist in\r\n                // our channel\r\n                if (!newMedia[othersMediaIdx]) {\r\n                    newMedia[othersMediaIdx] = {\r\n                        mediaindex: othersMedia.mediaindex,\r\n                        mid: othersMedia.mid,\r\n                        ssrcs: {},\r\n                        ssrcGroups: []\r\n                    };\r\n                }\r\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\r\n            } else if (othersMedia.ssrcs[ssrc].lines\r\n                        && myMedia.ssrcs[ssrc].lines) {\r\n                // we want to detect just changes in adding/removing msid\r\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\r\n                    line => line.indexOf('msid') !== -1) !== undefined;\r\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\r\n                    line => line.indexOf('msid') !== -1) !== undefined;\r\n\r\n                if (myContainMsid !== newContainMsid) {\r\n                    if (!newMedia[othersMediaIdx]) {\r\n                        newMedia[othersMediaIdx] = {\r\n                            mediaindex: othersMedia.mediaindex,\r\n                            mid: othersMedia.mid,\r\n                            ssrcs: {},\r\n                            ssrcGroups: []\r\n                        };\r\n                    }\r\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\r\n                        = othersMedia.ssrcs[ssrc];\r\n                }\r\n            }\r\n        });\r\n\r\n        // Look for new ssrc groups across the channels\r\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\r\n\r\n            // try to match the other ssrc-group with an ssrc-group of ours\r\n            let matched = false;\r\n\r\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\r\n                const mySsrcGroup = myMedia.ssrcGroups[i];\r\n\r\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\r\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\r\n\r\n                    matched = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!matched) {\r\n                // Allocate channel if we've found an ssrc-group that doesn't\r\n                // exist in our channel\r\n\r\n                if (!newMedia[othersMediaIdx]) {\r\n                    newMedia[othersMediaIdx] = {\r\n                        mediaindex: othersMedia.mediaindex,\r\n                        mid: othersMedia.mid,\r\n                        ssrcs: {},\r\n                        ssrcGroups: []\r\n                    };\r\n                }\r\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\r\n            }\r\n        });\r\n    });\r\n\r\n    return newMedia;\r\n};\r\n\r\n/**\r\n * TODO: document!\r\n */\r\nSDPDiffer.prototype.toJingle = function(modify) {\r\n    const sdpMediaSsrcs = this.getNewMedia();\r\n\r\n    let modified = false;\r\n\r\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\r\n        modified = true;\r\n        const media = sdpMediaSsrcs[mediaindex];\r\n\r\n        modify.c('content', { name: media.mid });\r\n\r\n        modify.c('description',\r\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\r\n                media: media.mid });\r\n\r\n        // FIXME: not completely sure this operates on blocks and / or handles\r\n        // different ssrcs correctly\r\n        // generate sources from lines\r\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\r\n            const mediaSsrc = media.ssrcs[ssrcNum];\r\n\r\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\r\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\r\n\r\n            // iterate over ssrc lines\r\n            mediaSsrc.lines.forEach(line => {\r\n                const idx = line.indexOf(' ');\r\n                const kv = line.substr(idx + 1);\r\n\r\n                modify.c('parameter');\r\n                if (kv.indexOf(':') === -1) {\r\n                    modify.attrs({ name: kv });\r\n                } else {\r\n                    const nv = kv.split(':', 2);\r\n                    const name = nv[0];\r\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\r\n\r\n                    modify.attrs({ name });\r\n                    modify.attrs({ value });\r\n                }\r\n                modify.up(); // end of parameter\r\n            });\r\n            modify.up(); // end of source\r\n        });\r\n\r\n        // generate source groups from lines\r\n        media.ssrcGroups.forEach(ssrcGroup => {\r\n            if (ssrcGroup.ssrcs.length) {\r\n\r\n                modify.c('ssrc-group', {\r\n                    semantics: ssrcGroup.semantics,\r\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                });\r\n\r\n                ssrcGroup.ssrcs.forEach(ssrc => {\r\n                    modify.c('source', { ssrc })\r\n                        .up(); // end of source\r\n                });\r\n                modify.up(); // end of ssrc-group\r\n            }\r\n        });\r\n\r\n        modify.up(); // end of description\r\n        modify.up(); // end of content\r\n    });\r\n\r\n    return modified;\r\n};\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport transform from 'sdp-transform';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport browser from '../browser';\r\n\r\nconst logger = getLogger(__filename);\r\nconst SIM_LAYER_1_RID = '1';\r\nconst SIM_LAYER_2_RID = '2';\r\nconst SIM_LAYER_3_RID = '3';\r\n\r\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\r\n\r\n/**\r\n * Handles track related operations on TraceablePeerConnection when browser is\r\n * running in unified plan mode.\r\n */\r\nexport class TPCUtils {\r\n    /**\r\n     * Creates a new instance for a given TraceablePeerConnection\r\n     *\r\n     * @param peerconnection - the tpc instance for which we have utility functions.\r\n     * @param videoBitrates - the bitrates to be configured on the video senders for\r\n     * different resolutions both in unicast and simulcast mode.\r\n     */\r\n    constructor(peerconnection, videoBitrates) {\r\n        this.pc = peerconnection;\r\n        this.videoBitrates = videoBitrates;\r\n\r\n        /**\r\n         * The startup configuration for the stream encodings that are applicable to\r\n         * the video stream when a new sender is created on the peerconnection. The initial\r\n         * config takes into account the differences in browser's simulcast implementation.\r\n         *\r\n         * Encoding parameters:\r\n         * active - determine the on/off state of a particular encoding.\r\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\r\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\r\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\r\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\r\n         *  original resolution of the captured video.\r\n         */\r\n        this.localStreamEncodingsConfig = [\r\n            {\r\n                active: true,\r\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.high : this.videoBitrates.low,\r\n                rid: SIM_LAYER_1_RID,\r\n                scaleResolutionDownBy: browser.isFirefox() ? 1.0 : 4.0\r\n            },\r\n            {\r\n                active: true,\r\n                maxBitrate: this.videoBitrates.standard,\r\n                rid: SIM_LAYER_2_RID,\r\n                scaleResolutionDownBy: 2.0\r\n            },\r\n            {\r\n                active: true,\r\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.low : this.videoBitrates.high,\r\n                rid: SIM_LAYER_3_RID,\r\n                scaleResolutionDownBy: browser.isFirefox() ? 4.0 : 1.0\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\r\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\r\n     * plan since we have only one FID group per media description.\r\n     * @param {Object} description the webRTC session description instance for the remote\r\n     * description.\r\n     * @private\r\n     */\r\n    ensureCorrectOrderOfSsrcs(description) {\r\n        const parsedSdp = transform.parse(description.sdp);\r\n\r\n        parsedSdp.media.forEach(mLine => {\r\n            if (mLine.type === 'audio') {\r\n                return;\r\n            }\r\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\r\n                return;\r\n            }\r\n            let reorderedSsrcs = [];\r\n\r\n            const ssrcs = new Set();\r\n\r\n            mLine.ssrcGroups.map(group =>\r\n                group.ssrcs\r\n                    .split(' ')\r\n                    .filter(Boolean)\r\n                    .forEach(ssrc => ssrcs.add(ssrc))\r\n            );\r\n\r\n            ssrcs.forEach(ssrc => {\r\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\r\n\r\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\r\n            });\r\n            mLine.ssrcs = reorderedSsrcs;\r\n        });\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: transform.write(parsedSdp)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Obtains stream encodings that need to be configured on the given track based\r\n     * on the track media type and the simulcast setting.\r\n     * @param {JitsiLocalTrack} localTrack\r\n     */\r\n    _getStreamEncodings(localTrack) {\r\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\r\n            return this.localStreamEncodingsConfig;\r\n        }\r\n\r\n        return localTrack.isVideoTrack()\r\n            ? [ {\r\n                active: true,\r\n                maxBitrate: this.videoBitrates.high\r\n            } ]\r\n            : [ { active: true } ];\r\n    }\r\n\r\n    /**\r\n     * Takes in a *unified plan* offer and inserts the appropriate\r\n     * parameters for adding simulcast receive support.\r\n     * @param {Object} desc - A session description object\r\n     * @param {String} desc.type - the type (offer/answer)\r\n     * @param {String} desc.sdp - the sdp content\r\n     *\r\n     * @return {Object} A session description (same format as above) object\r\n     * with its sdp field modified to advertise simulcast receive support\r\n     */\r\n    insertUnifiedPlanSimulcastReceive(desc) {\r\n        // a=simulcast line is not needed on browsers where\r\n        // we munge SDP for turning on simulcast. Remove this check\r\n        // when we move to RID/MID based simulcast on all browsers.\r\n        if (browser.usesSdpMungingForSimulcast()) {\r\n            return desc;\r\n        }\r\n        const sdp = transform.parse(desc.sdp);\r\n        const idx = sdp.media.findIndex(mline => mline.type === 'video');\r\n\r\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\r\n            // Make sure we don't have the simulcast recv line on video descriptions other than the\r\n            // the first video description.\r\n            sdp.media.forEach((mline, i) => {\r\n                if (mline.type === 'video' && i !== idx) {\r\n                    sdp.media[i].rids = undefined;\r\n                    sdp.media[i].simulcast = undefined;\r\n\r\n                    // eslint-disable-next-line camelcase\r\n                    sdp.media[i].simulcast_03 = undefined;\r\n                }\r\n            });\r\n\r\n            return new RTCSessionDescription({\r\n                type: desc.type,\r\n                sdp: transform.write(sdp)\r\n            });\r\n        }\r\n\r\n        // In order of highest to lowest spatial quality\r\n        sdp.media[idx].rids = [\r\n            {\r\n                id: SIM_LAYER_1_RID,\r\n                direction: 'recv'\r\n            },\r\n            {\r\n                id: SIM_LAYER_2_RID,\r\n                direction: 'recv'\r\n            },\r\n            {\r\n                id: SIM_LAYER_3_RID,\r\n                direction: 'recv'\r\n            }\r\n        ];\r\n\r\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\r\n        // eslint-disable-next-line max-len\r\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\r\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\r\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\r\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\r\n\r\n        // eslint-disable-next-line camelcase\r\n        sdp.media[idx].simulcast_03 = {\r\n            value: simulcastLine\r\n        };\r\n\r\n        return new RTCSessionDescription({\r\n            type: desc.type,\r\n            sdp: transform.write(sdp)\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\r\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\r\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer\r\n    * in a p2p connection.\r\n    * @returns {void}\r\n    */\r\n    addTrack(localTrack, isInitiator) {\r\n        const track = localTrack.getTrack();\r\n\r\n        if (isInitiator) {\r\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\r\n            // to the peerconnection before a session-initiate is sent over to the peer.\r\n            const transceiverInit = {\r\n                direction: 'sendrecv',\r\n                streams: [ localTrack.getOriginalStream() ],\r\n                sendEncodings: []\r\n            };\r\n\r\n            if (!browser.isFirefox()) {\r\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\r\n            }\r\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\r\n        } else {\r\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\r\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\r\n            // unused \"recv-only\" transceiver.\r\n            this.pc.peerconnection.addTrack(track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\r\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    addTrackUnmute(localTrack) {\r\n        const mediaType = localTrack.getType();\r\n        const track = localTrack.getTrack();\r\n\r\n        // The assumption here is that the first transceiver of the specified\r\n        // media type is that of the local track.\r\n        const transceiver = this.pc.peerconnection.getTransceivers()\r\n            .find(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\r\n\r\n        if (!transceiver) {\r\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\r\n        }\r\n        logger.debug(`Adding ${localTrack} on ${this.pc}`);\r\n\r\n        // If the client starts with audio/video muted setting, the transceiver direction\r\n        // will be set to 'recvonly'. Use addStream here so that a MSID is generated for the stream.\r\n        if (transceiver.direction === 'recvonly') {\r\n            const stream = localTrack.getOriginalStream();\r\n\r\n            if (stream) {\r\n                this.pc.peerconnection.addStream(localTrack.getOriginalStream());\r\n\r\n                return this.setEncodings(localTrack).then(() => {\r\n                    this.pc.localTracks.set(localTrack.rtcId, localTrack);\r\n                    transceiver.direction = 'sendrecv';\r\n                });\r\n            }\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return transceiver.sender.replaceTrack(track);\r\n    }\r\n\r\n    /**\r\n     * Obtains the current local video track's height constraints based on the\r\n     * initial stream encodings configuration on the sender and the resolution\r\n     * of the current local track added to the peerconnection.\r\n     * @param {MediaStreamTrack} localTrack local video track\r\n     * @returns {Array[number]} an array containing the resolution heights of\r\n     * simulcast streams configured on the video sender.\r\n     */\r\n    getLocalStreamHeightConstraints(localTrack) {\r\n        // React-native hasn't implemented MediaStreamTrack getSettings yet.\r\n        if (browser.isReactNative()) {\r\n            return null;\r\n        }\r\n\r\n        const localVideoHeightConstraints = [];\r\n        const height = localTrack.getSettings().height;\r\n\r\n        for (const encoding of this.localStreamEncodingsConfig) {\r\n            localVideoHeightConstraints.push(height / encoding.scaleResolutionDownBy);\r\n        }\r\n\r\n        return localVideoHeightConstraints;\r\n    }\r\n\r\n    /**\r\n     * Removes the track from the RTCRtpSender as part of the mute operation.\r\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    removeTrackMute(localTrack) {\r\n        const mediaType = localTrack.getType();\r\n        const transceiver = this.pc.peerconnection.getTransceivers()\r\n            .find(t => t.sender && t.sender.track && t.sender.track.id === localTrack.getTrackId());\r\n\r\n        if (!transceiver) {\r\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\r\n        }\r\n\r\n        logger.debug(`Removing ${localTrack} on ${this.pc}`);\r\n\r\n        return transceiver.sender.replaceTrack(null);\r\n    }\r\n\r\n    /**\r\n     * Replaces the existing track on a RTCRtpSender with the given track.\r\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\r\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    replaceTrack(oldTrack, newTrack) {\r\n        if (oldTrack && newTrack) {\r\n            const mediaType = newTrack.getType();\r\n            const stream = newTrack.getOriginalStream();\r\n\r\n            // Ignore cases when the track is replaced while the device is in a muted state,like\r\n            // replacing camera when video muted or replacing mic when audio muted. These JitsiLocalTracks\r\n            // do not have a mediastream attached. Replace track will be called again when the device is\r\n            // unmuted and the track will be replaced on the peerconnection then.\r\n            if (!stream) {\r\n                this.pc.localTracks.delete(oldTrack.rtcId);\r\n                this.pc.localTracks.set(newTrack.rtcId, newTrack);\r\n\r\n                return Promise.resolve();\r\n            }\r\n            const track = mediaType === MediaType.AUDIO\r\n                ? stream.getAudioTracks()[0]\r\n                : stream.getVideoTracks()[0];\r\n            const transceiver = this.pc.peerconnection.getTransceivers()\r\n                .find(t => t.receiver.track.kind === mediaType && !t.stopped);\r\n\r\n            if (!transceiver) {\r\n                return Promise.reject(new Error('replace track failed'));\r\n            }\r\n            logger.debug(`Replacing ${oldTrack} with ${newTrack} on ${this.pc}`);\r\n\r\n            return transceiver.sender.replaceTrack(track)\r\n                .then(() => {\r\n                    const ssrc = this.pc.localSSRCs.get(oldTrack.rtcId);\r\n\r\n                    this.pc.localTracks.delete(oldTrack.rtcId);\r\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\r\n                    this.pc._addedStreams = this.pc._addedStreams.filter(s => s !== stream);\r\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\r\n\r\n                    this.pc._addedStreams.push(stream);\r\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\r\n                    this.pc.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\r\n                        newTrack,\r\n                        this.pc._extractPrimarySSRC(ssrc));\r\n                });\r\n        } else if (oldTrack && !newTrack) {\r\n            return this.removeTrackMute(oldTrack)\r\n                .then(() => {\r\n                    this.pc.localTracks.delete(oldTrack.rtcId);\r\n                    this.pc.localSSRCs.delete(oldTrack.rtcId);\r\n                });\r\n        } else if (newTrack && !oldTrack) {\r\n            const ssrc = this.pc.localSSRCs.get(newTrack.rtcId);\r\n\r\n            return this.addTrackUnmute(newTrack)\r\n                .then(() => {\r\n                    this.pc.localTracks.set(newTrack.rtcId, newTrack);\r\n                    this.pc.localSSRCs.set(newTrack.rtcId, ssrc);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n    * Enables/disables audio transmission on the peer connection. When\r\n    * disabled the audio transceiver direction will be set to 'inactive'\r\n    * which means that no data will be sent nor accepted, but\r\n    * the connection should be kept alive.\r\n    * @param {boolean} active - true to enable audio media transmission or\r\n    * false to disable.\r\n    * @returns {void}\r\n    */\r\n    setAudioTransferActive(active) {\r\n        this.setMediaTransferActive(MediaType.AUDIO, active);\r\n    }\r\n\r\n    /**\r\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\r\n     * @param {JitsiLocalTrack} track - the current track in use for which\r\n     * the encodings are to be set.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    setEncodings(track) {\r\n        const transceiver = this.pc.peerconnection.getTransceivers()\r\n            .find(t => t.sender && t.sender.track && t.sender.track.kind === track.getType());\r\n        const parameters = transceiver.sender.getParameters();\r\n\r\n        parameters.encodings = this._getStreamEncodings(track);\r\n\r\n        return transceiver.sender.setParameters(parameters);\r\n    }\r\n\r\n    /**\r\n     * Enables/disables media transmission on the peerconnection by changing the direction\r\n     * on the transceiver for the specified media type.\r\n     * @param {String} mediaType - 'audio' or 'video'\r\n     * @param {boolean} active - true to enable media transmission or false\r\n     * to disable.\r\n     * @returns {void}\r\n     */\r\n    setMediaTransferActive(mediaType, active) {\r\n        const transceivers = this.pc.peerconnection.getTransceivers()\r\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\r\n        const localTracks = this.pc.getLocalTracks(mediaType);\r\n\r\n        logger.info(`${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer on ${this.pc}`);\r\n        transceivers.forEach((transceiver, idx) => {\r\n            if (active) {\r\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\r\n                if (idx === 0 && localTracks.length) {\r\n                    transceiver.direction = 'sendrecv';\r\n                } else {\r\n                    transceiver.direction = 'recvonly';\r\n                }\r\n            } else {\r\n                transceiver.direction = 'inactive';\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Enables/disables video media transmission on the peer connection. When\r\n    * disabled the SDP video media direction in the local SDP will be adjusted to\r\n    * 'inactive' which means that no data will be sent nor accepted, but\r\n    * the connection should be kept alive.\r\n    * @param {boolean} active - true to enable video media transmission or\r\n    * false to disable.\r\n    * @returns {void}\r\n    */\r\n    setVideoTransferActive(active) {\r\n        this.setMediaTransferActive(MediaType.VIDEO, active);\r\n    }\r\n}\r\n","// shim for using process in browser\r\nvar process = module.exports = {};\r\n\r\n// cached from whatever global is present so that test runners that stub it\r\n// don't break things.  But we need to wrap it in a try catch in case it is\r\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\r\n// function because try/catches deoptimize in certain engines.\r\n\r\nvar cachedSetTimeout;\r\nvar cachedClearTimeout;\r\n\r\nfunction defaultSetTimout() {\r\n    throw new Error('setTimeout has not been defined');\r\n}\r\nfunction defaultClearTimeout () {\r\n    throw new Error('clearTimeout has not been defined');\r\n}\r\n(function () {\r\n    try {\r\n        if (typeof setTimeout === 'function') {\r\n            cachedSetTimeout = setTimeout;\r\n        } else {\r\n            cachedSetTimeout = defaultSetTimout;\r\n        }\r\n    } catch (e) {\r\n        cachedSetTimeout = defaultSetTimout;\r\n    }\r\n    try {\r\n        if (typeof clearTimeout === 'function') {\r\n            cachedClearTimeout = clearTimeout;\r\n        } else {\r\n            cachedClearTimeout = defaultClearTimeout;\r\n        }\r\n    } catch (e) {\r\n        cachedClearTimeout = defaultClearTimeout;\r\n    }\r\n} ())\r\nfunction runTimeout(fun) {\r\n    if (cachedSetTimeout === setTimeout) {\r\n        //normal enviroments in sane situations\r\n        return setTimeout(fun, 0);\r\n    }\r\n    // if setTimeout wasn't available but was latter defined\r\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\r\n        cachedSetTimeout = setTimeout;\r\n        return setTimeout(fun, 0);\r\n    }\r\n    try {\r\n        // when when somebody has screwed with setTimeout but no I.E. maddness\r\n        return cachedSetTimeout(fun, 0);\r\n    } catch(e){\r\n        try {\r\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\r\n            return cachedSetTimeout.call(null, fun, 0);\r\n        } catch(e){\r\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\r\n            return cachedSetTimeout.call(this, fun, 0);\r\n        }\r\n    }\r\n\r\n\r\n}\r\nfunction runClearTimeout(marker) {\r\n    if (cachedClearTimeout === clearTimeout) {\r\n        //normal enviroments in sane situations\r\n        return clearTimeout(marker);\r\n    }\r\n    // if clearTimeout wasn't available but was latter defined\r\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\r\n        cachedClearTimeout = clearTimeout;\r\n        return clearTimeout(marker);\r\n    }\r\n    try {\r\n        // when when somebody has screwed with setTimeout but no I.E. maddness\r\n        return cachedClearTimeout(marker);\r\n    } catch (e){\r\n        try {\r\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\r\n            return cachedClearTimeout.call(null, marker);\r\n        } catch (e){\r\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\r\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\r\n            return cachedClearTimeout.call(this, marker);\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\nvar queue = [];\r\nvar draining = false;\r\nvar currentQueue;\r\nvar queueIndex = -1;\r\n\r\nfunction cleanUpNextTick() {\r\n    if (!draining || !currentQueue) {\r\n        return;\r\n    }\r\n    draining = false;\r\n    if (currentQueue.length) {\r\n        queue = currentQueue.concat(queue);\r\n    } else {\r\n        queueIndex = -1;\r\n    }\r\n    if (queue.length) {\r\n        drainQueue();\r\n    }\r\n}\r\n\r\nfunction drainQueue() {\r\n    if (draining) {\r\n        return;\r\n    }\r\n    var timeout = runTimeout(cleanUpNextTick);\r\n    draining = true;\r\n\r\n    var len = queue.length;\r\n    while(len) {\r\n        currentQueue = queue;\r\n        queue = [];\r\n        while (++queueIndex < len) {\r\n            if (currentQueue) {\r\n                currentQueue[queueIndex].run();\r\n            }\r\n        }\r\n        queueIndex = -1;\r\n        len = queue.length;\r\n    }\r\n    currentQueue = null;\r\n    draining = false;\r\n    runClearTimeout(timeout);\r\n}\r\n\r\nprocess.nextTick = function (fun) {\r\n    var args = new Array(arguments.length - 1);\r\n    if (arguments.length > 1) {\r\n        for (var i = 1; i < arguments.length; i++) {\r\n            args[i - 1] = arguments[i];\r\n        }\r\n    }\r\n    queue.push(new Item(fun, args));\r\n    if (queue.length === 1 && !draining) {\r\n        runTimeout(drainQueue);\r\n    }\r\n};\r\n\r\n// v8 likes predictible objects\r\nfunction Item(fun, array) {\r\n    this.fun = fun;\r\n    this.array = array;\r\n}\r\nItem.prototype.run = function () {\r\n    this.fun.apply(null, this.array);\r\n};\r\nprocess.title = 'browser';\r\nprocess.browser = true;\r\nprocess.env = {};\r\nprocess.argv = [];\r\nprocess.version = ''; // empty string to avoid regexp issues\r\nprocess.versions = {};\r\n\r\nfunction noop() {}\r\n\r\nprocess.on = noop;\r\nprocess.addListener = noop;\r\nprocess.once = noop;\r\nprocess.off = noop;\r\nprocess.removeListener = noop;\r\nprocess.removeAllListeners = noop;\r\nprocess.emit = noop;\r\nprocess.prependListener = noop;\r\nprocess.prependOnceListener = noop;\r\n\r\nprocess.listeners = function (name) { return [] }\r\n\r\nprocess.binding = function (name) {\r\n    throw new Error('process.binding is not supported');\r\n};\r\n\r\nprocess.cwd = function () { return '/' };\r\nprocess.chdir = function (dir) {\r\n    throw new Error('process.chdir is not supported');\r\n};\r\nprocess.umask = function() { return 0; };\r\n","/**\r\n * Provides statistics for the local stream.\r\n */\r\n\r\n/**\r\n * Size of the webaudio analyzer buffer.\r\n * @type {number}\r\n */\r\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\r\n\r\n/**\r\n * Value of the webaudio analyzer smoothing time parameter.\r\n * @type {number}\r\n */\r\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\r\n\r\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\r\n\r\nlet context = null;\r\n\r\nif (window.AudioContext) {\r\n    context = new AudioContext();\r\n\r\n    // XXX Not all browsers define a suspend method on AudioContext. As the\r\n    // invocation is at the (ES6 module) global execution level, it breaks the\r\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\r\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\r\n    // example, Google Chrome 40 on Android does not define the method but we\r\n    // still want to be able to load the lib-jitsi-meet library there and\r\n    // display a page which notifies the user that the Web app is not supported\r\n    // there.\r\n    context.suspend && context.suspend();\r\n}\r\n\r\n/**\r\n * Converts time domain data array to audio level.\r\n * @param samples the time domain data array.\r\n * @returns {number} the audio level\r\n */\r\nfunction timeDomainDataToAudioLevel(samples) {\r\n\r\n    let maxVolume = 0;\r\n\r\n    const length = samples.length;\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        if (maxVolume < samples[i]) {\r\n            maxVolume = samples[i];\r\n        }\r\n    }\r\n\r\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\r\n}\r\n\r\n/**\r\n * Animates audio level change\r\n * @param newLevel the new audio level\r\n * @param lastLevel the last audio level\r\n * @returns {Number} the audio level to be set\r\n */\r\nfunction animateLevel(newLevel, lastLevel) {\r\n    let value = 0;\r\n    const diff = lastLevel - newLevel;\r\n\r\n    if (diff > 0.2) {\r\n        value = lastLevel - 0.2;\r\n    } else if (diff < -0.4) {\r\n        value = lastLevel + 0.4;\r\n    } else {\r\n        value = newLevel;\r\n    }\r\n\r\n    return parseFloat(value.toFixed(3));\r\n}\r\n\r\n\r\n/**\r\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\r\n *\r\n * @param stream the local stream\r\n * @param interval stats refresh interval given in ms.\r\n * @param callback function that receives the audio levels.\r\n * @constructor\r\n */\r\nexport default function LocalStatsCollector(stream, interval, callback) {\r\n    this.stream = stream;\r\n    this.intervalId = null;\r\n    this.intervalMilis = interval;\r\n    this.audioLevel = 0;\r\n    this.callback = callback;\r\n}\r\n\r\n/**\r\n * Starts the collecting the statistics.\r\n */\r\nLocalStatsCollector.prototype.start = function() {\r\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\r\n        return;\r\n    }\r\n    context.resume();\r\n    const analyser = context.createAnalyser();\r\n\r\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\r\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\r\n\r\n    const source = context.createMediaStreamSource(this.stream);\r\n\r\n    source.connect(analyser);\r\n\r\n    this.intervalId = setInterval(\r\n        () => {\r\n            const array = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n            analyser.getByteTimeDomainData(array);\r\n            const audioLevel = timeDomainDataToAudioLevel(array);\r\n\r\n            // Set the audio levels always as NoAudioSignalDetection now\r\n            // uses audio levels from LocalStatsCollector and waits for\r\n            // atleast 4 secs for a no audio signal before displaying the\r\n            // notification on the UI.\r\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\r\n            this.callback(this.audioLevel);\r\n        },\r\n        this.intervalMilis\r\n    );\r\n};\r\n\r\n/**\r\n * Stops collecting the statistics.\r\n */\r\nLocalStatsCollector.prototype.stop = function() {\r\n    if (this.intervalId) {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Checks if the environment has the necessary conditions to support\r\n * collecting stats from local streams.\r\n *\r\n * @returns {boolean}\r\n */\r\nLocalStatsCollector.isLocalStatsSupported = function() {\r\n    return Boolean(context);\r\n};\r\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\r\n","/* global $ */\r\n\r\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Listenable from '../util/Listenable';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * The property\r\n */\r\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\r\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\r\nconst HASH = 'sha-1';\r\n\r\nexport const ERROR_FEATURE_VERSION_MISMATCH = 'Feature version mismatch';\r\n\r\n/**\r\n *\r\n * @param a\r\n * @param b\r\n */\r\nfunction compareIdentities(a, b) {\r\n    let res = 0;\r\n\r\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\r\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\r\n    );\r\n\r\n    return res;\r\n}\r\n\r\n/**\r\n * Produces a sha-1 from provided identity and features values.\r\n *\r\n * @param {Array<Object>} identities - The identity objects.\r\n * @param {Array<string>} features - The features.\r\n * @returns {string}\r\n */\r\nfunction generateSha(identities, features) {\r\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\r\n        (accumulatedValue, identity) => `${\r\n            IDENTITY_PROPERTIES.reduce(\r\n                (tmp, key, idx) =>\r\n                    tmp\r\n                        + (idx === 0 ? '' : '/')\r\n                        + (identity[key] ? identity[key] : ''),\r\n                '')\r\n        }<`, '');\r\n    const sortedFeatures = features.sort().reduce(\r\n        (tmp, feature) => `${tmp + feature}<`, '');\r\n\r\n    return b64_sha1(sortedIdentities + sortedFeatures);\r\n}\r\n\r\n/**\r\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\r\n */\r\nexport default class Caps extends Listenable {\r\n    /**\r\n     * Constructs new Caps instance.\r\n     * @param {Strophe.Connection} connection the strophe connection object\r\n     * @param {String} node the value of the node attribute of the \"c\" xml node\r\n     * that will be sent to the other participants\r\n     */\r\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\r\n        super();\r\n        this.node = node;\r\n        this.disco = connection.disco;\r\n        if (!this.disco) {\r\n            throw new Error(\r\n                'Missing strophe-plugins '\r\n                + '(disco plugin is required)!');\r\n        }\r\n\r\n        this.versionToCapabilities = Object.create(null);\r\n        this.jidToVersion = Object.create(null);\r\n        this.version = '';\r\n        this.rooms = new Set();\r\n\r\n        const emuc = connection.emuc;\r\n\r\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\r\n            room => this._addChatRoom(room));\r\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\r\n            room => this._removeChatRoom(room));\r\n        Object.keys(emuc.rooms).forEach(jid => {\r\n            this._addChatRoom(emuc.rooms[jid]);\r\n        });\r\n\r\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\r\n        this.disco.addFeature(Strophe.NS.CAPS);\r\n        connection.addHandler(this._handleCaps.bind(this), Strophe.NS.CAPS);\r\n\r\n        this._onMucMemberLeft = this._removeJidToVersionEntry.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Adds new feature to the list of supported features for the local\r\n     * participant\r\n     * @param {String} feature the name of the feature.\r\n     * @param {boolean} submit if true - new presence with updated \"c\" node\r\n     * will be sent.\r\n     */\r\n    addFeature(feature, submit = false) {\r\n        this.disco.addFeature(feature);\r\n        this._generateVersion();\r\n        if (submit) {\r\n            this.submit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a feature from the list of supported features for the local\r\n     * participant\r\n     * @param {String} feature the name of the feature.\r\n     * @param {boolean} submit if true - new presence with updated \"c\" node\r\n     * will be sent.\r\n     */\r\n    removeFeature(feature, submit = false) {\r\n        this.disco.removeFeature(feature);\r\n        this._generateVersion();\r\n        if (submit) {\r\n            this.submit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends new presence stanza for every room from the list of rooms.\r\n     */\r\n    submit() {\r\n        this.rooms.forEach(room => room.sendPresence());\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for a participant.\r\n     * @param {String} jid the jid of the participant\r\n     * @param {int} timeout the timeout in ms for reply from the participant.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeatures(jid, timeout = 5000) {\r\n        const user\r\n            = jid in this.jidToVersion ? this.jidToVersion[jid] : null;\r\n\r\n        if (!user || !(user.version in this.versionToCapabilities)) {\r\n            const node = user ? `${user.node}#${user.version}` : null;\r\n\r\n            return this._getDiscoInfo(jid, node, timeout)\r\n                .then(({ features, identities }) => {\r\n                    if (user) {\r\n                        const sha = generateSha(\r\n                            Array.from(identities),\r\n                            Array.from(features)\r\n                        );\r\n                        const receivedNode = `${user.node}#${sha}`;\r\n\r\n                        if (receivedNode === node) {\r\n                            this.versionToCapabilities[receivedNode] = features;\r\n\r\n                            return features;\r\n                        }\r\n\r\n                        // Check once if it has been cached asynchronously.\r\n                        if (this.versionToCapabilities[receivedNode]) {\r\n                            return this.versionToCapabilities[receivedNode];\r\n                        }\r\n\r\n                        logger.error(`Expected node ${node} but received ${\r\n                            receivedNode}`);\r\n\r\n                        return Promise.reject(ERROR_FEATURE_VERSION_MISMATCH);\r\n                    }\r\n\r\n                    return features;\r\n                });\r\n        }\r\n\r\n        return Promise.resolve(this.versionToCapabilities[user.version]);\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for a host.\r\n     * @param {String} jid the jid of the host\r\n     * @param {int} timeout the timeout in ms for reply from the host.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\r\n        return this._getDiscoInfo(jid, node, timeout);\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features and identities for a host.\r\n     * @param {String} jid the jid of the host\r\n     * @param {String|null} node the node to query\r\n     * @param {int} timeout the timeout in ms for reply from the host.\r\n     * @returns {Promise<Object>}\r\n     * @private\r\n     */\r\n    _getDiscoInfo(jid, node, timeout) {\r\n        return new Promise((resolve, reject) =>\r\n            this.disco.info(jid, node, response => {\r\n                const features = new Set();\r\n                const identities = new Set();\r\n\r\n                $(response)\r\n                    .find('>query>feature')\r\n                    .each(\r\n                        (_, el) => features.add(el.getAttribute('var')));\r\n                $(response)\r\n                    .find('>query>identity')\r\n                    .each(\r\n                        (_, el) => identities.add({\r\n                            type: el.getAttribute('type'),\r\n                            name: el.getAttribute('name'),\r\n                            category: el.getAttribute('category')\r\n                        }));\r\n                resolve({\r\n                    features,\r\n                    identities });\r\n            }, reject, timeout)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\r\n     * and adds \"c\" element to the presences of the room.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _addChatRoom(room) {\r\n        this.rooms.add(room);\r\n        room.addListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\r\n        this._fixChatRoomPresenceMap(room);\r\n    }\r\n\r\n    /**\r\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\r\n     * added from the Caps class.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _removeChatRoom(room) {\r\n        this.rooms.delete(room);\r\n        room.removeListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\r\n    }\r\n\r\n    /**\r\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _fixChatRoomPresenceMap(room) {\r\n        room.addToPresence('c', {\r\n            attributes: {\r\n                xmlns: Strophe.NS.CAPS,\r\n                hash: HASH,\r\n                node: this.node,\r\n                ver: this.version\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles this.version changes.\r\n     */\r\n    _notifyVersionChanged() {\r\n        // update the version for all rooms\r\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\r\n    }\r\n\r\n    /**\r\n     * Generates the value for the \"ver\" attribute.\r\n     */\r\n    _generateVersion() {\r\n        this.version\r\n            = generateSha(this.disco._identities, this.disco._features);\r\n\r\n        this._notifyVersionChanged();\r\n    }\r\n\r\n    /**\r\n     * Parses the \"c\" xml node from presence.\r\n     * @param {DOMElement} stanza the presence packet\r\n     */\r\n    _handleCaps(stanza) {\r\n        const from = stanza.getAttribute('from');\r\n        const caps = stanza.querySelector('c');\r\n        const version = caps.getAttribute('ver');\r\n        const node = caps.getAttribute('node');\r\n        const oldVersion = this.jidToVersion[from];\r\n\r\n        this.jidToVersion[from] = { version,\r\n            node };\r\n        if (oldVersion && oldVersion.version !== version) {\r\n            this.eventEmitter.emit(XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\r\n                from);\r\n        }\r\n\r\n        // return true to not remove the handler from Strophe\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Removes entry from this.jidToVersion map.\r\n     * @param {String} jid the jid to be removed.\r\n     */\r\n    _removeJidToVersionEntry(jid) {\r\n        if (jid in this.jidToVersion) {\r\n            delete this.jidToVersion[jid];\r\n        }\r\n    }\r\n}\r\n","/* global $, __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport Lobby from './Lobby';\r\nimport XmppConnection from './XmppConnection';\r\nimport Moderator from './moderator';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nexport const parser = {\r\n    packet2JSON(xmlElement, nodes) {\r\n        for (const child of Array.from(xmlElement.children)) {\r\n            const node = {\r\n                attributes: {},\r\n                children: [],\r\n                tagName: child.tagName\r\n            };\r\n\r\n            for (const attr of Array.from(child.attributes)) {\r\n                node.attributes[attr.name] = attr.value;\r\n            }\r\n            const text = Strophe.getText(child);\r\n\r\n            if (text) {\r\n                // Using Strophe.getText will do work for traversing all direct\r\n                // child text nodes but returns an escaped value, which is not\r\n                // desirable at this point.\r\n                node.value = Strophe.xmlunescape(text);\r\n            }\r\n            nodes.push(node);\r\n            this.packet2JSON(child, node.children);\r\n        }\r\n    },\r\n    json2packet(nodes, packet) {\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            if (node) {\r\n                packet.c(node.tagName, node.attributes);\r\n                if (node.value) {\r\n                    packet.t(node.value);\r\n                }\r\n                if (node.children) {\r\n                    this.json2packet(node.children, packet);\r\n                }\r\n                packet.up();\r\n            }\r\n        }\r\n\r\n        // packet.up();\r\n    }\r\n};\r\n\r\n/**\r\n * Returns array of JS objects from the presence JSON associated with the passed\r\n / nodeName\r\n * @param pres the presence JSON\r\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\r\n */\r\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\r\n    const res = [];\r\n\r\n    for (let i = 0; i < pres.length; i++) {\r\n        if (pres[i].tagName === nodeName) {\r\n            res.push(pres[i]);\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\r\n// of chaining function calls, allow long function call chains.\r\n/* eslint-disable newline-per-chained-call */\r\n\r\n/**\r\n * Array of affiliations that are allowed in members only room.\r\n * @type {string[]}\r\n */\r\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\r\n\r\n/**\r\n *\r\n */\r\nexport default class ChatRoom extends Listenable {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param {XmppConnection} connection - The XMPP connection instance.\r\n     * @param jid\r\n     * @param password\r\n     * @param XMPP\r\n     * @param options\r\n     * @param {boolean} options.disableFocus - when set to {@code false} will\r\n     * not invite Jicofo into the room.\r\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\r\n     * This is intended to be used only for lobby rooms.\r\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\r\n     */\r\n    constructor(connection, jid, password, XMPP, options) {\r\n        super();\r\n        this.xmpp = XMPP;\r\n        this.connection = connection;\r\n        this.roomjid = Strophe.getBareJidFromJid(jid);\r\n        this.myroomjid = jid;\r\n        this.password = password;\r\n        logger.info(`Joined MUC as ${this.myroomjid}`);\r\n        this.members = {};\r\n        this.presMap = {};\r\n        this.presHandlers = {};\r\n        this._removeConnListeners = [];\r\n        this.joined = false;\r\n        this.role = null;\r\n        this.focusMucJid = null;\r\n        this.noBridgeAvailable = false;\r\n        this.options = options || {};\r\n        this.moderator\r\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\r\n                connection: this.xmpp.options,\r\n                conference: this.options\r\n            });\r\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\r\n            this.lobby = new Lobby(this);\r\n        }\r\n        this.initPresenceMap(options);\r\n        this.lastPresences = {};\r\n        this.phoneNumber = null;\r\n        this.phonePin = null;\r\n        this.connectionTimes = {};\r\n        this.participantPropertyListener = null;\r\n\r\n        this.locked = false;\r\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     */\r\n    initPresenceMap(options = {}) {\r\n        this.presMap.to = this.myroomjid;\r\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\r\n        this.presMap.nodes = [];\r\n\r\n        if (options.statsId) {\r\n            this.presMap.nodes.push({\r\n                'tagName': 'stats-id',\r\n                'value': options.statsId\r\n            });\r\n        }\r\n\r\n        // We need to broadcast 'videomuted' status from the beginning, cause\r\n        // Jicofo makes decisions based on that. Initialize it with 'false'\r\n        // here.\r\n        this.addVideoInfoToPresence(false);\r\n\r\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\r\n            this.presMap.nodes.push({\r\n                'tagName': 'region',\r\n                'attributes': {\r\n                    id: options.deploymentInfo.userRegion,\r\n                    xmlns: 'http://jitsi.org/jitsi-meet'\r\n                }\r\n            });\r\n        }\r\n\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    getLastPresence(mucNick) {\r\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\r\n    }\r\n\r\n    /**\r\n     * Joins the chat room.\r\n     * @param {string} password - Password to unlock room on joining.\r\n     * @param {Object} customJoinPresenceExtensions - Key values object to be used\r\n     * for the initial presence, they key will be an xmpp node and its text is the value,\r\n     * and those will be added to the initial <x xmlns='http://jabber.org/protocol/muc'/>\r\n     * @returns {Promise} - resolved when join completes. At the time of this\r\n     * writing it's never rejected.\r\n     */\r\n    join(password, customJoinPresenceExtensions) {\r\n        this.password = password;\r\n\r\n        return new Promise(resolve => {\r\n            this.options.disableFocus\r\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\r\n\r\n            const preJoin\r\n                = this.options.disableFocus\r\n                    ? Promise.resolve()\r\n                    : this.moderator.allocateConferenceFocus();\r\n\r\n            preJoin.then(() => {\r\n                this.sendPresence(true, customJoinPresenceExtensions);\r\n                this._removeConnListeners.push(\r\n                    this.connection.addEventListener(\r\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\r\n                        this.onConnStatusChanged.bind(this))\r\n                );\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param fromJoin - Whether this is initial presence to join the room.\r\n     * @param customJoinPresenceExtensions - Object of key values to be added to the initial presence only.\r\n     */\r\n    sendPresence(fromJoin, customJoinPresenceExtensions) {\r\n        const to = this.presMap.to;\r\n\r\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\r\n            // Too early to send presence - not initialized\r\n            return;\r\n        }\r\n\r\n        const pres = $pres({ to });\r\n\r\n        // xep-0045 defines: \"including in the initial presence stanza an empty\r\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\r\n        // namespace\" and subsequent presences should not include that or it can\r\n        // be considered as joining, and server can send us the message history\r\n        // for the room on every presence\r\n        if (fromJoin) {\r\n            pres.c('x', { xmlns: this.presMap.xns });\r\n\r\n            if (this.password) {\r\n                pres.c('password').t(this.password).up();\r\n            }\r\n            if (customJoinPresenceExtensions) {\r\n                Object.keys(customJoinPresenceExtensions).forEach(key => {\r\n                    pres.c(key).t(customJoinPresenceExtensions[key]).up();\r\n                });\r\n            }\r\n            pres.up();\r\n        }\r\n\r\n        parser.json2packet(this.presMap.nodes, pres);\r\n\r\n        // we store time we last synced presence state\r\n        this.presenceSyncTime = Date.now();\r\n\r\n        this.connection.send(pres);\r\n        if (fromJoin) {\r\n            // XXX We're pressed for time here because we're beginning a complex\r\n            // and/or lengthy conference-establishment process which supposedly\r\n            // involves multiple RTTs. We don't have the time to wait for\r\n            // Strophe to decide to send our IQ.\r\n            this.connection.flush();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the presence unavailable, signaling the server\r\n     * we want to leave the room.\r\n     */\r\n    doLeave() {\r\n        logger.log('do leave', this.myroomjid);\r\n        const pres = $pres({ to: this.myroomjid,\r\n            type: 'unavailable' });\r\n\r\n        this.presMap.length = 0;\r\n\r\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\r\n        // means that there may not be enough time to send the unavailable\r\n        // presence. Switching Strophe to synchronous sending is not much of an\r\n        // option because it may lead to a noticeable delay in navigating away\r\n        // from the current location. As a compromise, we will try to increase\r\n        // the chances of sending the unavailable presence within the short time\r\n        // span that we have upon unloading by invoking flush() on the\r\n        // connection. We flush() once before sending/queuing the unavailable\r\n        // presence in order to attemtp to have the unavailable presence at the\r\n        // top of the send queue. We flush() once more after sending/queuing the\r\n        // unavailable presence in order to attempt to have it sent as soon as\r\n        // possible.\r\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\r\n        !this.connection.isUsingWebSocket && this.connection.flush();\r\n        this.connection.send(pres);\r\n        this.connection.flush();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    discoRoomInfo() {\r\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\r\n\r\n        const getInfo\r\n            = $iq({\r\n                type: 'get',\r\n                to: this.roomjid\r\n            })\r\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\r\n\r\n        this.connection.sendIQ(getInfo, result => {\r\n            const locked\r\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\r\n                    .length\r\n                    === 1;\r\n\r\n            if (locked !== this.locked) {\r\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\r\n                this.locked = locked;\r\n            }\r\n\r\n            const meetingIdValEl\r\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\r\n\r\n            if (meetingIdValEl.length) {\r\n                this.setMeetingId(meetingIdValEl.text());\r\n            } else {\r\n                logger.warn('No meeting ID from backend');\r\n            }\r\n\r\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\r\n\r\n            const lobbyRoomField\r\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\r\n\r\n            if (this.lobby) {\r\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\r\n            }\r\n\r\n            if (membersOnly !== this.membersOnlyEnabled) {\r\n                this.membersOnlyEnabled = membersOnly;\r\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\r\n            }\r\n\r\n        }, error => {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n            logger.error('Error getting room info: ', error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the meeting unique Id (received from the backend).\r\n     *\r\n     * @param {string} meetingId - The new meetings id.\r\n     * @returns {void}\r\n     */\r\n    setMeetingId(meetingId) {\r\n        if (this.meetingId !== meetingId) {\r\n            if (this.meetingId) {\r\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\r\n            }\r\n            this.meetingId = meetingId;\r\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    createNonAnonymousRoom() {\r\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\r\n\r\n        if (this.options.disableDiscoInfo) {\r\n            return;\r\n        }\r\n\r\n        const getForm = $iq({ type: 'get',\r\n            to: this.roomjid })\r\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\r\n            .c('x', { xmlns: 'jabber:x:data',\r\n                type: 'submit' });\r\n\r\n        this.connection.sendIQ(getForm, form => {\r\n            if (!$(form).find(\r\n                    '>query>x[xmlns=\"jabber:x:data\"]'\r\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\r\n                const errmsg = 'non-anonymous rooms not supported';\r\n\r\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n                logger.error(errmsg);\r\n\r\n                return;\r\n            }\r\n\r\n            const formSubmit = $iq({ to: this.roomjid,\r\n                type: 'set' })\r\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\r\n\r\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\r\n                type: 'submit' });\r\n\r\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\r\n                .c('value')\r\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\r\n\r\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\r\n                .c('value').t('anyone').up().up();\r\n\r\n            this.connection.sendIQ(formSubmit);\r\n\r\n        }, error => {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n            logger.error('Error getting room configuration form: ', error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles Xmpp Connection status updates.\r\n     *\r\n     * @param {Strophe.Status} status - The Strophe connection status.\r\n     */\r\n    onConnStatusChanged(status) {\r\n        // Send cached presence when the XMPP connection is re-established.\r\n        if (status === XmppConnection.Status.CONNECTED) {\r\n            this.sendPresence();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresence(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const member = {};\r\n        const statusEl = pres.getElementsByTagName('status')[0];\r\n\r\n        if (statusEl) {\r\n            member.status = statusEl.textContent || '';\r\n        }\r\n        let hasStatusUpdate = false;\r\n        let hasVersionUpdate = false;\r\n        const xElement\r\n            = pres.getElementsByTagNameNS(\r\n                'http://jabber.org/protocol/muc#user', 'x')[0];\r\n        const mucUserItem\r\n            = xElement && xElement.getElementsByTagName('item')[0];\r\n\r\n        member.affiliation\r\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\r\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\r\n\r\n        // Focus recognition\r\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\r\n\r\n        member.jid = jid;\r\n        member.isFocus\r\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\r\n        member.isHiddenDomain\r\n            = jid && jid.indexOf('@') > 0\r\n                && this.options.hiddenDomain\r\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\r\n\r\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\r\n            fromHiddenDomain: member.isHiddenDomain,\r\n            presence: pres\r\n        });\r\n\r\n        const xEl = pres.querySelector('x');\r\n\r\n        if (xEl) {\r\n            xEl.remove();\r\n        }\r\n\r\n        const nodes = [];\r\n\r\n        parser.packet2JSON(pres, nodes);\r\n        this.lastPresences[from] = nodes;\r\n\r\n        // process nodes to extract data needed for MUC_JOINED and\r\n        // MUC_MEMBER_JOINED events\r\n        const extractIdentityInformation = node => {\r\n            const identity = {};\r\n            const userInfo = node.children.find(c => c.tagName === 'user');\r\n\r\n            if (userInfo) {\r\n                identity.user = {};\r\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\r\n                    const child\r\n                        = userInfo.children.find(c => c.tagName === tag);\r\n\r\n                    if (child) {\r\n                        identity.user[tag] = child.value;\r\n                    }\r\n                }\r\n            }\r\n            const groupInfo = node.children.find(c => c.tagName === 'group');\r\n\r\n            if (groupInfo) {\r\n                identity.group = groupInfo.value;\r\n            }\r\n\r\n            return identity;\r\n        };\r\n\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            switch (node.tagName) {\r\n            case 'bot': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n                const { type } = attributes;\r\n\r\n                member.botType = type;\r\n                break;\r\n            }\r\n            case 'nick':\r\n                member.nick = node.value;\r\n                break;\r\n            case 'userId':\r\n                member.id = node.value;\r\n                break;\r\n            case 'stats-id':\r\n                member.statsID = node.value;\r\n                break;\r\n            case 'identity':\r\n                member.identity = extractIdentityInformation(node);\r\n                break;\r\n            case 'stat': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n                const { name } = attributes;\r\n\r\n                if (name === 'version') {\r\n                    member.version = attributes.value;\r\n                }\r\n                break;\r\n            }\r\n            }\r\n        }\r\n\r\n        if (from === this.myroomjid) {\r\n            const newRole\r\n                = member.affiliation === 'owner' ? member.role : 'none';\r\n\r\n            if (this.role !== newRole) {\r\n                this.role = newRole;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\r\n                    this.role);\r\n            }\r\n            if (!this.joined) {\r\n                this.joined = true;\r\n                const now = this.connectionTimes['muc.joined']\r\n                    = window.performance.now();\r\n\r\n                logger.log('(TIME) MUC joined:\\t', now);\r\n\r\n                // set correct initial state of locked\r\n                if (this.password) {\r\n                    this.locked = true;\r\n                }\r\n\r\n                // Re-send presence in case any presence updates were added,\r\n                // but blocked from sending, during the join process.\r\n                // send the presence only if there was a modification after we had synced it\r\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\r\n                    this.sendPresence();\r\n                }\r\n\r\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\r\n\r\n                // Now let's check the disco-info to retrieve the\r\n                // meeting Id if any\r\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\r\n            }\r\n        } else if (jid === undefined) {\r\n            logger.info('Ignoring member with undefined JID');\r\n        } else if (this.members[from] === undefined) {\r\n            // new participant\r\n            this.members[from] = member;\r\n            logger.log('entered', from, member);\r\n            hasStatusUpdate = member.status !== undefined;\r\n            hasVersionUpdate = member.version !== undefined;\r\n            if (member.isFocus) {\r\n                this._initFocus(from, jid);\r\n            } else {\r\n                // identity is being added to member joined, so external\r\n                // services can be notified for that (currently identity is\r\n                // not used inside library)\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_MEMBER_JOINED,\r\n                    from,\r\n                    member.nick,\r\n                    member.role,\r\n                    member.isHiddenDomain,\r\n                    member.statsID,\r\n                    member.status,\r\n                    member.identity,\r\n                    member.botType,\r\n                    member.jid);\r\n\r\n                // we are reporting the status with the join\r\n                // so we do not want a second event about status update\r\n                hasStatusUpdate = false;\r\n            }\r\n        } else {\r\n            // Presence update for existing participant\r\n            // Watch role change:\r\n            const memberOfThis = this.members[from];\r\n\r\n            if (memberOfThis.role !== member.role) {\r\n                memberOfThis.role = member.role;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\r\n            }\r\n\r\n            // affiliation changed\r\n            if (memberOfThis.affiliation !== member.affiliation) {\r\n                memberOfThis.affiliation = member.affiliation;\r\n            }\r\n\r\n            // fire event that botType had changed\r\n            if (memberOfThis.botType !== member.botType) {\r\n                memberOfThis.botType = member.botType;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\r\n                    from,\r\n                    member.botType);\r\n            }\r\n\r\n            if (member.isFocus) {\r\n                // From time to time first few presences of the focus are not\r\n                // containing it's jid. That way we can mark later the focus\r\n                // member instead of not marking it at all and not starting the\r\n                // conference.\r\n                // FIXME: Maybe there is a better way to handle this issue. It\r\n                // seems there is some period of time in prosody that the\r\n                // configuration form is received but not applied. And if any\r\n                // participant joins during that period of time the first\r\n                // presence from the focus won't contain\r\n                // <item jid=\"focus...\" />.\r\n                memberOfThis.isFocus = true;\r\n                this._initFocus(from, jid);\r\n            }\r\n\r\n            // store the new display name\r\n            if (member.displayName) {\r\n                memberOfThis.displayName = member.displayName;\r\n            }\r\n\r\n            // update stored status message to be able to detect changes\r\n            if (memberOfThis.status !== member.status) {\r\n                hasStatusUpdate = true;\r\n                memberOfThis.status = member.status;\r\n            }\r\n\r\n            if (memberOfThis.version !== member.version) {\r\n                hasVersionUpdate = true;\r\n                memberOfThis.version = member.version;\r\n            }\r\n        }\r\n\r\n        // after we had fired member or room joined events, lets fire events\r\n        // for the rest info we got in presence\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            switch (node.tagName) {\r\n            case 'nick':\r\n                if (!member.isFocus) {\r\n                    const displayName\r\n                        = this.xmpp.options.displayJids\r\n                            ? Strophe.getResourceFromJid(from)\r\n                            : member.nick;\r\n\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\r\n                        from,\r\n                        displayName);\r\n                }\r\n                break;\r\n            case 'bridgeNotAvailable':\r\n                if (member.isFocus && !this.noBridgeAvailable) {\r\n                    this.noBridgeAvailable = true;\r\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\r\n                }\r\n                break;\r\n            case 'conference-properties':\r\n                if (member.isFocus) {\r\n                    const properties = {};\r\n\r\n                    for (let j = 0; j < node.children.length; j++) {\r\n                        const { attributes } = node.children[j];\r\n\r\n                        if (attributes && attributes.key) {\r\n                            properties[attributes.key] = attributes.value;\r\n                        }\r\n                    }\r\n\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\r\n                }\r\n                break;\r\n            case 'transcription-status': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n\r\n                const { status } = attributes;\r\n\r\n                if (status && status !== this.transcriptionStatus) {\r\n                    this.transcriptionStatus = status;\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\r\n                        status\r\n                    );\r\n                }\r\n\r\n\r\n                break;\r\n            }\r\n            case 'call-control': {\r\n                const att = node.attributes;\r\n\r\n                if (!att) {\r\n                    break;\r\n                }\r\n                this.phoneNumber = att.phone || null;\r\n                this.phonePin = att.pin || null;\r\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\r\n                break;\r\n            }\r\n            default:\r\n                this.processNode(node, from);\r\n            }\r\n        }\r\n\r\n        // Trigger status message update if necessary\r\n        if (hasStatusUpdate) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.PRESENCE_STATUS,\r\n                from,\r\n                member.status);\r\n        }\r\n\r\n        if (hasVersionUpdate) {\r\n            logger.info(`Received version for ${jid}: ${member.version}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize some properties when the focus participant is verified.\r\n     * @param from jid of the focus\r\n     * @param mucJid the jid of the focus in the muc\r\n     */\r\n    _initFocus(from, mucJid) {\r\n        this.focusMucJid = from;\r\n\r\n        logger.info(`Ignore focus: ${from}, real JID: ${mucJid}`);\r\n        this.xmpp.caps.getFeatures(mucJid, 15000).then(features => {\r\n            this.focusFeatures = features;\r\n            logger.info(`Jicofo supports restart by terminate: ${this.supportsRestartByTerminate()}`);\r\n        }, error => {\r\n            logger.error('Failed to discover Jicofo features', error && error.message);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the special listener to be used for \"command\"s whose name starts\r\n     * with \"jitsi_participant_\".\r\n     */\r\n    setParticipantPropertyListener(listener) {\r\n        this.participantPropertyListener = listener;\r\n    }\r\n\r\n    /**\r\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\r\n     * @returns {boolean}\r\n     */\r\n    supportsRestartByTerminate() {\r\n        return this.focusFeatures\r\n            ? this.focusFeatures.has('https://jitsi.org/meet/jicofo/terminate-restart')\r\n            : false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param node\r\n     * @param from\r\n     */\r\n    processNode(node, from) {\r\n        // make sure we catch all errors coming from any handler\r\n        // otherwise we can remove the presence handler from strophe\r\n        try {\r\n            let tagHandlers = this.presHandlers[node.tagName];\r\n\r\n            if (node.tagName.startsWith('jitsi_participant_')) {\r\n                tagHandlers = [ this.participantPropertyListener ];\r\n            }\r\n\r\n            if (tagHandlers) {\r\n                tagHandlers.forEach(handler => {\r\n                    handler(node, Strophe.getResourceFromJid(from), from);\r\n                });\r\n            }\r\n        } catch (e) {\r\n            GlobalOnErrorHandler.callErrorHandler(e);\r\n            logger.error(`Error processing:${node.tagName} node.`, e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send text message to the other participants in the conference\r\n     * @param message\r\n     * @param elementName\r\n     * @param nickname\r\n     */\r\n    sendMessage(message, elementName, nickname) {\r\n        const msg = $msg({ to: this.roomjid,\r\n            type: 'groupchat' });\r\n\r\n        // We are adding the message in a packet extension. If this element\r\n        // is different from 'body', we add a custom namespace.\r\n        // e.g. for 'json-message' extension of message stanza.\r\n        if (elementName === 'body') {\r\n            msg.c(elementName, message).up();\r\n        } else {\r\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\r\n                .up();\r\n        }\r\n        if (nickname) {\r\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\r\n                .t(nickname)\r\n                .up()\r\n                .up();\r\n        }\r\n        this.connection.send(msg);\r\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Send private text message to another participant of the conference\r\n     * @param id id/muc resource of the receiver\r\n     * @param message\r\n     * @param elementName\r\n     * @param nickname\r\n     */\r\n    sendPrivateMessage(id, message, elementName, nickname) {\r\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\r\n            type: 'chat' });\r\n\r\n        // We are adding the message in packet. If this element is different\r\n        // from 'body', we add our custom namespace for the same.\r\n        // e.g. for 'json-message' message extension.\r\n        if (elementName === 'body') {\r\n            msg.c(elementName, message).up();\r\n        } else {\r\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\r\n                .up();\r\n        }\r\n        if (nickname) {\r\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\r\n                .t(nickname)\r\n                .up()\r\n                .up();\r\n        }\r\n\r\n        this.connection.send(msg);\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\r\n    }\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param subject\r\n     */\r\n    setSubject(subject) {\r\n        const msg = $msg({ to: this.roomjid,\r\n            type: 'groupchat' });\r\n\r\n        msg.c('subject', subject);\r\n        this.connection.send(msg);\r\n    }\r\n\r\n    /**\r\n     * Called when participant leaves.\r\n     * @param jid the jid of the participant that leaves\r\n     * @param skipEvents optional params to skip any events, including check\r\n     * whether this is the focus that left\r\n     */\r\n    onParticipantLeft(jid, skipEvents) {\r\n        delete this.lastPresences[jid];\r\n\r\n        if (skipEvents) {\r\n            return;\r\n        }\r\n\r\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\r\n\r\n        this.moderator.onMucMemberLeft(jid);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     * @param from\r\n     */\r\n    onPresenceUnavailable(pres, from) {\r\n        // ignore presence\r\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\r\n            return true;\r\n        }\r\n\r\n        // room destroyed ?\r\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\r\n\r\n        if (destroySelect.length) {\r\n            let reason;\r\n            const reasonSelect\r\n                = $(pres).find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n                        + '>destroy>reason');\r\n\r\n            if (reasonSelect.length) {\r\n                reason = reasonSelect.text();\r\n            }\r\n\r\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\r\n            this.connection.emuc.doLeave(this.roomjid);\r\n\r\n            return true;\r\n        }\r\n\r\n        // Status code 110 indicates that this notification is \"self-presence\".\r\n        const isSelfPresence\r\n            = $(pres)\r\n                .find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\r\n                        + 'status[code=\"110\"]')\r\n                .length;\r\n        const isKick\r\n            = $(pres)\r\n                .find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n                        + '>status[code=\"307\"]')\r\n                .length;\r\n        const membersKeys = Object.keys(this.members);\r\n\r\n        if (isKick) {\r\n            const actorSelect\r\n                = $(pres)\r\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\r\n\r\n            let actorNick;\r\n\r\n            if (actorSelect.length) {\r\n                actorNick = actorSelect.attr('nick');\r\n            }\r\n\r\n            // we first fire the kicked so we can show the participant\r\n            // who kicked, before notifying that participant left\r\n            // we fire kicked for us and for any participant kicked\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.KICKED,\r\n                isSelfPresence,\r\n                actorNick,\r\n                Strophe.getResourceFromJid(from));\r\n        }\r\n\r\n        if (isSelfPresence) {\r\n            // If the status code is 110 this means we're leaving and we would\r\n            // like to remove everyone else from our view, so we trigger the\r\n            // event.\r\n            membersKeys.forEach(jid => {\r\n                const member = this.members[jid];\r\n\r\n                delete this.members[jid];\r\n                this.onParticipantLeft(jid, member.isFocus);\r\n            });\r\n            this.connection.emuc.doLeave(this.roomjid);\r\n\r\n            // we fire muc_left only if this is not a kick,\r\n            // kick has both statuses 110 and 307.\r\n            if (!isKick) {\r\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\r\n            }\r\n        } else {\r\n            delete this.members[from];\r\n            this.onParticipantLeft(from, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param msg\r\n     * @param from\r\n     */\r\n    onMessage(msg, from) {\r\n        const nick\r\n            = $(msg).find('>nick[xmlns=\"http://jabber.org/protocol/nick\"]')\r\n                .text()\r\n            || Strophe.getResourceFromJid(from);\r\n\r\n        const type = msg.getAttribute('type');\r\n\r\n        if (type === 'error') {\r\n            const errorMsg = $(msg).find('>error>text').text();\r\n\r\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\r\n\r\n            return true;\r\n        }\r\n\r\n        const txt = $(msg).find('>body').text();\r\n        const subject = $(msg).find('>subject');\r\n\r\n        if (subject.length) {\r\n            const subjectText = subject.text();\r\n\r\n            if (subjectText || subjectText === '') {\r\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\r\n\t\t\t\t//Bizwell. by.jhhan\r\n\t\t\t\ttry {\r\n\t\t\t\t\tdocument.title = `${subjectText} | ${interfaceConfig.APP_NAME}`;\r\n\t\t\t\t} catch (e) {}\r\n                logger.log(`Subject is changed to ${subjectText}`);\r\n            }\r\n        }\r\n\r\n        // xep-0203 delay\r\n        let stamp = $(msg).find('>delay').attr('stamp');\r\n\r\n        if (!stamp) {\r\n            // or xep-0091 delay, UTC timestamp\r\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\r\n\r\n            if (stamp) {\r\n                // the format is CCYYMMDDThh:mm:ss\r\n                const dateParts\r\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\r\n\r\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\r\n            }\r\n        }\r\n\r\n        if (from === this.roomjid) {\r\n            let invite;\r\n\r\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\r\n                this.discoRoomInfo();\r\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\r\n                        && invite.length) {\r\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\r\n                let password;\r\n\r\n                if (passwordSelect && passwordSelect.length) {\r\n                    password = passwordSelect.text();\r\n                }\r\n\r\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\r\n                    from, invite.attr('from'), txt, password);\r\n            }\r\n        }\r\n\r\n        const jsonMessage = $(msg).find('>json-message').text();\r\n\r\n        if (jsonMessage) {\r\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\r\n\r\n            // We emit this event if the message is a valid json, and is not\r\n            // delivered after a delay, i.e. stamp is undefined.\r\n            // e.g. - subtitles should not be displayed if delayed.\r\n            if (parsedJson && stamp === undefined) {\r\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\r\n                    from, parsedJson);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (txt) {\r\n            if (type === 'chat') {\r\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\r\n                        from, nick, txt, this.myroomjid, stamp);\r\n            } else if (type === 'groupchat') {\r\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\r\n                        from, nick, txt, this.myroomjid, stamp);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     * @param from\r\n     */\r\n    onPresenceError(pres, from) {\r\n        if ($(pres)\r\n                .find(\r\n                    '>error[type=\"auth\"]'\r\n                        + '>not-authorized['\r\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\r\n                .length) {\r\n            logger.log('on password required', from);\r\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\r\n        } else if ($(pres)\r\n                .find(\r\n                    '>error[type=\"cancel\"]'\r\n                        + '>not-allowed['\r\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\r\n                .length) {\r\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\r\n\r\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\r\n                // enter the room by replying with 'not-authorized'. This would\r\n                // result in reconnection from authorized domain.\r\n                // We're either missing Jicofo/Prosody config for anonymous\r\n                // domains or something is wrong.\r\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\r\n\r\n            } else {\r\n                logger.warn('onPresError ', pres);\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\r\n            }\r\n        } else if ($(pres).find('>error>service-unavailable').length) {\r\n            logger.warn('Maximum users limit for the room has been reached',\r\n                pres);\r\n            //Bizwell. error message 넘김. by.jhhan\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR, $(pres).find('>error>text').text());\r\n        } else if ($(pres)\r\n            .find(\r\n                '>error[type=\"auth\"]'\r\n                + '>registration-required['\r\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\r\n\r\n            // let's extract the lobby jid from the custom field\r\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\r\n            let lobbyRoomJid;\r\n\r\n            if (lobbyRoomNode.length) {\r\n                lobbyRoomJid = lobbyRoomNode.text();\r\n            }\r\n\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\r\n        } else {\r\n            logger.warn('onPresError ', pres);\r\n            //Bizwell. error message 넘김. by.jhhan\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR, $(pres).find('>error>text').text());\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param affiliation\r\n     */\r\n    setAffiliation(jid, affiliation) {\r\n        const grantIQ = $iq({\r\n            to: this.roomjid,\r\n            type: 'set'\r\n        })\r\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n        .c('item', {\r\n            affiliation,\r\n            nick: Strophe.getResourceFromJid(jid)\r\n        })\r\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\r\n        .up().up().up();\r\n\r\n        this.connection.sendIQ(\r\n            grantIQ,\r\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\r\n            error => logger.log('Set affiliation of participant error: ', error));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     */\r\n    kick(jid) {\r\n        const kickIQ = $iq({ to: this.roomjid,\r\n            type: 'set' })\r\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\r\n                role: 'none' })\r\n            .c('reason').t('You have been kicked.').up().up().up();\r\n\r\n        this.connection.sendIQ(\r\n            kickIQ,\r\n            result => logger.log('Kick participant with jid: ', jid, result),\r\n            error => logger.log('Kick participant error: ', error));\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @param onNotSupported\r\n     */\r\n    lockRoom(key, onSuccess, onError, onNotSupported) {\r\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\r\n        this.connection.sendIQ(\r\n            $iq({\r\n                to: this.roomjid,\r\n                type: 'get'\r\n            })\r\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\r\n            res => {\r\n                if ($(res)\r\n                        .find(\r\n                            '>query>x[xmlns=\"jabber:x:data\"]'\r\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\r\n                        .length) {\r\n                    const formsubmit\r\n                        = $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set'\r\n                        })\r\n                            .c('query', {\r\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\r\n                            });\r\n\r\n                    formsubmit.c('x', {\r\n                        xmlns: 'jabber:x:data',\r\n                        type: 'submit'\r\n                    });\r\n                    formsubmit\r\n                        .c('field', { 'var': 'FORM_TYPE' })\r\n                        .c('value')\r\n                        .t('http://jabber.org/protocol/muc#roomconfig')\r\n                        .up()\r\n                        .up();\r\n                    formsubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\r\n                        .c('value')\r\n                        .t(key)\r\n                        .up()\r\n                        .up();\r\n                    formsubmit\r\n                        .c('field',\r\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\r\n                        .c('value')\r\n                        .t(key === null || key.length === 0 ? '0' : '1')\r\n                        .up()\r\n                        .up();\r\n\r\n                    // if members only enabled\r\n                    if (this.membersOnlyEnabled) {\r\n                        formsubmit\r\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\r\n                            .c('value')\r\n                            .t('true')\r\n                            .up()\r\n                            .up();\r\n                    }\r\n\r\n                    // Fixes a bug in prosody 0.9.+\r\n                    // https://prosody.im/issues/issue/373\r\n                    formsubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\r\n                        .c('value')\r\n                        .t('anyone')\r\n                        .up()\r\n                        .up();\r\n\r\n                    this.connection.sendIQ(formsubmit, onSuccess, onError);\r\n                } else {\r\n                    onNotSupported();\r\n                }\r\n            },\r\n            onError);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Turns off or on the members only config for the main room.\r\n     *\r\n     * @param {boolean} enabled - Whether to turn it on or off.\r\n     * @param onSuccess - optional callback.\r\n     * @param onError - optional callback.\r\n     */\r\n    setMembersOnly(enabled, onSuccess, onError) {\r\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\r\n            // first grant membership to all that are in the room\r\n            // currently there is a bug in prosody where it handles only the first item\r\n            // that's why we will send iq per member\r\n            Object.values(this.members).forEach(m => {\r\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\r\n                    this.xmpp.connection.sendIQ(\r\n                        $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set' })\r\n                        .c('query', {\r\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n                        .c('item', {\r\n                            'affiliation': 'member',\r\n                            'jid': m.jid\r\n                        }).up().up());\r\n                }\r\n            });\r\n        }\r\n\r\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\r\n\r\n        this.xmpp.connection.sendIQ(\r\n            $iq({\r\n                to: this.roomjid,\r\n                type: 'get'\r\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\r\n            res => {\r\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\r\n                    const formToSubmit\r\n                        = $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set'\r\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\r\n\r\n                    formToSubmit.c('x', {\r\n                        xmlns: 'jabber:x:data',\r\n                        type: 'submit'\r\n                    });\r\n                    formToSubmit\r\n                        .c('field', { 'var': 'FORM_TYPE' })\r\n                        .c('value')\r\n                        .t('http://jabber.org/protocol/muc#roomconfig')\r\n                        .up()\r\n                        .up();\r\n                    formToSubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\r\n                        .c('value')\r\n                        .t(enabled ? 'true' : 'false')\r\n                        .up()\r\n                        .up();\r\n\r\n                    // if room is locked from other participant or we are locking it\r\n                    if (this.locked) {\r\n                        formToSubmit\r\n                            .c('field',\r\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\r\n                            .c('value')\r\n                            .t('1')\r\n                            .up()\r\n                            .up();\r\n                    }\r\n\r\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\r\n                } else {\r\n                    errorCallback(new Error('Setting members only room not supported!'));\r\n                }\r\n            },\r\n            errorCallback);\r\n    }\r\n\r\n    /**\r\n     * Adds the key to the presence map, overriding any previous value.\r\n     * @param key\r\n     * @param values\r\n     */\r\n    addToPresence(key, values) {\r\n        values.tagName = key;\r\n        this.removeFromPresence(key);\r\n        this.presMap.nodes.push(values);\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    /**\r\n     * Retrieves a value from the presence map.\r\n     *\r\n     * @param {string} key - The key to find the value for.\r\n     * @returns {Object?}\r\n     */\r\n    getFromPresence(key) {\r\n        return this.presMap.nodes.find(node => key === node.tagName);\r\n    }\r\n\r\n    /**\r\n     * Removes a key from the presence map.\r\n     * @param key\r\n     */\r\n    removeFromPresence(key) {\r\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\r\n\r\n        this.presMap.nodes = nodes;\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param name\r\n     * @param handler\r\n     */\r\n    addPresenceListener(name, handler) {\r\n        if (typeof handler !== 'function') {\r\n            throw new Error('\"handler\" is not a function');\r\n        }\r\n        let tagHandlers = this.presHandlers[name];\r\n\r\n        if (!tagHandlers) {\r\n            this.presHandlers[name] = tagHandlers = [];\r\n        }\r\n        if (tagHandlers.indexOf(handler) === -1) {\r\n            tagHandlers.push(handler);\r\n        } else {\r\n            logger.warn(\r\n                `Trying to add the same handler more than once for: ${name}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param name\r\n     * @param handler\r\n     */\r\n    removePresenceListener(name, handler) {\r\n        const tagHandlers = this.presHandlers[name];\r\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\r\n\r\n        // eslint-disable-next-line no-negated-condition\r\n        if (handlerIdx !== -1) {\r\n            tagHandlers.splice(handlerIdx, 1);\r\n        } else {\r\n            logger.warn(`Handler for: ${name} was not registered`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\r\n     * focus.\r\n     * @param mucJid the full MUC address of the user to be checked.\r\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\r\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\r\n     * the MUC then <tt>null</tt> is returned.\r\n     */\r\n    isFocus(mucJid) {\r\n        const member = this.members[mucJid];\r\n\r\n        if (member) {\r\n            return member.isFocus;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    isModerator() {\r\n        return this.role === 'moderator';\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param peerJid\r\n     */\r\n    getMemberRole(peerJid) {\r\n        if (this.members[peerJid]) {\r\n            return this.members[peerJid].role;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     * @param callback\r\n     */\r\n    setVideoMute(mute, callback) {\r\n        this.sendVideoInfoPresence(mute);\r\n        if (callback) {\r\n            callback(mute);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     * @param callback\r\n     */\r\n    setAudioMute(mute, callback) {\r\n        return this.sendAudioInfoPresence(mute, callback);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    addAudioInfoToPresence(mute) {\r\n        this.addToPresence(\r\n            'audiomuted',\r\n            {\r\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/audio' },\r\n                value: mute.toString()\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     * @param callback\r\n     */\r\n    sendAudioInfoPresence(mute, callback) {\r\n        this.addAudioInfoToPresence(mute);\r\n\r\n        // FIXME resend presence on CONNECTED\r\n        this.sendPresence();\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    addVideoInfoToPresence(mute) {\r\n        this.addToPresence(\r\n            'videomuted',\r\n            {\r\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/video' },\r\n                value: mute.toString()\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    sendVideoInfoPresence(mute) {\r\n        this.addVideoInfoToPresence(mute);\r\n        this.sendPresence();\r\n    }\r\n\r\n    /**\r\n     * Obtains the info about given media advertised in the MUC presence of\r\n     * the participant identified by the given endpoint JID.\r\n     * @param {string} endpointId the endpoint ID mapped to the participant\r\n     * which corresponds to MUC nickname.\r\n     * @param {MediaType} mediaType the type of the media for which presence\r\n     * info will be obtained.\r\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\r\n     * info or <tt>null</tt> either if there is no presence available or if\r\n     * the media type given is invalid.\r\n     */\r\n    getMediaPresenceInfo(endpointId, mediaType) {\r\n        // Will figure out current muted status by looking up owner's presence\r\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\r\n\r\n        if (!pres) {\r\n            // No presence available\r\n            return null;\r\n        }\r\n        const data = {\r\n            muted: false, // unmuted by default\r\n            videoType: undefined // no video type by default\r\n        };\r\n        let mutedNode = null;\r\n\r\n        if (mediaType === MediaType.AUDIO) {\r\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\r\n        } else if (mediaType === MediaType.VIDEO) {\r\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\r\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\r\n\r\n            if (videoTypeNode.length > 0) {\r\n                data.videoType = videoTypeNode[0].value;\r\n            }\r\n        } else {\r\n            logger.error(`Unsupported media type: ${mediaType}`);\r\n\r\n            return null;\r\n        }\r\n\r\n        data.muted = mutedNode.length > 0 && mutedNode[0].value === 'true';\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the SIP calls are supported and false otherwise\r\n     */\r\n    isSIPCallingSupported() {\r\n        if (this.moderator) {\r\n            return this.moderator.isSipGatewayEnabled();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Dials a number.\r\n     * @param number the number\r\n     */\r\n    dial(number) {\r\n        return this.connection.rayo.dial(number, 'fromnumber',\r\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\r\n            this.focusMucJid);\r\n    }\r\n\r\n    /**\r\n     * Hangup an existing call\r\n     */\r\n    hangup() {\r\n        return this.connection.rayo.hangup();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Lobby}\r\n     */\r\n    getLobby() {\r\n        return this.lobby;\r\n    }\r\n\r\n    /**\r\n     * Returns the phone number for joining the conference.\r\n     */\r\n    getPhoneNumber() {\r\n        return this.phoneNumber;\r\n    }\r\n\r\n    /**\r\n     * Returns the pin for joining the conference with phone.\r\n     */\r\n    getPhonePin() {\r\n        return this.phonePin;\r\n    }\r\n\r\n    /**\r\n     * Returns the meeting unique ID if any came from backend.\r\n     *\r\n     * @returns {string} - The meeting ID.\r\n     */\r\n    getMeetingId() {\r\n        return this.meetingId;\r\n    }\r\n\r\n    /**\r\n     * Mutes remote participant.\r\n     * @param jid of the participant\r\n     * @param mute\r\n     */\r\n    muteParticipant(jid, mute) {\r\n        logger.info('set mute', mute);\r\n        const iqToFocus = $iq(\r\n            { to: this.focusMucJid,\r\n                type: 'set' })\r\n            .c('mute', {\r\n                xmlns: 'http://jitsi.org/jitmeet/audio',\r\n                jid\r\n            })\r\n            .t(mute.toString())\r\n            .up();\r\n\r\n        this.connection.sendIQ(\r\n            iqToFocus,\r\n            result => logger.log('set mute', result),\r\n            error => logger.log('set mute error', error));\r\n    }\r\n\r\n    /**\r\n     * TODO: Document\r\n     * @param iq\r\n     */\r\n    onMute(iq) {\r\n        const from = iq.getAttribute('from');\r\n\r\n        if (from !== this.focusMucJid) {\r\n            logger.warn('Ignored mute from non focus peer');\r\n\r\n            return;\r\n        }\r\n        const mute = $(iq).find('mute');\r\n\r\n        if (mute.length && mute.text() === 'true') {\r\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\r\n        } else {\r\n            // XXX Why do we support anything but muting? Why do we encode the\r\n            // value in the text of the element? Why do we use a separate XML\r\n            // namespace?\r\n            logger.warn('Ignoring a mute request which does not explicitly '\r\n                + 'specify a positive mute command.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clean any listeners or resources, executed on leaving.\r\n     */\r\n    clean() {\r\n        this._removeConnListeners.forEach(remove => remove());\r\n        this._removeConnListeners = [];\r\n\r\n        this.joined = false;\r\n    }\r\n\r\n    /**\r\n     * Leaves the room. Closes the jingle session.\r\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\r\n     * less than 5s after sending presence unavailable. Otherwise the promise is\r\n     * rejected.\r\n     */\r\n    leave() {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\r\n            const eventEmitter = this.eventEmitter;\r\n\r\n            this.clean();\r\n\r\n            /**\r\n             *\r\n             * @param doReject\r\n             */\r\n            function onMucLeft(doReject = false) {\r\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\r\n                clearTimeout(timeout);\r\n                if (doReject) {\r\n                    // the timeout expired\r\n                    reject(new Error('The timeout for the confirmation about '\r\n                        + 'leaving the room expired.'));\r\n                } else {\r\n                    resolve();\r\n                }\r\n            }\r\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\r\n            this.doLeave();\r\n        });\r\n    }\r\n}\r\n\r\n/* eslint-enable newline-per-chained-call */\r\n","/**\r\n * The transciption is on.\r\n *\r\n * @type {String}\r\n */\r\nexport const ON = 'on';\r\n\r\n/**\r\n * The transciption is off.\r\n *\r\n * @type {String}\r\n */\r\nexport const OFF = 'off';\r\n","/* global __filename, module */\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport browser from '../browser';\r\n\r\nimport RTCUtils from './RTCUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Maps our handler types to MediaStreamTrack properties.\r\n */\r\nconst trackHandler2Prop = {\r\n    'track_mute': 'onmute', // Not supported on FF\r\n    'track_unmute': 'onunmute',\r\n    'track_ended': 'onended'\r\n};\r\n\r\n/**\r\n * Represents a single media track (either audio or video).\r\n */\r\nexport default class JitsiTrack extends EventEmitter {\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Represents a single media track (either audio or video).\r\n     * @constructor\r\n     * @param conference the rtc instance\r\n     * @param stream the WebRTC MediaStream instance\r\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\r\n     * the given <tt>stream</tt>.\r\n     * @param streamInactiveHandler the function that will handle\r\n     *        onended/oninactive events of the stream.\r\n     * @param trackMediaType the media type of the JitsiTrack\r\n     * @param videoType the VideoType for this track if any\r\n     */\r\n    constructor(\r\n            conference,\r\n            stream,\r\n            track,\r\n            streamInactiveHandler,\r\n            trackMediaType,\r\n            videoType) {\r\n        super();\r\n\r\n        // aliases for addListener/removeListener\r\n        this.addEventListener = this.addListener;\r\n        this.removeEventListener = this.off = this.removeListener;\r\n\r\n        /**\r\n         * Array with the HTML elements that are displaying the streams.\r\n         * @type {Array}\r\n         */\r\n        this.containers = [];\r\n        this.conference = conference;\r\n        this.audioLevel = -1;\r\n        this.type = trackMediaType;\r\n        this.track = track;\r\n        this.videoType = videoType;\r\n        this.handlers = new Map();\r\n\r\n        /**\r\n         * Indicates whether this JitsiTrack has been disposed. If true, this\r\n         * JitsiTrack is to be considered unusable and operations involving it\r\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\r\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\r\n         * @type {boolean}\r\n         */\r\n        this.disposed = false;\r\n\r\n        /**\r\n         * The inactive handler which will be triggered when the underlying\r\n         * <tt>MediaStream</tt> ends.\r\n         *\r\n         * @private\r\n         * @type {Function}\r\n         */\r\n        this._streamInactiveHandler = streamInactiveHandler;\r\n\r\n        this._setStream(stream);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\r\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\r\n     * a onended event on the MediaStreamTrack.\r\n     * @param {Function} handler the handler\r\n     */\r\n    _addMediaStreamInactiveHandler(handler) {\r\n        if (browser.isFirefox()) {\r\n            this.track.onended = handler;\r\n        } else {\r\n            this.stream.oninactive = handler;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\r\n     * depending on the passed type.\r\n     * @param {string} type the type of the handler that is going to be set\r\n     * @param {Function} handler the handler.\r\n     */\r\n    _setHandler(type, handler) {\r\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\r\n            logger.error(`Invalid handler type ${type}`);\r\n\r\n            return;\r\n        }\r\n        if (handler) {\r\n            this.handlers.set(type, handler);\r\n        } else {\r\n            this.handlers.delete(type);\r\n        }\r\n\r\n        if (this.stream) {\r\n            for (const track of this.stream.getTracks()) {\r\n                track[trackHandler2Prop[type]] = handler;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unregisters all event handlers bound to the underlying media stream/track\r\n     * @private\r\n     */\r\n    _unregisterHandlers() {\r\n        if (!this.stream) {\r\n            logger.warn(\r\n                `${this}: unable to unregister handlers - no stream object`);\r\n\r\n            return;\r\n        }\r\n\r\n        for (const type of this.handlers.keys()) {\r\n            // FIXME Why only video tracks?\r\n            for (const videoTrack of this.stream.getVideoTracks()) {\r\n                videoTrack[trackHandler2Prop[type]] = undefined;\r\n            }\r\n        }\r\n        if (this._streamInactiveHandler) {\r\n            this._addMediaStreamInactiveHandler(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the stream property of JitsiTrack object and sets all stored\r\n     * handlers to it.\r\n     *\r\n     * @param {MediaStream} stream the new stream.\r\n     * @protected\r\n     */\r\n    _setStream(stream) {\r\n        if (this.stream === stream) {\r\n            return;\r\n        }\r\n\r\n        this.stream = stream;\r\n\r\n        // TODO Practically, that's like the opposite of _unregisterHandlers\r\n        // i.e. may be abstracted into a function/method called\r\n        // _registerHandlers for clarity and easing the maintenance of the two\r\n        // pieces of source code.\r\n        if (this.stream) {\r\n            for (const type of this.handlers.keys()) {\r\n                this._setHandler(type, this.handlers.get(type));\r\n            }\r\n            if (this._streamInactiveHandler) {\r\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the type (audio or video) of this track.\r\n     */\r\n    getType() {\r\n        return this.type;\r\n    }\r\n\r\n    /**\r\n     * Check if this is an audio track.\r\n     */\r\n    isAudioTrack() {\r\n        return this.getType() === MediaType.AUDIO;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\r\n     * according to it's 'muted' field status.\r\n     * @return {boolean} <tt>true</tt> if the underlying\r\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\r\n     */\r\n    isWebRTCTrackMuted() {\r\n        return this.track && this.track.muted;\r\n    }\r\n\r\n    /**\r\n     * Check if this is a video track.\r\n     */\r\n    isVideoTrack() {\r\n        return this.getType() === MediaType.VIDEO;\r\n    }\r\n\r\n    /**\r\n     * Checks whether this is a local track.\r\n     * @abstract\r\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\r\n     */\r\n    isLocal() {\r\n        throw new Error('Not implemented by subclass');\r\n    }\r\n\r\n    /**\r\n     * Check whether this is a local audio track.\r\n     *\r\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\r\n     */\r\n    isLocalAudioTrack() {\r\n        return this.isAudioTrack() && this.isLocal();\r\n    }\r\n\r\n    /**\r\n     * Returns the WebRTC MediaStream instance.\r\n     */\r\n    getOriginalStream() {\r\n        return this.stream;\r\n    }\r\n\r\n    /**\r\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\r\n     * @returns {String|null}\r\n     */\r\n    getStreamId() {\r\n        return this.stream ? this.stream.id : null;\r\n    }\r\n\r\n    /**\r\n     * Return the underlying WebRTC MediaStreamTrack\r\n     * @returns {MediaStreamTrack}\r\n     */\r\n    getTrack() {\r\n        return this.track;\r\n    }\r\n\r\n    /**\r\n     * Return the underlying WebRTC MediaStreamTrack label\r\n     * @returns {string}\r\n     */\r\n    getTrackLabel() {\r\n        return this.track.label;\r\n    }\r\n\r\n    /**\r\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\r\n     * @returns {String|null}\r\n     */\r\n    getTrackId() {\r\n        return this.track ? this.track.id : null;\r\n    }\r\n\r\n    /**\r\n     * Return meaningful usage label for this track depending on it's media and\r\n     * eventual video type.\r\n     * @returns {string}\r\n     */\r\n    getUsageLabel() {\r\n        if (this.isAudioTrack()) {\r\n            return 'mic';\r\n        }\r\n\r\n        return this.videoType ? this.videoType : 'default';\r\n    }\r\n\r\n    /**\r\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\r\n     * @param container the video/audio container to which this stream is\r\n     *        attached and for which event will be fired.\r\n     * @private\r\n     */\r\n    _maybeFireTrackAttached(container) {\r\n        if (this.conference && container) {\r\n            this.conference._onTrackAttach(this, container);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attaches the MediaStream of this track to an HTML container.\r\n     * Adds the container to the list of containers that are displaying the\r\n     * track.\r\n     *\r\n     * @param container the HTML container which can be 'video' or 'audio'\r\n     * element.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    attach(container) {\r\n        if (this.stream) {\r\n            this._onTrackAttach(container);\r\n            RTCUtils.attachMediaStream(container, this.stream);\r\n        }\r\n        this.containers.push(container);\r\n        this._maybeFireTrackAttached(container);\r\n        this._attachTTFMTracker(container);\r\n    }\r\n\r\n    /**\r\n     * Removes this JitsiTrack from the passed HTML container.\r\n     *\r\n     * @param container the HTML container to detach from this JitsiTrack. If\r\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\r\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\r\n     * which this JitsiTrack is currently attached.\r\n     */\r\n    detach(container) {\r\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\r\n            const c = cs[i];\r\n\r\n            if (!container) {\r\n                this._onTrackDetach(c);\r\n                RTCUtils.attachMediaStream(c, null);\r\n            }\r\n            if (!container || c === container) {\r\n                cs.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        if (container) {\r\n            this._onTrackDetach(container);\r\n            RTCUtils.attachMediaStream(container, null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been attached to a new container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been detached from a container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Attach time to first media tracker only if there is conference and only\r\n     * for the first element.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Removes attached event listeners.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    dispose() {\r\n        this.removeAllListeners();\r\n\r\n        this.disposed = true;\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Returns true if this is a video track and the source of the video is a\r\n     * screen capture as opposed to a camera.\r\n     */\r\n    isScreenSharing() {\r\n        // FIXME: Should be fixed or removed.\r\n    }\r\n\r\n    /**\r\n     * Returns id of the track.\r\n     * @returns {string|null} id of the track or null if this is fake track.\r\n     */\r\n    getId() {\r\n        if (this.stream) {\r\n            return RTCUtils.getStreamID(this.stream);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the MediaStream is active/not ended.\r\n     * When there is no check for active we don't have information and so\r\n     * will return that stream is active (in case of FF).\r\n     * @returns {boolean} whether MediaStream is active.\r\n     */\r\n    isActive() {\r\n        if (typeof this.stream.active !== 'undefined') {\r\n            return this.stream.active;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio level for the stream\r\n     * @param {number} audioLevel value between 0 and 1\r\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\r\n     * is source for the audio level. It can be <tt>undefined</tt> for\r\n     * a local track if the audio level was measured outside of the\r\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\r\n     */\r\n    setAudioLevel(audioLevel, tpc) {\r\n        let newAudioLevel = audioLevel;\r\n\r\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\r\n        // remote tracks, browser reports last known audio levels even when the remote user is\r\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\r\n        // Remote tracks have the tpc info present while local tracks do not.\r\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\r\n            newAudioLevel = 0;\r\n        }\r\n\r\n        if (this.audioLevel !== newAudioLevel) {\r\n            this.audioLevel = newAudioLevel;\r\n            this.emit(\r\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                newAudioLevel,\r\n                tpc);\r\n\r\n        // LocalStatsCollector reports a value of 0.008 for muted mics\r\n        // and a value of 0 when there is no audio input.\r\n        } else if (this.audioLevel === 0\r\n            && newAudioLevel === 0\r\n            && this.isLocal()\r\n            && !this.isWebRTCTrackMuted()) {\r\n            this.emit(\r\n                JitsiTrackEvents.NO_AUDIO_INPUT,\r\n                newAudioLevel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the msid of the stream attached to the JitsiTrack object or null\r\n     * if no stream is attached.\r\n     */\r\n    getMSID() {\r\n        const streamId = this.getStreamId();\r\n        const trackId = this.getTrackId();\r\n\r\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\r\n    }\r\n\r\n    /**\r\n     * Sets new audio output device for track's DOM elements. Video tracks are\r\n     * ignored.\r\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\r\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\r\n     * @returns {Promise}\r\n     */\r\n    setAudioOutput(audioOutputDeviceId) {\r\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\r\n            return Promise.reject(\r\n                new Error('Audio output device change is not supported'));\r\n        }\r\n\r\n        // All audio communication is done through audio tracks, so ignore\r\n        // changing audio output for video tracks at all.\r\n        if (this.isVideoTrack()) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return (\r\n            Promise.all(\r\n                this.containers.map(\r\n                    element =>\r\n                        element.setSinkId(audioOutputDeviceId)\r\n                            .catch(error => {\r\n                                logger.warn(\r\n                                    'Failed to change audio output device on'\r\n                                        + ' element. Default or previously set'\r\n                                        + ' audio output device will be used.',\r\n                                    element,\r\n                                    error);\r\n                                throw error;\r\n                            }))\r\n            )\r\n                .then(() => {\r\n                    this.emit(\r\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\r\n                        audioOutputDeviceId);\r\n                }));\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport RTC from '../RTC/RTC';\r\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\r\n\r\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\r\n\r\n/**\r\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\r\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\r\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\r\n * score is published to consumers via an EventEmitter.\r\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\r\n *\r\n * @fires VAD_SCORE_PUBLISHED\r\n */\r\nexport default class TrackVADEmitter extends EventEmitter {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\r\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\r\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\r\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\r\n     */\r\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\r\n        super();\r\n\r\n        /**\r\n         * Sample rate of the ScriptProcessorNode.\r\n         */\r\n        this._procNodeSampleRate = procNodeSampleRate;\r\n\r\n        /**\r\n         * VAD Processor that allows us to calculate VAD score for PCM samples\r\n         */\r\n        this._vadProcessor = vadProcessor;\r\n\r\n        /**\r\n         * The JitsiLocalTrack instance.\r\n         */\r\n        this._localTrack = jitsiLocalTrack;\r\n\r\n        /**\r\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\r\n         */\r\n        this._bufferResidue = new Float32Array([]);\r\n\r\n        /**\r\n         * The AudioContext instance with the preferred sample frequency.\r\n         */\r\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\r\n\r\n        /**\r\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\r\n         * saves a couple of function calls.\r\n         */\r\n        this._vadSampleSize = vadProcessor.getSampleLength();\r\n\r\n        /**\r\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\r\n         * sample rate.\r\n         */\r\n        this._onAudioProcess = this._onAudioProcess.bind(this);\r\n\r\n        this._initializeAudioContext();\r\n    }\r\n\r\n    /**\r\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\r\n     *\r\n     * @param {string} micDeviceId - Target microphone device id.\r\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\r\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\r\n     * The processor needs to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\r\n     */\r\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\r\n        return RTC.obtainAudioAndVideoPermissions({\r\n            devices: [ 'audio' ],\r\n            micDeviceId\r\n        }).then(localTrack => {\r\n            // We only expect one audio track when specifying a device id.\r\n            if (!localTrack[0]) {\r\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\r\n            }\r\n\r\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\r\n\r\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\r\n            // life cycle is handled by whoever created this instance.\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets up the audio graph in the AudioContext.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _initializeAudioContext() {\r\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\r\n\r\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\r\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\r\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\r\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\r\n        // with audio worklet when it's mature enough and has more browser support.\r\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\r\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\r\n    }\r\n\r\n    /**\r\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\r\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\r\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\r\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\r\n     *\r\n     *\r\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\r\n     * @returns {void}\r\n     * @fires VAD_SCORE_PUBLISHED\r\n     */\r\n    _onAudioProcess(audioEvent) {\r\n        // Prepend the residue PCM buffer from the previous process callback.\r\n        const inData = audioEvent.inputBuffer.getChannelData(0);\r\n        const completeInData = [ ...this._bufferResidue, ...inData ];\r\n        const sampleTimestamp = Date.now();\r\n\r\n        let i = 0;\r\n\r\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\r\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\r\n\r\n            // The VAD processor might change the values inside the array so we make a copy.\r\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\r\n\r\n            this.emit(VAD_SCORE_PUBLISHED, {\r\n                timestamp: sampleTimestamp,\r\n                score: vadScore,\r\n                pcmData: pcmSample,\r\n                deviceId: this._localTrack.getDeviceId()\r\n            });\r\n        }\r\n\r\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\r\n    }\r\n\r\n    /**\r\n     * Connects the nodes in the AudioContext to start the flow of audio data.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _connectAudioGraph() {\r\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\r\n        this._audioSource.connect(this._audioProcessingNode);\r\n        this._audioProcessingNode.connect(this._audioContext.destination);\r\n    }\r\n\r\n    /**\r\n     * Disconnects the nodes in the AudioContext.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _disconnectAudioGraph() {\r\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\r\n        // resulting in calls with and uninitialized context.\r\n        // eslint-disable-next-line no-empty-function\r\n        this._audioProcessingNode.onaudioprocess = () => {};\r\n        this._audioProcessingNode.disconnect();\r\n        this._audioSource.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Cleanup potentially acquired resources.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _cleanupResources() {\r\n        this._disconnectAudioGraph();\r\n        this._localTrack.stopStream();\r\n    }\r\n\r\n    /**\r\n     * Get the associated track device ID.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getDeviceId() {\r\n        return this._localTrack.getDeviceId();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the associated track label.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getTrackLabel() {\r\n        return this._localTrack.getDeviceLabel();\r\n    }\r\n\r\n    /**\r\n     * Start the emitter by connecting the audio graph.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    start() {\r\n        this._connectAudioGraph();\r\n    }\r\n\r\n    /**\r\n     * Stops the emitter by disconnecting the audio graph.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        this._disconnectAudioGraph();\r\n        this._bufferResidue = [];\r\n    }\r\n\r\n    /**\r\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\r\n     *\r\n     * @returns {void}\r\n     */\r\n    destroy() {\r\n        if (this._destroyed) {\r\n            return;\r\n        }\r\n\r\n        this._cleanupResources();\r\n        this._destroyed = true;\r\n    }\r\n}\r\n","/**\r\n * Adapter that creates AudioContext objects depending on the browser.\r\n *\r\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\r\n */\r\nexport function createAudioContext(options) {\r\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\r\n\r\n    if (!AudioContextImpl) {\r\n        return undefined;\r\n    }\r\n\r\n    return new AudioContextImpl(options);\r\n}\r\n","/**\r\n * Indicates that the end-to-end round-trip-time for a participant has changed.\r\n */\r\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\r\n","\r\n/**\r\n * Promise-like object which can be passed around for resolving it later. It\r\n * implements the \"thenable\" interface, so it can be used wherever a Promise\r\n * could be used.\r\n *\r\n * In addition a \"reject on timeout\" functionality is provided.\r\n */\r\nexport default class Deferred {\r\n    /**\r\n     * Instantiates a Deferred object.\r\n     */\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = (...args) => {\r\n                this.clearRejectTimeout();\r\n                resolve(...args);\r\n            };\r\n            this.reject = (...args) => {\r\n                this.clearRejectTimeout();\r\n                reject(...args);\r\n            };\r\n        });\r\n        this.then = this.promise.then.bind(this.promise);\r\n        this.catch = this.promise.catch.bind(this.promise);\r\n    }\r\n\r\n    /**\r\n     * Clears the reject timeout.\r\n     */\r\n    clearRejectTimeout() {\r\n        clearTimeout(this._timeout);\r\n    }\r\n\r\n    /**\r\n     * Rejects the promise after the given timeout.\r\n     */\r\n    setRejectTimeout(ms) {\r\n        this._timeout = setTimeout(() => {\r\n            this.reject(new Error('timeout'));\r\n        }, ms);\r\n    }\r\n}\r\n","/**\r\n * A model for keeping track of each user's total\r\n * time as a dominant speaker. The model also\r\n * keeps track of the user's last known name\r\n * in case the user has left the meeting,\r\n * which is also tracked.\r\n */\r\nclass SpeakerStats {\r\n    /**\r\n     * Initializes a new SpeakerStats instance.\r\n     *\r\n     * @constructor\r\n     * @param {string} userId - The id of the user being tracked.\r\n     * @param {string} displayName - The name of the user being tracked.\r\n     * @param {boolean} isLocalStats - True if the stats model tracks\r\n     * the local user.\r\n     * @returns {void}\r\n     */\r\n    constructor(userId, displayName, isLocalStats) {\r\n        this._userId = userId;\r\n        this.setDisplayName(displayName);\r\n        this._isLocalStats = isLocalStats || false;\r\n        this.setDominantSpeaker(false);\r\n        this.totalDominantSpeakerTime = 0;\r\n        this._dominantSpeakerStart = 0;\r\n        this._hasLeft = false;\r\n    }\r\n\r\n    /**\r\n     * Get the user id being tracked.\r\n     *\r\n     * @returns {string} The user id.\r\n     */\r\n    getUserId() {\r\n        return this._userId;\r\n    }\r\n\r\n    /**\r\n     * Get the name of the user being tracked.\r\n     *\r\n     * @returns {string} The user name.\r\n     */\r\n    getDisplayName() {\r\n        return this.displayName;\r\n    }\r\n\r\n    /**\r\n     * Updates the last known name of the user being tracked.\r\n     *\r\n     * @param {string} - The user name.\r\n     * @returns {void}\r\n     */\r\n    setDisplayName(newName) {\r\n        this.displayName = newName;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the stats are tracking the local user.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isLocalStats() {\r\n        return this._isLocalStats;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tracked user is currently a dominant speaker.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isDominantSpeaker() {\r\n        return this._dominantSpeakerStart > 0;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tracked user is currently a dominant speaker.\r\n     *\r\n     * @param {boolean} - If true, the user will being accumulating time\r\n     * as dominant speaker. If false, the user will not accumulate time\r\n     * and will record any time accumulated since starting as dominant speaker.\r\n     * @returns {void}\r\n     */\r\n    setDominantSpeaker(isNowDominantSpeaker) {\r\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\r\n            this._dominantSpeakerStart = Date.now();\r\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\r\n            const now = Date.now();\r\n            const timeElapsed = now - this._dominantSpeakerStart;\r\n\r\n            this.totalDominantSpeakerTime += timeElapsed;\r\n            this._dominantSpeakerStart = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get how long the tracked user has been dominant speaker.\r\n     *\r\n     * @returns {number} - The speaker time in milliseconds.\r\n     */\r\n    getTotalDominantSpeakerTime() {\r\n        let total = this.totalDominantSpeakerTime;\r\n\r\n        if (this.isDominantSpeaker()) {\r\n            total += Date.now() - this._dominantSpeakerStart;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * Get whether or not the user is still in the meeting.\r\n     *\r\n     * @returns {boolean} True if the user is no longer in the meeting.\r\n     */\r\n    hasLeft() {\r\n        return this._hasLeft;\r\n    }\r\n\r\n    /**\r\n     * Set the user as having left the meeting.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    markAsHasLeft() {\r\n        this._hasLeft = true;\r\n        this.setDominantSpeaker(false);\r\n    }\r\n}\r\n\r\nmodule.exports = SpeakerStats;\r\n","\r\nimport Listenable from '../../modules/util/Listenable';\r\n\r\n/**\r\n * An object that carries the info about specific media type advertised by\r\n * participant in the signaling channel.\r\n * @typedef {Object} PeerMediaInfo\r\n * @property {boolean} muted indicates if the media is currently muted\r\n * @property {VideoType|undefined} videoType the type of the video if applicable\r\n */\r\n\r\n/**\r\n * Interface used to expose the information carried over the signaling channel\r\n * which is not available to the RTC module in the media SDP.\r\n *\r\n * @interface SignalingLayer\r\n */\r\nexport default class SignalingLayer extends Listenable {\r\n\r\n    /**\r\n     * Obtains the endpoint ID for given SSRC.\r\n     * @param {number} ssrc the SSRC number.\r\n     * @return {string|null} the endpoint ID for given media SSRC.\r\n     */\r\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n    /**\r\n     * Obtains the info about given media advertised in the MUC presence of\r\n     * the participant identified by the given MUC JID.\r\n     * @param {string} owner the MUC jid of the participant for whom\r\n     * {@link PeerMediaInfo} will be obtained.\r\n     * @param {MediaType} mediaType the type of the media for which presence\r\n     * info will be obtained.\r\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\r\n     * info or <tt>null</tt> either if there is no presence available for given\r\n     * JID or if the media type given is invalid.\r\n     */\r\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n    getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\r\n        const firstLetterOfMediaType = mediaType.substring(0, 1);\r\n    \r\n        return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\r\n    }\r\n}\r\n\r\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\r\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\r\n\r\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\r\n}\r\n\r\nexport function getMediaTypeFromSourceName(sourceName) {\r\n    const firstLetterOfMediaTypeIdx = sourceName.indexOf('-') + 1;\r\n\r\n    if (firstLetterOfMediaTypeIdx <= 0) {\r\n        throw new Error(`Invalid source name: ${sourceName}`);\r\n    }\r\n\r\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\r\n\r\n    for (const type of Object.values(MediaType)) {\r\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\r\n            return type;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Invalid source name: ${sourceName}`);\r\n}\r\n","const AuthenticationEvents = {\r\n    /**\r\n     * Event callback arguments:\r\n     * function(authenticationEnabled, userIdentity)\r\n     * authenticationEnabled - indicates whether authentication has been enabled\r\n     *                         in this session\r\n     * userIdentity - if user has been logged in then it contains user name. If\r\n     *                contains 'null' or 'undefined' then user is not logged in.\r\n     */\r\n    IDENTITY_UPDATED: 'authentication.identity_updated'\r\n};\r\n\r\nmodule.exports = AuthenticationEvents;\r\n","/**\r\n * [js-md5]{@link https://github.com/emn178/js-md5}\r\n *\r\n * @namespace md5\r\n * @version 0.7.3\r\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\r\n * @copyright Chen, Yi-Cyuan 2014-2017\r\n * @license MIT\r\n */\r\n(function () {\r\n  'use strict';\r\n\r\n  var ERROR = 'input is invalid type';\r\n  var WINDOW = typeof window === 'object';\r\n  var root = WINDOW ? window : {};\r\n  if (root.JS_MD5_NO_WINDOW) {\r\n    WINDOW = false;\r\n  }\r\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\r\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\r\n  if (NODE_JS) {\r\n    root = global;\r\n  } else if (WEB_WORKER) {\r\n    root = self;\r\n  }\r\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\r\n  var AMD = typeof define === 'function' && define.amd;\r\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\r\n  var HEX_CHARS = '0123456789abcdef'.split('');\r\n  var EXTRA = [128, 32768, 8388608, -2147483648];\r\n  var SHIFT = [0, 8, 16, 24];\r\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\r\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\r\n\r\n  var blocks = [], buffer8;\r\n  if (ARRAY_BUFFER) {\r\n    var buffer = new ArrayBuffer(68);\r\n    buffer8 = new Uint8Array(buffer);\r\n    blocks = new Uint32Array(buffer);\r\n  }\r\n\r\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\r\n    Array.isArray = function (obj) {\r\n      return Object.prototype.toString.call(obj) === '[object Array]';\r\n    };\r\n  }\r\n\r\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\r\n    ArrayBuffer.isView = function (obj) {\r\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @method hex\r\n   * @memberof md5\r\n   * @description Output hash as hex string\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {String} Hex string\r\n   * @example\r\n   * md5.hex('The quick brown fox jumps over the lazy dog');\r\n   * // equal to\r\n   * md5('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method digest\r\n   * @memberof md5\r\n   * @description Output hash as bytes array\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Array} Bytes array\r\n   * @example\r\n   * md5.digest('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method array\r\n   * @memberof md5\r\n   * @description Output hash as bytes array\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Array} Bytes array\r\n   * @example\r\n   * md5.array('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method arrayBuffer\r\n   * @memberof md5\r\n   * @description Output hash as ArrayBuffer\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {ArrayBuffer} ArrayBuffer\r\n   * @example\r\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method buffer\r\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\r\n   * @memberof md5\r\n   * @description Output hash as ArrayBuffer\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {ArrayBuffer} ArrayBuffer\r\n   * @example\r\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method base64\r\n   * @memberof md5\r\n   * @description Output hash as base64 string\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {String} base64 string\r\n   * @example\r\n   * md5.base64('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  var createOutputMethod = function (outputType) {\r\n    return function (message) {\r\n      return new Md5(true).update(message)[outputType]();\r\n    };\r\n  };\r\n\r\n  /**\r\n   * @method create\r\n   * @memberof md5\r\n   * @description Create Md5 object\r\n   * @returns {Md5} Md5 object.\r\n   * @example\r\n   * var hash = md5.create();\r\n   */\r\n  /**\r\n   * @method update\r\n   * @memberof md5\r\n   * @description Create and update Md5 object\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Md5} Md5 object.\r\n   * @example\r\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\r\n   * // equal to\r\n   * var hash = md5.create();\r\n   * hash.update('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  var createMethod = function () {\r\n    var method = createOutputMethod('hex');\r\n    if (NODE_JS) {\r\n      method = nodeWrap(method);\r\n    }\r\n    method.create = function () {\r\n      return new Md5();\r\n    };\r\n    method.update = function (message) {\r\n      return method.create().update(message);\r\n    };\r\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\r\n      var type = OUTPUT_TYPES[i];\r\n      method[type] = createOutputMethod(type);\r\n    }\r\n    return method;\r\n  };\r\n\r\n  var nodeWrap = function (method) {\r\n    var crypto = eval(\"require('crypto')\");\r\n    var Buffer = eval(\"require('buffer').Buffer\");\r\n    var nodeMethod = function (message) {\r\n      if (typeof message === 'string') {\r\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\r\n      } else {\r\n        if (message === null || message === undefined) {\r\n          throw ERROR;\r\n        } else if (message.constructor === ArrayBuffer) {\r\n          message = new Uint8Array(message);\r\n        }\r\n      }\r\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\r\n        message.constructor === Buffer) {\r\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\r\n      } else {\r\n        return method(message);\r\n      }\r\n    };\r\n    return nodeMethod;\r\n  };\r\n\r\n  /**\r\n   * Md5 class\r\n   * @class Md5\r\n   * @description This is internal class.\r\n   * @see {@link md5.create}\r\n   */\r\n  function Md5(sharedMemory) {\r\n    if (sharedMemory) {\r\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n      this.blocks = blocks;\r\n      this.buffer8 = buffer8;\r\n    } else {\r\n      if (ARRAY_BUFFER) {\r\n        var buffer = new ArrayBuffer(68);\r\n        this.buffer8 = new Uint8Array(buffer);\r\n        this.blocks = new Uint32Array(buffer);\r\n      } else {\r\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n      }\r\n    }\r\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\r\n    this.finalized = this.hashed = false;\r\n    this.first = true;\r\n  }\r\n\r\n  /**\r\n   * @method update\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Update hash\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Md5} Md5 object.\r\n   * @see {@link md5.update}\r\n   */\r\n  Md5.prototype.update = function (message) {\r\n    if (this.finalized) {\r\n      return;\r\n    }\r\n\r\n    var notString, type = typeof message;\r\n    if (type !== 'string') {\r\n      if (type === 'object') {\r\n        if (message === null) {\r\n          throw ERROR;\r\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\r\n          message = new Uint8Array(message);\r\n        } else if (!Array.isArray(message)) {\r\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\r\n            throw ERROR;\r\n          }\r\n        }\r\n      } else {\r\n        throw ERROR;\r\n      }\r\n      notString = true;\r\n    }\r\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\r\n    var buffer8 = this.buffer8;\r\n\r\n    while (index < length) {\r\n      if (this.hashed) {\r\n        this.hashed = false;\r\n        blocks[0] = blocks[16];\r\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n      }\r\n\r\n      if (notString) {\r\n        if (ARRAY_BUFFER) {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            buffer8[i++] = message[index];\r\n          }\r\n        } else {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\r\n          }\r\n        }\r\n      } else {\r\n        if (ARRAY_BUFFER) {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            code = message.charCodeAt(index);\r\n            if (code < 0x80) {\r\n              buffer8[i++] = code;\r\n            } else if (code < 0x800) {\r\n              buffer8[i++] = 0xc0 | (code >> 6);\r\n              buffer8[i++] = 0x80 | (code & 0x3f);\r\n            } else if (code < 0xd800 || code >= 0xe000) {\r\n              buffer8[i++] = 0xe0 | (code >> 12);\r\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\r\n              buffer8[i++] = 0x80 | (code & 0x3f);\r\n            } else {\r\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n              buffer8[i++] = 0xf0 | (code >> 18);\r\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\r\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\r\n              buffer8[i++] = 0x80 | (code & 0x3f);\r\n            }\r\n          }\r\n        } else {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            code = message.charCodeAt(index);\r\n            if (code < 0x80) {\r\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\r\n            } else if (code < 0x800) {\r\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n            } else if (code < 0xd800 || code >= 0xe000) {\r\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n            } else {\r\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.lastByteIndex = i;\r\n      this.bytes += i - this.start;\r\n      if (i >= 64) {\r\n        this.start = i - 64;\r\n        this.hash();\r\n        this.hashed = true;\r\n      } else {\r\n        this.start = i;\r\n      }\r\n    }\r\n    if (this.bytes > 4294967295) {\r\n      this.hBytes += this.bytes / 4294967296 << 0;\r\n      this.bytes = this.bytes % 4294967296;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  Md5.prototype.finalize = function () {\r\n    if (this.finalized) {\r\n      return;\r\n    }\r\n    this.finalized = true;\r\n    var blocks = this.blocks, i = this.lastByteIndex;\r\n    blocks[i >> 2] |= EXTRA[i & 3];\r\n    if (i >= 56) {\r\n      if (!this.hashed) {\r\n        this.hash();\r\n      }\r\n      blocks[0] = blocks[16];\r\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n    }\r\n    blocks[14] = this.bytes << 3;\r\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\r\n    this.hash();\r\n  };\r\n\r\n  Md5.prototype.hash = function () {\r\n    var a, b, c, d, bc, da, blocks = this.blocks;\r\n\r\n    if (this.first) {\r\n      a = blocks[0] - 680876937;\r\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\r\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\r\n      d = (d << 12 | d >>> 20) + a << 0;\r\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\r\n      c = (c << 17 | c >>> 15) + d << 0;\r\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\r\n      b = (b << 22 | b >>> 10) + c << 0;\r\n    } else {\r\n      a = this.h0;\r\n      b = this.h1;\r\n      c = this.h2;\r\n      d = this.h3;\r\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\r\n      a = (a << 7 | a >>> 25) + b << 0;\r\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\r\n      d = (d << 12 | d >>> 20) + a << 0;\r\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\r\n      c = (c << 17 | c >>> 15) + d << 0;\r\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\r\n      b = (b << 22 | b >>> 10) + c << 0;\r\n    }\r\n\r\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\r\n    a = (a << 7 | a >>> 25) + b << 0;\r\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\r\n    d = (d << 12 | d >>> 20) + a << 0;\r\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\r\n    c = (c << 17 | c >>> 15) + d << 0;\r\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\r\n    b = (b << 22 | b >>> 10) + c << 0;\r\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\r\n    a = (a << 7 | a >>> 25) + b << 0;\r\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\r\n    d = (d << 12 | d >>> 20) + a << 0;\r\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\r\n    c = (c << 17 | c >>> 15) + d << 0;\r\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\r\n    b = (b << 22 | b >>> 10) + c << 0;\r\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\r\n    a = (a << 7 | a >>> 25) + b << 0;\r\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\r\n    d = (d << 12 | d >>> 20) + a << 0;\r\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\r\n    c = (c << 17 | c >>> 15) + d << 0;\r\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\r\n    b = (b << 22 | b >>> 10) + c << 0;\r\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\r\n    a = (a << 5 | a >>> 27) + b << 0;\r\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\r\n    d = (d << 9 | d >>> 23) + a << 0;\r\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\r\n    c = (c << 14 | c >>> 18) + d << 0;\r\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\r\n    b = (b << 20 | b >>> 12) + c << 0;\r\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\r\n    a = (a << 5 | a >>> 27) + b << 0;\r\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\r\n    d = (d << 9 | d >>> 23) + a << 0;\r\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\r\n    c = (c << 14 | c >>> 18) + d << 0;\r\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\r\n    b = (b << 20 | b >>> 12) + c << 0;\r\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\r\n    a = (a << 5 | a >>> 27) + b << 0;\r\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\r\n    d = (d << 9 | d >>> 23) + a << 0;\r\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\r\n    c = (c << 14 | c >>> 18) + d << 0;\r\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\r\n    b = (b << 20 | b >>> 12) + c << 0;\r\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\r\n    a = (a << 5 | a >>> 27) + b << 0;\r\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\r\n    d = (d << 9 | d >>> 23) + a << 0;\r\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\r\n    c = (c << 14 | c >>> 18) + d << 0;\r\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\r\n    b = (b << 20 | b >>> 12) + c << 0;\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[5] - 378558;\r\n    a = (a << 4 | a >>> 28) + b << 0;\r\n    d += (bc ^ a) + blocks[8] - 2022574463;\r\n    d = (d << 11 | d >>> 21) + a << 0;\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[11] + 1839030562;\r\n    c = (c << 16 | c >>> 16) + d << 0;\r\n    b += (da ^ c) + blocks[14] - 35309556;\r\n    b = (b << 23 | b >>> 9) + c << 0;\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[1] - 1530992060;\r\n    a = (a << 4 | a >>> 28) + b << 0;\r\n    d += (bc ^ a) + blocks[4] + 1272893353;\r\n    d = (d << 11 | d >>> 21) + a << 0;\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[7] - 155497632;\r\n    c = (c << 16 | c >>> 16) + d << 0;\r\n    b += (da ^ c) + blocks[10] - 1094730640;\r\n    b = (b << 23 | b >>> 9) + c << 0;\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[13] + 681279174;\r\n    a = (a << 4 | a >>> 28) + b << 0;\r\n    d += (bc ^ a) + blocks[0] - 358537222;\r\n    d = (d << 11 | d >>> 21) + a << 0;\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[3] - 722521979;\r\n    c = (c << 16 | c >>> 16) + d << 0;\r\n    b += (da ^ c) + blocks[6] + 76029189;\r\n    b = (b << 23 | b >>> 9) + c << 0;\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[9] - 640364487;\r\n    a = (a << 4 | a >>> 28) + b << 0;\r\n    d += (bc ^ a) + blocks[12] - 421815835;\r\n    d = (d << 11 | d >>> 21) + a << 0;\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[15] + 530742520;\r\n    c = (c << 16 | c >>> 16) + d << 0;\r\n    b += (da ^ c) + blocks[2] - 995338651;\r\n    b = (b << 23 | b >>> 9) + c << 0;\r\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\r\n    a = (a << 6 | a >>> 26) + b << 0;\r\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\r\n    d = (d << 10 | d >>> 22) + a << 0;\r\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\r\n    c = (c << 15 | c >>> 17) + d << 0;\r\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\r\n    b = (b << 21 | b >>> 11) + c << 0;\r\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\r\n    a = (a << 6 | a >>> 26) + b << 0;\r\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\r\n    d = (d << 10 | d >>> 22) + a << 0;\r\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\r\n    c = (c << 15 | c >>> 17) + d << 0;\r\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\r\n    b = (b << 21 | b >>> 11) + c << 0;\r\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\r\n    a = (a << 6 | a >>> 26) + b << 0;\r\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\r\n    d = (d << 10 | d >>> 22) + a << 0;\r\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\r\n    c = (c << 15 | c >>> 17) + d << 0;\r\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\r\n    b = (b << 21 | b >>> 11) + c << 0;\r\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\r\n    a = (a << 6 | a >>> 26) + b << 0;\r\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\r\n    d = (d << 10 | d >>> 22) + a << 0;\r\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\r\n    c = (c << 15 | c >>> 17) + d << 0;\r\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\r\n    b = (b << 21 | b >>> 11) + c << 0;\r\n\r\n    if (this.first) {\r\n      this.h0 = a + 1732584193 << 0;\r\n      this.h1 = b - 271733879 << 0;\r\n      this.h2 = c - 1732584194 << 0;\r\n      this.h3 = d + 271733878 << 0;\r\n      this.first = false;\r\n    } else {\r\n      this.h0 = this.h0 + a << 0;\r\n      this.h1 = this.h1 + b << 0;\r\n      this.h2 = this.h2 + c << 0;\r\n      this.h3 = this.h3 + d << 0;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @method hex\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as hex string\r\n   * @returns {String} Hex string\r\n   * @see {@link md5.hex}\r\n   * @example\r\n   * hash.hex();\r\n   */\r\n  Md5.prototype.hex = function () {\r\n    this.finalize();\r\n\r\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\r\n\r\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\r\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\r\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\r\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\r\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\r\n  };\r\n\r\n  /**\r\n   * @method toString\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as hex string\r\n   * @returns {String} Hex string\r\n   * @see {@link md5.hex}\r\n   * @example\r\n   * hash.toString();\r\n   */\r\n  Md5.prototype.toString = Md5.prototype.hex;\r\n\r\n  /**\r\n   * @method digest\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as bytes array\r\n   * @returns {Array} Bytes array\r\n   * @see {@link md5.digest}\r\n   * @example\r\n   * hash.digest();\r\n   */\r\n  Md5.prototype.digest = function () {\r\n    this.finalize();\r\n\r\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\r\n    return [\r\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\r\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\r\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\r\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\r\n    ];\r\n  };\r\n\r\n  /**\r\n   * @method array\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as bytes array\r\n   * @returns {Array} Bytes array\r\n   * @see {@link md5.array}\r\n   * @example\r\n   * hash.array();\r\n   */\r\n  Md5.prototype.array = Md5.prototype.digest;\r\n\r\n  /**\r\n   * @method arrayBuffer\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as ArrayBuffer\r\n   * @returns {ArrayBuffer} ArrayBuffer\r\n   * @see {@link md5.arrayBuffer}\r\n   * @example\r\n   * hash.arrayBuffer();\r\n   */\r\n  Md5.prototype.arrayBuffer = function () {\r\n    this.finalize();\r\n\r\n    var buffer = new ArrayBuffer(16);\r\n    var blocks = new Uint32Array(buffer);\r\n    blocks[0] = this.h0;\r\n    blocks[1] = this.h1;\r\n    blocks[2] = this.h2;\r\n    blocks[3] = this.h3;\r\n    return buffer;\r\n  };\r\n\r\n  /**\r\n   * @method buffer\r\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as ArrayBuffer\r\n   * @returns {ArrayBuffer} ArrayBuffer\r\n   * @see {@link md5.buffer}\r\n   * @example\r\n   * hash.buffer();\r\n   */\r\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\r\n\r\n  /**\r\n   * @method base64\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as base64 string\r\n   * @returns {String} base64 string\r\n   * @see {@link md5.base64}\r\n   * @example\r\n   * hash.base64();\r\n   */\r\n  Md5.prototype.base64 = function () {\r\n    var v1, v2, v3, base64Str = '', bytes = this.array();\r\n    for (var i = 0; i < 15;) {\r\n      v1 = bytes[i++];\r\n      v2 = bytes[i++];\r\n      v3 = bytes[i++];\r\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\r\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\r\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\r\n        BASE64_ENCODE_CHAR[v3 & 63];\r\n    }\r\n    v1 = bytes[i];\r\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\r\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\r\n      '==';\r\n    return base64Str;\r\n  };\r\n\r\n  var exports = createMethod();\r\n\r\n  if (COMMON_JS) {\r\n    module.exports = exports;\r\n  } else {\r\n    /**\r\n     * @method md5\b\r\n     * @description Md5 hash function, export to global in browsers.\r\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n     * @returns {String} md5 hashes\r\n     * @example\r\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\r\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\r\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\r\n     *\r\n     * // It also supports UTF-8 encoding\r\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\r\n     *\r\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\r\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\r\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\r\n     */\r\n    root.md5 = exports;\r\n    if (AMD) {\r\n      define(function () {\r\n        return exports;\r\n      });\r\n    }\r\n  }\r\n})();\r\n","/**\r\n * lodash (Custom Build) <https://lodash.com/>\r\n * Build: `lodash modularize exports=\"npm\" -o ./`\r\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\r\n * Released under MIT license <https://lodash.com/license>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n */\r\n\r\n/** Used as the `TypeError` message for \"Functions\" methods. */\r\nvar FUNC_ERROR_TEXT = 'Expected a function';\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar NAN = 0 / 0;\r\n\r\n/** `Object#toString` result references. */\r\nvar symbolTag = '[object Symbol]';\r\n\r\n/** Used to match leading and trailing whitespace. */\r\nvar reTrim = /^\\s+|\\s+$/g;\r\n\r\n/** Used to detect bad signed hexadecimal string values. */\r\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\r\n\r\n/** Used to detect binary string values. */\r\nvar reIsBinary = /^0b[01]+$/i;\r\n\r\n/** Used to detect octal string values. */\r\nvar reIsOctal = /^0o[0-7]+$/i;\r\n\r\n/** Built-in method references without a dependency on `root`. */\r\nvar freeParseInt = parseInt;\r\n\r\n/** Detect free variable `global` from Node.js. */\r\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\r\n\r\n/** Detect free variable `self`. */\r\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n\r\n/** Used as a reference to the global object. */\r\nvar root = freeGlobal || freeSelf || Function('return this')();\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto = Object.prototype;\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar objectToString = objectProto.toString;\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeMax = Math.max,\r\n    nativeMin = Math.min;\r\n\r\n/**\r\n * Gets the timestamp of the number of milliseconds that have elapsed since\r\n * the Unix epoch (1 January 1970 00:00:00 UTC).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 2.4.0\r\n * @category Date\r\n * @returns {number} Returns the timestamp.\r\n * @example\r\n *\r\n * _.defer(function(stamp) {\r\n *   console.log(_.now() - stamp);\r\n * }, _.now());\r\n * // => Logs the number of milliseconds it took for the deferred invocation.\r\n */\r\nvar now = function() {\r\n  return root.Date.now();\r\n};\r\n\r\n/**\r\n * Creates a debounced function that delays invoking `func` until after `wait`\r\n * milliseconds have elapsed since the last time the debounced function was\r\n * invoked. The debounced function comes with a `cancel` method to cancel\r\n * delayed `func` invocations and a `flush` method to immediately invoke them.\r\n * Provide `options` to indicate whether `func` should be invoked on the\r\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\r\n * with the last arguments provided to the debounced function. Subsequent\r\n * calls to the debounced function return the result of the last `func`\r\n * invocation.\r\n *\r\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\r\n * invoked on the trailing edge of the timeout only if the debounced function\r\n * is invoked more than once during the `wait` timeout.\r\n *\r\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\r\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\r\n *\r\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\r\n * for details over the differences between `_.debounce` and `_.throttle`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Function\r\n * @param {Function} func The function to debounce.\r\n * @param {number} [wait=0] The number of milliseconds to delay.\r\n * @param {Object} [options={}] The options object.\r\n * @param {boolean} [options.leading=false]\r\n *  Specify invoking on the leading edge of the timeout.\r\n * @param {number} [options.maxWait]\r\n *  The maximum time `func` is allowed to be delayed before it's invoked.\r\n * @param {boolean} [options.trailing=true]\r\n *  Specify invoking on the trailing edge of the timeout.\r\n * @returns {Function} Returns the new debounced function.\r\n * @example\r\n *\r\n * // Avoid costly calculations while the window size is in flux.\r\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\r\n *\r\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\r\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\r\n *   'leading': true,\r\n *   'trailing': false\r\n * }));\r\n *\r\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\r\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\r\n * var source = new EventSource('/stream');\r\n * jQuery(source).on('message', debounced);\r\n *\r\n * // Cancel the trailing debounced invocation.\r\n * jQuery(window).on('popstate', debounced.cancel);\r\n */\r\nfunction debounce(func, wait, options) {\r\n  var lastArgs,\r\n      lastThis,\r\n      maxWait,\r\n      result,\r\n      timerId,\r\n      lastCallTime,\r\n      lastInvokeTime = 0,\r\n      leading = false,\r\n      maxing = false,\r\n      trailing = true;\r\n\r\n  if (typeof func != 'function') {\r\n    throw new TypeError(FUNC_ERROR_TEXT);\r\n  }\r\n  wait = toNumber(wait) || 0;\r\n  if (isObject(options)) {\r\n    leading = !!options.leading;\r\n    maxing = 'maxWait' in options;\r\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\r\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\r\n  }\r\n\r\n  function invokeFunc(time) {\r\n    var args = lastArgs,\r\n        thisArg = lastThis;\r\n\r\n    lastArgs = lastThis = undefined;\r\n    lastInvokeTime = time;\r\n    result = func.apply(thisArg, args);\r\n    return result;\r\n  }\r\n\r\n  function leadingEdge(time) {\r\n    // Reset any `maxWait` timer.\r\n    lastInvokeTime = time;\r\n    // Start the timer for the trailing edge.\r\n    timerId = setTimeout(timerExpired, wait);\r\n    // Invoke the leading edge.\r\n    return leading ? invokeFunc(time) : result;\r\n  }\r\n\r\n  function remainingWait(time) {\r\n    var timeSinceLastCall = time - lastCallTime,\r\n        timeSinceLastInvoke = time - lastInvokeTime,\r\n        result = wait - timeSinceLastCall;\r\n\r\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\r\n  }\r\n\r\n  function shouldInvoke(time) {\r\n    var timeSinceLastCall = time - lastCallTime,\r\n        timeSinceLastInvoke = time - lastInvokeTime;\r\n\r\n    // Either this is the first call, activity has stopped and we're at the\r\n    // trailing edge, the system time has gone backwards and we're treating\r\n    // it as the trailing edge, or we've hit the `maxWait` limit.\r\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\r\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\r\n  }\r\n\r\n  function timerExpired() {\r\n    var time = now();\r\n    if (shouldInvoke(time)) {\r\n      return trailingEdge(time);\r\n    }\r\n    // Restart the timer.\r\n    timerId = setTimeout(timerExpired, remainingWait(time));\r\n  }\r\n\r\n  function trailingEdge(time) {\r\n    timerId = undefined;\r\n\r\n    // Only invoke if we have `lastArgs` which means `func` has been\r\n    // debounced at least once.\r\n    if (trailing && lastArgs) {\r\n      return invokeFunc(time);\r\n    }\r\n    lastArgs = lastThis = undefined;\r\n    return result;\r\n  }\r\n\r\n  function cancel() {\r\n    if (timerId !== undefined) {\r\n      clearTimeout(timerId);\r\n    }\r\n    lastInvokeTime = 0;\r\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\r\n  }\r\n\r\n  function flush() {\r\n    return timerId === undefined ? result : trailingEdge(now());\r\n  }\r\n\r\n  function debounced() {\r\n    var time = now(),\r\n        isInvoking = shouldInvoke(time);\r\n\r\n    lastArgs = arguments;\r\n    lastThis = this;\r\n    lastCallTime = time;\r\n\r\n    if (isInvoking) {\r\n      if (timerId === undefined) {\r\n        return leadingEdge(lastCallTime);\r\n      }\r\n      if (maxing) {\r\n        // Handle invocations in a tight loop.\r\n        timerId = setTimeout(timerExpired, wait);\r\n        return invokeFunc(lastCallTime);\r\n      }\r\n    }\r\n    if (timerId === undefined) {\r\n      timerId = setTimeout(timerExpired, wait);\r\n    }\r\n    return result;\r\n  }\r\n  debounced.cancel = cancel;\r\n  debounced.flush = flush;\r\n  return debounced;\r\n}\r\n\r\n/**\r\n * Checks if `value` is the\r\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n * @example\r\n *\r\n * _.isObject({});\r\n * // => true\r\n *\r\n * _.isObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObject(_.noop);\r\n * // => true\r\n *\r\n * _.isObject(null);\r\n * // => false\r\n */\r\nfunction isObject(value) {\r\n  var type = typeof value;\r\n  return !!value && (type == 'object' || type == 'function');\r\n}\r\n\r\n/**\r\n * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n * and has a `typeof` result of \"object\".\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n * @example\r\n *\r\n * _.isObjectLike({});\r\n * // => true\r\n *\r\n * _.isObjectLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObjectLike(_.noop);\r\n * // => false\r\n *\r\n * _.isObjectLike(null);\r\n * // => false\r\n */\r\nfunction isObjectLike(value) {\r\n  return !!value && typeof value == 'object';\r\n}\r\n\r\n/**\r\n * Checks if `value` is classified as a `Symbol` primitive or object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n * @example\r\n *\r\n * _.isSymbol(Symbol.iterator);\r\n * // => true\r\n *\r\n * _.isSymbol('abc');\r\n * // => false\r\n */\r\nfunction isSymbol(value) {\r\n  return typeof value == 'symbol' ||\r\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\r\n}\r\n\r\n/**\r\n * Converts `value` to a number.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to process.\r\n * @returns {number} Returns the number.\r\n * @example\r\n *\r\n * _.toNumber(3.2);\r\n * // => 3.2\r\n *\r\n * _.toNumber(Number.MIN_VALUE);\r\n * // => 5e-324\r\n *\r\n * _.toNumber(Infinity);\r\n * // => Infinity\r\n *\r\n * _.toNumber('3.2');\r\n * // => 3.2\r\n */\r\nfunction toNumber(value) {\r\n  if (typeof value == 'number') {\r\n    return value;\r\n  }\r\n  if (isSymbol(value)) {\r\n    return NAN;\r\n  }\r\n  if (isObject(value)) {\r\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\r\n    value = isObject(other) ? (other + '') : other;\r\n  }\r\n  if (typeof value != 'string') {\r\n    return value === 0 ? value : +value;\r\n  }\r\n  value = value.replace(reTrim, '');\r\n  var isBinary = reIsBinary.test(value);\r\n  return (isBinary || reIsOctal.test(value))\r\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\r\n    : (reIsBadHex.test(value) ? NAN : +value);\r\n}\r\n\r\nmodule.exports = debounce;\r\n","/**\r\n * Derives a set of keys from the master key.\r\n * @param {CryptoKey} material - master key to derive from\r\n *\r\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\r\n */\r\nexport async function deriveKeys(material) {\r\n    const info = new ArrayBuffer();\r\n    const textEncoder = new TextEncoder();\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\r\n    const encryptionKey = await crypto.subtle.deriveKey({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameEncryptionKey'),\r\n        hash: 'SHA-256',\r\n        info\r\n    }, material, {\r\n        name: 'AES-CTR',\r\n        length: 128\r\n    }, false, [ 'encrypt', 'decrypt' ]);\r\n    const authenticationKey = await crypto.subtle.deriveKey({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameAuthenticationKey'),\r\n        hash: 'SHA-256',\r\n        info\r\n    }, material, {\r\n        name: 'HMAC',\r\n        hash: 'SHA-256'\r\n    }, false, [ 'sign' ]);\r\n    const saltKey = await crypto.subtle.deriveBits({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameSaltKey'),\r\n        hash: 'SHA-256',\r\n        info\r\n    }, material, 128);\r\n\r\n    return {\r\n        material,\r\n        encryptionKey,\r\n        authenticationKey,\r\n        saltKey\r\n    };\r\n}\r\n\r\n/**\r\n * Ratchets a key. See\r\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\r\n * @param {CryptoKey} material - base key material\r\n * @returns {ArrayBuffer} - ratcheted key material\r\n */\r\nexport async function ratchet(material) {\r\n    const textEncoder = new TextEncoder();\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\r\n    return crypto.subtle.deriveBits({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameRatchetKey'),\r\n        hash: 'SHA-256',\r\n        info: new ArrayBuffer()\r\n    }, material, 256);\r\n}\r\n\r\n/**\r\n * Converts a raw key into a WebCrypto key object with default options\r\n * suitable for our usage.\r\n * @param {ArrayBuffer} keyBytes - raw key\r\n * @param {Array} keyUsages - key usages, see importKey documentation\r\n * @returns {CryptoKey} - the WebCrypto key.\r\n */\r\nexport async function importKey(keyBytes) {\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\r\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\r\n}\r\n","/* global __filename, Promise */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport {\r\n    TRACK_IS_DISPOSED,\r\n    TRACK_NO_STREAM_FOUND\r\n} from '../../JitsiTrackErrors';\r\nimport {\r\n    LOCAL_TRACK_STOPPED,\r\n    NO_DATA_FROM_SOURCE,\r\n    TRACK_MUTE_CHANGED\r\n} from '../../JitsiTrackEvents';\r\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport {\r\n    NO_BYTES_SENT,\r\n    TRACK_UNMUTED,\r\n    createNoDataFromSourceEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nimport JitsiTrack from './JitsiTrack';\r\nimport RTCUtils from './RTCUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Represents a single media track(either audio or video).\r\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\r\n */\r\nexport default class JitsiLocalTrack extends JitsiTrack {\r\n    /**\r\n     * Constructs new JitsiLocalTrack instance.\r\n     *\r\n     * @constructor\r\n     * @param {Object} trackInfo\r\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\r\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\r\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\r\n     * JitsiRemoteTrack\r\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\r\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\r\n     * @param trackInfo.effects the effects array contains the effect instance to use\r\n     * @param trackInfo.resolution the video resolution if it's a video track\r\n     * @param trackInfo.deviceId the ID of the local device for this track\r\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\r\n     * call\r\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\r\n     * source. NOTE: defined for desktop sharing tracks only.\r\n     */\r\n    constructor({\r\n        deviceId,\r\n        facingMode,\r\n        mediaType,\r\n        resolution,\r\n        rtcId,\r\n        sourceId,\r\n        sourceType,\r\n        stream,\r\n        track,\r\n        videoType,\r\n        effects = []\r\n    }) {\r\n        super(\r\n            /* conference */ null,\r\n            stream,\r\n            track,\r\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\r\n            mediaType,\r\n            videoType);\r\n\r\n        this._setEffectInProgress = false;\r\n        const effect = effects.find(e => e.isEnabled(this));\r\n\r\n        if (effect) {\r\n            this._startStreamEffect(effect);\r\n        }\r\n\r\n        /**\r\n         * The ID assigned by the RTC module on instance creation.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.rtcId = rtcId;\r\n        this.sourceId = sourceId;\r\n        this.sourceType = sourceType;\r\n\r\n        if (browser.usesNewGumFlow()) {\r\n            // Get the resolution from the track itself because it cannot be\r\n            // certain which resolution webrtc has fallen back to using.\r\n            this.resolution = track.getSettings().height;\r\n            this.maxEnabledResolution = resolution;\r\n\r\n            // Cache the constraints of the track in case of any this track\r\n            // model needs to call getUserMedia again, such as when unmuting.\r\n            this._constraints = track.getConstraints();\r\n\r\n            // Safari returns an empty constraints object, construct the constraints using getSettings.\r\n            if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\r\n                this._constraints = {\r\n                    height: track.getSettings().height,\r\n                    width: track.getSettings().width\r\n                };\r\n            }\r\n        } else {\r\n            // FIXME Currently, Firefox is ignoring our constraints about\r\n            // resolutions so we do not store it, to avoid wrong reporting of\r\n            // local track resolution.\r\n            this.resolution = browser.isFirefox() ? null : resolution;\r\n            this.maxEnabledResolution = this.resolution;\r\n        }\r\n\r\n        this.deviceId = deviceId;\r\n\r\n        /**\r\n         * The <tt>Promise</tt> which represents the progress of a previously\r\n         * queued/scheduled {@link _setMuted} (from the point of view of\r\n         * {@link _queueSetMuted}).\r\n         *\r\n         * @private\r\n         * @type {Promise}\r\n         */\r\n        this._prevSetMuted = Promise.resolve();\r\n\r\n        /**\r\n         * The facing mode of the camera from which this JitsiLocalTrack\r\n         * instance was obtained.\r\n         *\r\n         * @private\r\n         * @type {CameraFacingMode|undefined}\r\n         */\r\n        this._facingMode = facingMode;\r\n\r\n        // Currently there is no way to know the MediaStreamTrack ended due to\r\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\r\n        // Instead we will compare current track's label with device labels from\r\n        // enumerateDevices() list.\r\n        this._trackEnded = false;\r\n\r\n        /**\r\n         * Indicates whether data has been sent or not.\r\n         */\r\n        this._hasSentData = false;\r\n\r\n        /**\r\n         * Used only for detection of audio problems. We want to check only once\r\n         * whether the track is sending data ot not. This flag is set to false\r\n         * after the check.\r\n         */\r\n        this._testDataSent = true;\r\n\r\n        // Currently there is no way to determine with what device track was\r\n        // created (until getConstraints() support), however we can associate\r\n        // tracks with real devices obtained from enumerateDevices() call as\r\n        // soon as it's called.\r\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\r\n        // correspond to the id of a matching device from the available device list.\r\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\r\n\r\n        this._trackMutedTS = 0;\r\n\r\n        this._onDeviceListWillChange = devices => {\r\n            const oldRealDeviceId = this._realDeviceId;\r\n\r\n            this._setRealDeviceIdFromDeviceList(devices);\r\n\r\n            if (\r\n                // Mark track as ended for those browsers that do not support\r\n                // \"readyState\" property. We do not touch tracks created with\r\n                // default device ID \"\".\r\n                (typeof this.getTrack().readyState === 'undefined'\r\n                    && typeof this._realDeviceId !== 'undefined'\r\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\r\n\r\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\r\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\r\n                // addition on some Chrome versions the readyState property is set after the device change event is\r\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\r\n                // detect that the old one was removed.\r\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\r\n            ) {\r\n                this._trackEnded = true;\r\n            }\r\n        };\r\n\r\n        // Subscribe each created local audio track to\r\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\r\n        // handling this event for remote tracks (which are handled in RTC.js),\r\n        // because there might be local tracks not attached to a conference.\r\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\r\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\r\n            RTCUtils.addListener(\r\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._onAudioOutputDeviceChanged);\r\n        }\r\n\r\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\r\n\r\n        this._initNoDataFromSourceHandlers();\r\n    }\r\n\r\n    /**\r\n     * Returns if associated MediaStreamTrack is in the 'ended' state\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isEnded() {\r\n        if (this.isVideoTrack() && this.isMuted()) {\r\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\r\n            // _trackEnded flag.\r\n            return this._trackEnded;\r\n        }\r\n\r\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\r\n    }\r\n\r\n    /**\r\n     * Sets handlers to the MediaStreamTrack object that will detect camera\r\n     * issues.\r\n     */\r\n    _initNoDataFromSourceHandlers() {\r\n        if (!this._isNoDataFromSourceEventsEnabled()) {\r\n            return;\r\n        }\r\n\r\n        this._setHandler('track_mute', () => {\r\n            this._trackMutedTS = window.performance.now();\r\n            this._fireNoDataFromSourceEvent();\r\n        });\r\n\r\n        this._setHandler('track_unmute', () => {\r\n            this._fireNoDataFromSourceEvent();\r\n            Statistics.sendAnalyticsAndLog(\r\n                TRACK_UNMUTED,\r\n                {\r\n                    'media_type': this.getType(),\r\n                    'track_type': 'local',\r\n                    value: window.performance.now() - this._trackMutedTS\r\n                });\r\n        });\r\n\r\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\r\n            this._setHandler('track_ended', () => {\r\n                if (!this.isReceivingData()) {\r\n                    this._fireNoDataFromSourceEvent();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\r\n     *\r\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\r\n     */\r\n    _isNoDataFromSourceEventsEnabled() {\r\n        // Disable the events for screen sharing.\r\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\r\n    }\r\n\r\n    /**\r\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\r\n     */\r\n    _fireNoDataFromSourceEvent() {\r\n        const value = !this.isReceivingData();\r\n\r\n        this.emit(NO_DATA_FROM_SOURCE, value);\r\n\r\n        // FIXME: Should we report all of those events\r\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\r\n        Statistics.sendLog(JSON.stringify({\r\n            name: NO_DATA_FROM_SOURCE,\r\n            log: value\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Sets real device ID by comparing track information with device\r\n     * information. This is temporary solution until getConstraints() method\r\n     * will be implemented in browsers.\r\n     *\r\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\r\n     * enumerateDevices() call\r\n     */\r\n    _setRealDeviceIdFromDeviceList(devices) {\r\n        const track = this.getTrack();\r\n        const kind = `${track.kind}input`;\r\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\r\n\r\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\r\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\r\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\r\n            // why in order to match it we need to remove the 'Default - ' part.\r\n            const label = (track.label || '').replace('Default - ', '');\r\n\r\n            device = devices.find(d => d.kind === kind && d.label === label);\r\n        }\r\n\r\n        if (device) {\r\n            this._realDeviceId = device.deviceId;\r\n        } else {\r\n            this._realDeviceId = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\r\n     * handlers to it.\r\n     *\r\n     * @param {MediaStream} stream the new stream.\r\n     * @protected\r\n     */\r\n    _setStream(stream) {\r\n        super._setStream(stream);\r\n\r\n        if (stream) {\r\n            // Store the MSID for video mute/unmute purposes.\r\n            this.storedMSID = this.getMSID();\r\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\r\n        } else {\r\n            logger.debug(`Setting 'null' stream on ${this}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the effect process and returns the modified stream.\r\n     *\r\n     * @private\r\n     * @param {*} effect - Represents effect instance\r\n     * @returns {void}\r\n     */\r\n    _startStreamEffect(effect) {\r\n        this._streamEffect = effect;\r\n        this._originalStream = this.stream;\r\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\r\n        this.track = this.stream.getTracks()[0];\r\n    }\r\n\r\n    /**\r\n     * Stops the effect process and returns the original stream.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _stopStreamEffect() {\r\n        if (this._streamEffect) {\r\n            this._streamEffect.stopEffect();\r\n            this._setStream(this._originalStream);\r\n            this._originalStream = null;\r\n            this.track = this.stream.getTracks()[0];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\r\n     *\r\n     * @param {Object|undefined} effect - The new effect to be set.\r\n     */\r\n    _switchStreamEffect(effect) {\r\n        if (this._streamEffect) {\r\n            this._stopStreamEffect();\r\n            this._streamEffect = undefined;\r\n        }\r\n        if (effect) {\r\n            this._startStreamEffect(effect);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the effect and switches between the modified stream and original one.\r\n     *\r\n     * @param {Object} effect - Represents the effect instance to be used.\r\n     * @returns {Promise}\r\n     */\r\n    setEffect(effect) {\r\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\r\n            return Promise.reject(new Error('Incompatible effect instance!'));\r\n        }\r\n\r\n        if (this._setEffectInProgress === true) {\r\n            return Promise.reject(new Error('setEffect already in progress!'));\r\n        }\r\n\r\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\r\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\r\n        if (this.isMuted() && !this.isAudioTrack()) {\r\n            this._streamEffect = effect;\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const conference = this.conference;\r\n\r\n        if (!conference) {\r\n            this._switchStreamEffect(effect);\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._setEffectInProgress = true;\r\n\r\n        if (browser.usesUnifiedPlan()) {\r\n            this._switchStreamEffect(effect);\r\n            if (this.isVideoTrack()) {\r\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n            }\r\n\r\n            return conference.replaceTrack(this, this)\r\n                .then(() => {\r\n                    this._setEffectInProgress = false;\r\n                })\r\n                .catch(error => {\r\n                    this._setEffectInProgress = false;\r\n                    this._switchStreamEffect();\r\n                    logger.error('Failed to switch to the new stream!', error);\r\n                    throw error;\r\n                });\r\n        }\r\n\r\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\r\n        return conference.removeTrack(this)\r\n            .then(() => {\r\n                this._switchStreamEffect(effect);\r\n                if (this.isVideoTrack()) {\r\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n                }\r\n\r\n                return conference.addTrack(this);\r\n            })\r\n            .then(() => {\r\n                this._setEffectInProgress = false;\r\n            })\r\n            .catch(error => {\r\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\r\n                // everyhting related to the effect functionality.\r\n                this._setEffectInProgress = false;\r\n                this._switchStreamEffect();\r\n                logger.error('Failed to switch to the new stream!', error);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Asynchronously mutes this track.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    mute() {\r\n        return this._queueSetMuted(true);\r\n    }\r\n\r\n    /**\r\n     * Asynchronously unmutes this track.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    unmute() {\r\n        return this._queueSetMuted(false);\r\n    }\r\n\r\n    /**\r\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\r\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\r\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\r\n     * serialized fashion.\r\n     *\r\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\r\n     * @returns {Promise}\r\n     */\r\n    _queueSetMuted(muted) {\r\n        const setMuted = this._setMuted.bind(this, muted);\r\n\r\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\r\n\r\n        return this._prevSetMuted;\r\n    }\r\n\r\n    /**\r\n     * Mutes / unmutes this track.\r\n     *\r\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\r\n     * otherwise, this track will be unmuted.\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _setMuted(muted) {\r\n        if (this.isMuted() === muted) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.disposed) {\r\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\r\n        }\r\n\r\n        let promise = Promise.resolve();\r\n\r\n        // A function that will print info about muted status transition\r\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\r\n\r\n        if (this.isAudioTrack()\r\n                || this.videoType === VideoType.DESKTOP\r\n                || !browser.doesVideoMuteByStreamRemove()) {\r\n            logMuteInfo();\r\n            if (this.track) {\r\n                this.track.enabled = !muted;\r\n            }\r\n        } else if (muted) {\r\n            promise = new Promise((resolve, reject) => {\r\n                logMuteInfo();\r\n                this._removeStreamFromConferenceAsMute(\r\n                    () => {\r\n                        if (this._streamEffect) {\r\n                            this._stopStreamEffect();\r\n                        }\r\n\r\n                        // FIXME: Maybe here we should set the SRC for the\r\n                        // containers to something\r\n                        // We don't want any events to be fired on this stream\r\n                        this._unregisterHandlers();\r\n                        this.stopStream();\r\n                        this._setStream(null);\r\n                        resolve();\r\n                    },\r\n                    reject);\r\n            });\r\n        } else {\r\n            logMuteInfo();\r\n\r\n            // This path is only for camera.\r\n            const streamOptions = {\r\n                cameraDeviceId: this.getDeviceId(),\r\n                devices: [ MediaType.VIDEO ],\r\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\r\n                facingMode: this.getCameraFacingMode()\r\n            };\r\n\r\n            if (browser.usesNewGumFlow()) {\r\n                promise\r\n                    = RTCUtils.newObtainAudioAndVideoPermissions(Object.assign(\r\n                        {},\r\n                        streamOptions,\r\n                        { constraints: { video: this._constraints } }));\r\n            } else {\r\n                if (this.resolution) {\r\n                    streamOptions.resolution = this.resolution;\r\n                }\r\n\r\n                promise\r\n                    = RTCUtils.obtainAudioAndVideoPermissions(streamOptions);\r\n            }\r\n\r\n            promise = promise.then(streamsInfo => {\r\n                // The track kind for presenter track is video as well.\r\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\r\n                const streamInfo\r\n                    = browser.usesNewGumFlow()\r\n                        ? streamsInfo.find(\r\n                            info => info.track.kind === mediaType)\r\n                        : streamsInfo.find(\r\n                            info => info.mediaType === mediaType);\r\n\r\n                if (streamInfo) {\r\n                    this._setStream(streamInfo.stream);\r\n                    this.track = streamInfo.track;\r\n\r\n                    // This is not good when video type changes after\r\n                    // unmute, but let's not crash here\r\n                    if (this.videoType !== streamInfo.videoType) {\r\n                        logger.warn(\r\n                            `${this}: video type has changed after unmute!`,\r\n                            this.videoType, streamInfo.videoType);\r\n                        this.videoType = streamInfo.videoType;\r\n                    }\r\n                } else {\r\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\r\n                }\r\n\r\n                if (this._streamEffect) {\r\n                    this._startStreamEffect(this._streamEffect);\r\n                }\r\n\r\n                this.containers.map(\r\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n\r\n                return this._addStreamToConferenceAsUnmute();\r\n            });\r\n        }\r\n\r\n        return promise\r\n            .then(() => this._sendMuteStatus(muted))\r\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\r\n    }\r\n\r\n    /**\r\n     * Adds stream to conference and marks it as \"unmute\" operation.\r\n     *\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _addStreamToConferenceAsUnmute() {\r\n        if (!this.conference) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        // FIXME it would be good to not included conference as part of this\r\n        // process. Only TraceablePeerConnections to which the track is attached\r\n        // should care about this action. The TPCs to which the track is not\r\n        // attached can sync up when track is re-attached.\r\n        // A problem with that is that the \"modify sources\" queue is part of\r\n        // the JingleSessionPC and it would be excluded from the process. One\r\n        // solution would be to extract class between TPC and JingleSessionPC\r\n        // which would contain the queue and would notify the signaling layer\r\n        // when local SSRCs are changed. This would help to separate XMPP from\r\n        // the RTC module.\r\n        return new Promise((resolve, reject) => {\r\n            this.conference._addLocalTrackAsUnmute(this)\r\n                .then(resolve, error => reject(new Error(error)));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Removes stream from conference and marks it as \"mute\" operation.\r\n     *\r\n     * @param {Function} successCallback will be called on success\r\n     * @param {Function} errorCallback will be called on error\r\n     * @private\r\n     */\r\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\r\n        if (!this.conference) {\r\n            successCallback();\r\n\r\n            return;\r\n        }\r\n        this.conference._removeLocalTrackAsMute(this).then(\r\n            successCallback,\r\n            error => errorCallback(new Error(error)));\r\n    }\r\n\r\n    /**\r\n     * Sends mute status for a track to conference if any.\r\n     *\r\n     * @param {boolean} mute - If track is muted.\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _sendMuteStatus(mute) {\r\n        if (!this.conference || !this.conference.room) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return new Promise(resolve => {\r\n            this.conference.room[\r\n                this.isAudioTrack()\r\n                    ? 'setAudioMute'\r\n                    : 'setVideoMute'](mute, resolve);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     *\r\n     * Stops sending the media track. And removes it from the HTML.\r\n     * NOTE: Works for local tracks only.\r\n     *\r\n     * @extends JitsiTrack#dispose\r\n     * @returns {Promise}\r\n     */\r\n    dispose() {\r\n        this._switchStreamEffect();\r\n\r\n        let promise = Promise.resolve();\r\n\r\n        if (this.conference) {\r\n            promise = this.conference.removeTrack(this);\r\n        }\r\n\r\n        if (this.stream) {\r\n            this.stopStream();\r\n            this.detach();\r\n        }\r\n\r\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\r\n\r\n        if (this._onAudioOutputDeviceChanged) {\r\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._onAudioOutputDeviceChanged);\r\n        }\r\n\r\n        return promise.then(() => super.dispose());\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\r\n     * otherwise.\r\n     *\r\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\r\n     * <tt>false</tt> otherwise.\r\n     */\r\n    isMuted() {\r\n        // this.stream will be null when we mute local video on Chrome\r\n        if (!this.stream) {\r\n            return true;\r\n        }\r\n        if (this.isVideoTrack() && !this.isActive()) {\r\n            return true;\r\n        }\r\n\r\n        return !this.track || !this.track.enabled;\r\n    }\r\n\r\n    /**\r\n     * Sets the JitsiConference object associated with the track. This is temp\r\n     * solution.\r\n     *\r\n     * @param conference the JitsiConference object\r\n     */\r\n    _setConference(conference) {\r\n        this.conference = conference;\r\n\r\n        // We want to keep up with postponed events which should have been fired\r\n        // on \"attach\" call, but for local track we not always have the\r\n        // conference before attaching. However this may result in duplicated\r\n        // events if they have been triggered on \"attach\" already.\r\n        for (let i = 0; i < this.containers.length; i++) {\r\n            this._maybeFireTrackAttached(this.containers[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true</tt>.\r\n     *\r\n     * @returns {boolean} <tt>true</tt>\r\n     */\r\n    isLocal() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns device id associated with track.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getDeviceId() {\r\n        return this._realDeviceId || this.deviceId;\r\n    }\r\n\r\n    /**\r\n     * Returns the participant id which owns the track.\r\n     *\r\n     * @returns {string} the id of the participants. It corresponds to the\r\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\r\n     */\r\n    getParticipantId() {\r\n        return this.conference && this.conference.myUserId();\r\n    }\r\n\r\n    /**\r\n     * Handles bytes sent statistics.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\r\n     * @param {number} bytesSent the new value\r\n     * NOTE: used only for audio tracks to detect audio issues.\r\n     */\r\n    _onByteSentStatsReceived(tpc, bytesSent) {\r\n        if (bytesSent > 0) {\r\n            this._hasSentData = true;\r\n        }\r\n        const iceConnectionState = tpc.getConnectionState();\r\n\r\n        if (this._testDataSent && iceConnectionState === 'connected') {\r\n            setTimeout(() => {\r\n                if (!this._hasSentData) {\r\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\r\n                        ${bytesSent}`);\r\n\r\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\r\n                }\r\n            }, 3000);\r\n            this._testDataSent = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns facing mode for video track from camera. For other cases (e.g.\r\n     * audio track or 'desktop' video track) returns undefined.\r\n     *\r\n     * @returns {CameraFacingMode|undefined}\r\n     */\r\n    getCameraFacingMode() {\r\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\r\n            // MediaStreamTrack#getSettings() is not implemented in many\r\n            // browsers, so we need feature checking here. Progress on the\r\n            // respective browser's implementation can be tracked at\r\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\r\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\r\n            // for Firefox. Even if a browser implements getSettings() already,\r\n            // it might still not return anything for 'facingMode'.\r\n            let trackSettings;\r\n\r\n            try {\r\n                trackSettings = this.track.getSettings();\r\n            } catch (e) {\r\n                // XXX React-native-webrtc, for example, defines\r\n                // MediaStreamTrack#getSettings() but the implementation throws\r\n                // a \"Not implemented\" Error.\r\n            }\r\n            if (trackSettings && 'facingMode' in trackSettings) {\r\n                return trackSettings.facingMode;\r\n            }\r\n\r\n            if (typeof this._facingMode !== 'undefined') {\r\n                return this._facingMode;\r\n            }\r\n\r\n            // In most cases we are showing a webcam. So if we've gotten here,\r\n            // it should be relatively safe to assume that we are probably\r\n            // showing the user-facing camera.\r\n            return CameraFacingMode.USER;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Stops the associated MediaStream.\r\n     */\r\n    stopStream() {\r\n        /**\r\n         * Indicates that we are executing {@link #stopStream} i.e.\r\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\r\n         * associated with this <tt>JitsiTrack</tt> instance.\r\n         *\r\n         * @private\r\n         * @type {boolean}\r\n         */\r\n        this._stopStreamInProgress = true;\r\n\r\n        try {\r\n            RTCUtils.stopMediaStream(this.stream);\r\n        } finally {\r\n            this._stopStreamInProgress = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switches the camera facing mode if the WebRTC implementation supports the\r\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\r\n     * question is implemented in react-native-webrtc only. When such a WebRTC\r\n     * implementation is executing, the method is the preferred way to switch\r\n     * between the front/user-facing and the back/environment-facing cameras\r\n     * because it will likely be (as is the case of react-native-webrtc)\r\n     * noticeably faster that creating a new MediaStreamTrack via a new\r\n     * getUserMedia call with the switched facingMode constraint value.\r\n     * Moreover, the approach with a new getUserMedia call may not even work:\r\n     * WebRTC on Android and iOS is either very slow to open the camera a second\r\n     * time or plainly freezes attempting to do that.\r\n     */\r\n    _switchCamera() {\r\n        if (this.isVideoTrack()\r\n                && this.videoType === VideoType.CAMERA\r\n                && typeof this.track._switchCamera === 'function') {\r\n            this.track._switchCamera();\r\n\r\n            this._facingMode\r\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\r\n                    ? CameraFacingMode.USER\r\n                    : CameraFacingMode.ENVIRONMENT;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether the attached MediaStream is receiving data from source or\r\n     * not. If the stream property is null(because of mute or another reason)\r\n     * this method will return false.\r\n     * NOTE: This method doesn't indicate problem with the streams directly.\r\n     * For example in case of video mute the method will return false or if the\r\n     * user has disposed the track.\r\n     *\r\n     * @returns {boolean} true if the stream is receiving data and false\r\n     * this otherwise.\r\n     */\r\n    isReceivingData() {\r\n        if (this.isVideoTrack()\r\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\r\n            return true;\r\n        }\r\n\r\n        if (!this.stream) {\r\n            return false;\r\n        }\r\n\r\n        // In older version of the spec there is no muted property and\r\n        // readyState can have value muted. In the latest versions\r\n        // readyState can have values \"live\" and \"ended\" and there is\r\n        // muted boolean property. If the stream is muted that means that\r\n        // we aren't receiving any data from the source. We want to notify\r\n        // the users for error if the stream is muted or ended on it's\r\n        // creation.\r\n\r\n        // For video blur enabled use the original video stream\r\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\r\n\r\n        return stream.getTracks().some(track =>\r\n            (!('readyState' in track) || track.readyState === 'live')\r\n                && (!('muted' in track) || track.muted !== true));\r\n    }\r\n\r\n    /**\r\n     * Creates a text representation of this local track instance.\r\n     *\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\nimport TrackVADEmitter from './TrackVADEmitter';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\r\n * @type {number}\r\n */\r\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\r\n\r\n/**\r\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\r\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\r\n */\r\nexport default class VADAudioAnalyser extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADAudioAnalyser</tt>\r\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\r\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\r\n     * needs to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @constructor\r\n     */\r\n    constructor(conference, createVADProcessor) {\r\n        super();\r\n\r\n        /**\r\n         * Member function that instantiates a VAD processor.\r\n         */\r\n        this._createVADProcessor = createVADProcessor;\r\n\r\n        /**\r\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\r\n         * period voice probability scores.\r\n         */\r\n        this._vadEmitter = null;\r\n\r\n        /**\r\n         * Current state of the _vadEmitter\r\n         */\r\n        this._isVADEmitterRunning = false;\r\n\r\n        /**\r\n         * Array of currently attached VAD processing services.\r\n         */\r\n        this._detectionServices = [];\r\n\r\n        /**\r\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\r\n         * coming from the conference.\r\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\r\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\r\n         * i.e. (TRACK_MUTE_CHANGED event callback).\r\n         */\r\n        this._vadInitTracker = Promise.resolve();\r\n\r\n        /**\r\n         * Listens for {@link TrackVADEmitter} events and processes them.\r\n         */\r\n        this._processVADScore = this._processVADScore.bind(this);\r\n\r\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\r\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\r\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Attach a VAD detector service to the analyser and handle it's state changes.\r\n     *\r\n     * @param {Object} vadTMDetector\r\n     */\r\n    addVADDetectionService(vadService) {\r\n        this._detectionServices.push(vadService);\r\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\r\n            // When the state of a detector changes check if there are any active detectors attached so that\r\n            // the _vadEmitter doesn't run needlessly.\r\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\r\n\r\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\r\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\r\n            // that needs it.\r\n            if (!activeDetector.length && this._isVADEmitterRunning) {\r\n                this._stopVADEmitter();\r\n            } else if (!this._isVADEmitterRunning) {\r\n                this._startVADEmitter();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start the {@link TrackVADEmitter} and attach the event listener.\r\n     * @returns {void}\r\n     */\r\n    _startVADEmitter() {\r\n        this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\r\n        this._vadEmitter.start();\r\n        this._isVADEmitterRunning = true;\r\n    }\r\n\r\n    /**\r\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\r\n     * @returns {void}\r\n     */\r\n    _stopVADEmitter() {\r\n        this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\r\n        this._vadEmitter.stop();\r\n        this._isVADEmitterRunning = false;\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    _processVADScore(vadScore) {\r\n        for (const detector of this._detectionServices) {\r\n            detector.processVADScore(vadScore);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change the isMuted state of all attached detection services.\r\n     *\r\n     * @param {boolean} isMuted\r\n     */\r\n    _changeDetectorsMuteState(isMuted) {\r\n        for (const detector of this._detectionServices) {\r\n            detector.changeMuteState(isMuted);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\r\n     * Only take into account local audio tracks.\r\n     * @param {JitsiTrack} track - The added track.\r\n     * @returns {void}\r\n     * @listens TRACK_ADDED\r\n     */\r\n    _trackAdded(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\r\n            // destroy/create the processing context in the proper order.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\r\n                .then(vadProcessor =>\r\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\r\n                )\r\n                .then(vadEmitter => {\r\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\r\n\r\n                    this._vadEmitter = vadEmitter;\r\n\r\n                    // Iterate through the detection services and set their appropriate mute state, depending on\r\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\r\n                    this._changeDetectorsMuteState(track.isMuted());\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\r\n     * local audio tracks.\r\n     * @param {JitsiTrack} track - The track whose mute state has changed.\r\n     * @returns {void}\r\n     * @listens TRACK_MUTE_CHANGED\r\n     */\r\n    _trackMuteChanged(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // On a mute toggle reset the state.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => {\r\n                // Set mute status for the attached detection services.\r\n                this._changeDetectorsMuteState(track.isMuted());\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\r\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\r\n     *\r\n     * @param {JitsiTrack} track - The removed track.\r\n     * @returns {void}\r\n     * @listens TRACK_REMOVED\r\n     */\r\n    _trackRemoved(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Use the promise to make sure operations are in sequence.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => {\r\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\r\n\r\n                // Track was removed, clean up and set appropriate states.\r\n                if (this._vadEmitter) {\r\n                    this._stopVADEmitter();\r\n                    this._vadEmitter.destroy();\r\n                    this._vadEmitter = null;\r\n                }\r\n\r\n                // Reset state of detectors when active track is removed.\r\n                for (const detector of this._detectionServices) {\r\n                    detector.reset();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { $iq } from 'strophe.js';\r\n\r\nimport recordingXMLUtils from './recordingXMLUtils';\r\n\r\n/**\r\n * Represents a recording session.\r\n */\r\nexport default class JibriSession {\r\n    /**\r\n     * Initializes a new JibriSession instance.\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(options = {}) {\r\n        this._connection = options.connection;\r\n        this._mode = options.mode;\r\n\r\n        this._setSessionID(options.sessionID);\r\n        this.setStatus(options.status);\r\n    }\r\n\r\n    /**\r\n     * Returns the error related to the session instance, if any.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getError() {\r\n        return this._error;\r\n    }\r\n\r\n    /**\r\n     * Returns the session ID of the session instance.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getID() {\r\n        return this._sessionID;\r\n    }\r\n\r\n    /**\r\n     * Returns the initiator of the session instance.\r\n     *\r\n     * @returns {JitsiParticipant|undefined} The participant that started the session.\r\n     */\r\n    getInitiator() {\r\n        return this._initiator;\r\n    }\r\n\r\n    /**\r\n     * Returns the streaming URL of the session.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getLiveStreamViewURL() {\r\n        return this._liveStreamViewURL;\r\n    }\r\n\r\n    /**\r\n     * Returns the current status of the session.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getStatus() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the participant that stopped the session.\r\n     *\r\n     * @returns {JitsiParticipant|undefined} The participant that stopped the session.\r\n     */\r\n    getTerminator() {\r\n        return this._terminator;\r\n    }\r\n\r\n    /**\r\n     * Returns the current recording mode of the session, such as \"file\".\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getMode() {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Sets the last known error message related to the session.\r\n     *\r\n     * @param {string} error - The error string explaining why the session\r\n     * entered an error state.\r\n     * @returns {void}\r\n     */\r\n    setError(error) {\r\n        this._error = error;\r\n    }\r\n\r\n    /**\r\n     * Sets the last live stream URL for the session instance. Usually this is\r\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\r\n     *\r\n     * @param {string} url - The live stream URL associated with the session.\r\n     * @returns {void}\r\n     */\r\n    setLiveStreamViewURL(url) {\r\n        this._liveStreamViewURL = url;\r\n    }\r\n\r\n    /**\r\n     * Sets the last known status for this recording session.\r\n     *\r\n     * @param {string} status - The new status to set.\r\n     * @returns {void}\r\n     */\r\n    setStatus(status) {\r\n        this._status = status;\r\n    }\r\n\r\n    /**\r\n     * Sets the creator's jid of the session.\r\n     * @param {JitsiParticipant} participant - The creator of the session.\r\n     */\r\n    setInitiator(participant) {\r\n        this._initiator = participant;\r\n    }\r\n\r\n    /**\r\n     * Sets the jid of the participant that stopped the session.\r\n     * @param {JitsiParticipant} participant  - The participant's jid,\r\n     * that stopped the session.\r\n     */\r\n    setTerminator(participant) {\r\n        this._terminator = participant;\r\n    }\r\n\r\n    /**\r\n     * Sends a message to start the actual recording.\r\n     *\r\n     * @param {Object} options - Additional arguments for starting the\r\n     * recording.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [options.broadcastId] - The broadcast ID of an\r\n     * associated YouTube stream, used for knowing the URL from which the stream\r\n     * can be viewed.\r\n     * @param {string} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @param {streamId} options.streamId - Necessary for live streaming, this\r\n     * is the the stream key needed to start a live streaming session with the\r\n     * streaming service provider.\r\n     * @returns Promise\r\n     */\r\n    start({ appData, broadcastId, focusMucJid, streamId }) {\r\n        return new Promise((resolve, reject) => {\r\n            this._connection.sendIQ(\r\n                this._createIQ({\r\n                    action: 'start',\r\n                    appData,\r\n                    focusMucJid,\r\n                    broadcastId,\r\n                    streamId\r\n                }),\r\n                result => {\r\n                    // All users will eventually receive the 'pending' status\r\n                    // from the backend, but for the user initiating the session\r\n                    // it's better to give some instant feedback that recording\r\n                    // is starting so fire 'pending' here manually.\r\n                    this.setStatus('pending');\r\n                    this._setSessionID(\r\n                        recordingXMLUtils.getSessionIdFromIq(result));\r\n\r\n                    resolve();\r\n                },\r\n                error => {\r\n                    this._setErrorFromIq(error);\r\n\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a message to actually stop the recording session.\r\n     *\r\n     * @param {Object} options - Additional arguments for stopping the\r\n     * recording.\r\n     * @param {Object} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @returns Promise\r\n     */\r\n    stop({ focusMucJid }) {\r\n        return new Promise((resolve, reject) => {\r\n            this._connection.sendIQ(\r\n                this._createIQ({\r\n                    action: 'stop',\r\n                    focusMucJid\r\n                }),\r\n                resolve,\r\n                reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates the message to change the status of the recording session.\r\n     *\r\n     * @param {string} status - The new status to which the recording session\r\n     * should transition.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [options.broadcastId] - The broadcast ID of an\r\n     * associated YouTube stream, used for knowing the URL from which the stream\r\n     * can be viewed.\r\n     * @param {string} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @param {streamId} options.streamId - Necessary for live streaming, this\r\n     * is the the stream key needed to start a live streaming session with the\r\n     * streaming service provider.\r\n     * @returns Object - The XMPP IQ message.\r\n     */\r\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\r\n        return $iq({\r\n            to: focusMucJid,\r\n            type: 'set'\r\n        })\r\n        .c('jibri', {\r\n            'xmlns': 'http://jitsi.org/protocol/jibri',\r\n            'action': action,\r\n            'app_data': appData,\r\n            'recording_mode': this._mode,\r\n            'streamid': streamId,\r\n            'you_tube_broadcast_id': broadcastId\r\n        })\r\n        .up();\r\n    }\r\n\r\n    /**\r\n     * Handles the error from an iq and stores the error.\r\n     *\r\n     * @param {Node} errorIq - The error response from an Iq.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _setErrorFromIq(errorIq) {\r\n        const error = errorIq.getElementsByTagName('error')[0];\r\n\r\n        this.setError(error.children[0].tagName);\r\n    }\r\n\r\n    /**\r\n     * Sets the known session ID for this recording session.\r\n     *\r\n     * @param {string} sessionID\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _setSessionID(sessionID) {\r\n        this._sessionID = sessionID;\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport RTCEvents from './service/RTC/RTCEvents';\r\n\r\nconst AUDIO_PERMISSION_NAME = 'microphone';\r\nconst PERMISSION_GRANTED_STATUS = 'granted';\r\nconst VIDEO_PERMISSION_NAME = 'camera';\r\n\r\n/**\r\n * Media devices utilities for Jitsi.\r\n */\r\nclass JitsiMediaDevices {\r\n    /**\r\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\r\n     * instance of this class.\r\n     */\r\n    constructor() {\r\n        this._eventEmitter = new EventEmitter();\r\n        this._grantedPermissions = {};\r\n\r\n        RTC.addListener(\r\n            RTCEvents.DEVICE_LIST_CHANGED,\r\n            devices =>\r\n                this._eventEmitter.emit(\r\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\r\n                    devices));\r\n        RTC.addListener(\r\n            RTCEvents.DEVICE_LIST_AVAILABLE,\r\n            devices =>\r\n                this._logOutputDevice(\r\n                    this.getAudioOutputDevice(),\r\n                    devices));\r\n        RTC.addListener(\r\n            RTCEvents.GRANTED_PERMISSIONS,\r\n            grantedPermissions =>\r\n                this._handleGrantedPermissions(grantedPermissions));\r\n\r\n        // Test if the W3C Permissions API is implemented and the 'camera' and\r\n        // 'microphone' permissions are implemented. (Testing for at least one\r\n        // of them seems sufficient).\r\n        this._permissionsApiSupported = new Promise(resolve => {\r\n            if (!navigator.permissions) {\r\n                resolve(false);\r\n\r\n                return;\r\n            }\r\n\r\n            navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\r\n                .then(() => resolve(true), () => resolve(false));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updated the local granted permissions cache. A permissions might be\r\n     * granted, denied, or undefined. This is represented by having its media\r\n     * type key set to {@code true} or {@code false} respectively.\r\n     *\r\n     * @param {Object} grantedPermissions - Array with the permissions\r\n     * which were granted.\r\n     */\r\n    _handleGrantedPermissions(grantedPermissions) {\r\n        this._grantedPermissions = {\r\n            ...this._grantedPermissions,\r\n            ...grantedPermissions\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gathers data and sends it to statistics.\r\n     * @param deviceID the device id to log\r\n     * @param devices list of devices\r\n     */\r\n    _logOutputDevice(deviceID, devices) {\r\n        const device\r\n            = devices.find(\r\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\r\n\r\n        if (device) {\r\n            Statistics.sendActiveDeviceListEvent(\r\n                RTC.getEventDataForActiveDevice(device));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes callback with list of media devices connected.\r\n     * @param {function} callback\r\n     */\r\n    enumerateDevices(callback) {\r\n        RTC.enumerateDevices(callback);\r\n    }\r\n\r\n    /**\r\n     * Checks if its possible to enumerate available cameras/micropones.\r\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\r\n     * the WebRTC stack is ready, either with true if the device listing is\r\n     * available available or with false otherwise.\r\n     */\r\n    isDeviceListAvailable() {\r\n        return RTC.isDeviceListAvailable();\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @param {string} [deviceType] - type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        return RTC.isDeviceChangeAvailable(deviceType);\r\n    }\r\n\r\n    /**\r\n     * Checks if the permission for the given device was granted.\r\n     *\r\n     * @param {'audio'|'video'} [type] - type of devices to check,\r\n     *      undefined stands for both 'audio' and 'video' together\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    isDevicePermissionGranted(type) {\r\n        return new Promise(resolve => {\r\n            // Shortcut: first check if we already know the permission was\r\n            // granted.\r\n            if (type in this._grantedPermissions) {\r\n                resolve(this._grantedPermissions[type]);\r\n\r\n                return;\r\n            }\r\n\r\n            // Check using the Permissions API.\r\n            this._permissionsApiSupported.then(supported => {\r\n                if (!supported) {\r\n                    // Workaround on Safari for audio input device\r\n                    // selection to work. Safari doesn't support the\r\n                    // permissions query.\r\n                    if (browser.isSafari()) {\r\n                        resolve(true);\r\n\r\n                        return;\r\n                    }\r\n                    resolve(false);\r\n\r\n                    return;\r\n                }\r\n\r\n                const promises = [];\r\n\r\n                switch (type) {\r\n                case MediaType.VIDEO:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: VIDEO_PERMISSION_NAME\r\n                        }));\r\n                    break;\r\n                case MediaType.AUDIO:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: AUDIO_PERMISSION_NAME\r\n                        }));\r\n                    break;\r\n                default:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: VIDEO_PERMISSION_NAME\r\n                        }));\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: AUDIO_PERMISSION_NAME\r\n                        }));\r\n                }\r\n\r\n                Promise.all(promises).then(\r\n                    results => resolve(results.every(permissionStatus => {\r\n                        // The status attribute is deprecated, and state\r\n                        // should be used instead, but check both for now\r\n                        // for backwards compatibility.\r\n                        const grantStatus = permissionStatus.state\r\n                            || permissionStatus.status;\r\n\r\n                        return grantStatus === PERMISSION_GRANTED_STATUS;\r\n                    })),\r\n                    () => resolve(false)\r\n                );\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns true if it is possible to be simultaneously capturing audio\r\n     * from more than one device.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isMultipleAudioInputSupported() {\r\n        return !browser.isFirefox();\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, 'default' stands\r\n     * for default device\r\n     * @returns {string}\r\n     */\r\n    getAudioOutputDevice() {\r\n        return RTC.getAudioOutputDevice();\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\r\n     *      default device\r\n     * @returns {Promise} - resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    setAudioOutputDevice(deviceId) {\r\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\r\n\r\n        if (availableDevices.length > 0) {\r\n            // if we have devices info report device to stats\r\n            // normally this will not happen on startup as this method is called\r\n            // too early. This will happen only on user selection of new device\r\n            this._logOutputDevice(\r\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\r\n        }\r\n\r\n        return RTC.setAudioOutputDevice(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Adds an event handler.\r\n     * @param {string} event - event name\r\n     * @param {function} handler - event handler\r\n     */\r\n    addEventListener(event, handler) {\r\n        this._eventEmitter.addListener(event, handler);\r\n    }\r\n\r\n    /**\r\n     * Removes event handler.\r\n     * @param {string} event - event name\r\n     * @param {function} handler - event handler\r\n     */\r\n    removeEventListener(event, handler) {\r\n        this._eventEmitter.removeListener(event, handler);\r\n    }\r\n\r\n    /**\r\n     * Emits an event.\r\n     * @param {string} event - event name\r\n     */\r\n    emitEvent(event, ...args) {\r\n        this._eventEmitter.emit(event, ...args);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current browser can support capturing video,\r\n     * be it camera or desktop, and displaying received video.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    supportsVideo() {\r\n        // Defer to the browser capabilities to allow exposure of the api to the\r\n        // consumer but prevent other files from having to import\r\n        // JitsiMediaDevices.\r\n        return browser.supportsVideo();\r\n    }\r\n}\r\n\r\nexport default new JitsiMediaDevices();\r\n","/* Copyright @ 2015-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*jslint latedef:false*/\r\n\r\n/**\r\n * Ordered log levels.\r\n */\r\nvar levels = {\r\n    \"trace\": 0,\r\n    \"debug\": 1,\r\n    \"info\": 2,\r\n    \"log\": 3,\r\n    \"warn\": 4,\r\n    \"error\": 5\r\n};\r\n\r\n/**\r\n * The default transport - console\r\n * @type LoggerTransport\r\n */\r\nLogger.consoleTransport = console;\r\n\r\n/**\r\n * The array which stores currently registered global transports.\r\n * @type {[LoggerTransport]}\r\n */\r\nvar globalTransports = [ Logger.consoleTransport ];\r\n\r\n/**\r\n * Adds given {@link LoggerTransport} instance to the list of global\r\n * transports which means that it'll be used by all {@link Logger}s\r\n * @param {LoggerTransport} transport\r\n */\r\nLogger.addGlobalTransport = function(transport) {\r\n    if (globalTransports.indexOf(transport) === -1) {\r\n        globalTransports.push(transport);\r\n    }\r\n};\r\n\r\n/**\r\n * Removes given {@link LoggerTransport} instance from the list of global\r\n * transports\r\n * @param {LoggerTransport} transport\r\n */\r\nLogger.removeGlobalTransport = function(transport) {\r\n    var transportIdx = globalTransports.indexOf(transport);\r\n    if (transportIdx !== -1) {\r\n        globalTransports.splice(transportIdx, 1);\r\n    }\r\n};\r\n\r\n/**\r\n * The global configuration options.\r\n */\r\nvar globalOptions = {};\r\n\r\n/**\r\n * Sets global options which will be used by all loggers. Changing these works\r\n * even after other loggers are created.\r\n */\r\nLogger.setGlobalOptions = function(options) {\r\n    globalOptions = options || {};\r\n};\r\n\r\n/**\r\n * Parses Error's object stack trace and extracts information about the last\r\n * caller before the log method was called.\r\n * @returns JS object with info about the caller - method name, file location,\r\n * line and column.\r\n */\r\nfunction getCallerInfo() {\r\n    var callerInfo = {\r\n        methodName: \"\",\r\n        fileLocation: \"\",\r\n        line: null,\r\n        column: null\r\n    };\r\n    //gets the part of the stack without the logger wrappers\r\n    var error = new Error();\r\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\r\n    if(!stack || stack.length < 1) {\r\n        return callerInfo;\r\n    }\r\n    var m = null;\r\n    if(stack[3]) {\r\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\r\n    }\r\n    if(!m || m.length <= 4) {\r\n        //Firefox && Safari\r\n        if(stack[2].indexOf(\"log@\") === 0){\r\n            //Safari\r\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\r\n        } else {\r\n            //Firefox\r\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\r\n        }\r\n        return callerInfo;\r\n    }\r\n\r\n    callerInfo.methodName = m[1];\r\n    callerInfo.fileLocation = m[2];\r\n    callerInfo.line = m[3];\r\n    callerInfo.column = m[4];\r\n    return callerInfo;\r\n}\r\n\r\n/**\r\n * Logs messages using the transports and level from the logger.\r\n * @param logger a logger instance.\r\n * @param level the log level of the message. See the levels variable.\r\n * @param arguments array with arguments that will be logged.\r\n */\r\nfunction log() {\r\n    var logger = arguments[0], level = arguments[1],\r\n        args = Array.prototype.slice.call(arguments, 2);\r\n    if(levels[level] < logger.level) {\r\n        return;\r\n    }\r\n\r\n    var callerInfo\r\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\r\n            getCallerInfo();\r\n    var transports = globalTransports.concat(logger.transports);\r\n    for(var i = 0; i < transports.length; i++) {\r\n        var t = transports[i];\r\n        var l = t[level];\r\n        if(l && typeof(l) === \"function\") {\r\n            var logPrefixes = [];\r\n\r\n            logPrefixes.push(new Date().toISOString());\r\n\r\n            if (logger.id) {\r\n                logPrefixes.push(\"[\" + logger.id + \"]\");\r\n            }\r\n\r\n            if (callerInfo && callerInfo.methodName.length > 1) {\r\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\r\n            }\r\n\r\n            var fullLogParts = logPrefixes.concat(args);\r\n\r\n            l.bind(t).apply(t, fullLogParts);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * Constructs new logger object.\r\n * @param level the logging level for the new logger\r\n * @param id optional identifier for the logger instance.\r\n * @param {LoggerTransport} transports optional list of handlers(objects) for\r\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\r\n * @param options optional configuration file for how the logger should behave.\r\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\r\n * method invocation should be included in the log. Defaults to false, so the\r\n * call site will be included.\r\n */\r\nfunction Logger(level, id, transports, options) {\r\n    this.id = id;\r\n    this.options = options || {};\r\n    this.transports = transports;\r\n    if(!this.transports) {\r\n        this.transports = [];\r\n    }\r\n    this.level = levels[level];\r\n    var methods = Object.keys(levels);\r\n    for(var i = 0; i < methods.length; i++){\r\n        this[methods[i]] =\r\n            log.bind(null, this, methods[i]);\r\n    }\r\n}\r\n\r\n/**\r\n * Sets the log level for the logger.\r\n * @param level the new log level.\r\n */\r\nLogger.prototype.setLevel = function (level) {\r\n    this.level = levels[level];\r\n};\r\nmodule.exports = Logger;\r\n\r\n/**\r\n * Enum for the supported log levels.\r\n */\r\nLogger.levels = {\r\n    TRACE: \"trace\",\r\n    DEBUG: \"debug\",\r\n    INFO: \"info\",\r\n    LOG: \"log\",\r\n    WARN: \"warn\",\r\n    ERROR: \"error\"\r\n};\r\n","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","var grammar = module.exports = {\r\n  v: [{\r\n    name: 'version',\r\n    reg: /^(\\d*)$/\r\n  }],\r\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\r\n    // NB: sessionId will be a String in most cases because it is huge\r\n    name: 'origin',\r\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\r\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\r\n    format: '%s %s %d %s IP%d %s'\r\n  }],\r\n  // default parsing of these only (though some of these feel outdated)\r\n  s: [{ name: 'name' }],\r\n  i: [{ name: 'description' }],\r\n  u: [{ name: 'uri' }],\r\n  e: [{ name: 'email' }],\r\n  p: [{ name: 'phone' }],\r\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\r\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\r\n  //k: [{}], // outdated thing ignored\r\n  t: [{ //t=0 0\r\n    name: 'timing',\r\n    reg: /^(\\d*) (\\d*)/,\r\n    names: ['start', 'stop'],\r\n    format: '%d %d'\r\n  }],\r\n  c: [{ //c=IN IP4 10.47.197.26\r\n    name: 'connection',\r\n    reg: /^IN IP(\\d) (\\S*)/,\r\n    names: ['version', 'ip'],\r\n    format: 'IN IP%d %s'\r\n  }],\r\n  b: [{ //b=AS:4000\r\n    push: 'bandwidth',\r\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\r\n    names: ['type', 'limit'],\r\n    format: '%s:%s'\r\n  }],\r\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\r\n    // NB: special - pushes to session\r\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\r\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\r\n    names: ['type', 'port', 'protocol', 'payloads'],\r\n    format: '%s %d %s %s'\r\n  }],\r\n  a: [\r\n    { //a=rtpmap:110 opus/48000/2\r\n      push: 'rtp',\r\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\r\n      names: ['payload', 'codec', 'rate', 'encoding'],\r\n      format: function (o) {\r\n        return (o.encoding) ?\r\n          'rtpmap:%d %s/%s/%s':\r\n          o.rate ?\r\n          'rtpmap:%d %s/%s':\r\n          'rtpmap:%d %s';\r\n      }\r\n    },\r\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\r\n      //a=fmtp:111 minptime=10; useinbandfec=1\r\n      push: 'fmtp',\r\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\r\n      names: ['payload', 'config'],\r\n      format: 'fmtp:%d %s'\r\n    },\r\n    { //a=control:streamid=0\r\n      name: 'control',\r\n      reg: /^control:(.*)/,\r\n      format: 'control:%s'\r\n    },\r\n    { //a=rtcp:65179 IN IP4 193.84.77.194\r\n      name: 'rtcp',\r\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\r\n      names: ['port', 'netType', 'ipVer', 'address'],\r\n      format: function (o) {\r\n        return (o.address != null) ?\r\n          'rtcp:%d %s IP%d %s':\r\n          'rtcp:%d';\r\n      }\r\n    },\r\n    { //a=rtcp-fb:98 trr-int 100\r\n      push: 'rtcpFbTrrInt',\r\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\r\n      names: ['payload', 'value'],\r\n      format: 'rtcp-fb:%d trr-int %d'\r\n    },\r\n    { //a=rtcp-fb:98 nack rpsi\r\n      push: 'rtcpFb',\r\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\r\n      names: ['payload', 'type', 'subtype'],\r\n      format: function (o) {\r\n        return (o.subtype != null) ?\r\n          'rtcp-fb:%s %s %s':\r\n          'rtcp-fb:%s %s';\r\n      }\r\n    },\r\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\r\n      //a=extmap:1/recvonly URI-gps-string\r\n      push: 'ext',\r\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\r\n      names: ['value', 'direction', 'uri', 'config'],\r\n      format: function (o) {\r\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\r\n      }\r\n    },\r\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\r\n      push: 'crypto',\r\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\r\n      names: ['id', 'suite', 'config', 'sessionConfig'],\r\n      format: function (o) {\r\n        return (o.sessionConfig != null) ?\r\n          'crypto:%d %s %s %s':\r\n          'crypto:%d %s %s';\r\n      }\r\n    },\r\n    { //a=setup:actpass\r\n      name: 'setup',\r\n      reg: /^setup:(\\w*)/,\r\n      format: 'setup:%s'\r\n    },\r\n    { //a=mid:1\r\n      name: 'mid',\r\n      reg: /^mid:([^\\s]*)/,\r\n      format: 'mid:%s'\r\n    },\r\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\r\n      name: 'msid',\r\n      reg: /^msid:(.*)/,\r\n      format: 'msid:%s'\r\n    },\r\n    { //a=ptime:20\r\n      name: 'ptime',\r\n      reg: /^ptime:(\\d*)/,\r\n      format: 'ptime:%d'\r\n    },\r\n    { //a=maxptime:60\r\n      name: 'maxptime',\r\n      reg: /^maxptime:(\\d*)/,\r\n      format: 'maxptime:%d'\r\n    },\r\n    { //a=sendrecv\r\n      name: 'direction',\r\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\r\n    },\r\n    { //a=ice-lite\r\n      name: 'icelite',\r\n      reg: /^(ice-lite)/\r\n    },\r\n    { //a=ice-ufrag:F7gI\r\n      name: 'iceUfrag',\r\n      reg: /^ice-ufrag:(\\S*)/,\r\n      format: 'ice-ufrag:%s'\r\n    },\r\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\r\n      name: 'icePwd',\r\n      reg: /^ice-pwd:(\\S*)/,\r\n      format: 'ice-pwd:%s'\r\n    },\r\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\r\n      name: 'fingerprint',\r\n      reg: /^fingerprint:(\\S*) (\\S*)/,\r\n      names: ['type', 'hash'],\r\n      format: 'fingerprint:%s %s'\r\n    },\r\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\r\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\r\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\r\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\r\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\r\n      push:'candidates',\r\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\r\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\r\n      format: function (o) {\r\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\r\n\r\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\r\n\r\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\r\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\r\n\r\n        if (o.generation != null) {\r\n          str += ' generation %d';\r\n        }\r\n\r\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\r\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\r\n        return str;\r\n      }\r\n    },\r\n    { //a=end-of-candidates (keep after the candidates line for readability)\r\n      name: 'endOfCandidates',\r\n      reg: /^(end-of-candidates)/\r\n    },\r\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\r\n      name: 'remoteCandidates',\r\n      reg: /^remote-candidates:(.*)/,\r\n      format: 'remote-candidates:%s'\r\n    },\r\n    { //a=ice-options:google-ice\r\n      name: 'iceOptions',\r\n      reg: /^ice-options:(\\S*)/,\r\n      format: 'ice-options:%s'\r\n    },\r\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\r\n      push: 'ssrcs',\r\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\r\n      names: ['id', 'attribute', 'value'],\r\n      format: function (o) {\r\n        var str = 'ssrc:%d';\r\n        if (o.attribute != null) {\r\n          str += ' %s';\r\n          if (o.value != null) {\r\n            str += ':%s';\r\n          }\r\n        }\r\n        return str;\r\n      }\r\n    },\r\n    { //a=ssrc-group:FEC 1 2\r\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\r\n      push: 'ssrcGroups',\r\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\r\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\r\n      names: ['semantics', 'ssrcs'],\r\n      format: 'ssrc-group:%s %s'\r\n    },\r\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\r\n      name: 'msidSemantic',\r\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\r\n      names: ['semantic', 'token'],\r\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\r\n    },\r\n    { //a=group:BUNDLE audio video\r\n      push: 'groups',\r\n      reg: /^group:(\\w*) (.*)/,\r\n      names: ['type', 'mids'],\r\n      format: 'group:%s %s'\r\n    },\r\n    { //a=rtcp-mux\r\n      name: 'rtcpMux',\r\n      reg: /^(rtcp-mux)/\r\n    },\r\n    { //a=rtcp-rsize\r\n      name: 'rtcpRsize',\r\n      reg: /^(rtcp-rsize)/\r\n    },\r\n    { //a=sctpmap:5000 webrtc-datachannel 1024\r\n      name: 'sctpmap',\r\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\r\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\r\n      format: function (o) {\r\n        return (o.maxMessageSize != null) ?\r\n          'sctpmap:%s %s %s' :\r\n          'sctpmap:%s %s';\r\n      }\r\n    },\r\n    { //a=x-google-flag:conference\r\n      name: 'xGoogleFlag',\r\n      reg: /^x-google-flag:([^\\s]*)/,\r\n      format: 'x-google-flag:%s'\r\n    },\r\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\r\n      push: 'rids',\r\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\r\n      names: ['id', 'direction', 'params'],\r\n      format: function (o) {\r\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\r\n      }\r\n    },\r\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\r\n      //a=imageattr:* send [x=800,y=640] recv *\r\n      //a=imageattr:100 recv [x=320,y=240]\r\n      push: 'imageattrs',\r\n      reg: new RegExp(\r\n        //a=imageattr:97\r\n        '^imageattr:(\\\\d+|\\\\*)' +\r\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\r\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\r\n        //recv [x=330,y=250]\r\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\r\n      ),\r\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\r\n      format: function (o) {\r\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\r\n      }\r\n    },\r\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\r\n      //a=simulcast:recv 1;4,5 send 6;7\r\n      name: 'simulcast',\r\n      reg: new RegExp(\r\n        //a=simulcast:\r\n        '^simulcast:' +\r\n        //send 1,2,3;~4,~5\r\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\r\n        //space + recv 6;~7,~8\r\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\r\n        //end\r\n        '$'\r\n      ),\r\n      names: ['dir1', 'list1', 'dir2', 'list2'],\r\n      format: function (o) {\r\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\r\n      }\r\n    },\r\n    { //Old simulcast draft 03 (implemented by Firefox)\r\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\r\n      //a=simulcast: recv pt=97;98 send pt=97\r\n      //a=simulcast: send rid=5;6;7 paused=6,7\r\n      name: 'simulcast_03',\r\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\r\n      names: ['value'],\r\n      format: 'simulcast: %s'\r\n    },\r\n    {\r\n      //a=framerate:25\r\n      //a=framerate:29.97\r\n      name: 'framerate',\r\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\r\n      format: 'framerate:%s'\r\n    },\r\n    { // any a= that we don't understand is kepts verbatim on media.invalid\r\n      push: 'invalid',\r\n      names: ['value']\r\n    }\r\n  ]\r\n};\r\n\r\n// set sensible defaults to avoid polluting the grammar with boring details\r\nObject.keys(grammar).forEach(function (key) {\r\n  var objs = grammar[key];\r\n  objs.forEach(function (obj) {\r\n    if (!obj.reg) {\r\n      obj.reg = /(.*)/;\r\n    }\r\n    if (!obj.format) {\r\n      obj.format = '%s';\r\n    }\r\n  });\r\n});\r\n","/* global MediaRecorder, MediaStream */\r\n\r\nconst RecordingResult = require('./recordingResult');\r\n\r\n/**\r\n * Possible audio formats MIME types\r\n */\r\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\r\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\r\n\r\n/**\r\n * A TrackRecorder object holds all the information needed for recording a\r\n * single JitsiTrack (either remote or local)\r\n * @param track The JitsiTrack the object is going to hold\r\n */\r\nconst TrackRecorder = function(track) {\r\n    // The JitsiTrack holding the stream\r\n    this.track = track;\r\n\r\n    // The MediaRecorder recording the stream\r\n    this.recorder = null;\r\n\r\n    // The array of data chunks recorded from the stream\r\n    // acts as a buffer until the data is stored on disk\r\n    this.data = null;\r\n\r\n    // the name of the person of the JitsiTrack. This can be undefined and/or\r\n    // not unique\r\n    this.name = null;\r\n\r\n    // the time of the start of the recording\r\n    this.startTime = null;\r\n};\r\n\r\n/**\r\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\r\n * This will also define the timestamp and try to update the name\r\n * @param trackRecorder the TrackRecorder to start\r\n */\r\nfunction startRecorder(trackRecorder) {\r\n    if (trackRecorder.recorder === undefined) {\r\n        throw new Error('Passed an object to startRecorder which is not a '\r\n            + 'TrackRecorder object');\r\n    }\r\n    trackRecorder.recorder.start();\r\n    trackRecorder.startTime = new Date();\r\n}\r\n\r\n/**\r\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\r\n * This will also try to update the name\r\n * @param trackRecorder the TrackRecorder to stop\r\n */\r\nfunction stopRecorder(trackRecorder) {\r\n    if (trackRecorder.recorder === undefined) {\r\n        throw new Error('Passed an object to stopRecorder which is not a '\r\n            + 'TrackRecorder object');\r\n    }\r\n    trackRecorder.recorder.stop();\r\n}\r\n\r\n/**\r\n * Determines which kind of audio recording the browser supports\r\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\r\n */\r\nfunction determineCorrectFileType() {\r\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\r\n        return AUDIO_WEBM;\r\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\r\n        return AUDIO_OGG;\r\n    }\r\n    throw new Error(\r\n        'unable to create a MediaRecorder with the right mimetype!');\r\n}\r\n\r\n/**\r\n * main exported object of the file, holding all\r\n * relevant functions and variables for the outside world\r\n * @param jitsiConference the jitsiConference which this object\r\n * is going to record\r\n */\r\nfunction AudioRecorder(jitsiConference) {\r\n    // array of TrackRecorders, where each trackRecorder\r\n    // holds the JitsiTrack, MediaRecorder and recorder data\r\n    this.recorders = [];\r\n\r\n    // get which file type is supported by the current browser\r\n    this.fileType = determineCorrectFileType();\r\n\r\n    // boolean flag for active recording\r\n    this.isRecording = false;\r\n\r\n    // the jitsiconference the object is recording\r\n    this.jitsiConference = jitsiConference;\r\n}\r\n\r\n/**\r\n * Add the the exported module so that it can be accessed by other files\r\n */\r\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\r\n\r\n/**\r\n * Adds a new TrackRecorder object to the array.\r\n *\r\n * @param track the track potentially holding an audio stream\r\n */\r\nAudioRecorder.prototype.addTrack = function(track) {\r\n    if (track.isAudioTrack()) {\r\n        // create the track recorder\r\n        const trackRecorder = this.instantiateTrackRecorder(track);\r\n\r\n        // push it to the local array of all recorders\r\n\r\n        this.recorders.push(trackRecorder);\r\n\r\n        // update the name of the trackRecorders\r\n        this.updateNames();\r\n\r\n        // If we're already recording, immediately start recording this new\r\n        // track.\r\n        if (this.isRecording) {\r\n            startRecorder(trackRecorder);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\r\n * data array for the trackRecorder.\r\n * @param track the JitsiTrack holding the audio MediaStream(s)\r\n */\r\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\r\n    const trackRecorder = new TrackRecorder(track);\r\n\r\n    // Create a new stream which only holds the audio track\r\n    const originalStream = trackRecorder.track.getOriginalStream();\r\n    const stream = createEmptyStream();\r\n\r\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\r\n\r\n    // Create the MediaRecorder\r\n    trackRecorder.recorder = new MediaRecorder(stream,\r\n        { mimeType: this.fileType });\r\n\r\n    // array for holding the recorder data. Resets it when\r\n    // audio already has been recorder once\r\n    trackRecorder.data = [];\r\n\r\n    // function handling a dataEvent, e.g the stream gets new data\r\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\r\n        if (dataEvent.data.size > 0) {\r\n            trackRecorder.data.push(dataEvent.data);\r\n        }\r\n    };\r\n\r\n    return trackRecorder;\r\n};\r\n\r\n/**\r\n * Notifies the module that a specific track has stopped, e.g participant left\r\n * the conference.\r\n * if the recording has not started yet, the TrackRecorder will be removed from\r\n * the array. If the recording has started, the recorder will stop recording\r\n * but not removed from the array so that the recorded stream can still be\r\n * accessed\r\n *\r\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\r\n */\r\nAudioRecorder.prototype.removeTrack = function(track) {\r\n    if (track.isVideoTrack()) {\r\n        return;\r\n    }\r\n\r\n    const array = this.recorders;\r\n    let i;\r\n\r\n    for (i = 0; i < array.length; i++) {\r\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\r\n            const recorderToRemove = array[i];\r\n\r\n            if (this.isRecording) {\r\n                stopRecorder(recorderToRemove);\r\n            } else {\r\n                // remove the TrackRecorder from the array\r\n                array.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // make sure the names are up to date\r\n    this.updateNames();\r\n};\r\n\r\n/**\r\n * Tries to update the name value of all TrackRecorder in the array.\r\n * If it hasn't changed,it will keep the exiting name. If it changes to a\r\n * undefined value, the old value will also be kept.\r\n */\r\nAudioRecorder.prototype.updateNames = function() {\r\n    const conference = this.jitsiConference;\r\n\r\n    this.recorders.forEach(trackRecorder => {\r\n        if (trackRecorder.track.isLocal()) {\r\n            trackRecorder.name = 'the transcriber';\r\n        } else {\r\n            const id = trackRecorder.track.getParticipantId();\r\n            const participant = conference.getParticipantById(id);\r\n            const newName = participant.getDisplayName();\r\n\r\n            if (newName !== 'undefined') {\r\n                trackRecorder.name = newName;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Starts the audio recording of every local and remote track\r\n */\r\nAudioRecorder.prototype.start = function() {\r\n    if (this.isRecording) {\r\n        throw new Error('audiorecorder is already recording');\r\n    }\r\n\r\n    // set boolean isRecording flag to true so if new participants join the\r\n    // conference, that track can instantly start recording as well\r\n    this.isRecording = true;\r\n\r\n    // start all the mediaRecorders\r\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\r\n\r\n    // log that recording has started\r\n    console.log(\r\n        `Started the recording of the audio. There are currently ${\r\n            this.recorders.length} recorders active.`);\r\n};\r\n\r\n/**\r\n * Stops the audio recording of every local and remote track\r\n */\r\nAudioRecorder.prototype.stop = function() {\r\n    // set the boolean flag to false\r\n    this.isRecording = false;\r\n\r\n    // stop all recorders\r\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\r\n    console.log('stopped recording');\r\n};\r\n\r\n/**\r\n * link hacking to download all recorded audio streams\r\n */\r\nAudioRecorder.prototype.download = function() {\r\n    this.recorders.forEach(trackRecorder => {\r\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n\r\n        document.body.appendChild(a);\r\n        a.style = 'display: none';\r\n        a.href = url;\r\n        a.download = `test.${this.fileType.split('/')[1]}`;\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n    });\r\n};\r\n\r\n/**\r\n * returns the audio files of all recorders as an array of objects,\r\n * which include the name of the owner of the track and the starting time stamp\r\n * @returns {Array} an array of RecordingResult objects\r\n */\r\nAudioRecorder.prototype.getRecordingResults = function() {\r\n    if (this.isRecording) {\r\n        throw new Error(\r\n            'cannot get blobs because the AudioRecorder is still recording!');\r\n    }\r\n\r\n    // make sure the names are up to date before sending them off\r\n    this.updateNames();\r\n\r\n    const array = [];\r\n\r\n    this.recorders.forEach(\r\n        recorder =>\r\n            array.push(\r\n                new RecordingResult(\r\n                    new Blob(recorder.data, { type: this.fileType }),\r\n                    recorder.name,\r\n                    recorder.startTime)));\r\n\r\n    return array;\r\n};\r\n\r\n/**\r\n * Gets the mime type of the recorder audio\r\n * @returns {String} the mime type of the recorder audio\r\n */\r\nAudioRecorder.prototype.getFileType = function() {\r\n    return this.fileType;\r\n};\r\n\r\n/**\r\n * Creates a empty MediaStream object which can be used\r\n * to add MediaStreamTracks to\r\n * @returns MediaStream\r\n */\r\nfunction createEmptyStream() {\r\n    if (typeof MediaStream !== 'undefined') {\r\n        return new MediaStream();\r\n    }\r\n    throw new Error('cannot create a clean mediaStream');\r\n}\r\n\r\n/**\r\n * export the main object AudioRecorder\r\n */\r\nmodule.exports = AudioRecorder;\r\n","import JitsiConference from './JitsiConference';\r\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport XMPP from './modules/xmpp/xmpp';\r\nimport {\r\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\r\n    createConnectionFailedEvent\r\n} from './service/statistics/AnalyticsEvents';\r\n\r\n/**\r\n * Creates a new connection object for the Jitsi Meet server side video\r\n * conferencing service. Provides access to the JitsiConference interface.\r\n * @param appID identification for the provider of Jitsi Meet video conferencing\r\n * services.\r\n * @param token the JWT token used to authenticate with the server(optional)\r\n * @param options Object with properties / settings related to connection with\r\n * the server.\r\n * @constructor\r\n */\r\nexport default function JitsiConnection(appID, token, options) {\r\n    this.appID = appID;\r\n    this.token = token;\r\n    this.options = options;\r\n    this.xmpp = new XMPP(options, token);\r\n\r\n    /* eslint-disable max-params */\r\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\r\n        (errType, msg, credentials, details) => {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createConnectionFailedEvent(errType, msg, details));\r\n        });\r\n    /* eslint-enable max-params */\r\n\r\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\r\n        msg => {\r\n            // we can see disconnects from normal tab closing of the browser\r\n            // and then there are no msgs, but we want to log only disconnects\r\n            // when there is real error\r\n            // XXX Do we need the difference in handling between the log and\r\n            // analytics event here?\r\n            if (msg) {\r\n                Statistics.sendAnalytics(\r\n                    ANALYTICS_CONNECTION_DISCONNECTED,\r\n                    { message: msg });\r\n            }\r\n            Statistics.sendLog(\r\n                JSON.stringify(\r\n                    {\r\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\r\n                        msg\r\n                    }));\r\n        });\r\n}\r\n\r\n/**\r\n * Connect the client with the server.\r\n * @param options {object} connecting options\r\n * (for example authentications parameters).\r\n */\r\nJitsiConnection.prototype.connect = function(options = {}) {\r\n    this.xmpp.connect(options.id, options.password);\r\n};\r\n\r\n/**\r\n * Attach to existing connection. Can be used for optimizations. For example:\r\n * if the connection is created on the server we can attach to it and start\r\n * using it.\r\n *\r\n * @param options {object} connecting options - rid, sid and jid.\r\n */\r\nJitsiConnection.prototype.attach = function(options) {\r\n    this.xmpp.attach(options);\r\n};\r\n\r\n/**\r\n * Disconnect the client from the server.\r\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\r\n */\r\nJitsiConnection.prototype.disconnect = function(...args) {\r\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\r\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\r\n    // may optionally pass the event which triggered the disconnect in order to\r\n    // provide the implementation with finer-grained context.\r\n    return this.xmpp.disconnect(...args);\r\n};\r\n\r\n/**\r\n * Returns the jid of the participant associated with the XMPP connection.\r\n *\r\n * @returns {string} The jid of the participant.\r\n */\r\nJitsiConnection.prototype.getJid = function() {\r\n    return this.xmpp.getJid();\r\n};\r\n\r\n/**\r\n * This method allows renewal of the tokens if they are expiring.\r\n * @param token the new token.\r\n */\r\nJitsiConnection.prototype.setToken = function(token) {\r\n    this.token = token;\r\n};\r\n\r\n/**\r\n * Creates and joins new conference.\r\n * @param name the name of the conference; if null - a generated name will be\r\n * provided from the api\r\n * @param options Object with properties / settings related to the conference\r\n * that will be created.\r\n * @returns {JitsiConference} returns the new conference object.\r\n */\r\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\r\n    return new JitsiConference({\r\n        name,\r\n        config: options,\r\n        connection: this\r\n    });\r\n};\r\n\r\n/**\r\n * Subscribes the passed listener to the event.\r\n * @param event {JitsiConnectionEvents} the connection event.\r\n * @param listener {Function} the function that will receive the event\r\n */\r\nJitsiConnection.prototype.addEventListener = function(event, listener) {\r\n    this.xmpp.addListener(event, listener);\r\n};\r\n\r\n/**\r\n * Unsubscribes the passed handler.\r\n * @param event {JitsiConnectionEvents} the connection event.\r\n * @param listener {Function} the function that will receive the event\r\n */\r\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\r\n    this.xmpp.removeListener(event, listener);\r\n};\r\n\r\n/**\r\n * Returns measured connectionTimes.\r\n */\r\nJitsiConnection.prototype.getConnectionTimes = function() {\r\n    return this.xmpp.connectionTimes;\r\n};\r\n\r\n/**\r\n * Adds new feature to the list of supported features for the local\r\n * participant.\r\n * @param {String} feature the name of the feature.\r\n * @param {boolean} submit if true - the new list of features will be\r\n * immediately submitted to the others.\r\n */\r\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\r\n    return this.xmpp.caps.addFeature(feature, submit);\r\n};\r\n\r\n/**\r\n * Removes a feature from the list of supported features for the local\r\n * participant\r\n * @param {String} feature the name of the feature.\r\n * @param {boolean} submit if true - the new list of features will be\r\n * immediately submitted to the others.\r\n */\r\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\r\n    return this.xmpp.caps.removeFeature(feature, submit);\r\n};\r\n\r\n/**\r\n * Get object with internal logs.\r\n */\r\nJitsiConnection.prototype.getLogs = function() {\r\n    const data = this.xmpp.getJingleLog();\r\n\r\n    const metadata = {};\r\n\r\n    metadata.time = new Date();\r\n    metadata.url = window.location.href;\r\n    metadata.ua = navigator.userAgent;\r\n\r\n    const log = this.xmpp.getXmppLog();\r\n\r\n    if (log) {\r\n        metadata.xmpp = log;\r\n    }\r\n\r\n    data.metadata = metadata;\r\n\r\n    return data;\r\n};\r\n","/* global __filename, $, Promise */\r\n\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport JitsiParticipant from './JitsiParticipant';\r\nimport JitsiTrackError from './JitsiTrackError';\r\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\r\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\r\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\r\nimport IceFailedHandling\r\n    from './modules/connectivity/IceFailedHandling';\r\nimport ParticipantConnectionStatusHandler\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\r\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\r\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\r\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\r\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\r\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\r\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\r\nimport E2ePing from './modules/e2eping/e2eping';\r\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\r\nimport { QualityController } from './modules/qualitycontrol/QualityController';\r\nimport RecordingManager from './modules/recording/RecordingManager';\r\nimport Settings from './modules/settings/Settings';\r\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\r\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\r\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport Transcriber from './modules/transcription/transcriber';\r\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\r\nimport RandomUtil from './modules/util/RandomUtil';\r\nimport ComponentsVersions from './modules/version/ComponentsVersions';\r\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\r\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\r\nimport { JITSI_MEET_MUC_TYPE } from './modules/xmpp/xmpp';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport VideoType from './service/RTC/VideoType';\r\nimport {\r\n    ACTION_JINGLE_RESTART,\r\n    ACTION_JINGLE_SI_RECEIVED,\r\n    ACTION_JINGLE_SI_TIMEOUT,\r\n    ACTION_JINGLE_TERMINATE,\r\n    ACTION_P2P_DECLINED,\r\n    ACTION_P2P_ESTABLISHED,\r\n    ACTION_P2P_FAILED,\r\n    ACTION_P2P_SWITCH_TO_JVB,\r\n    ICE_ESTABLISHMENT_DURATION_DIFF,\r\n    createConferenceEvent,\r\n    createJingleEvent,\r\n    createP2PEvent\r\n} from './service/statistics/AnalyticsEvents';\r\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\r\nimport FeatureFlags from './modules/flags/FeatureFlags';\r\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * How long since Jicofo is supposed to send a session-initiate, before\r\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\r\n * @type {number}\r\n */\r\nconst JINGLE_SI_TIMEOUT = 5000;\r\n\r\n/**\r\n * Creates a JitsiConference object with the given name and properties.\r\n * Note: this constructor is not a part of the public API (objects should be\r\n * created using JitsiConnection.createConference).\r\n * @param options.config properties / settings related to the conference that\r\n * will be created.\r\n * @param options.name the name of the conference\r\n * @param options.connection the JitsiConnection object for this\r\n * JitsiConference.\r\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\r\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\r\n * calculated and submitted to the analytics module.\r\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\r\n * restart logic.\r\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\r\n * the peer to peer mode will be enabled. It means that when there are only 2\r\n * participants in the conference an attempt to make direct connection will be\r\n * made. If the connection succeeds the conference will stop sending data\r\n * through the JVB connection and will use the direct one instead.\r\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\r\n * seconds, before the conference switches back to P2P, after the 3rd\r\n * participant has left the room.\r\n * @param {number} [options.config.channelLastN=-1] The requested amount of\r\n * videos are going to be delivered after the value is in effect. Set to -1 for\r\n * unlimited or all available videos.\r\n * @param {number} [options.config.forceJVB121Ratio]\r\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\r\n * conference should be moved to the JVB instead of P2P. The decision is made on\r\n * the responder side, after ICE succeeds on the P2P connection.\r\n * @param {*} [options.config.openBridgeChannel] Which kind of communication to\r\n * open with the videobridge. Values can be \"datachannel\", \"websocket\", true\r\n * (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false\r\n * (don't open any channel).\r\n * @constructor\r\n *\r\n * FIXME Make all methods which are called from lib-internal classes\r\n *       to non-public (use _). To name a few:\r\n *       {@link JitsiConference.onLocalRoleChanged}\r\n *       {@link JitsiConference.onUserRoleChanged}\r\n *       {@link JitsiConference.onMemberLeft}\r\n *       and so on...\r\n */\r\nexport default function JitsiConference(options) {\r\n    if (!options.name || options.name.toLowerCase() !== options.name) {\r\n        const errmsg\r\n            = 'Invalid conference name (no conference name passed or it '\r\n                + 'contains invalid characters like capital letters)!';\r\n\r\n        logger.error(errmsg);\r\n        throw new Error(errmsg);\r\n    }\r\n    this.eventEmitter = new EventEmitter();\r\n    this.options = options;\r\n    this.eventManager = new JitsiConferenceEventManager(this);\r\n    this.participants = {};\r\n\r\n    this._signalingLayer = new SignalingLayerImpl();\r\n\r\n    this._init(options);\r\n    this.componentsVersions = new ComponentsVersions(this);\r\n\r\n    /**\r\n     * Jingle session instance for the JVB connection.\r\n     * @type {JingleSessionPC}\r\n     */\r\n    this.jvbJingleSession = null;\r\n    this.lastDominantSpeaker = null;\r\n    this.dtmfManager = null;\r\n    this.somebodySupportsDTMF = false;\r\n    this.authEnabled = false;\r\n    this.startAudioMuted = false;\r\n    this.startVideoMuted = false;\r\n    this.startMutedPolicy = {\r\n        audio: false,\r\n        video: false\r\n    };\r\n    this.isMutedByFocus = false;\r\n\r\n    // when muted by focus we receive the jid of the initiator of the mute\r\n    this.mutedByFocusActor = null;\r\n\r\n    // Flag indicates if the 'onCallEnded' method was ever called on this\r\n    // instance. Used to log extra analytics event for debugging purpose.\r\n    // We need to know if the potential issue happened before or after\r\n    // the restart.\r\n    this.wasStopped = false;\r\n\r\n    // Conference properties, maintained by jicofo.\r\n    this.properties = {};\r\n\r\n    /**\r\n     * The object which monitors local and remote connection statistics (e.g.\r\n     * sending bitrate) and calculates a number which represents the connection\r\n     * quality.\r\n     */\r\n    this.connectionQuality\r\n        = new ConnectionQuality(this, this.eventEmitter, options);\r\n\r\n    /**\r\n     * Reports average RTP statistics to the analytics module.\r\n     * @type {AvgRTPStatsReporter}\r\n     */\r\n    this.avgRtpStatsReporter\r\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\r\n\r\n    /**\r\n     * Detects issues with the audio of remote participants.\r\n     * @type {AudioOutputProblemDetector}\r\n     */\r\n    this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\r\n\r\n    /**\r\n     * Indicates whether the connection is interrupted or not.\r\n     */\r\n    this.isJvbConnectionInterrupted = false;\r\n\r\n    /**\r\n     * The object which tracks active speaker times\r\n     */\r\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\r\n\r\n    /* P2P related fields below: */\r\n\r\n    /**\r\n     * Stores reference to deferred start P2P task. It's created when 3rd\r\n     * participant leaves the room in order to avoid ping pong effect (it\r\n     * could be just a page reload).\r\n     * @type {number|null}\r\n     */\r\n    this.deferredStartP2PTask = null;\r\n\r\n    const delay\r\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\r\n\r\n    /**\r\n     * A delay given in seconds, before the conference switches back to P2P\r\n     * after the 3rd participant has left.\r\n     * @type {number}\r\n     */\r\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\r\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\r\n\r\n    /**\r\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\r\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\r\n     * and running.\r\n     * @type {boolean}\r\n     */\r\n    this.isP2PConnectionInterrupted = false;\r\n\r\n    /**\r\n     * Flag set to <tt>true</tt> when P2P session has been established\r\n     * (ICE has been connected) and this conference is currently in the peer to\r\n     * peer mode (P2P connection is the active one).\r\n     * @type {boolean}\r\n     */\r\n    this.p2p = false;\r\n\r\n    /**\r\n     * A JingleSession for the direct peer to peer connection.\r\n     * @type {JingleSessionPC}\r\n     */\r\n    this.p2pJingleSession = null;\r\n\r\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\r\n    this.recordingManager = new RecordingManager(this.room);\r\n\r\n    /**\r\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\r\n     *\r\n     * @type {undefined|number}\r\n     * @private\r\n     */\r\n    this._conferenceJoinAnalyticsEventSent = undefined;\r\n\r\n    /**\r\n     * End-to-End Encryption. Make it available if supported.\r\n     */\r\n    if (this.isE2EESupported()) {\r\n        logger.info('End-to-End Encryprtion is supported');\r\n\r\n        this._e2eEncryption = new E2EEncryption(this);\r\n    }\r\n}\r\n\r\n// FIXME convert JitsiConference to ES6 - ASAP !\r\nJitsiConference.prototype.constructor = JitsiConference;\r\n\r\n/**\r\n * Create a resource for the a jid. We use the room nickname (the resource part\r\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\r\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\r\n * into a 32bit field.\r\n *\r\n * @param {string} jid - The id set onto the XMPP connection.\r\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\r\n * to the XMPP service with a password.\r\n * @returns {string}\r\n * @static\r\n */\r\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\r\n    let mucNickname;\r\n\r\n    //Bizwell. nickname is loginID. by.jhhan\r\n    mucNickname = Strophe.getNodeFromJid(jid);\r\n    mucNickname += \"$\";\r\n    mucNickname += RandomUtil.randomHexString(8).toLowerCase();\r\n    /*\r\n\tif (isAuthenticatedUser) {\r\n        // For authenticated users generate a random ID.\r\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\r\n    } else {\r\n        // We try to use the first part of the node (which for anonymous users\r\n        // on prosody is a UUID) to match the previous behavior (and maybe make\r\n        // debugging easier).\r\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\r\n            .toLowerCase();\r\n\r\n        // But if this doesn't have the required format we just generate a new\r\n        // random nickname.\r\n        const re = /[0-9a-f]{8}/g;\r\n\r\n        if (!re.test(mucNickname)) {\r\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\r\n        }\r\n    }\r\n\t*/\r\n\r\n    return mucNickname;\r\n};\r\n\r\n/**\r\n * Initializes the conference object properties\r\n * @param options {object}\r\n * @param options.connection {JitsiConnection} overrides this.connection\r\n */\r\nJitsiConference.prototype._init = function(options = {}) {\r\n    // Override connection and xmpp properties (Useful if the connection\r\n    // reloaded)\r\n    if (options.connection) {\r\n        this.connection = options.connection;\r\n        this.xmpp = this.connection.xmpp;\r\n\r\n        // Setup XMPP events only if we have new connection object.\r\n        this.eventManager.setupXMPPListeners();\r\n    }\r\n\r\n    const { config } = this.options;\r\n\r\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\r\n    this.room = this.xmpp.createRoom(\r\n        this.options.name, {\r\n            ...config,\r\n            statsId: this._statsCurrentId\r\n        },\r\n        JitsiConference.resourceCreator\r\n    );\r\n\r\n    this._signalingLayer.setChatRoom(this.room);\r\n\r\n    // Connection interrupted/restored listeners\r\n    this._onIceConnectionInterrupted\r\n        = this._onIceConnectionInterrupted.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\r\n\r\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\r\n\r\n    this._onIceConnectionEstablished\r\n        = this._onIceConnectionEstablished.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\r\n\r\n    this._updateProperties = this._updateProperties.bind(this);\r\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\r\n        this._updateProperties);\r\n\r\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\r\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\r\n\r\n    this.e2eping = new E2ePing(\r\n        this,\r\n        config,\r\n        (message, to) => {\r\n            try {\r\n                this.sendMessage(\r\n                    message, to, true /* sendThroughVideobridge */);\r\n            } catch (error) {\r\n                logger.warn('Failed to send E2E ping request or response.', error && error.msg);\r\n            }\r\n        });\r\n\r\n    if (!this.rtc) {\r\n        this.rtc = new RTC(this, options);\r\n        this.eventManager.setupRTCListeners();\r\n    }\r\n\r\n    this.qualityController = new QualityController(this);\r\n\r\n    this.participantConnectionStatus\r\n        = new ParticipantConnectionStatusHandler(\r\n            this.rtc,\r\n            this,\r\n            {\r\n                // Both these options are not public API, leaving it here only\r\n                // as an entry point through config for tuning up purposes.\r\n                // Default values should be adjusted as soon as optimal values\r\n                // are discovered.\r\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\r\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\r\n            });\r\n    this.participantConnectionStatus.init();\r\n\r\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\r\n    let enableCallStats = true;\r\n\r\n    if (config.testing && config.testing.callStatsThreshold) {\r\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\r\n    }\r\n\r\n    if (!this.statistics) {\r\n        this.statistics = new Statistics(this.xmpp, {\r\n            aliasName: this._statsCurrentId,\r\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\r\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\r\n            siteID: config.siteID,\r\n            customScriptUrl: config.callStatsCustomScriptUrl,\r\n            callStatsID: config.callStatsID,\r\n            callStatsSecret: config.callStatsSecret,\r\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\r\n            enableCallStats,\r\n            roomName: this.options.name,\r\n            applicationName: config.applicationName,\r\n            getWiFiStatsMethod: config.getWiFiStatsMethod\r\n        });\r\n        Statistics.analytics.addPermanentProperties({\r\n            'callstats_name': this._statsCurrentId\r\n        });\r\n\r\n        // Start performance observer for monitoring long tasks\r\n        if (config.longTasksStatsInterval) {\r\n            this.statistics.attachLongTasksStats(this);\r\n        }\r\n    }\r\n\r\n    this.eventManager.setupChatRoomListeners();\r\n\r\n    // Always add listeners because on reload we are executing leave and the\r\n    // listeners are removed from statistics module.\r\n    this.eventManager.setupStatisticsListeners();\r\n\r\n    // Disable VAD processing on Safari since it causes audio input to\r\n    // fail on some of the mobile devices.\r\n    if (config.enableTalkWhileMuted && !browser.isSafari()) {\r\n\r\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\r\n        // based detection.\r\n        if (config.createVADProcessor) {\r\n            logger.info('Using VAD detection for generating talk while muted events');\r\n\r\n            if (!this._audioAnalyser) {\r\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\r\n            }\r\n\r\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\r\n\r\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\r\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\r\n\r\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\r\n        } else {\r\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\r\n        }\r\n    }\r\n\r\n    // Disable noisy mic detection on safari since it causes the audio input to\r\n    // fail on Safari on iPadOS.\r\n    if (config.enableNoisyMicDetection && !browser.isSafari()) {\r\n        if (config.createVADProcessor) {\r\n            if (!this._audioAnalyser) {\r\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\r\n            }\r\n\r\n            const vadNoiseDetection = new VADNoiseDetection();\r\n\r\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\r\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\r\n\r\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\r\n        } else {\r\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\r\n        }\r\n    }\r\n\r\n    // Generates events based on no audio input detector.\r\n    if (config.enableNoAudioDetection) {\r\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\r\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\r\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\r\n        });\r\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\r\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\r\n        });\r\n    }\r\n\r\n\r\n    if ('channelLastN' in config) {\r\n        this.setLastN(config.channelLastN);\r\n    }\r\n\r\n    /**\r\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\r\n     * @type {Jvb121EventGenerator}\r\n     */\r\n    this.jvb121Status = new Jvb121EventGenerator(this);\r\n\r\n    // creates dominant speaker detection that works only in p2p mode\r\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\r\n\r\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\r\n        this.setLocalParticipantProperty(\r\n            'region', config.deploymentInfo.userRegion);\r\n    }\r\n};\r\n\r\n/**\r\n * Joins the conference.\r\n * @param password {string} the password\r\n */\r\nJitsiConference.prototype.join = function(password) {\r\n    if (this.room) {\r\n        this.room.join(password).then(() => this._maybeSetSITimeout());\r\n    }\r\n};\r\n\r\n/**\r\n * Authenticates and upgrades the role of the local participant/user.\r\n *\r\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\r\n * authenticating and upgrading the role of the local participant/user finishes\r\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\r\n * process.\r\n */\r\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\r\n    return authenticateAndUpgradeRole.call(this, {\r\n        ...options,\r\n        onCreateResource: JitsiConference.resourceCreator\r\n    });\r\n};\r\n\r\n/**\r\n * Check if joined to the conference.\r\n */\r\nJitsiConference.prototype.isJoined = function() {\r\n    return this.room && this.room.joined;\r\n};\r\n\r\n/**\r\n * Tells whether or not the P2P mode is enabled in the configuration.\r\n * @return {boolean}\r\n */\r\nJitsiConference.prototype.isP2PEnabled = function() {\r\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\r\n\r\n        // FIXME: remove once we have a default config template. -saghul\r\n        || typeof this.options.config.p2p === 'undefined';\r\n};\r\n\r\n/**\r\n * When in P2P test mode, the conference will not automatically switch to P2P\r\n * when there 2 participants.\r\n * @return {boolean}\r\n */\r\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\r\n    return Boolean(this.options.config.testing\r\n        && this.options.config.testing.p2pTestMode);\r\n};\r\n\r\n/**\r\n * Leaves the conference.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.leave = function() {\r\n    if (this.participantConnectionStatus) {\r\n        this.participantConnectionStatus.dispose();\r\n        this.participantConnectionStatus = null;\r\n    }\r\n    if (this.avgRtpStatsReporter) {\r\n        this.avgRtpStatsReporter.dispose();\r\n        this.avgRtpStatsReporter = null;\r\n    }\r\n\r\n    if (this._audioOutputProblemDetector) {\r\n        this._audioOutputProblemDetector.dispose();\r\n        this._audioOutputProblemDetector = null;\r\n    }\r\n\r\n    if (this.e2eping) {\r\n        this.e2eping.stop();\r\n        this.e2eping = null;\r\n    }\r\n\r\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\r\n\r\n    this.rtc.closeBridgeChannel();\r\n\r\n    this._sendConferenceLeftAnalyticsEvent();\r\n\r\n    if (this.statistics) {\r\n        this.statistics.dispose();\r\n    }\r\n\r\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\r\n\r\n    // Close both JVb and P2P JingleSessions\r\n    if (this.jvbJingleSession) {\r\n        this.jvbJingleSession.close();\r\n        this.jvbJingleSession = null;\r\n    }\r\n    if (this.p2pJingleSession) {\r\n        this.p2pJingleSession.close();\r\n        this.p2pJingleSession = null;\r\n    }\r\n\r\n    // leave the conference\r\n    if (this.room) {\r\n        const room = this.room;\r\n\r\n        // Unregister connection state listeners\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_INTERRUPTED,\r\n            this._onIceConnectionInterrupted);\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_RESTORED,\r\n            this._onIceConnectionRestored);\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_ESTABLISHED,\r\n            this._onIceConnectionEstablished);\r\n\r\n        room.removeListener(\r\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\r\n            this._updateProperties);\r\n\r\n        room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\r\n\r\n        this.eventManager.removeXMPPListeners();\r\n\r\n        this.room = null;\r\n\r\n        this._signalingLayer.setChatRoom(null);\r\n\r\n        return room.leave()\r\n            .then(() => {\r\n                if (this.rtc) {\r\n                    this.rtc.destroy();\r\n                }\r\n            })\r\n            .catch(error => {\r\n                // remove all participants because currently the conference\r\n                // won't be usable anyway. This is done on success automatically\r\n                // by the ChatRoom instance.\r\n                this.getParticipants().forEach(\r\n                    participant => this.onMemberLeft(participant.getJid()));\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    // If this.room == null we are calling second time leave().\r\n    return Promise.reject(\r\n        new Error('The conference is has been already left'));\r\n};\r\n\r\n/**\r\n * Returns the currently active media session if any.\r\n *\r\n * @returns {JingleSessionPC|undefined}\r\n * @private\r\n */\r\nJitsiConference.prototype._getActiveMediaSession = function() {\r\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\r\n};\r\n\r\n/**\r\n * Returns an array containing all media sessions existing in this conference.\r\n *\r\n * @returns {Array<JingleSessionPC>}\r\n * @private\r\n */\r\nJitsiConference.prototype._getMediaSessions = function() {\r\n    const sessions = [];\r\n\r\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\r\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\r\n\r\n    return sessions;\r\n};\r\n\r\n/**\r\n * Returns name of this conference.\r\n */\r\nJitsiConference.prototype.getName = function() {\r\n    return this.options.name;\r\n};\r\n\r\n/**\r\n * Returns the {@link JitsiConnection} used by this this conference.\r\n */\r\nJitsiConference.prototype.getConnection = function() {\r\n    return this.connection;\r\n};\r\n\r\n/**\r\n * Check if authentication is enabled for this conference.\r\n */\r\nJitsiConference.prototype.isAuthEnabled = function() {\r\n    return this.authEnabled;\r\n};\r\n\r\n/**\r\n * Check if user is logged in.\r\n */\r\nJitsiConference.prototype.isLoggedIn = function() {\r\n    return Boolean(this.authIdentity);\r\n};\r\n\r\n/**\r\n * Get authorized login.\r\n */\r\nJitsiConference.prototype.getAuthLogin = function() {\r\n    return this.authIdentity;\r\n};\r\n\r\n/**\r\n * Check if external authentication is enabled for this conference.\r\n */\r\nJitsiConference.prototype.isExternalAuthEnabled = function() {\r\n    return this.room && this.room.moderator.isExternalAuthEnabled();\r\n};\r\n\r\n/**\r\n * Get url for external authentication.\r\n * @param {boolean} [urlForPopup] if true then return url for login popup,\r\n *                                else url of login page.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\r\n    return new Promise((resolve, reject) => {\r\n        if (!this.isExternalAuthEnabled()) {\r\n            reject();\r\n\r\n            return;\r\n        }\r\n        if (urlForPopup) {\r\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\r\n        } else {\r\n            this.room.moderator.getLoginUrl(resolve, reject);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Returns the local tracks of the given media type, or all local tracks if no\r\n * specific type is given.\r\n * @param {MediaType} [mediaType] Optional media type (audio or video).\r\n */\r\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\r\n    let tracks = [];\r\n\r\n    if (this.rtc) {\r\n        tracks = this.rtc.getLocalTracks(mediaType);\r\n    }\r\n\r\n    return tracks;\r\n};\r\n\r\n/**\r\n * Obtains local audio track.\r\n * @return {JitsiLocalTrack|null}\r\n */\r\nJitsiConference.prototype.getLocalAudioTrack = function() {\r\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\r\n};\r\n\r\n/**\r\n * Obtains local video track.\r\n * @return {JitsiLocalTrack|null}\r\n */\r\nJitsiConference.prototype.getLocalVideoTrack = function() {\r\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\r\n};\r\n\r\n/**\r\n * Obtains the performance statistics.\r\n * @returns {Object|null}\r\n */\r\nJitsiConference.prototype.getPerformanceStats = function() {\r\n    return {\r\n        longTasksStats: this.statistics.getLongTasksStats()\r\n    };\r\n};\r\n\r\n/**\r\n * Attaches a handler for events(For example - \"participant joined\".) in the\r\n * conference. All possible event are defined in JitsiConferenceEvents.\r\n * @param eventId the event ID.\r\n * @param handler handler for the event.\r\n *\r\n * Note: consider adding eventing functionality by extending an EventEmitter\r\n * impl, instead of rolling ourselves\r\n */\r\nJitsiConference.prototype.on = function(eventId, handler) {\r\n    if (this.eventEmitter) {\r\n        this.eventEmitter.on(eventId, handler);\r\n    }\r\n};\r\n\r\n/**\r\n * Removes event listener\r\n * @param eventId the event ID.\r\n * @param [handler] optional, the specific handler to unbind\r\n *\r\n * Note: consider adding eventing functionality by extending an EventEmitter\r\n * impl, instead of rolling ourselves\r\n */\r\nJitsiConference.prototype.off = function(eventId, handler) {\r\n    if (this.eventEmitter) {\r\n        this.eventEmitter.removeListener(eventId, handler);\r\n    }\r\n};\r\n\r\n// Common aliases for event emitter\r\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\r\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\r\n\r\n/**\r\n * Receives notifications from other participants about commands / custom events\r\n * (sent by sendCommand or sendCommandOnce methods).\r\n * @param command {String} the name of the command\r\n * @param handler {Function} handler for the command\r\n */\r\nJitsiConference.prototype.addCommandListener = function(command, handler) {\r\n    if (this.room) {\r\n        this.room.addPresenceListener(command, handler);\r\n    }\r\n};\r\n\r\n/**\r\n  * Removes command  listener\r\n  * @param command {String} the name of the command\r\n  * @param handler {Function} handler to remove for the command\r\n  */\r\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\r\n    if (this.room) {\r\n        this.room.removePresenceListener(command, handler);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends text message to the other participants in the conference\r\n * @param message the text message.\r\n * @param elementName the element name to encapsulate the message.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendTextMessage = function(\r\n        message, elementName = 'body') {\r\n    if (this.room) {\r\n        const displayName = (this.room.getFromPresence('nick') || {}).value;\r\n\r\n        this.room.sendMessage(message, elementName, displayName);\r\n    }\r\n};\r\n\r\n/**\r\n * Send private text message to another participant of the conference\r\n * @param id the id of the participant to send a private message.\r\n * @param message the text message.\r\n * @param elementName the element name to encapsulate the message.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendPrivateTextMessage = function(\r\n        id, message, elementName = 'body') {\r\n    if (this.room) {\r\n        this.room.sendPrivateMessage(id, message, elementName);\r\n    }\r\n};\r\n\r\n/**\r\n * Send presence command.\r\n * @param name {String} the name of the command.\r\n * @param values {Object} with keys and values that will be sent.\r\n **/\r\nJitsiConference.prototype.sendCommand = function(name, values) {\r\n    if (this.room) {\r\n        this.room.addToPresence(name, values);\r\n        this.room.sendPresence();\r\n    } else {\r\n        logger.warn('Not sending a command, room not initialized.');\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Send presence command one time.\r\n * @param name {String} the name of the command.\r\n * @param values {Object} with keys and values that will be sent.\r\n **/\r\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\r\n    this.sendCommand(name, values);\r\n    this.removeCommand(name);\r\n};\r\n\r\n/**\r\n * Removes presence command.\r\n * @param name {String} the name of the command.\r\n **/\r\nJitsiConference.prototype.removeCommand = function(name) {\r\n    if (this.room) {\r\n        this.room.removeFromPresence(name);\r\n    }\r\n};\r\n\r\n/**\r\n * Sets the display name for this conference.\r\n * @param name the display name to set\r\n */\r\nJitsiConference.prototype.setDisplayName = function(name) {\r\n    if (this.room) {\r\n        this.room.addToPresence('nick', {\r\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\r\n            value: name\r\n        });\r\n        this.room.sendPresence();\r\n    }\r\n};\r\n\r\n/**\r\n * Set new subject for this conference. (available only for moderator)\r\n * @param {string} subject new subject\r\n */\r\nJitsiConference.prototype.setSubject = function(subject) {\r\n    if (this.room && this.isModerator()) {\r\n        this.room.setSubject(subject);\r\n    }\r\n};\r\n\r\n/**\r\n * Get a transcriber object for all current participants in this conference\r\n * @return {Transcriber} the transcriber object\r\n */\r\nJitsiConference.prototype.getTranscriber = function() {\r\n    if (this.transcriber === undefined) {\r\n        this.transcriber = new Transcriber();\r\n\r\n        // add all existing local audio tracks to the transcriber\r\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\r\n\r\n        for (const localAudio of localAudioTracks) {\r\n            this.transcriber.addTrack(localAudio);\r\n        }\r\n\r\n        // and all remote audio tracks\r\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\r\n\r\n        for (const remoteTrack of remoteAudioTracks) {\r\n            this.transcriber.addTrack(remoteTrack);\r\n        }\r\n    }\r\n\r\n    return this.transcriber;\r\n};\r\n\r\n/**\r\n * Returns the transcription status.\r\n *\r\n * @returns {String} \"on\" or \"off\".\r\n */\r\nJitsiConference.prototype.getTranscriptionStatus = function() {\r\n    return this.room.transcriptionStatus;\r\n};\r\n\r\n/**\r\n * Adds JitsiLocalTrack object to the conference.\r\n * @param track the JitsiLocalTrack object.\r\n * @returns {Promise<JitsiLocalTrack>}\r\n * @throws {Error} if the specified track is a video track and there is already\r\n * another video track in the conference.\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.12\r\n */\r\nJitsiConference.prototype.addTrack = function(track) {\r\n    const mediaType = track.getType();\r\n    const localTracks = this.rtc.getLocalTracks(mediaType);\r\n\r\n    // Ensure there's exactly 1 local track of each media type in the conference.\r\n    if (localTracks.length > 0) {\r\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\r\n        if (track === localTracks[0]) {\r\n            return Promise.resolve(track);\r\n        }\r\n\r\n        if (FeatureFlags.isMultiStreamSupportEnabled() && mediaType === MediaType.VIDEO) {\r\n            const addTrackPromises = [];\r\n\r\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTracks([ track ]));\r\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTracks([ track ]));\r\n\r\n            return Promise.all(addTrackPromises)\r\n                .then(() => {\r\n                    this._setupNewTrack(track);\r\n                    this._sendBridgeVideoTypeMessage(track);\r\n                    this._updateRoomPresence(this._getActiveMediaSession());\r\n\r\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\r\n                        this._fireMuteChangeEvent(track);\r\n                    }\r\n                });\r\n        }\r\n\r\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\r\n    }\r\n};\r\n\r\n/**\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.12\r\n * @param {*} jingleSession \r\n * @param {*} ctx \r\n * @returns \r\n */\r\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\r\n    if (!jingleSession) {\r\n        return;\r\n    }\r\n\r\n    // skips sending presence twice for the same pass of updating ssrcs\r\n    if (ctx) {\r\n        if (ctx.skip) {\r\n            return;\r\n        }\r\n        ctx.skip = true;\r\n    }\r\n\r\n    let presenceChanged = false;\r\n    let muteStatusChanged, videoTypeChanged;\r\n    const localTracks = this.getLocalTracks();\r\n    const localAudioTracks = jingleSession.peerconnection.getLocalTracks(MediaType.AUDIO);\r\n    const localVideoTracks = jingleSession.peerconnection.getLocalTracks(MediaType.VIDEO);\r\n\r\n    // Set presence for all the available local tracks.\r\n    for (const track of localTracks) {\r\n        muteStatusChanged = this._setTrackMuteStatus(track.getType(), track, track.isMuted());\r\n        if (track.getType() === MediaType.VIDEO) {\r\n            videoTypeChanged = this._setNewVideoType(track);\r\n        }\r\n        presenceChanged = muteStatusChanged || videoTypeChanged;\r\n    }\r\n\r\n    // Set the presence in the legacy format if there are no local tracks and multi stream support is not enabled.\r\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\r\n        let audioMuteStatusChanged, videoMuteStatusChanged;\r\n\r\n        if (!localAudioTracks?.length) {\r\n            audioMuteStatusChanged = this._setTrackMuteStatus(MediaType.AUDIO, undefined, true);\r\n        }\r\n        if (!localVideoTracks?.length) {\r\n            videoMuteStatusChanged = this._setTrackMuteStatus(MediaType.VIDEO, undefined, true);\r\n            videoTypeChanged = this._setNewVideoType();\r\n        }\r\n\r\n        presenceChanged = presenceChanged || audioMuteStatusChanged || videoMuteStatusChanged || videoTypeChanged;\r\n    }\r\n\r\n    presenceChanged && this.room.sendPresence();\r\n};\r\n\r\n/**\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.12\r\n * Sets the video type.\r\n * @param track\r\n * @return <tt>true</tt> if video type was changed in presence.\r\n * @private\r\n */\r\n JitsiConference.prototype._setNewVideoType = function(track) {\r\n    let videoTypeChanged = false;\r\n\r\n    if (FeatureFlags.isSourceNameSignalingEnabled() && track) {\r\n        videoTypeChanged = this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\r\n    }\r\n\r\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\r\n        const videoTypeTagName = 'videoType';\r\n\r\n        // If track is missing we revert to default type Camera, the case where we screenshare and\r\n        // we return to be video muted.\r\n        const trackVideoType = track ? track.videoType : VideoType.CAMERA;\r\n\r\n        // If video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\r\n        if (trackVideoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\r\n            // We will not use this.sendCommand here to avoid sending the presence immediately, as later we may also\r\n            // set the mute status.\r\n            const legacyTypeChanged = this.room.addOrReplaceInPresence(videoTypeTagName, { value: trackVideoType });\r\n\r\n            videoTypeChanged = videoTypeChanged || legacyTypeChanged;\r\n        }\r\n    }\r\n\r\n    return videoTypeChanged;\r\n};\r\n\r\n/**\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.12\r\n * Sets mute status.\r\n * @param mediaType\r\n * @param localTrack\r\n * @param isMuted\r\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\r\n * @private\r\n */\r\n JitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\r\n    let presenceChanged = false;\r\n\r\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localTrack) {\r\n        presenceChanged = this._signalingLayer.setTrackMuteStatus(localTrack.getSourceName(), isMuted);\r\n    }\r\n\r\n    // Add the 'audioMuted' and 'videoMuted' tags when source name signaling is enabled for backward compatibility.\r\n    // It won't be used anymore when multiple stream support is enabled.\r\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\r\n        let audioMuteChanged, videoMuteChanged;\r\n\r\n        if (!this.room) {\r\n            return false;\r\n        }\r\n\r\n        if (mediaType === MediaType.AUDIO) {\r\n            audioMuteChanged = this.room.addAudioInfoToPresence(isMuted);\r\n        } else {\r\n            videoMuteChanged = this.room.addVideoInfoToPresence(isMuted);\r\n        }\r\n\r\n        presenceChanged = presenceChanged || audioMuteChanged || videoMuteChanged;\r\n    }\r\n\r\n    return presenceChanged;\r\n};\r\n\r\n\r\n/**\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.12\r\n * @param {*} localtrack \r\n */\r\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\r\n    let videoType = !localtrack || localtrack.isMuted() ? BridgeVideoType.NONE : localtrack.getVideoType();\r\n\r\n    if (videoType === BridgeVideoType.DESKTOP && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\r\n        videoType = BridgeVideoType.DESKTOP_HIGH_FPS;\r\n    }\r\n\r\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localtrack) {\r\n        this.rtc.sendSourceVideoType(localtrack.getSourceName(), videoType);\r\n    } else if (!FeatureFlags.isSourceNameSignalingEnabled()) {\r\n        this.rtc.setVideoType(videoType);\r\n    }\r\n};\r\n\r\n/**\r\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\r\n * @param {number} audioLevel the audio level\r\n * @param {TraceablePeerConnection} [tpc]\r\n */\r\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\r\n        audioLevel,\r\n        tpc) {\r\n    const activeTpc = this.getActivePeerConnection();\r\n\r\n    // There will be no TraceablePeerConnection if audio levels do not come from\r\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\r\n    // Audio Analyser API and emits local audio levels events through\r\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\r\n    // optional.\r\n    if (!tpc || activeTpc === tpc) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n            this.myUserId(), audioLevel);\r\n    }\r\n};\r\n\r\n/**\r\n * Fires TRACK_MUTE_CHANGED change conference event.\r\n * @param track the JitsiTrack object related to the event.\r\n */\r\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\r\n    // check if track was muted by focus and now is unmuted by user\r\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\r\n        this.isMutedByFocus = false;\r\n\r\n        // unmute local user on server\r\n        this.room.muteParticipant(this.room.myroomjid, false);\r\n    }\r\n\r\n    let actorParticipant;\r\n\r\n    if (this.mutedByFocusActor) {\r\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\r\n\r\n        actorParticipant = this.participants[actorId];\r\n    }\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\r\n};\r\n\r\n/**\r\n * Clear JitsiLocalTrack properties and listeners.\r\n * @param track the JitsiLocalTrack object.\r\n */\r\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\r\n    track._setConference(null);\r\n    this.rtc.removeLocalTrack(track);\r\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n        track.muteHandler);\r\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n        track.audioLevelHandler);\r\n\r\n    // send event for stopping screen sharing\r\n    // FIXME: we assume we have only one screen sharing track\r\n    // if we change this we need to fix this check\r\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\r\n        this.statistics.sendScreenSharingEvent(false);\r\n    }\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\r\n};\r\n\r\n/**\r\n * Removes JitsiLocalTrack from the conference and performs\r\n * a new offer/answer cycle.\r\n * @param {JitsiLocalTrack} track\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.removeTrack = function(track) {\r\n    return this.replaceTrack(track, null);\r\n};\r\n\r\n/**\r\n * Replaces oldTrack with newTrack and performs a single offer/answer\r\n *  cycle after both operations are done.  Either oldTrack or newTrack\r\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\r\n *  effectively just removes 'oldTrack'\r\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\r\n * @param {JitsiLocalTrack} newTrack the new stream to use\r\n * @returns {Promise} resolves when the replacement is finished\r\n */\r\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\r\n    // First do the removal of the oldTrack at the JitsiConference level\r\n    if (oldTrack) {\r\n        if (oldTrack.disposed) {\r\n            return Promise.reject(\r\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\r\n        }\r\n    }\r\n    if (newTrack) {\r\n        if (newTrack.disposed) {\r\n            return Promise.reject(\r\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\r\n        }\r\n    }\r\n\r\n    // Now replace the stream at the lower levels\r\n    return this._doReplaceTrack(oldTrack, newTrack)\r\n        .then(() => {\r\n            if (oldTrack) {\r\n                this.onLocalTrackRemoved(oldTrack);\r\n            }\r\n            if (newTrack) {\r\n                // Now handle the addition of the newTrack at the\r\n                // JitsiConference level\r\n                this._setupNewTrack(newTrack);\r\n            }\r\n\r\n            return Promise.resolve();\r\n        }, error => Promise.reject(new Error(error)));\r\n};\r\n\r\n/**\r\n * Replaces the tracks at the lower level by going through the Jingle session\r\n * and WebRTC peer connection. The method will resolve immediately if there is\r\n * currently no JingleSession started.\r\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\r\n * the process or <tt>null</t> if the method should act as \"add track\"\r\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\r\n * <tt>null</tt> if the method should act as \"remove track\"\r\n * @return {Promise} resolved when the process is done or rejected with a string\r\n * which describes the error.\r\n * @private\r\n */\r\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\r\n    const replaceTrackPromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        replaceTrackPromises.push(\r\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\r\n    } else {\r\n        logger.info('_doReplaceTrack - no JVB JingleSession');\r\n    }\r\n\r\n    if (this.p2pJingleSession) {\r\n        replaceTrackPromises.push(\r\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\r\n    } else {\r\n        logger.info('_doReplaceTrack - no P2P JingleSession');\r\n    }\r\n\r\n    return Promise.all(replaceTrackPromises);\r\n};\r\n\r\n/**\r\n * Operations related to creating a new track\r\n * @param {JitsiLocalTrack} newTrack the new track being created\r\n */\r\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\r\n    const mediaType = newTrack.getType();\r\n\r\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\r\n        // Report active device to statistics\r\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\r\n        const device = devices\r\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\r\n\r\n        if (device) {\r\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\r\n        }\r\n    }\r\n\r\n    // Create a source name for this track if it doesn't exist.\r\n    if (FeatureFlags.isSourceNameSignalingEnabled() && !newTrack.getSourceName()) {\r\n        const sourceName = getSourceNameForJitsiTrack(\r\n            this.myUserId(),\r\n            mediaType,\r\n            this.getLocalTracks(mediaType)?.length);\r\n\r\n        newTrack.setSourceName(sourceName);\r\n    }\r\n\r\n    this.rtc.addLocalTrack(newTrack);\r\n    newTrack._setConference(this);\r\n\r\n    // Add event handlers.\r\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\r\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\r\n\r\n    if (newTrack.isAudioTrack()) {\r\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\r\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\r\n    }\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\r\n};\r\n\r\n/**\r\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\r\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\r\n * removed on video mute).\r\n * @param {JitsiLocalTrack} track the local track that will be added as part of\r\n * the unmute operation.\r\n * @return {Promise} resolved when the process is done or rejected with a string\r\n * which describes the error.\r\n */\r\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\r\n    const addAsUnmutePromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\r\n    } else {\r\n        logger.info(\r\n            'Add local MediaStream as unmute -'\r\n                + ' no JVB Jingle session started yet');\r\n    }\r\n\r\n    if (this.p2pJingleSession) {\r\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\r\n    } else {\r\n        logger.info(\r\n            'Add local MediaStream as unmute -'\r\n                + ' no P2P Jingle session started yet');\r\n    }\r\n\r\n    return Promise.all(addAsUnmutePromises);\r\n};\r\n\r\n/**\r\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\r\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\r\n * that is to stop sending any data and turn off the HW camera device.\r\n * @param {JitsiLocalTrack} track the local track that will be removed.\r\n * @return {Promise}\r\n */\r\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\r\n    const removeAsMutePromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        removeAsMutePromises.push(\r\n            this.jvbJingleSession.removeTrackAsMute(track));\r\n    } else {\r\n        logger.info(\r\n            'Remove local MediaStream - no JVB JingleSession started yet');\r\n    }\r\n    if (this.p2pJingleSession) {\r\n        removeAsMutePromises.push(\r\n            this.p2pJingleSession.removeTrackAsMute(track));\r\n    } else {\r\n        logger.info(\r\n            'Remove local MediaStream - no P2P JingleSession started yet');\r\n    }\r\n\r\n    return Promise.all(removeAsMutePromises);\r\n};\r\n\r\n/**\r\n * Get role of the local user.\r\n * @returns {string} user role: 'moderator' or 'none'\r\n */\r\nJitsiConference.prototype.getRole = function() {\r\n    return this.room.role;\r\n};\r\n\r\n/**\r\n * Returns whether or not the current conference has been joined as a hidden\r\n * user.\r\n *\r\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\r\n * no connection is active.\r\n */\r\nJitsiConference.prototype.isHidden = function() {\r\n    if (!this.connection) {\r\n        return null;\r\n    }\r\n\r\n    return Strophe.getDomainFromJid(this.connection.getJid())\r\n        === this.options.config.hiddenDomain;\r\n};\r\n\r\n/**\r\n * Check if local user is moderator.\r\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\r\n * we're no longer in the conference room then <tt>null</tt> is returned.\r\n */\r\nJitsiConference.prototype.isModerator = function() {\r\n    return this.room ? this.room.isModerator() : null;\r\n};\r\n\r\n/**\r\n * Set password for the room.\r\n * @param {string} password new password for the room.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.lock = function(password) {\r\n    if (!this.isModerator()) {\r\n        return Promise.reject(new Error('You are not moderator.'));\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.room.lockRoom(\r\n            password || '',\r\n            () => resolve(),\r\n            err => reject(err),\r\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\r\n    });\r\n};\r\n\r\n/**\r\n * Remove password from the room.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.unlock = function() {\r\n    return this.lock();\r\n};\r\n\r\n/**\r\n * Elects the participant with the given id to be the selected participant in\r\n * order to receive higher video quality (if simulcast is enabled).\r\n * Or cache it if channel is not created and send it once channel is available.\r\n * @param participantId the identifier of the participant\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.selectParticipant = function(participantId) {\r\n    this.selectParticipants([ participantId ]);\r\n};\r\n\r\n/*\r\n * Elects participants with given ids to be the selected participants in order\r\n * to receive higher video quality (if simulcast is enabled). The argument\r\n * should be an array of participant id strings or an empty array; an error will\r\n * be thrown if a non-array is passed in. The error is thrown as a layer of\r\n * protection against passing an invalid argument, as the error will happen in\r\n * the bridge and may not be visible in the client.\r\n *\r\n * @param {Array<strings>} participantIds - An array of identifiers for\r\n * participants.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.selectParticipants = function(participantIds) {\r\n    if (!Array.isArray(participantIds)) {\r\n        throw new Error('Invalid argument; participantIds must be an array.');\r\n    }\r\n\r\n    this.rtc.selectEndpoints(participantIds);\r\n};\r\n\r\n/**\r\n * Elects the participant with the given id to be the pinned participant in\r\n * order to always receive video for this participant (even when last n is\r\n * enabled).\r\n * @param participantId the identifier of the participant\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n */\r\nJitsiConference.prototype.pinParticipant = function(participantId) {\r\n    this.rtc.pinEndpoint(participantId);\r\n};\r\n\r\n/**\r\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\r\n * @returns {number}\r\n */\r\nJitsiConference.prototype.getLastN = function() {\r\n    return this.rtc.getLastN();\r\n};\r\n\r\n/**\r\n * Selects a new value for \"lastN\". The requested amount of videos are going\r\n * to be delivered after the value is in effect. Set to -1 for unlimited or\r\n * all available videos.\r\n * @param lastN the new number of videos the user would like to receive.\r\n * @throws Error or RangeError if the given value is not a number or is smaller\r\n * than -1.\r\n */\r\nJitsiConference.prototype.setLastN = function(lastN) {\r\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\r\n        throw new Error(`Invalid value for lastN: ${lastN}`);\r\n    }\r\n    const n = Number(lastN);\r\n\r\n    if (n < -1) {\r\n        throw new RangeError('lastN cannot be smaller than -1');\r\n    }\r\n    this.rtc.setLastN(n);\r\n\r\n    // If the P2P session is not fully established yet, we wait until it gets\r\n    // established.\r\n    if (this.p2pJingleSession) {\r\n        const isVideoActive = n !== 0;\r\n\r\n        this.p2pJingleSession\r\n            .setMediaTransferActive(true, isVideoActive)\r\n            .catch(error => {\r\n                logger.error(\r\n                    `Failed to adjust video transfer status (${isVideoActive})`,\r\n                    error);\r\n            });\r\n    }\r\n};\r\n\r\n/**\r\n * Checks if the participant given by participantId is currently included in\r\n * the last N.\r\n * @param {string} participantId the identifier of the participant we would\r\n * like to check.\r\n * @return {boolean} true if the participant with id is in the last N set or\r\n * if there's no last N set, false otherwise.\r\n * @deprecated this method should never be used to figure out the UI, but\r\n * {@link ParticipantConnectionStatus} should be used instead.\r\n */\r\nJitsiConference.prototype.isInLastN = function(participantId) {\r\n    return this.rtc.isInLastN(participantId);\r\n};\r\n\r\n/**\r\n * @return Array<JitsiParticipant> an array of all participants in this\r\n * conference.\r\n */\r\nJitsiConference.prototype.getParticipants = function() {\r\n    return Object.values(this.participants);\r\n};\r\n\r\n/**\r\n * Returns the number of participants in the conference, including the local\r\n * participant.\r\n * @param countHidden {boolean} Whether or not to include hidden participants\r\n * in the count. Default: false.\r\n **/\r\nJitsiConference.prototype.getParticipantCount\r\n    = function(countHidden = false) {\r\n\r\n        let participants = this.getParticipants();\r\n\r\n        if (!countHidden) {\r\n            participants = participants.filter(p => !p.isHidden());\r\n        }\r\n\r\n        // Add one for the local participant.\r\n        return participants.length + 1;\r\n    };\r\n\r\n/**\r\n * @returns {JitsiParticipant} the participant in this conference with the\r\n * specified id (or undefined if there isn't one).\r\n * @param id the id of the participant.\r\n */\r\nJitsiConference.prototype.getParticipantById = function(id) {\r\n    return this.participants[id];\r\n};\r\n\r\n/**\r\n * Grant owner rights to the participant.\r\n * @param {string} id id of the participant to grant owner rights to.\r\n */\r\nJitsiConference.prototype.grantOwner = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.setAffiliation(participant.getJid(), 'owner');\r\n};\r\n\r\n/**\r\n * Kick participant from this conference.\r\n * @param {string} id id of the participant to kick\r\n */\r\nJitsiConference.prototype.kickParticipant = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.kick(participant.getJid());\r\n};\r\n\r\n/**\r\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\r\n * analytics event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeClearSITimeout = function() {\r\n    if (this._sessionInitiateTimeout\r\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\r\n        window.clearTimeout(this._sessionInitiateTimeout);\r\n        this._sessionInitiateTimeout = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\r\n * event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeSetSITimeout = function() {\r\n    // Jicofo is supposed to invite if there are at least 2 participants\r\n    if (!this.jvbJingleSession\r\n            && this.getParticipantCount() >= 2\r\n            && !this._sessionInitiateTimeout) {\r\n        this._sessionInitiateTimeout = window.setTimeout(() => {\r\n            this._sessionInitiateTimeout = null;\r\n            Statistics.sendAnalytics(createJingleEvent(\r\n                ACTION_JINGLE_SI_TIMEOUT,\r\n                {\r\n                    p2p: false,\r\n                    value: JINGLE_SI_TIMEOUT\r\n                }));\r\n        }, JINGLE_SI_TIMEOUT);\r\n    }\r\n};\r\n\r\n/**\r\n * Mutes a participant.\r\n * @param {string} id The id of the participant to mute.\r\n */\r\nJitsiConference.prototype.muteParticipant = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.muteParticipant(participant.getJid(), true);\r\n};\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Notifies this JitsiConference that a new member has joined its chat room.\r\n *\r\n * FIXME This should NOT be exposed!\r\n *\r\n * @param jid the jid of the participant in the MUC\r\n * @param nick the display name of the participant\r\n * @param role the role of the participant in the MUC\r\n * @param isHidden indicates if this is a hidden participant (system\r\n * participant for example a recorder).\r\n * @param statsID the participant statsID (optional)\r\n * @param status the initial status if any\r\n * @param identity the member identity, if any\r\n * @param botType the member botType, if any\r\n */\r\nJitsiConference.prototype.onMemberJoined = function(\r\n        jid, nick, role, isHidden, statsID, status, identity, botType) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n\r\n    if (id === 'focus' || this.myUserId() === id) {\r\n        return;\r\n    }\r\n\r\n    const participant\r\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\r\n\r\n    participant._role = role;\r\n    participant._botType = botType;\r\n    this.participants[id] = participant;\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.USER_JOINED,\r\n        id,\r\n        participant);\r\n\r\n    this._updateFeatures(participant);\r\n\r\n    this._maybeStartOrStopP2P();\r\n    this._maybeSetSITimeout();\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Updates features for a participant.\r\n * @param {JitsiParticipant} participant - The participant to query for features.\r\n * @returns {void}\r\n * @private\r\n */\r\nJitsiConference.prototype._updateFeatures = function(participant) {\r\n    participant.getFeatures()\r\n        .then(features => {\r\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\r\n            this.updateDTMFSupport();\r\n\r\n            if (features.has('http://jitsi.org/protocol/jigasi')) {\r\n                participant.setProperty('features_jigasi', true);\r\n            }\r\n\r\n            if (features.has('https://jitsi.org/meet/e2ee')) {\r\n                participant.setProperty('features_e2ee', true);\r\n            }\r\n        })\r\n        .catch(() => false);\r\n};\r\n\r\n/**\r\n * Get notified when member bot type had changed.\r\n * @param jid the member jid\r\n * @param botType the new botType value\r\n * @private\r\n */\r\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\r\n\r\n    // find the participant and mark it as non bot, as the real one will join\r\n    // in a moment\r\n    const peers = this.getParticipants();\r\n    const botParticipant = peers.find(p => p.getJid() === jid);\r\n\r\n    if (botParticipant) {\r\n        botParticipant._botType = botType;\r\n        const id = Strophe.getResourceFromJid(jid);\r\n\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\r\n            id,\r\n            botType);\r\n    }\r\n\r\n    // if botType changed to undefined, botType was removed, in case of\r\n    // poltergeist mode this is the moment when the poltergeist had exited and\r\n    // the real participant had already replaced it.\r\n    // In this case we can check and try p2p\r\n    if (!botParticipant._botType) {\r\n        this._maybeStartOrStopP2P();\r\n    }\r\n};\r\n\r\nJitsiConference.prototype.onMemberLeft = function(jid) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n\r\n    if (id === 'focus' || this.myUserId() === id) {\r\n        return;\r\n    }\r\n\r\n    const participant = this.participants[id];\r\n    const mediaSessions = this.getMediaSessions();\r\n    let tracksToBeRemoved = [];\r\n\r\n    for (const session of mediaSessions) {\r\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\r\n\r\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\r\n\r\n        // Remove the ssrcs from the remote description and renegotiate.\r\n        session.removeRemoteStreamsOnLeave(id);\r\n    }\r\n\r\n    // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\r\n    tracksToBeRemoved.forEach(track => {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\r\n    });\r\n\r\n    if (participant) {\r\n        delete this.participants[id];\r\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\r\n    }\r\n\r\n    if (this.room !== null) { // Skip if we have left the room already.\r\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\r\n        this._maybeClearSITimeout();\r\n    }\r\n};\r\n\r\n/**\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.12\r\n * Returns an array containing all media sessions existing in this conference.\r\n *\r\n * @returns {Array<JingleSessionPC>}\r\n */\r\n JitsiConference.prototype.getMediaSessions = function() {\r\n    const sessions = [];\r\n\r\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\r\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\r\n\r\n    return sessions;\r\n};\r\n\r\n/**\r\n * Designates an event indicating that we were kicked from the XMPP MUC.\r\n * @param {boolean} isSelfPresence - whether it is for local participant\r\n * or another participant.\r\n * @param {string} actorId - the id of the participant who was initiator\r\n * of the kick.\r\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\r\n * this is the id of the participant which was kicked.\r\n */\r\nJitsiConference.prototype.onMemberKicked = function(isSelfPresence, actorId, kickedParticipantId) {\r\n    // This check which be true when we kick someone else. With the introduction of lobby\r\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\r\n    // avoid emitting an event where `undefined` kicked someone.\r\n    if (actorId === this.myUserId()) {\r\n        return;\r\n    }\r\n\r\n    const actorParticipant = this.participants[actorId];\r\n\r\n    if (isSelfPresence) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.KICKED, actorParticipant);\r\n\r\n        this.leave();\r\n\r\n        return;\r\n    }\r\n\r\n    const kickedParticipant = this.participants[kickedParticipantId];\r\n\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant);\r\n};\r\n\r\n/**\r\n * Method called on local MUC role change.\r\n * @param {string} role the name of new user's role as defined by XMPP MUC.\r\n */\r\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\r\n    // Emit role changed for local  JID\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\r\n};\r\n\r\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    participant._role = role;\r\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\r\n};\r\n\r\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n\r\n    if (participant._displayName === displayName) {\r\n        return;\r\n    }\r\n\r\n    participant._displayName = displayName;\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\r\n        id,\r\n        displayName);\r\n};\r\n\r\n/**\r\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\r\n * the conference.\r\n *\r\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\r\n * JitsiConference\r\n */\r\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\r\n    if (track.isP2P && !this.isP2PActive()) {\r\n        logger.info(\r\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\r\n\r\n        return;\r\n    } else if (!track.isP2P && this.isP2PActive()) {\r\n        logger.info(\r\n            'Trying to add remote JVB track, when in P2P - IGNORED');\r\n\r\n        return;\r\n    }\r\n\r\n    const id = track.getParticipantId();\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        logger.error(`No participant found for id: ${id}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Add track to JitsiParticipant.\r\n    participant._tracks.push(track);\r\n\r\n    if (this.transcriber) {\r\n        this.transcriber.addTrack(track);\r\n    }\r\n\r\n    const emitter = this.eventEmitter;\r\n\r\n    track.addEventListener(\r\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\r\n    track.addEventListener(\r\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n        (audioLevel, tpc) => {\r\n            const activeTPC = this.getActivePeerConnection();\r\n\r\n            if (activeTPC === tpc) {\r\n                emitter.emit(\r\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                    id,\r\n                    audioLevel);\r\n            }\r\n        }\r\n    );\r\n\r\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\r\n};\r\n\r\n/**\r\n * Callback called by the Jingle plugin when 'session-answer' is received.\r\n * @param {JingleSessionPC} session the Jingle session for which an answer was\r\n * received.\r\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\r\n    if (this.p2pJingleSession === session) {\r\n        logger.info('P2P setAnswer');\r\n\r\n        this.p2pJingleSession.setAnswer(answer);\r\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\r\n    }\r\n};\r\n\r\n/**\r\n * Callback called by the Jingle plugin when 'transport-info' is received.\r\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\r\n * received\r\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\r\n * element\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\r\n    if (this.p2pJingleSession === session) {\r\n        logger.info('P2P addIceCandidates');\r\n        this.p2pJingleSession.addIceCandidates(transportInfo);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\r\n * the conference.\r\n *\r\n * @param {JitsiRemoteTrack} removedTrack\r\n */\r\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\r\n    this.getParticipants().forEach(participant => {\r\n        const tracks = participant.getTracks();\r\n\r\n        for (let i = 0; i < tracks.length; i++) {\r\n            if (tracks[i] === removedTrack) {\r\n                // Since the tracks have been compared and are\r\n                // considered equal the result of splice can be ignored.\r\n                participant._tracks.splice(i, 1);\r\n\r\n                this.eventEmitter.emit(\r\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\r\n\r\n                if (this.transcriber) {\r\n                    this.transcriber.removeTrack(removedTrack);\r\n                }\r\n\r\n                break;\r\n            }\r\n        }\r\n    }, this);\r\n};\r\n\r\n/**\r\n * Handles an incoming call event for the P2P jingle session.\r\n */\r\nJitsiConference.prototype._onIncomingCallP2P = function(\r\n        jingleSession,\r\n        jingleOffer) {\r\n\r\n    let rejectReason;\r\n\r\n    if (!browser.supportsP2P()) {\r\n        rejectReason = {\r\n            reason: 'unsupported-applications',\r\n            reasonDescription: 'P2P not supported',\r\n            errorMsg: 'This client does not support P2P connections'\r\n        };\r\n    } else if (!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) {\r\n        rejectReason = {\r\n            reason: 'decline',\r\n            reasonDescription: 'P2P disabled',\r\n            errorMsg: 'P2P mode disabled in the configuration'\r\n        };\r\n    } else if (this.p2pJingleSession) {\r\n        // Reject incoming P2P call (already in progress)\r\n        rejectReason = {\r\n            reason: 'busy',\r\n            reasonDescription: 'P2P already in progress',\r\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\r\n        };\r\n    } else if (!this._shouldBeInP2PMode()) {\r\n        rejectReason = {\r\n            reason: 'decline',\r\n            reasonDescription: 'P2P requirements not met',\r\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\r\n        };\r\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\r\n    }\r\n\r\n    if (rejectReason) {\r\n        this._rejectIncomingCall(jingleSession, rejectReason);\r\n    } else {\r\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles an incoming call event.\r\n */\r\nJitsiConference.prototype.onIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer,\r\n        now) {\r\n    // Handle incoming P2P call\r\n    if (jingleSession.isP2P) {\r\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\r\n    } else {\r\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\r\n            const description = 'Rejecting session-initiate from non-focus.';\r\n\r\n            this._rejectIncomingCall(\r\n                jingleSession, {\r\n                    reason: 'security-error',\r\n                    reasonDescription: description,\r\n                    errorMsg: description\r\n                });\r\n\r\n            return;\r\n        }\r\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\r\n    }\r\n};\r\n\r\n/**\r\n * Accepts an incoming call event for the JVB jingle session.\r\n */\r\nJitsiConference.prototype._acceptJvbIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer,\r\n        now) {\r\n\r\n    // Accept incoming call\r\n    this.jvbJingleSession = jingleSession;\r\n    this.room.connectionTimes['session.initiate'] = now;\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    if (this.wasStopped) {\r\n        Statistics.sendAnalyticsAndLog(\r\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\r\n    }\r\n\r\n    const serverRegion\r\n        = $(jingleOffer)\r\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\r\n            .attr('region');\r\n\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\r\n        serverRegion);\r\n\r\n    this._maybeClearSITimeout();\r\n    Statistics.sendAnalytics(createJingleEvent(\r\n        ACTION_JINGLE_SI_RECEIVED,\r\n        {\r\n            p2p: false,\r\n            value: now\r\n        }));\r\n\r\n    try {\r\n        jingleSession.initialize(this.room, this.rtc, this._signalingLayer, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: this._isE2EEEnabled()\r\n        });\r\n    } catch (error) {\r\n        GlobalOnErrorHandler.callErrorHandler(error);\r\n    }\r\n\r\n    // Open a channel with the videobridge.\r\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\r\n\r\n    // Add local tracks to the session\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    try {\r\n        jingleSession.acceptOffer(\r\n            jingleOffer,\r\n            () => {\r\n                // If for any reason invite for the JVB session arrived after\r\n                // the P2P has been established already the media transfer needs\r\n                // to be turned off here.\r\n                if (this.isP2PActive() && this.jvbJingleSession) {\r\n                    this._suspendMediaTransferForJvbConnection();\r\n                }\r\n\r\n                this.eventEmitter.emit(\r\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n                    jingleSession);\r\n                if (!this.isP2PActive()) {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n                        jingleSession);\r\n                }\r\n            },\r\n            error => {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(\r\n                    'Failed to accept incoming Jingle session', error);\r\n            },\r\n            localTracks\r\n        );\r\n\r\n        // Start callstats as soon as peerconnection is initialized,\r\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\r\n        // happen in case if user doesn't have or denied permission to\r\n        // both camera and microphone.\r\n        logger.info('Starting CallStats for JVB connection...');\r\n        this.statistics.startCallStats(\r\n            this.jvbJingleSession.peerconnection,\r\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\r\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\r\n    } catch (e) {\r\n        GlobalOnErrorHandler.callErrorHandler(e);\r\n        logger.error(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Sets the BridgeChannel.\r\n *\r\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\r\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\r\n * BridgeChannel mode.\r\n * @param {TraceablePeerConnection} pc the peer connection which will be used\r\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\r\n */\r\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\r\n    let wsUrl = null;\r\n    const webSocket\r\n        = $(offerIq)\r\n            .find('>content>transport>web-socket')\r\n            .first();\r\n\r\n    if (webSocket.length === 1) {\r\n        wsUrl = webSocket[0].getAttribute('url');\r\n    }\r\n\r\n    let bridgeChannelType;\r\n\r\n    switch (this.options.config.openBridgeChannel) {\r\n    case 'datachannel':\r\n    case true:\r\n    case undefined:\r\n        bridgeChannelType = 'datachannel';\r\n        break;\r\n    case 'websocket':\r\n        bridgeChannelType = 'websocket';\r\n        break;\r\n    }\r\n\r\n    if (bridgeChannelType === 'datachannel') {\r\n        this.rtc.initializeBridgeChannel(pc, null);\r\n    } else if (bridgeChannelType === 'websocket' && wsUrl) {\r\n        this.rtc.initializeBridgeChannel(null, wsUrl);\r\n    }\r\n};\r\n\r\n/**\r\n * Rejects incoming Jingle call.\r\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\r\n * @param {object} [options]\r\n * @param {string} options.reason the name of the reason element as defined\r\n * by Jingle\r\n * @param {string} options.reasonDescription the reason description which will\r\n * be included in Jingle 'session-terminate' message.\r\n * @param {string} options.errorMsg an error message to be logged on global\r\n * error handler\r\n * @private\r\n */\r\nJitsiConference.prototype._rejectIncomingCall = function(\r\n        jingleSession,\r\n        options) {\r\n    if (options && options.errorMsg) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\r\n    }\r\n\r\n    // Terminate the jingle session with a reason\r\n    jingleSession.terminate(\r\n        null /* success callback => we don't care */,\r\n        error => {\r\n            logger.warn(\r\n                'An error occurred while trying to terminate'\r\n                    + ' invalid Jingle session', error);\r\n        }, {\r\n            reason: options && options.reason,\r\n            reasonDescription: options && options.reasonDescription,\r\n            sendSessionTerminate: true\r\n        });\r\n};\r\n\r\n/**\r\n * Handles the call ended event.\r\n * XXX is this due to the remote side terminating the Jingle session?\r\n *\r\n * @param {JingleSessionPC} jingleSession the jingle session which has been\r\n * terminated.\r\n * @param {String} reasonCondition the Jingle reason condition.\r\n * @param {String|null} reasonText human readable reason text which may provide\r\n * more details about why the call has been terminated.\r\n */\r\nJitsiConference.prototype.onCallEnded = function(\r\n        jingleSession,\r\n        reasonCondition,\r\n        reasonText) {\r\n    logger.info(\r\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\r\n            jingleSession.isP2P}`);\r\n    if (jingleSession === this.jvbJingleSession) {\r\n        this.wasStopped = true;\r\n\r\n        Statistics.sendAnalytics(\r\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\r\n\r\n        // Stop the stats\r\n        if (this.statistics) {\r\n            this.statistics.stopRemoteStats(\r\n                this.jvbJingleSession.peerconnection);\r\n            logger.info('Stopping JVB CallStats');\r\n            this.statistics.stopCallStats(\r\n                this.jvbJingleSession.peerconnection);\r\n        }\r\n\r\n        // Current JVB JingleSession is no longer valid, so set it to null\r\n        this.jvbJingleSession = null;\r\n\r\n        // Let the RTC service do any cleanups\r\n        this.rtc.onCallEnded();\r\n    } else if (jingleSession === this.p2pJingleSession) {\r\n        // It's the responder who decides to enforce JVB mode, so that both\r\n        // initiator and responder are aware if it was intentional.\r\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\r\n            logger.info('In forced JVB 121 mode...');\r\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\r\n        } else if (reasonCondition === 'connectivity-error'\r\n            && reasonText === 'ICE FAILED') {\r\n            // It can happen that the other peer detects ICE failed and\r\n            // terminates the session, before we get the event on our side.\r\n            // But we are able to parse the reason and mark it here.\r\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\r\n        }\r\n        this._stopP2PSession();\r\n    } else {\r\n        logger.error(\r\n            'Received onCallEnded for invalid session',\r\n            jingleSession.sid,\r\n            jingleSession.remoteJid,\r\n            reasonCondition,\r\n            reasonText);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles the suspend detected event. Leaves the room and fires suspended.\r\n * @param {JingleSessionPC} jingleSession\r\n */\r\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\r\n    if (!jingleSession.isP2P) {\r\n        this.leave();\r\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\r\n    }\r\n};\r\n\r\nJitsiConference.prototype.updateDTMFSupport = function() {\r\n    let somebodySupportsDTMF = false;\r\n    const participants = this.getParticipants();\r\n\r\n    // check if at least 1 participant supports DTMF\r\n    for (let i = 0; i < participants.length; i += 1) {\r\n        if (participants[i].supportsDTMF()) {\r\n            somebodySupportsDTMF = true;\r\n            break;\r\n        }\r\n    }\r\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\r\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\r\n            somebodySupportsDTMF);\r\n    }\r\n};\r\n\r\n/**\r\n * Allows to check if there is at least one user in the conference\r\n * that supports DTMF.\r\n * @returns {boolean} true if somebody supports DTMF, false otherwise\r\n */\r\nJitsiConference.prototype.isDTMFSupported = function() {\r\n    return this.somebodySupportsDTMF;\r\n};\r\n\r\n/**\r\n * Returns the local user's ID\r\n * @return {string} local user's ID\r\n */\r\nJitsiConference.prototype.myUserId = function() {\r\n    return (\r\n        this.room && this.room.myroomjid\r\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\r\n            : null);\r\n};\r\n\r\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\r\n    const peerConnection = this.getActivePeerConnection();\r\n\r\n    if (peerConnection) {\r\n        peerConnection.sendTones(tones, duration, pause);\r\n    } else {\r\n        logger.warn('cannot sendTones: no peer connection');\r\n    }\r\n};\r\n\r\n/**\r\n * Starts recording the current conference.\r\n *\r\n * @param {Object} options - Configuration for the recording. See\r\n * {@link Chatroom#startRecording} for more info.\r\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\r\n */\r\nJitsiConference.prototype.startRecording = function(options) {\r\n    if (this.room) {\r\n        return this.recordingManager.startRecording(options);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference is not created yet!'));\r\n};\r\n\r\n/**\r\n * Stop a recording session.\r\n *\r\n * @param {string} sessionID - The ID of the recording session that\r\n * should be stopped.\r\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\r\n */\r\nJitsiConference.prototype.stopRecording = function(sessionID) {\r\n    if (this.room) {\r\n        return this.recordingManager.stopRecording(sessionID);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference is not created yet!'));\r\n};\r\n\r\n/**\r\n * Returns true if the SIP calls are supported and false otherwise\r\n */\r\nJitsiConference.prototype.isSIPCallingSupported = function() {\r\n    if (this.room) {\r\n        return this.room.isSIPCallingSupported();\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * Dials a number.\r\n * @param number the number\r\n */\r\nJitsiConference.prototype.dial = function(number) {\r\n    if (this.room) {\r\n        return this.room.dial(number);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        reject(new Error('The conference is not created yet!'));\r\n    });\r\n};\r\n\r\n/**\r\n * Hangup an existing call\r\n */\r\nJitsiConference.prototype.hangup = function() {\r\n    if (this.room) {\r\n        return this.room.hangup();\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        reject(new Error('The conference is not created yet!'));\r\n    });\r\n};\r\n\r\n/**\r\n * Starts the transcription service.\r\n */\r\nJitsiConference.prototype.startTranscriber = function() {\r\n    return this.dial('jitsi_meet_transcribe');\r\n};\r\n\r\n\r\n/**\r\n * Stops the transcription service.\r\n */\r\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\r\n\r\n/**\r\n * Returns the phone number for joining the conference.\r\n */\r\nJitsiConference.prototype.getPhoneNumber = function() {\r\n    if (this.room) {\r\n        return this.room.getPhoneNumber();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the pin for joining the conference with phone.\r\n */\r\nJitsiConference.prototype.getPhonePin = function() {\r\n    if (this.room) {\r\n        return this.room.getPhonePin();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the meeting unique ID if any.\r\n *\r\n * @returns {string|undefined}\r\n */\r\nJitsiConference.prototype.getMeetingUniqueId = function() {\r\n    if (this.room) {\r\n        return this.room.getMeetingId();\r\n    }\r\n};\r\n\r\n/**\r\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\r\n * which connection is currently active.\r\n *\r\n * @return {TraceablePeerConnection|null} null if there isn't any active\r\n * <tt>TraceablePeerConnection</tt> currently available.\r\n * @public (FIXME how to make package local ?)\r\n */\r\nJitsiConference.prototype.getActivePeerConnection = function() {\r\n    if (this.isP2PActive()) {\r\n        return this.p2pJingleSession.peerconnection;\r\n    }\r\n\r\n    return this.jvbJingleSession ? this.jvbJingleSession.peerconnection : null;\r\n};\r\n\r\n/**\r\n * Returns the connection state for the current room. Its ice connection state\r\n * for its session.\r\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\r\n * be converted to \"connected\".\r\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\r\n * peer connection at this time.\r\n */\r\nJitsiConference.prototype.getConnectionState = function() {\r\n    const peerConnection = this.getActivePeerConnection();\r\n\r\n    return peerConnection ? peerConnection.getConnectionState() : null;\r\n};\r\n\r\n/**\r\n * Make all new participants mute their audio/video on join.\r\n * @param policy {Object} object with 2 boolean properties for video and audio:\r\n * @param {boolean} audio if audio should be muted.\r\n * @param {boolean} video if video should be muted.\r\n */\r\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\r\n    if (!this.isModerator()) {\r\n        return;\r\n    }\r\n    this.startMutedPolicy = policy;\r\n    this.room.addToPresence('startmuted', {\r\n        attributes: {\r\n            audio: policy.audio,\r\n            video: policy.video,\r\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\r\n        }\r\n    });\r\n    this.room.sendPresence();\r\n};\r\n\r\n/**\r\n * Returns current start muted policy\r\n * @returns {Object} with 2 properties - audio and video.\r\n */\r\nJitsiConference.prototype.getStartMutedPolicy = function() {\r\n    return this.startMutedPolicy;\r\n};\r\n\r\n/**\r\n * Check if audio is muted on join.\r\n */\r\nJitsiConference.prototype.isStartAudioMuted = function() {\r\n    return this.startAudioMuted;\r\n};\r\n\r\n/**\r\n * Check if video is muted on join.\r\n */\r\nJitsiConference.prototype.isStartVideoMuted = function() {\r\n    return this.startVideoMuted;\r\n};\r\n\r\n/**\r\n * Returns measured connectionTimes.\r\n */\r\nJitsiConference.prototype.getConnectionTimes = function() {\r\n    return this.room.connectionTimes;\r\n};\r\n\r\n/**\r\n * Sets a property for the local participant.\r\n */\r\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\r\n    this.sendCommand(`jitsi_participant_${name}`, { value });\r\n};\r\n\r\n/**\r\n *  Removes a property for the local participant and sends the updated presence.\r\n */\r\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\r\n    this.removeCommand(`jitsi_participant_${name}`);\r\n    this.room.sendPresence();\r\n};\r\n\r\n/**\r\n * Gets a local participant property.\r\n *\r\n * @return value of the local participant property if the tagName exists in the\r\n * list of properties, otherwise returns undefined.\r\n */\r\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\r\n    const property = this.room.presMap.nodes.find(prop =>\r\n        prop.tagName === `jitsi_participant_${name}`\r\n    );\r\n\r\n    return property ? property.value : undefined;\r\n};\r\n\r\n/**\r\n * Sends the given feedback through CallStats if enabled.\r\n *\r\n * @param overallFeedback an integer between 1 and 5 indicating the\r\n * user feedback\r\n * @param detailedFeedback detailed feedback from the user. Not yet used\r\n * @returns {Promise} Resolves if feedback is submitted successfully.\r\n */\r\nJitsiConference.prototype.sendFeedback = function(\r\n        overallFeedback,\r\n        detailedFeedback) {\r\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\r\n};\r\n\r\n/**\r\n * Returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n *\r\n * @returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n */\r\nJitsiConference.prototype.isCallstatsEnabled = function() {\r\n    return this.statistics.isCallstatsEnabled();\r\n};\r\n\r\n/**\r\n * Finds the SSRC of a given track\r\n *\r\n * @param track\r\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\r\n */\r\nJitsiConference.prototype.getSsrcByTrack = function(track) {\r\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\r\n};\r\n\r\n/**\r\n * Handles track attached to container (Calls associateStreamWithVideoTag method\r\n * from statistics module)\r\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\r\n * @param container the container\r\n */\r\nJitsiConference.prototype._onTrackAttach = function(track, container) {\r\n    const isLocal = track.isLocal();\r\n    let ssrc = null;\r\n    const isP2P = track.isP2P;\r\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\r\n    const peerConnection\r\n        = isP2P\r\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\r\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\r\n\r\n    if (isLocal) {\r\n        // Local tracks have SSRC stored on per peer connection basis.\r\n        if (peerConnection) {\r\n            ssrc = peerConnection.getLocalSSRC(track);\r\n        }\r\n    } else {\r\n        ssrc = track.getSSRC();\r\n    }\r\n    if (!container.id || !ssrc || !peerConnection) {\r\n        return;\r\n    }\r\n\r\n    this.statistics.associateStreamWithVideoTag(\r\n        peerConnection,\r\n        ssrc,\r\n        isLocal,\r\n        remoteUserId,\r\n        track.getUsageLabel(),\r\n        container.id);\r\n};\r\n\r\n/**\r\n * Logs an \"application log\" message.\r\n * @param message {string} The message to log. Note that while this can be a\r\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\r\n * log valid JSON strings, with an \"id\" field used for distinguishing between\r\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\r\n */\r\nJitsiConference.prototype.sendApplicationLog = function(message) {\r\n    Statistics.sendLog(message);\r\n};\r\n\r\n/**\r\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\r\n * focus.\r\n * @param mucJid the full MUC address of the user to be checked.\r\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\r\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\r\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\r\n */\r\nJitsiConference.prototype._isFocus = function(mucJid) {\r\n    return this.room ? this.room.isFocus(mucJid) : null;\r\n};\r\n\r\n/**\r\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\r\n */\r\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\r\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\r\n};\r\n\r\n/**\r\n * Sends a message via the data channel.\r\n * @param to {string} the id of the endpoint that should receive the message.\r\n * If \"\" the message will be sent to all participants.\r\n * @param payload {object} the payload of the message.\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\r\n    this.rtc.sendChannelMessage(to, payload);\r\n};\r\n\r\n/**\r\n * Sends a broadcast message via the data channel.\r\n * @param payload {object} the payload of the message.\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\r\n    this.sendEndpointMessage('', payload);\r\n};\r\n\r\n/**\r\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\r\n * broadcasts it to all endpoints in the conference.\r\n * @param {string} to The ID of the endpoint/participant which is to receive\r\n * the message, or '' to broadcast the message to all endpoints in the\r\n * conference.\r\n * @param {string|object} message the message to send. If this is of type\r\n * 'string' it will be sent as a chat message. If it is of type 'object', it\r\n * will be encapsulated in a format recognized by jitsi-meet and converted to\r\n * JSON before being sent.\r\n * @param {boolean} sendThroughVideobridge Whether to send the message through\r\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\r\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\r\n */\r\nJitsiConference.prototype.sendMessage = function(\r\n        message,\r\n        to = '',\r\n        sendThroughVideobridge = false) {\r\n    const messageType = typeof message;\r\n\r\n    // Through videobridge we support only objects. Through XMPP we support\r\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\r\n    // regular chat messages).\r\n    if (messageType !== 'object'\r\n            && (sendThroughVideobridge || messageType !== 'string')) {\r\n        logger.error(`Can not send a message of type ${messageType}`);\r\n\r\n        return;\r\n    }\r\n\r\n    if (sendThroughVideobridge) {\r\n        this.sendEndpointMessage(to, message);\r\n    } else {\r\n        let messageToSend = message;\r\n\r\n        // Name of packet extension of message stanza to send the required\r\n        // message in.\r\n        let elementName = 'body';\r\n\r\n        if (messageType === 'object') {\r\n            elementName = 'json-message';\r\n\r\n            // Mark as valid JSON message if not already\r\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\r\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\r\n            }\r\n\r\n            try {\r\n                messageToSend = JSON.stringify(messageToSend);\r\n            } catch (e) {\r\n                logger.error('Can not send a message, stringify failed: ', e);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (to) {\r\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\r\n        } else {\r\n            // Broadcast\r\n            this.sendTextMessage(messageToSend, elementName);\r\n        }\r\n    }\r\n\r\n};\r\n\r\nJitsiConference.prototype.isConnectionInterrupted = function() {\r\n    return this.isP2PActive()\r\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\r\n    if (session.isP2P) {\r\n        this.isP2PConnectionInterrupted = true;\r\n    } else {\r\n        this.isJvbConnectionInterrupted = true;\r\n    }\r\n    if (session.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\r\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\r\n    // eventually come up with the new offer (at least for the time being).\r\n    if (session.isP2P) {\r\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\r\n        // and \"bad\" connection\r\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\r\n\r\n        if (this.p2pJingleSession) {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createP2PEvent(\r\n                    ACTION_P2P_FAILED,\r\n                    {\r\n                        initiator: this.p2pJingleSession.isInitiator\r\n                    }));\r\n\r\n        }\r\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\r\n    } else if (session && this.jvbJingleSession === session) {\r\n        this._delayedIceFailed = new IceFailedHandling(this);\r\n        this._delayedIceFailed.start(session);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\r\n    if (session.isP2P) {\r\n        this.isP2PConnectionInterrupted = false;\r\n    } else {\r\n        this.isJvbConnectionInterrupted = false;\r\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\r\n    }\r\n\r\n    if (session.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\r\n    }\r\n};\r\n\r\n/**\r\n * Accept incoming P2P Jingle call.\r\n * @param {JingleSessionPC} jingleSession the session instance\r\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\r\n * @private\r\n */\r\nJitsiConference.prototype._acceptP2PIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer) {\r\n    this.isP2PConnectionInterrupted = false;\r\n\r\n    // Accept the offer\r\n    this.p2pJingleSession = jingleSession;\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    this.p2pJingleSession.initialize(\r\n        this.room,\r\n        this.rtc,\r\n        this._signalingLayer, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: this._isE2EEEnabled()\r\n        });\r\n\r\n    logger.info('Starting CallStats for P2P connection...');\r\n\r\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\r\n\r\n    const participant = this.participants[remoteID];\r\n\r\n    if (participant) {\r\n        remoteID = participant.getStatsID() || remoteID;\r\n    }\r\n\r\n    this.statistics.startCallStats(\r\n        this.p2pJingleSession.peerconnection,\r\n        remoteID);\r\n\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    this.p2pJingleSession.acceptOffer(\r\n        jingleOffer,\r\n        () => {\r\n            logger.debug('Got RESULT for P2P \"session-accept\"');\r\n\r\n            this.eventEmitter.emit(\r\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n                this.p2pJingleSession);\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to accept incoming P2P Jingle session', error);\r\n        },\r\n        localTracks);\r\n};\r\n\r\n/**\r\n * Adds remote tracks to the conference associated with the JVB session.\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteJVBTracks = function() {\r\n    this._addRemoteTracks(\r\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Adds remote tracks to the conference associated with the P2P session.\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteP2PTracks = function() {\r\n    this._addRemoteTracks(\r\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Generates fake \"remote track added\" events for given Jingle session.\r\n * @param {string} logName the session's nickname which will appear in log\r\n * messages.\r\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\r\n    for (const track of remoteTracks) {\r\n        logger.info(`Adding remote ${logName} track: ${track}`);\r\n        this.onRemoteTrackAdded(track);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\r\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\r\n * the P2P connection if the event comes from the P2P session.\r\n * @param {JingleSessionPC} jingleSession the session instance.\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionEstablished = function(\r\n        jingleSession) {\r\n    if (this.p2pJingleSession !== null) {\r\n        // store the establishment time of the p2p session as a field of the\r\n        // JitsiConference because the p2pJingleSession might get disposed (thus\r\n        // the value is lost).\r\n        this.p2pEstablishmentDuration\r\n            = this.p2pJingleSession.establishmentDuration;\r\n    }\r\n\r\n    if (this.jvbJingleSession !== null) {\r\n        this.jvbEstablishmentDuration\r\n            = this.jvbJingleSession.establishmentDuration;\r\n    }\r\n\r\n    let done = false;\r\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\r\n\r\n    // We don't care about the JVB case, there's nothing to be done\r\n    if (!jingleSession.isP2P) {\r\n        done = true;\r\n    } else if (this.p2pJingleSession !== jingleSession) {\r\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\r\n\r\n        done = true;\r\n    } else if (!jingleSession.isInitiator\r\n        && typeof forceJVB121Ratio === 'number'\r\n        && Math.random() < forceJVB121Ratio) {\r\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\r\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\r\n        this._stopP2PSession('decline', 'force JVB121');\r\n\r\n        done = true;\r\n    }\r\n\r\n    if (!isNaN(this.p2pEstablishmentDuration)\r\n        && !isNaN(this.jvbEstablishmentDuration)) {\r\n        const establishmentDurationDiff\r\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\r\n\r\n        Statistics.sendAnalytics(\r\n            ICE_ESTABLISHMENT_DURATION_DIFF,\r\n            { value: establishmentDurationDiff });\r\n    }\r\n\r\n    if (jingleSession.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\r\n    }\r\n\r\n    if (done) {\r\n\r\n        return;\r\n    }\r\n\r\n    // Update P2P status and emit events\r\n    this._setP2PStatus(true);\r\n\r\n    // Remove remote tracks\r\n    if (this.jvbJingleSession) {\r\n        this._removeRemoteJVBTracks();\r\n    } else {\r\n        logger.info('Not removing remote JVB tracks - no session yet');\r\n    }\r\n\r\n    this._addRemoteP2PTracks();\r\n\r\n    // Stop media transfer over the JVB connection\r\n    if (this.jvbJingleSession) {\r\n        this._suspendMediaTransferForJvbConnection();\r\n    }\r\n\r\n    logger.info('Starting remote stats with p2p connection');\r\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\r\n\r\n    Statistics.sendAnalyticsAndLog(\r\n        createP2PEvent(\r\n            ACTION_P2P_ESTABLISHED,\r\n            {\r\n                initiator: this.p2pJingleSession.isInitiator\r\n            }));\r\n\r\n};\r\n\r\n/**\r\n * Called when the chat room reads a new list of properties from jicofo's\r\n * presence. The properties may have changed, but they don't have to.\r\n *\r\n * @param {Object} properties - The properties keyed by the property name\r\n * ('key').\r\n * @private\r\n */\r\nJitsiConference.prototype._updateProperties = function(properties = {}) {\r\n    const changed = !isEqual(properties, this.properties);\r\n\r\n    this.properties = properties;\r\n    if (changed) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\r\n            this.properties);\r\n\r\n        // Some of the properties need to be added to analytics events.\r\n        const analyticsKeys = [\r\n\r\n            // The number of jitsi-videobridge instances currently used for the\r\n            // conference.\r\n            'bridge-count',\r\n\r\n            // The conference creation time (set by jicofo).\r\n            'created-ms',\r\n            'octo-enabled'\r\n        ];\r\n\r\n        analyticsKeys.forEach(key => {\r\n            if (properties[key] !== undefined) {\r\n                Statistics.analytics.addPermanentProperties({\r\n                    [key.replace('-', '_')]: properties[key]\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * Gets a conference property with a given key.\r\n *\r\n * @param {string} key - The key.\r\n * @returns {*} The value\r\n */\r\nJitsiConference.prototype.getProperty = function(key) {\r\n    return this.properties[key];\r\n};\r\n\r\n/**\r\n * Clears the deferred start P2P task if it has been scheduled.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\r\n    if (this.deferredStartP2PTask) {\r\n        logger.info('Cleared deferred start P2P task');\r\n        clearTimeout(this.deferredStartP2PTask);\r\n        this.deferredStartP2PTask = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Removes from the conference remote tracks associated with the JVB\r\n * connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\r\n    this._removeRemoteTracks(\r\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Removes from the conference remote tracks associated with the P2P\r\n * connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\r\n    this._removeRemoteTracks(\r\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Generates fake \"remote track removed\" events for given Jingle session.\r\n * @param {string} sessionNickname the session's nickname which will appear in\r\n * log messages.\r\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteTracks = function(\r\n        sessionNickname,\r\n        remoteTracks) {\r\n    for (const track of remoteTracks) {\r\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\r\n        this.onRemoteTrackRemoved(track);\r\n    }\r\n};\r\n\r\n/**\r\n * Resumes media transfer over the JVB connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\r\n    logger.info('Resuming media transfer over the JVB connection...');\r\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\r\n        () => {\r\n            logger.info('Resumed media transfer over the JVB connection!');\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to resume media transfer over the JVB connection:',\r\n                error);\r\n        });\r\n};\r\n\r\n/**\r\n * Sets new P2P status and updates some events/states hijacked from\r\n * the <tt>JitsiConference</tt>.\r\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\r\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\r\n * @private\r\n */\r\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\r\n    if (this.p2p === newStatus) {\r\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\r\n\r\n        return;\r\n    }\r\n    this.p2p = newStatus;\r\n    if (newStatus) {\r\n        logger.info('Peer to peer connection established!');\r\n\r\n        // When we end up in a valid P2P session need to reset the properties\r\n        // in case they have persisted, after session with another peer.\r\n        Statistics.analytics.addPermanentProperties({\r\n            p2pFailed: false,\r\n            forceJvb121: false\r\n        });\r\n\r\n        // Sync up video transfer active in case p2pJingleSession not existed\r\n        // when the lastN value was being adjusted.\r\n        const isVideoActive = this.rtc.getLastN() !== 0;\r\n\r\n        this.p2pJingleSession\r\n            .setMediaTransferActive(true, isVideoActive)\r\n            .catch(error => {\r\n                logger.error(\r\n                    'Failed to sync up P2P video transfer status'\r\n                        + `(${isVideoActive})`, error);\r\n            });\r\n    } else {\r\n        logger.info('Peer to peer connection closed!');\r\n    }\r\n\r\n    // Put the JVB connection on hold/resume\r\n    if (this.jvbJingleSession) {\r\n        this.statistics.sendConnectionResumeOrHoldEvent(\r\n            this.jvbJingleSession.peerconnection, !newStatus);\r\n    }\r\n\r\n    // Clear dtmfManager, so that it can be recreated with new connection\r\n    this.dtmfManager = null;\r\n\r\n    // Update P2P status\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.P2P_STATUS,\r\n        this,\r\n        this.p2p);\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n        this._getActiveMediaSession());\r\n\r\n    // Refresh connection interrupted/restored\r\n    this.eventEmitter.emit(\r\n        this.isConnectionInterrupted()\r\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\r\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\r\n};\r\n\r\n/**\r\n * Starts new P2P session.\r\n * @param {string} remoteJid the JID of the remote participant\r\n * @private\r\n */\r\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\r\n    this._maybeClearDeferredStartP2P();\r\n    if (this.p2pJingleSession) {\r\n        logger.error('P2P session already started!');\r\n\r\n        return;\r\n    }\r\n\r\n    this.isP2PConnectionInterrupted = false;\r\n    this.p2pJingleSession\r\n        = this.xmpp.connection.jingle.newP2PJingleSession(\r\n            this.room.myroomjid,\r\n            remoteJid);\r\n    logger.info(\r\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    this.p2pJingleSession.initialize(\r\n        this.room,\r\n        this.rtc,\r\n        this._signalingLayer, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: this._isE2EEEnabled()\r\n        });\r\n\r\n    logger.info('Starting CallStats for P2P connection...');\r\n\r\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\r\n\r\n    const participant = this.participants[remoteID];\r\n\r\n    if (participant) {\r\n        remoteID = participant.getStatsID() || remoteID;\r\n    }\r\n\r\n    this.statistics.startCallStats(\r\n        this.p2pJingleSession.peerconnection,\r\n        remoteID);\r\n\r\n    // NOTE one may consider to start P2P with the local tracks detached,\r\n    // but no data will be sent until ICE succeeds anyway. And we switch\r\n    // immediately once the P2P ICE connects.\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    this.p2pJingleSession.invite(localTracks);\r\n};\r\n\r\n/**\r\n * Suspends media transfer over the JVB connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\r\n    logger.info('Suspending media transfer over the JVB connection...');\r\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\r\n        () => {\r\n            logger.info('Suspended media transfer over the JVB connection !');\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to suspend media transfer over the JVB connection:',\r\n                error);\r\n        });\r\n};\r\n\r\n/**\r\n * Method when called will decide whether it's the time to start or stop\r\n * the P2P session.\r\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\r\n * originates from the user left event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\r\n    if (!browser.supportsP2P()\r\n        || !this.isP2PEnabled()\r\n        || this.isP2PTestModeEnabled()) {\r\n        logger.info('Auto P2P disabled');\r\n\r\n        return;\r\n    }\r\n    const peers = this.getParticipants();\r\n    const peerCount = peers.length;\r\n\r\n    // FIXME 1 peer and it must *support* P2P switching\r\n    const shouldBeInP2P = this._shouldBeInP2PMode();\r\n\r\n    // Clear deferred \"start P2P\" task\r\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\r\n        this._maybeClearDeferredStartP2P();\r\n    }\r\n\r\n    // Start peer to peer session\r\n    if (!this.p2pJingleSession && shouldBeInP2P) {\r\n        const peer = peerCount && peers[0];\r\n\r\n\r\n        const myId = this.myUserId();\r\n        const peersId = peer.getId();\r\n\r\n        if (myId > peersId) {\r\n            logger.debug(\r\n                'I\\'m the bigger peersId - '\r\n                + 'the other peer should start P2P', myId, peersId);\r\n\r\n            return;\r\n        } else if (myId === peersId) {\r\n            logger.error('The same IDs ? ', myId, peersId);\r\n\r\n            return;\r\n        }\r\n\r\n        const jid = peer.getJid();\r\n\r\n        if (userLeftEvent) {\r\n            if (this.deferredStartP2PTask) {\r\n                logger.error('Deferred start P2P task\\'s been set already!');\r\n\r\n                return;\r\n            }\r\n            logger.info(\r\n                `Will start P2P with: ${jid} after ${\r\n                    this.backToP2PDelay} seconds...`);\r\n            this.deferredStartP2PTask = setTimeout(\r\n                this._startP2PSession.bind(this, jid),\r\n                this.backToP2PDelay * 1000);\r\n        } else {\r\n            logger.info(`Will start P2P with: ${jid}`);\r\n            this._startP2PSession(jid);\r\n        }\r\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\r\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\r\n\r\n        // Log that there will be a switch back to the JVB connection\r\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\r\n        }\r\n        this._stopP2PSession();\r\n    }\r\n};\r\n\r\n/**\r\n * Tells whether or not this conference should be currently in the P2P mode.\r\n *\r\n * @private\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype._shouldBeInP2PMode = function() {\r\n    const peers = this.getParticipants();\r\n    const peerCount = peers.length;\r\n    const hasBotPeer = peers.find(p => p._botType === 'poltergeist') !== undefined;\r\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\r\n\r\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\r\n\r\n    return shouldBeInP2P;\r\n};\r\n\r\n/**\r\n * Stops the current P2P session.\r\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\r\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\r\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\r\n * description that will be included in the session terminate message\r\n * @private\r\n */\r\nJitsiConference.prototype._stopP2PSession = function(\r\n        reason,\r\n        reasonDescription) {\r\n    if (!this.p2pJingleSession) {\r\n        logger.error('No P2P session to be stopped!');\r\n\r\n        return;\r\n    }\r\n\r\n    const wasP2PEstablished = this.isP2PActive();\r\n\r\n    // Swap remote tracks, but only if the P2P has been fully established\r\n    if (wasP2PEstablished) {\r\n        if (this.jvbJingleSession) {\r\n            this._resumeMediaTransferForJvbConnection();\r\n        }\r\n\r\n        // Remove remote P2P tracks\r\n        this._removeRemoteP2PTracks();\r\n    }\r\n\r\n    // Stop P2P stats\r\n    logger.info('Stopping remote stats for P2P connection');\r\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\r\n    logger.info('Stopping CallStats for P2P connection');\r\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\r\n\r\n    this.p2pJingleSession.terminate(\r\n        () => {\r\n            logger.info('P2P session terminate RESULT');\r\n        },\r\n        error => {\r\n            // Because both initiator and responder are simultaneously\r\n            // terminating their JingleSessions in case of the 'to JVB switch'\r\n            // when 3rd participant joins, both will dispose their sessions and\r\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\r\n            // want to log this as an error since it's expected behaviour.\r\n            //\r\n            // We want them both to terminate, because in case of initiator's\r\n            // crash the responder would stay in P2P mode until ICE fails which\r\n            // could take up to 20 seconds.\r\n            //\r\n            // NOTE lack of 'reason' is considered as graceful session terminate\r\n            // where both initiator and responder terminate their sessions\r\n            // simultaneously.\r\n            if (reason) {\r\n                logger.error(\r\n                    'An error occurred while trying to terminate'\r\n                        + ' P2P Jingle session', error);\r\n            }\r\n        }, {\r\n            reason: reason ? reason : 'success',\r\n            reasonDescription: reasonDescription\r\n                ? reasonDescription : 'Turing off P2P session',\r\n            sendSessionTerminate: this.room\r\n                && this.getParticipantById(\r\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\r\n        });\r\n\r\n    this.p2pJingleSession = null;\r\n\r\n    // Update P2P status and other affected events/states\r\n    this._setP2PStatus(false);\r\n\r\n    if (wasP2PEstablished) {\r\n        // Add back remote JVB tracks\r\n        if (this.jvbJingleSession) {\r\n            this._addRemoteJVBTracks();\r\n        } else {\r\n            logger.info('Not adding remote JVB tracks - no session yet');\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Checks whether or not the conference is currently in the peer to peer mode.\r\n * Being in peer to peer mode means that the direct connection has been\r\n * established and the P2P connection is being used for media transmission.\r\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\r\n */\r\nJitsiConference.prototype.isP2PActive = function() {\r\n    return this.p2p;\r\n};\r\n\r\n/**\r\n * Returns the current ICE state of the P2P connection.\r\n * NOTE: method is used by the jitsi-meet-torture tests.\r\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\r\n * no P2P connection.\r\n */\r\nJitsiConference.prototype.getP2PConnectionState = function() {\r\n    if (this.isP2PActive()) {\r\n        return this.p2pJingleSession.peerconnection.getConnectionState();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n\r\n/**\r\n * Manually starts new P2P session (should be used only in the tests).\r\n */\r\nJitsiConference.prototype.startP2PSession = function() {\r\n    const peers = this.getParticipants();\r\n\r\n    // Start peer to peer session\r\n    if (peers.length === 1) {\r\n        const peerJid = peers[0].getJid();\r\n\r\n        this._startP2PSession(peerJid);\r\n    } else {\r\n        throw new Error(\r\n            'There must be exactly 1 participant to start the P2P session !');\r\n    }\r\n};\r\n\r\n/**\r\n * Manually stops the current P2P session (should be used only in the tests)\r\n */\r\nJitsiConference.prototype.stopP2PSession = function() {\r\n    this._stopP2PSession();\r\n};\r\n\r\n/**\r\n * Get a summary of how long current participants have been the dominant speaker\r\n * @returns {object}\r\n */\r\nJitsiConference.prototype.getSpeakerStats = function() {\r\n    return this.speakerStatsCollector.getStats();\r\n};\r\n\r\n/**\r\n * Sets the maximum video size the local participant should receive from remote\r\n * participants.\r\n *\r\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\r\n * this receiver is willing to receive.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\r\n    this.qualityController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\r\n};\r\n\r\n/**\r\n * Sets the maximum video size the local participant should send to remote\r\n * participants.\r\n * @param {number} maxFrameHeight - The user preferred max frame height.\r\n * @returns {Promise} promise that will be resolved when the operation is\r\n * successful and rejected otherwise.\r\n */\r\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\r\n    return this.qualityController.setPreferredSendMaxFrameHeight(maxFrameHeight);\r\n};\r\n\r\n/**\r\n * Creates a video SIP GW session and returns it if service is enabled. Before\r\n * creating a session one need to check whether video SIP GW service is\r\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\r\n * if there are available nodes to serve this request, after creating the\r\n * session those nodes can be taken and the request about using the\r\n * created session can fail.\r\n *\r\n * @param {string} sipAddress - The sip address to be used.\r\n * @param {string} displayName - The display name to be used for this session.\r\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\r\n * initialised and there is no room.\r\n */\r\nJitsiConference.prototype.createVideoSIPGWSession\r\n    = function(sipAddress, displayName) {\r\n        if (!this.room) {\r\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\r\n        }\r\n\r\n        return this.videoSIPGWHandler\r\n            .createVideoSIPGWSession(sipAddress, displayName);\r\n    };\r\n\r\n/**\r\n * Sends a conference.join analytics event.\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\r\n    const meetingId = this.getMeetingUniqueId();\r\n\r\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\r\n        return;\r\n    }\r\n\r\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\r\n        meetingId,\r\n        participantId: `${meetingId}.${this._statsCurrentId}`\r\n    }));\r\n    this._conferenceJoinAnalyticsEventSent = Date.now();\r\n};\r\n\r\n/**\r\n * Sends conference.left analytics event.\r\n * @private\r\n */\r\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\r\n    const meetingId = this.getMeetingUniqueId();\r\n\r\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\r\n\r\n        return;\r\n    }\r\n\r\n    Statistics.sendAnalytics(createConferenceEvent('left', {\r\n        meetingId,\r\n        participantId: `${meetingId}.${this._statsCurrentId}`,\r\n        stats: {\r\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\r\n            perf: this.getPerformanceStats()\r\n        }\r\n    }));\r\n};\r\n\r\n/**\r\n * Restarts all active media sessions.\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype._restartMediaSessions = function() {\r\n    if (this.p2pJingleSession) {\r\n        this.stopP2PSession();\r\n    }\r\n\r\n    if (this.jvbJingleSession) {\r\n        this.jvbJingleSession.terminate(\r\n            null /* success callback => we don't care */,\r\n            error => {\r\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\r\n            }, {\r\n                reason: 'success',\r\n                reasonDescription: 'restart required',\r\n                requestRestart: true,\r\n                sendSessionTerminate: true\r\n            });\r\n    }\r\n\r\n    this._maybeStartOrStopP2P(false);\r\n};\r\n\r\n/**\r\n * Returns whether End-To-End encryption is enabled.\r\n *\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype._isE2EEEnabled = function() {\r\n    return this._e2eEncryption && this._e2eEncryption.isEnabled();\r\n};\r\n\r\n/**\r\n * Returns whether End-To-End encryption is supported. Note that not all participants\r\n * in the conference may support it.\r\n *\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype.isE2EESupported = function() {\r\n    return E2EEncryption.isSupported(this.options.config);\r\n};\r\n\r\n/**\r\n * Enables / disables End-to-End encryption.\r\n *\r\n * @param {boolean} enabled whether to enable E2EE or not.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.toggleE2EE = function(enabled) {\r\n    if (!this.isE2EESupported()) {\r\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\r\n\r\n        return;\r\n    }\r\n\r\n    this._e2eEncryption.setEnabled(enabled);\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\r\n *\r\n * @returns {boolean} whether lobby is supported in the backend.\r\n */\r\nJitsiConference.prototype.isLobbySupported = function() {\r\n    return Boolean(this.room && this.room.getLobby().isSupported());\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if the room has members only enabled.\r\n *\r\n * @returns {boolean} whether conference room is members only.\r\n */\r\nJitsiConference.prototype.isMembersOnly = function() {\r\n    return Boolean(this.room && this.room.membersOnlyEnabled);\r\n};\r\n\r\n/**\r\n * Enables lobby by moderators\r\n *\r\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\r\n */\r\nJitsiConference.prototype.enableLobby = function() {\r\n    if (this.room && this.isModerator()) {\r\n        return this.room.getLobby().enable();\r\n    }\r\n\r\n    return Promise.reject(\r\n        new Error('The conference not started or user is not moderator'));\r\n};\r\n\r\n/**\r\n * Disabled lobby by moderators\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.disableLobby = function() {\r\n    if (this.room && this.isModerator()) {\r\n        this.room.getLobby().disable();\r\n    }\r\n};\r\n\r\n/**\r\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\r\n *\r\n * @param {string} displayName Display name should be set to show it to moderators.\r\n * @param {string} email Optional email is used to present avatar to the moderator.\r\n * @returns {Promise<never>}\r\n */\r\nJitsiConference.prototype.joinLobby = function(displayName, email) {\r\n    if (this.room) {\r\n        return this.room.getLobby().join(displayName, email);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference not started'));\r\n};\r\n\r\n/**\r\n * Denies an occupant in the lobby room access to the conference.\r\n * @param {string} id The participant id.\r\n */\r\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\r\n    if (this.room) {\r\n        this.room.getLobby().denyAccess(id);\r\n    }\r\n};\r\n\r\n/**\r\n * Approves the request to join the conference to a participant waiting in the lobby.\r\n *\r\n * @param {string} id The participant id.\r\n */\r\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\r\n    if (this.room) {\r\n        this.room.getLobby().approveAccess(id);\r\n    }\r\n};\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport RTCEvents from './service/RTC/RTCEvents';\r\nimport VideoType from './service/RTC/VideoType';\r\nimport AuthenticationEvents\r\n    from './service/authentication/AuthenticationEvents';\r\nimport {\r\n    ACTION_JINGLE_SA_TIMEOUT,\r\n    createBridgeDownEvent,\r\n    createConnectionStageReachedEvent,\r\n    createFocusLeftEvent,\r\n    createJingleEvent,\r\n    createRemotelyMutedEvent\r\n} from './service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from './service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Setups all event listeners related to conference\r\n * @param conference {JitsiConference} the conference\r\n */\r\nexport default function JitsiConferenceEventManager(conference) {\r\n    this.conference = conference;\r\n    this.xmppListeners = {};\r\n\r\n    // Listeners related to the conference only\r\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\r\n        track => {\r\n            if (!track.isLocal() || !conference.statistics) {\r\n                return;\r\n            }\r\n            const session\r\n                = track.isP2P\r\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\r\n\r\n            // TPC will be null, before the conference starts, but the event\r\n            // still should be queued\r\n            const tpc = (session && session.peerconnection) || null;\r\n\r\n            conference.statistics.sendMuteEvent(\r\n                tpc,\r\n                track.isMuted(),\r\n                track.getType());\r\n        });\r\n}\r\n\r\n/**\r\n * Setups event listeners related to conference.chatRoom\r\n */\r\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\r\n    const conference = this.conference;\r\n    const chatRoom = conference.room;\r\n\r\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\r\n        this.conference.eventEmitter);\r\n\r\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\r\n        if (!jingleSession.isP2P) {\r\n            // If using DataChannel as bridge channel, it must be closed\r\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\r\n            // event for the channel established with the new bridge.\r\n            // TODO: This may be bypassed when using a WebSocket as bridge\r\n            // channel.\r\n            conference.rtc.closeBridgeChannel();\r\n        }\r\n\r\n        // else: there are no DataChannels in P2P session (at least for now)\r\n    });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.ICE_RESTART_SUCCESS,\r\n        (jingleSession, offerIq) => {\r\n            // The JVB data chanel needs to be reopened in case the conference\r\n            // has been moved to a new bridge.\r\n            !jingleSession.isP2P\r\n                && conference._setBridgeChannel(\r\n                    offerIq, jingleSession.peerconnection);\r\n        });\r\n\r\n\r\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\r\n        actor => {\r\n            // TODO: Add a way to differentiate between commands which caused\r\n            // us to mute and those that did not change our state (i.e. we were\r\n            // already muted).\r\n            Statistics.sendAnalytics(createRemotelyMutedEvent());\r\n\r\n            conference.mutedByFocusActor = actor;\r\n\r\n            // set isMutedByFocus when setAudioMute Promise ends\r\n            conference.rtc.setAudioMute(true).then(\r\n                () => {\r\n                    conference.isMutedByFocus = true;\r\n                    conference.mutedByFocusActor = null;\r\n                })\r\n                .catch(\r\n                    error => {\r\n                        conference.mutedByFocusActor = null;\r\n                        logger.warn(\r\n                            'Error while audio muting due to focus request', error);\r\n                    });\r\n        }\r\n    );\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\r\n        JitsiConferenceEvents.SUBJECT_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\r\n        JitsiConferenceEvents.CONFERENCE_JOINED);\r\n\r\n    // send some analytics events\r\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\r\n        () => {\r\n            this.conference.isJvbConnectionInterrupted = false;\r\n\r\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\r\n                const event\r\n                    = createConnectionStageReachedEvent(\r\n                        `conference_${key}`,\r\n                        { value: chatRoom.connectionTimes[key] });\r\n\r\n                Statistics.sendAnalytics(event);\r\n            });\r\n\r\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\r\n                const event\r\n                    = createConnectionStageReachedEvent(\r\n                        `xmpp_${key}`,\r\n                        { value: chatRoom.xmpp.connectionTimes[key] });\r\n\r\n                Statistics.sendAnalytics(event);\r\n            });\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\r\n        if (!session.isP2P) {\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n        }\r\n    });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONNECTION_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONNECTION_ERROR);\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\r\n    chatRoom.addListener(\r\n        XMPPEvents.BRIDGE_DOWN,\r\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.RESERVATION_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\r\n\r\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\r\n        jingleSession => {\r\n            conference._onIceConnectionFailed(jingleSession);\r\n        });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\r\n        JitsiConferenceEvents.CONFERENCE_ERROR,\r\n        JitsiConferenceErrors.CHAT_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\r\n\r\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\r\n        () => {\r\n            Statistics.sendAnalytics(createFocusLeftEvent());\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.FOCUS_LEFT);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\r\n        jingleSession => {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createJingleEvent(\r\n                    ACTION_JINGLE_SA_TIMEOUT,\r\n                    { p2p: jingleSession.isP2P }));\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\r\n        (session, jid) => {\r\n\r\n            if (jid) {\r\n                const participant = conference.getParticipantById(\r\n                    Strophe.getResourceFromJid(jid));\r\n\r\n                if (session.getStatus() === 'off') {\r\n                    session.setTerminator(participant);\r\n                } else if (session.getStatus() === 'on') {\r\n                    session.setInitiator(participant);\r\n                }\r\n            }\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\r\n                session);\r\n        });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\r\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\r\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(\r\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\r\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\r\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\r\n\r\n    chatRoom.setParticipantPropertyListener((node, from) => {\r\n        const participant = conference.getParticipantById(from);\r\n\r\n        if (!participant) {\r\n            return;\r\n        }\r\n\r\n        participant.setProperty(\r\n            node.tagName.substring('jitsi_participant_'.length),\r\n            node.value);\r\n    });\r\n\r\n    chatRoom.addListener(XMPPEvents.KICKED,\r\n        conference.onMemberKicked.bind(conference));\r\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\r\n        conference.onSuspendDetected.bind(conference));\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\r\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\r\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\r\n\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\r\n        conference.onMemberJoined.bind(conference));\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\r\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\r\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\r\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\r\n        conference._onMemberBotTypeChanged.bind(conference));\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\r\n        conference.onMemberLeft.bind(conference));\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\r\n        JitsiConferenceEvents.CONFERENCE_LEFT);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\r\n\r\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\r\n        conference.onDisplayNameChanged.bind(conference));\r\n\r\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\r\n        conference.onLocalRoleChanged(role);\r\n\r\n        // log all events for the recorder operated by the moderator\r\n        if (conference.statistics && conference.isModerator()) {\r\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\r\n                recorderSession => {\r\n                    const logObject = {\r\n                        error: recorderSession.getError(),\r\n                        id: 'recorder_status',\r\n                        status: recorderSession.getStatus()\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n                });\r\n        }\r\n    });\r\n\r\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\r\n        conference.onUserRoleChanged.bind(conference));\r\n\r\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\r\n        (authEnabled, authIdentity) => {\r\n            conference.authEnabled = authEnabled;\r\n            conference.authIdentity = authIdentity;\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\r\n                authIdentity);\r\n        });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.MESSAGE_RECEIVED,\r\n\r\n        // eslint-disable-next-line max-params\r\n        (jid, displayName, txt, myJid, ts) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\r\n                id, txt, ts, displayName);\r\n        });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\r\n\r\n        // eslint-disable-next-line max-params\r\n        (jid, displayName, txt, myJid, ts) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\r\n                id, txt, ts);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\r\n        (jid, status) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n            const participant = conference.getParticipantById(id);\r\n\r\n            if (!participant || participant._status === status) {\r\n                return;\r\n            }\r\n            participant._status = status;\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\r\n        (from, payload) => {\r\n            const id = Strophe.getResourceFromJid(from);\r\n            const participant = conference.getParticipantById(id);\r\n\r\n            if (participant) {\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n                    participant, payload);\r\n            } else {\r\n                logger.warn(\r\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\r\n                    + `participant: ${from}`,\r\n                    payload);\r\n            }\r\n        });\r\n\r\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\r\n        let isModerator = false;\r\n\r\n        if (conference.myUserId() === from && conference.isModerator()) {\r\n            isModerator = true;\r\n        } else {\r\n            const participant = conference.getParticipantById(from);\r\n\r\n            if (participant && participant.isModerator()) {\r\n                isModerator = true;\r\n            }\r\n        }\r\n\r\n        if (!isModerator) {\r\n            return;\r\n        }\r\n\r\n        const startAudioMuted = data.attributes.audio === 'true';\r\n        const startVideoMuted = data.attributes.video === 'true';\r\n\r\n        let updated = false;\r\n\r\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\r\n            conference.startMutedPolicy.audio = startAudioMuted;\r\n            updated = true;\r\n        }\r\n\r\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\r\n            conference.startMutedPolicy.video = startVideoMuted;\r\n            updated = true;\r\n        }\r\n\r\n        if (updated) {\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\r\n                conference.startMutedPolicy\r\n            );\r\n        }\r\n    });\r\n\r\n    if (conference.statistics) {\r\n        // FIXME ICE related events should end up in RTCEvents eventually\r\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\r\n            session => {\r\n                conference.statistics.sendIceConnectionFailedEvent(\r\n                    session.peerconnection);\r\n            });\r\n\r\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\r\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\r\n            (e, pc) => {\r\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\r\n            });\r\n    }\r\n};\r\n\r\n/**\r\n * Setups event listeners related to conference.rtc\r\n */\r\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\r\n    const conference = this.conference;\r\n    const rtc = conference.rtc;\r\n\r\n    rtc.addListener(\r\n        RTCEvents.REMOTE_TRACK_ADDED,\r\n        conference.onRemoteTrackAdded.bind(conference));\r\n\r\n    rtc.addListener(\r\n        RTCEvents.REMOTE_TRACK_REMOVED,\r\n        conference.onRemoteTrackRemoved.bind(conference));\r\n\r\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n        id => {\r\n            if (conference.lastDominantSpeaker !== id && conference.room) {\r\n                conference.lastDominantSpeaker = id;\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, id);\r\n\r\n                if (conference.statistics && conference.myUserId() === id) {\r\n                    // We are the new dominant speaker.\r\n                    conference.statistics.sendDominantSpeakerEvent(\r\n                        conference.room.roomjid);\r\n                }\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\r\n        const now = window.performance.now();\r\n        const key = 'data.channel.opened';\r\n\r\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n        logger.log(`(TIME) ${key}:\\t`, now);\r\n        conference.room.connectionTimes[key] = now;\r\n        Statistics.sendAnalytics(\r\n            createConnectionStageReachedEvent(key, { value: now }));\r\n\r\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\r\n    });\r\n\r\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n        (from, payload) => {\r\n            const participant = conference.getParticipantById(from);\r\n\r\n            if (participant) {\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n                    participant, payload);\r\n            } else {\r\n                logger.warn(\r\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\r\n                        + `participant: ${from}`,\r\n                    payload);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\r\n        (tpc, ufrag) => {\r\n            if (!tpc.isP2P) {\r\n                Statistics.sendLog(\r\n                    JSON.stringify({\r\n                        id: 'local_ufrag',\r\n                        value: ufrag\r\n                    }));\r\n            }\r\n        });\r\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\r\n        (tpc, ufrag) => {\r\n            if (!tpc.isP2P) {\r\n                Statistics.sendLog(\r\n                    JSON.stringify({\r\n                        id: 'remote_ufrag',\r\n                        value: ufrag\r\n                    }));\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendCreateOfferFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\r\n        (track, ssrc) => {\r\n            // when starting screen sharing, the track is created and when\r\n            // we do set local description and we process the ssrc we\r\n            // will be notified for it and we will report it with the event\r\n            // for screen sharing\r\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\r\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * Removes event listeners related to conference.xmpp\r\n */\r\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    conference.xmpp.caps.removeListener(\r\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\r\n        this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]);\r\n    delete this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED];\r\n\r\n    Object.keys(this.xmppListeners).forEach(eventName => {\r\n        conference.xmpp.removeListener(\r\n            eventName,\r\n            this.xmppListeners[eventName]);\r\n    });\r\n    this.xmppListeners = {};\r\n};\r\n\r\n\r\n/**\r\n * Setups event listeners related to conference.xmpp\r\n */\r\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    const featuresChangedListener = from => {\r\n        const participant\r\n            = conference.getParticipantById(\r\n            Strophe.getResourceFromJid(from));\r\n\r\n        if (participant) {\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED,\r\n                participant);\r\n        }\r\n    };\r\n\r\n    conference.xmpp.caps.addListener(\r\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\r\n        featuresChangedListener);\r\n    this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]\r\n        = featuresChangedListener;\r\n\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_INCOMING,\r\n        conference.onIncomingCall.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_ACCEPTED,\r\n        conference.onCallAccepted.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.TRANSPORT_INFO,\r\n        conference.onTransportInfo.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_ENDED,\r\n        conference.onCallEnded.bind(conference));\r\n\r\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\r\n        (audioMuted, videoMuted) => {\r\n            if (conference.options.config.ignoreStartMuted) {\r\n                return;\r\n            }\r\n\r\n            conference.startAudioMuted = audioMuted;\r\n            conference.startVideoMuted = videoMuted;\r\n\r\n            // mute existing local tracks because this is initial mute from\r\n            // Jicofo\r\n            conference.getLocalTracks().forEach(track => {\r\n                switch (track.getType()) {\r\n                case MediaType.AUDIO:\r\n                    conference.startAudioMuted && track.mute();\r\n                    break;\r\n                case MediaType.VIDEO:\r\n                    conference.startVideoMuted && track.mute();\r\n                    break;\r\n                }\r\n            });\r\n\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\r\n        });\r\n\r\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\r\n        createdTimestamp => {\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\r\n        });\r\n};\r\n\r\n/**\r\n * Add XMPP listener and save its reference for remove on leave conference.\r\n */\r\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\r\n        eventName, listener) {\r\n    this.xmppListeners[eventName] = listener;\r\n    this.conference.xmpp.addListener(eventName, listener);\r\n};\r\n\r\n/**\r\n * Setups event listeners related to conference.statistics\r\n */\r\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    if (!conference.statistics) {\r\n        return;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\r\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\r\n    });\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    // Forward the \"before stats disposed\" event\r\n    conference.statistics.addBeforeDisposedListener(() => {\r\n        conference.eventEmitter.emit(\r\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\r\n    });\r\n\r\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\r\n    if (!conference.options.config.startSilent) {\r\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\r\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\r\n                const ssrc = tpc.getLocalSSRC(track);\r\n\r\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\r\n                    return;\r\n                }\r\n\r\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\r\n            });\r\n        });\r\n    }\r\n};\r\n","import { BrowserDetection } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// TODO: Move this code to js-utils.\r\n\r\n// NOTE: Now we are extending BrowserDetection in order to preserve\r\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\r\n// and BrowserDetection as separate objects in future.\r\n\r\n/**\r\n * Implements browser capabilities for lib-jitsi-meet.\r\n */\r\nexport default class BrowserCapabilities extends BrowserDetection {\r\n    /**\r\n     * Creates new BrowserCapabilities instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n        logger.info(\r\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\r\n    }\r\n\r\n    /**\r\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\r\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\r\n     * off the camera device).\r\n     * @return {boolean} <tt>true</tt> if the current browser supports this\r\n     * strategy or <tt>false</tt> otherwise.\r\n     */\r\n    doesVideoMuteByStreamRemove() {\r\n        return this.isChromiumBased() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the current browser support peer to peer connections\r\n     * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>\r\n     * otherwise.\r\n     */\r\n    supportsP2P() {\r\n        return !this.usesUnifiedPlan();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser is Chromium based, that is, it's either\r\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\r\n     * Chrome.\r\n     *\r\n     * This includes the following browsers:\r\n     * - Chrome and Chromium\r\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\r\n     *   such as Brave and Vivaldi\r\n     * - Browsers which are NOT Chrome but use it as their engine, and have\r\n     *   custom detection code: Opera, Electron and NW.JS\r\n     */\r\n    isChromiumBased() {\r\n        return this.isChrome()\r\n            || this.isElectron()\r\n            || this.isNWJS()\r\n            || this.isOpera();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser is supported.\r\n     *\r\n     * @returns {boolean} true if the browser is supported, false otherwise.\r\n     */\r\n    isSupported() {\r\n        return this.isChromiumBased()\r\n            || this.isFirefox()\r\n            || this.isReactNative()\r\n            || (this.isSafari() && !this.isVersionLessThan('12.1'));\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current environment needs a user interaction\r\n     * with the page before any unmute can occur.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isUserInteractionRequiredForUnmute() {\r\n        return this.isFirefox() && this.isVersionLessThan('68');\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\r\n     * user's connection is interrupted and the video stops playback.\r\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\r\n     * otherwise.\r\n     */\r\n    supportsVideoMuteOnConnInterrupted() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser reports upload and download bandwidth\r\n     * statistics.\r\n     * @return {boolean}\r\n     */\r\n    supportsBandwidthStatistics() {\r\n        // FIXME bandwidth stats are currently not implemented for FF on our\r\n        // side, but not sure if not possible ?\r\n        return !this.isFirefox() && !this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports setting codec preferences on the transceiver.\r\n     * @returns {boolean}\r\n     */\r\n    supportsCodecPreferences() {\r\n        return this.usesUnifiedPlan()\r\n            && typeof window.RTCRtpTransceiver !== 'undefined'\r\n            && Object.keys(window.RTCRtpTransceiver.prototype).indexOf('setCodecPreferences') > -1\r\n            && Object.keys(RTCRtpSender.prototype).indexOf('getCapabilities') > -1\r\n\r\n            // this is not working on Safari because of the following bug\r\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\r\n            && !this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser support the device change event.\r\n     * @return {boolean}\r\n     */\r\n    supportsDeviceChangeEvent() {\r\n        return navigator.mediaDevices\r\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\r\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports RTT statistics for srflx local\r\n     * candidates through the legacy getStats() API.\r\n     */\r\n    supportsLocalCandidateRttStatistics() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports the Long Tasks API that lets us observe\r\n     * performance measurement events and be notified of tasks that take longer than\r\n     * 50ms to execute on the main thread.\r\n     */\r\n    supportsPerformanceObserver() {\r\n        return typeof window.PerformanceObserver !== 'undefined'\r\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports audio level stats on the receivers.\r\n     */\r\n    supportsReceiverStats() {\r\n        return typeof window.RTCRtpReceiver !== 'undefined'\r\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1;\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser reports round trip time statistics for\r\n     * the ICE candidate pair.\r\n     * @return {boolean}\r\n     */\r\n    supportsRTTStatistics() {\r\n        // Firefox does not seem to report RTT for ICE candidate pair:\r\n        // eslint-disable-next-line max-len\r\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\r\n        // It does report mozRTT for RTP streams, but at the time of this\r\n        // writing it's value does not make sense most of the time\r\n        // (is reported as 1):\r\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\r\n        // For Chrome and others we rely on 'googRtt'.\r\n        return !this.isFirefox();\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current browser can support capturing video,\r\n     * be it camera or desktop, and displaying received video.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    supportsVideo() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses plan B.\r\n     * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n     * @returns {boolean}\r\n     */\r\n    usesPlanB() {\r\n        return this.isReactNative();//!this.usesUnifiedPlan();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses SDP munging for turning on simulcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesSdpMungingForSimulcast() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses unified plan.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesUnifiedPlan() {\r\n        if (this.isFirefox()) {\r\n            return true;\r\n        }\r\n\r\n        if (this.isSafari() && typeof window.RTCRtpTransceiver !== 'undefined') {\r\n            // eslint-disable-next-line max-len\r\n            // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\r\n            // eslint-disable-next-line no-undef\r\n            return Object.keys(RTCRtpTransceiver.prototype)\r\n                   .indexOf('currentDirection') > -1;\r\n        }\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n        // return false;\r\n        return !this.isReactNative();\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current browser should be using the new\r\n     * getUserMedia flow, which utilizes the adapter shim. This method should\r\n     * be temporary and used while migrating all browsers to use adapter and\r\n     * the new getUserMedia.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesNewGumFlow() {\r\n        const REQUIRED_CHROME_VERSION = 61;\r\n\r\n        if (this.isChrome()) {\r\n            return !this.isVersionLessThan(REQUIRED_CHROME_VERSION);\r\n        }\r\n\r\n        if (this.isFirefox() || this.isSafari()) {\r\n            return true;\r\n        }\r\n\r\n        if (this.isChromiumBased()) {\r\n            return this._getChromiumBasedVersion() >= REQUIRED_CHROME_VERSION;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses webrtc-adapter. All browsers using the new\r\n     * getUserMedia flow and Edge.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesAdapter() {\r\n        return !this.isReactNative();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\r\n     * to the bridge instead of the ssrcs.\r\n     */\r\n    usesRidsForSimulcast() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports getDisplayMedia.\r\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\r\n     */\r\n    supportsGetDisplayMedia() {\r\n        return typeof navigator.getDisplayMedia !== 'undefined'\r\n            || (typeof navigator.mediaDevices !== 'undefined'\r\n                && typeof navigator.mediaDevices.getDisplayMedia\r\n                    !== 'undefined');\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports insertable streams, needed for E2EE.\r\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\r\n     */\r\n    supportsInsertableStreams() {\r\n        if (!(typeof window.RTCRtpSender !== 'undefined'\r\n            && (window.RTCRtpSender.prototype.createEncodedStreams\r\n                || window.RTCRtpSender.prototype.createEncodedVideoStreams))) {\r\n            return false;\r\n        }\r\n\r\n        // Feature-detect transferable streams which we need to operate in a worker.\r\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\r\n        const stream = new ReadableStream();\r\n\r\n        try {\r\n            window.postMessage(stream, '*', [ stream ]);\r\n\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether the browser supports the RED format for audio.\r\n     */\r\n    supportsAudioRed() {\r\n        return Boolean(window.RTCRtpSender\r\n            && window.RTCRtpSender.getCapabilities\r\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\r\n            && window.RTCRtpReceiver\r\n            && window.RTCRtpReceiver.getCapabilities\r\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports the \"sdpSemantics\" configuration option.\r\n     * https://webrtc.org/web-apis/chrome/unified-plan/\r\n     * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n     * @returns {boolean}\r\n     */\r\n    supportsSdpSemantics() {\r\n        return this.isReactNative();//this.isChromiumBased() && this._getChromiumBasedVersion() >= 65;\r\n    }\r\n\r\n    /**\r\n     * Returns the version of a Chromium based browser.\r\n     *\r\n     * @returns {Number}\r\n     */\r\n    _getChromiumBasedVersion() {\r\n        if (this.isChromiumBased()) {\r\n            // NW.JS doesn't expose the Chrome version in the UA string.\r\n            if (this.isNWJS()) {\r\n                // eslint-disable-next-line no-undef\r\n                return Number.parseInt(process.versions.chromium, 10);\r\n            }\r\n\r\n            // Here we process all browsers which use the Chrome engine but\r\n            // don't necessarily identify as Chrome. We cannot use the version\r\n            // comparing functions because the Electron, Opera and NW.JS\r\n            // versions are inconsequential here, as we need to know the actual\r\n            // Chrome engine version.\r\n            const ua = navigator.userAgent;\r\n\r\n            if (ua.match(/Chrome/)) {\r\n                const version\r\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\r\n\r\n                return version;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    TYPE_OPERATIONAL,\r\n    TYPE_PAGE,\r\n    TYPE_TRACK,\r\n    TYPE_UI\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\n\r\nconst MAX_CACHE_SIZE = 100;\r\n\r\n// eslist-disable-line no-undef\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This class provides an API to lib-jitsi-meet and its users for sending\r\n * analytics events. It serves as a bridge to different backend implementations\r\n * (\"analytics handlers\") and a cache for events attempted to be sent before\r\n * the analytics handlers were enabled.\r\n *\r\n * The API is designed to be an easy replacement for the previous version of\r\n * this adapter, and is meant to be extended with more convenience methods.\r\n *\r\n *\r\n * The API calls are translated to objects with the following structure, which\r\n * are then passed to the sendEvent(event) function of the underlying handlers:\r\n *\r\n * {\r\n *    type,\r\n *\r\n *    action,\r\n *    actionSubject,\r\n *    actionSubjectId,\r\n *    attributes,\r\n *    categories,\r\n *    containerId,\r\n *    containerType,\r\n *    name,\r\n *    objectId,\r\n *    objectType,\r\n *    source,\r\n *    tags\r\n * }\r\n *\r\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\r\n * other properties are considered required according to the type.\r\n *\r\n * For events with type 'page', the required properties are: name.\r\n *\r\n * For events with type 'operational' and 'ui', the required properties are:\r\n * action, actionSubject, source\r\n *\r\n * For events with type 'page', the required properties are:\r\n * action, actionSubject, source, containerType, containerId, objectType,\r\n * objectId\r\n */\r\nclass AnalyticsAdapter {\r\n    /**\r\n     * Creates new AnalyticsAdapter instance.\r\n     */\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Reset the state to the initial one.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        /**\r\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\r\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\r\n         * any more events, and it can not be re-enabled.\r\n         * @type {boolean}\r\n         */\r\n        this.disposed = false;\r\n\r\n        /**\r\n         * The set of handlers to which events will be sent.\r\n         * @type {Set<any>}\r\n         */\r\n        this.analyticsHandlers = new Set();\r\n\r\n        /**\r\n         * The cache of events which are not sent yet. The cache is enabled\r\n         * while this field is truthy, and disabled otherwise.\r\n         * @type {Array}\r\n         */\r\n        this.cache = [];\r\n\r\n        /**\r\n         * Map of properties that will be added to every event. Note that the\r\n         * keys will be prefixed with \"permanent.\".\r\n         */\r\n        this.permanentProperties = {};\r\n\r\n        /**\r\n         * The name of the conference that this AnalyticsAdapter is associated\r\n         * with.\r\n         * @type {null}\r\n         */\r\n        this.conferenceName = '';\r\n\r\n        this.addPermanentProperties({\r\n            'user_agent': navigator.userAgent,\r\n            'browser_name': browser.getName()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose analytics. Clears all handlers.\r\n     */\r\n    dispose() {\r\n        logger.warn('Disposing of analytics adapter.');\r\n\r\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\r\n            this.analyticsHandlers.forEach(handler => {\r\n                if (typeof handler.dispose === 'function') {\r\n                    handler.dispose();\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setAnalyticsHandlers([]);\r\n        this.disposed = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the handlers that are going to be used to send analytics. Sends any\r\n     * cached events.\r\n     * @param {Array} handlers the handlers\r\n     */\r\n    setAnalyticsHandlers(handlers) {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        this.analyticsHandlers = new Set(handlers);\r\n\r\n        this._setUserProperties();\r\n\r\n        // Note that we disable the cache even if the set of handlers is empty.\r\n        const cache = this.cache;\r\n\r\n        this.cache = null;\r\n        if (cache) {\r\n            cache.forEach(event => this._sendEvent(event));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the user properties to the analytics handlers.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _setUserProperties() {\r\n        this.analyticsHandlers.forEach(handler => {\r\n            try {\r\n                handler.setUserProperties(this.permanentProperties);\r\n            } catch (error) {\r\n                logger.warn('Error in setUserProperties method of one of the '\r\n                    + `analytics handlers: ${error}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\r\n     * Permanent properties will be added as \"attributes\" to events sent to\r\n     * the underlying \"analytics handlers\", and their keys will be prefixed\r\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\r\n     * result in {\"permanent_key\": \"value\"} object to be added to the\r\n     * \"attributes\" field of events.\r\n     *\r\n     * @param {Object} properties the properties to add\r\n     */\r\n    addPermanentProperties(properties) {\r\n        this.permanentProperties = {\r\n            ...this.permanentProperties,\r\n            ...properties\r\n        };\r\n\r\n        this._setUserProperties();\r\n    }\r\n\r\n    /**\r\n     * Sets the name of the conference that this AnalyticsAdapter is associated\r\n     * with.\r\n     * @param name the name to set.\r\n     */\r\n    setConferenceName(name) {\r\n        this.conferenceName = name;\r\n        this.addPermanentProperties({ 'conference_name': name });\r\n    }\r\n\r\n    /**\r\n     * Sends an event with a given name and given properties. The first\r\n     * parameter is either a string or an object. If it is a string, it is used\r\n     * as the event name and the second parameter is used at the attributes to\r\n     * attach to the event. If it is an object, it represents the whole event,\r\n     * including any desired attributes, and the second parameter is ignored.\r\n     *\r\n     * @param {String|Object} eventName either a string to be used as the name\r\n     * of the event, or an event object. If an event object is passed, the\r\n     * properties parameters is ignored.\r\n     * @param {Object} properties the properties/attributes to attach to the\r\n     * event, if eventName is a string.\r\n     */\r\n    sendEvent(eventName, properties = {}) {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        let event = null;\r\n\r\n        if (typeof eventName === 'string') {\r\n            event = {\r\n                type: TYPE_OPERATIONAL,\r\n                action: eventName,\r\n                actionSubject: eventName,\r\n                source: eventName,\r\n                attributes: properties\r\n            };\r\n        } else if (typeof eventName === 'object') {\r\n            event = eventName;\r\n        }\r\n\r\n        if (!this._verifyRequiredFields(event)) {\r\n            logger.error(\r\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Checks whether an event has all of the required fields set, and tries\r\n     * to fill in some of the missing fields with reasonable default values.\r\n     * Returns true if after this operation the event has all of the required\r\n     * fields set, and false otherwise (if some of the required fields were not\r\n     * set and the attempt to fill them in with a default failed).\r\n     *\r\n     * @param event the event object.\r\n     * @return {boolean} true if the event (after the call to this function)\r\n     * contains all of the required fields, and false otherwise.\r\n     * @private\r\n     */\r\n    _verifyRequiredFields(event) {\r\n        if (!event) {\r\n            return false;\r\n        }\r\n\r\n        if (!event.type) {\r\n            event.type = TYPE_OPERATIONAL;\r\n        }\r\n\r\n        const type = event.type;\r\n\r\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\r\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\r\n            logger.error(`Unknown event type: ${type}`);\r\n\r\n            return false;\r\n        }\r\n\r\n        if (type === TYPE_PAGE) {\r\n            return Boolean(event.name);\r\n        }\r\n\r\n        // Try to set some reasonable default values in case some of the\r\n        // parameters required by the handler API are missing.\r\n        event.action = event.action || event.name || event.actionSubject;\r\n        event.actionSubject = event.actionSubject || event.name || event.action;\r\n        event.source = event.source || event.name || event.action\r\n            || event.actionSubject;\r\n\r\n        if (!event.action || !event.actionSubject || !event.source) {\r\n            logger.error(\r\n                'Required field missing (action, actionSubject or source)');\r\n\r\n            return false;\r\n        }\r\n\r\n        // Track events have additional required fields.\r\n        if (type === TYPE_TRACK) {\r\n            event.objectType = event.objectType || 'generic-object-type';\r\n            event.containerType = event.containerType || 'conference';\r\n            if (event.containerType === 'conference' && !event.containerId) {\r\n                event.containerId = this.conferenceName;\r\n            }\r\n\r\n\r\n            if (!event.objectType || !event.objectId\r\n                || !event.containerType || !event.containerId) {\r\n                logger.error(\r\n                    'Required field missing (containerId, containerType, '\r\n                        + 'objectId or objectType)');\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Saves an event to the cache, if the cache is enabled.\r\n     * @param event the event to save.\r\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\r\n     * if the cache was disabled).\r\n     * @private\r\n     */\r\n    _maybeCacheEvent(event) {\r\n        if (this.cache) {\r\n            this.cache.push(event);\r\n\r\n            // We limit the size of the cache, in case the user fails to ever\r\n            // set the analytics handlers.\r\n            if (this.cache.length > MAX_CACHE_SIZE) {\r\n                this.cache.splice(0, 1);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param event\r\n     * @private\r\n     */\r\n    _sendEvent(event) {\r\n        if (this._maybeCacheEvent(event)) {\r\n            // The event was consumed by the cache.\r\n        } else {\r\n            this.analyticsHandlers.forEach(handler => {\r\n                try {\r\n                    handler.sendEvent(event);\r\n                } catch (e) {\r\n                    logger.warn(`Error sending analytics event: ${e}`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default new AnalyticsAdapter();\r\n","\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport { RunningAverage } from '../util/MathUtil';\r\n\r\nconst logger = getLogger(__filename);\r\nconst MILLI_SECONDS = 1000;\r\nconst SECONDS = 60;\r\n\r\n/**\r\n * This class creates an observer that monitors browser's performance measurement events\r\n * as they are recorded in the browser's performance timeline and computes an average and\r\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\r\n * longer than 50ms to execute on the main thread.\r\n */\r\nexport class PerformanceObserverStats {\r\n    /**\r\n     * Creates a new instance of Performance observer statistics.\r\n     *\r\n     * @param {*} emitter Event emitter for emitting stats periodically\r\n     * @param {*} statsInterval interval for calculating the stats\r\n     */\r\n    constructor(emitter, statsInterval) {\r\n        this.eventEmitter = emitter;\r\n        this.longTasks = 0;\r\n        this.maxDuration = 0;\r\n        this.performanceStatsInterval = statsInterval;\r\n        this.stats = new RunningAverage();\r\n    }\r\n\r\n    /**\r\n     * Obtains the average rate of long tasks observed per min and the\r\n     * duration of the longest task recorded by the observer.\r\n     * @returns {Object}\r\n     */\r\n    getLongTasksStats() {\r\n        return {\r\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\r\n            maxDurationMs: this.maxDuration\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Starts the performance observer by registering the callback function\r\n     * that calculates the performance statistics periodically.\r\n     * @returns {void}\r\n     */\r\n    startObserver() {\r\n        // Create a handler for when the long task event is fired.\r\n        this.longTaskEventHandler = list => {\r\n            const entries = list.getEntries();\r\n\r\n            for (const task of entries) {\r\n                this.longTasks++;\r\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\r\n            }\r\n        };\r\n\r\n        // Create an observer for monitoring long tasks.\r\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\r\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\r\n        this.observer.observe({ type: 'longtask',\r\n            buffered: true });\r\n        const startTime = Date.now();\r\n\r\n        // Calculate the average # of events/sec and emit a stats event.\r\n        this.longTasksIntervalId = setInterval(() => {\r\n            const now = Date.now();\r\n            const interval = this._lastTimeStamp\r\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\r\n                : (now - startTime) / MILLI_SECONDS;\r\n            const rate = this.longTasks / interval;\r\n\r\n            this.stats.addNext(rate);\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\r\n\r\n            // Reset the counter and start counting events again.\r\n            this.longTasks = 0;\r\n            this._lastTimeStamp = Date.now();\r\n        }, this.performanceStatsInterval);\r\n    }\r\n\r\n    /**\r\n     * Stops the performance observer.\r\n     * @returns {void}\r\n     */\r\n    stopObserver() {\r\n        this.observer && this.observer.disconnect();\r\n        this.longTaskEventHandler = null;\r\n        if (this.longTasksIntervalId) {\r\n            clearInterval(this.longTasksIntervalId);\r\n            this.longTasksIntervalId = null;\r\n        }\r\n    }\r\n}\r\n","import { browsers } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport browser from '../browser';\r\n\r\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The lib-jitsi-meet browser-agnostic names of the browser-specific keys\r\n * reported by RTCPeerConnection#getStats mapped by browser.\r\n */\r\nconst KEYS_BY_BROWSER_TYPE = {};\r\n\r\nKEYS_BY_BROWSER_TYPE[browsers.FIREFOX] = {\r\n    'ssrc': 'ssrc',\r\n    'packetsReceived': 'packetsReceived',\r\n    'packetsLost': 'packetsLost',\r\n    'packetsSent': 'packetsSent',\r\n    'bytesReceived': 'bytesReceived',\r\n    'bytesSent': 'bytesSent',\r\n    'framerateMean': 'framerateMean',\r\n    'ip': 'address',\r\n    'port': 'port',\r\n    'protocol': 'protocol'\r\n};\r\nKEYS_BY_BROWSER_TYPE[browsers.CHROME] = {\r\n    'receiveBandwidth': 'googAvailableReceiveBandwidth',\r\n    'sendBandwidth': 'googAvailableSendBandwidth',\r\n    'remoteAddress': 'googRemoteAddress',\r\n    'transportType': 'googTransportType',\r\n    'localAddress': 'googLocalAddress',\r\n    'activeConnection': 'googActiveConnection',\r\n    'ssrc': 'ssrc',\r\n    'packetsReceived': 'packetsReceived',\r\n    'packetsSent': 'packetsSent',\r\n    'packetsLost': 'packetsLost',\r\n    'bytesReceived': 'bytesReceived',\r\n    'bytesSent': 'bytesSent',\r\n    'googCodecName': 'googCodecName',\r\n    'googFrameHeightReceived': 'googFrameHeightReceived',\r\n    'googFrameWidthReceived': 'googFrameWidthReceived',\r\n    'googFrameHeightSent': 'googFrameHeightSent',\r\n    'googFrameWidthSent': 'googFrameWidthSent',\r\n    'googFrameRateReceived': 'googFrameRateReceived',\r\n    'googFrameRateSent': 'googFrameRateSent',\r\n    'audioInputLevel': 'audioInputLevel',\r\n    'audioOutputLevel': 'audioOutputLevel',\r\n    'currentRoundTripTime': 'googRtt',\r\n    'remoteCandidateType': 'googRemoteCandidateType',\r\n    'localCandidateType': 'googLocalCandidateType',\r\n    'ip': 'ip',\r\n    'port': 'port',\r\n    'protocol': 'protocol'\r\n};\r\nKEYS_BY_BROWSER_TYPE[browsers.OPERA]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.NWJS]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.ELECTRON]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.SAFARI]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.REACT_NATIVE]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\n\r\n/**\r\n * Calculates packet lost percent using the number of lost packets and the\r\n * number of all packet.\r\n * @param lostPackets the number of lost packets\r\n * @param totalPackets the number of all packets.\r\n * @returns {number} packet loss percent\r\n */\r\nfunction calculatePacketLoss(lostPackets, totalPackets) {\r\n    if (!totalPackets || totalPackets <= 0\r\n            || !lostPackets || lostPackets <= 0) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.round((lostPackets / totalPackets) * 100);\r\n}\r\n\r\n/**\r\n * Holds \"statistics\" for a single SSRC.\r\n * @constructor\r\n */\r\nfunction SsrcStats() {\r\n    this.loss = {};\r\n    this.bitrate = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    this.resolution = {};\r\n    this.framerate = 0;\r\n    this.codec = '';\r\n}\r\n\r\n/**\r\n * Sets the \"loss\" object.\r\n * @param loss the value to set.\r\n */\r\nSsrcStats.prototype.setLoss = function(loss) {\r\n    this.loss = loss || {};\r\n};\r\n\r\n/**\r\n * Sets resolution that belong to the ssrc represented by this instance.\r\n * @param resolution new resolution value to be set.\r\n */\r\nSsrcStats.prototype.setResolution = function(resolution) {\r\n    this.resolution = resolution || {};\r\n};\r\n\r\n/**\r\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\r\n * the respective fields of the \"bitrate\" field of this object.\r\n * @param bitrate an object holding the values to add.\r\n */\r\nSsrcStats.prototype.addBitrate = function(bitrate) {\r\n    this.bitrate.download += bitrate.download;\r\n    this.bitrate.upload += bitrate.upload;\r\n};\r\n\r\n/**\r\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\r\n * represented by this instance.\r\n */\r\nSsrcStats.prototype.resetBitrate = function() {\r\n    this.bitrate.download = 0;\r\n    this.bitrate.upload = 0;\r\n};\r\n\r\n/**\r\n * Sets the \"framerate\".\r\n * @param framerate the value to set.\r\n */\r\nSsrcStats.prototype.setFramerate = function(framerate) {\r\n    this.framerate = framerate || 0;\r\n};\r\n\r\nSsrcStats.prototype.setCodec = function(codec) {\r\n    this.codec = codec || '';\r\n};\r\n\r\n/**\r\n *\r\n */\r\nfunction ConferenceStats() {\r\n\r\n    /**\r\n     * The bandwidth\r\n     * @type {{}}\r\n     */\r\n    this.bandwidth = {};\r\n\r\n    /**\r\n     * The bit rate\r\n     * @type {{}}\r\n     */\r\n    this.bitrate = {};\r\n\r\n    /**\r\n     * The packet loss rate\r\n     * @type {{}}\r\n     */\r\n    this.packetLoss = null;\r\n\r\n    /**\r\n     * Array with the transport information.\r\n     * @type {Array}\r\n     */\r\n    this.transport = [];\r\n}\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * <tt>StatsCollector</tt> registers for stats updates of given\r\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\r\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\r\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\r\n * instance as an event source.\r\n *\r\n * @param peerconnection WebRTC PeerConnection object.\r\n * @param audioLevelsInterval\r\n * @param statsInterval stats refresh interval given in ms.\r\n * @param eventEmitter\r\n * @constructor\r\n */\r\nexport default function StatsCollector(\r\n        peerconnection,\r\n        audioLevelsInterval,\r\n        statsInterval,\r\n        eventEmitter) {\r\n    // StatsCollector depends entirely on the format of the reports returned by\r\n    // RTCPeerConnection#getStats. Given that the value of\r\n    // browser#getName() is very unlikely to change at runtime, it\r\n    // makes sense to discover whether StatsCollector supports the executing\r\n    // browser as soon as possible. Otherwise, (1) getStatValue would have to\r\n    // needlessly check a \"static\" condition multiple times very very often and\r\n    // (2) the lack of support for the executing browser would be discovered and\r\n    // reported multiple times very very often too late in the execution in some\r\n    // totally unrelated callback.\r\n    /**\r\n     * The browser type supported by this StatsCollector. In other words, the\r\n     * type of the browser which initialized this StatsCollector\r\n     * instance.\r\n     * @private\r\n     */\r\n    this._browserType = browser.getName();\r\n    const keys = KEYS_BY_BROWSER_TYPE[this._browserType];\r\n\r\n    if (!keys) {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw `The browser type '${this._browserType}' isn't supported!`;\r\n    }\r\n\r\n    /**\r\n     * Whether to use the Promise-based getStats API or not.\r\n     * @type {boolean}\r\n     */\r\n    this._usesPromiseGetStats\r\n        = browser.isSafari() || browser.isFirefox();\r\n\r\n    /**\r\n     * The function which is to be used to retrieve the value associated in a\r\n     * report returned by RTCPeerConnection#getStats with a lib-jitsi-meet\r\n     * browser-agnostic name/key.\r\n     *\r\n     * @function\r\n     * @private\r\n     */\r\n    this._getStatValue\r\n        = this._usesPromiseGetStats\r\n            ? this._defineNewGetStatValueMethod(keys)\r\n            : this._defineGetStatValueMethod(keys);\r\n\r\n    this.peerconnection = peerconnection;\r\n    this.baselineAudioLevelsReport = null;\r\n    this.currentAudioLevelsReport = null;\r\n    this.currentStatsReport = null;\r\n    this.previousStatsReport = null;\r\n    this.audioLevelReportHistory = {};\r\n    this.audioLevelsIntervalId = null;\r\n    this.eventEmitter = eventEmitter;\r\n    this.conferenceStats = new ConferenceStats();\r\n\r\n    // Updates stats interval\r\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\r\n\r\n    this.statsIntervalId = null;\r\n    this.statsIntervalMilis = statsInterval;\r\n\r\n    /**\r\n     * Maps SSRC numbers to {@link SsrcStats}.\r\n     * @type {Map<number,SsrcStats}\r\n     */\r\n    this.ssrc2stats = new Map();\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Stops stats updates.\r\n */\r\nStatsCollector.prototype.stop = function() {\r\n    if (this.audioLevelsIntervalId) {\r\n        clearInterval(this.audioLevelsIntervalId);\r\n        this.audioLevelsIntervalId = null;\r\n    }\r\n\r\n    if (this.statsIntervalId) {\r\n        clearInterval(this.statsIntervalId);\r\n        this.statsIntervalId = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Callback passed to <tt>getStats</tt> method.\r\n * @param error an error that occurred on <tt>getStats</tt> call.\r\n */\r\nStatsCollector.prototype.errorCallback = function(error) {\r\n    GlobalOnErrorHandler.callErrorHandler(error);\r\n    logger.error('Get stats error', error);\r\n    this.stop();\r\n};\r\n\r\n/**\r\n * Starts stats updates.\r\n */\r\nStatsCollector.prototype.start = function(startAudioLevelStats) {\r\n    if (startAudioLevelStats) {\r\n        if (browser.supportsReceiverStats()) {\r\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\r\n        }\r\n        this.audioLevelsIntervalId = setInterval(\r\n            () => {\r\n                if (browser.supportsReceiverStats()) {\r\n                    const audioLevels = this.peerconnection.getAudioLevels();\r\n\r\n                    for (const ssrc in audioLevels) {\r\n                        if (audioLevels.hasOwnProperty(ssrc)) {\r\n                            // Use a scaling factor of 2.5 to report the same\r\n                            // audio levels that getStats reports.\r\n                            const audioLevel = audioLevels[ssrc] * 2.5;\r\n\r\n                            this.eventEmitter.emit(\r\n                                StatisticsEvents.AUDIO_LEVEL,\r\n                                this.peerconnection,\r\n                                Number.parseInt(ssrc, 10),\r\n                                audioLevel,\r\n                                false /* isLocal */);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Interval updates\r\n                    this.peerconnection.getStats(\r\n                        report => {\r\n                            let results = null;\r\n\r\n                            if (!report || !report.result\r\n                                || typeof report.result !== 'function') {\r\n                                results = report;\r\n                            } else {\r\n                                results = report.result();\r\n                            }\r\n                            this.currentAudioLevelsReport = results;\r\n                            if (this._usesPromiseGetStats) {\r\n                                this.processNewAudioLevelReport();\r\n                            } else {\r\n                                this.processAudioLevelReport();\r\n                            }\r\n\r\n                            this.baselineAudioLevelsReport\r\n                                = this.currentAudioLevelsReport;\r\n                        },\r\n                        error => this.errorCallback(error)\r\n                    );\r\n                }\r\n            },\r\n            this.audioLevelsIntervalMilis\r\n        );\r\n    }\r\n\r\n    this.statsIntervalId = setInterval(\r\n        () => {\r\n            // Interval updates\r\n            this.peerconnection.getStats(\r\n                report => {\r\n                    let results = null;\r\n\r\n                    if (!report || !report.result\r\n                        || typeof report.result !== 'function') {\r\n                        // firefox\r\n                        results = report;\r\n                    } else {\r\n                        // chrome\r\n                        results = report.result();\r\n                    }\r\n\r\n                    this.currentStatsReport = results;\r\n                    try {\r\n                        if (this._usesPromiseGetStats) {\r\n                            this.processNewStatsReport();\r\n                        } else {\r\n                            this.processStatsReport();\r\n                        }\r\n                    } catch (e) {\r\n                        GlobalOnErrorHandler.callErrorHandler(e);\r\n                        logger.error(`Unsupported key:${e}`, e);\r\n                    }\r\n\r\n                    this.previousStatsReport = this.currentStatsReport;\r\n                },\r\n                error => this.errorCallback(error)\r\n            );\r\n        },\r\n        this.statsIntervalMilis\r\n    );\r\n};\r\n\r\n/**\r\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\r\n * gets the value from a specific report returned by RTCPeerConnection#getStats\r\n * associated with a lib-jitsi-meet browser-agnostic name.\r\n *\r\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\r\n * names to RTCPeerConnection#getStats browser-specific keys\r\n */\r\nStatsCollector.prototype._defineGetStatValueMethod = function(keys) {\r\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\r\n    // to a browser-specific key of a report returned by\r\n    // RTCPeerConnection#getStats.\r\n    const keyFromName = function(name) {\r\n        const key = keys[name];\r\n\r\n        if (key) {\r\n            return key;\r\n        }\r\n\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw `The property '${name}' isn't supported!`;\r\n    };\r\n\r\n    // Define the function which retrieves the value from a specific report\r\n    // returned by RTCPeerConnection#getStats associated with a given\r\n    // browser-specific key.\r\n    let itemStatByKey;\r\n\r\n    switch (this._browserType) {\r\n    case browsers.CHROME:\r\n    case browsers.OPERA:\r\n    case browsers.NWJS:\r\n    case browsers.ELECTRON:\r\n        // TODO What about other types of browser which are based on Chrome such\r\n        // as NW.js? Every time we want to support a new type browser we have to\r\n        // go and add more conditions (here and in multiple other places).\r\n        // Cannot we do a feature detection instead of a browser type check? For\r\n        // example, if item has a stat property of type function, then it's very\r\n        // likely that whoever defined it wanted you to call it in order to\r\n        // retrieve the value associated with a specific key.\r\n        itemStatByKey = (item, key) => item.stat(key);\r\n        break;\r\n    case browsers.REACT_NATIVE:\r\n        // The implementation provided by react-native-webrtc follows the\r\n        // Objective-C WebRTC API: RTCStatsReport has a values property of type\r\n        // Array in which each element is a key-value pair.\r\n        itemStatByKey = function(item, key) {\r\n            let value;\r\n\r\n            item.values.some(pair => {\r\n                if (pair.hasOwnProperty(key)) {\r\n                    value = pair[key];\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n\r\n            });\r\n\r\n            return value;\r\n        };\r\n        break;\r\n    default:\r\n        itemStatByKey = (item, key) => item[key];\r\n    }\r\n\r\n    // Compose the 2 functions defined above to get a function which retrieves\r\n    // the value from a specific report returned by RTCPeerConnection#getStats\r\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\r\n    return (item, name) => itemStatByKey(item, keyFromName(name));\r\n};\r\n\r\n/**\r\n * Obtains a stat value from given stat and converts it to a non-negative\r\n * number. If the value is either invalid or negative then 0 will be returned.\r\n * @param report\r\n * @param {string} name\r\n * @return {number}\r\n * @private\r\n */\r\nStatsCollector.prototype.getNonNegativeStat = function(report, name) {\r\n    let value = this._getStatValue(report, name);\r\n\r\n    if (typeof value !== 'number') {\r\n        value = Number(value);\r\n    }\r\n\r\n    if (isNaN(value)) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.max(0, value);\r\n};\r\n\r\n/* eslint-disable no-continue */\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processStatsReport = function() {\r\n    if (!this.previousStatsReport) {\r\n        return;\r\n    }\r\n\r\n    const getStatValue = this._getStatValue;\r\n    const byteSentStats = {};\r\n\r\n    for (const idx in this.currentStatsReport) {\r\n        if (!this.currentStatsReport.hasOwnProperty(idx)) {\r\n            continue;\r\n        }\r\n        const now = this.currentStatsReport[idx];\r\n\r\n        // The browser API may return \"undefined\" values in the array\r\n        if (!now) {\r\n            continue;\r\n        }\r\n\r\n        try {\r\n            const receiveBandwidth = getStatValue(now, 'receiveBandwidth');\r\n            const sendBandwidth = getStatValue(now, 'sendBandwidth');\r\n\r\n            if (receiveBandwidth || sendBandwidth) {\r\n                this.conferenceStats.bandwidth = {\r\n                    'download': Math.round(receiveBandwidth / 1000),\r\n                    'upload': Math.round(sendBandwidth / 1000)\r\n                };\r\n            }\r\n        } catch (e) { /* not supported*/ }\r\n\r\n        if (now.type === 'googCandidatePair') {\r\n            let active, ip, localCandidateType, localip,\r\n                remoteCandidateType, rtt, type;\r\n\r\n            try {\r\n                active = getStatValue(now, 'activeConnection');\r\n                if (!active) {\r\n                    continue;\r\n                }\r\n\r\n                ip = getStatValue(now, 'remoteAddress');\r\n                type = getStatValue(now, 'transportType');\r\n                localip = getStatValue(now, 'localAddress');\r\n                localCandidateType = getStatValue(now, 'localCandidateType');\r\n                remoteCandidateType = getStatValue(now, 'remoteCandidateType');\r\n                rtt = this.getNonNegativeStat(now, 'currentRoundTripTime');\r\n            } catch (e) { /* not supported*/ }\r\n            if (!ip || !type || !localip || active !== 'true') {\r\n                continue;\r\n            }\r\n\r\n            // Save the address unless it has been saved already.\r\n            const conferenceStatsTransport = this.conferenceStats.transport;\r\n\r\n            if (!conferenceStatsTransport.some(\r\n                    t =>\r\n                        t.ip === ip\r\n                            && t.type === type\r\n                            && t.localip === localip)) {\r\n                conferenceStatsTransport.push({\r\n                    ip,\r\n                    type,\r\n                    localip,\r\n                    p2p: this.peerconnection.isP2P,\r\n                    localCandidateType,\r\n                    remoteCandidateType,\r\n                    rtt\r\n                });\r\n            }\r\n            continue;\r\n        }\r\n\r\n        if (now.type === 'candidatepair') {\r\n            // we need succeeded and selected pairs only\r\n            if (now.state !== 'succeeded' || !now.selected) {\r\n                continue;\r\n            }\r\n\r\n            const local = this.currentStatsReport[now.localCandidateId];\r\n            const remote = this.currentStatsReport[now.remoteCandidateId];\r\n\r\n            this.conferenceStats.transport.push({\r\n                ip: `${remote.ipAddress}:${remote.portNumber}`,\r\n                type: local.transport,\r\n                localip: `${local.ipAddress}:${local.portNumber}`,\r\n                p2p: this.peerconnection.isP2P,\r\n                localCandidateType: local.candidateType,\r\n                remoteCandidateType: remote.candidateType\r\n            });\r\n        }\r\n\r\n        if (now.type !== 'ssrc' && now.type !== 'outboundrtp'\r\n            && now.type !== 'inboundrtp' && now.type !== 'track') {\r\n            continue;\r\n        }\r\n\r\n        const before = this.previousStatsReport[idx];\r\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\r\n\r\n        // If type=\"track\", take the first SSRC from ssrcIds.\r\n        if (now.type === 'track' && Array.isArray(now.ssrcIds)) {\r\n            ssrc = Number(now.ssrcIds[0]);\r\n        }\r\n\r\n        if (!before || !ssrc) {\r\n            continue;\r\n        }\r\n\r\n        // isRemote is available only in FF and is ignored in case of chrome\r\n        // according to the spec\r\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcrtpstreamstats-isremote\r\n        // when isRemote is true indicates that the measurements were done at\r\n        // the remote endpoint and reported in an RTCP RR/XR.\r\n        // Fixes a problem where we are calculating local stats wrong adding\r\n        // the sent bytes to the local download bitrate.\r\n        // In new W3 stats spec, type=\"track\" has a remoteSource boolean\r\n        // property.\r\n        if (now.isRemote === true || now.remoteSource === true) {\r\n            continue;\r\n        }\r\n\r\n        let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n        if (!ssrcStats) {\r\n            ssrcStats = new SsrcStats();\r\n            this.ssrc2stats.set(ssrc, ssrcStats);\r\n        }\r\n\r\n        let isDownloadStream = true;\r\n        let key = 'packetsReceived';\r\n        let packetsNow = getStatValue(now, key);\r\n\r\n        if (typeof packetsNow === 'undefined'\r\n            || packetsNow === null || packetsNow === '') {\r\n            isDownloadStream = false;\r\n            key = 'packetsSent';\r\n            packetsNow = getStatValue(now, key);\r\n            if (typeof packetsNow === 'undefined' || packetsNow === null) {\r\n                logger.warn('No packetsReceived nor packetsSent stat found');\r\n            }\r\n        }\r\n        if (!packetsNow || packetsNow < 0) {\r\n            packetsNow = 0;\r\n        }\r\n\r\n        const packetsBefore = this.getNonNegativeStat(before, key);\r\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\r\n\r\n        const packetsLostNow\r\n            = this.getNonNegativeStat(now, 'packetsLost');\r\n        const packetsLostBefore\r\n            = this.getNonNegativeStat(before, 'packetsLost');\r\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\r\n\r\n        ssrcStats.setLoss({\r\n            packetsTotal: packetsDiff + packetsLostDiff,\r\n            packetsLost: packetsLostDiff,\r\n            isDownloadStream\r\n        });\r\n\r\n        const bytesReceivedNow\r\n            = this.getNonNegativeStat(now, 'bytesReceived');\r\n        const bytesReceivedBefore\r\n            = this.getNonNegativeStat(before, 'bytesReceived');\r\n        const bytesReceived\r\n            = Math.max(0, bytesReceivedNow - bytesReceivedBefore);\r\n\r\n        let bytesSent = 0;\r\n\r\n        // TODO: clean this mess up!\r\n        let nowBytesTransmitted = getStatValue(now, 'bytesSent');\r\n\r\n        if (typeof nowBytesTransmitted === 'number'\r\n            || typeof nowBytesTransmitted === 'string') {\r\n            nowBytesTransmitted = Number(nowBytesTransmitted);\r\n            if (!isNaN(nowBytesTransmitted)) {\r\n                byteSentStats[ssrc] = nowBytesTransmitted;\r\n                if (nowBytesTransmitted > 0) {\r\n                    bytesSent = nowBytesTransmitted\r\n                        - getStatValue(before, 'bytesSent');\r\n                }\r\n            }\r\n        }\r\n        bytesSent = Math.max(0, bytesSent);\r\n\r\n        const timeMs = now.timestamp - before.timestamp;\r\n        let bitrateReceivedKbps = 0, bitrateSentKbps = 0;\r\n\r\n        if (timeMs > 0) {\r\n            // TODO is there any reason to round here?\r\n            bitrateReceivedKbps = Math.round((bytesReceived * 8) / timeMs);\r\n            bitrateSentKbps = Math.round((bytesSent * 8) / timeMs);\r\n        }\r\n\r\n        ssrcStats.addBitrate({\r\n            'download': bitrateReceivedKbps,\r\n            'upload': bitrateSentKbps\r\n        });\r\n\r\n        const resolution = {\r\n            height: null,\r\n            width: null\r\n        };\r\n\r\n        try {\r\n            let height, width;\r\n\r\n            if ((height = getStatValue(now, 'googFrameHeightReceived'))\r\n                && (width = getStatValue(now, 'googFrameWidthReceived'))) {\r\n                resolution.height = height;\r\n                resolution.width = width;\r\n            } else if ((height = getStatValue(now, 'googFrameHeightSent'))\r\n                && (width = getStatValue(now, 'googFrameWidthSent'))) {\r\n                resolution.height = height;\r\n                resolution.width = width;\r\n            }\r\n        } catch (e) { /* not supported*/ }\r\n\r\n        // Tries to get frame rate\r\n        let frameRate;\r\n\r\n        try {\r\n            frameRate = getStatValue(now, 'googFrameRateReceived')\r\n                || getStatValue(now, 'googFrameRateSent') || 0;\r\n        } catch (e) {\r\n            // if it fails with previous properties(chrome),\r\n            // let's try with another one (FF)\r\n            try {\r\n                frameRate = this.getNonNegativeStat(now, 'framerateMean');\r\n            } catch (err) { /* not supported*/ }\r\n        }\r\n        ssrcStats.setFramerate(Math.round(frameRate || 0));\r\n\r\n        if (resolution.height && resolution.width) {\r\n            ssrcStats.setResolution(resolution);\r\n        } else {\r\n            ssrcStats.setResolution(null);\r\n        }\r\n\r\n        let codec;\r\n\r\n        // Try to get the codec for later reporting.\r\n        try {\r\n            codec = getStatValue(now, 'googCodecName') || '';\r\n        } catch (e) { /* not supported*/ }\r\n\r\n        ssrcStats.setCodec(codec);\r\n    }\r\n\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\r\n\r\n    this._processAndEmitReport();\r\n};\r\n\r\n/**\r\n *\r\n */\r\nStatsCollector.prototype._processAndEmitReport = function() {\r\n    // process stats\r\n    const totalPackets = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    const lostPackets = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    let bitrateDownload = 0;\r\n    let bitrateUpload = 0;\r\n    const resolutions = {};\r\n    const framerates = {};\r\n    const codecs = {};\r\n    let audioBitrateDownload = 0;\r\n    let audioBitrateUpload = 0;\r\n    let audioCodec = '';\r\n    let videoBitrateDownload = 0;\r\n    let videoBitrateUpload = 0;\r\n    let videoCodec = '';\r\n\r\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\r\n        // process packet loss stats\r\n        const loss = ssrcStats.loss;\r\n        const type = loss.isDownloadStream ? 'download' : 'upload';\r\n\r\n        totalPackets[type] += loss.packetsTotal;\r\n        lostPackets[type] += loss.packetsLost;\r\n\r\n        // process bitrate stats\r\n        bitrateDownload += ssrcStats.bitrate.download;\r\n        bitrateUpload += ssrcStats.bitrate.upload;\r\n\r\n        // collect resolutions and framerates\r\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\r\n\r\n        if (track) {\r\n            if (track.isAudioTrack()) {\r\n                audioBitrateDownload += ssrcStats.bitrate.download;\r\n                audioBitrateUpload += ssrcStats.bitrate.upload;\r\n                audioCodec = ssrcStats.codec;\r\n            } else {\r\n                videoBitrateDownload += ssrcStats.bitrate.download;\r\n                videoBitrateUpload += ssrcStats.bitrate.upload;\r\n                videoCodec = ssrcStats.codec;\r\n            }\r\n\r\n            const participantId = track.getParticipantId();\r\n\r\n            if (participantId) {\r\n                const resolution = ssrcStats.resolution;\r\n\r\n                if (resolution.width\r\n                        && resolution.height\r\n                        && resolution.width !== -1\r\n                        && resolution.height !== -1) {\r\n                    const userResolutions = resolutions[participantId] || {};\r\n\r\n                    userResolutions[ssrc] = resolution;\r\n                    resolutions[participantId] = userResolutions;\r\n                }\r\n                if (ssrcStats.framerate !== 0) {\r\n                    const userFramerates = framerates[participantId] || {};\r\n\r\n                    userFramerates[ssrc] = ssrcStats.framerate;\r\n                    framerates[participantId] = userFramerates;\r\n                }\r\n                if (audioCodec.length && videoCodec.length) {\r\n                    const codecDesc = {\r\n                        'audio': audioCodec,\r\n                        'video': videoCodec\r\n                    };\r\n\r\n                    const userCodecs = codecs[participantId] || {};\r\n\r\n                    userCodecs[ssrc] = codecDesc;\r\n                    codecs[participantId] = userCodecs;\r\n                }\r\n            } else {\r\n                logger.error(`No participant ID returned by ${track}`);\r\n            }\r\n        }\r\n\r\n        ssrcStats.resetBitrate();\r\n    }\r\n\r\n    this.conferenceStats.bitrate = {\r\n        'upload': bitrateUpload,\r\n        'download': bitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.bitrate.audio = {\r\n        'upload': audioBitrateUpload,\r\n        'download': audioBitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.bitrate.video = {\r\n        'upload': videoBitrateUpload,\r\n        'download': videoBitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.packetLoss = {\r\n        total:\r\n            calculatePacketLoss(\r\n                lostPackets.download + lostPackets.upload,\r\n                totalPackets.download + totalPackets.upload),\r\n        download:\r\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\r\n        upload:\r\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\r\n    };\r\n\r\n    const avgAudioLevels = {};\r\n    let localAvgAudioLevels;\r\n\r\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\r\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\r\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\r\n\r\n        if (isLocal) {\r\n            localAvgAudioLevels = avgAudioLevel;\r\n        } else {\r\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\r\n\r\n            if (track) {\r\n                const participantId = track.getParticipantId();\r\n\r\n                if (participantId) {\r\n                    avgAudioLevels[participantId] = avgAudioLevel;\r\n                }\r\n            }\r\n        }\r\n    });\r\n    this.audioLevelReportHistory = {};\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.CONNECTION_STATS,\r\n        this.peerconnection,\r\n        {\r\n            'bandwidth': this.conferenceStats.bandwidth,\r\n            'bitrate': this.conferenceStats.bitrate,\r\n            'packetLoss': this.conferenceStats.packetLoss,\r\n            'resolution': resolutions,\r\n            'framerate': framerates,\r\n            'codec': codecs,\r\n            'transport': this.conferenceStats.transport,\r\n            localAvgAudioLevels,\r\n            avgAudioLevels\r\n        });\r\n    this.conferenceStats.transport = [];\r\n};\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processAudioLevelReport = function() {\r\n    if (!this.baselineAudioLevelsReport) {\r\n        return;\r\n    }\r\n\r\n    const getStatValue = this._getStatValue;\r\n\r\n    for (const idx in this.currentAudioLevelsReport) {\r\n        if (!this.currentAudioLevelsReport.hasOwnProperty(idx)) {\r\n            continue;\r\n        }\r\n\r\n        const now = this.currentAudioLevelsReport[idx];\r\n\r\n        if (now.type !== 'ssrc' && now.type !== 'track') {\r\n            continue;\r\n        }\r\n\r\n        const before = this.baselineAudioLevelsReport[idx];\r\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\r\n\r\n        if (!ssrc && Array.isArray(now.ssrcIds)) {\r\n            ssrc = Number(now.ssrcIds[0]);\r\n        }\r\n\r\n        if (!before) {\r\n            logger.warn(`${ssrc} not enough data`);\r\n            continue;\r\n        }\r\n\r\n        if (!ssrc) {\r\n            if ((Date.now() - now.timestamp) < 3000) {\r\n                logger.warn('No ssrc: ');\r\n            }\r\n            continue;\r\n        }\r\n\r\n        // Audio level\r\n        let audioLevel;\r\n\r\n        try {\r\n            audioLevel\r\n                = getStatValue(now, 'audioInputLevel')\r\n                    || getStatValue(now, 'audioOutputLevel');\r\n        } catch (e) { /* not supported*/\r\n            logger.warn('Audio Levels are not available in the statistics.');\r\n            clearInterval(this.audioLevelsIntervalId);\r\n\r\n            return;\r\n        }\r\n\r\n        if (audioLevel) {\r\n            let isLocal;\r\n\r\n            // If type=\"ssrc\" (legacy) check whether they are received packets.\r\n            if (now.type === 'ssrc') {\r\n                isLocal = !getStatValue(now, 'packetsReceived');\r\n\r\n            // If type=\"track\", check remoteSource boolean property.\r\n            } else {\r\n                isLocal = !now.remoteSource;\r\n            }\r\n\r\n            // According to the W3C WebRTC Stats spec, audioLevel should be in\r\n            // 0..1 range (0 == silence). However browsers don't behave that\r\n            // way so we must convert it to 0..1.\r\n            // TODO: Can't find specs about what this value really is, but it\r\n            // seems to vary between 0 and around 32k.\r\n            audioLevel = audioLevel / 32767;\r\n\r\n            if (!(ssrc in this.audioLevelReportHistory)) {\r\n                this.audioLevelReportHistory[ssrc] = {\r\n                    isLocal,\r\n                    data: []\r\n                };\r\n            }\r\n            this.audioLevelReportHistory[ssrc].data.push(audioLevel);\r\n\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.AUDIO_LEVEL,\r\n                this.peerconnection,\r\n                ssrc,\r\n                audioLevel,\r\n                isLocal);\r\n        }\r\n    }\r\n};\r\n\r\n/* eslint-enable no-continue */\r\n\r\n/**\r\n * New promised based getStats report processing.\r\n * Tested with chrome, firefox and safari. Not switching it on for chrome as\r\n * frameRate stat is missing and calculating it using framesSent,\r\n * gives values double the values seen in webrtc-internals.\r\n * https://w3c.github.io/webrtc-stats/\r\n */\r\n\r\n/**\r\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\r\n * gets the value from a specific report returned by RTCPeerConnection#getStats\r\n * associated with a lib-jitsi-meet browser-agnostic name in case of using\r\n * Promised based getStats.\r\n *\r\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\r\n * names to RTCPeerConnection#getStats browser-specific keys\r\n */\r\nStatsCollector.prototype._defineNewGetStatValueMethod = function(keys) {\r\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\r\n    // to a browser-specific key of a report returned by\r\n    // RTCPeerConnection#getStats.\r\n    const keyFromName = function(name) {\r\n        const key = keys[name];\r\n\r\n        if (key) {\r\n            return key;\r\n        }\r\n\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw `The property '${name}' isn't supported!`;\r\n    };\r\n\r\n    // Compose the 2 functions defined above to get a function which retrieves\r\n    // the value from a specific report returned by RTCPeerConnection#getStats\r\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\r\n    return (item, name) => item[keyFromName(name)];\r\n};\r\n\r\n/**\r\n * Converts the value to a non-negative number.\r\n * If the value is either invalid or negative then 0 will be returned.\r\n * @param {*} v\r\n * @return {number}\r\n * @private\r\n */\r\nStatsCollector.prototype.getNonNegativeValue = function(v) {\r\n    let value = v;\r\n\r\n    if (typeof value !== 'number') {\r\n        value = Number(value);\r\n    }\r\n\r\n    if (isNaN(value)) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.max(0, value);\r\n};\r\n\r\n/**\r\n * Calculates bitrate between before and now using a supplied field name and its\r\n * value in the stats.\r\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\r\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\r\n * previous stats.\r\n * @param fieldName the field to use for calculations.\r\n * @return {number} the calculated bitrate between now and before.\r\n * @private\r\n */\r\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\r\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\r\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\r\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\r\n\r\n    const timeMs = now.timestamp - before.timestamp;\r\n    let bitrateKbps = 0;\r\n\r\n    if (timeMs > 0) {\r\n        // TODO is there any reason to round here?\r\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\r\n    }\r\n\r\n    return bitrateKbps;\r\n};\r\n\r\n/**\r\n * Stats processing new getStats logic.\r\n */\r\nStatsCollector.prototype.processNewStatsReport = function() {\r\n    if (!this.previousStatsReport) {\r\n        return;\r\n    }\r\n\r\n    const getStatValue = this._getStatValue;\r\n    const byteSentStats = {};\r\n\r\n    this.currentStatsReport.forEach(now => {\r\n\r\n        // RTCIceCandidatePairStats\r\n        // https://w3c.github.io/webrtc-stats/#candidatepair-dict*\r\n        if (now.type === 'candidate-pair'\r\n            && now.nominated\r\n            && now.state === 'succeeded') {\r\n\r\n            const availableIncomingBitrate = now.availableIncomingBitrate;\r\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\r\n\r\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\r\n                this.conferenceStats.bandwidth = {\r\n                    'download': Math.round(availableIncomingBitrate / 1000),\r\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\r\n                };\r\n            }\r\n\r\n            const remoteUsedCandidate\r\n                = this.currentStatsReport.get(now.remoteCandidateId);\r\n            const localUsedCandidate\r\n                = this.currentStatsReport.get(now.localCandidateId);\r\n\r\n            // RTCIceCandidateStats\r\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\r\n            // safari currently does not provide ice candidates in stats\r\n            if (remoteUsedCandidate && localUsedCandidate) {\r\n                const remoteIpAddress = getStatValue(remoteUsedCandidate, 'ip');\r\n                const remotePort = getStatValue(remoteUsedCandidate, 'port');\r\n                const ip = `${remoteIpAddress}:${remotePort}`;\r\n\r\n                const localIpAddress = getStatValue(localUsedCandidate, 'ip');\r\n                const localPort = getStatValue(localUsedCandidate, 'port');\r\n\r\n                const localIp = `${localIpAddress}:${localPort}`;\r\n                const type = getStatValue(remoteUsedCandidate, 'protocol');\r\n\r\n                // Save the address unless it has been saved already.\r\n                const conferenceStatsTransport = this.conferenceStats.transport;\r\n\r\n                if (!conferenceStatsTransport.some(\r\n                        t =>\r\n                            t.ip === ip\r\n                            && t.type === type\r\n                            && t.localip === localIp)) {\r\n                    conferenceStatsTransport.push({\r\n                        ip,\r\n                        type,\r\n                        localIp,\r\n                        p2p: this.peerconnection.isP2P,\r\n                        localCandidateType: localUsedCandidate.candidateType,\r\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\r\n                        networkType: localUsedCandidate.networkType,\r\n                        rtt: now.currentRoundTripTime * 1000\r\n                    });\r\n                }\r\n            }\r\n\r\n        // RTCReceivedRtpStreamStats\r\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\r\n        // RTCSentRtpStreamStats\r\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\r\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\r\n            const before = this.previousStatsReport.get(now.id);\r\n            const ssrc = this.getNonNegativeValue(now.ssrc);\r\n\r\n            if (!before || !ssrc) {\r\n                return;\r\n            }\r\n\r\n            let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n            if (!ssrcStats) {\r\n                ssrcStats = new SsrcStats();\r\n                this.ssrc2stats.set(ssrc, ssrcStats);\r\n            }\r\n\r\n            let isDownloadStream = true;\r\n            let key = 'packetsReceived';\r\n\r\n            if (now.type === 'outbound-rtp') {\r\n                isDownloadStream = false;\r\n                key = 'packetsSent';\r\n            }\r\n\r\n            let packetsNow = now[key];\r\n\r\n            if (!packetsNow || packetsNow < 0) {\r\n                packetsNow = 0;\r\n            }\r\n\r\n            const packetsBefore = this.getNonNegativeValue(before[key]);\r\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\r\n\r\n            const packetsLostNow\r\n                = this.getNonNegativeValue(now.packetsLost);\r\n            const packetsLostBefore\r\n                = this.getNonNegativeValue(before.packetsLost);\r\n            const packetsLostDiff\r\n                = Math.max(0, packetsLostNow - packetsLostBefore);\r\n\r\n            ssrcStats.setLoss({\r\n                packetsTotal: packetsDiff + packetsLostDiff,\r\n                packetsLost: packetsLostDiff,\r\n                isDownloadStream\r\n            });\r\n\r\n            if (now.type === 'inbound-rtp') {\r\n\r\n                ssrcStats.addBitrate({\r\n                    'download': this._calculateBitrate(\r\n                                    now, before, 'bytesReceived'),\r\n                    'upload': 0\r\n                });\r\n\r\n                // RTCInboundRtpStreamStats\r\n                // https://w3c.github.io/webrtc-stats/#inboundrtpstats-dict*\r\n                // TODO: can we use framesDecoded for frame rate, available\r\n                // in chrome\r\n            } else {\r\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\r\n                ssrcStats.addBitrate({\r\n                    'download': 0,\r\n                    'upload': this._calculateBitrate(\r\n                                now, before, 'bytesSent')\r\n                });\r\n\r\n                // RTCOutboundRtpStreamStats\r\n                // https://w3c.github.io/webrtc-stats/#outboundrtpstats-dict*\r\n                // TODO: can we use framesEncoded for frame rate, available\r\n                // in chrome\r\n            }\r\n\r\n            // FF has framerateMean out of spec\r\n            const framerateMean = now.framerateMean;\r\n\r\n            if (framerateMean) {\r\n                ssrcStats.setFramerate(Math.round(framerateMean || 0));\r\n            }\r\n\r\n        // track for resolution\r\n        // RTCVideoHandlerStats\r\n        // https://w3c.github.io/webrtc-stats/#vststats-dict*\r\n        // RTCMediaHandlerStats\r\n        // https://w3c.github.io/webrtc-stats/#mststats-dict*\r\n        } else if (now.type === 'track') {\r\n\r\n            const resolution = {\r\n                height: now.frameHeight,\r\n                width: now.frameWidth\r\n            };\r\n\r\n            // Tries to get frame rate\r\n            let frameRate = now.framesPerSecond;\r\n\r\n            if (!frameRate) {\r\n                // we need to calculate it\r\n                const before = this.previousStatsReport.get(now.id);\r\n\r\n                if (before) {\r\n                    const timeMs = now.timestamp - before.timestamp;\r\n\r\n                    if (timeMs > 0 && now.framesSent) {\r\n                        const numberOfFramesSinceBefore\r\n                            = now.framesSent - before.framesSent;\r\n\r\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\r\n                    }\r\n                }\r\n\r\n                if (!frameRate) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            const trackIdentifier = now.trackIdentifier;\r\n            const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\r\n\r\n            if (!ssrc) {\r\n                return;\r\n            }\r\n            let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n            if (!ssrcStats) {\r\n                ssrcStats = new SsrcStats();\r\n                this.ssrc2stats.set(ssrc, ssrcStats);\r\n            }\r\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\r\n\r\n            if (resolution.height && resolution.width) {\r\n                ssrcStats.setResolution(resolution);\r\n            } else {\r\n                ssrcStats.setResolution(null);\r\n            }\r\n        }\r\n    });\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\r\n\r\n    this._processAndEmitReport();\r\n};\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processNewAudioLevelReport = function() {\r\n    if (!this.baselineAudioLevelsReport) {\r\n        return;\r\n    }\r\n\r\n    this.currentAudioLevelsReport.forEach(now => {\r\n        if (now.type !== 'track') {\r\n            return;\r\n        }\r\n\r\n        // Audio level\r\n        const audioLevel = now.audioLevel;\r\n\r\n        if (!audioLevel) {\r\n            return;\r\n        }\r\n\r\n        const trackIdentifier = now.trackIdentifier;\r\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\r\n\r\n        if (ssrc) {\r\n            const isLocal\r\n                = ssrc === this.peerconnection.getLocalSSRC(\r\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\r\n\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.AUDIO_LEVEL,\r\n                this.peerconnection,\r\n                ssrc,\r\n                audioLevel,\r\n                isLocal);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * End new promised based getStats processing methods.\r\n */\r\n","/**\r\n * Implements utility to forward events from one eventEmitter to another.\r\n * @param src {object} instance of EventEmitter or another class that implements\r\n * addListener method which will register listener to EventEmitter instance.\r\n * @param dest {object} instance of EventEmitter or another class that\r\n * implements emit method which will emit an event.\r\n */\r\nfunction EventEmitterForwarder(src, dest) {\r\n    if (!src || !dest || typeof src.addListener !== 'function'\r\n        || typeof dest.emit !== 'function') {\r\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\r\n    }\r\n    this.src = src;\r\n    this.dest = dest;\r\n}\r\n\r\n/**\r\n * Adds event to be forwarded from src to dest.\r\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\r\n * for.\r\n * @param dstEvent {string} the event that will be fired from dest.\r\n * @param arguments all other passed arguments are going to be fired with\r\n * dstEvent.\r\n */\r\nEventEmitterForwarder.prototype.forward = function(...args) {\r\n    const srcEvent = args[0];\r\n\r\n    // This will be the \"this\" value for emit function.\r\n\r\n    args[0] = this.dest;\r\n\r\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\r\n    this.src.addListener(\r\n        srcEvent,\r\n        Function.prototype.bind.apply(this.dest.emit, args));\r\n};\r\n\r\nmodule.exports = EventEmitterForwarder;\r\n","\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\n\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport { ParticipantConnectionStatus }\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport { ERROR_FEATURE_VERSION_MISMATCH } from './modules/xmpp/Caps';\r\nimport * as MediaType from './service/RTC/MediaType';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Represents a participant in (i.e. a member of) a conference.\r\n */\r\nexport default class JitsiParticipant {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Initializes a new JitsiParticipant instance.\r\n     *\r\n     * @constructor\r\n     * @param jid the conference XMPP jid\r\n     * @param conference\r\n     * @param displayName\r\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\r\n     * represent a hidden participant; otherwise, false.\r\n     * @param {string} statsID - optional participant statsID\r\n     * @param {string} status - the initial status if any.\r\n     * @param {object} identity - the xmpp identity\r\n     */\r\n    constructor(jid, conference, displayName, hidden, statsID, status, identity) {\r\n        this._jid = jid;\r\n        this._id = Strophe.getResourceFromJid(jid);\r\n        this._conference = conference;\r\n        this._displayName = displayName;\r\n        this._supportsDTMF = false;\r\n        this._tracks = [];\r\n        this._role = 'none';\r\n        this._status = status;\r\n        this._hidden = hidden;\r\n        this._statsID = statsID;\r\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\r\n        this._properties = {};\r\n        this._identity = identity;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * @returns {JitsiConference} The conference that this participant belongs\r\n     * to.\r\n     */\r\n    getConference() {\r\n        return this._conference;\r\n    }\r\n\r\n    /**\r\n     * Gets the value of a property of this participant.\r\n     */\r\n    getProperty(name) {\r\n        return this._properties[name];\r\n    }\r\n\r\n    /**\r\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\r\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\r\n     * muted status.\r\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\r\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\r\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\r\n     */\r\n    hasAnyVideoTrackWebRTCMuted() {\r\n        return (\r\n            this.getTracks().some(\r\n                jitsiTrack =>\r\n                    jitsiTrack.getType() === MediaType.VIDEO\r\n                        && jitsiTrack.isWebRTCTrackMuted()));\r\n    }\r\n\r\n    /**\r\n     * Updates participant's connection status.\r\n     * @param {string} state the current participant connection state.\r\n     * {@link ParticipantConnectionStatus}.\r\n     * @private\r\n     */\r\n    _setConnectionStatus(status) {\r\n        this._connectionStatus = status;\r\n    }\r\n\r\n    /**\r\n     * Return participant's connectivity status.\r\n     *\r\n     * @returns {string} the connection status\r\n     * <tt>ParticipantConnectionStatus</tt> of the user.\r\n     * {@link ParticipantConnectionStatus}.\r\n     */\r\n    getConnectionStatus() {\r\n        return this._connectionStatus;\r\n    }\r\n\r\n    /**\r\n     * Sets the value of a property of this participant, and fires an event if\r\n     * the value has changed.\r\n     * @name the name of the property.\r\n     * @value the value to set.\r\n     */\r\n    setProperty(name, value) {\r\n        const oldValue = this._properties[name];\r\n\r\n        if (value !== oldValue) {\r\n            this._properties[name] = value;\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\r\n                this,\r\n                name,\r\n                oldValue,\r\n                value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\r\n     * participant.\r\n     */\r\n    getTracks() {\r\n        return this._tracks.slice();\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\r\n     * participant, for given media type.\r\n     */\r\n    getTracksByMediaType(mediaType) {\r\n        return this.getTracks().filter(track => track.getType() === mediaType);\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The ID of this participant.\r\n     */\r\n    getId() {\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The JID of this participant.\r\n     */\r\n    getJid() {\r\n        return this._jid;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The human-readable display name of this participant.\r\n     */\r\n    getDisplayName() {\r\n        return this._displayName;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The stats ID of this participant.\r\n     */\r\n    getStatsID() {\r\n        return this._statsID;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The status of the participant.\r\n     */\r\n    getStatus() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant is a moderator or not.\r\n     */\r\n    isModerator() {\r\n        return this._role === 'moderator';\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\r\n     * special system participants may want to join hidden (like for example the\r\n     * recorder).\r\n     */\r\n    isHidden() {\r\n        return this._hidden;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant has muted their audio.\r\n     */\r\n    isAudioMuted() {\r\n        return this._isMediaTypeMuted(MediaType.AUDIO);\r\n    }\r\n\r\n    /**\r\n     * Determines whether all JitsiTracks which are of a specific MediaType and\r\n     * which belong to this JitsiParticipant are muted.\r\n     *\r\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\r\n     * checked.\r\n     * @private\r\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\r\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\r\n     * false.\r\n     */\r\n    _isMediaTypeMuted(mediaType) {\r\n        return this.getTracks().reduce(\r\n            (muted, track) =>\r\n                muted && (track.getType() !== mediaType || track.isMuted()),\r\n            true);\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant has muted their video.\r\n     */\r\n    isVideoMuted() {\r\n        return this._isMediaTypeMuted(MediaType.VIDEO);\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The role of this participant.\r\n     */\r\n    getRole() {\r\n        return this._role;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    supportsDTMF() {\r\n        return this._supportsDTMF;\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for the participant.\r\n     * @param {int} timeout the timeout in ms for reply from the participant.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeatures(timeout = 5000) {\r\n        if (this._getFeaturesPromise) {\r\n            return this._getFeaturesPromise;\r\n        }\r\n\r\n        this._getFeaturesPromise = this._conference.xmpp.caps.getFeatures(this._jid, timeout)\r\n            .catch(error => {\r\n                // Retry on feature version mismatch\r\n                if (error === ERROR_FEATURE_VERSION_MISMATCH) {\r\n                    return this._conference.xmpp.caps.getFeatures(this._jid, timeout);\r\n                }\r\n\r\n                logger.warn(`Failed to discover features of ${this._jid}`, error);\r\n\r\n                return Promise.reject(error);\r\n            });\r\n\r\n        return this._getFeaturesPromise\r\n            .then(result => {\r\n                this._getFeaturesPromise = undefined;\r\n\r\n                return result;\r\n            }, error => {\r\n                this._getFeaturesPromise = undefined;\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Returns the bot type for the participant.\r\n     *\r\n     * @returns {string|undefined} - The bot type of the participant.\r\n     */\r\n    getBotType() {\r\n        return this._botType;\r\n    }\r\n}\r\n","import {\r\n    CONNECTION_DISCONNECTED,\r\n    CONNECTION_ESTABLISHED,\r\n    CONNECTION_FAILED\r\n} from './JitsiConnectionEvents';\r\nimport XMPP from './modules/xmpp/xmpp';\r\n\r\n/**\r\n * @typedef {Object} UpgradeRoleError\r\n *\r\n * @property {JitsiConnectionErrors} [connectionError] - One of\r\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\r\n * XMPP server.\r\n * @property {String} [authenticationError] - One of XMPP error conditions\r\n * returned by Jicofo on authentication attempt. See\r\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\r\n * @property {String} [message] - More details about the error.\r\n * @property {Object} [credentials] - The credentials that failed the\r\n * authentication.\r\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\r\n * that failed the authentication.\r\n * @property {string} [credentials.password] - The password part of the\r\n * credentials that failed the authentication.\r\n *\r\n * NOTE If neither one of the errors is present, then the operation has been\r\n * canceled.\r\n */\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\n/**\r\n * Connects to the XMPP server using the specified credentials and contacts\r\n * Jicofo in order to obtain a session ID (which is then stored in the local\r\n * storage). The user's role of the parent conference will be upgraded to\r\n * moderator (by Jicofo). It's also used to join the conference when starting\r\n * from anonymous domain and only authenticated users are allowed to create new\r\n * rooms.\r\n *\r\n * @param {Object} options\r\n * @param {string} options.id - XMPP user's ID to log in. For example,\r\n * user@xmpp-server.com.\r\n * @param {string} options.password - XMPP user's password to log in with.\r\n * @param {string} [options.roomPassword] - The password to join the MUC with.\r\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\r\n * into the XMPP server was successful. The next step will be to obtain a new\r\n * session ID from Jicofo and join the MUC using it which will effectively\r\n * upgrade the user's role to moderator.\r\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\r\n * authenticating and upgrading the role of the specified XMPP user finishes and\r\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\r\n * process. If the process finishes successfully, the session ID has been stored\r\n * in the settings and the <tt>thenable</tt> is resolved. If the process\r\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\r\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\r\n * <tt>authenticationError</tt> property set depending on which of the steps has\r\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\r\n * thenable will be rejected with an empty object (i.e. no error property will\r\n * be set on the rejection reason).\r\n */\r\nexport default function authenticateAndUpgradeRole({\r\n    // 1. Log the specified XMPP user in.\r\n    id,\r\n    password,\r\n    onCreateResource,\r\n\r\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\r\n    //    successfully logged in.\r\n    onLoginSuccessful,\r\n\r\n    // 3. Join the MUC.\r\n    roomPassword\r\n}) {\r\n    let canceled = false;\r\n    let rejectPromise;\r\n    let xmpp = new XMPP(this.connection.options);\r\n\r\n    const process = new Promise((resolve, reject) => {\r\n        // The process is represented by a Thenable with a cancel method. The\r\n        // Thenable is implemented using Promise and the cancel using the\r\n        // Promise's reject function.\r\n        rejectPromise = reject;\r\n\r\n\r\n        xmpp.addListener(\r\n            CONNECTION_DISCONNECTED,\r\n            () => {\r\n                xmpp = undefined;\r\n            });\r\n        xmpp.addListener(\r\n            CONNECTION_ESTABLISHED,\r\n            () => {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                // Let the caller know that the XMPP login was successful.\r\n                onLoginSuccessful && onLoginSuccessful();\r\n\r\n                // Now authenticate with Jicofo and get a new session ID.\r\n                const room = xmpp.createRoom(\r\n                    this.options.name,\r\n                    this.options.config,\r\n                    onCreateResource\r\n                );\r\n\r\n                room.moderator.authenticate()\r\n                    .then(() => {\r\n                        xmpp && xmpp.disconnect();\r\n\r\n                        if (canceled) {\r\n                            return;\r\n                        }\r\n\r\n                        // At this point we should have the new session ID\r\n                        // stored in the settings. Jicofo will allow to join the\r\n                        // room.\r\n                        this.join(roomPassword);\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch(({ error, message }) => {\r\n                        xmpp.disconnect();\r\n\r\n                        reject({\r\n                            authenticationError: error,\r\n                            message\r\n                        });\r\n                    });\r\n            });\r\n        xmpp.addListener(\r\n            CONNECTION_FAILED,\r\n            (connectionError, message, credentials) => {\r\n                reject({\r\n                    connectionError,\r\n                    credentials,\r\n                    message\r\n                });\r\n                xmpp = undefined;\r\n            });\r\n\r\n        canceled || xmpp.connect(id, password);\r\n    });\r\n\r\n    /**\r\n     * Cancels the process, if it's in progress, of authenticating and upgrading\r\n     * the role of the local participant/user.\r\n     *\r\n     * @public\r\n     * @returns {void}\r\n     */\r\n    process.cancel = () => {\r\n        canceled = true;\r\n        rejectPromise({});\r\n        xmpp && xmpp.disconnect();\r\n    };\r\n\r\n    return process;\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Flag to set on senders / receivers to avoid setting up the encryption transform\r\n// more than once.\r\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\r\n\r\n/**\r\n * Context encapsulating the cryptography bits required for E2EE.\r\n * This uses the WebRTC Insertable Streams API which is explained in\r\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\r\n * that provides access to the encoded frames and allows them to be transformed.\r\n *\r\n * The encoded frame format is explained below in the _encodeFunction method.\r\n * High level design goals were:\r\n * - do not require changes to existing SFUs and retain (VP8) metadata.\r\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\r\n * - allow for the key to be rotated frequently.\r\n */\r\nexport default class E2EEcontext {\r\n    /**\r\n     * Build a new E2EE context instance, which will be used in a given conference.\r\n     */\r\n    constructor() {\r\n        // Determine the URL for the worker script. Relative URLs are relative to\r\n        // the entry point, not the script that launches the worker.\r\n        let baseUrl = '';\r\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\r\n\r\n        if (ljm) {\r\n            const idx = ljm.src.lastIndexOf('/');\r\n\r\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\r\n        }\r\n\r\n        // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\r\n        // synchronously load the JS.\r\n        const workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\r\n        const workerBlob\r\n            = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\r\n        const blobUrl = window.URL.createObjectURL(workerBlob);\r\n\r\n        this._worker = new Worker(blobUrl, { name: 'E2EE Worker' });\r\n        this._worker.onerror = e => logger.onerror(e);\r\n    }\r\n\r\n    /**\r\n     * Cleans up all state associated with the given participant. This is needed when a\r\n     * participant leaves the current conference.\r\n     *\r\n     * @param {string} participantId - The participant that just left.\r\n     */\r\n    cleanup(participantId) {\r\n        this._worker.postMessage({\r\n            operation: 'cleanup',\r\n            participantId\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\r\n     * a frame decoder.\r\n     *\r\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\r\n     * @param {string} kind - The kind of track this receiver belongs to.\r\n     * @param {string} participantId - The participant id that this receiver belongs to.\r\n     */\r\n    handleReceiver(receiver, kind, participantId) {\r\n        if (receiver[kJitsiE2EE]) {\r\n            return;\r\n        }\r\n        receiver[kJitsiE2EE] = true;\r\n\r\n        let receiverStreams;\r\n\r\n        if (receiver.createEncodedStreams) {\r\n            receiverStreams = receiver.createEncodedStreams();\r\n        } else {\r\n            receiverStreams = kind === 'video' ? receiver.createEncodedVideoStreams()\r\n                : receiver.createEncodedAudioStreams();\r\n        }\r\n\r\n        this._worker.postMessage({\r\n            operation: 'decode',\r\n            readableStream: receiverStreams.readable || receiverStreams.readableStream,\r\n            writableStream: receiverStreams.writable || receiverStreams.writableStream,\r\n            participantId\r\n        }, [ receiverStreams.readable || receiverStreams.readableStream,\r\n            receiverStreams.writable || receiverStreams.writableStream ]);\r\n    }\r\n\r\n    /**\r\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\r\n     * a frame encoder.\r\n     *\r\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\r\n     * @param {string} kind - The kind of track this sender belongs to.\r\n     * @param {string} participantId - The participant id that this sender belongs to.\r\n     */\r\n    handleSender(sender, kind, participantId) {\r\n        if (sender[kJitsiE2EE]) {\r\n            return;\r\n        }\r\n        sender[kJitsiE2EE] = true;\r\n\r\n        let senderStreams;\r\n\r\n        if (sender.createEncodedStreams) {\r\n            senderStreams = sender.createEncodedStreams();\r\n        } else {\r\n            senderStreams = kind === 'video' ? sender.createEncodedVideoStreams()\r\n                : sender.createEncodedAudioStreams();\r\n        }\r\n\r\n        this._worker.postMessage({\r\n            operation: 'encode',\r\n            readableStream: senderStreams.readable || senderStreams.readableStream,\r\n            writableStream: senderStreams.writable || senderStreams.writableStream,\r\n            participantId\r\n        }, [ senderStreams.readable || senderStreams.readableStream,\r\n            senderStreams.writable || senderStreams.writableStream ]);\r\n    }\r\n\r\n    /**\r\n     * Set the E2EE key for the specified participant.\r\n     *\r\n     * @param {string} participantId - the ID of the participant who's key we are setting.\r\n     * @param {Uint8Array | boolean} key - they key for the given participant.\r\n     * @param {Number} keyIndex - the key index.\r\n     */\r\n    setKey(participantId, key, keyIndex) {\r\n        this._worker.postMessage({\r\n            operation: 'setKey',\r\n            participantId,\r\n            key,\r\n            keyIndex\r\n        });\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    default as NetworkInfo,\r\n    NETWORK_INFO_EVENT\r\n} from '../connectivity/NetworkInfo';\r\nimport { getJitterDelay } from '../util/Retry';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\r\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\r\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\r\n * the retry interval using the full jitter pattern.\r\n */\r\nexport default class ResumeTask {\r\n    /**\r\n     * Initializes new {@code RetryTask}.\r\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\r\n     */\r\n    constructor(stropheConnection) {\r\n        this._stropheConn = stropheConnection;\r\n\r\n        /**\r\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._resumeRetryN = 0;\r\n\r\n        this._retryDelay = undefined;\r\n    }\r\n\r\n    /**\r\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\r\n     * 'undefined' it means that no resume task was not scheduled.\r\n     */\r\n    get retryDelay() {\r\n        return this._retryDelay;\r\n    }\r\n\r\n    /**\r\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    schedule() {\r\n        this._cancelResume();\r\n\r\n        this._resumeRetryN += 1;\r\n\r\n        this._networkOnlineListener\r\n            = NetworkInfo.addEventListener(\r\n                NETWORK_INFO_EVENT,\r\n                ({ isOnline }) => {\r\n                    if (isOnline) {\r\n                        this._scheduleResume();\r\n                    } else {\r\n                        this._cancelResume();\r\n                    }\r\n                });\r\n\r\n        NetworkInfo.isOnline() && this._scheduleResume();\r\n    }\r\n\r\n    /**\r\n     * Schedules a delayed timeout which will execute the resume action.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _scheduleResume() {\r\n        if (this._resumeTimeout) {\r\n\r\n            // NO-OP\r\n            return;\r\n        }\r\n\r\n        // The retry delay will be:\r\n        //   1st retry: 1.5s - 3s\r\n        //   2nd retry: 3s - 9s\r\n        //   3rd and next retry: 4.5s - 27s\r\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\r\n        this._retryDelay = getJitterDelay(\r\n            /* retry */ this._resumeRetryN,\r\n            /* minDelay */ this._resumeRetryN * 1500,\r\n            3);\r\n\r\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\r\n\r\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\r\n    }\r\n\r\n    /**\r\n     * Cancels the delayed resume task.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _cancelResume() {\r\n        if (this._resumeTimeout) {\r\n            logger.info('Canceling connection resume task');\r\n            clearTimeout(this._resumeTimeout);\r\n            this._resumeTimeout = undefined;\r\n            this._retryDelay = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resumes the XMPP connection using the stream management plugin.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _resumeConnection() {\r\n        const { streamManagement } = this._stropheConn;\r\n        const resumeToken = streamManagement.getResumeToken();\r\n\r\n        // Things may have changed since when the task was scheduled\r\n        if (!resumeToken) {\r\n            return;\r\n        }\r\n\r\n        logger.info('Trying to resume the XMPP connection');\r\n\r\n        const url = new URL(this._stropheConn.service);\r\n        let { search } = url;\r\n\r\n        // adds previd param only if missing\r\n        if (search.indexOf('previd=') === -1) {\r\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\r\n        }\r\n\r\n        url.search = search;\r\n\r\n        this._stropheConn.service = url.toString();\r\n\r\n        streamManagement.resume();\r\n    }\r\n\r\n    /**\r\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\r\n     * example when the disconnect method is called.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    cancel() {\r\n        this._cancelResume();\r\n        this._resumeRetryN = 0;\r\n        if (this._networkOnlineListener) {\r\n            this._networkOnlineListener();\r\n            this._networkOnlineListener = null;\r\n        }\r\n    }\r\n}\r\n","/**\r\n* Gets next timeout using the full jitter pattern.\r\n*\r\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\r\n*\r\n* @param {number} retry - The retry number.\r\n* @param {number} minDelay - The minimal delay in milliseconds.\r\n* @param {number} base - The exponent base.\r\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\r\n* @private\r\n*/\r\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\r\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\r\n}\r\n","/**\r\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\r\n */\r\nexport default class LastRequestTracker {\r\n    /**\r\n     * Initializes new instance.\r\n     */\r\n    constructor() {\r\n        this._lastSuccess = null;\r\n    }\r\n\r\n    /**\r\n     * Starts tracking requests on the given connection.\r\n     *\r\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\r\n     * @param {Object} stropheConnection - Strophe connection instance.\r\n     */\r\n    startTracking(xmppConnection, stropheConnection) {\r\n        const originalRawInput = stropheConnection.rawInput;\r\n\r\n        stropheConnection.rawInput = (...args) => {\r\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\r\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\r\n            if (xmppConnection.connected) {\r\n                this._lastSuccess = Date.now();\r\n            }\r\n            originalRawInput.apply(stropheConnection, args);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns how many milliseconds have passed since the last successful BOSH request.\r\n     *\r\n     * @returns {number|null}\r\n     */\r\n    getTimeSinceLastSuccess() {\r\n        return this._lastSuccess\r\n            ? Date.now() - this._lastSuccess\r\n            : null;\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Ping every 10 sec\r\n */\r\nconst PING_INTERVAL = 10000;\r\n\r\n/**\r\n * Ping timeout error after 5 sec of waiting.\r\n */\r\nconst PING_TIMEOUT = 5000;\r\n\r\n/**\r\n * How many ping failures will be tolerated before the WebSocket connection is killed.\r\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\r\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\r\n */\r\nconst PING_THRESHOLD = 2;\r\n\r\n/**\r\n * The number of timestamps of send pings to keep.\r\n * The current value is 2 minutes.\r\n * @type {number} number of timestamps.\r\n */\r\nconst PING_TIMESTAMPS_TO_KEEP = 120000 / PING_INTERVAL;\r\n\r\n/**\r\n * XEP-0199 ping plugin.\r\n *\r\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\r\n */\r\nexport default class PingConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     * Contructs new object\r\n     * @param {Object} options\r\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\r\n     * by the {@link PING_THRESHOLD} constant).\r\n     * @constructor\r\n     */\r\n    constructor({ onPingThresholdExceeded }) {\r\n        super();\r\n        this.failedPings = 0;\r\n        this.pingExecIntervals = new Array(PING_TIMESTAMPS_TO_KEEP);\r\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\r\n    }\r\n\r\n    /**\r\n     * Initializes the plugin. Method called by Strophe.\r\n     * @param connection Strophe connection instance.\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Sends \"ping\" to given <tt>jid</tt>\r\n     * @param jid the JID to which ping request will be sent.\r\n     * @param success callback called on success.\r\n     * @param error callback called on error.\r\n     * @param timeout ms how long are we going to wait for the response. On\r\n     * timeout <tt>error<//t> callback is called with undefined error argument.\r\n     */\r\n    ping(jid, success, error, timeout) {\r\n        this._addPingExecutionTimestamp();\r\n\r\n        const iq = $iq({\r\n            type: 'get',\r\n            to: jid\r\n        });\r\n\r\n        iq.c('ping', { xmlns: Strophe.NS.PING });\r\n        this.connection.sendIQ2(iq, { timeout })\r\n            .then(success, error);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Starts to send ping in given interval to specified remote JID.\r\n     * This plugin supports only one such task and <tt>stopInterval</tt>\r\n     * must be called before starting a new one.\r\n     * @param remoteJid remote JID to which ping requests will be sent to.\r\n     * @param interval task interval in ms.\r\n     */\r\n    startInterval(remoteJid, interval = PING_INTERVAL) {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = window.setInterval(() => {\r\n            this.ping(remoteJid, () => {\r\n                this.failedPings = 0;\r\n            }, error => {\r\n                this.failedPings += 1;\r\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\r\n\r\n                if (this.failedPings >= PING_THRESHOLD) {\r\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n                    logger.error(errmsg, error);\r\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\r\n                } else {\r\n                    logger.warn(errmsg, error);\r\n                }\r\n            }, PING_TIMEOUT);\r\n        }, interval);\r\n        logger.info(`XMPP pings will be sent every ${interval} ms`);\r\n    }\r\n\r\n    /**\r\n     * Stops current \"ping\"  interval task.\r\n     */\r\n    stopInterval() {\r\n        if (this.intervalId) {\r\n            window.clearInterval(this.intervalId);\r\n            this.intervalId = null;\r\n            this.failedPings = 0;\r\n            logger.info('Ping interval cleared');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the current time to the array of send ping timestamps.\r\n     * @private\r\n     */\r\n    _addPingExecutionTimestamp() {\r\n        this.pingExecIntervals.push(new Date().getTime());\r\n\r\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\r\n        if (this.pingExecIntervals.length > PING_TIMESTAMPS_TO_KEEP) {\r\n            this.pingExecIntervals.shift();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum time between the recent sent pings, if there is a\r\n     * big value it means the computer was inactive for some time(suspended).\r\n     * Checks the maximum gap between sending pings, considering and the\r\n     * current time. Trying to detect computer inactivity (sleep).\r\n     *\r\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\r\n     */\r\n    getPingSuspendTime() {\r\n        const pingIntervals = this.pingExecIntervals.slice();\r\n\r\n        // we need current time, as if ping was sent now\r\n        // if computer sleeps we will get correct interval after next\r\n        // scheduled ping, bet we sometimes need that interval before waiting\r\n        // for the next ping, on closing the connection on error.\r\n        pingIntervals.push(new Date().getTime());\r\n\r\n        let maxInterval = 0;\r\n        let previousTS = pingIntervals[0];\r\n\r\n        pingIntervals.forEach(e => {\r\n            const currentInterval = e - previousTS;\r\n\r\n            if (currentInterval > maxInterval) {\r\n                maxInterval = currentInterval;\r\n            }\r\n\r\n            previousTS = e;\r\n        });\r\n\r\n        // remove the interval between the ping sent\r\n        // this way in normal execution there is no suspend and the return\r\n        // will be 0 or close to 0.\r\n        maxInterval -= PING_INTERVAL;\r\n\r\n        // make sure we do not return less than 0\r\n        return Math.max(maxInterval, 0);\r\n    }\r\n}\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport ChatRoom from './ChatRoom';\r\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * MUC connection plugin.\r\n */\r\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\r\n    /**\r\n     *\r\n     * @param xmpp\r\n     */\r\n    constructor(xmpp) {\r\n        super();\r\n        this.xmpp = xmpp;\r\n        this.rooms = {};\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n\r\n        // add handlers (just once)\r\n        this.connection.addHandler(this.onPresence.bind(this), null,\r\n            'presence', null, null, null, null);\r\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\r\n            null, 'presence', 'unavailable', null);\r\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\r\n            'presence', 'error', null);\r\n        this.connection.addHandler(this.onMessage.bind(this), null,\r\n            'message', null, null);\r\n        this.connection.addHandler(this.onMute.bind(this),\r\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     * @param options\r\n     */\r\n    createRoom(jid, password, options) {\r\n        const roomJid = Strophe.getBareJidFromJid(jid);\r\n\r\n        if (this.rooms[roomJid]) {\r\n            const errmsg = 'You are already in the room!';\r\n\r\n            logger.error(errmsg);\r\n            throw new Error(errmsg);\r\n        }\r\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\r\n            password, this.xmpp, options);\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\r\n\r\n        return this.rooms[roomJid];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     */\r\n    doLeave(jid) {\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\r\n        delete this.rooms[jid];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresence(pres) {\r\n        const from = pres.getAttribute('from');\r\n\r\n        // What is this for? A workaround for something?\r\n        if (pres.getAttribute('type')) {\r\n            return true;\r\n        }\r\n\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        // Parse status.\r\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n            + '>status[code=\"201\"]').length) {\r\n            room.createNonAnonymousRoom();\r\n        }\r\n\r\n        room.onPresence(pres);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresenceUnavailable(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onPresenceUnavailable(pres, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresenceError(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onPresenceError(pres, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param msg\r\n     */\r\n    onMessage(msg) {\r\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\r\n        const from = msg.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onMessage(msg, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * TODO: Document\r\n     * @param iq\r\n     */\r\n    onMute(iq) {\r\n        const from = iq.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        // Returning false would result in the listener being deregistered by Strophe\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onMute(iq);\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $msg, Strophe } from 'strophe.js';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The command type for updating a lobby participant's e-mail address.\r\n *\r\n * @type {string}\r\n */\r\nconst EMAIL_COMMAND = 'email';\r\n\r\n/**\r\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\r\n * approving or denying access to participants from the lobby room.\r\n */\r\nexport default class Lobby {\r\n\r\n    /**\r\n     * Constructs lobby room.\r\n     *\r\n     * @param {ChatRoom} room the main room.\r\n     */\r\n    constructor(room) {\r\n        this.xmpp = room.xmpp;\r\n        this.mainRoom = room;\r\n\r\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.LOCAL_ROLE_CHANGED,\r\n            maybeJoinLobbyRoom);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\r\n            maybeJoinLobbyRoom);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\r\n            jid => {\r\n                this.lobbyRoomJid = jid;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Whether lobby is supported on backend.\r\n     *\r\n     * @returns {boolean} whether lobby is supported on backend.\r\n     */\r\n    isSupported() {\r\n        return this.xmpp.lobbySupported;\r\n    }\r\n\r\n    /**\r\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    enable() {\r\n        if (!this.isSupported()) {\r\n            return Promise.reject(new Error('Lobby not supported!'));\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.mainRoom.setMembersOnly(true, resolve, reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    disable() {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()\r\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\r\n            return;\r\n        }\r\n\r\n        this.mainRoom.setMembersOnly(false);\r\n    }\r\n\r\n    /**\r\n     * Leaves the lobby room.\r\n     * @private\r\n     */\r\n    _leaveLobbyRoom() {\r\n        if (this.lobbyRoom) {\r\n            this.lobbyRoom.leave()\r\n                .then(() => {\r\n                    this.lobbyRoom = undefined;\r\n                    logger.info('Lobby room left!');\r\n                })\r\n                .catch(() => {}); // eslint-disable-line no-empty-function\r\n        }\r\n    }\r\n\r\n    /**\r\n     * We had received a jid for the lobby room.\r\n     *\r\n     * @param jid the lobby room jid to join.\r\n     */\r\n    setLobbyRoomJid(jid) {\r\n        this.lobbyRoomJid = jid;\r\n    }\r\n\r\n    /**\r\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\r\n     * @private\r\n     */\r\n    _maybeJoinLobbyRoom() {\r\n        if (!this.isSupported()) {\r\n            return;\r\n        }\r\n\r\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\r\n\r\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\r\n            // join the lobby\r\n            this.join()\r\n                .then(() => logger.info('Joined lobby room'))\r\n                .catch(e => logger.error('Failed joining lobby', e));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\r\n     *\r\n     * @param {string} username is required.\r\n     * @param {string} email is optional.\r\n     * @returns {Promise} resolves once we join the room.\r\n     */\r\n    join(displayName, email) {\r\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\r\n\r\n        if (!this.lobbyRoomJid) {\r\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\r\n        }\r\n\r\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\r\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\r\n\r\n        this.lobbyRoom = this.xmpp.createRoom(\r\n            roomName, {\r\n                customDomain,\r\n                disableDiscoInfo: true,\r\n                disableFocus: true,\r\n                enableLobby: false\r\n            }\r\n        );\r\n\r\n        if (displayName) {\r\n            // remove previously set nickname\r\n            this.lobbyRoom.removeFromPresence('nick');\r\n            this.lobbyRoom.addToPresence('nick', {\r\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\r\n                value: displayName\r\n            });\r\n        }\r\n\r\n        if (isModerator) {\r\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\r\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\r\n            });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_MEMBER_JOINED,\r\n                // eslint-disable-next-line max-params\r\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\r\n                    // we need to ignore joins on lobby for participants that are already in the main room\r\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\r\n                        return;\r\n                    }\r\n\r\n                    // we emit the new event on the main room so we can propagate\r\n                    // events to the conference\r\n                    this.mainRoom.eventEmitter.emit(\r\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\r\n                        Strophe.getResourceFromJid(from),\r\n                        nick,\r\n                        identity ? identity.avatar : undefined\r\n                    );\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\r\n                    // we emit the new event on the main room so we can propagate\r\n                    // events to the conference\r\n                    this.mainRoom.eventEmitter.emit(\r\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\r\n                        Strophe.getResourceFromJid(from)\r\n                    );\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_DESTROYED,\r\n                () => {\r\n                    // let's make sure we emit that all lobby users had left\r\n                    Object.keys(this.lobbyRoom.members)\r\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\r\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    this.lobbyRoom = undefined;\r\n                    logger.info('Lobby room left(destroyed)!');\r\n                });\r\n        } else {\r\n            // this should only be handled by those waiting in lobby\r\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\r\n                if (isSelfPresence) {\r\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    return;\r\n                }\r\n            });\r\n\r\n            // As there is still reference of the main room\r\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\r\n            // the invite message should be received directly to the xmpp conn in general\r\n            this.mainRoom.addEventListener(\r\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\r\n                (roomJid, from, txt, invitePassword) => {\r\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\r\n                    if (roomJid === this.mainRoom.roomjid) {\r\n                        // we are now allowed let's join and leave lobby\r\n                        this.mainRoom.join(invitePassword);\r\n\r\n                        this._leaveLobbyRoom();\r\n                    }\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_DESTROYED,\r\n                (reason, jid) => {\r\n                    // we are receiving the jid of the main room\r\n                    // means we are invited to join, maybe lobby was disabled\r\n                    if (jid && jid === this.mainRoom.roomjid) {\r\n                        this.mainRoom.join();\r\n\r\n                        return;\r\n                    }\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\r\n                });\r\n\r\n            // If participant retries joining shared password while waiting in the lobby\r\n            // and succeeds make sure we leave lobby\r\n            this.mainRoom.addEventListener(\r\n                XMPPEvents.MUC_JOINED,\r\n                () => {\r\n                    this._leaveLobbyRoom();\r\n                });\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\r\n                resolve();\r\n\r\n                // send our email, as we do not handle this on initial presence we need a second one\r\n                if (email && !isModerator) {\r\n                    this.lobbyRoom.removeFromPresence(EMAIL_COMMAND);\r\n                    this.lobbyRoom.addToPresence(EMAIL_COMMAND, { value: email });\r\n                    this.lobbyRoom.sendPresence();\r\n                }\r\n            });\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\r\n\r\n            this.lobbyRoom.join();\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Should be possible only for moderators.\r\n     * @param id\r\n     */\r\n    denyAccess(id) {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\r\n            return;\r\n        }\r\n\r\n        const jid = Object.keys(this.lobbyRoom.members)\r\n            .find(j => Strophe.getResourceFromJid(j) === id);\r\n\r\n        if (jid) {\r\n            this.lobbyRoom.kick(jid);\r\n        } else {\r\n            logger.error(`Not found member for ${id} in lobby room.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Should be possible only for moderators.\r\n     * @param id\r\n     */\r\n    approveAccess(id) {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\r\n            return;\r\n        }\r\n\r\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\r\n            .find(j => Strophe.getResourceFromJid(j) === id);\r\n\r\n        if (memberRoomJid) {\r\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\r\n            const msgToSend\r\n                = $msg({ to: this.mainRoom.roomjid })\r\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\r\n                    .c('invite', { to: jid });\r\n\r\n            this.xmpp.connection.sendIQ(msgToSend,\r\n                () => { }, // eslint-disable-line no-empty-function\r\n                e => {\r\n                    logger.error(`Error sending invite for ${jid}`, e);\r\n                });\r\n        } else {\r\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\r\n        }\r\n    }\r\n}\r\n","/* global $, Promise */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport Settings from '../settings/Settings';\r\n\r\nconst AuthenticationEvents\r\n    = require('../../service/authentication/AuthenticationEvents');\r\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\r\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n *\r\n * @param step\r\n */\r\nfunction createExpBackoffTimer(step) {\r\n    let count = 1;\r\n\r\n    return function(reset) {\r\n        // Reset call\r\n        if (reset) {\r\n            count = 1;\r\n\r\n            return;\r\n        }\r\n\r\n        // Calculate next timeout\r\n        const timeout = Math.pow(2, count - 1);\r\n\r\n        count += 1;\r\n\r\n        return timeout * step;\r\n    };\r\n}\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n *\r\n * @param roomName\r\n * @param xmpp\r\n * @param emitter\r\n * @param options\r\n */\r\nexport default function Moderator(roomName, xmpp, emitter, options) {\r\n    this.roomName = roomName;\r\n    this.xmppService = xmpp;\r\n    this.getNextTimeout = createExpBackoffTimer(1000);\r\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\r\n\r\n    // External authentication stuff\r\n    this.externalAuthEnabled = false;\r\n    this.options = options;\r\n\r\n    // Sip gateway can be enabled by configuring Jigasi host in config.js or\r\n    // it will be enabled automatically if focus detects the component through\r\n    // service discovery.\r\n    this.sipGatewayEnabled\r\n        = this.options.connection.hosts\r\n            && this.options.connection.hosts.call_control !== undefined;\r\n\r\n    this.eventEmitter = emitter;\r\n\r\n    this.connection = this.xmppService.connection;\r\n\r\n    // FIXME: Message listener that talks to POPUP window\r\n    /**\r\n     *\r\n     * @param event\r\n     */\r\n    function listener(event) {\r\n        if (event.data && event.data.sessionId) {\r\n            if (event.origin !== window.location.origin) {\r\n                logger.warn(\r\n                    `Ignoring sessionId from different origin: ${\r\n                        event.origin}`);\r\n\r\n                return;\r\n            }\r\n            Settings.sessionId = event.data.sessionId;\r\n\r\n            // After popup is closed we will authenticate\r\n        }\r\n    }\r\n\r\n    // Register\r\n    if (window.addEventListener) {\r\n        window.addEventListener('message', listener, false);\r\n    } else {\r\n        window.attachEvent('onmessage', listener);\r\n    }\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\nModerator.prototype.isExternalAuthEnabled = function() {\r\n    return this.externalAuthEnabled;\r\n};\r\n\r\nModerator.prototype.isSipGatewayEnabled = function() {\r\n    return this.sipGatewayEnabled;\r\n};\r\n\r\nModerator.prototype.onMucMemberLeft = function(jid) {\r\n    logger.info(`Someone left is it focus ? ${jid}`);\r\n    const resource = Strophe.getResourceFromJid(jid);\r\n\r\n    if (resource === 'focus') {\r\n        logger.info(\r\n            'Focus has left the room - leaving conference');\r\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\r\n    }\r\n};\r\n\r\nModerator.prototype.setFocusUserJid = function(focusJid) {\r\n    if (!this.focusUserJid) {\r\n        this.focusUserJid = focusJid;\r\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\r\n    }\r\n};\r\n\r\nModerator.prototype.getFocusUserJid = function() {\r\n    return this.focusUserJid;\r\n};\r\n\r\nModerator.prototype.getFocusComponent = function() {\r\n    // Get focus component address\r\n    let focusComponent = this.options.connection.hosts.focus;\r\n\r\n    // If not specified use default:  'focus.domain'\r\n\r\n    if (!focusComponent) {\r\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\r\n    }\r\n\r\n    return focusComponent;\r\n};\r\n\r\nModerator.prototype.createConferenceIq = function() {\r\n    // Generate create conference IQ\r\n    const elem = $iq({ to: this.getFocusComponent(),\r\n        type: 'set' });\r\n\r\n    // Session Id used for authentication\r\n    const { sessionId } = Settings;\r\n    const machineUID = Settings.machineId;\r\n    const config = this.options.conference;\r\n\r\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\r\n\r\n    elem.c('conference', {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        room: this.roomName,\r\n        'machine-uid': machineUID\r\n    });\r\n\r\n    if (sessionId) {\r\n        elem.attrs({ 'session-id': sessionId });\r\n    }\r\n    if (this.options.connection.enforcedBridge !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'enforcedBridge',\r\n                value: this.options.connection.enforcedBridge\r\n            }).up();\r\n    }\r\n\r\n    // Tell the focus we have Jigasi configured\r\n    if (this.options.connection.hosts !== undefined\r\n        && this.options.connection.hosts.call_control !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'call_control',\r\n                value: this.options.connection.hosts.call_control\r\n            }).up();\r\n    }\r\n    if (config.channelLastN !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'channelLastN',\r\n                value: config.channelLastN\r\n            }).up();\r\n    }\r\n    elem.c(\r\n        'property', {\r\n            name: 'disableRtx',\r\n            value: Boolean(config.disableRtx)\r\n        }).up();\r\n\r\n    if (config.enableTcc !== undefined) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'enableTcc',\r\n                    value: Boolean(config.enableTcc)\r\n                }).up();\r\n    }\r\n    if (config.enableRemb !== undefined) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'enableRemb',\r\n                    value: Boolean(config.enableRemb)\r\n                }).up();\r\n    }\r\n    if (config.enableOpusRed === true) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'enableOpusRed',\r\n                    value: true\r\n                }).up();\r\n    }\r\n    if (config.minParticipants !== undefined) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'minParticipants',\r\n                    value: config.minParticipants\r\n                }).up();\r\n    }\r\n\r\n    elem.c(\r\n        'property', {\r\n            name: 'enableLipSync',\r\n            value: this.options.connection.enableLipSync === true\r\n        }).up();\r\n    if (config.audioPacketDelay !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'audioPacketDelay',\r\n                value: config.audioPacketDelay\r\n            }).up();\r\n    }\r\n    if (config.startBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startBitrate',\r\n                value: config.startBitrate\r\n            }).up();\r\n    }\r\n    if (config.minBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'minBitrate',\r\n                value: config.minBitrate\r\n            }).up();\r\n    }\r\n    if (config.testing && config.testing.octo\r\n        && typeof config.testing.octo.probability === 'number') {\r\n        if (Math.random() < config.testing.octo.probability) {\r\n            elem.c(\r\n                'property', {\r\n                    name: 'octo',\r\n                    value: true\r\n                }).up();\r\n        }\r\n    }\r\n\r\n    let openSctp;\r\n\r\n    switch (this.options.conference.openBridgeChannel) {\r\n    case 'datachannel':\r\n    case true:\r\n    case undefined:\r\n        openSctp = true;\r\n        break;\r\n    case 'websocket':\r\n        openSctp = false;\r\n        break;\r\n    }\r\n\r\n    elem.c(\r\n        'property', {\r\n            name: 'openSctp',\r\n            value: openSctp\r\n        }).up();\r\n\r\n    if (config.opusMaxAverageBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'opusMaxAverageBitrate',\r\n                value: config.opusMaxAverageBitrate\r\n            }).up();\r\n    }\r\n    if (this.options.conference.startAudioMuted !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startAudioMuted',\r\n                value: this.options.conference.startAudioMuted\r\n            }).up();\r\n    }\r\n    if (this.options.conference.startVideoMuted !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startVideoMuted',\r\n                value: this.options.conference.startVideoMuted\r\n            }).up();\r\n    }\r\n    if (this.options.conference.stereo !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'stereo',\r\n                value: this.options.conference.stereo\r\n            }).up();\r\n    }\r\n    if (this.options.conference.useRoomAsSharedDocumentName !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'useRoomAsSharedDocumentName',\r\n                value: this.options.conference.useRoomAsSharedDocumentName\r\n            }).up();\r\n    }\r\n    elem.up();\r\n\r\n    return elem;\r\n};\r\n\r\n\r\nModerator.prototype.parseSessionId = function(resultIq) {\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    const sessionId = $(resultIq).find('conference').attr('session-id');\r\n\r\n    if (sessionId) {\r\n        logger.info(`Received sessionId:  ${sessionId}`);\r\n        Settings.sessionId = sessionId;\r\n    }\r\n};\r\n\r\nModerator.prototype.parseConfigOptions = function(resultIq) {\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\r\n\r\n    const authenticationEnabled\r\n        = $(resultIq).find(\r\n            '>conference>property'\r\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\r\n\r\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\r\n\r\n    this.externalAuthEnabled = $(resultIq).find(\r\n        '>conference>property'\r\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\r\n\r\n    logger.info(\r\n        `External authentication enabled: ${this.externalAuthEnabled}`);\r\n\r\n    if (!this.externalAuthEnabled) {\r\n        // We expect to receive sessionId in 'internal' authentication mode\r\n        this.parseSessionId(resultIq);\r\n    }\r\n\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\r\n\r\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\r\n        authenticationEnabled, authIdentity);\r\n\r\n    // Check if focus has auto-detected Jigasi component(this will be also\r\n    // included if we have passed our host from the config)\r\n    if ($(resultIq).find(\r\n        '>conference>property'\r\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\r\n        this.sipGatewayEnabled = true;\r\n    }\r\n\r\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\r\n};\r\n\r\n// FIXME We need to show the fact that we're waiting for the focus to the user\r\n// (or that the focus is not available)\r\n/**\r\n * Allocates the conference focus.\r\n *\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\r\n * rejected and it'll keep on pinging Jicofo forever.\r\n */\r\nModerator.prototype.allocateConferenceFocus = function() {\r\n    return new Promise(resolve => {\r\n        // Try to use focus user JID from the config\r\n        this.setFocusUserJid(this.options.connection.focusUserJid);\r\n\r\n        // Send create conference IQ\r\n        this.connection.sendIQ(\r\n            this.createConferenceIq(),\r\n            result => this._allocateConferenceFocusSuccess(result, resolve),\r\n            error => this._allocateConferenceFocusError(error, resolve));\r\n\r\n        // XXX We're pressed for time here because we're beginning a complex\r\n        // and/or lengthy conference-establishment process which supposedly\r\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\r\n        // decide to send our IQ.\r\n        this.connection.flush();\r\n    });\r\n};\r\n\r\n/**\r\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\r\n * error result.\r\n *\r\n * @param error - the error result of the request that\r\n * {@link #allocateConferenceFocus} sent\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n */\r\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\r\n    // If the session is invalid, remove and try again without session ID to get\r\n    // a new one\r\n    const invalidSession\r\n        = $(error).find('>error>session-invalid').length\r\n            || $(error).find('>error>not-acceptable').length;\r\n\r\n    if (invalidSession) {\r\n        logger.info('Session expired! - removing');\r\n        Settings.sessionId = undefined;\r\n    }\r\n    if ($(error).find('>error>graceful-shutdown').length) {\r\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\r\n\r\n        return;\r\n    }\r\n\r\n    // Check for error returned by the reservation system\r\n    const reservationErr = $(error).find('>error>reservation-error');\r\n\r\n    if (reservationErr.length) {\r\n        // Trigger error event\r\n        const errorCode = reservationErr.attr('error-code');\r\n        const errorTextNode = $(error).find('>error>text');\r\n        let errorMsg;\r\n\r\n        if (errorTextNode) {\r\n            errorMsg = errorTextNode.text();\r\n        }\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.RESERVATION_ERROR,\r\n            errorCode,\r\n            errorMsg);\r\n\r\n        return;\r\n    }\r\n\r\n    // Not authorized to create new room\r\n    if ($(error).find('>error>not-authorized').length) {\r\n        logger.warn('Unauthorized to start the conference', error);\r\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\r\n\r\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\r\n            // FIXME \"is external\" should come either from the focus or\r\n            // config.js\r\n            this.externalAuthEnabled = true;\r\n        }\r\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\r\n\r\n        return;\r\n    }\r\n    const waitMs = this.getNextErrorTimeout();\r\n    const errmsg = `Focus error, retry after ${waitMs}`;\r\n\r\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n    logger.error(errmsg, error);\r\n\r\n    // Show message\r\n    const focusComponent = this.getFocusComponent();\r\n    const retrySec = waitMs / 1000;\r\n\r\n    // FIXME: message is duplicated ? Do not show in case of session invalid\r\n    // which means just a retry\r\n\r\n    if (!invalidSession) {\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.FOCUS_DISCONNECTED,\r\n            focusComponent,\r\n            retrySec);\r\n    }\r\n\r\n    // Reset response timeout\r\n    this.getNextTimeout(true);\r\n    window.setTimeout(\r\n        () => this.allocateConferenceFocus().then(callback),\r\n        waitMs);\r\n};\r\n\r\n/**\r\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\r\n * success (i.e. non-error) result.\r\n *\r\n * @param result - the success (i.e. non-error) result of the request that\r\n * {@link #allocateConferenceFocus} sent\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n */\r\nModerator.prototype._allocateConferenceFocusSuccess = function(\r\n        result,\r\n        callback) {\r\n    // Setup config options\r\n    this.parseConfigOptions(result);\r\n\r\n    // Reset the error timeout (because we haven't failed here).\r\n    this.getNextErrorTimeout(true);\r\n\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    if ($(result).find('conference').attr('ready') === 'true') {\r\n        // Reset the non-error timeout (because we've succeeded here).\r\n        this.getNextTimeout(true);\r\n\r\n        // Exec callback\r\n        callback();\r\n    } else {\r\n        const waitMs = this.getNextTimeout();\r\n\r\n        logger.info(`Waiting for the focus... ${waitMs}`);\r\n        window.setTimeout(\r\n            () => this.allocateConferenceFocus().then(callback),\r\n            waitMs);\r\n    }\r\n};\r\n\r\nModerator.prototype.authenticate = function() {\r\n    return new Promise((resolve, reject) => {\r\n        this.connection.sendIQ(\r\n            this.createConferenceIq(),\r\n            result => {\r\n                this.parseSessionId(result);\r\n                resolve();\r\n            },\r\n            errorIq => reject({\r\n                error: $(errorIq).find('iq>error :first')\r\n                    .prop('tagName'),\r\n                message: $(errorIq).find('iq>error>text')\r\n                    .text()\r\n            })\r\n        );\r\n    });\r\n};\r\n\r\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\r\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\r\n};\r\n\r\n/**\r\n *\r\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\r\n * {@link Moderator#getPopupLoginUrl}\r\n * @param urlCb\r\n * @param failureCb\r\n */\r\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\r\n    const iq = $iq({ to: this.getFocusComponent(),\r\n        type: 'get' });\r\n    const attrs = {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        room: this.roomName,\r\n        'machine-uid': Settings.machineId\r\n    };\r\n    let str = 'auth url'; // for logger\r\n\r\n    if (popup) {\r\n        attrs.popup = true;\r\n        str = `POPUP ${str}`;\r\n    }\r\n    iq.c('login-url', attrs);\r\n\r\n    /**\r\n     * Implements a failure callback which reports an error message and an error\r\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\r\n     *\r\n     * @param {string} errmsg the error messsage to report\r\n     * @param {*} error the error to report (in addition to errmsg)\r\n     */\r\n    function reportError(errmsg, err) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n        logger.error(errmsg, err);\r\n        failureCb(err);\r\n    }\r\n    this.connection.sendIQ(\r\n        iq,\r\n        result => {\r\n            // eslint-disable-next-line newline-per-chained-call\r\n            let url = $(result).find('login-url').attr('url');\r\n\r\n            url = decodeURIComponent(url);\r\n            if (url) {\r\n                logger.info(`Got ${str}: ${url}`);\r\n                urlCb(url);\r\n            } else {\r\n                reportError(`Failed to get ${str} from the focus`, result);\r\n            }\r\n        },\r\n        reportError.bind(undefined, `Get ${str} error`)\r\n    );\r\n};\r\n\r\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\r\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\r\n};\r\n\r\nModerator.prototype.logout = function(callback) {\r\n    const iq = $iq({ to: this.getFocusComponent(),\r\n        type: 'set' });\r\n    const { sessionId } = Settings;\r\n\r\n    if (!sessionId) {\r\n        callback();\r\n\r\n        return;\r\n    }\r\n    iq.c('logout', {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        'session-id': sessionId\r\n    });\r\n    this.connection.sendIQ(\r\n        iq,\r\n        result => {\r\n            // eslint-disable-next-line newline-per-chained-call\r\n            let logoutUrl = $(result).find('logout').attr('logout-url');\r\n\r\n            if (logoutUrl) {\r\n                logoutUrl = decodeURIComponent(logoutUrl);\r\n            }\r\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\r\n            Settings.sessionId = undefined;\r\n            callback(logoutUrl);\r\n        },\r\n        error => {\r\n            const errmsg = 'Logout error';\r\n\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n            logger.error(errmsg, error);\r\n        }\r\n    );\r\n};\r\n","const RandomUtil = require('./RandomUtil');\r\n\r\n/**\r\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\r\n * MIT License\r\n * http://github.com/marak/faker.js/\r\n *\r\n * @const\r\n */\r\nconst names = [\r\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\r\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\r\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\r\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\r\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\r\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\r\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\r\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\r\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\r\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\r\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\r\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\r\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\r\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\r\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\r\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\r\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\r\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\r\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\r\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\r\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\r\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\r\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\r\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\r\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\r\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\r\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\r\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\r\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\r\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\r\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\r\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\r\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\r\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\r\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\r\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\r\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\r\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\r\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\r\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\r\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\r\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\r\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\r\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\r\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\r\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\r\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\r\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\r\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\r\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\r\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\r\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\r\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\r\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\r\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\r\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\r\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\r\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\r\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\r\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\r\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\r\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\r\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\r\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\r\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\r\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\r\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\r\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\r\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\r\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\r\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\r\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\r\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\r\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\r\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\r\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\r\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\r\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\r\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\r\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\r\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\r\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\r\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\r\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\r\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\r\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\r\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\r\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\r\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\r\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\r\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\r\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\r\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\r\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\r\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\r\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\r\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\r\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\r\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\r\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\r\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\r\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\r\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\r\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\r\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\r\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\r\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\r\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\r\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\r\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\r\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\r\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\r\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\r\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\r\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\r\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\r\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\r\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\r\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\r\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\r\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\r\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\r\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\r\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\r\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\r\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\r\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\r\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\r\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\r\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\r\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\r\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\r\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\r\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\r\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\r\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\r\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\r\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\r\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\r\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\r\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\r\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\r\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\r\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\r\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\r\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\r\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\r\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\r\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\r\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\r\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\r\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\r\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\r\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\r\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\r\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\r\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\r\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\r\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\r\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\r\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\r\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\r\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\r\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\r\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\r\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\r\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\r\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\r\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\r\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\r\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\r\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\r\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\r\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\r\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\r\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\r\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\r\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\r\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\r\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\r\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\r\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\r\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\r\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\r\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\r\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\r\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\r\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\r\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\r\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\r\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\r\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\r\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\r\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\r\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\r\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\r\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\r\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\r\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\r\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\r\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\r\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\r\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\r\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\r\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\r\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\r\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\r\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\r\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\r\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\r\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\r\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\r\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\r\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\r\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\r\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\r\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\r\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\r\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\r\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\r\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\r\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\r\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\r\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\r\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\r\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\r\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\r\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\r\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\r\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\r\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\r\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\r\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\r\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\r\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\r\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\r\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\r\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\r\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\r\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\r\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\r\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\r\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\r\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\r\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\r\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\r\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\r\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\r\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\r\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\r\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\r\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\r\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\r\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\r\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\r\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\r\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\r\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\r\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\r\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\r\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\r\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\r\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\r\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\r\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\r\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\r\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\r\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\r\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\r\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\r\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\r\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\r\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\r\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\r\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\r\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\r\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\r\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\r\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\r\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\r\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\r\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\r\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\r\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\r\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\r\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\r\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\r\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\r\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\r\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\r\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\r\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\r\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\r\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\r\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\r\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\r\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\r\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\r\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\r\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\r\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\r\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\r\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\r\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\r\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\r\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\r\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\r\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\r\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\r\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\r\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\r\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\r\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\r\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\r\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\r\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\r\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\r\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\r\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\r\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\r\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\r\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\r\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\r\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\r\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\r\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\r\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\r\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\r\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\r\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\r\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\r\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\r\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\r\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\r\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\r\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\r\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\r\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\r\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\r\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\r\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\r\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\r\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\r\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\r\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\r\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\r\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\r\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\r\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\r\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\r\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\r\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\r\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\r\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\r\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\r\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\r\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\r\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\r\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\r\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\r\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\r\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\r\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\r\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\r\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\r\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\r\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\r\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\r\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\r\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\r\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\r\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\r\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\r\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\r\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\r\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\r\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\r\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\r\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\r\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\r\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\r\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\r\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\r\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\r\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\r\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\r\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\r\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\r\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\r\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\r\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\r\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\r\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\r\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\r\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\r\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\r\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\r\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\r\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\r\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\r\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\r\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\r\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\r\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\r\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\r\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\r\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\r\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\r\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\r\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\r\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\r\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\r\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\r\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\r\n    'Zoila', 'Zola', 'Zora', 'Zula'\r\n];\r\n\r\n/**\r\n * Generate random username.\r\n * @returns {string} random username\r\n */\r\nfunction generateUsername() {\r\n    const name = RandomUtil.randomElement(names);\r\n    const suffix = RandomUtil.randomAlphanumStr(3);\r\n\r\n    return `${name}-${suffix}`;\r\n}\r\n\r\nmodule.exports = {\r\n    generateUsername\r\n};\r\n","/* global $, __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport {\r\n    ACTION_JINGLE_TR_RECEIVED,\r\n    ACTION_JINGLE_TR_SUCCESS,\r\n    createJingleEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\nimport JingleSessionPC from './JingleSessionPC';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// XXX Strophe is build around the idea of chaining function calls so allow long\r\n// function call chains.\r\n/* eslint-disable newline-per-chained-call */\r\n\r\n/**\r\n *\r\n */\r\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     * Creates new <tt>JingleConnectionPlugin</tt>\r\n     * @param {XMPP} xmpp\r\n     * @param {EventEmitter} eventEmitter\r\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\r\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\r\n     */\r\n    constructor(xmpp, eventEmitter, iceConfig) {\r\n        super();\r\n        this.xmpp = xmpp;\r\n        this.eventEmitter = eventEmitter;\r\n        this.sessions = {};\r\n        this.jvbIceConfig = iceConfig.jvb;\r\n        this.p2pIceConfig = iceConfig.p2p;\r\n        this.mediaConstraints = {\r\n            offerToReceiveAudio: true,\r\n            offerToReceiveVideo: true\r\n        };\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        this.connection.addHandler(this.onJingle.bind(this),\r\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param iq\r\n     */\r\n    onJingle(iq) {\r\n        const sid = $(iq).find('jingle').attr('sid');\r\n        const action = $(iq).find('jingle').attr('action');\r\n        const fromJid = iq.getAttribute('from');\r\n\r\n        // send ack first\r\n        const ack = $iq({ type: 'result',\r\n            to: fromJid,\r\n            id: iq.getAttribute('id')\r\n        });\r\n\r\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\r\n        let sess = this.sessions[sid];\r\n\r\n        if (action !== 'session-initiate') {\r\n            if (!sess) {\r\n                ack.attrs({ type: 'error' });\r\n                ack.c('error', { type: 'cancel' })\r\n                    .c('item-not-found', {\r\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                    })\r\n                    .up()\r\n                    .c('unknown-session', {\r\n                        xmlns: 'urn:xmpp:jingle:errors:1'\r\n                    });\r\n                logger.warn('invalid session id', iq);\r\n                this.connection.send(ack);\r\n\r\n                return true;\r\n            }\r\n\r\n            // local jid is not checked\r\n            if (fromJid !== sess.remoteJid) {\r\n                logger.warn(\r\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\r\n                ack.attrs({ type: 'error' });\r\n                ack.c('error', { type: 'cancel' })\r\n                    .c('item-not-found', {\r\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                    })\r\n                    .up()\r\n                    .c('unknown-session', {\r\n                        xmlns: 'urn:xmpp:jingle:errors:1'\r\n                    });\r\n                this.connection.send(ack);\r\n\r\n                return true;\r\n            }\r\n        } else if (sess !== undefined) {\r\n            // Existing session with same session id. This might be out-of-order\r\n            // if the sess.remoteJid is the same as from.\r\n            ack.attrs({ type: 'error' });\r\n            ack.c('error', { type: 'cancel' })\r\n                .c('service-unavailable', {\r\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                })\r\n                .up();\r\n            logger.warn('duplicate session id', sid, iq);\r\n            this.connection.send(ack);\r\n\r\n            return true;\r\n        }\r\n        const now = window.performance.now();\r\n\r\n        // FIXME that should work most of the time, but we'd have to\r\n        // think how secure it is to assume that user with \"focus\"\r\n        // nickname is Jicofo.\r\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\r\n\r\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\r\n\r\n        switch (action) {\r\n        case 'session-initiate': {\r\n            logger.log('(TIME) received session-initiate:\\t', now);\r\n            const startMuted = $(iq).find('jingle>startmuted');\r\n\r\n            if (startMuted && startMuted.length > 0) {\r\n                const audioMuted = startMuted.attr('audio');\r\n                const videoMuted = startMuted.attr('video');\r\n\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\r\n                    audioMuted === 'true',\r\n                    videoMuted === 'true');\r\n            }\r\n\r\n            logger.info(\r\n                `Marking session from ${fromJid\r\n                } as ${isP2P ? '' : '*not*'} P2P`);\r\n\r\n            const iceConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\r\n\r\n            sess\r\n                = new JingleSessionPC(\r\n                    $(iq).find('jingle').attr('sid'),\r\n                    $(iq).attr('to'),\r\n                    fromJid,\r\n                    this.connection,\r\n                    this.mediaConstraints,\r\n\r\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\r\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\r\n                    JSON.parse(JSON.stringify(iceConfig)),\r\n                    isP2P,\r\n                    /* initiator */ false);\r\n\r\n            this.sessions[sess.sid] = sess;\r\n\r\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\r\n                sess, $(iq).find('>jingle'), now);\r\n            break;\r\n        }\r\n        case 'session-accept': {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'content-modify': {\r\n            sess.modifyContents($(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'transport-info': {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'session-terminate': {\r\n            logger.log('terminating...', sess.sid);\r\n            let reasonCondition = null;\r\n            let reasonText = null;\r\n\r\n            if ($(iq).find('>jingle>reason').length) {\r\n                reasonCondition\r\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\r\n                reasonText = $(iq).find('>jingle>reason>text').text();\r\n            }\r\n            this.terminate(sess.sid, reasonCondition, reasonText);\r\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\r\n                sess, reasonCondition, reasonText);\r\n            break;\r\n        }\r\n        case 'transport-replace':\r\n            logger.info('(TIME) Start transport replace:\\t', now);\r\n            Statistics.sendAnalytics(createJingleEvent(\r\n                ACTION_JINGLE_TR_RECEIVED,\r\n                {\r\n                    p2p: isP2P,\r\n                    value: now\r\n                }));\r\n\r\n            sess.replaceTransport($(iq).find('>jingle'), () => {\r\n                const successTime = window.performance.now();\r\n\r\n                logger.info('(TIME) Transport replace success:\\t', successTime);\r\n                Statistics.sendAnalytics(createJingleEvent(\r\n                    ACTION_JINGLE_TR_SUCCESS,\r\n                    {\r\n                        p2p: isP2P,\r\n                        value: successTime\r\n                    }));\r\n            }, error => {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error('Transport replace failed', error);\r\n                sess.sendTransportReject();\r\n            });\r\n            break;\r\n        case 'addsource': // FIXME: proprietary, un-jingleish\r\n        case 'source-add': // FIXME: proprietary\r\n            sess.addRemoteStream($(iq).find('>jingle>content'));\r\n            break;\r\n        case 'removesource': // FIXME: proprietary, un-jingleish\r\n        case 'source-remove': // FIXME: proprietary\r\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\r\n            break;\r\n        default:\r\n            logger.warn('jingle action not implemented', action);\r\n            ack.attrs({ type: 'error' });\r\n            ack.c('error', { type: 'cancel' })\r\n                .c('bad-request',\r\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\r\n                .up();\r\n            break;\r\n        }\r\n        this.connection.send(ack);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\r\n     * connection, configured as 'initiator'.\r\n     * @param {string} me our JID\r\n     * @param {string} peer remote participant's JID\r\n     * @return {JingleSessionPC}\r\n     */\r\n    newP2PJingleSession(me, peer) {\r\n        const sess\r\n            = new JingleSessionPC(\r\n                RandomUtil.randomHexString(12),\r\n                me,\r\n                peer,\r\n                this.connection,\r\n                this.mediaConstraints,\r\n                this.p2pIceConfig,\r\n                /* P2P */ true,\r\n                /* initiator */ true);\r\n\r\n        this.sessions[sess.sid] = sess;\r\n\r\n        return sess;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param sid\r\n     * @param reasonCondition\r\n     * @param reasonText\r\n     */\r\n    terminate(sid, reasonCondition, reasonText) {\r\n        if (this.sessions.hasOwnProperty(sid)) {\r\n            if (this.sessions[sid].state !== 'ended') {\r\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\r\n            }\r\n            delete this.sessions[sid];\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getStunAndTurnCredentials() {\r\n        // get stun and turn configuration from server via xep-0215\r\n        // uses time-limited credentials as described in\r\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\r\n        //\r\n        // See https://modules.prosody.im/mod_turncredentials.html\r\n        // for a prosody module which implements this.\r\n        //\r\n        // Currently, this doesn't work with updateIce and therefore credentials\r\n        // with a long validity have to be fetched before creating the\r\n        // peerconnection.\r\n        // TODO: implement refresh via updateIce as described in\r\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\r\n        this.connection.sendIQ(\r\n            $iq({ type: 'get',\r\n                to: this.connection.domain })\r\n                .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\r\n            res => {\r\n                const iceservers = [];\r\n\r\n                $(res).find('>services>service').each((idx, el) => {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    el = $(el);\r\n                    const dict = {};\r\n                    const type = el.attr('type');\r\n\r\n                    switch (type) {\r\n                    case 'stun':\r\n                        dict.urls = `stun:${el.attr('host')}`;\r\n                        if (el.attr('port')) {\r\n                            dict.urls += `:${el.attr('port')}`;\r\n                        }\r\n                        iceservers.push(dict);\r\n                        break;\r\n                    case 'turn':\r\n                    case 'turns': {\r\n                        dict.urls = `${type}:`;\r\n                        const username = el.attr('username');\r\n\r\n                        // https://code.google.com/p/webrtc/issues/detail\r\n                        // ?id=1508\r\n\r\n                        if (username) {\r\n                            const match\r\n                                = navigator.userAgent.match(\r\n                                    /Chrom(e|ium)\\/([0-9]+)\\./);\r\n\r\n                            if (match && parseInt(match[2], 10) < 28) {\r\n                                dict.urls += `${username}@`;\r\n                            } else {\r\n                                // only works in M28\r\n                                dict.username = username;\r\n                            }\r\n                        }\r\n                        dict.urls += el.attr('host');\r\n                        const port = el.attr('port');\r\n\r\n                        if (port) {\r\n                            dict.urls += `:${el.attr('port')}`;\r\n                        }\r\n                        const transport = el.attr('transport');\r\n\r\n                        if (transport && transport !== 'udp') {\r\n                            dict.urls += `?transport=${transport}`;\r\n                        }\r\n\r\n                        dict.credential = el.attr('password')\r\n                                || dict.credential;\r\n                        iceservers.push(dict);\r\n                        break;\r\n                    }\r\n                    }\r\n                });\r\n\r\n                const options = this.xmpp.options;\r\n\r\n                // Shuffle ICEServers for loadbalancing\r\n                for (let i = iceservers.length - 1; i > 0; i--) {\r\n                    const j = Math.floor(Math.random() * (i + 1));\r\n                    const temp = iceservers[i];\r\n\r\n                    iceservers[i] = iceservers[j];\r\n                    iceservers[j] = temp;\r\n                }\r\n\r\n                let filter;\r\n\r\n                if (options.useTurnUdp) {\r\n                    filter = s => s.urls.startsWith('turn');\r\n                } else {\r\n                    // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\r\n                    filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\r\n                }\r\n\r\n                this.jvbIceConfig.iceServers = iceservers.filter(filter);\r\n                this.p2pIceConfig.iceServers = iceservers;\r\n            }, err => {\r\n                logger.warn('getting turn credentials failed', err);\r\n                logger.warn('is mod_turncredentials or similar installed?');\r\n            });\r\n\r\n        // implement push?\r\n    }\r\n\r\n    /**\r\n     * Returns the data saved in 'updateLog' in a format to be logged.\r\n     */\r\n    getLog() {\r\n        const data = {};\r\n\r\n        Object.keys(this.sessions).forEach(sid => {\r\n            const session = this.sessions[sid];\r\n            const pc = session.peerconnection;\r\n\r\n            if (pc && pc.updateLog) {\r\n                // FIXME: should probably be a .dump call\r\n                data[`jingle_${sid}`] = {\r\n                    updateLog: pc.updateLog,\r\n                    stats: pc.stats,\r\n                    url: window.location.href\r\n                };\r\n            }\r\n        });\r\n\r\n        return data;\r\n    }\r\n}\r\n\r\n/* eslint-enable newline-per-chained-call */\r\n","import async from 'async';\r\n\r\n/**\r\n * A queue for async task execution.\r\n */\r\nexport default class AsyncQueue {\r\n    /**\r\n     * Creates new instance.\r\n     */\r\n    constructor() {\r\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\r\n        this._stopped = false;\r\n    }\r\n\r\n    /**\r\n     * Removes any pending tasks from the queue.\r\n     */\r\n    clear() {\r\n        this._queue.kill();\r\n    }\r\n\r\n    /**\r\n     * Internal task processing implementation which makes things work.\r\n     */\r\n    _processQueueTasks(task, finishedCallback) {\r\n        task(finishedCallback);\r\n    }\r\n\r\n    /**\r\n     * The 'task' function will be given a callback it MUST call with either:\r\n     *  1) No arguments if it was successful or\r\n     *  2) An error argument if there was an error\r\n     * If the task wants to process the success or failure of the task, it\r\n     * should pass the {@code callback} to the push function, e.g.:\r\n     * queue.push(task, (err) => {\r\n     *     if (err) {\r\n     *         // error handling\r\n     *     } else {\r\n     *         // success handling\r\n     *     }\r\n     * });\r\n     *\r\n     * @param {function} task - The task to be executed. See the description above.\r\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\r\n     */\r\n    push(task, callback) {\r\n        if (this._stopped) {\r\n            callback && callback(new Error('The queue has been stopped'));\r\n\r\n            return;\r\n        }\r\n        this._queue.push(task, callback);\r\n    }\r\n\r\n    /**\r\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\r\n     * after the queue has been shutdown then the callback will be called with an error.\r\n     */\r\n    shutdown() {\r\n        this._stopped = true;\r\n    }\r\n}\r\n","/*!\r\n * async\r\n * https://github.com/caolan/async\r\n *\r\n * Copyright 2010-2014 Caolan McMahon\r\n * Released under the MIT license\r\n */\r\n/*jshint onevar: false, indent:4 */\r\n/*global setImmediate: false, setTimeout: false, console: false */\r\n(function () {\r\n\r\n    var async = {};\r\n\r\n    // global on the server, window in the browser\r\n    var root, previous_async;\r\n\r\n    root = this;\r\n    if (root != null) {\r\n      previous_async = root.async;\r\n    }\r\n\r\n    async.noConflict = function () {\r\n        root.async = previous_async;\r\n        return async;\r\n    };\r\n\r\n    function only_once(fn) {\r\n        var called = false;\r\n        return function() {\r\n            if (called) throw new Error(\"Callback was already called.\");\r\n            called = true;\r\n            fn.apply(root, arguments);\r\n        }\r\n    }\r\n\r\n    //// cross-browser compatiblity functions ////\r\n\r\n    var _toString = Object.prototype.toString;\r\n\r\n    var _isArray = Array.isArray || function (obj) {\r\n        return _toString.call(obj) === '[object Array]';\r\n    };\r\n\r\n    var _each = function (arr, iterator) {\r\n        if (arr.forEach) {\r\n            return arr.forEach(iterator);\r\n        }\r\n        for (var i = 0; i < arr.length; i += 1) {\r\n            iterator(arr[i], i, arr);\r\n        }\r\n    };\r\n\r\n    var _map = function (arr, iterator) {\r\n        if (arr.map) {\r\n            return arr.map(iterator);\r\n        }\r\n        var results = [];\r\n        _each(arr, function (x, i, a) {\r\n            results.push(iterator(x, i, a));\r\n        });\r\n        return results;\r\n    };\r\n\r\n    var _reduce = function (arr, iterator, memo) {\r\n        if (arr.reduce) {\r\n            return arr.reduce(iterator, memo);\r\n        }\r\n        _each(arr, function (x, i, a) {\r\n            memo = iterator(memo, x, i, a);\r\n        });\r\n        return memo;\r\n    };\r\n\r\n    var _keys = function (obj) {\r\n        if (Object.keys) {\r\n            return Object.keys(obj);\r\n        }\r\n        var keys = [];\r\n        for (var k in obj) {\r\n            if (obj.hasOwnProperty(k)) {\r\n                keys.push(k);\r\n            }\r\n        }\r\n        return keys;\r\n    };\r\n\r\n    //// exported async module functions ////\r\n\r\n    //// nextTick implementation with browser-compatible fallback ////\r\n    if (typeof process === 'undefined' || !(process.nextTick)) {\r\n        if (typeof setImmediate === 'function') {\r\n            async.nextTick = function (fn) {\r\n                // not a direct alias for IE10 compatibility\r\n                setImmediate(fn);\r\n            };\r\n            async.setImmediate = async.nextTick;\r\n        }\r\n        else {\r\n            async.nextTick = function (fn) {\r\n                setTimeout(fn, 0);\r\n            };\r\n            async.setImmediate = async.nextTick;\r\n        }\r\n    }\r\n    else {\r\n        async.nextTick = process.nextTick;\r\n        if (typeof setImmediate !== 'undefined') {\r\n            async.setImmediate = function (fn) {\r\n              // not a direct alias for IE10 compatibility\r\n              setImmediate(fn);\r\n            };\r\n        }\r\n        else {\r\n            async.setImmediate = async.nextTick;\r\n        }\r\n    }\r\n\r\n    async.each = function (arr, iterator, callback) {\r\n        callback = callback || function () {};\r\n        if (!arr.length) {\r\n            return callback();\r\n        }\r\n        var completed = 0;\r\n        _each(arr, function (x) {\r\n            iterator(x, only_once(done) );\r\n        });\r\n        function done(err) {\r\n          if (err) {\r\n              callback(err);\r\n              callback = function () {};\r\n          }\r\n          else {\r\n              completed += 1;\r\n              if (completed >= arr.length) {\r\n                  callback();\r\n              }\r\n          }\r\n        }\r\n    };\r\n    async.forEach = async.each;\r\n\r\n    async.eachSeries = function (arr, iterator, callback) {\r\n        callback = callback || function () {};\r\n        if (!arr.length) {\r\n            return callback();\r\n        }\r\n        var completed = 0;\r\n        var iterate = function () {\r\n            iterator(arr[completed], function (err) {\r\n                if (err) {\r\n                    callback(err);\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    completed += 1;\r\n                    if (completed >= arr.length) {\r\n                        callback();\r\n                    }\r\n                    else {\r\n                        iterate();\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        iterate();\r\n    };\r\n    async.forEachSeries = async.eachSeries;\r\n\r\n    async.eachLimit = function (arr, limit, iterator, callback) {\r\n        var fn = _eachLimit(limit);\r\n        fn.apply(null, [arr, iterator, callback]);\r\n    };\r\n    async.forEachLimit = async.eachLimit;\r\n\r\n    var _eachLimit = function (limit) {\r\n\r\n        return function (arr, iterator, callback) {\r\n            callback = callback || function () {};\r\n            if (!arr.length || limit <= 0) {\r\n                return callback();\r\n            }\r\n            var completed = 0;\r\n            var started = 0;\r\n            var running = 0;\r\n\r\n            (function replenish () {\r\n                if (completed >= arr.length) {\r\n                    return callback();\r\n                }\r\n\r\n                while (running < limit && started < arr.length) {\r\n                    started += 1;\r\n                    running += 1;\r\n                    iterator(arr[started - 1], function (err) {\r\n                        if (err) {\r\n                            callback(err);\r\n                            callback = function () {};\r\n                        }\r\n                        else {\r\n                            completed += 1;\r\n                            running -= 1;\r\n                            if (completed >= arr.length) {\r\n                                callback();\r\n                            }\r\n                            else {\r\n                                replenish();\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            })();\r\n        };\r\n    };\r\n\r\n\r\n    var doParallel = function (fn) {\r\n        return function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(null, [async.each].concat(args));\r\n        };\r\n    };\r\n    var doParallelLimit = function(limit, fn) {\r\n        return function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\r\n        };\r\n    };\r\n    var doSeries = function (fn) {\r\n        return function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(null, [async.eachSeries].concat(args));\r\n        };\r\n    };\r\n\r\n\r\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\r\n        arr = _map(arr, function (x, i) {\r\n            return {index: i, value: x};\r\n        });\r\n        if (!callback) {\r\n            eachfn(arr, function (x, callback) {\r\n                iterator(x.value, function (err) {\r\n                    callback(err);\r\n                });\r\n            });\r\n        } else {\r\n            var results = [];\r\n            eachfn(arr, function (x, callback) {\r\n                iterator(x.value, function (err, v) {\r\n                    results[x.index] = v;\r\n                    callback(err);\r\n                });\r\n            }, function (err) {\r\n                callback(err, results);\r\n            });\r\n        }\r\n    };\r\n    async.map = doParallel(_asyncMap);\r\n    async.mapSeries = doSeries(_asyncMap);\r\n    async.mapLimit = function (arr, limit, iterator, callback) {\r\n        return _mapLimit(limit)(arr, iterator, callback);\r\n    };\r\n\r\n    var _mapLimit = function(limit) {\r\n        return doParallelLimit(limit, _asyncMap);\r\n    };\r\n\r\n    // reduce only has a series version, as doing reduce in parallel won't\r\n    // work in many situations.\r\n    async.reduce = function (arr, memo, iterator, callback) {\r\n        async.eachSeries(arr, function (x, callback) {\r\n            iterator(memo, x, function (err, v) {\r\n                memo = v;\r\n                callback(err);\r\n            });\r\n        }, function (err) {\r\n            callback(err, memo);\r\n        });\r\n    };\r\n    // inject alias\r\n    async.inject = async.reduce;\r\n    // foldl alias\r\n    async.foldl = async.reduce;\r\n\r\n    async.reduceRight = function (arr, memo, iterator, callback) {\r\n        var reversed = _map(arr, function (x) {\r\n            return x;\r\n        }).reverse();\r\n        async.reduce(reversed, memo, iterator, callback);\r\n    };\r\n    // foldr alias\r\n    async.foldr = async.reduceRight;\r\n\r\n    var _filter = function (eachfn, arr, iterator, callback) {\r\n        var results = [];\r\n        arr = _map(arr, function (x, i) {\r\n            return {index: i, value: x};\r\n        });\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x.value, function (v) {\r\n                if (v) {\r\n                    results.push(x);\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            callback(_map(results.sort(function (a, b) {\r\n                return a.index - b.index;\r\n            }), function (x) {\r\n                return x.value;\r\n            }));\r\n        });\r\n    };\r\n    async.filter = doParallel(_filter);\r\n    async.filterSeries = doSeries(_filter);\r\n    // select alias\r\n    async.select = async.filter;\r\n    async.selectSeries = async.filterSeries;\r\n\r\n    var _reject = function (eachfn, arr, iterator, callback) {\r\n        var results = [];\r\n        arr = _map(arr, function (x, i) {\r\n            return {index: i, value: x};\r\n        });\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x.value, function (v) {\r\n                if (!v) {\r\n                    results.push(x);\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            callback(_map(results.sort(function (a, b) {\r\n                return a.index - b.index;\r\n            }), function (x) {\r\n                return x.value;\r\n            }));\r\n        });\r\n    };\r\n    async.reject = doParallel(_reject);\r\n    async.rejectSeries = doSeries(_reject);\r\n\r\n    var _detect = function (eachfn, arr, iterator, main_callback) {\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x, function (result) {\r\n                if (result) {\r\n                    main_callback(x);\r\n                    main_callback = function () {};\r\n                }\r\n                else {\r\n                    callback();\r\n                }\r\n            });\r\n        }, function (err) {\r\n            main_callback();\r\n        });\r\n    };\r\n    async.detect = doParallel(_detect);\r\n    async.detectSeries = doSeries(_detect);\r\n\r\n    async.some = function (arr, iterator, main_callback) {\r\n        async.each(arr, function (x, callback) {\r\n            iterator(x, function (v) {\r\n                if (v) {\r\n                    main_callback(true);\r\n                    main_callback = function () {};\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            main_callback(false);\r\n        });\r\n    };\r\n    // any alias\r\n    async.any = async.some;\r\n\r\n    async.every = function (arr, iterator, main_callback) {\r\n        async.each(arr, function (x, callback) {\r\n            iterator(x, function (v) {\r\n                if (!v) {\r\n                    main_callback(false);\r\n                    main_callback = function () {};\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            main_callback(true);\r\n        });\r\n    };\r\n    // all alias\r\n    async.all = async.every;\r\n\r\n    async.sortBy = function (arr, iterator, callback) {\r\n        async.map(arr, function (x, callback) {\r\n            iterator(x, function (err, criteria) {\r\n                if (err) {\r\n                    callback(err);\r\n                }\r\n                else {\r\n                    callback(null, {value: x, criteria: criteria});\r\n                }\r\n            });\r\n        }, function (err, results) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            else {\r\n                var fn = function (left, right) {\r\n                    var a = left.criteria, b = right.criteria;\r\n                    return a < b ? -1 : a > b ? 1 : 0;\r\n                };\r\n                callback(null, _map(results.sort(fn), function (x) {\r\n                    return x.value;\r\n                }));\r\n            }\r\n        });\r\n    };\r\n\r\n    async.auto = function (tasks, callback) {\r\n        callback = callback || function () {};\r\n        var keys = _keys(tasks);\r\n        var remainingTasks = keys.length\r\n        if (!remainingTasks) {\r\n            return callback();\r\n        }\r\n\r\n        var results = {};\r\n\r\n        var listeners = [];\r\n        var addListener = function (fn) {\r\n            listeners.unshift(fn);\r\n        };\r\n        var removeListener = function (fn) {\r\n            for (var i = 0; i < listeners.length; i += 1) {\r\n                if (listeners[i] === fn) {\r\n                    listeners.splice(i, 1);\r\n                    return;\r\n                }\r\n            }\r\n        };\r\n        var taskComplete = function () {\r\n            remainingTasks--\r\n            _each(listeners.slice(0), function (fn) {\r\n                fn();\r\n            });\r\n        };\r\n\r\n        addListener(function () {\r\n            if (!remainingTasks) {\r\n                var theCallback = callback;\r\n                // prevent final callback from calling itself if it errors\r\n                callback = function () {};\r\n\r\n                theCallback(null, results);\r\n            }\r\n        });\r\n\r\n        _each(keys, function (k) {\r\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\r\n            var taskCallback = function (err) {\r\n                var args = Array.prototype.slice.call(arguments, 1);\r\n                if (args.length <= 1) {\r\n                    args = args[0];\r\n                }\r\n                if (err) {\r\n                    var safeResults = {};\r\n                    _each(_keys(results), function(rkey) {\r\n                        safeResults[rkey] = results[rkey];\r\n                    });\r\n                    safeResults[k] = args;\r\n                    callback(err, safeResults);\r\n                    // stop subsequent errors hitting callback multiple times\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    results[k] = args;\r\n                    async.setImmediate(taskComplete);\r\n                }\r\n            };\r\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\r\n            var ready = function () {\r\n                return _reduce(requires, function (a, x) {\r\n                    return (a && results.hasOwnProperty(x));\r\n                }, true) && !results.hasOwnProperty(k);\r\n            };\r\n            if (ready()) {\r\n                task[task.length - 1](taskCallback, results);\r\n            }\r\n            else {\r\n                var listener = function () {\r\n                    if (ready()) {\r\n                        removeListener(listener);\r\n                        task[task.length - 1](taskCallback, results);\r\n                    }\r\n                };\r\n                addListener(listener);\r\n            }\r\n        });\r\n    };\r\n\r\n    async.retry = function(times, task, callback) {\r\n        var DEFAULT_TIMES = 5;\r\n        var attempts = [];\r\n        // Use defaults if times not passed\r\n        if (typeof times === 'function') {\r\n            callback = task;\r\n            task = times;\r\n            times = DEFAULT_TIMES;\r\n        }\r\n        // Make sure times is a number\r\n        times = parseInt(times, 10) || DEFAULT_TIMES;\r\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\r\n            var retryAttempt = function(task, finalAttempt) {\r\n                return function(seriesCallback) {\r\n                    task(function(err, result){\r\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\r\n                    }, wrappedResults);\r\n                };\r\n            };\r\n            while (times) {\r\n                attempts.push(retryAttempt(task, !(times-=1)));\r\n            }\r\n            async.series(attempts, function(done, data){\r\n                data = data[data.length - 1];\r\n                (wrappedCallback || callback)(data.err, data.result);\r\n            });\r\n        }\r\n        // If a callback is passed, run this as a controll flow\r\n        return callback ? wrappedTask() : wrappedTask\r\n    };\r\n\r\n    async.waterfall = function (tasks, callback) {\r\n        callback = callback || function () {};\r\n        if (!_isArray(tasks)) {\r\n          var err = new Error('First argument to waterfall must be an array of functions');\r\n          return callback(err);\r\n        }\r\n        if (!tasks.length) {\r\n            return callback();\r\n        }\r\n        var wrapIterator = function (iterator) {\r\n            return function (err) {\r\n                if (err) {\r\n                    callback.apply(null, arguments);\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    var args = Array.prototype.slice.call(arguments, 1);\r\n                    var next = iterator.next();\r\n                    if (next) {\r\n                        args.push(wrapIterator(next));\r\n                    }\r\n                    else {\r\n                        args.push(callback);\r\n                    }\r\n                    async.setImmediate(function () {\r\n                        iterator.apply(null, args);\r\n                    });\r\n                }\r\n            };\r\n        };\r\n        wrapIterator(async.iterator(tasks))();\r\n    };\r\n\r\n    var _parallel = function(eachfn, tasks, callback) {\r\n        callback = callback || function () {};\r\n        if (_isArray(tasks)) {\r\n            eachfn.map(tasks, function (fn, callback) {\r\n                if (fn) {\r\n                    fn(function (err) {\r\n                        var args = Array.prototype.slice.call(arguments, 1);\r\n                        if (args.length <= 1) {\r\n                            args = args[0];\r\n                        }\r\n                        callback.call(null, err, args);\r\n                    });\r\n                }\r\n            }, callback);\r\n        }\r\n        else {\r\n            var results = {};\r\n            eachfn.each(_keys(tasks), function (k, callback) {\r\n                tasks[k](function (err) {\r\n                    var args = Array.prototype.slice.call(arguments, 1);\r\n                    if (args.length <= 1) {\r\n                        args = args[0];\r\n                    }\r\n                    results[k] = args;\r\n                    callback(err);\r\n                });\r\n            }, function (err) {\r\n                callback(err, results);\r\n            });\r\n        }\r\n    };\r\n\r\n    async.parallel = function (tasks, callback) {\r\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\r\n    };\r\n\r\n    async.parallelLimit = function(tasks, limit, callback) {\r\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\r\n    };\r\n\r\n    async.series = function (tasks, callback) {\r\n        callback = callback || function () {};\r\n        if (_isArray(tasks)) {\r\n            async.mapSeries(tasks, function (fn, callback) {\r\n                if (fn) {\r\n                    fn(function (err) {\r\n                        var args = Array.prototype.slice.call(arguments, 1);\r\n                        if (args.length <= 1) {\r\n                            args = args[0];\r\n                        }\r\n                        callback.call(null, err, args);\r\n                    });\r\n                }\r\n            }, callback);\r\n        }\r\n        else {\r\n            var results = {};\r\n            async.eachSeries(_keys(tasks), function (k, callback) {\r\n                tasks[k](function (err) {\r\n                    var args = Array.prototype.slice.call(arguments, 1);\r\n                    if (args.length <= 1) {\r\n                        args = args[0];\r\n                    }\r\n                    results[k] = args;\r\n                    callback(err);\r\n                });\r\n            }, function (err) {\r\n                callback(err, results);\r\n            });\r\n        }\r\n    };\r\n\r\n    async.iterator = function (tasks) {\r\n        var makeCallback = function (index) {\r\n            var fn = function () {\r\n                if (tasks.length) {\r\n                    tasks[index].apply(null, arguments);\r\n                }\r\n                return fn.next();\r\n            };\r\n            fn.next = function () {\r\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\r\n            };\r\n            return fn;\r\n        };\r\n        return makeCallback(0);\r\n    };\r\n\r\n    async.apply = function (fn) {\r\n        var args = Array.prototype.slice.call(arguments, 1);\r\n        return function () {\r\n            return fn.apply(\r\n                null, args.concat(Array.prototype.slice.call(arguments))\r\n            );\r\n        };\r\n    };\r\n\r\n    var _concat = function (eachfn, arr, fn, callback) {\r\n        var r = [];\r\n        eachfn(arr, function (x, cb) {\r\n            fn(x, function (err, y) {\r\n                r = r.concat(y || []);\r\n                cb(err);\r\n            });\r\n        }, function (err) {\r\n            callback(err, r);\r\n        });\r\n    };\r\n    async.concat = doParallel(_concat);\r\n    async.concatSeries = doSeries(_concat);\r\n\r\n    async.whilst = function (test, iterator, callback) {\r\n        if (test()) {\r\n            iterator(function (err) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                async.whilst(test, iterator, callback);\r\n            });\r\n        }\r\n        else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    async.doWhilst = function (iterator, test, callback) {\r\n        iterator(function (err) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            var args = Array.prototype.slice.call(arguments, 1);\r\n            if (test.apply(null, args)) {\r\n                async.doWhilst(iterator, test, callback);\r\n            }\r\n            else {\r\n                callback();\r\n            }\r\n        });\r\n    };\r\n\r\n    async.until = function (test, iterator, callback) {\r\n        if (!test()) {\r\n            iterator(function (err) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                async.until(test, iterator, callback);\r\n            });\r\n        }\r\n        else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    async.doUntil = function (iterator, test, callback) {\r\n        iterator(function (err) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            var args = Array.prototype.slice.call(arguments, 1);\r\n            if (!test.apply(null, args)) {\r\n                async.doUntil(iterator, test, callback);\r\n            }\r\n            else {\r\n                callback();\r\n            }\r\n        });\r\n    };\r\n\r\n    async.queue = function (worker, concurrency) {\r\n        if (concurrency === undefined) {\r\n            concurrency = 1;\r\n        }\r\n        function _insert(q, data, pos, callback) {\r\n          if (!q.started){\r\n            q.started = true;\r\n          }\r\n          if (!_isArray(data)) {\r\n              data = [data];\r\n          }\r\n          if(data.length == 0) {\r\n             // call drain immediately if there are no tasks\r\n             return async.setImmediate(function() {\r\n                 if (q.drain) {\r\n                     q.drain();\r\n                 }\r\n             });\r\n          }\r\n          _each(data, function(task) {\r\n              var item = {\r\n                  data: task,\r\n                  callback: typeof callback === 'function' ? callback : null\r\n              };\r\n\r\n              if (pos) {\r\n                q.tasks.unshift(item);\r\n              } else {\r\n                q.tasks.push(item);\r\n              }\r\n\r\n              if (q.saturated && q.tasks.length === q.concurrency) {\r\n                  q.saturated();\r\n              }\r\n              async.setImmediate(q.process);\r\n          });\r\n        }\r\n\r\n        var workers = 0;\r\n        var q = {\r\n            tasks: [],\r\n            concurrency: concurrency,\r\n            saturated: null,\r\n            empty: null,\r\n            drain: null,\r\n            started: false,\r\n            paused: false,\r\n            push: function (data, callback) {\r\n              _insert(q, data, false, callback);\r\n            },\r\n            kill: function () {\r\n              q.drain = null;\r\n              q.tasks = [];\r\n            },\r\n            unshift: function (data, callback) {\r\n              _insert(q, data, true, callback);\r\n            },\r\n            process: function () {\r\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\r\n                    var task = q.tasks.shift();\r\n                    if (q.empty && q.tasks.length === 0) {\r\n                        q.empty();\r\n                    }\r\n                    workers += 1;\r\n                    var next = function () {\r\n                        workers -= 1;\r\n                        if (task.callback) {\r\n                            task.callback.apply(task, arguments);\r\n                        }\r\n                        if (q.drain && q.tasks.length + workers === 0) {\r\n                            q.drain();\r\n                        }\r\n                        q.process();\r\n                    };\r\n                    var cb = only_once(next);\r\n                    worker(task.data, cb);\r\n                }\r\n            },\r\n            length: function () {\r\n                return q.tasks.length;\r\n            },\r\n            running: function () {\r\n                return workers;\r\n            },\r\n            idle: function() {\r\n                return q.tasks.length + workers === 0;\r\n            },\r\n            pause: function () {\r\n                if (q.paused === true) { return; }\r\n                q.paused = true;\r\n                q.process();\r\n            },\r\n            resume: function () {\r\n                if (q.paused === false) { return; }\r\n                q.paused = false;\r\n                q.process();\r\n            }\r\n        };\r\n        return q;\r\n    };\r\n    \r\n    async.priorityQueue = function (worker, concurrency) {\r\n        \r\n        function _compareTasks(a, b){\r\n          return a.priority - b.priority;\r\n        };\r\n        \r\n        function _binarySearch(sequence, item, compare) {\r\n          var beg = -1,\r\n              end = sequence.length - 1;\r\n          while (beg < end) {\r\n            var mid = beg + ((end - beg + 1) >>> 1);\r\n            if (compare(item, sequence[mid]) >= 0) {\r\n              beg = mid;\r\n            } else {\r\n              end = mid - 1;\r\n            }\r\n          }\r\n          return beg;\r\n        }\r\n        \r\n        function _insert(q, data, priority, callback) {\r\n          if (!q.started){\r\n            q.started = true;\r\n          }\r\n          if (!_isArray(data)) {\r\n              data = [data];\r\n          }\r\n          if(data.length == 0) {\r\n             // call drain immediately if there are no tasks\r\n             return async.setImmediate(function() {\r\n                 if (q.drain) {\r\n                     q.drain();\r\n                 }\r\n             });\r\n          }\r\n          _each(data, function(task) {\r\n              var item = {\r\n                  data: task,\r\n                  priority: priority,\r\n                  callback: typeof callback === 'function' ? callback : null\r\n              };\r\n              \r\n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\r\n\r\n              if (q.saturated && q.tasks.length === q.concurrency) {\r\n                  q.saturated();\r\n              }\r\n              async.setImmediate(q.process);\r\n          });\r\n        }\r\n        \r\n        // Start with a normal queue\r\n        var q = async.queue(worker, concurrency);\r\n        \r\n        // Override push to accept second parameter representing priority\r\n        q.push = function (data, priority, callback) {\r\n          _insert(q, data, priority, callback);\r\n        };\r\n        \r\n        // Remove unshift function\r\n        delete q.unshift;\r\n\r\n        return q;\r\n    };\r\n\r\n    async.cargo = function (worker, payload) {\r\n        var working     = false,\r\n            tasks       = [];\r\n\r\n        var cargo = {\r\n            tasks: tasks,\r\n            payload: payload,\r\n            saturated: null,\r\n            empty: null,\r\n            drain: null,\r\n            drained: true,\r\n            push: function (data, callback) {\r\n                if (!_isArray(data)) {\r\n                    data = [data];\r\n                }\r\n                _each(data, function(task) {\r\n                    tasks.push({\r\n                        data: task,\r\n                        callback: typeof callback === 'function' ? callback : null\r\n                    });\r\n                    cargo.drained = false;\r\n                    if (cargo.saturated && tasks.length === payload) {\r\n                        cargo.saturated();\r\n                    }\r\n                });\r\n                async.setImmediate(cargo.process);\r\n            },\r\n            process: function process() {\r\n                if (working) return;\r\n                if (tasks.length === 0) {\r\n                    if(cargo.drain && !cargo.drained) cargo.drain();\r\n                    cargo.drained = true;\r\n                    return;\r\n                }\r\n\r\n                var ts = typeof payload === 'number'\r\n                            ? tasks.splice(0, payload)\r\n                            : tasks.splice(0, tasks.length);\r\n\r\n                var ds = _map(ts, function (task) {\r\n                    return task.data;\r\n                });\r\n\r\n                if(cargo.empty) cargo.empty();\r\n                working = true;\r\n                worker(ds, function () {\r\n                    working = false;\r\n\r\n                    var args = arguments;\r\n                    _each(ts, function (data) {\r\n                        if (data.callback) {\r\n                            data.callback.apply(null, args);\r\n                        }\r\n                    });\r\n\r\n                    process();\r\n                });\r\n            },\r\n            length: function () {\r\n                return tasks.length;\r\n            },\r\n            running: function () {\r\n                return working;\r\n            }\r\n        };\r\n        return cargo;\r\n    };\r\n\r\n    var _console_fn = function (name) {\r\n        return function (fn) {\r\n            var args = Array.prototype.slice.call(arguments, 1);\r\n            fn.apply(null, args.concat([function (err) {\r\n                var args = Array.prototype.slice.call(arguments, 1);\r\n                if (typeof console !== 'undefined') {\r\n                    if (err) {\r\n                        if (console.error) {\r\n                            console.error(err);\r\n                        }\r\n                    }\r\n                    else if (console[name]) {\r\n                        _each(args, function (x) {\r\n                            console[name](x);\r\n                        });\r\n                    }\r\n                }\r\n            }]));\r\n        };\r\n    };\r\n    async.log = _console_fn('log');\r\n    async.dir = _console_fn('dir');\r\n    /*async.info = _console_fn('info');\r\n    async.warn = _console_fn('warn');\r\n    async.error = _console_fn('error');*/\r\n\r\n    async.memoize = function (fn, hasher) {\r\n        var memo = {};\r\n        var queues = {};\r\n        hasher = hasher || function (x) {\r\n            return x;\r\n        };\r\n        var memoized = function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var callback = args.pop();\r\n            var key = hasher.apply(null, args);\r\n            if (key in memo) {\r\n                async.nextTick(function () {\r\n                    callback.apply(null, memo[key]);\r\n                });\r\n            }\r\n            else if (key in queues) {\r\n                queues[key].push(callback);\r\n            }\r\n            else {\r\n                queues[key] = [callback];\r\n                fn.apply(null, args.concat([function () {\r\n                    memo[key] = arguments;\r\n                    var q = queues[key];\r\n                    delete queues[key];\r\n                    for (var i = 0, l = q.length; i < l; i++) {\r\n                      q[i].apply(null, arguments);\r\n                    }\r\n                }]));\r\n            }\r\n        };\r\n        memoized.memo = memo;\r\n        memoized.unmemoized = fn;\r\n        return memoized;\r\n    };\r\n\r\n    async.unmemoize = function (fn) {\r\n      return function () {\r\n        return (fn.unmemoized || fn).apply(null, arguments);\r\n      };\r\n    };\r\n\r\n    async.times = function (count, iterator, callback) {\r\n        var counter = [];\r\n        for (var i = 0; i < count; i++) {\r\n            counter.push(i);\r\n        }\r\n        return async.map(counter, iterator, callback);\r\n    };\r\n\r\n    async.timesSeries = function (count, iterator, callback) {\r\n        var counter = [];\r\n        for (var i = 0; i < count; i++) {\r\n            counter.push(i);\r\n        }\r\n        return async.mapSeries(counter, iterator, callback);\r\n    };\r\n\r\n    async.seq = function (/* functions... */) {\r\n        var fns = arguments;\r\n        return function () {\r\n            var that = this;\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var callback = args.pop();\r\n            async.reduce(fns, args, function (newargs, fn, cb) {\r\n                fn.apply(that, newargs.concat([function () {\r\n                    var err = arguments[0];\r\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\r\n                    cb(err, nextargs);\r\n                }]))\r\n            },\r\n            function (err, results) {\r\n                callback.apply(that, [err].concat(results));\r\n            });\r\n        };\r\n    };\r\n\r\n    async.compose = function (/* functions... */) {\r\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\r\n    };\r\n\r\n    var _applyEach = function (eachfn, fns /*args...*/) {\r\n        var go = function () {\r\n            var that = this;\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var callback = args.pop();\r\n            return eachfn(fns, function (fn, cb) {\r\n                fn.apply(that, args.concat([cb]));\r\n            },\r\n            callback);\r\n        };\r\n        if (arguments.length > 2) {\r\n            var args = Array.prototype.slice.call(arguments, 2);\r\n            return go.apply(this, args);\r\n        }\r\n        else {\r\n            return go;\r\n        }\r\n    };\r\n    async.applyEach = doParallel(_applyEach);\r\n    async.applyEachSeries = doSeries(_applyEach);\r\n\r\n    async.forever = function (fn, callback) {\r\n        function next(err) {\r\n            if (err) {\r\n                if (callback) {\r\n                    return callback(err);\r\n                }\r\n                throw err;\r\n            }\r\n            fn(next);\r\n        }\r\n        next();\r\n    };\r\n\r\n    // Node.js\r\n    if (typeof module !== 'undefined' && module.exports) {\r\n        module.exports = async;\r\n    }\r\n    // AMD / RequireJS\r\n    else if (typeof define !== 'undefined' && define.amd) {\r\n        define([], function () {\r\n            return async;\r\n        });\r\n    }\r\n    // included directly via <script> tag\r\n    else {\r\n        root.async = async;\r\n    }\r\n\r\n}());\r\n","/**\r\n * Implements a simple hash code for a string (see\r\n * https://en.wikipedia.org/wiki/Java_hashCode()).\r\n *\r\n * @param {string} The string to return a hash of.\r\n * @return {Number} the integer hash code of the string.\r\n */\r\nfunction integerHash(string) {\r\n    if (!string) {\r\n        return 0;\r\n    }\r\n\r\n    let char, hash = 0, i;\r\n\r\n    for (i = 0; i < string.length; i++) {\r\n        char = string.charCodeAt(i);\r\n        hash += char * Math.pow(31, string.length - 1 - i);\r\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\r\n    }\r\n\r\n    return hash;\r\n}\r\n\r\nmodule.exports = { integerHash };\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport * as JingleSessionState from './JingleSessionState';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * JingleSession provides an API to manage a single Jingle session. We will\r\n * have different implementations depending on the underlying interface used\r\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\r\n */\r\nexport default class JingleSession extends Listenable {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>JingleSession</tt>.\r\n     * @param {string} sid the Jingle session identifier\r\n     * @param {string} localJid our JID\r\n     * @param {string} remoteJid the JID of the remote peer\r\n     * @param {XmppConnection} connection the XMPP connection\r\n     * @param {Object} mediaConstraints the media constraints object passed to\r\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\r\n     * @param {Object} iceConfig the ICE servers config object as defined by\r\n     * the WebRTC. Passed to the PeerConnection's constructor.\r\n     * @param {boolean} isInitiator indicates if it will be the side which\r\n     * initiates the session.\r\n     */\r\n    constructor(\r\n            sid,\r\n            localJid,\r\n            remoteJid,\r\n            connection,\r\n            mediaConstraints,\r\n            iceConfig,\r\n            isInitiator) {\r\n        super();\r\n        this.sid = sid;\r\n        this.localJid = localJid;\r\n        this.remoteJid = remoteJid;\r\n        this.connection = connection;\r\n        this.mediaConstraints = mediaConstraints;\r\n        this.iceConfig = iceConfig;\r\n\r\n        /**\r\n         * Indicates whether this instance is an initiator or an answerer of\r\n         * the Jingle session.\r\n         * @type {boolean}\r\n         */\r\n        this.isInitiator = isInitiator;\r\n\r\n        /**\r\n         * Whether to use dripping or not. Dripping is sending trickle\r\n         * candidates not one-by-one.\r\n         */\r\n        this.usedrip = true;\r\n\r\n        /**\r\n         *  When dripping is used, stores ICE candidates which are to be sent.\r\n         */\r\n        this.dripContainer = [];\r\n\r\n        /**\r\n         * The chat room instance associated with the session.\r\n         * @type {ChatRoom}\r\n         */\r\n        this.room = null;\r\n\r\n        this._signalingLayer = null;\r\n\r\n        /**\r\n         * Jingle session state - uninitialized until {@link initialize} is\r\n         * called @type {JingleSessionState}\r\n         */\r\n        this.state = null;\r\n\r\n        /**\r\n         * The RTC service instance\r\n         * @type {RTC}\r\n         */\r\n        this.rtc = null;\r\n    }\r\n\r\n    /**\r\n     * Returns XMPP address of this session's initiator.\r\n     * @return {string}\r\n     */\r\n    get initiatorJid() {\r\n        return this.isInitiator ? this.localJid : this.remoteJid;\r\n    }\r\n\r\n    /**\r\n     * Returns XMPP address of this session's responder.\r\n     * @return {string}\r\n     */\r\n    get responderJid() {\r\n        return this.isInitiator ? this.remoteJid : this.localJid;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Prepares this object to initiate a session.\r\n     * @param {ChatRoom} room the chat room for the conference associated with\r\n     * this session\r\n     * @param {RTC} rtc the RTC service instance\r\n     * @param {object} options - the options, see implementing class's\r\n     * {@link #doInitialize} description for more details.\r\n     */\r\n    initialize(room, rtc, signalingLayer, options) {\r\n        if (this.state !== null) {\r\n            const errmsg\r\n                = `attempt to initiate on session ${this.sid}\r\n                   in state ${this.state}`;\r\n\r\n            logger.error(errmsg);\r\n            throw new Error(errmsg);\r\n        }\r\n        this.room = room;\r\n        this.rtc = rtc;\r\n        this._signalingLayer = signalingLayer;\r\n        this.state = JingleSessionState.PENDING;\r\n        this.doInitialize(options);\r\n    }\r\n\r\n    /**\r\n     * The implementing class finishes initialization here. Called at the end of\r\n     * {@link initialize}.\r\n     * @param {Object} options - The options specific to the implementing class.\r\n     * @protected\r\n     */\r\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\r\n\r\n    /* eslint-disable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Adds the ICE candidates found in the 'contents' array as remote\r\n     * candidates?\r\n     * Note: currently only used on transport-info\r\n     *\r\n     * @param contents\r\n     */\r\n    addIceCandidates(contents) {}\r\n\r\n    /* eslint-enable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Returns current state of this <tt>JingleSession</tt> instance.\r\n     * @returns {JingleSessionState} the current state of this session instance.\r\n     */\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    /* eslint-disable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Handles an 'add-source' event.\r\n     *\r\n     * @param contents an array of Jingle 'content' elements.\r\n     */\r\n    addSources(contents) {}\r\n\r\n    /**\r\n     * Handles a 'remove-source' event.\r\n     *\r\n     * @param contents an array of Jingle 'content' elements.\r\n     */\r\n    removeSources(contents) {}\r\n\r\n    /**\r\n     * Terminates this Jingle session by sending session-terminate\r\n     * @param success a callback called once the 'session-terminate' packet has\r\n     * been acknowledged with RESULT.\r\n     * @param failure a callback called when either timeout occurs or ERROR\r\n     * response is received.\r\n     * @param {Object} options\r\n     * @param {string} [options.reason] XMPP Jingle error condition\r\n     * @param {string} [options.reasonDescription] some meaningful error message\r\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\r\n     * terminated.\r\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\r\n     * sending session-terminate. It may not make sense to send it if the XMPP\r\n     * connection has been closed already or if the remote peer has disconnected\r\n     */\r\n    terminate(success, failure, options) {}\r\n\r\n    /**\r\n     * Handles an offer from the remote peer (prepares to accept a session).\r\n     * @param jingle the 'jingle' XML element.\r\n     * @param success callback called when we the incoming session has been\r\n     * accepted\r\n     * @param failure callback called when we fail for any reason, will supply\r\n     * error object with details(which is meant more to be printed to the logger\r\n     * than analysed in the code, as the error is unrecoverable anyway)\r\n     */\r\n    acceptOffer(jingle, success, failure) {}\r\n\r\n    /**\r\n     * Returns the JID of the initiator of the jingle session.\r\n     */\r\n    _getInitiatorJid() {\r\n        return this.isInitiator ? this.localJid : this.remoteJid;\r\n    }\r\n\r\n    /* eslint-enable no-unused-vars, no-empty-function */\r\n}\r\n","import { Strophe } from 'strophe.js';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\n/**\r\n *  Logs raw stanzas and makes them available for download as JSON\r\n */\r\nclass StropheLogger extends ConnectionPlugin {\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.log = [];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        this.connection.rawInput = this.logIncoming.bind(this);\r\n        this.connection.rawOutput = this.logOutgoing.bind(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stanza\r\n     */\r\n    logIncoming(stanza) {\r\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stanza\r\n     */\r\n    logOutgoing(stanza) {\r\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport default function() {\r\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\r\n}\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\r\n\r\n/**\r\n *\r\n */\r\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n\r\n        this.connection.addHandler(\r\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param iq\r\n     */\r\n    onRayo(iq) {\r\n        logger.info('Rayo IQ', iq);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param to\r\n     * @param from\r\n     * @param roomName\r\n     * @param roomPass\r\n     * @param focusMucJid\r\n     */\r\n    dial(to, from, roomName, roomPass, focusMucJid) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!focusMucJid) {\r\n                reject(new Error('Internal error!'));\r\n\r\n                return;\r\n            }\r\n            const req = $iq({\r\n                type: 'set',\r\n                to: focusMucJid\r\n            });\r\n\r\n            req.c('dial', {\r\n                xmlns: RAYO_XMLNS,\r\n                to,\r\n                from\r\n            });\r\n            req.c('header', {\r\n                name: 'JvbRoomName',\r\n                value: roomName\r\n            }).up();\r\n\r\n            if (roomPass && roomPass.length) {\r\n                req.c('header', {\r\n                    name: 'JvbRoomPassword',\r\n                    value: roomPass\r\n                }).up();\r\n            }\r\n\r\n            this.connection.sendIQ(\r\n                req,\r\n                result => {\r\n                    logger.info('Dial result ', result);\r\n\r\n                    // eslint-disable-next-line newline-per-chained-call\r\n                    const resource = $(result).find('ref').attr('uri');\r\n\r\n                    this.callResource = resource.substr('xmpp:'.length);\r\n                    logger.info(`Received call resource: ${this.callResource}`);\r\n                    resolve();\r\n                },\r\n                error => {\r\n                    logger.info('Dial error ', error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     */\r\n    hangup() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.callResource) {\r\n                reject(new Error('No call in progress'));\r\n                logger.warn('No call in progress');\r\n\r\n                return;\r\n            }\r\n\r\n            const req = $iq({\r\n                type: 'set',\r\n                to: this.callResource\r\n            });\r\n\r\n            req.c('hangup', {\r\n                xmlns: RAYO_XMLNS\r\n            });\r\n\r\n            this.connection.sendIQ(req, result => {\r\n                logger.info('Hangup result ', result);\r\n                this.callResource = null;\r\n                resolve();\r\n            }, error => {\r\n                logger.info('Hangup error ', error);\r\n                this.callResource = null;\r\n                reject(new Error('Hangup error '));\r\n            });\r\n        });\r\n    }\r\n}\r\n","/* global __filename */\r\n/**\r\n * Strophe logger implementation. Logs from level WARN and above.\r\n */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This is the last HTTP error status captured from Strophe debug logs.\r\n * The purpose of storing it is to distinguish between the network and\r\n * infrastructure reason for connection being dropped (see connectionHandler in\r\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\r\n * which means that the failure could be transient.\r\n *\r\n * FIXME in the latest Strophe (not released on npm) there is API to handle\r\n * particular HTTP errors, but there is no way to learn if the subsequent\r\n * request succeeded in order to tell if the error was one time incident or if\r\n * it was the reason for dropping the connection by Strophe (the connection is\r\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\r\n * details about the reason on why the connection stopped.\r\n *\r\n * @type {number}\r\n */\r\nlet lastErrorStatus = -1;\r\n\r\n/**\r\n * A regular expression used to catch Strophe's log message indicating that the\r\n * last BOSH request was successful. When there is such message seen the\r\n * {@link lastErrorStatus} will be set back to '-1'.\r\n * @type {RegExp}\r\n */\r\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\r\n\r\n/**\r\n * A regular expression used to capture the current value of the BOSH request\r\n * error status (HTTP error code or '0' or something else).\r\n * @type {RegExp}\r\n */\r\nconst lastErrorStatusRegExpr\r\n    = /request errored, status: (\\d+), number of errors: \\d+/;\r\n\r\n/**\r\n *\r\n */\r\nexport default function() {\r\n\r\n    Strophe.log = function(level, msg) {\r\n        // Our global handler reports uncaught errors to the stats which may\r\n        // interpret those as partial call failure.\r\n        // Strophe log entry about secondary request timeout does not mean that\r\n        // it's a final failure(the request will be restarted), so we lower it's\r\n        // level here to a warning.\r\n        logger.trace('Strophe', level, msg);\r\n        if (typeof msg === 'string'\r\n                && msg.indexOf('Request ') !== -1\r\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            level = Strophe.LogLevel.WARN;\r\n        }\r\n\r\n        /* eslint-disable no-case-declarations */\r\n        switch (level) {\r\n        case Strophe.LogLevel.DEBUG:\r\n            // The log message which reports successful status is logged on\r\n            // Strophe's DEBUG level.\r\n            if (lastErrorStatus !== -1\r\n                    && resetLastErrorStatusRegExpr.test(msg)) {\r\n                logger.debug('Reset lastErrorStatus');\r\n                lastErrorStatus = -1;\r\n            }\r\n            break;\r\n        case Strophe.LogLevel.WARN:\r\n            logger.warn(`Strophe: ${msg}`);\r\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\r\n\r\n            if (errStatusCapture && errStatusCapture.length === 2) {\r\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\r\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\r\n            }\r\n            break;\r\n        case Strophe.LogLevel.ERROR:\r\n        case Strophe.LogLevel.FATAL:\r\n            // eslint-disable-next-line no-param-reassign\r\n            msg = `Strophe: ${msg}`;\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\r\n            logger.error(msg);\r\n            break;\r\n        }\r\n\r\n        /* eslint-enable no-case-declarations */\r\n    };\r\n\r\n    /**\r\n     * Returns error status (HTTP error code) of the last BOSH request.\r\n     *\r\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\r\n     * (this is a hack).\r\n     */\r\n    Strophe.getLastErrorStatus = function() {\r\n        return lastErrorStatus;\r\n    };\r\n\r\n    Strophe.getStatusString = function(status) {\r\n        switch (status) {\r\n        case Strophe.Status.BINDREQUIRED:\r\n            return 'BINDREQUIRED';\r\n        case Strophe.Status.ERROR:\r\n            return 'ERROR';\r\n        case Strophe.Status.CONNECTING:\r\n            return 'CONNECTING';\r\n        case Strophe.Status.CONNFAIL:\r\n            return 'CONNFAIL';\r\n        case Strophe.Status.AUTHENTICATING:\r\n            return 'AUTHENTICATING';\r\n        case Strophe.Status.AUTHFAIL:\r\n            return 'AUTHFAIL';\r\n        case Strophe.Status.CONNECTED:\r\n            return 'CONNECTED';\r\n        case Strophe.Status.DISCONNECTED:\r\n            return 'DISCONNECTED';\r\n        case Strophe.Status.DISCONNECTING:\r\n            return 'DISCONNECTING';\r\n        case Strophe.Status.ATTACHED:\r\n            return 'ATTACHED';\r\n        default:\r\n            return 'unknown';\r\n        }\r\n    };\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\r\n * with the videobridge.\r\n */\r\nexport default class BridgeChannel {\r\n    /**\r\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\r\n     * instance, or creates a WebSocket connection with the videobridge.\r\n     * At least one of both, peerconnection or wsUrl parameters, must be\r\n     * given.\r\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\r\n     * instance.\r\n     * @param {string} [wsUrl] WebSocket URL.\r\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\r\n     * @param {function} senderVideoConstraintsChanged callback to call when the sender video constraints change.\r\n     */\r\n    constructor(peerconnection, wsUrl, emitter, senderVideoConstraintsChanged) {\r\n        if (!peerconnection && !wsUrl) {\r\n            throw new TypeError(\r\n                'At least peerconnection or wsUrl must be given');\r\n        } else if (peerconnection && wsUrl) {\r\n            throw new TypeError(\r\n                'Just one of peerconnection or wsUrl must be given');\r\n        }\r\n\r\n        if (peerconnection) {\r\n            logger.debug('constructor() with peerconnection');\r\n        } else {\r\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\r\n        }\r\n\r\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\r\n        // @type {RTCDataChannel|WebSocket}\r\n        this._channel = null;\r\n\r\n        // @type {EventEmitter}\r\n        this._eventEmitter = emitter;\r\n\r\n        // Whether a RTCDataChannel or WebSocket is internally used.\r\n        // @type {string} \"datachannel\" / \"websocket\"\r\n        this._mode = null;\r\n\r\n        // Indicates whether the connection retries are enabled or not.\r\n        this._areRetriesEnabled = false;\r\n\r\n        // Indicates whether the connection was closed from the client or not.\r\n        this._closedFromClient = false;\r\n\r\n        this._senderVideoConstraintsChanged = senderVideoConstraintsChanged;\r\n\r\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\r\n        // event.\r\n        if (peerconnection) {\r\n            const datachannel\r\n                = peerconnection.createDataChannel(\r\n                    'JVB data channel', {\r\n                        protocol: 'http://jitsi.org/protocols/colibri'\r\n                    });\r\n\r\n            // Handle the RTCDataChannel.\r\n            this._handleChannel(datachannel);\r\n            this._mode = 'datachannel';\r\n\r\n        // Otherwise create a WebSocket connection.\r\n        } else if (wsUrl) {\r\n            this._areRetriesEnabled = true;\r\n            this._wsUrl = wsUrl;\r\n            this._initWebSocket();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the web socket channel.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _initWebSocket() {\r\n        // Create a WebSocket instance.\r\n        const ws = new WebSocket(this._wsUrl);\r\n\r\n        // Handle the WebSocket.\r\n        this._handleChannel(ws);\r\n        this._mode = 'websocket';\r\n    }\r\n\r\n    /**\r\n     * Starts the websocket connection retries.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _startConnectionRetries() {\r\n        let timeoutS = 1;\r\n\r\n        const reload = () => {\r\n            if (this.isOpen()) {\r\n                return;\r\n            }\r\n            this._initWebSocket(this._wsUrl);\r\n            timeoutS = Math.min(timeoutS * 2, 60);\r\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\r\n        };\r\n\r\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\r\n    }\r\n\r\n    /**\r\n     * Stops the websocket connection retries.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _stopConnectionRetries() {\r\n        if (this._retryTimeout) {\r\n            clearTimeout(this._retryTimeout);\r\n            this._retryTimeout = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retries to establish the websocket connection after the connection was closed by the server.\r\n     *\r\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\r\n     * @returns {void}\r\n     */\r\n    _retryWebSocketConnection(closeEvent) {\r\n        if (!this._areRetriesEnabled) {\r\n            return;\r\n        }\r\n        const { code, reason } = closeEvent;\r\n\r\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\r\n        this._areRetriesEnabled = false;\r\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\r\n            this._stopConnectionRetries();\r\n            this._areRetriesEnabled = true;\r\n        });\r\n        this._startConnectionRetries();\r\n    }\r\n\r\n    /**\r\n     * The channel mode.\r\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\r\n     */\r\n    get mode() {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Closes the currently opened channel.\r\n     */\r\n    close() {\r\n        this._closedFromClient = true;\r\n        this._stopConnectionRetries();\r\n        this._areRetriesEnabled = false;\r\n        if (this._channel) {\r\n            try {\r\n                this._channel.close();\r\n            } catch (error) {} // eslint-disable-line no-empty\r\n\r\n            this._channel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\r\n     * open.\r\n     * @return {boolean}\r\n     */\r\n    isOpen() {\r\n        return this._channel && (this._channel.readyState === 'open'\r\n            || this._channel.readyState === WebSocket.OPEN);\r\n    }\r\n\r\n    /**\r\n     * Sends message via the channel.\r\n     * @param {string} to The id of the endpoint that should receive the\r\n     * message. If \"\" the message will be sent to all participants.\r\n     * @param  {object} payload The payload of the message.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendMessage(to, payload) {\r\n        this._send({\r\n            colibriClass: 'EndpointMessage',\r\n            msgPayload: payload,\r\n            to\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"lastN value changed\" message via the channel.\r\n     * @param {number} value The new value for lastN. -1 means unlimited.\r\n     */\r\n    sendSetLastNMessage(value) {\r\n        const jsonObject = {\r\n            colibriClass: 'LastNChangedEvent',\r\n            lastN: value\r\n        };\r\n\r\n        this._send(jsonObject);\r\n        logger.log(`Channel lastN set to: ${value}`);\r\n    }\r\n\r\n    /**\r\n     * Sends a \"pinned endpoint changed\" message via the channel.\r\n     * @param {string} endpointId The id of the pinned endpoint.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendPinnedEndpointMessage(endpointId) {\r\n        logger.log(\r\n            'sending pinned changed notification to the bridge for endpoint ',\r\n            endpointId);\r\n\r\n        this._send({\r\n            colibriClass: 'PinnedEndpointChangedEvent',\r\n            pinnedEndpoint: endpointId || null\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"selected endpoints changed\" message via the channel.\r\n     *\r\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendSelectedEndpointsMessage(endpointIds) {\r\n        logger.log(\r\n            'sending selected changed notification to the bridge for endpoints',\r\n            endpointIds);\r\n\r\n        this._send({\r\n            colibriClass: 'SelectedEndpointsChangedEvent',\r\n            selectedEndpoints: endpointIds\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"receiver video constraint\" message via the channel.\r\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\r\n     * in pixels, this receiver is willing to receive\r\n     */\r\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\r\n        logger.log('sending a ReceiverVideoConstraint message with '\r\n            + `a maxFrameHeight of ${maxFrameHeightPixels} pixels`);\r\n        this._send({\r\n            colibriClass: 'ReceiverVideoConstraint',\r\n            maxFrameHeight: maxFrameHeightPixels\r\n        });\r\n    }\r\n\r\n    sendNewReceiverVideoConstraintsMessage(constraints) {\r\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\r\n        this._send({\r\n            colibriClass: 'ReceiverVideoConstraints',\r\n            ...constraints\r\n        });\r\n    }\r\n\r\n    sendVideoTypeMessage(videoType) {\r\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\r\n        this._send({\r\n            colibriClass: 'VideoTypeMessage',\r\n            videoType\r\n        });\r\n    }\r\n\r\n    sendSourceVideoTypeMessage(sourceName, videoType) {\r\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\r\n        this._send({\r\n            colibriClass: 'SourceVideoTypeMessage',\r\n            sourceName,\r\n            videoType\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set events on the given RTCDataChannel or WebSocket instance.\r\n     */\r\n    _handleChannel(channel) {\r\n        const emitter = this._eventEmitter;\r\n\r\n        channel.onopen = () => {\r\n            logger.info(`${this._mode} channel opened`);\r\n\r\n            // Code sample for sending string and/or binary data.\r\n            // Sends string message to the bridge:\r\n            //     channel.send(\"Hello bridge!\");\r\n            // Sends 12 bytes binary message to the bridge:\r\n            //     channel.send(new ArrayBuffer(12));\r\n\r\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\r\n        };\r\n\r\n        channel.onerror = event => {\r\n            // WS error events contain no information about the failure (this is available in the onclose event) and\r\n            // the event references the WS object itself, which causes hangs on mobile.\r\n            if (this._mode !== 'websocket') {\r\n                logger.error(`Channel error: ${event.message}`);\r\n            }\r\n        };\r\n\r\n        channel.onmessage = ({ data }) => {\r\n            // JSON object.\r\n            let obj;\r\n\r\n            try {\r\n                obj = JSON.parse(data);\r\n            } catch (error) {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(\r\n                    'Failed to parse channel message as JSON: ',\r\n                    data, error);\r\n\r\n                return;\r\n            }\r\n\r\n            const colibriClass = obj.colibriClass;\r\n\r\n            switch (colibriClass) {\r\n            case 'DominantSpeakerEndpointChangeEvent': {\r\n                // Endpoint ID from the Videobridge.\r\n                const dominantSpeakerEndpoint = obj.dominantSpeakerEndpoint;\r\n\r\n                logger.info(\r\n                    'Channel new dominant speaker event: ',\r\n                    dominantSpeakerEndpoint);\r\n                emitter.emit(\r\n                    RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n                    dominantSpeakerEndpoint);\r\n                break;\r\n            }\r\n            case 'EndpointConnectivityStatusChangeEvent': {\r\n                const endpoint = obj.endpoint;\r\n                const isActive = obj.active === 'true';\r\n\r\n                logger.info(\r\n                    `Endpoint connection status changed: ${endpoint} active ? ${\r\n                        isActive}`);\r\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n                    endpoint, isActive);\r\n\r\n                break;\r\n            }\r\n            case 'EndpointMessage': {\r\n                emitter.emit(\r\n                    RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from,\r\n                    obj.msgPayload);\r\n\r\n                break;\r\n            }\r\n            case 'LastNEndpointsChangeEvent': {\r\n                // The new/latest list of last-n endpoint IDs.\r\n                const lastNEndpoints = obj.lastNEndpoints;\r\n\r\n                logger.info('Channel new last-n event: ',\r\n                    lastNEndpoints, obj);\r\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n                    lastNEndpoints, obj);\r\n\r\n                break;\r\n            }\r\n            case 'SenderVideoConstraints': {\r\n                const videoConstraints = obj.videoConstraints;\r\n\r\n                if (videoConstraints) {\r\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\r\n                    this._senderVideoConstraintsChanged(videoConstraints);\r\n                }\r\n                break;\r\n            }\r\n            default: {\r\n                logger.debug('Channel JSON-formatted message: ', obj);\r\n\r\n                // The received message appears to be appropriately formatted\r\n                // (i.e. is a JSON object which assigns a value to the\r\n                // mandatory property colibriClass) so don't just swallow it,\r\n                // expose it to public consumption.\r\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\r\n            }\r\n            }\r\n        };\r\n\r\n        channel.onclose = event => {\r\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\r\n\r\n            if (this._mode === 'websocket') {\r\n                if (!this._closedFromClient) {\r\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\r\n                    this._retryWebSocketConnection(event);\r\n                }\r\n            }\r\n\r\n            // Remove the channel.\r\n            this._channel = null;\r\n        };\r\n\r\n        // Store the channel.\r\n        this._channel = channel;\r\n    }\r\n\r\n    /**\r\n     * Sends passed object via the channel.\r\n     * @param {object} jsonObject The object that will be sent.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    _send(jsonObject) {\r\n        const channel = this._channel;\r\n\r\n        if (!this.isOpen()) {\r\n            logger.error('Bridge Channel send: no opened channel.');\r\n            throw new Error('No opened channel');\r\n        }\r\n\r\n        channel.send(JSON.stringify(jsonObject));\r\n    }\r\n}\r\n","/*\r\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n /* eslint-env node */\r\n'use strict';\r\n\r\nvar SDPUtils = require('sdp');\r\n\r\nfunction fixStatsType(stat) {\r\n  return {\r\n    inboundrtp: 'inbound-rtp',\r\n    outboundrtp: 'outbound-rtp',\r\n    candidatepair: 'candidate-pair',\r\n    localcandidate: 'local-candidate',\r\n    remotecandidate: 'remote-candidate'\r\n  }[stat.type] || stat.type;\r\n}\r\n\r\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\r\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\r\n\r\n  // Map ICE parameters (ufrag, pwd) to SDP.\r\n  sdp += SDPUtils.writeIceParameters(\r\n      transceiver.iceGatherer.getLocalParameters());\r\n\r\n  // Map DTLS parameters to SDP.\r\n  sdp += SDPUtils.writeDtlsParameters(\r\n      transceiver.dtlsTransport.getLocalParameters(),\r\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\r\n\r\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\r\n\r\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\r\n    sdp += 'a=sendrecv\\r\\n';\r\n  } else if (transceiver.rtpSender) {\r\n    sdp += 'a=sendonly\\r\\n';\r\n  } else if (transceiver.rtpReceiver) {\r\n    sdp += 'a=recvonly\\r\\n';\r\n  } else {\r\n    sdp += 'a=inactive\\r\\n';\r\n  }\r\n\r\n  if (transceiver.rtpSender) {\r\n    var trackId = transceiver.rtpSender._initialTrackId ||\r\n        transceiver.rtpSender.track.id;\r\n    transceiver.rtpSender._initialTrackId = trackId;\r\n    // spec.\r\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\r\n        trackId + '\\r\\n';\r\n    sdp += 'a=' + msid;\r\n    // for Chrome. Legacy should no longer be required.\r\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\r\n        ' ' + msid;\r\n\r\n    // RTX\r\n    if (transceiver.sendEncodingParameters[0].rtx) {\r\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n          ' ' + msid;\r\n      sdp += 'a=ssrc-group:FID ' +\r\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\r\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n          '\\r\\n';\r\n    }\r\n  }\r\n  // FIXME: this should be written by writeRtpDescription.\r\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\r\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\r\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\r\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\r\n  }\r\n  return sdp;\r\n}\r\n\r\n// Edge does not like\r\n// 1) stun: filtered after 14393 unless ?transport=udp is present\r\n// 2) turn: that does not have all of turn:host:port?transport=udp\r\n// 3) turn: with ipv6 addresses\r\n// 4) turn: occurring muliple times\r\nfunction filterIceServers(iceServers, edgeVersion) {\r\n  var hasTurn = false;\r\n  iceServers = JSON.parse(JSON.stringify(iceServers));\r\n  return iceServers.filter(function(server) {\r\n    if (server && (server.urls || server.url)) {\r\n      var urls = server.urls || server.url;\r\n      if (server.url && !server.urls) {\r\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\r\n      }\r\n      var isString = typeof urls === 'string';\r\n      if (isString) {\r\n        urls = [urls];\r\n      }\r\n      urls = urls.filter(function(url) {\r\n        var validTurn = url.indexOf('turn:') === 0 &&\r\n            url.indexOf('transport=udp') !== -1 &&\r\n            url.indexOf('turn:[') === -1 &&\r\n            !hasTurn;\r\n\r\n        if (validTurn) {\r\n          hasTurn = true;\r\n          return true;\r\n        }\r\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\r\n            url.indexOf('?transport=udp') === -1;\r\n      });\r\n\r\n      delete server.url;\r\n      server.urls = isString ? urls[0] : urls;\r\n      return !!urls.length;\r\n    }\r\n  });\r\n}\r\n\r\n// Determines the intersection of local and remote capabilities.\r\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\r\n  var commonCapabilities = {\r\n    codecs: [],\r\n    headerExtensions: [],\r\n    fecMechanisms: []\r\n  };\r\n\r\n  var findCodecByPayloadType = function(pt, codecs) {\r\n    pt = parseInt(pt, 10);\r\n    for (var i = 0; i < codecs.length; i++) {\r\n      if (codecs[i].payloadType === pt ||\r\n          codecs[i].preferredPayloadType === pt) {\r\n        return codecs[i];\r\n      }\r\n    }\r\n  };\r\n\r\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\r\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\r\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\r\n    return lCodec && rCodec &&\r\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\r\n  };\r\n\r\n  localCapabilities.codecs.forEach(function(lCodec) {\r\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\r\n      var rCodec = remoteCapabilities.codecs[i];\r\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\r\n          lCodec.clockRate === rCodec.clockRate) {\r\n        if (lCodec.name.toLowerCase() === 'rtx' &&\r\n            lCodec.parameters && rCodec.parameters.apt) {\r\n          // for RTX we need to find the local rtx that has a apt\r\n          // which points to the same local codec as the remote one.\r\n          if (!rtxCapabilityMatches(lCodec, rCodec,\r\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\r\n            continue;\r\n          }\r\n        }\r\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\r\n        // number of channels is the highest common number of channels\r\n        rCodec.numChannels = Math.min(lCodec.numChannels,\r\n            rCodec.numChannels);\r\n        // push rCodec so we reply with offerer payload type\r\n        commonCapabilities.codecs.push(rCodec);\r\n\r\n        // determine common feedback mechanisms\r\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\r\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\r\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\r\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\r\n              return true;\r\n            }\r\n          }\r\n          return false;\r\n        });\r\n        // FIXME: also need to determine .parameters\r\n        //  see https://github.com/openpeer/ortc/issues/569\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\r\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\r\n         i++) {\r\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\r\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\r\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\n  // FIXME: fecMechanisms\r\n  return commonCapabilities;\r\n}\r\n\r\n// is action=setLocalDescription with type allowed in signalingState\r\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\r\n  return {\r\n    offer: {\r\n      setLocalDescription: ['stable', 'have-local-offer'],\r\n      setRemoteDescription: ['stable', 'have-remote-offer']\r\n    },\r\n    answer: {\r\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\r\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\r\n    }\r\n  }[type][action].indexOf(signalingState) !== -1;\r\n}\r\n\r\nfunction maybeAddCandidate(iceTransport, candidate) {\r\n  // Edge's internal representation adds some fields therefore\r\n  // not all fieldѕ are taken into account.\r\n  var alreadyAdded = iceTransport.getRemoteCandidates()\r\n      .find(function(remoteCandidate) {\r\n        return candidate.foundation === remoteCandidate.foundation &&\r\n            candidate.ip === remoteCandidate.ip &&\r\n            candidate.port === remoteCandidate.port &&\r\n            candidate.priority === remoteCandidate.priority &&\r\n            candidate.protocol === remoteCandidate.protocol &&\r\n            candidate.type === remoteCandidate.type;\r\n      });\r\n  if (!alreadyAdded) {\r\n    iceTransport.addRemoteCandidate(candidate);\r\n  }\r\n  return !alreadyAdded;\r\n}\r\n\r\n\r\nfunction makeError(name, description) {\r\n  var e = new Error(description);\r\n  e.name = name;\r\n  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names\r\n  e.code = {\r\n    NotSupportedError: 9,\r\n    InvalidStateError: 11,\r\n    InvalidAccessError: 15,\r\n    TypeError: undefined,\r\n    OperationError: undefined\r\n  }[name];\r\n  return e;\r\n}\r\n\r\nmodule.exports = function(window, edgeVersion) {\r\n  // https://w3c.github.io/mediacapture-main/#mediastream\r\n  // Helper function to add the track to the stream and\r\n  // dispatch the event ourselves.\r\n  function addTrackToStreamAndFireEvent(track, stream) {\r\n    stream.addTrack(track);\r\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\r\n        {track: track}));\r\n  }\r\n\r\n  function removeTrackFromStreamAndFireEvent(track, stream) {\r\n    stream.removeTrack(track);\r\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\r\n        {track: track}));\r\n  }\r\n\r\n  function fireAddTrack(pc, track, receiver, streams) {\r\n    var trackEvent = new Event('track');\r\n    trackEvent.track = track;\r\n    trackEvent.receiver = receiver;\r\n    trackEvent.transceiver = {receiver: receiver};\r\n    trackEvent.streams = streams;\r\n    window.setTimeout(function() {\r\n      pc._dispatchEvent('track', trackEvent);\r\n    });\r\n  }\r\n\r\n  var RTCPeerConnection = function(config) {\r\n    var pc = this;\r\n\r\n    var _eventTarget = document.createDocumentFragment();\r\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\r\n        .forEach(function(method) {\r\n          pc[method] = _eventTarget[method].bind(_eventTarget);\r\n        });\r\n\r\n    this.canTrickleIceCandidates = null;\r\n\r\n    this.needNegotiation = false;\r\n\r\n    this.localStreams = [];\r\n    this.remoteStreams = [];\r\n\r\n    this._localDescription = null;\r\n    this._remoteDescription = null;\r\n\r\n    this.signalingState = 'stable';\r\n    this.iceConnectionState = 'new';\r\n    this.connectionState = 'new';\r\n    this.iceGatheringState = 'new';\r\n\r\n    config = JSON.parse(JSON.stringify(config || {}));\r\n\r\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\r\n    if (config.rtcpMuxPolicy === 'negotiate') {\r\n      throw(makeError('NotSupportedError',\r\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\r\n    } else if (!config.rtcpMuxPolicy) {\r\n      config.rtcpMuxPolicy = 'require';\r\n    }\r\n\r\n    switch (config.iceTransportPolicy) {\r\n      case 'all':\r\n      case 'relay':\r\n        break;\r\n      default:\r\n        config.iceTransportPolicy = 'all';\r\n        break;\r\n    }\r\n\r\n    switch (config.bundlePolicy) {\r\n      case 'balanced':\r\n      case 'max-compat':\r\n      case 'max-bundle':\r\n        break;\r\n      default:\r\n        config.bundlePolicy = 'balanced';\r\n        break;\r\n    }\r\n\r\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\r\n\r\n    this._iceGatherers = [];\r\n    if (config.iceCandidatePoolSize) {\r\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\r\n        this._iceGatherers.push(new window.RTCIceGatherer({\r\n          iceServers: config.iceServers,\r\n          gatherPolicy: config.iceTransportPolicy\r\n        }));\r\n      }\r\n    } else {\r\n      config.iceCandidatePoolSize = 0;\r\n    }\r\n\r\n    this._config = config;\r\n\r\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\r\n    // everything that is needed to describe a SDP m-line.\r\n    this.transceivers = [];\r\n\r\n    this._sdpSessionId = SDPUtils.generateSessionId();\r\n    this._sdpSessionVersion = 0;\r\n\r\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\r\n\r\n    this._isClosed = false;\r\n  };\r\n\r\n  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {\r\n    configurable: true,\r\n    get: function() {\r\n      return this._localDescription;\r\n    }\r\n  });\r\n  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {\r\n    configurable: true,\r\n    get: function() {\r\n      return this._remoteDescription;\r\n    }\r\n  });\r\n\r\n  // set up event handlers on prototype\r\n  RTCPeerConnection.prototype.onicecandidate = null;\r\n  RTCPeerConnection.prototype.onaddstream = null;\r\n  RTCPeerConnection.prototype.ontrack = null;\r\n  RTCPeerConnection.prototype.onremovestream = null;\r\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\r\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\r\n  RTCPeerConnection.prototype.onconnectionstatechange = null;\r\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\r\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\r\n  RTCPeerConnection.prototype.ondatachannel = null;\r\n\r\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\r\n    if (this._isClosed) {\r\n      return;\r\n    }\r\n    this.dispatchEvent(event);\r\n    if (typeof this['on' + name] === 'function') {\r\n      this['on' + name](event);\r\n    }\r\n  };\r\n\r\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\r\n    var event = new Event('icegatheringstatechange');\r\n    this._dispatchEvent('icegatheringstatechange', event);\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getConfiguration = function() {\r\n    return this._config;\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getLocalStreams = function() {\r\n    return this.localStreams;\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\r\n    return this.remoteStreams;\r\n  };\r\n\r\n  // internal helper to create a transceiver object.\r\n  // (which is not yet the same as the WebRTC 1.0 transceiver)\r\n  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {\r\n    var hasBundleTransport = this.transceivers.length > 0;\r\n    var transceiver = {\r\n      track: null,\r\n      iceGatherer: null,\r\n      iceTransport: null,\r\n      dtlsTransport: null,\r\n      localCapabilities: null,\r\n      remoteCapabilities: null,\r\n      rtpSender: null,\r\n      rtpReceiver: null,\r\n      kind: kind,\r\n      mid: null,\r\n      sendEncodingParameters: null,\r\n      recvEncodingParameters: null,\r\n      stream: null,\r\n      associatedRemoteMediaStreams: [],\r\n      wantReceive: true\r\n    };\r\n    if (this.usingBundle && hasBundleTransport) {\r\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\r\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\r\n    } else {\r\n      var transports = this._createIceAndDtlsTransports();\r\n      transceiver.iceTransport = transports.iceTransport;\r\n      transceiver.dtlsTransport = transports.dtlsTransport;\r\n    }\r\n    if (!doNotAdd) {\r\n      this.transceivers.push(transceiver);\r\n    }\r\n    return transceiver;\r\n  };\r\n\r\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\r\n    if (this._isClosed) {\r\n      throw makeError('InvalidStateError',\r\n          'Attempted to call addTrack on a closed peerconnection.');\r\n    }\r\n\r\n    var alreadyExists = this.transceivers.find(function(s) {\r\n      return s.track === track;\r\n    });\r\n\r\n    if (alreadyExists) {\r\n      throw makeError('InvalidAccessError', 'Track already exists.');\r\n    }\r\n\r\n    var transceiver;\r\n    for (var i = 0; i < this.transceivers.length; i++) {\r\n      if (!this.transceivers[i].track &&\r\n          this.transceivers[i].kind === track.kind) {\r\n        transceiver = this.transceivers[i];\r\n      }\r\n    }\r\n    if (!transceiver) {\r\n      transceiver = this._createTransceiver(track.kind);\r\n    }\r\n\r\n    this._maybeFireNegotiationNeeded();\r\n\r\n    if (this.localStreams.indexOf(stream) === -1) {\r\n      this.localStreams.push(stream);\r\n    }\r\n\r\n    transceiver.track = track;\r\n    transceiver.stream = stream;\r\n    transceiver.rtpSender = new window.RTCRtpSender(track,\r\n        transceiver.dtlsTransport);\r\n    return transceiver.rtpSender;\r\n  };\r\n\r\n  RTCPeerConnection.prototype.addStream = function(stream) {\r\n    var pc = this;\r\n    if (edgeVersion >= 15025) {\r\n      stream.getTracks().forEach(function(track) {\r\n        pc.addTrack(track, stream);\r\n      });\r\n    } else {\r\n      // Clone is necessary for local demos mostly, attaching directly\r\n      // to two different senders does not work (build 10547).\r\n      // Fixed in 15025 (or earlier)\r\n      var clonedStream = stream.clone();\r\n      stream.getTracks().forEach(function(track, idx) {\r\n        var clonedTrack = clonedStream.getTracks()[idx];\r\n        track.addEventListener('enabled', function(event) {\r\n          clonedTrack.enabled = event.enabled;\r\n        });\r\n      });\r\n      clonedStream.getTracks().forEach(function(track) {\r\n        pc.addTrack(track, clonedStream);\r\n      });\r\n    }\r\n  };\r\n\r\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\r\n    if (this._isClosed) {\r\n      throw makeError('InvalidStateError',\r\n          'Attempted to call removeTrack on a closed peerconnection.');\r\n    }\r\n\r\n    if (!(sender instanceof window.RTCRtpSender)) {\r\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\r\n          'does not implement interface RTCRtpSender.');\r\n    }\r\n\r\n    var transceiver = this.transceivers.find(function(t) {\r\n      return t.rtpSender === sender;\r\n    });\r\n\r\n    if (!transceiver) {\r\n      throw makeError('InvalidAccessError',\r\n          'Sender was not created by this connection.');\r\n    }\r\n    var stream = transceiver.stream;\r\n\r\n    transceiver.rtpSender.stop();\r\n    transceiver.rtpSender = null;\r\n    transceiver.track = null;\r\n    transceiver.stream = null;\r\n\r\n    // remove the stream from the set of local streams\r\n    var localStreams = this.transceivers.map(function(t) {\r\n      return t.stream;\r\n    });\r\n    if (localStreams.indexOf(stream) === -1 &&\r\n        this.localStreams.indexOf(stream) > -1) {\r\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\r\n    }\r\n\r\n    this._maybeFireNegotiationNeeded();\r\n  };\r\n\r\n  RTCPeerConnection.prototype.removeStream = function(stream) {\r\n    var pc = this;\r\n    stream.getTracks().forEach(function(track) {\r\n      var sender = pc.getSenders().find(function(s) {\r\n        return s.track === track;\r\n      });\r\n      if (sender) {\r\n        pc.removeTrack(sender);\r\n      }\r\n    });\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getSenders = function() {\r\n    return this.transceivers.filter(function(transceiver) {\r\n      return !!transceiver.rtpSender;\r\n    })\r\n    .map(function(transceiver) {\r\n      return transceiver.rtpSender;\r\n    });\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getReceivers = function() {\r\n    return this.transceivers.filter(function(transceiver) {\r\n      return !!transceiver.rtpReceiver;\r\n    })\r\n    .map(function(transceiver) {\r\n      return transceiver.rtpReceiver;\r\n    });\r\n  };\r\n\r\n\r\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\r\n      usingBundle) {\r\n    var pc = this;\r\n    if (usingBundle && sdpMLineIndex > 0) {\r\n      return this.transceivers[0].iceGatherer;\r\n    } else if (this._iceGatherers.length) {\r\n      return this._iceGatherers.shift();\r\n    }\r\n    var iceGatherer = new window.RTCIceGatherer({\r\n      iceServers: this._config.iceServers,\r\n      gatherPolicy: this._config.iceTransportPolicy\r\n    });\r\n    Object.defineProperty(iceGatherer, 'state',\r\n        {value: 'new', writable: true}\r\n    );\r\n\r\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\r\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\r\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\r\n      // polyfill since RTCIceGatherer.state is not implemented in\r\n      // Edge 10547 yet.\r\n      iceGatherer.state = end ? 'completed' : 'gathering';\r\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\r\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\r\n      }\r\n    };\r\n    iceGatherer.addEventListener('localcandidate',\r\n      this.transceivers[sdpMLineIndex].bufferCandidates);\r\n    return iceGatherer;\r\n  };\r\n\r\n  // start gathering from an RTCIceGatherer.\r\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\r\n    var pc = this;\r\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\r\n    if (iceGatherer.onlocalcandidate) {\r\n      return;\r\n    }\r\n    var bufferedCandidateEvents =\r\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\r\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\r\n    iceGatherer.removeEventListener('localcandidate',\r\n      this.transceivers[sdpMLineIndex].bufferCandidates);\r\n    iceGatherer.onlocalcandidate = function(evt) {\r\n      if (pc.usingBundle && sdpMLineIndex > 0) {\r\n        // if we know that we use bundle we can drop candidates with\r\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\r\n        // confused since we dispose the extra ice gatherer.\r\n        return;\r\n      }\r\n      var event = new Event('icecandidate');\r\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\r\n\r\n      var cand = evt.candidate;\r\n      // Edge emits an empty object for RTCIceCandidateComplete‥\r\n      var end = !cand || Object.keys(cand).length === 0;\r\n      if (end) {\r\n        // polyfill since RTCIceGatherer.state is not implemented in\r\n        // Edge 10547 yet.\r\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\r\n          iceGatherer.state = 'completed';\r\n        }\r\n      } else {\r\n        if (iceGatherer.state === 'new') {\r\n          iceGatherer.state = 'gathering';\r\n        }\r\n        // RTCIceCandidate doesn't have a component, needs to be added\r\n        cand.component = 1;\r\n        // also the usernameFragment. TODO: update SDP to take both variants.\r\n        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;\r\n\r\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\r\n        event.candidate = Object.assign(event.candidate,\r\n            SDPUtils.parseCandidate(serializedCandidate));\r\n\r\n        event.candidate.candidate = serializedCandidate;\r\n        event.candidate.toJSON = function() {\r\n          return {\r\n            candidate: event.candidate.candidate,\r\n            sdpMid: event.candidate.sdpMid,\r\n            sdpMLineIndex: event.candidate.sdpMLineIndex,\r\n            usernameFragment: event.candidate.usernameFragment\r\n          };\r\n        };\r\n      }\r\n\r\n      // update local description.\r\n      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);\r\n      if (!end) {\r\n        sections[event.candidate.sdpMLineIndex] +=\r\n            'a=' + event.candidate.candidate + '\\r\\n';\r\n      } else {\r\n        sections[event.candidate.sdpMLineIndex] +=\r\n            'a=end-of-candidates\\r\\n';\r\n      }\r\n      pc._localDescription.sdp =\r\n          SDPUtils.getDescription(pc._localDescription.sdp) +\r\n          sections.join('');\r\n      var complete = pc.transceivers.every(function(transceiver) {\r\n        return transceiver.iceGatherer &&\r\n            transceiver.iceGatherer.state === 'completed';\r\n      });\r\n\r\n      if (pc.iceGatheringState !== 'gathering') {\r\n        pc.iceGatheringState = 'gathering';\r\n        pc._emitGatheringStateChange();\r\n      }\r\n\r\n      // Emit candidate. Also emit null candidate when all gatherers are\r\n      // complete.\r\n      if (!end) {\r\n        pc._dispatchEvent('icecandidate', event);\r\n      }\r\n      if (complete) {\r\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\r\n        pc.iceGatheringState = 'complete';\r\n        pc._emitGatheringStateChange();\r\n      }\r\n    };\r\n\r\n    // emit already gathered candidates.\r\n    window.setTimeout(function() {\r\n      bufferedCandidateEvents.forEach(function(e) {\r\n        iceGatherer.onlocalcandidate(e);\r\n      });\r\n    }, 0);\r\n  };\r\n\r\n  // Create ICE transport and DTLS transport.\r\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\r\n    var pc = this;\r\n    var iceTransport = new window.RTCIceTransport(null);\r\n    iceTransport.onicestatechange = function() {\r\n      pc._updateIceConnectionState();\r\n      pc._updateConnectionState();\r\n    };\r\n\r\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\r\n    dtlsTransport.ondtlsstatechange = function() {\r\n      pc._updateConnectionState();\r\n    };\r\n    dtlsTransport.onerror = function() {\r\n      // onerror does not set state to failed by itself.\r\n      Object.defineProperty(dtlsTransport, 'state',\r\n          {value: 'failed', writable: true});\r\n      pc._updateConnectionState();\r\n    };\r\n\r\n    return {\r\n      iceTransport: iceTransport,\r\n      dtlsTransport: dtlsTransport\r\n    };\r\n  };\r\n\r\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\r\n  // Without triggering the callbacks.\r\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\r\n      sdpMLineIndex) {\r\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\r\n    if (iceGatherer) {\r\n      delete iceGatherer.onlocalcandidate;\r\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\r\n    }\r\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\r\n    if (iceTransport) {\r\n      delete iceTransport.onicestatechange;\r\n      delete this.transceivers[sdpMLineIndex].iceTransport;\r\n    }\r\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\r\n    if (dtlsTransport) {\r\n      delete dtlsTransport.ondtlsstatechange;\r\n      delete dtlsTransport.onerror;\r\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\r\n    }\r\n  };\r\n\r\n  // Start the RTP Sender and Receiver for a transceiver.\r\n  RTCPeerConnection.prototype._transceive = function(transceiver,\r\n      send, recv) {\r\n    var params = getCommonCapabilities(transceiver.localCapabilities,\r\n        transceiver.remoteCapabilities);\r\n    if (send && transceiver.rtpSender) {\r\n      params.encodings = transceiver.sendEncodingParameters;\r\n      params.rtcp = {\r\n        cname: SDPUtils.localCName,\r\n        compound: transceiver.rtcpParameters.compound\r\n      };\r\n      if (transceiver.recvEncodingParameters.length) {\r\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\r\n      }\r\n      transceiver.rtpSender.send(params);\r\n    }\r\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\r\n      // remove RTX field in Edge 14942\r\n      if (transceiver.kind === 'video'\r\n          && transceiver.recvEncodingParameters\r\n          && edgeVersion < 15019) {\r\n        transceiver.recvEncodingParameters.forEach(function(p) {\r\n          delete p.rtx;\r\n        });\r\n      }\r\n      if (transceiver.recvEncodingParameters.length) {\r\n        params.encodings = transceiver.recvEncodingParameters;\r\n      } else {\r\n        params.encodings = [{}];\r\n      }\r\n      params.rtcp = {\r\n        compound: transceiver.rtcpParameters.compound\r\n      };\r\n      if (transceiver.rtcpParameters.cname) {\r\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\r\n      }\r\n      if (transceiver.sendEncodingParameters.length) {\r\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\r\n      }\r\n      transceiver.rtpReceiver.receive(params);\r\n    }\r\n  };\r\n\r\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\r\n    var pc = this;\r\n\r\n    // Note: pranswer is not supported.\r\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\r\n      return Promise.reject(makeError('TypeError',\r\n          'Unsupported type \"' + description.type + '\"'));\r\n    }\r\n\r\n    if (!isActionAllowedInSignalingState('setLocalDescription',\r\n        description.type, pc.signalingState) || pc._isClosed) {\r\n      return Promise.reject(makeError('InvalidStateError',\r\n          'Can not set local ' + description.type +\r\n          ' in state ' + pc.signalingState));\r\n    }\r\n\r\n    var sections;\r\n    var sessionpart;\r\n    if (description.type === 'offer') {\r\n      // VERY limited support for SDP munging. Limited to:\r\n      // * changing the order of codecs\r\n      sections = SDPUtils.splitSections(description.sdp);\r\n      sessionpart = sections.shift();\r\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\r\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\r\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\r\n      });\r\n\r\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\r\n        pc._gather(transceiver.mid, sdpMLineIndex);\r\n      });\r\n    } else if (description.type === 'answer') {\r\n      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);\r\n      sessionpart = sections.shift();\r\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\r\n          'a=ice-lite').length > 0;\r\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\r\n        var transceiver = pc.transceivers[sdpMLineIndex];\r\n        var iceGatherer = transceiver.iceGatherer;\r\n        var iceTransport = transceiver.iceTransport;\r\n        var dtlsTransport = transceiver.dtlsTransport;\r\n        var localCapabilities = transceiver.localCapabilities;\r\n        var remoteCapabilities = transceiver.remoteCapabilities;\r\n\r\n        // treat bundle-only as not-rejected.\r\n        var rejected = SDPUtils.isRejected(mediaSection) &&\r\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\r\n\r\n        if (!rejected && !transceiver.rejected) {\r\n          var remoteIceParameters = SDPUtils.getIceParameters(\r\n              mediaSection, sessionpart);\r\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\r\n              mediaSection, sessionpart);\r\n          if (isIceLite) {\r\n            remoteDtlsParameters.role = 'server';\r\n          }\r\n\r\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\r\n            pc._gather(transceiver.mid, sdpMLineIndex);\r\n            if (iceTransport.state === 'new') {\r\n              iceTransport.start(iceGatherer, remoteIceParameters,\r\n                  isIceLite ? 'controlling' : 'controlled');\r\n            }\r\n            if (dtlsTransport.state === 'new') {\r\n              dtlsTransport.start(remoteDtlsParameters);\r\n            }\r\n          }\r\n\r\n          // Calculate intersection of capabilities.\r\n          var params = getCommonCapabilities(localCapabilities,\r\n              remoteCapabilities);\r\n\r\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\r\n          // transceiver has already been started in setRemoteDescription.\r\n          pc._transceive(transceiver,\r\n              params.codecs.length > 0,\r\n              false);\r\n        }\r\n      });\r\n    }\r\n\r\n    pc._localDescription = {\r\n      type: description.type,\r\n      sdp: description.sdp\r\n    };\r\n    if (description.type === 'offer') {\r\n      pc._updateSignalingState('have-local-offer');\r\n    } else {\r\n      pc._updateSignalingState('stable');\r\n    }\r\n\r\n    return Promise.resolve();\r\n  };\r\n\r\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\r\n    var pc = this;\r\n\r\n    // Note: pranswer is not supported.\r\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\r\n      return Promise.reject(makeError('TypeError',\r\n          'Unsupported type \"' + description.type + '\"'));\r\n    }\r\n\r\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\r\n        description.type, pc.signalingState) || pc._isClosed) {\r\n      return Promise.reject(makeError('InvalidStateError',\r\n          'Can not set remote ' + description.type +\r\n          ' in state ' + pc.signalingState));\r\n    }\r\n\r\n    var streams = {};\r\n    pc.remoteStreams.forEach(function(stream) {\r\n      streams[stream.id] = stream;\r\n    });\r\n    var receiverList = [];\r\n    var sections = SDPUtils.splitSections(description.sdp);\r\n    var sessionpart = sections.shift();\r\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\r\n        'a=ice-lite').length > 0;\r\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\r\n        'a=group:BUNDLE ').length > 0;\r\n    pc.usingBundle = usingBundle;\r\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\r\n        'a=ice-options:')[0];\r\n    if (iceOptions) {\r\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\r\n          .indexOf('trickle') >= 0;\r\n    } else {\r\n      pc.canTrickleIceCandidates = false;\r\n    }\r\n\r\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\r\n      var lines = SDPUtils.splitLines(mediaSection);\r\n      var kind = SDPUtils.getKind(mediaSection);\r\n      // treat bundle-only as not-rejected.\r\n      var rejected = SDPUtils.isRejected(mediaSection) &&\r\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\r\n      var protocol = lines[0].substr(2).split(' ')[2];\r\n\r\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\r\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\r\n\r\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\r\n\r\n      // Reject datachannels which are not implemented yet.\r\n      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||\r\n          protocol === 'UDP/DTLS/SCTP'))) {\r\n        // TODO: this is dangerous in the case where a non-rejected m-line\r\n        //     becomes rejected.\r\n        pc.transceivers[sdpMLineIndex] = {\r\n          mid: mid,\r\n          kind: kind,\r\n          protocol: protocol,\r\n          rejected: true\r\n        };\r\n        return;\r\n      }\r\n\r\n      if (!rejected && pc.transceivers[sdpMLineIndex] &&\r\n          pc.transceivers[sdpMLineIndex].rejected) {\r\n        // recycle a rejected transceiver.\r\n        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);\r\n      }\r\n\r\n      var transceiver;\r\n      var iceGatherer;\r\n      var iceTransport;\r\n      var dtlsTransport;\r\n      var rtpReceiver;\r\n      var sendEncodingParameters;\r\n      var recvEncodingParameters;\r\n      var localCapabilities;\r\n\r\n      var track;\r\n      // FIXME: ensure the mediaSection has rtcp-mux set.\r\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\r\n      var remoteIceParameters;\r\n      var remoteDtlsParameters;\r\n      if (!rejected) {\r\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\r\n            sessionpart);\r\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\r\n            sessionpart);\r\n        remoteDtlsParameters.role = 'client';\r\n      }\r\n      recvEncodingParameters =\r\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\r\n\r\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\r\n\r\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\r\n          'a=end-of-candidates', sessionpart).length > 0;\r\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\r\n          .map(function(cand) {\r\n            return SDPUtils.parseCandidate(cand);\r\n          })\r\n          .filter(function(cand) {\r\n            return cand.component === 1;\r\n          });\r\n\r\n      // Check if we can use BUNDLE and dispose transports.\r\n      if ((description.type === 'offer' || description.type === 'answer') &&\r\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\r\n          pc.transceivers[sdpMLineIndex]) {\r\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\r\n        pc.transceivers[sdpMLineIndex].iceGatherer =\r\n            pc.transceivers[0].iceGatherer;\r\n        pc.transceivers[sdpMLineIndex].iceTransport =\r\n            pc.transceivers[0].iceTransport;\r\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\r\n            pc.transceivers[0].dtlsTransport;\r\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\r\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\r\n              pc.transceivers[0].dtlsTransport);\r\n        }\r\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\r\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\r\n              pc.transceivers[0].dtlsTransport);\r\n        }\r\n      }\r\n      if (description.type === 'offer' && !rejected) {\r\n        transceiver = pc.transceivers[sdpMLineIndex] ||\r\n            pc._createTransceiver(kind);\r\n        transceiver.mid = mid;\r\n\r\n        if (!transceiver.iceGatherer) {\r\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\r\n              usingBundle);\r\n        }\r\n\r\n        if (cands.length && transceiver.iceTransport.state === 'new') {\r\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\r\n            transceiver.iceTransport.setRemoteCandidates(cands);\r\n          } else {\r\n            cands.forEach(function(candidate) {\r\n              maybeAddCandidate(transceiver.iceTransport, candidate);\r\n            });\r\n          }\r\n        }\r\n\r\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\r\n\r\n        // filter RTX until additional stuff needed for RTX is implemented\r\n        // in adapter.js\r\n        if (edgeVersion < 15019) {\r\n          localCapabilities.codecs = localCapabilities.codecs.filter(\r\n              function(codec) {\r\n                return codec.name !== 'rtx';\r\n              });\r\n        }\r\n\r\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\r\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\r\n        }];\r\n\r\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\r\n        var isNewTrack = false;\r\n        if (direction === 'sendrecv' || direction === 'sendonly') {\r\n          isNewTrack = !transceiver.rtpReceiver;\r\n          rtpReceiver = transceiver.rtpReceiver ||\r\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\r\n\r\n          if (isNewTrack) {\r\n            var stream;\r\n            track = rtpReceiver.track;\r\n            // FIXME: does not work with Plan B.\r\n            if (remoteMsid && remoteMsid.stream === '-') {\r\n              // no-op. a stream id of '-' means: no associated stream.\r\n            } else if (remoteMsid) {\r\n              if (!streams[remoteMsid.stream]) {\r\n                streams[remoteMsid.stream] = new window.MediaStream();\r\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\r\n                  get: function() {\r\n                    return remoteMsid.stream;\r\n                  }\r\n                });\r\n              }\r\n              Object.defineProperty(track, 'id', {\r\n                get: function() {\r\n                  return remoteMsid.track;\r\n                }\r\n              });\r\n              stream = streams[remoteMsid.stream];\r\n            } else {\r\n              if (!streams.default) {\r\n                streams.default = new window.MediaStream();\r\n              }\r\n              stream = streams.default;\r\n            }\r\n            if (stream) {\r\n              addTrackToStreamAndFireEvent(track, stream);\r\n              transceiver.associatedRemoteMediaStreams.push(stream);\r\n            }\r\n            receiverList.push([track, rtpReceiver, stream]);\r\n          }\r\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\r\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\r\n            var nativeTrack = s.getTracks().find(function(t) {\r\n              return t.id === transceiver.rtpReceiver.track.id;\r\n            });\r\n            if (nativeTrack) {\r\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\r\n            }\r\n          });\r\n          transceiver.associatedRemoteMediaStreams = [];\r\n        }\r\n\r\n        transceiver.localCapabilities = localCapabilities;\r\n        transceiver.remoteCapabilities = remoteCapabilities;\r\n        transceiver.rtpReceiver = rtpReceiver;\r\n        transceiver.rtcpParameters = rtcpParameters;\r\n        transceiver.sendEncodingParameters = sendEncodingParameters;\r\n        transceiver.recvEncodingParameters = recvEncodingParameters;\r\n\r\n        // Start the RTCRtpReceiver now. The RTPSender is started in\r\n        // setLocalDescription.\r\n        pc._transceive(pc.transceivers[sdpMLineIndex],\r\n            false,\r\n            isNewTrack);\r\n      } else if (description.type === 'answer' && !rejected) {\r\n        transceiver = pc.transceivers[sdpMLineIndex];\r\n        iceGatherer = transceiver.iceGatherer;\r\n        iceTransport = transceiver.iceTransport;\r\n        dtlsTransport = transceiver.dtlsTransport;\r\n        rtpReceiver = transceiver.rtpReceiver;\r\n        sendEncodingParameters = transceiver.sendEncodingParameters;\r\n        localCapabilities = transceiver.localCapabilities;\r\n\r\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\r\n            recvEncodingParameters;\r\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\r\n            remoteCapabilities;\r\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\r\n\r\n        if (cands.length && iceTransport.state === 'new') {\r\n          if ((isIceLite || isComplete) &&\r\n              (!usingBundle || sdpMLineIndex === 0)) {\r\n            iceTransport.setRemoteCandidates(cands);\r\n          } else {\r\n            cands.forEach(function(candidate) {\r\n              maybeAddCandidate(transceiver.iceTransport, candidate);\r\n            });\r\n          }\r\n        }\r\n\r\n        if (!usingBundle || sdpMLineIndex === 0) {\r\n          if (iceTransport.state === 'new') {\r\n            iceTransport.start(iceGatherer, remoteIceParameters,\r\n                'controlling');\r\n          }\r\n          if (dtlsTransport.state === 'new') {\r\n            dtlsTransport.start(remoteDtlsParameters);\r\n          }\r\n        }\r\n\r\n        // If the offer contained RTX but the answer did not,\r\n        // remove RTX from sendEncodingParameters.\r\n        var commonCapabilities = getCommonCapabilities(\r\n          transceiver.localCapabilities,\r\n          transceiver.remoteCapabilities);\r\n\r\n        var hasRtx = commonCapabilities.codecs.filter(function(c) {\r\n          return c.name.toLowerCase() === 'rtx';\r\n        }).length;\r\n        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\r\n          delete transceiver.sendEncodingParameters[0].rtx;\r\n        }\r\n\r\n        pc._transceive(transceiver,\r\n            direction === 'sendrecv' || direction === 'recvonly',\r\n            direction === 'sendrecv' || direction === 'sendonly');\r\n\r\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\r\n        if (rtpReceiver &&\r\n            (direction === 'sendrecv' || direction === 'sendonly')) {\r\n          track = rtpReceiver.track;\r\n          if (remoteMsid) {\r\n            if (!streams[remoteMsid.stream]) {\r\n              streams[remoteMsid.stream] = new window.MediaStream();\r\n            }\r\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\r\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\r\n          } else {\r\n            if (!streams.default) {\r\n              streams.default = new window.MediaStream();\r\n            }\r\n            addTrackToStreamAndFireEvent(track, streams.default);\r\n            receiverList.push([track, rtpReceiver, streams.default]);\r\n          }\r\n        } else {\r\n          // FIXME: actually the receiver should be created later.\r\n          delete transceiver.rtpReceiver;\r\n        }\r\n      }\r\n    });\r\n\r\n    if (pc._dtlsRole === undefined) {\r\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\r\n    }\r\n\r\n    pc._remoteDescription = {\r\n      type: description.type,\r\n      sdp: description.sdp\r\n    };\r\n    if (description.type === 'offer') {\r\n      pc._updateSignalingState('have-remote-offer');\r\n    } else {\r\n      pc._updateSignalingState('stable');\r\n    }\r\n    Object.keys(streams).forEach(function(sid) {\r\n      var stream = streams[sid];\r\n      if (stream.getTracks().length) {\r\n        if (pc.remoteStreams.indexOf(stream) === -1) {\r\n          pc.remoteStreams.push(stream);\r\n          var event = new Event('addstream');\r\n          event.stream = stream;\r\n          window.setTimeout(function() {\r\n            pc._dispatchEvent('addstream', event);\r\n          });\r\n        }\r\n\r\n        receiverList.forEach(function(item) {\r\n          var track = item[0];\r\n          var receiver = item[1];\r\n          if (stream.id !== item[2].id) {\r\n            return;\r\n          }\r\n          fireAddTrack(pc, track, receiver, [stream]);\r\n        });\r\n      }\r\n    });\r\n    receiverList.forEach(function(item) {\r\n      if (item[2]) {\r\n        return;\r\n      }\r\n      fireAddTrack(pc, item[0], item[1], []);\r\n    });\r\n\r\n    // check whether addIceCandidate({}) was called within four seconds after\r\n    // setRemoteDescription.\r\n    window.setTimeout(function() {\r\n      if (!(pc && pc.transceivers)) {\r\n        return;\r\n      }\r\n      pc.transceivers.forEach(function(transceiver) {\r\n        if (transceiver.iceTransport &&\r\n            transceiver.iceTransport.state === 'new' &&\r\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\r\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\r\n              'an end-of-candidates notification');\r\n          transceiver.iceTransport.addRemoteCandidate({});\r\n        }\r\n      });\r\n    }, 4000);\r\n\r\n    return Promise.resolve();\r\n  };\r\n\r\n  RTCPeerConnection.prototype.close = function() {\r\n    this.transceivers.forEach(function(transceiver) {\r\n      /* not yet\r\n      if (transceiver.iceGatherer) {\r\n        transceiver.iceGatherer.close();\r\n      }\r\n      */\r\n      if (transceiver.iceTransport) {\r\n        transceiver.iceTransport.stop();\r\n      }\r\n      if (transceiver.dtlsTransport) {\r\n        transceiver.dtlsTransport.stop();\r\n      }\r\n      if (transceiver.rtpSender) {\r\n        transceiver.rtpSender.stop();\r\n      }\r\n      if (transceiver.rtpReceiver) {\r\n        transceiver.rtpReceiver.stop();\r\n      }\r\n    });\r\n    // FIXME: clean up tracks, local streams, remote streams, etc\r\n    this._isClosed = true;\r\n    this._updateSignalingState('closed');\r\n  };\r\n\r\n  // Update the signaling state.\r\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\r\n    this.signalingState = newState;\r\n    var event = new Event('signalingstatechange');\r\n    this._dispatchEvent('signalingstatechange', event);\r\n  };\r\n\r\n  // Determine whether to fire the negotiationneeded event.\r\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\r\n    var pc = this;\r\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\r\n      return;\r\n    }\r\n    this.needNegotiation = true;\r\n    window.setTimeout(function() {\r\n      if (pc.needNegotiation) {\r\n        pc.needNegotiation = false;\r\n        var event = new Event('negotiationneeded');\r\n        pc._dispatchEvent('negotiationneeded', event);\r\n      }\r\n    }, 0);\r\n  };\r\n\r\n  // Update the ice connection state.\r\n  RTCPeerConnection.prototype._updateIceConnectionState = function() {\r\n    var newState;\r\n    var states = {\r\n      'new': 0,\r\n      closed: 0,\r\n      checking: 0,\r\n      connected: 0,\r\n      completed: 0,\r\n      disconnected: 0,\r\n      failed: 0\r\n    };\r\n    this.transceivers.forEach(function(transceiver) {\r\n      if (transceiver.iceTransport && !transceiver.rejected) {\r\n        states[transceiver.iceTransport.state]++;\r\n      }\r\n    });\r\n\r\n    newState = 'new';\r\n    if (states.failed > 0) {\r\n      newState = 'failed';\r\n    } else if (states.checking > 0) {\r\n      newState = 'checking';\r\n    } else if (states.disconnected > 0) {\r\n      newState = 'disconnected';\r\n    } else if (states.new > 0) {\r\n      newState = 'new';\r\n    } else if (states.connected > 0) {\r\n      newState = 'connected';\r\n    } else if (states.completed > 0) {\r\n      newState = 'completed';\r\n    }\r\n\r\n    if (newState !== this.iceConnectionState) {\r\n      this.iceConnectionState = newState;\r\n      var event = new Event('iceconnectionstatechange');\r\n      this._dispatchEvent('iceconnectionstatechange', event);\r\n    }\r\n  };\r\n\r\n  // Update the connection state.\r\n  RTCPeerConnection.prototype._updateConnectionState = function() {\r\n    var newState;\r\n    var states = {\r\n      'new': 0,\r\n      closed: 0,\r\n      connecting: 0,\r\n      connected: 0,\r\n      completed: 0,\r\n      disconnected: 0,\r\n      failed: 0\r\n    };\r\n    this.transceivers.forEach(function(transceiver) {\r\n      if (transceiver.iceTransport && transceiver.dtlsTransport &&\r\n          !transceiver.rejected) {\r\n        states[transceiver.iceTransport.state]++;\r\n        states[transceiver.dtlsTransport.state]++;\r\n      }\r\n    });\r\n    // ICETransport.completed and connected are the same for this purpose.\r\n    states.connected += states.completed;\r\n\r\n    newState = 'new';\r\n    if (states.failed > 0) {\r\n      newState = 'failed';\r\n    } else if (states.connecting > 0) {\r\n      newState = 'connecting';\r\n    } else if (states.disconnected > 0) {\r\n      newState = 'disconnected';\r\n    } else if (states.new > 0) {\r\n      newState = 'new';\r\n    } else if (states.connected > 0) {\r\n      newState = 'connected';\r\n    }\r\n\r\n    if (newState !== this.connectionState) {\r\n      this.connectionState = newState;\r\n      var event = new Event('connectionstatechange');\r\n      this._dispatchEvent('connectionstatechange', event);\r\n    }\r\n  };\r\n\r\n  RTCPeerConnection.prototype.createOffer = function() {\r\n    var pc = this;\r\n\r\n    if (pc._isClosed) {\r\n      return Promise.reject(makeError('InvalidStateError',\r\n          'Can not call createOffer after close'));\r\n    }\r\n\r\n    var numAudioTracks = pc.transceivers.filter(function(t) {\r\n      return t.kind === 'audio';\r\n    }).length;\r\n    var numVideoTracks = pc.transceivers.filter(function(t) {\r\n      return t.kind === 'video';\r\n    }).length;\r\n\r\n    // Determine number of audio and video tracks we need to send/recv.\r\n    var offerOptions = arguments[0];\r\n    if (offerOptions) {\r\n      // Reject Chrome legacy constraints.\r\n      if (offerOptions.mandatory || offerOptions.optional) {\r\n        throw new TypeError(\r\n            'Legacy mandatory/optional constraints not supported.');\r\n      }\r\n      if (offerOptions.offerToReceiveAudio !== undefined) {\r\n        if (offerOptions.offerToReceiveAudio === true) {\r\n          numAudioTracks = 1;\r\n        } else if (offerOptions.offerToReceiveAudio === false) {\r\n          numAudioTracks = 0;\r\n        } else {\r\n          numAudioTracks = offerOptions.offerToReceiveAudio;\r\n        }\r\n      }\r\n      if (offerOptions.offerToReceiveVideo !== undefined) {\r\n        if (offerOptions.offerToReceiveVideo === true) {\r\n          numVideoTracks = 1;\r\n        } else if (offerOptions.offerToReceiveVideo === false) {\r\n          numVideoTracks = 0;\r\n        } else {\r\n          numVideoTracks = offerOptions.offerToReceiveVideo;\r\n        }\r\n      }\r\n    }\r\n\r\n    pc.transceivers.forEach(function(transceiver) {\r\n      if (transceiver.kind === 'audio') {\r\n        numAudioTracks--;\r\n        if (numAudioTracks < 0) {\r\n          transceiver.wantReceive = false;\r\n        }\r\n      } else if (transceiver.kind === 'video') {\r\n        numVideoTracks--;\r\n        if (numVideoTracks < 0) {\r\n          transceiver.wantReceive = false;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create M-lines for recvonly streams.\r\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\r\n      if (numAudioTracks > 0) {\r\n        pc._createTransceiver('audio');\r\n        numAudioTracks--;\r\n      }\r\n      if (numVideoTracks > 0) {\r\n        pc._createTransceiver('video');\r\n        numVideoTracks--;\r\n      }\r\n    }\r\n\r\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\r\n        pc._sdpSessionVersion++);\r\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\r\n      // For each track, create an ice gatherer, ice transport,\r\n      // dtls transport, potentially rtpsender and rtpreceiver.\r\n      var track = transceiver.track;\r\n      var kind = transceiver.kind;\r\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\r\n      transceiver.mid = mid;\r\n\r\n      if (!transceiver.iceGatherer) {\r\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\r\n            pc.usingBundle);\r\n      }\r\n\r\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\r\n      // filter RTX until additional stuff needed for RTX is implemented\r\n      // in adapter.js\r\n      if (edgeVersion < 15019) {\r\n        localCapabilities.codecs = localCapabilities.codecs.filter(\r\n            function(codec) {\r\n              return codec.name !== 'rtx';\r\n            });\r\n      }\r\n      localCapabilities.codecs.forEach(function(codec) {\r\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\r\n        // by adding level-asymmetry-allowed=1\r\n        if (codec.name === 'H264' &&\r\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\r\n          codec.parameters['level-asymmetry-allowed'] = '1';\r\n        }\r\n\r\n        // for subsequent offers, we might have to re-use the payload\r\n        // type of the last offer.\r\n        if (transceiver.remoteCapabilities &&\r\n            transceiver.remoteCapabilities.codecs) {\r\n          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {\r\n            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&\r\n                codec.clockRate === remoteCodec.clockRate) {\r\n              codec.preferredPayloadType = remoteCodec.payloadType;\r\n            }\r\n          });\r\n        }\r\n      });\r\n      localCapabilities.headerExtensions.forEach(function(hdrExt) {\r\n        var remoteExtensions = transceiver.remoteCapabilities &&\r\n            transceiver.remoteCapabilities.headerExtensions || [];\r\n        remoteExtensions.forEach(function(rHdrExt) {\r\n          if (hdrExt.uri === rHdrExt.uri) {\r\n            hdrExt.id = rHdrExt.id;\r\n          }\r\n        });\r\n      });\r\n\r\n      // generate an ssrc now, to be used later in rtpSender.send\r\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\r\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\r\n      }];\r\n      if (track) {\r\n        // add RTX\r\n        if (edgeVersion >= 15019 && kind === 'video' &&\r\n            !sendEncodingParameters[0].rtx) {\r\n          sendEncodingParameters[0].rtx = {\r\n            ssrc: sendEncodingParameters[0].ssrc + 1\r\n          };\r\n        }\r\n      }\r\n\r\n      if (transceiver.wantReceive) {\r\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\r\n            transceiver.dtlsTransport, kind);\r\n      }\r\n\r\n      transceiver.localCapabilities = localCapabilities;\r\n      transceiver.sendEncodingParameters = sendEncodingParameters;\r\n    });\r\n\r\n    // always offer BUNDLE and dispose on return if not supported.\r\n    if (pc._config.bundlePolicy !== 'max-compat') {\r\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\r\n        return t.mid;\r\n      }).join(' ') + '\\r\\n';\r\n    }\r\n    sdp += 'a=ice-options:trickle\\r\\n';\r\n\r\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\r\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\r\n          'offer', transceiver.stream, pc._dtlsRole);\r\n      sdp += 'a=rtcp-rsize\\r\\n';\r\n\r\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\r\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\r\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\r\n          cand.component = 1;\r\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\r\n        });\r\n\r\n        if (transceiver.iceGatherer.state === 'completed') {\r\n          sdp += 'a=end-of-candidates\\r\\n';\r\n        }\r\n      }\r\n    });\r\n\r\n    var desc = new window.RTCSessionDescription({\r\n      type: 'offer',\r\n      sdp: sdp\r\n    });\r\n    return Promise.resolve(desc);\r\n  };\r\n\r\n  RTCPeerConnection.prototype.createAnswer = function() {\r\n    var pc = this;\r\n\r\n    if (pc._isClosed) {\r\n      return Promise.reject(makeError('InvalidStateError',\r\n          'Can not call createAnswer after close'));\r\n    }\r\n\r\n    if (!(pc.signalingState === 'have-remote-offer' ||\r\n        pc.signalingState === 'have-local-pranswer')) {\r\n      return Promise.reject(makeError('InvalidStateError',\r\n          'Can not call createAnswer in signalingState ' + pc.signalingState));\r\n    }\r\n\r\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\r\n        pc._sdpSessionVersion++);\r\n    if (pc.usingBundle) {\r\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\r\n        return t.mid;\r\n      }).join(' ') + '\\r\\n';\r\n    }\r\n    sdp += 'a=ice-options:trickle\\r\\n';\r\n\r\n    var mediaSectionsInOffer = SDPUtils.getMediaSections(\r\n        pc._remoteDescription.sdp).length;\r\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\r\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\r\n        return;\r\n      }\r\n      if (transceiver.rejected) {\r\n        if (transceiver.kind === 'application') {\r\n          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt\r\n            sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n';\r\n          } else {\r\n            sdp += 'm=application 0 ' + transceiver.protocol +\r\n                ' webrtc-datachannel\\r\\n';\r\n          }\r\n        } else if (transceiver.kind === 'audio') {\r\n          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\\r\\n' +\r\n              'a=rtpmap:0 PCMU/8000\\r\\n';\r\n        } else if (transceiver.kind === 'video') {\r\n          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\\r\\n' +\r\n              'a=rtpmap:120 VP8/90000\\r\\n';\r\n        }\r\n        sdp += 'c=IN IP4 0.0.0.0\\r\\n' +\r\n            'a=inactive\\r\\n' +\r\n            'a=mid:' + transceiver.mid + '\\r\\n';\r\n        return;\r\n      }\r\n\r\n      // FIXME: look at direction.\r\n      if (transceiver.stream) {\r\n        var localTrack;\r\n        if (transceiver.kind === 'audio') {\r\n          localTrack = transceiver.stream.getAudioTracks()[0];\r\n        } else if (transceiver.kind === 'video') {\r\n          localTrack = transceiver.stream.getVideoTracks()[0];\r\n        }\r\n        if (localTrack) {\r\n          // add RTX\r\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\r\n              !transceiver.sendEncodingParameters[0].rtx) {\r\n            transceiver.sendEncodingParameters[0].rtx = {\r\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\r\n            };\r\n          }\r\n        }\r\n      }\r\n\r\n      // Calculate intersection of capabilities.\r\n      var commonCapabilities = getCommonCapabilities(\r\n          transceiver.localCapabilities,\r\n          transceiver.remoteCapabilities);\r\n\r\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\r\n        return c.name.toLowerCase() === 'rtx';\r\n      }).length;\r\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\r\n        delete transceiver.sendEncodingParameters[0].rtx;\r\n      }\r\n\r\n      sdp += writeMediaSection(transceiver, commonCapabilities,\r\n          'answer', transceiver.stream, pc._dtlsRole);\r\n      if (transceiver.rtcpParameters &&\r\n          transceiver.rtcpParameters.reducedSize) {\r\n        sdp += 'a=rtcp-rsize\\r\\n';\r\n      }\r\n    });\r\n\r\n    var desc = new window.RTCSessionDescription({\r\n      type: 'answer',\r\n      sdp: sdp\r\n    });\r\n    return Promise.resolve(desc);\r\n  };\r\n\r\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\r\n    var pc = this;\r\n    var sections;\r\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\r\n        candidate.sdpMid)) {\r\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\r\n    }\r\n\r\n    // TODO: needs to go into ops queue.\r\n    return new Promise(function(resolve, reject) {\r\n      if (!pc._remoteDescription) {\r\n        return reject(makeError('InvalidStateError',\r\n            'Can not add ICE candidate without a remote description'));\r\n      } else if (!candidate || candidate.candidate === '') {\r\n        for (var j = 0; j < pc.transceivers.length; j++) {\r\n          if (pc.transceivers[j].rejected) {\r\n            continue;\r\n          }\r\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\r\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\r\n          sections[j] += 'a=end-of-candidates\\r\\n';\r\n          pc._remoteDescription.sdp =\r\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\r\n              sections.join('');\r\n          if (pc.usingBundle) {\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        var sdpMLineIndex = candidate.sdpMLineIndex;\r\n        if (candidate.sdpMid) {\r\n          for (var i = 0; i < pc.transceivers.length; i++) {\r\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\r\n              sdpMLineIndex = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        var transceiver = pc.transceivers[sdpMLineIndex];\r\n        if (transceiver) {\r\n          if (transceiver.rejected) {\r\n            return resolve();\r\n          }\r\n          var cand = Object.keys(candidate.candidate).length > 0 ?\r\n              SDPUtils.parseCandidate(candidate.candidate) : {};\r\n          // Ignore Chrome's invalid candidates since Edge does not like them.\r\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\r\n            return resolve();\r\n          }\r\n          // Ignore RTCP candidates, we assume RTCP-MUX.\r\n          if (cand.component && cand.component !== 1) {\r\n            return resolve();\r\n          }\r\n          // when using bundle, avoid adding candidates to the wrong\r\n          // ice transport. And avoid adding candidates added in the SDP.\r\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\r\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\r\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\r\n              return reject(makeError('OperationError',\r\n                  'Can not add ICE candidate'));\r\n            }\r\n          }\r\n\r\n          // update the remoteDescription.\r\n          var candidateString = candidate.candidate.trim();\r\n          if (candidateString.indexOf('a=') === 0) {\r\n            candidateString = candidateString.substr(2);\r\n          }\r\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\r\n          sections[sdpMLineIndex] += 'a=' +\r\n              (cand.type ? candidateString : 'end-of-candidates')\r\n              + '\\r\\n';\r\n          pc._remoteDescription.sdp =\r\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\r\n              sections.join('');\r\n        } else {\r\n          return reject(makeError('OperationError',\r\n              'Can not add ICE candidate'));\r\n        }\r\n      }\r\n      resolve();\r\n    });\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getStats = function(selector) {\r\n    if (selector && selector instanceof window.MediaStreamTrack) {\r\n      var senderOrReceiver = null;\r\n      this.transceivers.forEach(function(transceiver) {\r\n        if (transceiver.rtpSender &&\r\n            transceiver.rtpSender.track === selector) {\r\n          senderOrReceiver = transceiver.rtpSender;\r\n        } else if (transceiver.rtpReceiver &&\r\n            transceiver.rtpReceiver.track === selector) {\r\n          senderOrReceiver = transceiver.rtpReceiver;\r\n        }\r\n      });\r\n      if (!senderOrReceiver) {\r\n        throw makeError('InvalidAccessError', 'Invalid selector.');\r\n      }\r\n      return senderOrReceiver.getStats();\r\n    }\r\n\r\n    var promises = [];\r\n    this.transceivers.forEach(function(transceiver) {\r\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\r\n          'dtlsTransport'].forEach(function(method) {\r\n            if (transceiver[method]) {\r\n              promises.push(transceiver[method].getStats());\r\n            }\r\n          });\r\n    });\r\n    return Promise.all(promises).then(function(allStats) {\r\n      var results = new Map();\r\n      allStats.forEach(function(stats) {\r\n        stats.forEach(function(stat) {\r\n          results.set(stat.id, stat);\r\n        });\r\n      });\r\n      return results;\r\n    });\r\n  };\r\n\r\n  // fix low-level stat names and return Map instead of object.\r\n  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',\r\n    'RTCIceTransport', 'RTCDtlsTransport'];\r\n  ortcObjects.forEach(function(ortcObjectName) {\r\n    var obj = window[ortcObjectName];\r\n    if (obj && obj.prototype && obj.prototype.getStats) {\r\n      var nativeGetstats = obj.prototype.getStats;\r\n      obj.prototype.getStats = function() {\r\n        return nativeGetstats.apply(this)\r\n        .then(function(nativeStats) {\r\n          var mapStats = new Map();\r\n          Object.keys(nativeStats).forEach(function(id) {\r\n            nativeStats[id].type = fixStatsType(nativeStats[id]);\r\n            mapStats.set(id, nativeStats[id]);\r\n          });\r\n          return mapStats;\r\n        });\r\n      };\r\n    }\r\n  });\r\n\r\n  // legacy callback shims. Should be moved to adapter.js some days.\r\n  var methods = ['createOffer', 'createAnswer'];\r\n  methods.forEach(function(method) {\r\n    var nativeMethod = RTCPeerConnection.prototype[method];\r\n    RTCPeerConnection.prototype[method] = function() {\r\n      var args = arguments;\r\n      if (typeof args[0] === 'function' ||\r\n          typeof args[1] === 'function') { // legacy\r\n        return nativeMethod.apply(this, [arguments[2]])\r\n        .then(function(description) {\r\n          if (typeof args[0] === 'function') {\r\n            args[0].apply(null, [description]);\r\n          }\r\n        }, function(error) {\r\n          if (typeof args[1] === 'function') {\r\n            args[1].apply(null, [error]);\r\n          }\r\n        });\r\n      }\r\n      return nativeMethod.apply(this, arguments);\r\n    };\r\n  });\r\n\r\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\r\n  methods.forEach(function(method) {\r\n    var nativeMethod = RTCPeerConnection.prototype[method];\r\n    RTCPeerConnection.prototype[method] = function() {\r\n      var args = arguments;\r\n      if (typeof args[1] === 'function' ||\r\n          typeof args[2] === 'function') { // legacy\r\n        return nativeMethod.apply(this, arguments)\r\n        .then(function() {\r\n          if (typeof args[1] === 'function') {\r\n            args[1].apply(null);\r\n          }\r\n        }, function(error) {\r\n          if (typeof args[2] === 'function') {\r\n            args[2].apply(null, [error]);\r\n          }\r\n        });\r\n      }\r\n      return nativeMethod.apply(this, arguments);\r\n    };\r\n  });\r\n\r\n  // getStats is special. It doesn't have a spec legacy method yet we support\r\n  // getStats(something, cb) without error callbacks.\r\n  ['getStats'].forEach(function(method) {\r\n    var nativeMethod = RTCPeerConnection.prototype[method];\r\n    RTCPeerConnection.prototype[method] = function() {\r\n      var args = arguments;\r\n      if (typeof args[1] === 'function') {\r\n        return nativeMethod.apply(this, arguments)\r\n        .then(function() {\r\n          if (typeof args[1] === 'function') {\r\n            args[1].apply(null);\r\n          }\r\n        });\r\n      }\r\n      return nativeMethod.apply(this, arguments);\r\n    };\r\n  });\r\n\r\n  return RTCPeerConnection;\r\n};\r\n","/* global __filename, RTCSessionDescription */\r\n\r\nimport { Interop } from '@jitsi/sdp-interop';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport transform from 'sdp-transform';\r\n\r\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\r\nimport * as VideoType from '../../service/RTC/VideoType';\r\nimport browser from '../browser';\r\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport RtxModifier from '../xmpp/RtxModifier';\r\nimport SDP from '../xmpp/SDP';\r\nimport SDPUtil from '../xmpp/SDPUtil';\r\nimport SdpConsistency from '../xmpp/SdpConsistency';\r\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\n\r\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\r\nimport LocalSdpMunger from './LocalSdpMunger';\r\nimport RTC from './RTC';\r\nimport RTCUtils from './RTCUtils';\r\nimport { SIM_LAYER_RIDS, TPCUtils } from './TPCUtils';\r\nimport SdpSimulcast from '../xmpp/SdpSimulcast.ts';\r\n\r\n// FIXME SDP tools should end up in some kind of util module\r\n\r\nconst logger = getLogger(__filename);\r\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\r\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\r\nconst DESKSTOP_SHARE_RATE = 500000;\r\nconst HD_BITRATE = 2500000;\r\nconst LD_BITRATE = 200000;\r\nconst SD_BITRATE = 700000;\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Creates new instance of 'TraceablePeerConnection'.\r\n *\r\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\r\n * @param {number} id the peer connection id assigned by the parent RTC module.\r\n * @param {SignalingLayer} signalingLayer the signaling layer instance\r\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\r\n * @param {object} constraints WebRTC 'PeerConnection' constraints\r\n * @param {boolean} isP2P indicates whether or not the new instance will be used\r\n * in a peer to peer connection\r\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\r\n * @param {boolean} options.disableSimulcast if set to 'true' will disable\r\n * the simulcast.\r\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX\r\n * @param {boolean} options.capScreenshareBitrate if set to 'true' simulcast will\r\n * be disabled for screenshare and a max bitrate of 500Kbps will applied on the\r\n * stream.\r\n * @param {string} options.disabledCodec the mime type of the code that should\r\n * not be negotiated on the peerconnection.\r\n * @param {boolean} options.disableH264 If set to 'true' H264 will be\r\n *      disabled by removing it from the SDP (deprecated)\r\n * @param {boolean} options.preferH264 if set to 'true' H264 will be preferred\r\n * over other video codecs. (deprecated)\r\n * @param {string} options.preferredCodec the mime type of the codec that needs\r\n * to be made the preferred codec for the connection.\r\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\r\n *\r\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\r\n * debug the peer connection. Since many other responsibilities have been added\r\n * it would make sense to extract a separate class from it and come up with\r\n * a more suitable name.\r\n *\r\n * @constructor\r\n */\r\nexport default function TraceablePeerConnection(\r\n        rtc,\r\n        id,\r\n        signalingLayer,\r\n        iceConfig,\r\n        constraints,\r\n        isP2P,\r\n        options) {\r\n\r\n    /**\r\n     * Indicates whether or not this peer connection instance is actively\r\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\r\n     * media direction will be adjusted to 'inactive' in order to suspend\r\n     * the transmission.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.audioTransferActive = !(options.startSilent === true);\r\n\r\n    /**\r\n     * The DTMF sender instance used to send DTMF tones.\r\n     *\r\n     * @type {RTCDTMFSender|undefined}\r\n     * @private\r\n     */\r\n    this._dtmfSender = undefined;\r\n\r\n    /**\r\n     * @typedef {Object} TouchToneRequest\r\n     * @property {string} tones - The DTMF tones string as defined by\r\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\r\n     * @property {number} duration - The amount of time in milliseconds that\r\n     * each DTMF should last.\r\n     * @property {string} interToneGap - The length of time in miliseconds to\r\n     * wait between tones.\r\n     */\r\n    /**\r\n     * TouchToneRequests which are waiting to be played. This queue is filled\r\n     * if there are touch tones currently being played.\r\n     *\r\n     * @type {Array<TouchToneRequest>}\r\n     * @private\r\n     */\r\n    this._dtmfTonesQueue = [];\r\n\r\n    /**\r\n     * Indicates whether or not this peer connection instance is actively\r\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\r\n     * media direction will be adjusted to 'inactive' in order to suspend\r\n     * the transmission.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.videoTransferActive = true;\r\n\r\n    /**\r\n     * The parent instance of RTC service which created this\r\n     * <tt>TracablePeerConnection</tt>.\r\n     * @type {RTC}\r\n     */\r\n    this.rtc = rtc;\r\n\r\n    /**\r\n     * The peer connection identifier assigned by the RTC module.\r\n     * @type {number}\r\n     */\r\n    this.id = id;\r\n\r\n    /**\r\n     * Indicates whether or not this instance is used in a peer to peer\r\n     * connection.\r\n     * @type {boolean}\r\n     */\r\n    this.isP2P = isP2P;\r\n\r\n    // FIXME: We should support multiple streams per jid.\r\n    /**\r\n     * The map holds remote tracks associated with this peer connection.\r\n     * It maps user's JID to media type and remote track\r\n     * (one track per media type per user's JID).\r\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\r\n     */\r\n    this.remoteTracks = new Map();\r\n\r\n    /**\r\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\r\n     * @type {Map<number, JitsiLocalTrack>}\r\n     */\r\n    this.localTracks = new Map();\r\n\r\n    /**\r\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\r\n     * the underlying WebRTC PeerConnection.\r\n     * @type {Array}\r\n     * @private\r\n     */\r\n    this._addedStreams = [];\r\n\r\n    /**\r\n     * @typedef {Object} TPCGroupInfo\r\n     * @property {string} semantics the SSRC groups semantics\r\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\r\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\r\n     * on...\r\n     */\r\n    /**\r\n     * @typedef {Object} TPCSSRCInfo\r\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\r\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\r\n     * groups\r\n     */\r\n    /**\r\n     * Holds the info about local track's SSRCs mapped per their\r\n     * {@link JitsiLocalTrack.rtcId}\r\n     * @type {Map<number, TPCSSRCInfo>}\r\n     */\r\n    this.localSSRCs = new Map();\r\n\r\n    /**\r\n     * The local ICE username fragment for this session.\r\n     */\r\n    this.localUfrag = null;\r\n\r\n    /**\r\n     * The remote ICE username fragment for this session.\r\n     */\r\n    this.remoteUfrag = null;\r\n\r\n    /**\r\n     * The signaling layer which operates this peer connection.\r\n     * @type {SignalingLayer}\r\n     */\r\n    this.signalingLayer = signalingLayer;\r\n\r\n    // SignalingLayer listeners\r\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\r\n    this.signalingLayer.on(\r\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\r\n        this._peerVideoTypeChanged);\r\n\r\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\r\n    this.signalingLayer.on(\r\n        SignalingEvents.PEER_MUTED_CHANGED,\r\n        this._peerMutedChanged);\r\n    this.options = options;\r\n\r\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\r\n    // connection is P2P to rtcstats.\r\n    const safeConstraints = constraints || {};\r\n\r\n    safeConstraints.optional = safeConstraints.optional || [];\r\n\r\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\r\n    // Firefox and Safari just ignore it.\r\n    if (Array.isArray(safeConstraints.optional)) {\r\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\r\n    } else {\r\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\r\n    }\r\n\r\n    this.peerconnection\r\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, safeConstraints);\r\n\r\n    // The standard video bitrates are used in Unified plan when switching\r\n    // between camera/desktop tracks on the same sender.\r\n    const standardVideoBitrates = {\r\n        low: LD_BITRATE,\r\n        standard: SD_BITRATE,\r\n        high: HD_BITRATE\r\n    };\r\n\r\n    // Check if the max. bitrates for video are specified through config.js videoQuality settings.\r\n    // These bitrates will be applied on all browsers for camera sources in both simulcast and p2p mode.\r\n    this.videoBitrates = this.options.videoQuality && this.options.videoQuality.maxBitratesVideo\r\n        ? this.options.videoQuality.maxBitratesVideo\r\n        : standardVideoBitrates;\r\n\r\n    this.tpcUtils = new TPCUtils(this, this.videoBitrates);\r\n    this.updateLog = [];\r\n    this.stats = {};\r\n    this.statsinterval = null;\r\n\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && browser.usesUnifiedPlan();\r\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\r\n\r\n    /**\r\n     * @type {number} The max number of stats to keep in this.stats. Limit to\r\n     * 300 values, i.e. 5 minutes; set to 0 to disable\r\n     */\r\n    this.maxstats = options.maxstats;\r\n\r\n    this.interop = new Interop();\r\n\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    // this.simulcast = new Simulcast(\r\n    //     {\r\n    //         numOfLayers: SIM_LAYER_RIDS.length,\r\n    //         explodeRemoteSimulcast: false,\r\n    //         usesUnifiedPlan: browser.usesUnifiedPlan()\r\n    //     });\r\n    if (browser.usesUnifiedPlan()) {\r\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length })\r\n    } else {\r\n        const Simulcast = require('@jitsi/sdp-simulcast');\r\n\r\n        this.simulcast = new Simulcast(\r\n            {\r\n                numOfLayers: SIM_LAYER_RIDS.length,\r\n                explodeRemoteSimulcast: false,\r\n                usesUnifiedPlan: false\r\n            });\r\n    }\r\n\r\n    this.sdpConsistency = new SdpConsistency(this.toString());\r\n\r\n    /**\r\n     * Munges local SDP provided to the Jingle Session in order to prevent from\r\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\r\n     * @type {LocalSdpMunger}\r\n     */\r\n    this.localSdpMunger = new LocalSdpMunger(this);\r\n\r\n    /**\r\n     * TracablePeerConnection uses RTC's eventEmitter\r\n     * @type {EventEmitter}\r\n     */\r\n    this.eventEmitter = rtc.eventEmitter;\r\n    this.rtxModifier = new RtxModifier();\r\n\r\n    /**\r\n     * The height constraint applied on the video sender.\r\n     */\r\n    this.senderVideoMaxHeight = null;\r\n\r\n    // We currently support preferring/disabling video codecs only.\r\n    const getCodecMimeType = codec => {\r\n        if (typeof codec === 'string') {\r\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    // Set the codec preference that will be applied on the SDP based on the config.js settings.\r\n    let preferredCodec = getCodecMimeType(\r\n        this.options.preferredCodec || (this.options.preferH264 && CodecMimeType.H264)\r\n    );\r\n\r\n    // Do not prefer VP9 on Firefox because of the following bug.\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1633876\r\n    if (browser.isFirefox() && preferredCodec === CodecMimeType.VP9) {\r\n        preferredCodec = null;\r\n    }\r\n\r\n    // Determine the codec that needs to be disabled based on config.js settings.\r\n    let disabledCodec = getCodecMimeType(\r\n        this.options.disabledCodec || (this.options.disableH264 && CodecMimeType.H264)\r\n    );\r\n\r\n    // Make sure we don't disable VP8 since it is a mandatory codec.\r\n    if (disabledCodec === CodecMimeType.VP8) {\r\n        logger.warn('Disabling VP8 is not permitted, setting is ignored!');\r\n        disabledCodec = null;\r\n    }\r\n\r\n    if (preferredCodec || disabledCodec) {\r\n        // If both enable and disable are set for the same codec, disable setting will prevail.\r\n        this.codecPreference = {\r\n            enable: disabledCodec === null,\r\n            mediaType: MediaType.VIDEO,\r\n            mimeType: disabledCodec ? disabledCodec : preferredCodec\r\n        };\r\n    }\r\n\r\n    // override as desired\r\n    this.trace = (what, info) => {\r\n        logger.debug(what, info);\r\n\r\n        this.updateLog.push({\r\n            time: new Date(),\r\n            type: what,\r\n            value: info || ''\r\n        });\r\n    };\r\n    this.onicecandidate = null;\r\n    this.peerconnection.onicecandidate = event => {\r\n        this.trace(\r\n            'onicecandidate',\r\n            JSON.stringify(event.candidate, null, ' '));\r\n\r\n        if (this.onicecandidate !== null) {\r\n            this.onicecandidate(event);\r\n        }\r\n    };\r\n\r\n    // Use stream events in plan-b and track events in unified plan.\r\n    if (browser.usesPlanB()) {\r\n        this.peerconnection.onaddstream\r\n            = event => this._remoteStreamAdded(event.stream);\r\n        this.peerconnection.onremovestream\r\n            = event => this._remoteStreamRemoved(event.stream);\r\n    } else {\r\n        this.peerconnection.ontrack = event => {\r\n            const stream = event.streams[0];\r\n\r\n            this._remoteTrackAdded(stream, event.track, event.transceiver);\r\n            stream.onremovetrack = evt => {\r\n                this._remoteTrackRemoved(stream, evt.track);\r\n            };\r\n        };\r\n    }\r\n    this.onsignalingstatechange = null;\r\n    this.peerconnection.onsignalingstatechange = event => {\r\n        this.trace('onsignalingstatechange', this.signalingState);\r\n        if (this.onsignalingstatechange !== null) {\r\n            this.onsignalingstatechange(event);\r\n        }\r\n    };\r\n    this.oniceconnectionstatechange = null;\r\n    this.peerconnection.oniceconnectionstatechange = event => {\r\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\r\n        if (this.oniceconnectionstatechange !== null) {\r\n            this.oniceconnectionstatechange(event);\r\n        }\r\n    };\r\n    this.onnegotiationneeded = null;\r\n    this.peerconnection.onnegotiationneeded = event => {\r\n        this.trace('onnegotiationneeded');\r\n        if (this.onnegotiationneeded !== null) {\r\n            this.onnegotiationneeded(event);\r\n        }\r\n    };\r\n    this.ondatachannel = null;\r\n    this.peerconnection.ondatachannel = event => {\r\n        this.trace('ondatachannel');\r\n        if (this.ondatachannel !== null) {\r\n            this.ondatachannel(event);\r\n        }\r\n    };\r\n\r\n    if (this.maxstats) {\r\n        this.statsinterval = window.setInterval(() => {\r\n            this.getStats(stats => {\r\n                if (stats.result\r\n                    && typeof stats.result === 'function') {\r\n                    const results = stats.result();\r\n\r\n                    for (let i = 0; i < results.length; ++i) {\r\n                        const res = results[i];\r\n\r\n                        res.names().forEach(name => {\r\n                            this._processStat(res, name, res.stat(name));\r\n                        });\r\n                    }\r\n                } else {\r\n                    stats.forEach(r => this._processStat(r, '', r));\r\n                }\r\n            }, () => {\r\n\r\n                // empty error callback\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    logger.info(`Create new ${this}`);\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Process stat and adds it to the array of stats we store.\r\n * @param report the current stats report.\r\n * @param name the name of the report, if available\r\n * @param statValue the value to add.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._processStat\r\n    = function(report, name, statValue) {\r\n        const id = `${report.id}-${name}`;\r\n        let s = this.stats[id];\r\n        const now = new Date();\r\n\r\n        if (!s) {\r\n            this.stats[id] = s = {\r\n                startTime: now,\r\n                endTime: now,\r\n                values: [],\r\n                times: []\r\n            };\r\n        }\r\n        s.values.push(statValue);\r\n        s.times.push(now.getTime());\r\n        if (s.values.length > this.maxstats) {\r\n            s.values.shift();\r\n            s.times.shift();\r\n        }\r\n        s.endTime = now;\r\n    };\r\n\r\n/**\r\n * Returns a string representation of a SessionDescription object.\r\n */\r\nconst dumpSDP = function(description) {\r\n    if (typeof description === 'undefined' || description === null) {\r\n        return '';\r\n    }\r\n\r\n    return `type: ${description.type}\\r\\n${description.sdp}`;\r\n};\r\n\r\n\r\n/**\r\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\r\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\r\n * succeeded and is up and running. We never see \"completed\" state for\r\n * the JVB connection, but it started appearing for the P2P one. This method\r\n * allows to adapt old logic to this new situation.\r\n * @return {string}\r\n */\r\nTraceablePeerConnection.prototype.getConnectionState = function() {\r\n    const state = this.peerconnection.iceConnectionState;\r\n\r\n    if (state === 'completed') {\r\n        return 'connected';\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\n/**\r\n * Obtains the media direction for given {@link MediaType}. The method takes\r\n * into account whether or not there are any local tracks for media and\r\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\r\n * @param {MediaType} mediaType\r\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\r\n * etc.) which should be used when setting local description on the peer\r\n * connection.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._getDesiredMediaDirection = function(\r\n        mediaType) {\r\n    let mediaTransferActive = true;\r\n\r\n    if (mediaType === MediaType.AUDIO) {\r\n        mediaTransferActive = this.audioTransferActive;\r\n    } else if (mediaType === MediaType.VIDEO) {\r\n        mediaTransferActive = this.videoTransferActive;\r\n    }\r\n    if (mediaTransferActive) {\r\n        return this.hasAnyTracksOfType(mediaType) ? 'sendrecv' : 'recvonly';\r\n    }\r\n\r\n    return 'inactive';\r\n};\r\n\r\n/**\r\n * Tells whether or not this TPC instance is using Simulcast.\r\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\r\n * <tt>false</tt> if it's turned off.\r\n */\r\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\r\n    return !this.options.disableSimulcast;\r\n};\r\n\r\n/**\r\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\r\n * @param {string} endpointId the video owner's ID (MUC nickname)\r\n * @param {VideoType} videoType the new value\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\r\n        endpointId,\r\n        videoType) {\r\n    // Check if endpointId has a value to avoid action on random track\r\n    if (!endpointId) {\r\n        logger.error(`No endpointID on peerVideoTypeChanged ${this}`);\r\n\r\n        return;\r\n    }\r\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\r\n\r\n    if (videoTrack.length) {\r\n        // NOTE 1 track per media type is assumed\r\n        videoTrack[0]._setVideoType(videoType);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles remote track mute / unmute events.\r\n * @param {string} endpointId the track owner's identifier (MUC nickname)\r\n * @param {MediaType} mediaType \"audio\" or \"video\"\r\n * @param {boolean} isMuted the new mute state\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._peerMutedChanged = function(\r\n        endpointId,\r\n        mediaType,\r\n        isMuted) {\r\n    // Check if endpointId is a value to avoid doing action on all remote tracks\r\n    if (!endpointId) {\r\n        logger.error('On peerMuteChanged - no endpoint ID');\r\n\r\n        return;\r\n    }\r\n    const track = this.getRemoteTracks(endpointId, mediaType);\r\n\r\n    if (track.length) {\r\n        // NOTE 1 track per media type is assumed\r\n        track[0].setMute(isMuted);\r\n    }\r\n};\r\n\r\n/**\r\n * Obtains audio levels of the remote audio tracks by getting the source\r\n * information on the RTCRtpReceivers. The information relevant to the ssrc\r\n * is updated each time a RTP packet constaining the ssrc is received.\r\n * @returns {Object} containing ssrc and audio level information as a\r\n * key-value pair.\r\n */\r\nTraceablePeerConnection.prototype.getAudioLevels = function() {\r\n    const audioLevels = {};\r\n    const audioReceivers = this.peerconnection.getReceivers()\r\n        .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO);\r\n\r\n    audioReceivers.forEach(remote => {\r\n        const ssrc = remote.getSynchronizationSources();\r\n\r\n        if (ssrc && ssrc.length) {\r\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\r\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\r\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\r\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\r\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\r\n        }\r\n    });\r\n\r\n    return audioLevels;\r\n};\r\n\r\n/**\r\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\r\n * argument is omitted the list of all local tracks will be returned.\r\n * @param {MediaType} [mediaType]\r\n * @return {Array<JitsiLocalTrack>}\r\n */\r\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\r\n    let tracks = Array.from(this.localTracks.values());\r\n\r\n    if (mediaType !== undefined) {\r\n        tracks = tracks.filter(track => track.getType() === mediaType);\r\n    }\r\n\r\n    return tracks;\r\n};\r\n\r\n/**\r\n * Retrieves the local video track.\r\n *\r\n * @returns {JitsiLocalTrack|undefined} - local video track.\r\n */\r\nTraceablePeerConnection.prototype.getLocalVideoTrack = function() {\r\n    return this.getLocalTracks(MediaType.VIDEO)[0];\r\n};\r\n\r\n/**\r\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\r\n * any local tracks for given <tt>mediaType</tt>.\r\n * @param {MediaType} mediaType\r\n * @return {boolean}\r\n */\r\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\r\n    if (!mediaType) {\r\n        throw new Error('\"mediaType\" is required');\r\n    }\r\n\r\n    return this.getLocalTracks(mediaType).length > 0;\r\n};\r\n\r\n/**\r\n * Obtains all remote tracks currently known to this PeerConnection instance.\r\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\r\n * @param {MediaType} [mediaType] the remote tracks will be filtered\r\n * by their media type if this argument is specified.\r\n * @return {Array<JitsiRemoteTrack>}\r\n */\r\nTraceablePeerConnection.prototype.getRemoteTracks = function(\r\n        endpointId,\r\n        mediaType) {\r\n    let remoteTracks = [];\r\n    const endpoints\r\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\r\n\r\n        for (const endpoint of endpoints) {\r\n            const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\r\n    \r\n            if (endpointTracksByMediaType) {\r\n                for (const trackMediaType of endpointTracksByMediaType.keys()) {\r\n                    // per media type filtering\r\n                    if (!mediaType || mediaType === trackMediaType) {\r\n                        remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    return remoteTracks;\r\n};\r\n\r\n/**\r\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\r\n * local and remote tracks bound to this instance.\r\n * @param {number} ssrc\r\n * @return {JitsiTrack|null}\r\n */\r\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\r\n    if (typeof ssrc !== 'number') {\r\n        throw new Error(`SSRC ${ssrc} is not a number`);\r\n    }\r\n    for (const localTrack of this.localTracks.values()) {\r\n        if (this.getLocalSSRC(localTrack) === ssrc) {\r\n            return localTrack;\r\n        }\r\n    }\r\n    for (const remoteTrack of this.getRemoteTracks()) {\r\n        if (remoteTrack.getSSRC() === ssrc) {\r\n            return remoteTrack;\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\r\n * both local and remote tracks bound to this instance.\r\n * @param {string} id\r\n * @return {number|null}\r\n */\r\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\r\n\r\n    const findTrackById = track => track.getTrack().id === id;\r\n    const localTrack = this.getLocalTracks().find(findTrackById);\r\n\r\n    if (localTrack) {\r\n        return this.getLocalSSRC(localTrack);\r\n    }\r\n\r\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\r\n\r\n    if (remoteTrack) {\r\n        return remoteTrack.getSSRC();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Called when new remote MediaStream is added to the PeerConnection.\r\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\r\n */\r\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\r\n    const streamId = RTC.getStreamID(stream);\r\n\r\n    if (!RTC.isUserStreamById(streamId)) {\r\n        logger.info(\r\n            `${this} ignored remote 'stream added' event for non-user stream`\r\n             + `id: ${streamId}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Bind 'addtrack'/'removetrack' event handlers\r\n    if (browser.isChromiumBased()) {\r\n        stream.onaddtrack = event => {\r\n            this._remoteTrackAdded(stream, event.track);\r\n        };\r\n        stream.onremovetrack = event => {\r\n            this._remoteTrackRemoved(stream, event.track);\r\n        };\r\n    }\r\n\r\n    // Call remoteTrackAdded for each track in the stream\r\n    const streamAudioTracks = stream.getAudioTracks();\r\n\r\n    for (const audioTrack of streamAudioTracks) {\r\n        this._remoteTrackAdded(stream, audioTrack);\r\n    }\r\n    const streamVideoTracks = stream.getVideoTracks();\r\n\r\n    for (const videoTrack of streamVideoTracks) {\r\n        this._remoteTrackAdded(stream, videoTrack);\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\r\n * handle streams on per track basis). Finds the owner and the SSRC for\r\n * the track and passes that to ChatRoom for further processing.\r\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\r\n * the parent of the track\r\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\r\n * participant.\r\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\r\n * for the remote participant in unified plan.\r\n */\r\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\r\n    const streamId = RTC.getStreamID(stream);\r\n    const mediaType = track.kind;\r\n\r\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\r\n        logger.info(\r\n            `${this} ignored remote 'stream added' event for non-user stream`\r\n             + `id: ${streamId}`);\r\n\r\n        return;\r\n    }\r\n    logger.info(`${this} remote track added:`, streamId, mediaType);\r\n\r\n    // look up an associated JID for a stream id\r\n    if (!mediaType) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `MediaType undefined for remote track, stream id: ${streamId}`\r\n            ));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    const remoteSDP = browser.usesPlanB()\r\n        ? new SDP(this.remoteDescription.sdp)\r\n        : new SDP(this.peerconnection.remoteDescription.sdp);\r\n    let mediaLines;\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        if (transceiver && transceiver.mid) {\r\n            const mid = transceiver.mid;\r\n\r\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\r\n        } else {\r\n            mediaLines = remoteSDP.media.filter(mls => {\r\n                const msid = SDPUtil.findLine(mls, 'a=msid');\r\n\r\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\r\n            });\r\n        }\r\n    } else {\r\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\r\n    }\r\n\r\n    if (!mediaLines.length) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No media lines for type ${\r\n                    mediaType} found in remote SDP for remote track: ${\r\n                    streamId}`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\r\n\r\n    ssrcLines\r\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\r\n    if (!ssrcLines.length) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No SSRC lines for streamId ${\r\n                    streamId} for remote track, media type: ${mediaType}`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\r\n    // with global error handler anyway\r\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\r\n    const trackSsrc = Number(ssrcStr);\r\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\r\n\r\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `Invalid SSRC: ${ssrcStr} for remote track, msid: ${\r\n                    streamId} media type: ${mediaType}`));\r\n\r\n        // Abort\r\n        return;\r\n    } else if (!ownerEndpointId) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No SSRC owner known for: ${\r\n                    trackSsrc} for remote track, msid: ${\r\n                    streamId} media type: ${mediaType}`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    let sourceName;\r\n\r\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n        sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\r\n\r\n        // If source name was not signaled, we'll generate one which allows testing signaling\r\n        // when mixing legacy(mobile) with new clients.\r\n        if (!sourceName) {\r\n            sourceName = getSourceNameForJitsiTrack(ownerEndpointId, mediaType, 0);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line no-undef\r\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},`\r\n        + `type=${mediaType},sourceName=${sourceName}]`);\r\n\r\n    const peerMediaInfo = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType, sourceName);\r\n\r\n    if (!peerMediaInfo) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\r\n\r\n        return;\r\n    }\r\n\r\n    const muted = peerMediaInfo.muted;\r\n    const videoType = peerMediaInfo.videoType; // can be undefined\r\n\r\n    // eslint-disable-next-line no-undef\r\n    this._createRemoteTrack(\r\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\r\n};\r\n\r\n// FIXME cleanup params\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Initializes a new JitsiRemoteTrack instance with the data provided by\r\n * the signaling layer and SDP.\r\n *\r\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\r\n * @param {MediaStream} stream the WebRTC stream instance\r\n * @param {MediaStreamTrack} track the WebRTC track instance\r\n * @param {MediaType} mediaType the track's type of the media\r\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\r\n * @param {number} ssrc the track's main SSRC number\r\n * @param {boolean} muted the initial muted status\r\n */\r\n TraceablePeerConnection.prototype._createRemoteTrack = function(\r\n        ownerEndpointId,\r\n        stream,\r\n        track,\r\n        mediaType,\r\n        videoType,\r\n        ssrc,\r\n        muted,\r\n        sourceName) {\r\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\r\n\r\n    if (!remoteTracksMap) {\r\n        remoteTracksMap = new Map();\r\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\r\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\r\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\r\n    }\r\n\r\n    const userTracksByMediaType = remoteTracksMap.get(mediaType);\r\n\r\n    if (userTracksByMediaType?.size\r\n        && Array.from(userTracksByMediaType).find(jitsiTrack => jitsiTrack.getTrack() === track)) {\r\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\r\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\r\n\r\n        return;\r\n    } else if (userTracksByMediaType?.size && !FeatureFlags.isSourceNameSignalingEnabled()) {\r\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\r\n            + 'deleting the existing track');\r\n        const existingTrack = Array.from(userTracksByMediaType)[0];\r\n\r\n        // The exisiting track needs to be removed here. This happens on Safari sometimes when a SSRC is removed from\r\n        // the remote description and the browser doesn't fire a 'removetrack' event on the associated MediaStream.\r\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\r\n    }\r\n\r\n    const remoteTrack\r\n        = new JitsiRemoteTrack(\r\n                this.rtc,\r\n                this.rtc.conference,\r\n                ownerEndpointId,\r\n                stream,\r\n                track,\r\n                mediaType,\r\n                videoType,\r\n                ssrc,\r\n                muted,\r\n                this.isP2P,\r\n                sourceName);\r\n\r\n    userTracksByMediaType.add(remoteTrack);\r\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Handles remote stream removal.\r\n * @param stream the WebRTC MediaStream object which is being removed from the\r\n * PeerConnection\r\n */\r\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\r\n    if (!RTC.isUserStream(stream)) {\r\n        const id = RTC.getStreamID(stream);\r\n\r\n        logger.info(\r\n            `Ignored remote 'stream removed' event for non-user stream ${id}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Call remoteTrackRemoved for each track in the stream\r\n    const streamVideoTracks = stream.getVideoTracks();\r\n\r\n    for (const videoTrack of streamVideoTracks) {\r\n        this._remoteTrackRemoved(stream, videoTrack);\r\n    }\r\n    const streamAudioTracks = stream.getAudioTracks();\r\n\r\n    for (const audioTrack of streamAudioTracks) {\r\n        this._remoteTrackRemoved(stream, audioTrack);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles remote media track removal.\r\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\r\n * of the track.\r\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\r\n * removed from the PeerConnection.\r\n */\r\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\r\n        stream,\r\n        track) {\r\n    const streamId = RTC.getStreamID(stream);\r\n    const trackId = track && RTC.getTrackID(track);\r\n\r\n    logger.info(`${this} - remote track removed: ${streamId}, ${trackId}`);\r\n\r\n    if (!streamId) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(`${this} remote track removal failed - no stream ID`));\r\n\r\n        return;\r\n    }\r\n\r\n    if (!trackId) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(`${this} remote track removal failed - no track ID`));\r\n\r\n        return;\r\n    }\r\n\r\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\r\n        // NOTE this warning is always printed when user leaves the room,\r\n        // because we remove remote tracks manually on MUC member left event,\r\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\r\n        // ignore this warning, but still it's better to keep it printed for\r\n        // debugging purposes.\r\n        //\r\n        // We could change the behaviour to emit track removed only from here,\r\n        // but the order of the events will change and consuming apps could\r\n        // behave unexpectedly (the \"user left\" event would come before \"track\r\n        // removed\" events).\r\n        logger.warn(\r\n            `${this} Removed track not found for msid: ${streamId},\r\n             track id: ${trackId}`);\r\n    }\r\n};\r\n\r\n/**\r\n * Finds remote track by it's stream and track ids.\r\n * @param {string} streamId the media stream id as defined by the WebRTC\r\n * @param {string} trackId the media track id as defined by the WebRTC\r\n * @return {JitsiRemoteTrack|undefined} the track's instance or\r\n * <tt>undefined</tt> if not found.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\r\n        streamId,\r\n        trackId) {\r\n    // .find will break the loop once the first match is found\r\n    for (const endpointTrackMap of this.remoteTracks.values()) {\r\n        for (const mediaTrack of endpointTrackMap.values()) {\r\n            // FIXME verify and try to use ===\r\n            /* eslint-disable eqeqeq */\r\n            if (mediaTrack.getStreamId() == streamId\r\n                && mediaTrack.getTrackId() == trackId) {\r\n                return mediaTrack;\r\n            }\r\n\r\n            /* eslint-enable eqeqeq */\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Removes all JitsiRemoteTracks associated with given MUC nickname\r\n * (resource part of the JID). Returns array of removed tracks.\r\n *\r\n * @param {string} owner - The resource part of the MUC JID.\r\n * @returns {JitsiRemoteTrack[]}\r\n */\r\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\r\n    const removedTracks = [];\r\n    const remoteTracksMap = this.remoteTracks.get(owner);\r\n\r\n    if (remoteTracksMap) {\r\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\r\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\r\n\r\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\r\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\r\n\r\n        this.remoteTracks.delete(owner);\r\n    }\r\n\r\n    logger.debug(\r\n        `${this} removed remote tracks for ${owner} count: ${\r\n            removedTracks.length}`);\r\n\r\n    return removedTracks;\r\n};\r\n\r\n/**\r\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\r\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\r\n * @param {JitsiRemoteTrack} toBeRemoved\r\n */\r\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\r\n    toBeRemoved.dispose();\r\n    const participantId = toBeRemoved.getParticipantId();\r\n    const remoteTracksMap = this.remoteTracks.get(participantId);\r\n\r\n    if (!remoteTracksMap) {\r\n        logger.error(\r\n            `removeRemoteTrack: no remote tracks map for ${participantId}`);\r\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\r\n        logger.error(\r\n            `Failed to remove ${toBeRemoved} - type mapping messed up ?`);\r\n    }\r\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\r\n};\r\n\r\n/**\r\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\r\n * track ids.\r\n *\r\n * @param {string} streamId the media stream id as defined by the WebRTC\r\n * @param {string} trackId the media track id as defined by the WebRTC\r\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\r\n * <tt>undefined</tt> if no track matching given stream and track ids was\r\n * found.\r\n */\r\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\r\n        streamId,\r\n        trackId) {\r\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\r\n\r\n    if (toBeRemoved) {\r\n        this._removeRemoteTrack(toBeRemoved);\r\n    }\r\n\r\n    return toBeRemoved;\r\n};\r\n\r\n/**\r\n * @typedef {Object} SSRCGroupInfo\r\n * @property {Array<number>} ssrcs group's SSRCs\r\n * @property {string} semantics\r\n */\r\n/**\r\n * @typedef {Object} TrackSSRCInfo\r\n * @property {Array<number>} ssrcs track's SSRCs\r\n * @property {Array<SSRCGroupInfo>} groups track's SSRC groups\r\n */\r\n/**\r\n * Returns map with keys msid and <tt>TrackSSRCInfo</tt> values.\r\n * @param {Object} desc the WebRTC SDP instance.\r\n * @return {Map<string,TrackSSRCInfo>}\r\n */\r\nfunction extractSSRCMap(desc) {\r\n    /**\r\n     * Track SSRC infos mapped by stream ID (msid)\r\n     * @type {Map<string,TrackSSRCInfo>}\r\n     */\r\n    const ssrcMap = new Map();\r\n\r\n    /**\r\n     * Groups mapped by primary SSRC number\r\n     * @type {Map<number,Array<SSRCGroupInfo>>}\r\n     */\r\n    const groupsMap = new Map();\r\n\r\n    if (typeof desc !== 'object' || desc === null\r\n        || typeof desc.sdp !== 'string') {\r\n        logger.warn('An empty description was passed as an argument.');\r\n\r\n        return ssrcMap;\r\n    }\r\n\r\n    const session = transform.parse(desc.sdp);\r\n\r\n    if (!Array.isArray(session.media)) {\r\n        return ssrcMap;\r\n    }\r\n\r\n    for (const mLine of session.media) {\r\n        if (!Array.isArray(mLine.ssrcs)) {\r\n            continue; // eslint-disable-line no-continue\r\n        }\r\n\r\n        if (Array.isArray(mLine.ssrcGroups)) {\r\n            for (const group of mLine.ssrcGroups) {\r\n                if (typeof group.semantics !== 'undefined'\r\n                    && typeof group.ssrcs !== 'undefined') {\r\n                    // Parse SSRCs and store as numbers\r\n                    const groupSSRCs\r\n                        = group.ssrcs.split(' ').map(\r\n                            ssrcStr => parseInt(ssrcStr, 10));\r\n                    const primarySSRC = groupSSRCs[0];\r\n\r\n                    // Note that group.semantics is already present\r\n\r\n                    group.ssrcs = groupSSRCs;\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    if (!groupsMap.has(primarySSRC)) {\r\n                        groupsMap.set(primarySSRC, []);\r\n                    }\r\n                    groupsMap.get(primarySSRC).push(group);\r\n                }\r\n            }\r\n        }\r\n        for (const ssrc of mLine.ssrcs) {\r\n            if (ssrc.attribute !== 'msid') {\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            const msid = ssrc.value;\r\n            let ssrcInfo = ssrcMap.get(msid);\r\n\r\n            if (!ssrcInfo) {\r\n                ssrcInfo = {\r\n                    ssrcs: [],\r\n                    groups: [],\r\n                    msid\r\n                };\r\n                ssrcMap.set(msid, ssrcInfo);\r\n            }\r\n\r\n            const ssrcNumber = ssrc.id;\r\n\r\n            ssrcInfo.ssrcs.push(ssrcNumber);\r\n\r\n            if (groupsMap.has(ssrcNumber)) {\r\n                const ssrcGroups = groupsMap.get(ssrcNumber);\r\n\r\n                for (const group of ssrcGroups) {\r\n                    ssrcInfo.groups.push(group);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return ssrcMap;\r\n}\r\n\r\n/**\r\n * Takes a SessionDescription object and returns a \"normalized\" version.\r\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\r\n * only SSRCs.\r\n */\r\nconst normalizePlanB = function(desc) {\r\n    if (typeof desc !== 'object' || desc === null\r\n        || typeof desc.sdp !== 'string') {\r\n        logger.warn('An empty description was passed as an argument.');\r\n\r\n        return desc;\r\n    }\r\n\r\n    // eslint-disable-next-line no-shadow\r\n    const transform = require('sdp-transform');\r\n    const session = transform.parse(desc.sdp);\r\n\r\n    if (typeof session !== 'undefined'\r\n            && typeof session.media !== 'undefined'\r\n            && Array.isArray(session.media)) {\r\n        session.media.forEach(mLine => {\r\n\r\n            // Chrome appears to be picky about the order in which a=ssrc lines\r\n            // are listed in an m-line when rtx is enabled (and thus there are\r\n            // a=ssrc-group lines with FID semantics). Specifically if we have\r\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\r\n            // the \"a=ssrc:S1\" lines, SRD fails.\r\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\r\n            // first.\r\n            const firstSsrcs = [];\r\n            const newSsrcLines = [];\r\n\r\n            if (typeof mLine.ssrcGroups !== 'undefined'\r\n                && Array.isArray(mLine.ssrcGroups)) {\r\n                mLine.ssrcGroups.forEach(group => {\r\n                    if (typeof group.semantics !== 'undefined'\r\n                        && group.semantics === 'FID') {\r\n                        if (typeof group.ssrcs !== 'undefined') {\r\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (Array.isArray(mLine.ssrcs)) {\r\n                let i;\r\n\r\n                for (i = 0; i < mLine.ssrcs.length; i++) {\r\n                    if (typeof mLine.ssrcs[i] === 'object'\r\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\r\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\r\n                        newSsrcLines.push(mLine.ssrcs[i]);\r\n                        delete mLine.ssrcs[i];\r\n                    }\r\n                }\r\n\r\n                for (i = 0; i < mLine.ssrcs.length; i++) {\r\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\r\n                        newSsrcLines.push(mLine.ssrcs[i]);\r\n                    }\r\n                }\r\n\r\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\r\n            }\r\n        });\r\n    }\r\n\r\n    const resStr = transform.write(session);\r\n\r\n\r\n    return new RTCSessionDescription({\r\n        type: desc.type,\r\n        sdp: resStr\r\n    });\r\n};\r\n\r\n/**\r\n * Unified plan differentiates a remote track not associated with a stream using\r\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\r\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\r\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\r\n * line. Normally the ssrcs are not used by the client, as the bridge controls\r\n * media flow, but keep one reference to the ssrc for the p2p case.\r\n *\r\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\r\n * @private\r\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\r\n */\r\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\r\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\r\n        return ssrcLines;\r\n    }\r\n\r\n    let filteredLines = [ ...ssrcLines ];\r\n\r\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\r\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\r\n        .map(ssrcLine => ssrcLine.id);\r\n\r\n    problematicSsrcIds.forEach(ssrcId => {\r\n        // Find the cname which is to be modified and left in.\r\n        const cnameLine = filteredLines.find(line =>\r\n            line.id === ssrcId && line.attribute === 'cname');\r\n\r\n        cnameLine.value = `recvonly-${ssrcId}`;\r\n\r\n        // Remove all of lines for the ssrc.\r\n        filteredLines\r\n            = filteredLines.filter(line => line.id !== ssrcId);\r\n\r\n        // But re-add the cname line so there is a reference kept to the ssrc\r\n        // in the SDP.\r\n        filteredLines.push(cnameLine);\r\n    });\r\n\r\n    return filteredLines;\r\n}\r\n\r\n/**\r\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\r\n * @param {Object} localDescription the SDP object as defined by WebRTC.\r\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\r\n */\r\nconst enforceSendRecv = function(localDescription, options) {\r\n    if (!localDescription) {\r\n        throw new Error('No local description passed in.');\r\n    }\r\n\r\n    const transformer = new SdpTransformWrap(localDescription.sdp);\r\n    const audioMedia = transformer.selectMedia('audio');\r\n    let changed = false;\r\n\r\n    if (audioMedia && audioMedia.direction !== 'sendrecv') {\r\n        if (options.startSilent) {\r\n            audioMedia.direction = 'inactive';\r\n        } else {\r\n            audioMedia.direction = 'sendrecv';\r\n        }\r\n\r\n        changed = true;\r\n    }\r\n\r\n    const videoMedia = transformer.selectMedia('video');\r\n\r\n    if (videoMedia && videoMedia.direction !== 'sendrecv') {\r\n        videoMedia.direction = 'sendrecv';\r\n        changed = true;\r\n    }\r\n\r\n    if (changed) {\r\n        return new RTCSessionDescription({\r\n            type: localDescription.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n\r\n    return localDescription;\r\n};\r\n\r\n/**\r\n *\r\n * @param {JitsiLocalTrack} localTrack\r\n */\r\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\r\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\r\n\r\n    return ssrcInfo && ssrcInfo.ssrcs[0];\r\n};\r\n\r\n/**\r\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\r\n * same msid but no ssrc-group, since unified plan signals the simulcast\r\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\r\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\r\n * an ssrc-group line to make Jicofo happy.\r\n * @param desc A session description object (with 'type' and 'sdp' fields)\r\n * @return A session description object with its sdp field modified to\r\n * contain an inject ssrc-group for simulcast\r\n */\r\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\r\n    = function(desc) {\r\n        const sdp = transform.parse(desc.sdp);\r\n        const video = sdp.media.find(mline => mline.type === 'video');\r\n\r\n        // Check if the browser supports RTX, add only the primary ssrcs to the\r\n        // SIM group if that is the case.\r\n        video.ssrcGroups = video.ssrcGroups || [];\r\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\r\n\r\n        if (video.simulcast || video.simulcast_03) {\r\n            const ssrcs = [];\r\n\r\n            if (fidGroups && fidGroups.length) {\r\n                fidGroups.forEach(group => {\r\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\r\n                });\r\n            } else {\r\n                video.ssrcs.forEach(ssrc => {\r\n                    if (ssrc.attribute === 'msid') {\r\n                        ssrcs.push(ssrc.id);\r\n                    }\r\n                });\r\n            }\r\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\r\n                // Group already exists, no need to do anything\r\n                return desc;\r\n            }\r\n            video.ssrcGroups.push({\r\n                semantics: 'SIM',\r\n                ssrcs: ssrcs.join(' ')\r\n            });\r\n        }\r\n\r\n        return new RTCSessionDescription({\r\n            type: desc.type,\r\n            sdp: transform.write(sdp)\r\n        });\r\n    };\r\n\r\n/* eslint-disable-next-line vars-on-top */\r\nconst getters = {\r\n    signalingState() {\r\n        return this.peerconnection.signalingState;\r\n    },\r\n    iceConnectionState() {\r\n        return this.peerconnection.iceConnectionState;\r\n    },\r\n    localDescription() {\r\n        let desc = this.peerconnection.localDescription;\r\n\r\n        if (!desc) {\r\n            logger.debug('getLocalDescription no localDescription found');\r\n\r\n            return {};\r\n        }\r\n\r\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\r\n\r\n        // if we're running on FF, transform to Plan B first.\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n        if (browser.usesUnifiedPlan() && !this.isP2P) {\r\n            desc = this.interop.toPlanB(desc);\r\n            this.trace('getLocalDescription::postTransform (Plan B)',\r\n                dumpSDP(desc));\r\n\r\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\r\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\r\n                dumpSDP(desc));\r\n        } else if (!browser.usesUnifiedPlan()) {\r\n            if (browser.doesVideoMuteByStreamRemove()) {\r\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\r\n                logger.debug(\r\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\r\n            }\r\n\r\n            // What comes out of this getter will be signalled over Jingle to\r\n            // the other peer, so we need to make sure the media direction is\r\n            // 'sendrecv' because we won't change the direction later and don't want\r\n            // the other peer to think we can't send or receive.\r\n            //\r\n            // Note that the description we set in chrome does have the accurate\r\n            // direction (e.g. 'recvonly'), since that is technically what is\r\n            // happening (check setLocalDescription impl).\r\n            desc = enforceSendRecv(desc, this.options);\r\n        }\r\n\r\n        // See the method's doc for more info about this transformation.\r\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\r\n\r\n        return desc;\r\n    },\r\n    remoteDescription() {\r\n        let desc = this.peerconnection.remoteDescription;\r\n\r\n        if (!desc) {\r\n            logger.debug('getRemoteDescription no remoteDescription found');\r\n\r\n            return {};\r\n        }\r\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\r\n\r\n        // if we're running on FF, transform to Plan B first.\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n        if (browser.usesUnifiedPlan()) {\r\n            if (this.isP2P) {\r\n                desc = this._adjustRemoteMediaDirection(desc);\r\n            } else {\r\n                desc = this.interop.toPlanB(desc);\r\n                this.trace(\r\n                    'getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\r\n            }\r\n        }\r\n\r\n        return desc;\r\n    }\r\n};\r\n\r\nObject.keys(getters).forEach(prop => {\r\n    Object.defineProperty(\r\n        TraceablePeerConnection.prototype,\r\n        prop, {\r\n            get: getters[prop]\r\n        }\r\n    );\r\n});\r\n\r\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\r\n    return this.localSSRCs.get(rtcId);\r\n};\r\n\r\n/**\r\n * Munges the order of the codecs in the SDP passed based on the preference\r\n * set through config.js settings. All instances of the specified codec are\r\n * moved up to the top of the list when it is preferred. The specified codec\r\n * is deleted from the list if the configuration specifies that the codec be\r\n * disabled.\r\n * @param {RTCSessionDescription} description that needs to be munged.\r\n * @returns {RTCSessionDescription} the munged description.\r\n */\r\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    // if (!this.codecPreference || browser.supportsCodecPreferences()) {\r\n    //     return description;\r\n    // }\r\n\r\n    // const parsedSdp = transform.parse(description.sdp);\r\n    // const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\r\n\r\n    // if (this.codecPreference.enable) {\r\n    //     SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\r\n\r\n    //     // Strip the high profile H264 codecs on mobile clients for p2p connection.\r\n    //     // High profile codecs give better quality at the expense of higher load which\r\n    //     // we do not want on mobile clients.\r\n    //     // Jicofo offers only the baseline code for the jvb connection.\r\n    //     // TODO - add check for mobile browsers once js-utils provides that check.\r\n    //     if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\r\n    //         SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\r\n    //     }\r\n    // } else {\r\n    //     SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\r\n    // }\r\n\r\n    // return new RTCSessionDescription({\r\n    //     type: description.type,\r\n    //     sdp: transform.write(parsedSdp)\r\n    // });\r\n\r\n    if (!this.codecPreference) {\r\n        return description;\r\n    }\r\n\r\n    const parsedSdp = transform.parse(description.sdp);\r\n\r\n    // Only the m-line that defines the source the browser will be sending should need to change.\r\n    // This is typically the first m-line with the matching media type.\r\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\r\n\r\n    if (!mLine) {\r\n        return description;\r\n    }\r\n\r\n    if (this.codecPreference.enable) {\r\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\r\n\r\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\r\n        // High profile codecs give better quality at the expense of higher load which\r\n        // we do not want on mobile clients.\r\n        // Jicofo offers only the baseline code for the jvb connection.\r\n        // TODO - add check for mobile browsers once js-utils provides that check.\r\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\r\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\r\n        }\r\n\r\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\r\n        // as soon as the browser switches to VP9.\r\n        if (this.codecPreference.mimeType === CodecMimeType.VP9\r\n            && this.getConfiguredVideoCodec() === CodecMimeType.VP9) {\r\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\r\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\r\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\r\n\r\n            // Use only the HD bitrate for now as there is no API available yet for configuring\r\n            // the bitrates on the individual SVC layers.\r\n            mLine.bandwidth = [ {\r\n                type: 'AS',\r\n                limit\r\n            } ];\r\n        } else {\r\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\r\n            // This is needed on react native clients as react-native-webrtc returns the\r\n            // SDP that the application passed instead of returning the SDP off the native side.\r\n            // This line automatically gets cleared on web on every renegotiation.\r\n            mLine.bandwidth = undefined;\r\n        }\r\n    } else {\r\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\r\n    }\r\n\r\n    return new RTCSessionDescription({\r\n        type: description.type,\r\n        sdp: transform.write(parsedSdp)\r\n    });\r\n};\r\n\r\n/**\r\n * Checks if given track belongs to this peerconnection instance.\r\n *\r\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\r\n * @returns {boolean}\r\n */\r\nTraceablePeerConnection.prototype.containsTrack = function(track) {\r\n    if (track.isLocal()) {\r\n        return this.localTracks.has(track.rtcId);\r\n    }\r\n\r\n    const participantId = track.getParticipantId();\r\n    const remoteTracksMap = this.remoteTracks.get(participantId);\r\n\r\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\r\n};\r\n\r\n/**\r\n * Add {@link JitsiLocalTrack} to this TPC.\r\n * @param {JitsiLocalTrack} track\r\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\r\n * @returns {Promise<void>} - resolved when done.\r\n */\r\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\r\n    const rtcId = track.rtcId;\r\n\r\n    logger.info(`add ${track} to: ${this}`);\r\n\r\n    if (this.localTracks.has(rtcId)) {\r\n\r\n        return Promise.reject(new Error(`${track} is already in ${this}`));\r\n    }\r\n\r\n    this.localTracks.set(rtcId, track);\r\n\r\n    // For p2p unified case, use addTransceiver API to add the tracks on the peerconnection.\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    if (browser.usesUnifiedPlan() && this.isP2P) {\r\n        try {\r\n            this.tpcUtils.addTrack(track, isInitiator);\r\n        } catch (error) {\r\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n    } else {\r\n        // In all other cases, i.e., plan-b and unified plan bridge case, use addStream API to\r\n        // add the track to the peerconnection.\r\n        // TODO - addTransceiver doesn't generate a MSID for the stream, which is needed for signaling\r\n        // the ssrc to Jicofo. Switch to using UUID as MSID when addTransceiver is used in Unified plan\r\n        // JVB connection case as well.\r\n        const webrtcStream = track.getOriginalStream();\r\n\r\n        if (webrtcStream) {\r\n            this._addStream(webrtcStream);\r\n\r\n        // It's not ok for a track to not have a WebRTC stream if:\r\n        } else if (!browser.doesVideoMuteByStreamRemove()\r\n                    || track.isAudioTrack()\r\n                    || (track.isVideoTrack() && !track.isMuted())) {\r\n            return Promise.reject(new Error(`${this} no WebRTC stream for: ${track}`));\r\n        }\r\n\r\n        // Muted video tracks do not have WebRTC stream\r\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\r\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\r\n\r\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\r\n            const simGroup\r\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\r\n\r\n            if (simGroup) {\r\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\r\n            }\r\n            const fidGroups\r\n                = ssrcInfo.groups.filter(\r\n                    groupInfo => groupInfo.semantics === 'FID');\r\n\r\n            if (fidGroups) {\r\n                const rtxSsrcMapping = new Map();\r\n\r\n                fidGroups.forEach(fidGroup => {\r\n                    const primarySsrc = fidGroup.ssrcs[0];\r\n                    const rtxSsrc = fidGroup.ssrcs[1];\r\n\r\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\r\n                });\r\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\r\n            }\r\n        }\r\n    }\r\n\r\n    let promiseChain = Promise.resolve();\r\n\r\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\r\n    if (browser.isFirefox()) {\r\n        promiseChain = this.tpcUtils.setEncodings(track);\r\n    }\r\n\r\n    return promiseChain;\r\n};\r\n\r\n/**\r\n * Adds local track as part of the unmute operation.\r\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\r\n * operation\r\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\r\n * state has changed and renegotiation is required, false if no renegotiation is needed or\r\n * Promise is rejected when something goes wrong.\r\n */\r\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\r\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\r\n        // Abort\r\n        return Promise.reject('Track not found on the peerconnection');\r\n    }\r\n\r\n    logger.info(`Adding ${track} as unmute to ${this}`);\r\n    const webRtcStream = track.getOriginalStream();\r\n\r\n    if (!webRtcStream) {\r\n        logger.error(\r\n            `Unable to add ${track} as unmute to ${this} - no WebRTC stream`);\r\n\r\n        return Promise.reject('Stream not found');\r\n    }\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        return this.tpcUtils.replaceTrack(null, track).then(() => false);\r\n    }\r\n\r\n    this._addStream(webRtcStream);\r\n\r\n    return Promise.resolve(true);\r\n};\r\n\r\n/**\r\n * Adds WebRTC media stream to the underlying PeerConnection\r\n * @param {MediaStream} mediaStream\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\r\n    this.peerconnection.addStream(mediaStream);\r\n    this._addedStreams.push(mediaStream);\r\n};\r\n\r\n/**\r\n * Removes WebRTC media stream from the underlying PeerConection\r\n * @param {MediaStream} mediaStream\r\n */\r\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\r\n    this.peerconnection.removeStream(mediaStream);\r\n    this._addedStreams\r\n        = this._addedStreams.filter(stream => stream !== mediaStream);\r\n};\r\n\r\n/**\r\n * This method when called will check if given <tt>localTrack</tt> belongs to\r\n * this TPC (that it has been previously added using {@link addTrack}). If the\r\n * track does not belong an error message will be logged.\r\n * @param {string} methodName the method name that will be logged in an error\r\n * message\r\n * @param {JitsiLocalTrack} localTrack\r\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\r\n * <tt>false</tt> otherwise.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\r\n        methodName,\r\n        localTrack) {\r\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\r\n\r\n    if (!doesBelong) {\r\n        logger.error(\r\n            `${methodName}: ${localTrack} does not belong to ${this}`);\r\n    }\r\n\r\n    return doesBelong;\r\n};\r\n\r\n/**\r\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\r\n * the underlying WebRTC PeerConnection.\r\n * @param {MediaStream} mediaStream\r\n * @returns {boolean}\r\n */\r\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\r\n    return this._addedStreams.indexOf(mediaStream) > -1;\r\n};\r\n\r\n/**\r\n * Remove local track from this TPC.\r\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\r\n *\r\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\r\n *       The same applies to addTrack.\r\n */\r\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\r\n    const webRtcStream = localTrack.getOriginalStream();\r\n\r\n    this.trace(\r\n        'removeStream',\r\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\r\n\r\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\r\n        // Abort - nothing to be done here\r\n        return;\r\n    }\r\n    this.localTracks.delete(localTrack.rtcId);\r\n    this.localSSRCs.delete(localTrack.rtcId);\r\n\r\n    if (webRtcStream) {\r\n        this.peerconnection.removeStream(webRtcStream);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns the sender corresponding to the given media type.\r\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\r\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\r\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\r\n};\r\n\r\n/**\r\n * Returns the receiver corresponding to the given MediaStreamTrack.\r\n *\r\n * @param {MediaSreamTrack} track - The media stream track used for the search.\r\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\r\n    return this.peerconnection.getReceivers().find(r => r.track === track);\r\n};\r\n\r\n/**\r\n * Returns the sender corresponding to the given MediaStreamTrack.\r\n *\r\n * @param {MediaSreamTrack} track - The media stream track used for the search.\r\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\r\n    return this.peerconnection.getSenders().find(s => s.track === track);\r\n};\r\n\r\n/**\r\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\r\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\r\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\r\n * <tt>oldTrack</tt>\r\n *\r\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\r\n * replaced\r\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\r\n * @returns {Promise<boolean>} - If the promise resolves with true,\r\n * renegotiation will be needed. Otherwise no renegotiation is needed.\r\n */\r\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    // if (browser.usesUnifiedPlan()) {\r\n    //     return this.tpcUtils.replaceTrack(oldTrack, newTrack)\r\n\r\n    //         // renegotiate when SDP is used for simulcast munging\r\n    //         .then(() => this.isSimulcastOn() && browser.usesSdpMungingForSimulcast());\r\n    // }\r\n\r\n    // let promiseChain = Promise.resolve();\r\n\r\n    // if (oldTrack) {\r\n    //     this.removeTrack(oldTrack);\r\n    // }\r\n    // if (newTrack) {\r\n    //     promiseChain = this.addTrack(newTrack);\r\n    // }\r\n\r\n    // return promiseChain.then(() => true);\r\n\r\n    if (!(oldTrack || newTrack)) {\r\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // If a track is being added to the peerconnection for the first time, we want the source signaling to be sent to\r\n    // Jicofo before the mute state is sent over presence. Therefore, trigger a renegotiation in this case. If we\r\n    // rely on \"negotiationneeded\" fired by the browser to signal new ssrcs, the mute state in presence will be sent\r\n    // before the source signaling which is undesirable.\r\n    // Send the presence before signaling for a new screenshare source. This is needed for multi-stream support since\r\n    // videoType needs to be availble at remote track creation time so that a fake tile for screenshare can be added.\r\n    // FIXME - This check needs to be removed when the client switches to the bridge based signaling for tracks.\r\n    const isNewTrackScreenshare = !oldTrack\r\n        && newTrack?.getVideoType() === VideoType.DESKTOP\r\n        && FeatureFlags.isMultiStreamSupportEnabled();\r\n    const negotiationNeeded = !isNewTrackScreenshare && Boolean(!oldTrack || !this.localTracks.has(oldTrack?.rtcId));\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\r\n        const mediaType = newTrack?.getType() ? newTrack?.getType() : oldTrack?.getType();\r\n        const stream = newTrack?.getOriginalStream();\r\n        const promise = newTrack && !stream\r\n\r\n            // Ignore cases when the track is replaced while the device is in a muted state.\r\n            // The track will be replaced again on the peerconnection when the user unmutes.\r\n            ? Promise.resolve()\r\n            : this.tpcUtils.replaceTrack(oldTrack, newTrack);\r\n\r\n        return promise\r\n            .then(transceiver => {\r\n                oldTrack && this.localTracks.delete(oldTrack.rtcId);\r\n                newTrack && this.localTracks.set(newTrack.rtcId, newTrack);\r\n\r\n                // Update the local SSRC cache for the case when one track gets replaced with another and no\r\n                // renegotiation is triggered as a result of this.\r\n                if (oldTrack && newTrack) {\r\n                    const oldTrackSSRC = this.localSSRCs.get(oldTrack.rtcId);\r\n\r\n                    if (oldTrackSSRC) {\r\n                        this.localSSRCs.delete(oldTrack.rtcId);\r\n                        this.localSSRCs.set(newTrack.rtcId, oldTrackSSRC);\r\n                    }\r\n                }\r\n                const mediaActive = mediaType === MediaType.AUDIO\r\n                    ? this.audioTransferActive\r\n                    : this.videoTransferActive;\r\n\r\n                // Set the transceiver direction only if media is not suspended on the connection. This happens when\r\n                // the client is using the p2p connection. Transceiver direction is updated when media is resumed on\r\n                // this connection again.\r\n                if (transceiver && mediaActive) {\r\n                    transceiver.direction = newTrack ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\r\n                } else if (transceiver) {\r\n                    transceiver.direction = MediaDirection.INACTIVE;\r\n                }\r\n\r\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\r\n                // for the newly added track using SDP munging which happens during the renegotiation.\r\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\r\n                    ? Promise.resolve()\r\n                    : this.tpcUtils.setEncodings(newTrack);\r\n\r\n                // Force renegotiation only when the source is added for the first time.\r\n                return configureEncodingsPromise.then(() => negotiationNeeded);\r\n            });\r\n    }\r\n\r\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\r\n\r\n    let promiseChain = Promise.resolve();\r\n\r\n    if (oldTrack) {\r\n        this.removeTrack(oldTrack);\r\n    }\r\n    if (newTrack) {\r\n        promiseChain = this.addTrack(newTrack);\r\n    }\r\n\r\n    return promiseChain.then(() => true);\r\n};\r\n\r\n/**\r\n * Removes local track as part of the mute operation.\r\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\r\n * the mute operation.\r\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\r\n * state has changed and renegotiation is required, false if no renegotiation is needed or\r\n * Promise is rejected when something goes wrong.\r\n */\r\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\r\n    const webRtcStream = localTrack.getOriginalStream();\r\n\r\n    this.trace(\r\n        'removeStreamMute',\r\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\r\n\r\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\r\n        // Abort - nothing to be done here\r\n        return Promise.reject('Track not found in the peerconnection');\r\n    }\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        return this.tpcUtils.replaceTrack(localTrack, null).then(() => false);\r\n    }\r\n\r\n    if (webRtcStream) {\r\n        logger.info(\r\n            `Removing ${localTrack} as mute from ${this}`);\r\n        this._removeStream(webRtcStream);\r\n\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    logger.error(`removeStreamMute - no WebRTC stream for ${localTrack}`);\r\n\r\n    return Promise.reject('Stream not found');\r\n};\r\n\r\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\r\n    this.trace('createDataChannel', label, opts);\r\n\r\n    return this.peerconnection.createDataChannel(label, opts);\r\n};\r\n\r\n/**\r\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\r\n * in the SDP so that simulcast is properly activated.\r\n *\r\n * @param {Object} localSdp the WebRTC session description instance for\r\n * the local description.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\r\n        localSdp) {\r\n    let sdpStr = localSdp.sdp;\r\n\r\n    const videoStartIndex = sdpStr.indexOf('m=video');\r\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\r\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\r\n\r\n    if (simStartIndex === -1\r\n        || otherStartIndex === -1\r\n        || otherStartIndex === simStartIndex) {\r\n        return localSdp;\r\n    }\r\n\r\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\r\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\r\n\r\n    sdpStr = sdpStr.replace(simStr, '');\r\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\r\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\r\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\r\n    const simStrTrimmed = simStr.trim();\r\n    const sdpTail = sdpStr.slice(otherEndIndex);\r\n\r\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\r\n\r\n    return new RTCSessionDescription({\r\n        type: localSdp.type,\r\n        sdp: sdpStr\r\n    });\r\n};\r\n\r\n/**\r\n * Will adjust audio and video media direction in the given SDP object to\r\n * reflect the current status of the {@link audioTransferActive} and\r\n * {@link videoTransferActive} flags.\r\n * @param {Object} localDescription the WebRTC session description instance for\r\n * the local description.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(\r\n        localDescription) {\r\n    const transformer = new SdpTransformWrap(localDescription.sdp);\r\n    let modifiedDirection = false;\r\n    const audioMedia = transformer.selectMedia('audio');\r\n\r\n    if (audioMedia) {\r\n        const desiredAudioDirection\r\n            = this._getDesiredMediaDirection(MediaType.AUDIO);\r\n\r\n        if (audioMedia.direction !== desiredAudioDirection) {\r\n            audioMedia.direction = desiredAudioDirection;\r\n            logger.info(\r\n                `Adjusted local audio direction to ${desiredAudioDirection}`);\r\n            modifiedDirection = true;\r\n        }\r\n    } else {\r\n        logger.warn('No \"audio\" media found int the local description');\r\n    }\r\n\r\n    const videoMedia = transformer.selectMedia('video');\r\n\r\n    if (videoMedia) {\r\n        const desiredVideoDirection\r\n            = this._getDesiredMediaDirection(MediaType.VIDEO);\r\n\r\n        if (videoMedia.direction !== desiredVideoDirection) {\r\n            videoMedia.direction = desiredVideoDirection;\r\n            logger.info(\r\n                `Adjusted local video direction to ${desiredVideoDirection}`);\r\n            modifiedDirection = true;\r\n        }\r\n    } else {\r\n        logger.warn('No \"video\" media found in the local description');\r\n    }\r\n\r\n    if (modifiedDirection) {\r\n        return new RTCSessionDescription({\r\n            type: localDescription.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n\r\n    return localDescription;\r\n};\r\n\r\n/**\r\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\r\n * media connection.\r\n *\r\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\r\n * @returns the transformed remoteDescription.\r\n * @private\r\n */\r\n TraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\r\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\r\n\r\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\r\n        const media = transformer.selectMedia(mediaType)?.[0];\r\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\r\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\r\n\r\n        media.direction = hasLocalSource && hasRemoteSource\r\n            ? MediaDirection.SENDRECV\r\n            : hasLocalSource\r\n                ? MediaDirection.RECVONLY\r\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\r\n    });\r\n\r\n    return new RTCSessionDescription({\r\n        type: remoteDescription.type,\r\n        sdp: transformer.toRawSDP()\r\n    });\r\n}\r\n\r\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\r\n    let localSdp = description;\r\n\r\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\r\n\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    // Munge the order of the codecs based on the preferences set through config.js\r\n    localSdp = this._mungeOpus(localSdp);\r\n\r\n    if (!browser.usesUnifiedPlan()) {\r\n        localSdp = this._adjustLocalMediaDirection(localSdp);\r\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\r\n    }\r\n\r\n    if (!this._usesTransceiverCodecPreferences) {\r\n        localSdp = this._mungeCodecOrder(localSdp);\r\n    }\r\n\r\n    this.trace('setLocalDescription::postTransform (Unified Plan)', dumpSDP(localSdp));\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.peerconnection.setLocalDescription(localSdp)\r\n            .then(() => {\r\n                this.trace('setLocalDescriptionOnSuccess');\r\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\r\n\r\n                if (localUfrag !== this.localUfrag) {\r\n                    this.localUfrag = localUfrag;\r\n                    this.eventEmitter.emit(\r\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\r\n                }\r\n                resolve();\r\n            }, err => {\r\n                this.trace('setLocalDescriptionOnFailure', err);\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\r\n                    err, this);\r\n                reject(err);\r\n            });\r\n    });\r\n};\r\n\r\n/**\r\n * Enables/disables audio media transmission on this peer connection. When\r\n * disabled the SDP audio media direction in the local SDP will be adjusted to\r\n * 'inactive' which means that no data will be sent nor accepted, but\r\n * the connection should be kept alive.\r\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\r\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\r\n * no effect.\r\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\r\n * needs to be executed in order for the changes to take effect or\r\n * <tt>false</tt> if the given value was the same as the previous one.\r\n * @public\r\n */\r\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\r\n    logger.debug(`${this} audio transfer active: ${active}`);\r\n    const changed = this.audioTransferActive !== active;\r\n\r\n    this.audioTransferActive = active;\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        this.tpcUtils.setAudioTransferActive(active);\r\n\r\n        // false means no renegotiation up the chain which is not needed in the Unified mode\r\n        return false;\r\n    }\r\n\r\n    return changed;\r\n};\r\n\r\n/**\r\n * Sets the degradation preference on the video sender. This setting determines if\r\n * resolution or framerate will be preferred when bandwidth or cpu is constrained.\r\n * Sets it to 'maintain-framerate' when a camera track is added to the pc, sets it\r\n * to 'maintain-resolution' when a desktop track is being shared instead.\r\n * @returns {Promise<void>}\r\n */\r\nTraceablePeerConnection.prototype.setSenderVideoDegradationPreference = function() {\r\n    if (!this.peerconnection.getSenders) {\r\n        logger.debug('Browser does not support RTCRtpSender');\r\n\r\n        return Promise.resolve();\r\n    }\r\n    const localVideoTrack = this.getLocalVideoTrack();\r\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!parameters.encodings || !parameters.encodings.length) {\r\n        return Promise.resolve();\r\n    }\r\n    for (const encoding in parameters.encodings) {\r\n        if (parameters.encodings.hasOwnProperty(encoding)) {\r\n            const preference = localVideoTrack.videoType === VideoType.CAMERA\r\n                ? DEGRADATION_PREFERENCE_CAMERA\r\n                : DEGRADATION_PREFERENCE_DESKTOP;\r\n\r\n            logger.info(`Setting video sender degradation preference on ${this} to ${preference}`);\r\n            parameters.encodings[encoding].degradationPreference = preference;\r\n        }\r\n    }\r\n\r\n    return videoSender.setParameters(parameters);\r\n};\r\n\r\n/**\r\n * Sets the max bitrate on the RTCRtpSender so that the\r\n * bitrate of the enocder doesn't exceed the configured value.\r\n * This is needed for the desktop share until spec-complaint\r\n * simulcast is implemented.\r\n * @param {JitsiLocalTrack} localTrack - the local track whose\r\n * max bitrate is to be configured.\r\n * @returns {Promise<void>}\r\n */\r\nTraceablePeerConnection.prototype.setMaxBitRate = function() {\r\n    if (!this.peerconnection.getSenders) {\r\n        logger.debug('Browser doesn\\'t support RTCRtpSender');\r\n\r\n        return Promise.resolve();\r\n    }\r\n    const localVideoTrack = this.getLocalVideoTrack();\r\n\r\n    if (!localVideoTrack) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const videoType = localVideoTrack.videoType;\r\n\r\n    // Apply the maxbitrates on the video track when one of the conditions is met.\r\n    // 1. Max. bitrates for video are specified through videoQuality settings in config.js\r\n    // 2. Track is a desktop track and bitrate is capped using capScreenshareBitrate option in plan-b mode.\r\n    // 3. The client is running in Unified plan mode.\r\n    if (!((this.options.videoQuality && this.options.videoQuality.maxBitratesVideo)\r\n        || (browser.usesPlanB() && this.options.capScreenshareBitrate && videoType === VideoType.DESKTOP)\r\n        || browser.usesUnifiedPlan())) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const presenterEnabled = localVideoTrack._originalStream\r\n        && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\r\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!(parameters.encodings && parameters.encodings.length)) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    if (this.isSimulcastOn()) {\r\n        for (const encoding in parameters.encodings) {\r\n            if (parameters.encodings.hasOwnProperty(encoding)) {\r\n                // On chromium, set a max bitrate of 500 Kbps for screenshare when\r\n                // capScreenshareBitrate is enabled through config.js and presenter\r\n                // is not turned on.\r\n                const bitrate = browser.usesPlanB()\r\n                    && videoType === VideoType.DESKTOP\r\n                    && this.options.capScreenshareBitrate\r\n                    ? presenterEnabled ? this.videoBitrates.high : DESKSTOP_SHARE_RATE\r\n                    : this.tpcUtils.localStreamEncodingsConfig[encoding].maxBitrate;\r\n\r\n                logger.info(`${this} Setting a max bitrate of ${bitrate} bps on layer `\r\n                    + `${this.tpcUtils.localStreamEncodingsConfig[encoding].rid}`);\r\n                parameters.encodings[encoding].maxBitrate = bitrate;\r\n            }\r\n        }\r\n    } else {\r\n        // Do not change the max bitrate for desktop tracks in non-simulcast mode.\r\n        let bitrate = this.videoBitrates.high;\r\n\r\n        if (videoType === VideoType.CAMERA) {\r\n            // Determine the bitrates based on the sender constraint applied for unicast tracks.\r\n            const scaleFactor = this.senderVideoMaxHeight\r\n                ? Math.floor(localVideoTrack.resolution / this.senderVideoMaxHeight)\r\n                : 1;\r\n            const encoding = this.tpcUtils.localStreamEncodingsConfig\r\n                .find(layer => layer.scaleResolutionDownBy === scaleFactor);\r\n\r\n            if (encoding) {\r\n                logger.info(`${this} Setting a max bitrate of ${encoding.maxBitrate} bps on local video track`);\r\n                bitrate = encoding.maxBitrate;\r\n            }\r\n        }\r\n        parameters.encodings[0].maxBitrate = bitrate;\r\n    }\r\n\r\n    return videoSender.setParameters(parameters);\r\n};\r\n\r\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    //this.trace('setRemoteDescription::preTransform', dumpSDP(description));\r\n\r\n    // Munge the order of the codecs based on the preferences set through config.js\r\n    // eslint-disable-next-line no-param-reassign\r\n    //description = this._mungeCodecOrder(description);\r\n\r\n    let remoteDescription = description;\r\n\r\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\r\n\r\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\r\n    remoteDescription = this._mungeOpus(remoteDescription);\r\n\r\n    if (browser.usesPlanB()) {\r\n        // TODO the focus should squeze or explode the remote simulcast\r\n        if (this.isSimulcastOn()) {\r\n            // Determine if \"x-google-conference\" needs to be added to the remote description.\r\n            // We need to add that flag for camera tracks always and for desktop tracks only when\r\n            // capScreenshareBitrate is disabled.\r\n            const enableConferenceFlag = !(this.options.capScreenshareBitrate && !hasCameraTrack(this));\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            description = this.simulcast.mungeRemoteDescription(description, enableConferenceFlag);\r\n            this.trace(\r\n                'setRemoteDescription::postTransform (simulcast)',\r\n                dumpSDP(description));\r\n        }\r\n\r\n        // eslint-disable-next-line no-param-reassign\r\n        description = normalizePlanB(description);\r\n    } else {\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n        // const currentDescription = this.peerconnection.remoteDescription;\r\n\r\n        // // eslint-disable-next-line no-param-reassign\r\n        // description = this.interop.toUnifiedPlan(description, currentDescription);\r\n        // this.trace(\r\n        //     'setRemoteDescription::postTransform (Unified)',\r\n        //     dumpSDP(description));\r\n\r\n        // if (this.isSimulcastOn()) {\r\n        //     // eslint-disable-next-line no-param-reassign\r\n        //     description = this.simulcast.mungeRemoteDescription(description);\r\n\r\n        //     // eslint-disable-next-line no-param-reassign\r\n        //     description = this.tpcUtils.insertUnifiedPlanSimulcastReceive(description);\r\n        //     this.trace(\r\n        //         'setRemoteDescription::postTransform (sim receive)',\r\n        //         dumpSDP(description));\r\n\r\n        //     // eslint-disable-next-line no-param-reassign\r\n        //     description = this.tpcUtils.ensureCorrectOrderOfSsrcs(description);\r\n        // }\r\n\r\n         // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\r\n         if (!this.isP2P) {\r\n            const currentDescription = this.peerconnection.remoteDescription;\r\n\r\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\r\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\r\n        }\r\n        if (this.isSimulcastOn()) {\r\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\r\n            remoteDescription = this.simulcast.mungeRemoteDescription(remoteDescription);\r\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\r\n\r\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\r\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\r\n        }\r\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\r\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\r\n\r\n        \r\n    }\r\n\r\n    // Munge the order of the codecs based on the preferences set through config.js.\r\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\r\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.peerconnection.setRemoteDescription(remoteDescription)\r\n            .then(() => {\r\n                this.trace('setRemoteDescriptionOnSuccess');\r\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\r\n\r\n                if (remoteUfrag !== this.remoteUfrag) {\r\n                    this.remoteUfrag = remoteUfrag;\r\n                    this.eventEmitter.emit(\r\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\r\n                }\r\n                resolve();\r\n            }, err => {\r\n                this.trace('setRemoteDescriptionOnFailure', err);\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\r\n                    err,\r\n                    this);\r\n                reject(err);\r\n            });\r\n    });\r\n};\r\n\r\n/**\r\n * Changes the resolution of the video stream that is sent to the peer based on\r\n * the user preferred value. If simulcast is enabled on the peerconection, all the\r\n * simulcast encodings that have a resolution height lower or equal to the value\r\n * provided will remain active. For the non-simulcast case, video constraint is\r\n * applied on the track.\r\n * @param {number} frameHeight - The user preferred max frame height.\r\n * @returns {Promise} promise that will be resolved when the operation is\r\n * successful and rejected otherwise.\r\n */\r\nTraceablePeerConnection.prototype.setSenderVideoConstraint = function(frameHeight = null) {\r\n    if (frameHeight < 0) {\r\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\r\n    }\r\n\r\n    // XXX: This is not yet supported on mobile.\r\n    if (browser.isReactNative()) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Need to explicitly check for null as 0 is falsy, but a valid value\r\n    const newHeight = frameHeight === null ? this.senderVideoMaxHeight : frameHeight;\r\n\r\n    this.senderVideoMaxHeight = newHeight;\r\n\r\n    logger.log(`${this} senderVideoMaxHeight: ${newHeight}`);\r\n\r\n    const localVideoTrack = this.getLocalVideoTrack();\r\n\r\n    if (!localVideoTrack || localVideoTrack.isMuted() || localVideoTrack.videoType !== VideoType.CAMERA) {\r\n        return Promise.resolve();\r\n    }\r\n    const videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!parameters || !parameters.encodings || !parameters.encodings.length) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    if (this.isSimulcastOn()) {\r\n        // Determine the encodings that need to stay enabled based on the new frameHeight provided.\r\n        const encodingsEnabledState = this.tpcUtils.getLocalStreamHeightConstraints(localVideoTrack.track)\r\n            .map(height => height <= newHeight);\r\n\r\n        // Always keep the LD stream enabled, specifically when the LD stream's resolution is higher than of the\r\n        // requested resolution. This can happen when camera is captured at resolutions higher than 720p but the\r\n        // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\r\n        // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\r\n        const ldStreamIndex = this.tpcUtils.localStreamEncodingsConfig\r\n            .findIndex(layer => layer.scaleResolutionDownBy === 4.0);\r\n\r\n        if (newHeight > 0 && ldStreamIndex !== -1) {\r\n            encodingsEnabledState[ldStreamIndex] = true;\r\n        }\r\n        for (const encoding in parameters.encodings) {\r\n            if (parameters.encodings.hasOwnProperty(encoding)) {\r\n                parameters.encodings[encoding].active = encodingsEnabledState[encoding];\r\n            }\r\n        }\r\n    } else if (newHeight > 0) {\r\n        parameters.encodings[0].scaleResolutionDownBy = localVideoTrack.resolution >= newHeight\r\n            ? Math.floor(localVideoTrack.resolution / newHeight)\r\n            : 1;\r\n        parameters.encodings[0].active = true;\r\n    } else {\r\n        parameters.encodings[0].scaleResolutionDownBy = undefined;\r\n        parameters.encodings[0].active = false;\r\n    }\r\n\r\n    logger.info(`${this} setting max height of ${newHeight}, encodings: ${JSON.stringify(parameters.encodings)}`);\r\n\r\n    return videoSender.setParameters(parameters).then(() => {\r\n        localVideoTrack.maxEnabledResolution = newHeight;\r\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\r\n\r\n        // Max bitrate needs to be reconfigured on the sender in p2p/non-simulcast case if needed when\r\n        // the send resolution changes.\r\n        if (this.isP2P || !this.isSimulcastOn()) {\r\n            return this.setMaxBitRate();\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Enables/disables video media transmission on this peer connection. When\r\n * disabled the SDP video media direction in the local SDP will be adjusted to\r\n * 'inactive' which means that no data will be sent nor accepted, but\r\n * the connection should be kept alive.\r\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\r\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\r\n * no effect.\r\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\r\n * needs to be executed in order for the changes to take effect or\r\n * <tt>false</tt> if the given value was the same as the previous one.\r\n * @public\r\n */\r\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\r\n    logger.debug(`${this} video transfer active: ${active}`);\r\n    const changed = this.videoTransferActive !== active;\r\n\r\n    this.videoTransferActive = active;\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        this.tpcUtils.setVideoTransferActive(active);\r\n\r\n        // false means no renegotiation up the chain which is not needed in the Unified mode\r\n        return false;\r\n    }\r\n\r\n    return changed;\r\n};\r\n\r\n/**\r\n * Sends DTMF tones if possible.\r\n *\r\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\r\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\r\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\r\n *\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\r\n    if (!this._dtmfSender) {\r\n        if (this.peerconnection.getSenders) {\r\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\r\n\r\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\r\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\r\n        }\r\n\r\n        if (!this._dtmfSender) {\r\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\r\n\r\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\r\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\r\n            }\r\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\r\n        }\r\n\r\n        if (this._dtmfSender) {\r\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\r\n        }\r\n    }\r\n\r\n    if (this._dtmfSender) {\r\n        if (this._dtmfSender.toneBuffer) {\r\n            this._dtmfTonesQueue.push({\r\n                tones,\r\n                duration,\r\n                interToneGap\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\r\n    } else {\r\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\r\n    }\r\n};\r\n\r\n/**\r\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\r\n * a single tone.\r\n *\r\n * @param {Object} event - The tonechange event which indicates what characters\r\n * are left to be played for the current tone.\r\n * @private\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype._onToneChange = function(event) {\r\n    // An empty event.tone indicates the current tones have finished playing.\r\n    // Automatically start playing any queued tones on finish.\r\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\r\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\r\n\r\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\r\n    }\r\n};\r\n\r\n/**\r\n * Makes the underlying TraceablePeerConnection generate new SSRC for\r\n * the recvonly video stream.\r\n */\r\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\r\n    const newSSRC = SDPUtil.generateSsrc();\r\n\r\n    logger.info(`${this} generated new recvonly SSRC: ${newSSRC}`);\r\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\r\n};\r\n\r\n/**\r\n * Makes the underlying TraceablePeerConnection forget the current primary video\r\n * SSRC.\r\n */\r\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\r\n    logger.info('Clearing primary video SSRC!');\r\n    this.sdpConsistency.clearVideoSsrcCache();\r\n};\r\n\r\n/**\r\n * Closes underlying WebRTC PeerConnection instance and removes all remote\r\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\r\n * them.\r\n */\r\nTraceablePeerConnection.prototype.close = function() {\r\n    this.trace('stop');\r\n\r\n    // Off SignalingEvents\r\n    this.signalingLayer.off(\r\n        SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\r\n    this.signalingLayer.off(\r\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\r\n\r\n    for (const peerTracks of this.remoteTracks.values()) {\r\n        for (const remoteTrack of peerTracks.values()) {\r\n            this._removeRemoteTrack(remoteTrack);\r\n        }\r\n    }\r\n    this.remoteTracks.clear();\r\n\r\n    this._addedStreams = [];\r\n\r\n    this._dtmfSender = null;\r\n    this._dtmfTonesQueue = [];\r\n\r\n    if (!this.rtc._removePeerConnection(this)) {\r\n        logger.error('RTC._removePeerConnection returned false');\r\n    }\r\n    if (this.statsinterval !== null) {\r\n        window.clearInterval(this.statsinterval);\r\n        this.statsinterval = null;\r\n    }\r\n    logger.info(`Closing ${this}...`);\r\n    this.peerconnection.close();\r\n};\r\n\r\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\r\n    return this._createOfferOrAnswer(false /* answer */, constraints);\r\n};\r\n\r\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\r\n    return this._createOfferOrAnswer(true /* offer */, constraints);\r\n};\r\n\r\n/**\r\n * Checks if a camera track has been added to the peerconnection\r\n * @param {TraceablePeerConnection} peerConnection\r\n * @return {boolean} <tt>true</tt> if the peerconnection has\r\n * a camera track for its video source <tt>false</tt> otherwise.\r\n */\r\nfunction hasCameraTrack(peerConnection) {\r\n    return peerConnection.getLocalTracks()\r\n        .some(t => t.videoType === 'camera');\r\n}\r\n\r\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\r\n        isOffer,\r\n        constraints) {\r\n    const logName = isOffer ? 'Offer' : 'Answer';\r\n\r\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\r\n\r\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\r\n        try {\r\n            this.trace(\r\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\r\n\r\n            if (browser.usesPlanB()) {\r\n                // If there are no local video tracks, then a \"recvonly\"\r\n                // SSRC needs to be generated\r\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\r\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\r\n                    this.generateRecvonlySsrc();\r\n                }\r\n\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = new RTCSessionDescription({\r\n                    type: resultSdp.type,\r\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\r\n                        resultSdp.sdp)\r\n                });\r\n\r\n                this.trace(\r\n                    `create${logName}OnSuccess::postTransform `\r\n                         + '(make primary audio/video ssrcs consistent)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            // configure simulcast for camera tracks always and for\r\n            // desktop tracks only when the testing flag for maxbitrates\r\n            // in config.js is disabled.\r\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\r\n                && (!this.options.capScreenshareBitrate\r\n                || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\r\n                this.trace(\r\n                    `create${logName}`\r\n                        + 'OnSuccess::postTransform (simulcast)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = new RTCSessionDescription({\r\n                    type: resultSdp.type,\r\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\r\n                });\r\n\r\n                this.trace(\r\n                    `create${logName}`\r\n                         + 'OnSuccess::postTransform (rtx modifier)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            const ssrcMap = extractSSRCMap(resultSdp);\r\n\r\n            logger.debug('Got local SSRCs MAP: ', ssrcMap);\r\n            this._processLocalSSRCsMap(ssrcMap);\r\n\r\n            resolveFn(resultSdp);\r\n        } catch (e) {\r\n            this.trace(`create${logName}OnError`, e);\r\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\r\n            logger.error(`create${logName}OnError`, e, dumpSDP(resultSdp));\r\n\r\n            rejectFn(e);\r\n        }\r\n    };\r\n\r\n    const handleFailure = (err, rejectFn) => {\r\n        this.trace(`create${logName}OnFailure`, err);\r\n        const eventType\r\n            = isOffer\r\n                ? RTCEvents.CREATE_OFFER_FAILED\r\n                : RTCEvents.CREATE_ANSWER_FAILED;\r\n\r\n        this.eventEmitter.emit(eventType, err, this);\r\n\r\n        rejectFn(err);\r\n    };\r\n\r\n    if (this._usesTransceiverCodecPreferences) {\r\n        const transceiver = this.peerconnection.getTransceivers()\r\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\r\n\r\n        if (transceiver) {\r\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\r\n            const mimeType = this.codecPreference?.mimeType;\r\n            const enable = this.codecPreference?.enable;\r\n\r\n            if (capabilities && mimeType && enable) {\r\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\r\n                /* eslint-disable-next-line arrow-body-style */\r\n                capabilities.sort(caps => {\r\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\r\n                });\r\n            } else if (capabilities && mimeType) {\r\n                capabilities = capabilities\r\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\r\n            }\r\n\r\n            // Disable ulpfec on Google Chrome and derivatives because\r\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\r\n            if (browser.isChromiumBased()) {\r\n                capabilities = capabilities\r\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\r\n            }\r\n\r\n            try {\r\n                transceiver.setCodecPreferences(capabilities);\r\n            } catch (err) {\r\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\r\n            }\r\n        }\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        let oaPromise;\r\n\r\n        if (isOffer) {\r\n            oaPromise = this.peerconnection.createOffer(constraints);\r\n        } else {\r\n            oaPromise = this.peerconnection.createAnswer(constraints);\r\n        }\r\n\r\n        oaPromise\r\n            .then(\r\n                sdp => handleSuccess(sdp, resolve, reject),\r\n                error => handleFailure(error, reject));\r\n    });\r\n};\r\n\r\n/**\r\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\r\n * @param {TrackSSRCInfo} ssrcObj\r\n * @return {number|null} the primary SSRC or <tt>null</tt>\r\n */\r\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\r\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\r\n        return ssrcObj.groups[0].ssrcs[0];\r\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\r\n        return ssrcObj.ssrcs[0];\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Goes over the SSRC map extracted from the latest local description and tries\r\n * to match them with the local tracks (by MSID). Will update the values\r\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\r\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\r\n    for (const track of this.localTracks.values()) {\r\n        const trackMSID = track.storedMSID;\r\n\r\n        if (ssrcMap.has(trackMSID)) {\r\n            const newSSRC = ssrcMap.get(trackMSID);\r\n\r\n            if (!newSSRC) {\r\n                logger.error(`No SSRC found for: ${trackMSID} in ${this}`);\r\n\r\n                return;\r\n            }\r\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\r\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\r\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\r\n\r\n            // eslint-disable-next-line no-negated-condition\r\n            if (newSSRCNum !== oldSSRCNum) {\r\n                if (oldSSRCNum === null) {\r\n                    logger.info(\r\n                        `Storing new local SSRC for ${track} in ${this}`,\r\n                        newSSRC);\r\n                } else {\r\n                    logger.error(\r\n                        `Overwriting SSRC for ${track} ${trackMSID} in ${this\r\n                        } with: `, newSSRC);\r\n                }\r\n                this.localSSRCs.set(track.rtcId, newSSRC);\r\n\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\r\n            } else {\r\n                logger.debug(\r\n                    `The local SSRC(${newSSRCNum}) for ${track} ${trackMSID}`\r\n                     + `is still up to date in ${this}`);\r\n            }\r\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\r\n            // It is normal to find no SSRCs for a muted video track in\r\n            // the local SDP as the recv-only SSRC is no longer munged in.\r\n            // So log the warning only if it's not a muted video track.\r\n            logger.warn(`No SSRCs found in the local SDP for ${track} MSID: ${trackMSID} in ${this}`);\r\n        }\r\n    }\r\n};\r\n\r\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\r\n    this.trace('addIceCandidate', JSON.stringify({\r\n        candidate: candidate.candidate,\r\n        sdpMid: candidate.sdpMid,\r\n        sdpMLineIndex: candidate.sdpMLineIndex,\r\n        usernameFragment: candidate.usernameFragment\r\n    }, null, ' '));\r\n\r\n    return this.peerconnection.addIceCandidate(candidate);\r\n};\r\n\r\n/**\r\n * Obtains call-related stats from the peer connection.\r\n *\r\n * @param {Function} callback - The function to invoke after successfully\r\n * obtaining stats.\r\n * @param {Function} errback - The function to invoke after failing to obtain\r\n * stats.\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype.getStats = function(callback, errback) {\r\n    // TODO (brian): After moving all browsers to adapter, check if adapter is\r\n    // accounting for different getStats apis, making the browser-checking-if\r\n    // unnecessary.\r\n    if (browser.isSafari() || browser.isFirefox() || browser.isReactNative()) {\r\n        // uses the new Promise based getStats\r\n        this.peerconnection.getStats()\r\n            .then(callback)\r\n            .catch(errback || (() => {\r\n\r\n                // Making sure that getStats won't fail if error callback is\r\n                // not passed.\r\n            }));\r\n    } else {\r\n        this.peerconnection.getStats(callback);\r\n    }\r\n};\r\n\r\n/**\r\n * Generates and stores new SSRC info object for given local track.\r\n * The method should be called only for a video track being added to this TPC\r\n * in the muted state (given that the current browser uses this strategy).\r\n * @param {JitsiLocalTrack} track\r\n * @return {TPCSSRCInfo}\r\n */\r\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\r\n    const rtcId = track.rtcId;\r\n    let ssrcInfo = this._getSSRC(rtcId);\r\n\r\n    if (ssrcInfo) {\r\n        logger.error(`Will overwrite local SSRCs for track ID: ${rtcId}`);\r\n    }\r\n\r\n    // configure simulcast for camera tracks always and for\r\n    // desktop tracks only when the testing flag for maxbitrates\r\n    // in config.js is disabled.\r\n    if (this.isSimulcastOn()\r\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\r\n        ssrcInfo = {\r\n            ssrcs: [],\r\n            groups: []\r\n        };\r\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\r\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\r\n        }\r\n        ssrcInfo.groups.push({\r\n            ssrcs: ssrcInfo.ssrcs.slice(),\r\n            semantics: 'SIM'\r\n        });\r\n    } else {\r\n        ssrcInfo = {\r\n            ssrcs: [ SDPUtil.generateSsrc() ],\r\n            groups: []\r\n        };\r\n    }\r\n    if (!this.options.disableRtx) {\r\n        // Specifically use a for loop here because we'll\r\n        //  be adding to the list we're iterating over, so we\r\n        //  only want to iterate through the items originally\r\n        //  on the list\r\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\r\n\r\n        for (let i = 0; i < currNumSsrcs; ++i) {\r\n            const primarySsrc = ssrcInfo.ssrcs[i];\r\n            const rtxSsrc = SDPUtil.generateSsrc();\r\n\r\n            ssrcInfo.ssrcs.push(rtxSsrc);\r\n            ssrcInfo.groups.push({\r\n                ssrcs: [ primarySsrc, rtxSsrc ],\r\n                semantics: 'FID'\r\n            });\r\n        }\r\n    }\r\n    ssrcInfo.msid = track.storedMSID;\r\n    this.localSSRCs.set(rtcId, ssrcInfo);\r\n\r\n    return ssrcInfo;\r\n};\r\n\r\n/**\r\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\r\n * instance.\r\n * @return {string}\r\n */\r\nTraceablePeerConnection.prototype.toString = function() {\r\n    return `TPC[${this.id},p2p:${this.isP2P}]`;\r\n};\r\n\r\n/**\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n * @param {*} description \r\n * @returns \r\n */\r\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\r\n    const { audioQuality } = this.options;\r\n\r\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\r\n        return description;\r\n    }\r\n\r\n    const parsedSdp = transform.parse(description.sdp);\r\n    const mLines = parsedSdp.media;\r\n\r\n    for (const mLine of mLines) {\r\n        if (mLine.type === 'audio') {\r\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\r\n\r\n            if (!payload) {\r\n                // eslint-disable-next-line no-continue\r\n                continue;\r\n            }\r\n\r\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\r\n\r\n            if (!fmtpOpus) {\r\n                fmtpOpus = {\r\n                    payload,\r\n                    config: ''\r\n                };\r\n            }\r\n\r\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\r\n            let sdpChanged = false;\r\n\r\n            if (audioQuality?.stereo) {\r\n                fmtpConfig.stereo = 1;\r\n                sdpChanged = true;\r\n            }\r\n\r\n            if (audioQuality?.opusMaxAverageBitrate) {\r\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\r\n                sdpChanged = true;\r\n            }\r\n\r\n            if (!sdpChanged) {\r\n                // eslint-disable-next-line no-continue\r\n                continue;\r\n            }\r\n\r\n            let mungedConfig = '';\r\n\r\n            for (const key of Object.keys(fmtpConfig)) {\r\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\r\n            }\r\n\r\n            fmtpOpus.config = mungedConfig.trim();\r\n        }\r\n    }\r\n\r\n    return new RTCSessionDescription({\r\n        type: description.type,\r\n        sdp: transform.write(parsedSdp)\r\n    });\r\n};\r\n\r\n/**\r\n * Returns the codec that is configured on the client as the preferred video codec.\r\n * This takes into account the current order of codecs in the local description sdp.\r\n *\r\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\r\n * video in the local SDP.\r\n */\r\n TraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\r\n    const sdp = this.peerconnection.localDescription?.sdp;\r\n    const defaultCodec = CodecMimeType.VP8;\r\n\r\n    if (!sdp) {\r\n        return defaultCodec;\r\n    }\r\n    const parsedSdp = transform.parse(sdp);\r\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\r\n    const codec = mLine.rtp[0].codec;\r\n\r\n    if (codec) {\r\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\r\n    }\r\n\r\n    return defaultCodec;\r\n};\r\n\r\nTraceablePeerConnection.prototype._isSharingScreen = function() {\r\n    const tracks = this.getLocalVideoTracks();\r\n\r\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\r\n};\r\n\r\n/**\r\n * Retrieves the local video tracks.\r\n *\r\n * @returns {JitsiLocalTrack|undefined} - local video tracks.\r\n */\r\n TraceablePeerConnection.prototype.getLocalVideoTracks = function() {\r\n    return this.getLocalTracks(MediaType.VIDEO);\r\n};\r\n\r\n/**\r\n * Checks if low fps screensharing is in progress.\r\n *\r\n * @private\r\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\r\n */\r\n TraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\r\n    return this._isSharingScreen() && this._capScreenshareBitrate;\r\n};\r\n\r\n/**\r\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\r\n *\r\n * @param {string} id Endpoint id of the remote participant.\r\n * @returns {Array<string>} The sdp lines that have the ssrc information.\r\n */\r\n TraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\r\n    const removeSsrcInfo = [];\r\n    const remoteTracks = this.getRemoteTracks(id);\r\n\r\n    if (!remoteTracks?.length) {\r\n        return removeSsrcInfo;\r\n    }\r\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\r\n    const sdp = new SDP(this.remoteDescription.sdp);\r\n\r\n    primarySsrcs.forEach((ssrc, idx) => {\r\n        for (const media of sdp.media) {\r\n            let lines = '';\r\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\r\n\r\n            if (ssrcLines.length) {\r\n                if (!removeSsrcInfo[idx]) {\r\n                    removeSsrcInfo[idx] = '';\r\n                }\r\n\r\n                // Check if there are any FID groups present for the primary ssrc.\r\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\r\n\r\n                if (fidLines.length) {\r\n                    const secondarySsrc = fidLines[0].split(' ')[2];\r\n\r\n                    lines += `${fidLines[0]}\\r\\n`;\r\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\r\n                }\r\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\r\n                removeSsrcInfo[idx] += lines;\r\n            }\r\n        }\r\n    });\r\n\r\n    return removeSsrcInfo;\r\n};","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport SDPUtil from './SDPUtil';\r\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Begin helper functions\r\n */\r\n/**\r\n * Updates or inserts the appropriate rtx information for primarySsrc with\r\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\r\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\r\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\r\n * @param {MLineWrap} mLine\r\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\r\n *  primary ssrc\r\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\r\n */\r\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\r\n    logger.debug(\r\n        `Updating mline to associate ${rtxSsrc}`\r\n        + `rtx ssrc with primary stream, ${primarySsrcInfo.id}`);\r\n    const primarySsrc = primarySsrcInfo.id;\r\n    const primarySsrcMsid = primarySsrcInfo.msid;\r\n    const primarySsrcCname = primarySsrcInfo.cname;\r\n\r\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\r\n\r\n    if (previousRtxSSRC === rtxSsrc) {\r\n        logger.debug(`${rtxSsrc} was already associated with ${primarySsrc}`);\r\n\r\n        return;\r\n    }\r\n    if (previousRtxSSRC) {\r\n        logger.debug(\r\n            `${primarySsrc} was previously associated with rtx`\r\n            + `${previousRtxSSRC}, removing all references to it`);\r\n\r\n        // Stream already had an rtx ssrc that is different than the one given,\r\n        //  remove all trace of the old one\r\n        mLine.removeSSRC(previousRtxSSRC);\r\n\r\n        logger.debug(`groups before filtering for ${previousRtxSSRC}`);\r\n        logger.debug(mLine.dumpSSRCGroups());\r\n\r\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\r\n    }\r\n    mLine.addSSRCAttribute({\r\n        id: rtxSsrc,\r\n        attribute: 'cname',\r\n        value: primarySsrcCname\r\n    });\r\n    mLine.addSSRCAttribute({\r\n        id: rtxSsrc,\r\n        attribute: 'msid',\r\n        value: primarySsrcMsid\r\n    });\r\n    mLine.addSSRCGroup({\r\n        semantics: 'FID',\r\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\r\n    });\r\n}\r\n\r\n/**\r\n * End helper functions\r\n */\r\n\r\n/**\r\n * Adds any missing RTX streams for video streams\r\n *  and makes sure that they remain consistent\r\n */\r\nexport default class RtxModifier {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Map of video ssrc to corresponding RTX\r\n         *  ssrc\r\n         */\r\n        this.correspondingRtxSsrcs = new Map();\r\n    }\r\n\r\n    /**\r\n     * Clear the cached map of primary video ssrcs to\r\n     *  their corresponding rtx ssrcs so that they will\r\n     *  not be used for the next call to modifyRtxSsrcs\r\n     */\r\n    clearSsrcCache() {\r\n        this.correspondingRtxSsrcs.clear();\r\n    }\r\n\r\n    /**\r\n     * Explicitly set the primary video ssrc -> rtx ssrc\r\n     *  mapping to be used in modifyRtxSsrcs\r\n     * @param {Map} ssrcMapping a mapping of primary video\r\n     *  ssrcs to their corresponding rtx ssrcs\r\n     */\r\n    setSsrcCache(ssrcMapping) {\r\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\r\n        this.correspondingRtxSsrcs = ssrcMapping;\r\n    }\r\n\r\n    /**\r\n     * Adds RTX ssrcs for any video ssrcs that don't\r\n     *  already have them.  If the video ssrc has been\r\n     *  seen before, and already had an RTX ssrc generated,\r\n     *  the same RTX ssrc will be used again.\r\n     * @param {string} sdpStr sdp in raw string format\r\n     */\r\n    modifyRtxSsrcs(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n\r\n        return this.modifyRtxSsrcs2(videoMLine)\r\n            ? sdpTransformer.toRawSDP() : sdpStr;\r\n    }\r\n\r\n    /**\r\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\r\n     *  {@link MLineWrap} instance wrapping video media as an argument.\r\n     * @param {MLineWrap} videoMLine\r\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\r\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\r\n     */\r\n    modifyRtxSsrcs2(videoMLine) {\r\n        if (videoMLine.direction === 'recvonly') {\r\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\r\n\r\n            return false;\r\n        }\r\n        if (videoMLine.getSSRCCount() < 1) {\r\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\r\n\r\n            return false;\r\n        }\r\n        logger.debug('Current ssrc mapping: ', this.correspondingRtxSsrcs);\r\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\r\n\r\n        logger.debug('Parsed primary video ssrcs ', primaryVideoSsrcs,\r\n            ' making sure all have rtx streams');\r\n        for (const ssrc of primaryVideoSsrcs) {\r\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\r\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\r\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\r\n\r\n            if (correspondingRtxSsrc) {\r\n                logger.debug(\r\n                    'Already have an associated rtx ssrc for'\r\n                    + `video ssrc ${ssrc}: ${correspondingRtxSsrc}`);\r\n            } else {\r\n                logger.debug(\r\n                    `No previously associated rtx ssrc for video ssrc ${ssrc}`);\r\n\r\n                // If there's one in the sdp already for it, we'll just set\r\n                //  that as the corresponding one\r\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\r\n\r\n                if (previousAssociatedRtxStream) {\r\n                    logger.debug(\r\n                        `Rtx stream ${previousAssociatedRtxStream} `\r\n                        + 'already existed in the sdp as an rtx stream for '\r\n                        + `${ssrc}`);\r\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\r\n                } else {\r\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\r\n                    logger.debug(`Generated rtx ssrc ${correspondingRtxSsrc} `\r\n                                 + `for ssrc ${ssrc}`);\r\n                }\r\n                logger.debug(`Caching rtx ssrc ${correspondingRtxSsrc} `\r\n                             + `for video ssrc ${ssrc}`);\r\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\r\n            }\r\n            updateAssociatedRtxStream(\r\n                videoMLine,\r\n                {\r\n                    id: ssrc,\r\n                    cname,\r\n                    msid\r\n                },\r\n                correspondingRtxSsrc);\r\n        }\r\n\r\n        // FIXME we're not looking into much details whether the SDP has been\r\n        // modified or not once the precondition requirements are met.\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Strip all rtx streams from the given sdp\r\n     * @param {string} sdpStr sdp in raw string format\r\n     * @returns {string} sdp string with all rtx streams stripped\r\n     */\r\n    stripRtx(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n        if (videoMLine.direction === 'recvonly') {\r\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\r\n\r\n            return sdpStr;\r\n        }\r\n        if (videoMLine.getSSRCCount() < 1) {\r\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\r\n\r\n            return sdpStr;\r\n        }\r\n        if (!videoMLine.containsAnySSRCGroups()) {\r\n            logger.debug('RtxModifier doing nothing, '\r\n              + 'no video ssrcGroups present');\r\n\r\n            return sdpStr;\r\n        }\r\n        const fidGroups = videoMLine.findGroups('FID');\r\n\r\n        // Remove the fid groups from the mline\r\n\r\n        videoMLine.removeGroupsBySemantics('FID');\r\n\r\n        // Get the rtx ssrcs and remove them from the mline\r\n        for (const fidGroup of fidGroups) {\r\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\r\n\r\n            videoMLine.removeSSRC(rtxSsrc);\r\n        }\r\n\r\n        return sdpTransformer.toRawSDP();\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    parsePrimarySSRC,\r\n    parseSecondarySSRC,\r\n    SdpTransformWrap\r\n} from './SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Handles the work of keeping video ssrcs consistent across multiple\r\n * o/a cycles, making it such that all stream operations can be\r\n * kept local and do not need to be signaled.\r\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\r\n * the primary video stream\r\n */\r\nexport default class SdpConsistency {\r\n    /**\r\n     * Constructor\r\n     * @param {string} logPrefix the log prefix appended to every logged\r\n     * message, currently used to distinguish for which\r\n     * <tt>TraceablePeerConnection</tt> the instance works.\r\n     */\r\n    constructor(logPrefix) {\r\n        this.clearVideoSsrcCache();\r\n        this.logPrefix = logPrefix;\r\n    }\r\n\r\n    /**\r\n     * Clear the cached video primary and primary rtx ssrcs so that\r\n     *  they will not be used for the next call to\r\n     *  makeVideoPrimarySsrcsConsistent\r\n     */\r\n    clearVideoSsrcCache() {\r\n        this.cachedPrimarySsrc = null;\r\n        this.injectRecvOnly = false;\r\n    }\r\n\r\n    /**\r\n     * Explicitly set the primary ssrc to be used in\r\n     *  makeVideoPrimarySsrcsConsistent\r\n     * @param {number} primarySsrc the primarySsrc to be used\r\n     *  in future calls to makeVideoPrimarySsrcsConsistent\r\n     * @throws Error if <tt>primarySsrc</tt> is not a number\r\n     */\r\n    setPrimarySsrc(primarySsrc) {\r\n        if (typeof primarySsrc !== 'number') {\r\n            throw new Error('Primary SSRC must be a number!');\r\n        }\r\n        this.cachedPrimarySsrc = primarySsrc;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not there is a primary video SSRC cached already.\r\n     * @return {boolean}\r\n     */\r\n    hasPrimarySsrcCached() {\r\n        return Boolean(this.cachedPrimarySsrc);\r\n    }\r\n\r\n    /**\r\n     * Given an sdp string, either:\r\n     *  1) record the primary video and primary rtx ssrcs to be\r\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\r\n     *  2) change the primary and primary rtx ssrcs in the given sdp\r\n     *   to match the ones previously cached\r\n     * @param {string} sdpStr the sdp string to (potentially)\r\n     *  change to make the video ssrcs consistent\r\n     * @returns {string} a (potentially) modified sdp string\r\n     *  with ssrcs consistent with this class' cache\r\n     */\r\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(\r\n                `${this.logPrefix} no 'video' media found in the sdp: `\r\n                    + `${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n\r\n        if (videoMLine.direction === 'recvonly') {\r\n            // If the mline is recvonly, we'll add the primary\r\n            //  ssrc as a recvonly ssrc\r\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\r\n                videoMLine.addSSRCAttribute({\r\n                    id: this.cachedPrimarySsrc,\r\n                    attribute: 'cname',\r\n                    value: `recvonly-${this.cachedPrimarySsrc}`\r\n                });\r\n            } else {\r\n                logger.info(\r\n                    `${this.logPrefix} no SSRC found for the recvonly video`\r\n                        + 'stream!');\r\n            }\r\n        } else {\r\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\r\n\r\n            if (!newPrimarySsrc) {\r\n                logger.info(\r\n                    `${this.logPrefix} sdp-consistency couldn't`\r\n                        + ' parse new primary ssrc');\r\n\r\n                return sdpStr;\r\n            }\r\n            if (this.cachedPrimarySsrc) {\r\n                logger.info(\r\n                    `${this.logPrefix} sdp-consistency replacing new ssrc`\r\n                        + `${newPrimarySsrc} with cached `\r\n                        + `${this.cachedPrimarySsrc}`);\r\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\r\n                for (const group of videoMLine.ssrcGroups) {\r\n                    if (group.semantics === 'FID') {\r\n                        const primarySsrc = parsePrimarySSRC(group);\r\n                        const rtxSsrc = parseSecondarySSRC(group);\r\n\r\n                        // eslint-disable-next-line max-depth\r\n                        if (primarySsrc === newPrimarySsrc) {\r\n                            group.ssrcs\r\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                this.cachedPrimarySsrc = newPrimarySsrc;\r\n                logger.info(\r\n                    `${this.logPrefix} sdp-consistency caching primary ssrc`\r\n                        + `${this.cachedPrimarySsrc}`);\r\n            }\r\n\r\n            this.injectRecvOnly = true;\r\n        }\r\n\r\n        return sdpTransformer.toRawSDP();\r\n    }\r\n}\r\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nimport JitsiTrack from './JitsiTrack';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\nconst RTCEvents = require('../../service/RTC/RTCEvents');\r\n\r\nlet ttfmTrackerAudioAttached = false;\r\nlet ttfmTrackerVideoAttached = false;\r\n\r\n/**\r\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\r\n * container for every event in the list.\r\n */\r\nconst containerEvents = [\r\n    'abort', 'canplay', 'canplaythrough', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart',\r\n    'pause', 'play', 'playing', 'ratechange', 'stalled', 'suspend', 'waiting'\r\n];\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Represents a single media track (either audio or video).\r\n */\r\nexport default class JitsiRemoteTrack extends JitsiTrack {\r\n    /**\r\n     * Creates new JitsiRemoteTrack instance.\r\n     * @param {RTC} rtc the RTC service instance.\r\n     * @param {JitsiConference} conference the conference to which this track\r\n     *        belongs to\r\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\r\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\r\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\r\n     *        the new JitsiRemoteTrack\r\n     * @param {MediaType} mediaType the type of the media\r\n     * @param {VideoType} videoType the type of the video if applicable\r\n     * @param {number} ssrc the SSRC number of the Media Stream\r\n     * @param {boolean} muted the initial muted state\r\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\r\n     * P2P session\r\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\r\n     * @constructor\r\n     */\r\n    constructor(\r\n            rtc,\r\n            conference,\r\n            ownerEndpointId,\r\n            stream,\r\n            track,\r\n            mediaType,\r\n            videoType,\r\n            ssrc,\r\n            muted,\r\n            isP2P,\r\n            sourceName) {\r\n        super(\r\n            conference,\r\n            stream,\r\n            track,\r\n            () => {\r\n                // Nothing to do if the track is inactive.\r\n            },\r\n            mediaType,\r\n            videoType);\r\n        this.rtc = rtc;\r\n\r\n        // Prevent from mixing up type of SSRC which should be a number\r\n        if (typeof ssrc !== 'number') {\r\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\r\n        }\r\n        this.ssrc = ssrc;\r\n        this.ownerEndpointId = ownerEndpointId;\r\n        this.muted = muted;\r\n        this.isP2P = isP2P;\r\n        this._sourceName = sourceName;\r\n\r\n        logger.debug(`New remote track added: ${this}`);\r\n\r\n        // we want to mark whether the track has been ever muted\r\n        // to detect ttfm events for startmuted conferences, as it can\r\n        // significantly increase ttfm values\r\n        this.hasBeenMuted = muted;\r\n\r\n        // Bind 'onmute' and 'onunmute' event handlers\r\n        if (this.rtc && this.track) {\r\n            this._bindTrackHandlers();\r\n        }\r\n        this._containerHandlers = {};\r\n        containerEvents.forEach(event => {\r\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n    /**\r\n     * Attaches the track handlers.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _bindTrackHandlers() {\r\n        this.track.addEventListener('mute', () => this._onTrackMute());\r\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\r\n        this.track.addEventListener('ended', () => {\r\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the track is muted. Emits an event notifying\r\n     * listeners of the mute event.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTrackMute() {\r\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\r\n\r\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the track is unmuted. Emits an event notifying\r\n     * listeners of the mute event.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTrackUnmute() {\r\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\r\n\r\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\r\n    }\r\n\r\n    /**\r\n     * Sets current muted status and fires an events for the change.\r\n     * @param value the muted status.\r\n     */\r\n    setMute(value) {\r\n        if (this.muted === value) {\r\n            return;\r\n        }\r\n\r\n        if (value) {\r\n            this.hasBeenMuted = true;\r\n        }\r\n\r\n        // we can have a fake video stream\r\n        if (this.stream) {\r\n            this.stream.muted = value;\r\n        }\r\n\r\n        this.muted = value;\r\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\r\n    }\r\n\r\n    /**\r\n     * Returns the current muted status of the track.\r\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\r\n     * muted and <tt>false</tt> otherwise.\r\n     */\r\n    isMuted() {\r\n        return this.muted;\r\n    }\r\n\r\n    /**\r\n     * Returns the participant id which owns the track.\r\n     *\r\n     * @returns {string} the id of the participants. It corresponds to the\r\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\r\n     */\r\n    getParticipantId() {\r\n        return this.ownerEndpointId;\r\n    }\r\n\r\n    /**\r\n     * Return false;\r\n     */\r\n    isLocal() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the synchronization source identifier (SSRC) of this remote\r\n     * track.\r\n     *\r\n     * @returns {number} the SSRC of this remote track.\r\n     */\r\n    getSSRC() {\r\n        return this.ssrc;\r\n    }\r\n\r\n    /**\r\n     * Changes the video type of the track.\r\n     *\r\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\r\n     */\r\n    _setVideoType(type) {\r\n        if (this.videoType === type) {\r\n            return;\r\n        }\r\n        this.videoType = type;\r\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\r\n    }\r\n\r\n    /**\r\n     * Handles track play events.\r\n     */\r\n    _playCallback() {\r\n        const type = this.isVideoTrack() ? 'video' : 'audio';\r\n\r\n        const now = window.performance.now();\r\n\r\n        console.log(`(TIME) Render ${type}:\\t`, now);\r\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\r\n\r\n        // The conference can be started without calling GUM\r\n        // FIXME if there would be a module for connection times this kind\r\n        // of logic (gumDuration or ttfm) should end up there\r\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\r\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\r\n        const gumDuration\r\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\r\n\r\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\r\n        // waits until there are 2 participants to start Jingle sessions.\r\n        const ttfm = now\r\n            - (this.conference.getConnectionTimes()['session.initiate']\r\n                - this.conference.getConnectionTimes()['muc.joined'])\r\n            - gumDuration;\r\n\r\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\r\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\r\n\r\n        Statistics.sendAnalytics(createTtfmEvent(\r\n            {\r\n                'media_type': type,\r\n                muted: this.hasBeenMuted,\r\n                value: ttfm\r\n            }));\r\n\r\n    }\r\n\r\n    /**\r\n     * Attach time to first media tracker only if there is conference and only\r\n     * for the first element.\r\n     * @param container the HTML container which can be 'video' or 'audio'\r\n     * element.\r\n     * @private\r\n     */\r\n    _attachTTFMTracker(container) {\r\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\r\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\r\n            return;\r\n        }\r\n\r\n        if (this.isAudioTrack()) {\r\n            ttfmTrackerAudioAttached = true;\r\n        }\r\n        if (this.isVideoTrack()) {\r\n            ttfmTrackerVideoAttached = true;\r\n        }\r\n\r\n        container.addEventListener('canplay', this._playCallback.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been attached to a new container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackAttach(container) {\r\n        logger.debug(`Track has been attached to a container: ${this}`);\r\n\r\n        containerEvents.forEach(event => {\r\n            container.addEventListener(event, this._containerHandlers[event]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been detached from a container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackDetach(container) {\r\n        logger.debug(`Track has been detached from a container: ${this}`);\r\n\r\n        containerEvents.forEach(event => {\r\n            container.removeEventListener(event, this._containerHandlers[event]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * An event handler for events triggered by the attached container.\r\n     *\r\n     * @param {string} type - The type of the event.\r\n     */\r\n    _containerEventHandler(type) {\r\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\r\n    }\r\n\r\n    /**\r\n     * Returns a string with a description of the current status of the track.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    _getStatus() {\r\n        const { enabled, muted, readyState } = this.track;\r\n\r\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\r\n    }\r\n\r\n    /**\r\n     * Creates a text representation of this remote track instance.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\r\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\r\n * description getter. Modifies the SDP, so that it will contain muted local\r\n * video tracks description, even though their underlying {MediaStreamTrack}s\r\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\r\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\r\n * side.\r\n */\r\nexport default class LocalSdpMunger {\r\n\r\n    /**\r\n     * Creates new <tt>LocalSdpMunger</tt> instance.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc\r\n     */\r\n    constructor(tpc) {\r\n        this.tpc = tpc;\r\n    }\r\n\r\n    /**\r\n     * Makes sure that muted local video tracks associated with the parent\r\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\r\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\r\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\r\n     * removed from the peerconnection).\r\n     *\r\n     * NOTE 1 video track is assumed\r\n     *\r\n     * @param {SdpTransformWrap} transformer the transformer instance which will\r\n     * be used to process the SDP.\r\n     * @return {boolean} <tt>true</tt> if there were any modifications to\r\n     * the SDP wrapped by <tt>transformer</tt>.\r\n     * @private\r\n     */\r\n    _addMutedLocalVideoTracksToSDP(transformer) {\r\n        // Go over each video tracks and check if the SDP has to be changed\r\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\r\n\r\n        if (!localVideos.length) {\r\n            return false;\r\n        } else if (localVideos.length !== 1) {\r\n            logger.error(\r\n                `${this.tpc} there is more than 1 video track ! `\r\n                    + 'Strange things may happen !', localVideos);\r\n        }\r\n\r\n        const videoMLine = transformer.selectMedia('video');\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(\r\n                `${this.tpc} unable to hack local video track SDP`\r\n                    + '- no \"video\" media');\r\n\r\n            return false;\r\n        }\r\n\r\n        let modified = false;\r\n\r\n        for (const videoTrack of localVideos) {\r\n            const muted = videoTrack.isMuted();\r\n            const mediaStream = videoTrack.getOriginalStream();\r\n\r\n            // During the mute/unmute operation there are periods of time when\r\n            // the track's underlying MediaStream is not added yet to\r\n            // the PeerConnection. The SDP needs to be munged in such case.\r\n            const isInPeerConnection\r\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\r\n            const shouldFakeSdp = muted || !isInPeerConnection;\r\n\r\n            logger.debug(\r\n                `${this.tpc} ${videoTrack} muted: ${\r\n                    muted}, is in PeerConnection: ${\r\n                    isInPeerConnection} => should fake sdp ? : ${\r\n                    shouldFakeSdp}`);\r\n\r\n            if (!shouldFakeSdp) {\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            // Inject removed SSRCs\r\n            const requiredSSRCs\r\n                = this.tpc.isSimulcastOn()\r\n                    ? this.tpc.simulcast.ssrcCache\r\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\r\n\r\n            if (!requiredSSRCs.length) {\r\n                logger.error(\r\n                    `No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\r\n\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            modified = true;\r\n\r\n            // We need to fake sendrecv.\r\n            // NOTE the SDP produced here goes only to Jicofo and is never set\r\n            // as localDescription. That's why\r\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\r\n            videoMLine.direction = 'sendrecv';\r\n\r\n            // Check if the recvonly has MSID\r\n            const primarySSRC = requiredSSRCs[0];\r\n\r\n            // FIXME The cname could come from the stream, but may turn out to\r\n            // be too complex. It is fine to come up with any value, as long as\r\n            // we only care about the actual SSRC values when deciding whether\r\n            // or not an update should be sent.\r\n            const primaryCname = `injected-${primarySSRC}`;\r\n\r\n            for (const ssrcNum of requiredSSRCs) {\r\n                // Remove old attributes\r\n                videoMLine.removeSSRC(ssrcNum);\r\n\r\n                // Inject\r\n                logger.debug(\r\n                    `${this.tpc} injecting video SSRC: ${ssrcNum} for ${\r\n                        videoTrack}`);\r\n                videoMLine.addSSRCAttribute({\r\n                    id: ssrcNum,\r\n                    attribute: 'cname',\r\n                    value: primaryCname\r\n                });\r\n                videoMLine.addSSRCAttribute({\r\n                    id: ssrcNum,\r\n                    attribute: 'msid',\r\n                    value: videoTrack.storedMSID\r\n                });\r\n            }\r\n            if (requiredSSRCs.length > 1) {\r\n                const group = {\r\n                    ssrcs: requiredSSRCs.join(' '),\r\n                    semantics: 'SIM'\r\n                };\r\n\r\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\r\n                    // Inject the group\r\n                    logger.debug(\r\n                        `${this.tpc} injecting SIM group for ${videoTrack}`,\r\n                        group);\r\n                    videoMLine.addSSRCGroup(group);\r\n                }\r\n            }\r\n\r\n            // Insert RTX\r\n            // FIXME in P2P RTX is used by Chrome regardless of config option\r\n            // status. Because of that 'source-remove'/'source-add'\r\n            // notifications are still sent to remove/add RTX SSRC and FID group\r\n            if (!this.tpc.options.disableRtx) {\r\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\r\n            }\r\n        }\r\n\r\n        return modified;\r\n    }\r\n\r\n    /**\r\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\r\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\r\n     * sign.\r\n     *\r\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\r\n     * session description which will be modified in place.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _transformMediaIdentifiers(mediaSection) {\r\n        const pcId = this.tpc.id;\r\n\r\n        for (const ssrcLine of mediaSection.ssrcs) {\r\n            switch (ssrcLine.attribute) {\r\n            case 'cname':\r\n            case 'label':\r\n            case 'mslabel':\r\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\r\n                break;\r\n            case 'msid': {\r\n                if (ssrcLine.value) {\r\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\r\n\r\n                    if (streamAndTrackIDs.length === 2) {\r\n                        const streamId = streamAndTrackIDs[0];\r\n                        const trackId = streamAndTrackIDs[1];\r\n\r\n                        ssrcLine.value\r\n                            = `${streamId}-${pcId} ${trackId}-${pcId}`;\r\n                    } else {\r\n                        logger.warn(\r\n                            'Unable to munge local MSID'\r\n                                + `- weird format detected: ${ssrcLine.value}`);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Maybe modifies local description to fake local video tracks SDP when\r\n     * those are muted.\r\n     *\r\n     * @param {object} desc the WebRTC SDP object instance for the local\r\n     * description.\r\n     * @returns {RTCSessionDescription}\r\n     */\r\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\r\n        if (!desc) {\r\n            throw new Error('No local description passed in.');\r\n        }\r\n\r\n        const transformer = new SdpTransformWrap(desc.sdp);\r\n\r\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\r\n            return new RTCSessionDescription({\r\n                type: desc.type,\r\n                sdp: transformer.toRawSDP()\r\n            });\r\n        }\r\n\r\n        return desc;\r\n    }\r\n\r\n    /**\r\n     * This transformation will make sure that stream identifiers are unique\r\n     * across all of the local PeerConnections even if the same stream is used\r\n     * by multiple instances at the same time.\r\n     * Each PeerConnection assigns different SSRCs to the same local\r\n     * MediaStream, but the MSID remains the same as it's used to identify\r\n     * the stream by the WebRTC backend. The transformation will append\r\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\r\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\r\n     *\r\n     * @param {RTCSessionDescription} sessionDesc - The local session\r\n     * description (this instance remains unchanged).\r\n     * @return {RTCSessionDescription} - Transformed local session description\r\n     * (a modified copy of the one given as the input).\r\n     */\r\n    transformStreamIdentifiers(sessionDesc) {\r\n        // FIXME similar check is probably duplicated in all other transformers\r\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\r\n            return sessionDesc;\r\n        }\r\n\r\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\r\n        const audioMLine = transformer.selectMedia('audio');\r\n\r\n        if (audioMLine) {\r\n            this._transformMediaIdentifiers(audioMLine);\r\n        }\r\n\r\n        const videoMLine = transformer.selectMedia('video');\r\n\r\n        if (videoMLine) {\r\n            this._transformMediaIdentifiers(videoMLine);\r\n        }\r\n\r\n        return new RTCSessionDescription({\r\n            type: sessionDesc.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\r\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\r\n\r\nconst Resolutions = require('../../service/RTC/Resolutions');\r\nconst VideoType = require('../../service/RTC/VideoType');\r\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\r\n * over the data channel.\r\n */\r\nconst STATS_MESSAGE_TYPE = 'stats';\r\n\r\n/**\r\n * See media/engine/simulcast.ss from webrtc.org\r\n */\r\nconst kSimulcastFormats = [\r\n    { width: 1920,\r\n        height: 1080,\r\n        layers: 3,\r\n        max: 5000,\r\n        target: 4000,\r\n        min: 800 },\r\n    { width: 1280,\r\n        height: 720,\r\n        layers: 3,\r\n        max: 2500,\r\n        target: 2500,\r\n        min: 600 },\r\n    { width: 960,\r\n        height: 540,\r\n        layers: 3,\r\n        max: 900,\r\n        target: 900,\r\n        min: 450 },\r\n    { width: 640,\r\n        height: 360,\r\n        layers: 2,\r\n        max: 700,\r\n        target: 500,\r\n        min: 150 },\r\n    { width: 480,\r\n        height: 270,\r\n        layers: 2,\r\n        max: 450,\r\n        target: 350,\r\n        min: 150 },\r\n    { width: 320,\r\n        height: 180,\r\n        layers: 1,\r\n        max: 200,\r\n        target: 150,\r\n        min: 30 }\r\n];\r\n\r\n/**\r\n * The maximum bitrate to use as a measurement against the participant's current\r\n * bitrate. This cap helps in the cases where the participant's bitrate is high\r\n * but not enough to fulfill high targets, such as with 1080p.\r\n */\r\nconst MAX_TARGET_BITRATE = 2500;\r\n\r\n/**\r\n * The initial bitrate for video in kbps.\r\n */\r\nlet startBitrate = 800;\r\n\r\n\r\n/**\r\n * The current cap (in kbps) put on the video stream (or null if there isn't\r\n * a cap).  If there is a cap, we'll take it into account when calculating\r\n * the current quality.\r\n */\r\nlet videoBitrateCap = null;\r\n\r\n/**\r\n * Gets the expected bitrate (in kbps) in perfect network conditions.\r\n * @param simulcast {boolean} whether simulcast is enabled or not.\r\n * @param resolution {Resolution} the resolution.\r\n * @param millisSinceStart {number} the number of milliseconds since sending\r\n * video started.\r\n */\r\nfunction getTarget(simulcast, resolution, millisSinceStart) {\r\n    // Completely ignore the bitrate in the first 5 seconds, as the first\r\n    // event seems to fire very early and the value is suspicious and causes\r\n    // false positives.\r\n    if (millisSinceStart < 15000) {\r\n        return 1;\r\n    }\r\n\r\n    let target = 0;\r\n    let height = Math.min(resolution.height, resolution.width);\r\n\r\n    if (simulcast) {\r\n        // Find the first format with height no bigger than ours.\r\n        let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\r\n\r\n        if (simulcastFormat) {\r\n            // Sum the target fields from all simulcast layers for the given\r\n            // resolution (e.g. 720p + 360p + 180p).\r\n            for (height = simulcastFormat.height; height >= 180; height /= 2) {\r\n                const targetHeight = height;\r\n\r\n                simulcastFormat\r\n                    = kSimulcastFormats.find(f => f.height === targetHeight);\r\n                if (simulcastFormat) {\r\n                    target += simulcastFormat.target;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // See GetMaxDefaultVideoBitrateKbps in\r\n        // media/engine/webrtcvideoengine2.cc from webrtc.org\r\n        const pixels = resolution.width * resolution.height;\r\n\r\n        if (pixels <= 320 * 240) {\r\n            target = 600;\r\n        } else if (pixels <= 640 * 480) {\r\n            target = 1700;\r\n        } else if (pixels <= 960 * 540) {\r\n            target = 2000;\r\n        } else {\r\n            target = 2500;\r\n        }\r\n    }\r\n\r\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\r\n    // of connection quality by 1 second.\r\n    return Math.min(target, rampUp(Math.max(0, millisSinceStart - 1000)));\r\n}\r\n\r\n/**\r\n * Gets the bitrate to which GCC would have ramped up in perfect network\r\n * conditions after millisSinceStart milliseconds.\r\n * @param millisSinceStart {number} the number of milliseconds since sending\r\n * video was enabled.\r\n */\r\nfunction rampUp(millisSinceStart) {\r\n    if (millisSinceStart > 60000) {\r\n        return Number.MAX_SAFE_INTEGER;\r\n    }\r\n\r\n    // According to GCC the send side bandwidth estimation grows with at most\r\n    // 8% per second.\r\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\r\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\r\n}\r\n\r\n/**\r\n * A class which monitors the local statistics coming from the RTC modules, and\r\n * calculates a \"connection quality\" value, in percent, for the media\r\n * connection. A value of 100% indicates a very good network connection, and a\r\n * value of 0% indicates a poor connection.\r\n */\r\nexport default class ConnectionQuality {\r\n    /**\r\n     *\r\n     * @param conference\r\n     * @param eventEmitter\r\n     * @param options\r\n     */\r\n    constructor(conference, eventEmitter, options) {\r\n        this.eventEmitter = eventEmitter;\r\n\r\n        /**\r\n         * The owning JitsiConference.\r\n         */\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Holds statistics about the local connection quality.\r\n         */\r\n        this._localStats = {\r\n            connectionQuality: 100,\r\n            jvbRTT: undefined\r\n        };\r\n\r\n        /**\r\n         * The time this._localStats.connectionQuality was last updated.\r\n         */\r\n        this._lastConnectionQualityUpdate = -1;\r\n\r\n        /**\r\n         * Maps a participant ID to an object holding connection quality\r\n         * statistics received from this participant.\r\n         */\r\n        this._remoteStats = {};\r\n\r\n        /**\r\n         * The time that the ICE state last changed to CONNECTED. We use this\r\n         * to calculate how much time we as a sender have had to ramp-up.\r\n         */\r\n        this._timeIceConnected = -1;\r\n\r\n        /**\r\n         * The time that local video was unmuted. We use this to calculate how\r\n         * much time we as a sender have had to ramp-up.\r\n         */\r\n        this._timeVideoUnmuted = -1;\r\n\r\n        /**\r\n         * The time at which a video bitrate cap was last removed.  We use\r\n         * this to calculate how much time we, as a sender, have had to\r\n         * ramp-up\r\n         */\r\n        this._timeLastBwCapRemoved = -1;\r\n\r\n        // We assume a global startBitrate value for the sake of simplicity.\r\n        if (options.config.startBitrate && options.config.startBitrate > 0) {\r\n            startBitrate = options.config.startBitrate;\r\n        }\r\n\r\n        // TODO: consider ignoring these events and letting the user of\r\n        // lib-jitsi-meet handle these separately.\r\n        conference.on(\r\n            ConferenceEvents.CONNECTION_INTERRUPTED,\r\n            () => {\r\n                this._updateLocalConnectionQuality(0);\r\n                this.eventEmitter.emit(\r\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n                    this._localStats);\r\n                this._broadcastLocalStats();\r\n            });\r\n\r\n        conference.room.addListener(\r\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\r\n            (jingleSession, newState) => {\r\n                if (!jingleSession.isP2P && newState === 'connected') {\r\n                    this._timeIceConnected = window.performance.now();\r\n                }\r\n            });\r\n\r\n        // Listen to DataChannel message from other participants in the\r\n        // conference, and update the _remoteStats field accordingly.\r\n        conference.on(\r\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            (participant, payload) => {\r\n                if (payload.type === STATS_MESSAGE_TYPE) {\r\n                    this._updateRemoteStats(\r\n                        participant.getId(), payload.values);\r\n                }\r\n            });\r\n\r\n        // Listen to local statistics events originating from the RTC module\r\n        // and update the _localStats field.\r\n        // Oh, and by the way, the resolutions of all remote participants are\r\n        // also piggy-backed in these \"local\" statistics. It's obvious, really,\r\n        // if one carefully reads the *code* (but not the docs) in\r\n        // UI/VideoLayout/VideoLayout.js#updateLocalConnectionStats in\r\n        // jitsi-meet\r\n        // TODO: We should keep track of the remote resolution in _remoteStats,\r\n        // and notify about changes via separate events.\r\n        conference.statistics.addConnectionStatsListener(\r\n            this._updateLocalStats.bind(this));\r\n\r\n        // Save the last time we were unmuted.\r\n        conference.on(\r\n            ConferenceEvents.TRACK_MUTE_CHANGED,\r\n            track => {\r\n                if (track.isVideoTrack()) {\r\n                    if (track.isMuted()) {\r\n                        this._timeVideoUnmuted = -1;\r\n                    } else {\r\n                        this._maybeUpdateUnmuteTime();\r\n                    }\r\n                }\r\n            });\r\n        conference.on(\r\n            ConferenceEvents.TRACK_ADDED,\r\n            track => {\r\n                if (track.isVideoTrack() && !track.isMuted()) {\r\n                    this._maybeUpdateUnmuteTime();\r\n                }\r\n            });\r\n        conference.rtc.on(\r\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\r\n            track => {\r\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\r\n            });\r\n\r\n        conference.on(\r\n            ConferenceEvents.SERVER_REGION_CHANGED,\r\n            serverRegion => {\r\n                this._localStats.serverRegion = serverRegion;\r\n            });\r\n\r\n        conference.on(\r\n            ConferenceEvents.PROPERTIES_CHANGED,\r\n            properties => {\r\n                this._localStats.bridgeCount\r\n                    = Number((properties || {})['bridge-count']);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\r\n     * doesn't change it.\r\n     */\r\n    _maybeUpdateUnmuteTime() {\r\n        if (this._timeVideoUnmuted < 0) {\r\n            this._timeVideoUnmuted = window.performance.now();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates a new \"connection quality\" value.\r\n     * @param videoType {VideoType} the type of the video source (camera or\r\n     * a screen capture).\r\n     * @param isMuted {boolean} whether the local video is muted.\r\n     * @param resolutionName {Resolution} the input resolution used by the\r\n     * camera.\r\n     * @returns {*} the newly calculated connection quality.\r\n     */\r\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\r\n\r\n        // resolutionName is an index into Resolutions (where \"720\" is\r\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\r\n        const resolution = Resolutions[resolutionName];\r\n\r\n        let quality = 100;\r\n        let packetLoss;\r\n\r\n        // TODO: take into account packet loss for received streams\r\n\r\n        if (this._localStats.packetLoss) {\r\n            packetLoss = this._localStats.packetLoss.upload;\r\n\r\n            // Ugly Hack Alert (UHA):\r\n            // The packet loss for the upload direction is calculated based on\r\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\r\n            // termination for audio, these reports come from the actual\r\n            // receivers in the conference and therefore the reported packet\r\n            // loss includes loss from the bridge to the receiver.\r\n            // When we are sending video this effect is small, because the\r\n            // number of video packets is much larger than the number of audio\r\n            // packets (and our calculation is based on the total number of\r\n            // received and lost packets).\r\n            // When video is muted, however, the effect might be significant,\r\n            // but we don't know what it is. We do know that it is positive, so\r\n            // as a temporary solution, until RTCP termination is implemented\r\n            // for the audio streams, we relax the packet loss checks here.\r\n            if (isMuted) {\r\n                packetLoss *= 0.5;\r\n            }\r\n        }\r\n\r\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\r\n            || this._timeIceConnected < 0\r\n            || this._timeVideoUnmuted < 0) {\r\n\r\n            // Calculate a value based on packet loss only.\r\n            if (packetLoss === undefined) {\r\n                logger.error('Cannot calculate connection quality, unknown '\r\n                    + 'packet loss.');\r\n                quality = 100;\r\n            } else if (packetLoss <= 2) {\r\n                quality = 100; // Full 5 bars.\r\n            } else if (packetLoss <= 4) {\r\n                quality = 70; // 4 bars\r\n            } else if (packetLoss <= 6) {\r\n                quality = 50; // 3 bars\r\n            } else if (packetLoss <= 8) {\r\n                quality = 30; // 2 bars\r\n            } else if (packetLoss <= 12) {\r\n                quality = 10; // 1 bars\r\n            } else {\r\n                quality = 0; // Still 1 bar, but slower climb-up.\r\n            }\r\n        } else {\r\n            // Calculate a value based on the sending bitrate.\r\n\r\n            // Figure out if simulcast is in use\r\n            const activeTPC = this._conference.getActivePeerConnection();\r\n            const isSimulcastOn\r\n                = Boolean(activeTPC && activeTPC.isSimulcastOn());\r\n\r\n            const newVideoBitrateCap\r\n                = activeTPC && activeTPC.bandwidthLimiter\r\n                && activeTPC.bandwidthLimiter.getBandwidthLimit('video');\r\n\r\n            // If we had a cap set but there isn't one now, then it has\r\n            // just been 'lifted', so we should treat this like a new\r\n            // ramp up.\r\n            if (!newVideoBitrateCap && videoBitrateCap) {\r\n                this._timeLastBwCapRemoved = window.performance.now();\r\n\r\n                // Set the start bitrate to whatever we were just capped to\r\n                startBitrate = videoBitrateCap;\r\n            }\r\n            videoBitrateCap = newVideoBitrateCap;\r\n\r\n            // time since sending of video was enabled.\r\n            const millisSinceStart = window.performance.now()\r\n                - Math.max(this._timeVideoUnmuted,\r\n                    this._timeIceConnected,\r\n                    this._timeLastBwCapRemoved);\r\n\r\n            // expected sending bitrate in perfect conditions\r\n            let target\r\n                = getTarget(isSimulcastOn, resolution, millisSinceStart);\r\n\r\n            target = Math.min(0.9 * target, MAX_TARGET_BITRATE);\r\n\r\n            if (videoBitrateCap) {\r\n                target = Math.min(target, videoBitrateCap);\r\n            }\r\n\r\n            quality = 100 * this._localStats.bitrate.upload / target;\r\n\r\n            // Whatever the bitrate, drop early if there is significant loss\r\n            if (packetLoss && packetLoss >= 10) {\r\n                quality = Math.min(quality, 30);\r\n            }\r\n        }\r\n\r\n        // Make sure that the quality doesn't climb quickly\r\n        if (this._lastConnectionQualityUpdate > 0) {\r\n            const maxIncreasePerSecond = 2;\r\n            const prevConnectionQuality = this._localStats.connectionQuality;\r\n            const diffSeconds\r\n                = (window.performance.now() - this._lastConnectionQualityUpdate)\r\n                    / 1000;\r\n\r\n            quality\r\n                = Math.min(\r\n                    quality,\r\n                    prevConnectionQuality\r\n                        + (diffSeconds * maxIncreasePerSecond));\r\n        }\r\n\r\n        return Math.min(100, quality);\r\n    }\r\n\r\n    /**\r\n     * Updates the localConnectionQuality value\r\n     * @param values {number} the new value. Should be in [0, 100].\r\n     */\r\n    _updateLocalConnectionQuality(value) {\r\n        this._localStats.connectionQuality = value;\r\n        this._lastConnectionQualityUpdate = window.performance.now();\r\n    }\r\n\r\n    /**\r\n     * Broadcasts the local statistics to all other participants in the\r\n     * conference.\r\n     */\r\n    _broadcastLocalStats() {\r\n        // Send only the data that remote participants care about.\r\n        const data = {\r\n            bitrate: this._localStats.bitrate,\r\n            packetLoss: this._localStats.packetLoss,\r\n            connectionQuality: this._localStats.connectionQuality,\r\n            jvbRTT: this._localStats.jvbRTT,\r\n            serverRegion: this._localStats.serverRegion,\r\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\r\n            avgAudioLevels: this._localStats.localAvgAudioLevels\r\n        };\r\n\r\n        try {\r\n            this._conference.broadcastEndpointMessage({\r\n                type: STATS_MESSAGE_TYPE,\r\n                values: data });\r\n        } catch (e) {\r\n            // We often hit this in the beginning of a call, before the data\r\n            // channel is ready. It is not a big problem, because we will\r\n            // send the statistics again after a few seconds, and the error is\r\n            // already logged elsewhere. So just ignore it.\r\n\r\n            // let errorMsg = \"Failed to broadcast local stats\";\r\n            // logger.error(errorMsg, e);\r\n            // GlobalOnErrorHandler.callErrorHandler(\r\n            //    new Error(errorMsg + \": \" + e));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the local statistics\r\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\r\n     * the stats\r\n     * @param data new statistics\r\n     */\r\n    _updateLocalStats(tpc, data) {\r\n        // Update jvbRTT\r\n        if (!tpc.isP2P) {\r\n            const jvbRTT\r\n                = data.transport\r\n                    && data.transport.length && data.transport[0].rtt;\r\n\r\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\r\n        }\r\n\r\n        // Do not continue with processing of other stats if they do not\r\n        // originate from the active peerconnection\r\n        if (tpc !== this._conference.getActivePeerConnection()) {\r\n            return;\r\n        }\r\n\r\n        let key;\r\n        const updateLocalConnectionQuality\r\n            = !this._conference.isConnectionInterrupted();\r\n        const localVideoTrack\r\n            = this._conference.getLocalVideoTrack();\r\n        const videoType\r\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\r\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\r\n        const resolution = localVideoTrack\r\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\r\n\r\n        if (!isMuted) {\r\n            this._maybeUpdateUnmuteTime();\r\n        }\r\n\r\n        // Copy the fields already in 'data'.\r\n        for (key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                this._localStats[key] = data[key];\r\n            }\r\n        }\r\n\r\n        // And re-calculate the connectionQuality field.\r\n        if (updateLocalConnectionQuality) {\r\n            this._updateLocalConnectionQuality(\r\n                this._calculateConnectionQuality(\r\n                    videoType,\r\n                    isMuted,\r\n                    resolution));\r\n        }\r\n\r\n        this.eventEmitter.emit(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._localStats);\r\n        this._broadcastLocalStats();\r\n    }\r\n\r\n    /**\r\n     * Updates remote statistics\r\n     * @param id the id of the remote participant\r\n     * @param data the statistics received\r\n     */\r\n    _updateRemoteStats(id, data) {\r\n        // Use only the fields we need\r\n        this._remoteStats[id] = {\r\n            bitrate: data.bitrate,\r\n            packetLoss: data.packetLoss,\r\n            connectionQuality: data.connectionQuality,\r\n            jvbRTT: data.jvbRTT,\r\n            serverRegion: data.serverRegion,\r\n            maxEnabledResolution: data.maxEnabledResolution,\r\n            avgAudioLevels: data.avgAudioLevels\r\n        };\r\n\r\n        this.eventEmitter.emit(\r\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n            id,\r\n            this._remoteStats[id]);\r\n    }\r\n\r\n    /**\r\n     * Returns the local statistics.\r\n     * Exported only for use in jitsi-meet-torture.\r\n     */\r\n    getStats() {\r\n        return this._localStats;\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\r\n *\r\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\r\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\r\n * the internet offline status then the time will start counting after the internet comes back online.\r\n *\r\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\r\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\r\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\r\n */\r\nexport default class IceFailedHandling {\r\n    /**\r\n     * Creates new {@code DelayedIceFailed} task.\r\n     * @param {JitsiConference} conference\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n    }\r\n\r\n    /**\r\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\r\n     * notification to Jicofo or emits the ice failed conference event.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _actOnIceFailed() {\r\n        const { enableIceRestart } = this._conference.options.config;\r\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\r\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\r\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\r\n\r\n        logger.info('ICE failed,'\r\n            + ` enableIceRestart: ${enableIceRestart},`\r\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\r\n\r\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate)) {\r\n            logger.info('ICE failed, but ICE restarts are disabled');\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.ICE_FAILED);\r\n\r\n            return;\r\n        }\r\n\r\n        const jvbConnection = this._conference.jvbJingleSession;\r\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\r\n\r\n        if (!jvbConnection) {\r\n            logger.warn('Not sending ICE failed - no JVB connection');\r\n        } else if (jvbConnIceState === 'connected') {\r\n            logger.info('ICE connection restored - not sending ICE failed');\r\n        } else {\r\n            logger.info('Sending ICE failed - the connection did not recover, '\r\n                + `ICE state: ${jvbConnIceState}, `\r\n                + `use 'session-terminate': ${useTerminateForRestart}`);\r\n            if (useTerminateForRestart) {\r\n                this._conference.jvbJingleSession.terminate(\r\n                    () => {\r\n                        logger.info('session-terminate for ice restart - done');\r\n                    },\r\n                    error => {\r\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\r\n                    }, {\r\n                        reason: 'connectivity-error',\r\n                        reasonDescription: 'ICE FAILED',\r\n                        requestRestart: true,\r\n                        sendSessionTerminate: true\r\n                    });\r\n            } else {\r\n                this._conference.jvbJingleSession.sendIceFailedNotification();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the task.\r\n     */\r\n    start() {\r\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\r\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\r\n        // gets reconnected.\r\n        //  This also handles the case about waiting for the internet to come back online, because ping\r\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\r\n        // CONNECTED which is the extra 2 second timeout after ping.\r\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\r\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\r\n        // to 'item-not-found' error returned by the server.\r\n        this._conference.xmpp.ping(65000).then(\r\n            () => {\r\n                if (!this._canceled) {\r\n                    this._iceFailedTimeout = window.setTimeout(() => {\r\n                        this._iceFailedTimeout = undefined;\r\n                        this._actOnIceFailed();\r\n                    }, 2000);\r\n                }\r\n            },\r\n            error => {\r\n                logger.error('PING error/timeout - not sending ICE failed', error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Cancels the task.\r\n     */\r\n    cancel() {\r\n        this._canceled = true;\r\n        window.clearTimeout(this._iceFailedTimeout);\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport browser from '../browser';\r\n\r\nimport * as DetectionEvents from './DetectionEvents';\r\n\r\n// We wait a certain time interval for constant silence input from the current device to account for\r\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\r\n// an audio track is added to the tcr.\r\n// Potential improvement - add this as a configurable parameter.\r\nconst SILENCE_PERIOD_MS = 4000;\r\n\r\n/**\r\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\r\n * state must be constant for a configured amount of time in order for the event to be triggered.\r\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\r\n * @fires DetectionEvents.NO_AUDIO_INPUT\r\n */\r\nexport default class NoAudioSignalDetection extends EventEmitter {\r\n    /**\r\n     * Creates new NoAudioSignalDetection.\r\n     *\r\n     * @param conference the JitsiConference instance that created us.\r\n     * @constructor\r\n     */\r\n    constructor(conference) {\r\n        super();\r\n\r\n        this._conference = conference;\r\n        this._timeoutTrigger = null;\r\n        this._hasAudioInput = null;\r\n\r\n        if (!browser.supportsReceiverStats()) {\r\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\r\n        }\r\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Clear the timeout state.\r\n     */\r\n    _clearTriggerTimeout() {\r\n        clearTimeout(this._timeoutTrigger);\r\n        this._timeoutTrigger = null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Generated event triggered by a change in the current conference audio input state.\r\n     *\r\n     * @param {*} audioLevel - The audio level of the ssrc.\r\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\r\n     */\r\n    _handleAudioInputStateChange(audioLevel) {\r\n        // Current audio input state of the active local track in the conference, true for audio input false for no\r\n        // audio input.\r\n        const status = audioLevel !== 0;\r\n\r\n        // If this is the first audio event picked up or the current status is different from the previous trigger\r\n        // the event.\r\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\r\n            this._hasAudioInput = status;\r\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate event triggered by a prolonged period of no audio input.\r\n     *\r\n     * @param {number} audioLevel - The audio level of the ssrc.\r\n     * @fires DetectionEvents.NO_AUDIO_INPUT\r\n     */\r\n    _handleNoAudioInputDetection(audioLevel) {\r\n        if (this._eventFired) {\r\n            return;\r\n        }\r\n\r\n        if (audioLevel === 0 && !this._timeoutTrigger) {\r\n            this._timeoutTrigger = setTimeout(() => {\r\n                this._eventFired = true;\r\n\r\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\r\n            }, SILENCE_PERIOD_MS);\r\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\r\n            this._clearTriggerTimeout();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\r\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\r\n     * being reported.\r\n     * @param {number} audioLevel - The audio level of the ssrc.\r\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\r\n     */\r\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\r\n        // We are interested in the local audio streams\r\n        if (!isLocal || !this._audioTrack) {\r\n            return;\r\n        }\r\n\r\n        // Get currently active local tracks from the TraceablePeerConnection\r\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\r\n\r\n        // Only target the current active track in the tpc. For some reason audio levels for previous\r\n        // devices are also picked up from the PeerConnection so we filter them out.\r\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\r\n            return;\r\n        }\r\n\r\n        // First handle audio input state change. In case the state changed to no input the no audio input event\r\n        // can try to fire again.\r\n        this._handleAudioInputStateChange(audioLevel);\r\n        this._handleNoAudioInputDetection(audioLevel);\r\n    }\r\n\r\n    /**\r\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\r\n     * Only take into account local audio tracks.\r\n     *\r\n     * @param {JitsiTrack} track - The added JitsiTrack.\r\n     */\r\n    _trackAdded(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Reset state for the new track.\r\n            this._audioTrack = track;\r\n            this._eventFired = false;\r\n            this._clearTriggerTimeout();\r\n\r\n            // Listen for the audio levels on the newly added audio track\r\n            if (browser.supportsReceiverStats()) {\r\n                track.on(\r\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\r\n                    audioLevel => {\r\n                        this._handleNoAudioInputDetection(audioLevel);\r\n                    }\r\n                );\r\n                track.on(\r\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                    audioLevel => {\r\n                        this._handleNoAudioInputDetection(audioLevel);\r\n                        this._handleAudioInputStateChange(audioLevel);\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\n\r\n/**\r\n * The value which we use to say, every sound over this threshold\r\n * is talking on the mic.\r\n * @type {number}\r\n */\r\nconst SPEECH_DETECT_THRESHOLD = 0.6;\r\n\r\n/**\r\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\r\n * currently used.\r\n * Listens for changes in the audio level changes of the local p2p audio track\r\n * or remote p2p one and fires dominant speaker events to be able to use\r\n * features depending on those events (speaker stats), to make them work without\r\n * the video bridge.\r\n */\r\nexport default class P2PDominantSpeakerDetection {\r\n    /**\r\n     * Creates P2PDominantSpeakerDetection\r\n     * @param conference the JitsiConference instance that created us.\r\n     * @constructor\r\n     */\r\n    constructor(conference) {\r\n        this.conference = conference;\r\n\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n            this._audioLevel.bind(this));\r\n\r\n        this.myUserID = this.conference.myUserId();\r\n    }\r\n\r\n    /**\r\n     * Receives audio level events for all streams in the conference.\r\n     *\r\n     * @param {String} id - The participant id\r\n     * @param {number} audioLevel - The audio level.\r\n     */\r\n    _audioLevel(id, audioLevel) {\r\n\r\n        // we do not process if p2p is not active\r\n        // or audio level is under certain threshold\r\n        // or if the audio level is for local audio track which is muted\r\n        if (!this.conference.isP2PActive()\r\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\r\n            || (id === this.myUserID\r\n                    && this.conference.getLocalAudioTrack().isMuted())) {\r\n            return;\r\n        }\r\n\r\n        this.conference.rtc.eventEmitter.emit(\r\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n            id);\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\n\r\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\r\n\r\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\n\r\n/**\r\n * The average value VAD needs to be under over a period of time to be considered noise.\r\n * @type {number}\r\n */\r\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\r\n\r\n/**\r\n * The average values that audio input need to be over to be considered loud.\r\n * @type {number}\r\n */\r\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\r\n\r\n/**\r\n * The value that a VAD score needs to be under in order for processing to begin.\r\n * @type {number}\r\n */\r\nconst VAD_SCORE_TRIGGER = 0.2;\r\n\r\n/**\r\n * The value that a VAD score needs to be under in order for processing to begin.\r\n * @type {number}\r\n */\r\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\r\n\r\n/**\r\n * Time span over which we calculate an average score used to determine if we trigger the event.\r\n * @type {number}\r\n */\r\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\r\n\r\n/**\r\n * Detect if provided VAD score and PCM data is considered noise.\r\n */\r\nexport default class VADNoiseDetection extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADNoiseDetection</tt>\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\r\n         * ongoing.\r\n         */\r\n        this._processing = false;\r\n\r\n        /**\r\n         * Buffer that keeps the VAD scores for a period of time.\r\n         */\r\n        this._scoreArray = [];\r\n\r\n        /**\r\n         * Buffer that keeps audio level samples for a period of time.\r\n         */\r\n        this._audioLvlArray = [];\r\n\r\n        /**\r\n         * Current state of the service, if it's not active no processing will occur.\r\n         */\r\n        this._active = false;\r\n\r\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\r\n     * If the score is above the set threshold fire the event.\r\n     * @returns {void}\r\n     * @fires VAD_NOISY_DEVICE\r\n     */\r\n    _calculateNoisyScore() {\r\n        const scoreAvg = calculateAverage(this._scoreArray);\r\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\r\n\r\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\r\n            this.emit(VAD_NOISY_DEVICE);\r\n\r\n            this._setActiveState(false);\r\n        }\r\n\r\n        // We reset the context in case a new process phase needs to be triggered.\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Record the vad score and average volume in the appropriate buffers.\r\n     *\r\n     * @param {number} vadScore\r\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\r\n     */\r\n    _recordValues(vadScore, avgAudioLvl) {\r\n        this._scoreArray.push(vadScore);\r\n        this._audioLvlArray.push(avgAudioLvl);\r\n    }\r\n\r\n    /**\r\n     * Set the active state of the detection service and notify any listeners.\r\n     *\r\n     * @param {boolean} active\r\n     * @fires DETECTOR_STATE_CHANGE\r\n     */\r\n    _setActiveState(active) {\r\n        this._active = active;\r\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\r\n    }\r\n\r\n    /**\r\n     * Change the state according to the muted status of the tracked device.\r\n     *\r\n     * @param {boolean} isMuted - Is the device muted or not.\r\n     */\r\n    changeMuteState(isMuted) {\r\n        // This service only needs to run when the microphone is not muted.\r\n        this._setActiveState(!isMuted);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the service is active or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isActive() {\r\n        return this._active;\r\n    }\r\n\r\n    /**\r\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._processing = false;\r\n        this._scoreArray = [];\r\n        this._audioLvlArray = [];\r\n        clearTimeout(this._processTimeout);\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and processes them.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    processVADScore(vadScore) {\r\n        if (!this._active) {\r\n            return;\r\n        }\r\n\r\n        // There is a processing phase on going, add score to buffer array.\r\n        if (this._processing) {\r\n            // Filter and calculate sample average so we don't have to process one large array at a time.\r\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\r\n\r\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\r\n\r\n            return;\r\n        }\r\n\r\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\r\n        // noise\r\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\r\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\r\n            const avgAudioLvl = calculateAverage(posAudioLevels);\r\n\r\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\r\n                this._processing = true;\r\n                this._recordValues(vadScore.score, avgAudioLvl);\r\n\r\n                // Once the preset timeout executes the final score will be calculated.\r\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\n\r\nimport { calculateAverage } from '../util/MathUtil';\r\n\r\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\n\r\n\r\n/**\r\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\r\n * @type {number}\r\n */\r\nconst VAD_AVG_THRESHOLD = 0.6;\r\n\r\n/**\r\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\r\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\r\n * @type {number}\r\n */\r\nconst VAD_VOICE_LEVEL = 0.9;\r\n\r\n/**\r\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\r\n * @type {number}\r\n */\r\n\r\n/**\r\n * Time span over which we calculate an average score used to determine if we trigger the event.\r\n * @type {number}\r\n */\r\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\r\n\r\n/**\r\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\r\n */\r\nexport default class VADTalkMutedDetection extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADTalkMutedDetection</tt>\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\r\n         * ongoing.\r\n         */\r\n        this._processing = false;\r\n\r\n        /**\r\n         * Buffer that keeps the VAD scores for a period of time.\r\n         */\r\n        this._scoreArray = [];\r\n\r\n        /**\r\n         * Current mute state of the audio track being monitored.\r\n         */\r\n        this._active = false;\r\n\r\n        this._calculateVADScore = this._calculateVADScore.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\r\n     * @returns {void}\r\n     * @fires VAD_TALK_WHILE_MUTED\r\n     */\r\n    _calculateVADScore() {\r\n        const score = calculateAverage(this._scoreArray);\r\n\r\n        if (score > VAD_AVG_THRESHOLD) {\r\n            this.emit(VAD_TALK_WHILE_MUTED);\r\n\r\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\r\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\r\n            this._setActiveState(false);\r\n        }\r\n\r\n        // We reset the context in case a new process phase needs to be triggered.\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Set the active state of the detection service and notify any listeners.\r\n     *\r\n     * @param {boolean} active\r\n     * @fires DETECTOR_STATE_CHANGE\r\n     */\r\n    _setActiveState(active) {\r\n        this._active = active;\r\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\r\n    }\r\n\r\n    /**\r\n     * Change the state according to the muted status of the tracked device.\r\n     *\r\n     * @param {boolean} isMuted - Is the device muted or not.\r\n     */\r\n    changeMuteState(isMuted) {\r\n        // This service only needs to run when the microphone is muted.\r\n        this._setActiveState(isMuted);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the service is active or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isActive() {\r\n        return this._active;\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and processes them.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    processVADScore(vadScore) {\r\n        if (!this._active) {\r\n            return;\r\n        }\r\n\r\n        // There is a processing phase on going, add score to buffer array.\r\n        if (this._processing) {\r\n            this._scoreArray.push(vadScore.score);\r\n\r\n            return;\r\n        }\r\n\r\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\r\n        // there is no need to check for rogue events.\r\n        if (vadScore.score > VAD_VOICE_LEVEL) {\r\n            this._processing = true;\r\n            this._scoreArray.push(vadScore.score);\r\n\r\n            // Start gathering VAD scores for the configured period of time.\r\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._processing = false;\r\n        this._scoreArray = [];\r\n        clearTimeout(this._processTimeout);\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as E2ePingEvents\r\n    from '../../service/e2eping/E2ePingEvents';\r\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The 'type' of a message which designates an e2e ping request.\r\n * @type {string}\r\n */\r\nconst E2E_PING_REQUEST = 'e2e-ping-request';\r\n\r\n/**\r\n * The 'type' of a message which designates an e2e ping response.\r\n * @type {string}\r\n */\r\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\r\n\r\n/**\r\n * Saves e2e ping related state for a single JitsiParticipant.\r\n */\r\nclass ParticipantWrapper {\r\n    /**\r\n     * Creates a ParticipantWrapper\r\n     * @param {JitsiParticipant} participant - The remote participant that this\r\n     * object wraps.\r\n     * @param {E2ePing} e2eping\r\n     */\r\n    constructor(participant, e2eping) {\r\n        // The JitsiParticipant\r\n        this.participant = participant;\r\n\r\n        // The E2ePing\r\n        this.e2eping = e2eping;\r\n\r\n        // Caches the ID\r\n        this.id = participant.getId();\r\n\r\n        // Recently sent requests\r\n        this.requests = {};\r\n\r\n        // The ID of the last sent request. We just increment it for each new\r\n        // request. Start at 1 so we can consider only thruthy values valid.\r\n        this.lastRequestId = 1;\r\n\r\n        this.clearIntervals = this.clearIntervals.bind(this);\r\n        this.sendRequest = this.sendRequest.bind(this);\r\n        this.handleResponse = this.handleResponse.bind(this);\r\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\r\n        this.sendAnalytics = this.sendAnalytics.bind(this);\r\n\r\n        // If the data channel was already open (this is likely a participant\r\n        // joining an existing conference) send a request immediately.\r\n        if (e2eping.isDataChannelOpen) {\r\n            this.sendRequest();\r\n        }\r\n\r\n        this.pingInterval = window.setInterval(\r\n            this.sendRequest, e2eping.pingIntervalMs);\r\n        this.analyticsInterval = window.setTimeout(\r\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\r\n    }\r\n\r\n    /**\r\n     * Clears the interval which sends pings.\r\n     * @type {*}\r\n     */\r\n    clearIntervals() {\r\n        if (this.pingInterval) {\r\n            window.clearInterval(this.pingInterval);\r\n        }\r\n        if (this.analyticsInterval) {\r\n            window.clearInterval(this.analyticsInterval);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the next ping request.\r\n     * @type {*}\r\n     */\r\n    sendRequest() {\r\n        const requestId = this.lastRequestId++;\r\n        const requestMessage = {\r\n            type: E2E_PING_REQUEST,\r\n            id: requestId\r\n        };\r\n\r\n        this.e2eping.sendMessage(requestMessage, this.id);\r\n        this.requests[requestId] = {\r\n            id: requestId,\r\n            timeSent: window.performance.now()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Handles a response from this participant.\r\n     * @type {*}\r\n     */\r\n    handleResponse(response) {\r\n        const request = this.requests[response.id];\r\n\r\n        if (request) {\r\n            request.rtt = window.performance.now() - request.timeSent;\r\n            this.e2eping.eventEmitter.emit(\r\n                E2ePingEvents.E2E_RTT_CHANGED,\r\n                this.participant,\r\n                request.rtt);\r\n        }\r\n\r\n        this.maybeSendAnalytics();\r\n    }\r\n\r\n    /**\r\n     * Goes over the requests, clearing ones which we don't need anymore, and\r\n     * if it finds at least one request with a valid RTT in the last\r\n     * 'analyticsIntervalMs' then sends an analytics event.\r\n     * @type {*}\r\n     */\r\n    maybeSendAnalytics() {\r\n        const now = window.performance.now();\r\n\r\n        // The RTT we'll report is the minimum RTT measured in the last\r\n        // analyticsInterval\r\n        let rtt = Infinity;\r\n        let request, requestId;\r\n\r\n        // It's time to send analytics. Clean up all requests and find the\r\n        for (requestId in this.requests) {\r\n            if (this.requests.hasOwnProperty(requestId)) {\r\n                request = this.requests[requestId];\r\n\r\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\r\n                    // An old request. We don't care about it anymore.\r\n                    delete this.requests[requestId];\r\n                } else if (request.rtt) {\r\n                    rtt = Math.min(rtt, request.rtt);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (rtt < Infinity) {\r\n            this.sendAnalytics(rtt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends an analytics event for this participant with the given RTT.\r\n     * @type {*}\r\n     */\r\n    sendAnalytics(rtt) {\r\n        Statistics.sendAnalytics(createE2eRttEvent(\r\n            this.id,\r\n            this.participant.getProperty('region'),\r\n            rtt));\r\n    }\r\n}\r\n\r\n/**\r\n * Implements end-to-end ping (from one conference participant to another) via\r\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\r\n *\r\n * TODO: use a broadcast message instead of individual pings to each remote\r\n * participant.\r\n *\r\n * This class:\r\n * 1. Sends periodic ping requests to all other participants in the\r\n * conference.\r\n * 2. Responds to ping requests from other participants.\r\n * 3. Fires events with the end-to-end RTT to each participant whenever a\r\n * response is received.\r\n * 4. Fires analytics events with the end-to-end RTT periodically.\r\n */\r\nexport default class E2ePing {\r\n    /**\r\n     * @param {JitsiConference} conference - The conference.\r\n     * @param {Function} sendMessage - The function to use to send a message.\r\n     * @param {Object} options\r\n     */\r\n    constructor(conference, options, sendMessage) {\r\n        this.conference = conference;\r\n        this.eventEmitter = conference.eventEmitter;\r\n        this.sendMessage = sendMessage;\r\n\r\n        // The interval at which pings will be sent (<= 0 disables sending).\r\n        this.pingIntervalMs = 10000;\r\n\r\n        // The interval at which analytics events will be sent.\r\n        this.analyticsIntervalMs = 60000;\r\n\r\n        // Maps a participant ID to its ParticipantWrapper\r\n        this.participants = {};\r\n\r\n        // Whether the WebRTC channel has been opened or not.\r\n        this.isDataChannelOpen = false;\r\n\r\n        if (options && options.e2eping) {\r\n            if (typeof options.e2eping.pingInterval === 'number') {\r\n                this.pingIntervalMs = options.e2eping.pingInterval;\r\n            }\r\n            if (typeof options.e2eping.analyticsInterval === 'number') {\r\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\r\n            }\r\n\r\n            // We want to report at most once a ping interval.\r\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\r\n                < this.pingIntervalMs) {\r\n                this.analyticsIntervalMs = this.pingIntervalMs;\r\n            }\r\n        }\r\n        logger.info(\r\n            `Initializing e2e ping; pingInterval=${\r\n                this.pingIntervalMs}, analyticsInterval=${\r\n                this.analyticsIntervalMs}.`);\r\n\r\n        this.participantJoined = this.participantJoined.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this.participantJoined);\r\n\r\n        this.participantLeft = this.participantLeft.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this.participantLeft);\r\n\r\n        this.messageReceived = this.messageReceived.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            this.messageReceived);\r\n\r\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\r\n            this.dataChannelOpened);\r\n    }\r\n\r\n    /**\r\n     * Notifies this instance that the communications channel has been opened\r\n     * and it can now send messages via sendMessage.\r\n     */\r\n    dataChannelOpened() {\r\n        this.isDataChannelOpen = true;\r\n\r\n        // We don't want to wait the whole interval before sending the first\r\n        // request, but we can't send it immediately after the participant joins\r\n        // either, because our data channel might not have initialized.\r\n        // So once the data channel initializes, send requests to everyone.\r\n        // Wait an additional 200ms to give a chance to the remote side (if it\r\n        // also just connected as is the case for the first 2 participants in a\r\n        // conference) to open its data channel.\r\n        for (const id in this.participants) {\r\n            if (this.participants.hasOwnProperty(id)) {\r\n                const participantWrapper = this.participants[id];\r\n\r\n                window.setTimeout(participantWrapper.sendRequest, 200);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a message that was received.\r\n     *\r\n     * @param participant - The message sender.\r\n     * @param payload - The payload of the message.\r\n     */\r\n    messageReceived(participant, payload) {\r\n        // Listen to E2E PING requests and responses from other participants\r\n        // in the conference.\r\n        if (payload.type === E2E_PING_REQUEST) {\r\n            this.handleRequest(participant.getId(), payload);\r\n        } else if (payload.type === E2E_PING_RESPONSE) {\r\n            this.handleResponse(participant.getId(), payload);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a participant joining the conference. Starts to send ping\r\n     * requests to the participant.\r\n     *\r\n     * @param {String} id - The ID of the participant.\r\n     * @param {JitsiParticipant} participant - The participant that joined.\r\n     */\r\n    participantJoined(id, participant) {\r\n        if (this.pingIntervalMs <= 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.participants[id]) {\r\n            logger.info(\r\n                `Participant wrapper already exists for ${id}. Clearing.`);\r\n            this.participants[id].clearIntervals();\r\n            delete this.participants[id];\r\n        }\r\n\r\n        this.participants[id] = new ParticipantWrapper(participant, this);\r\n    }\r\n\r\n    /**\r\n     * Handles a participant leaving the conference. Stops sending requests.\r\n     *\r\n     * @param {String} id - The ID of the participant.\r\n     */\r\n    participantLeft(id) {\r\n        if (this.pingIntervalMs <= 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.participants[id]) {\r\n            this.participants[id].clearIntervals();\r\n            delete this.participants[id];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a ping request coming from another participant.\r\n     *\r\n     * @param {string} participantId - The ID of the participant who sent the\r\n     * request.\r\n     * @param {Object} request - The request.\r\n     */\r\n    handleRequest(participantId, request) {\r\n        // If it's a valid request, just send a response.\r\n        if (request && request.id) {\r\n            const response = {\r\n                type: E2E_PING_RESPONSE,\r\n                id: request.id\r\n            };\r\n\r\n            this.sendMessage(response, participantId);\r\n        } else {\r\n            logger.info(\r\n                `Received an invalid e2e ping request from ${participantId}.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a ping response coming from another participant\r\n     * @param {string} participantId - The ID of the participant who sent the\r\n     * response.\r\n     * @param {Object} response - The response.\r\n     */\r\n    handleResponse(participantId, response) {\r\n        const participantWrapper = this.participants[participantId];\r\n\r\n        if (participantWrapper) {\r\n            participantWrapper.handleResponse(response);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops this E2ePing (i.e. stop sending requests).\r\n     */\r\n    stop() {\r\n        logger.info('Stopping e2eping');\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this.participantJoined);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this.participantLeft);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            this.messageReceived);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\r\n            this.dataChannelOpened);\r\n\r\n        for (const id in this.participants) {\r\n            if (this.participants.hasOwnProperty(id)) {\r\n                this.participants[id].clearIntervals();\r\n            }\r\n        }\r\n\r\n        this.participants = {};\r\n    }\r\n}\r\n\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\r\n * P2P status and the conference participants count. See the event description\r\n * for more info.\r\n */\r\nexport default class Jvb121EventGenerator {\r\n    /**\r\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\r\n     * @param {JitsiConference} conference\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\r\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\r\n         * the conference is currently in the P2P mode.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._jvb121 = true;\r\n\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\r\n    }\r\n\r\n    /**\r\n     * Checks whether the JVB121 value should be updated and a new event\r\n     * emitted.\r\n     */\r\n    evaluateStatus() {\r\n        const oldStatus = this._jvb121;\r\n        const newStatus\r\n            = !this._conference.isP2PActive()\r\n                && this._conference.getParticipantCount() <= 2;\r\n\r\n        if (oldStatus !== newStatus) {\r\n            this._jvb121 = newStatus;\r\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\r\n        }\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\r\n\r\n/**\r\n * The class manages send and receive video constraints across media sessions({@link JingleSessionPC}) which belong to\r\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\r\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\r\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\r\n * different.\r\n */\r\nexport class QualityController {\r\n    /**\r\n     * Creates new instance for a given conference.\r\n     *\r\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\r\n     * the quality constraints.\r\n     */\r\n    constructor(conference) {\r\n        this.conference = conference;\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n            session => this._onMediaSessionStarted(session));\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n            () => this._propagateSendMaxFrameHeight());\r\n    }\r\n\r\n    /**\r\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\r\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\r\n     * the conference has entered the p2p mode already.\r\n     *\r\n     * @param {JingleSessionPC} mediaSession - the started media session.\r\n     * @private\r\n     */\r\n    _onMediaSessionStarted(mediaSession) {\r\n        mediaSession.addListener(\r\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\r\n            session => {\r\n                if (session === this.conference._getActiveMediaSession()) {\r\n                    this._propagateSendMaxFrameHeight();\r\n                }\r\n            });\r\n        this.preferredReceiveMaxFrameHeight\r\n            && mediaSession.setReceiverVideoConstraint(this.preferredReceiveMaxFrameHeight);\r\n\r\n        // Set the degradation preference on the local video track.\r\n        mediaSession.setSenderVideoDegradationPreference();\r\n\r\n        // Set the max bitrates on video sender if they are specified in config.js videoQuality settings.\r\n        mediaSession.setSenderMaxBitrates();\r\n    }\r\n\r\n    /**\r\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\r\n     * sessions for the reasons mentioned in this class description.\r\n     *\r\n     * @returns {Promise<void[]>}\r\n     * @private\r\n     */\r\n    _propagateSendMaxFrameHeight() {\r\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\r\n        const promises = [];\r\n\r\n        if (sendMaxFrameHeight >= 0) {\r\n            for (const session of this.conference._getMediaSessions()) {\r\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\r\n            }\r\n        }\r\n\r\n        return Promise.all(promises);\r\n    }\r\n\r\n    /**\r\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\r\n     * the active media session's receive preference set by the remote party.\r\n     *\r\n     * @returns {number|undefined}\r\n     */\r\n    selectSendMaxFrameHeight() {\r\n        const activeMediaSession = this.conference._getActiveMediaSession();\r\n        const remoteRecvMaxFrameHeight = activeMediaSession && activeMediaSession.getRemoteRecvMaxFrameHeight();\r\n\r\n        if (this.preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\r\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\r\n        } else if (remoteRecvMaxFrameHeight >= 0) {\r\n            return remoteRecvMaxFrameHeight;\r\n        }\r\n\r\n        return this.preferredSendMaxFrameHeight;\r\n    }\r\n\r\n    /**\r\n     * Sets local preference for max receive video frame height.\r\n     * @param {number|undefined} maxFrameHeight - the new value.\r\n     */\r\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\r\n        this.preferredReceiveMaxFrameHeight = maxFrameHeight;\r\n\r\n        for (const session of this.conference._getMediaSessions()) {\r\n            maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets local preference for max send video frame height.\r\n     *\r\n     * @param {number} maxFrameHeight - the new value to set.\r\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\r\n     */\r\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\r\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\r\n\r\n        return this._propagateSendMaxFrameHeight();\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport JibriSession from './JibriSession';\r\nimport recordingXMLUtils from './recordingXMLUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * A class responsible for starting and stopping recording sessions and emitting\r\n * state updates for them.\r\n */\r\nclass RecordingManager {\r\n    /**\r\n     * Initialize {@code RecordingManager} with other objects that are necessary\r\n     * for starting a recording.\r\n     *\r\n     * @param {ChatRoom} chatRoom - The chat room to handle.\r\n     * @returns {void}\r\n     */\r\n    constructor(chatRoom) {\r\n        /**\r\n         * All known recording sessions from the current conference.\r\n         */\r\n        this._sessions = {};\r\n\r\n        this._chatRoom = chatRoom;\r\n\r\n        this.onPresence = this.onPresence.bind(this);\r\n\r\n        this._chatRoom.eventEmitter.addListener(\r\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\r\n    }\r\n\r\n    /**\r\n     * Finds an existing recording session by session ID.\r\n     *\r\n     * @param {string} sessionID - The session ID associated with the recording.\r\n     * @returns {JibriSession|undefined}\r\n     */\r\n    getSession(sessionID) {\r\n        return this._sessions[sessionID];\r\n    }\r\n\r\n    /**\r\n     * Callback to invoke to parse through a presence update to find recording\r\n     * related updates (from Jibri participant doing the recording and the\r\n     * focus which controls recording).\r\n     *\r\n     * @param {Object} event - The presence data from the pubsub event.\r\n     * @param {Node} event.presence - An XMPP presence update.\r\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\r\n     * from a participant that is trusted but not visible, as would be the case\r\n     * with the Jibri recorder participant.\r\n     * @returns {void}\r\n     */\r\n    onPresence({ fromHiddenDomain, presence }) {\r\n        if (recordingXMLUtils.isFromFocus(presence)) {\r\n            this._handleFocusPresence(presence);\r\n        } else if (fromHiddenDomain) {\r\n            this._handleJibriPresence(presence);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start a recording session.\r\n     *\r\n     * @param {Object} options - Configuration for the recording.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [optional] options.broadcastId - The channel on which a\r\n     * live stream will occur.\r\n     * @param {string} options.mode - The mode in which recording should be\r\n     * started. Recognized values are \"file\" and \"stream\".\r\n     * @param {string} [optional] options.streamId - The stream key to be used\r\n     * for live stream broadcasting. Required for live streaming.\r\n     * @returns {Promise} A promise for starting a recording, which will pass\r\n     * back the session on success. The promise resolves after receiving an\r\n     * acknowledgment of the start request success or fail.\r\n     */\r\n    startRecording(options) {\r\n        const session = new JibriSession({\r\n            ...options,\r\n            connection: this._chatRoom.connection\r\n        });\r\n\r\n        return session.start({\r\n            appData: options.appData,\r\n            broadcastId: options.broadcastId,\r\n            focusMucJid: this._chatRoom.focusMucJid,\r\n            streamId: options.streamId\r\n        })\r\n            .then(() => {\r\n                // Only store the session and emit if the session has not been\r\n                // added already. This is a workaround for the session getting\r\n                // created due to a presence update to announce a \"pending\"\r\n                // recording being received before JibriSession#start finishes.\r\n                if (!this.getSession(session.getID())) {\r\n                    this._addSession(session);\r\n                    this._emitSessionUpdate(session);\r\n                }\r\n\r\n                return session;\r\n            })\r\n            .catch(error => {\r\n                this._emitSessionUpdate(session);\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Stop a recording session.\r\n     *\r\n     * @param {string} sessionID - The ID associated with the recording session\r\n     * to be stopped.\r\n     * @returns {Promise} The promise resolves after receiving an\r\n     * acknowledgment of the stop request success or fail.\r\n     */\r\n    stopRecording(sessionID) {\r\n        const session = this.getSession(sessionID);\r\n\r\n        if (session) {\r\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\r\n        }\r\n\r\n        return Promise.reject(new Error('Could not find session'));\r\n    }\r\n\r\n    /**\r\n     * Stores a reference to the passed in JibriSession.\r\n     *\r\n     * @param {string} session - The JibriSession instance to store.\r\n     * @returns {void}\r\n     */\r\n    _addSession(session) {\r\n        this._sessions[session.getID()] = session;\r\n    }\r\n\r\n    /**\r\n     * Create a new instance of a recording session and stores a reference to\r\n     * it.\r\n     *\r\n     * @param {string} sessionID - The session ID of the recording in progress.\r\n     * @param {string} status - The current status of the recording session.\r\n     * @param {string} mode - The recording mode of the session.\r\n     * @returns {JibriSession}\r\n     */\r\n    _createSession(sessionID, status, mode) {\r\n        const session = new JibriSession({\r\n            connection: this._chatRoom.connection,\r\n            focusMucJid: this._chatRoom.focusMucJid,\r\n            mode,\r\n            sessionID,\r\n            status\r\n        });\r\n\r\n        this._addSession(session);\r\n\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * Notifies listeners of an update to a recording session.\r\n     *\r\n     * @param {JibriSession} session - The session that has been updated.\r\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\r\n     */\r\n    _emitSessionUpdate(session, initiator) {\r\n        this._chatRoom.eventEmitter.emit(\r\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\r\n    }\r\n\r\n    /**\r\n     * Parses presence to update an existing JibriSession or to create a new\r\n     * JibriSession.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {void}\r\n     */\r\n    _handleFocusPresence(presence) {\r\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\r\n\r\n        if (!jibriStatus) {\r\n            return;\r\n        }\r\n\r\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\r\n\r\n        // We'll look for an existing session or create one (in case we're a\r\n        // participant joining a call with an existing recording going on).\r\n        let session = this.getSession(sessionID);\r\n\r\n        // Handle the case where a status update is received in presence but\r\n        // the local participant has joined while the JibriSession has already\r\n        // ended.\r\n        if (!session && status === 'off') {\r\n            logger.warn(\r\n                'Ignoring recording presence update',\r\n                'Received a new session with status off.');\r\n\r\n            return;\r\n        }\r\n\r\n        // Jicofo sends updates via presence, and any extension in presence\r\n        // is sent until it is explicitly removed.  It's difficult for\r\n        // Jicofo to know when a presence has been sent once, so it won't\r\n        // remove jibri status extension.  This means we may receive the same\r\n        // status update more than once, so check for that here\r\n        if (session\r\n            && session.getStatus() === status\r\n            && session.getError() === error) {\r\n            logger.warn('Ignoring duplicate presence update: ',\r\n                JSON.stringify(jibriStatus));\r\n\r\n            return;\r\n        }\r\n\r\n        if (!session) {\r\n            session = this._createSession(sessionID, status, recordingMode);\r\n        }\r\n\r\n        session.setStatus(status);\r\n\r\n        if (error) {\r\n            session.setError(error);\r\n        }\r\n\r\n        this._emitSessionUpdate(session, initiator);\r\n    }\r\n\r\n    /**\r\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\r\n     * needs to be updated in a JibriSession.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {void}\r\n     */\r\n    _handleJibriPresence(presence) {\r\n        const { liveStreamViewURL, mode, sessionID }\r\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\r\n\r\n        if (!sessionID) {\r\n            logger.warn(\r\n                'Ignoring potential jibri presence due to no session id.');\r\n\r\n            return;\r\n        }\r\n\r\n        let session = this.getSession(sessionID);\r\n\r\n        if (!session) {\r\n            session = this._createSession(sessionID, '', mode);\r\n        }\r\n\r\n        session.setLiveStreamViewURL(liveStreamViewURL);\r\n\r\n        this._emitSessionUpdate(session);\r\n    }\r\n}\r\n\r\nexport default RecordingManager;\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\r\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\r\n\r\nimport Statistics from './statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Number of local samples that will be used for comparison before and after the remote sample is received.\r\n */\r\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\r\n\r\n/**\r\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\r\n * participant and compares them to detect potential audio problem for a participant.\r\n */\r\nexport default class AudioOutputProblemDetector {\r\n\r\n    /**\r\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\r\n     *\r\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n        this._localAudioLevelCache = {};\r\n        this._reportedParticipants = [];\r\n        this._audioProblemCandidates = {};\r\n        this._numberOfRemoteAudioLevelsReceived = {};\r\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\r\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\r\n        this._clearUserData = this._clearUserData.bind(this);\r\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\r\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\r\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\r\n    }\r\n\r\n    /**\r\n     * A listener for audio level data received by a remote participant.\r\n     *\r\n     * @param {string} userID - The user id of the participant that sent the data.\r\n     * @param {number} audioLevel - The average audio level value.\r\n     * @returns {void}\r\n     */\r\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\r\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\r\n\r\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\r\n\r\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\r\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\r\n            return;\r\n        }\r\n\r\n        const participant = this._conference.getParticipantById(userID);\r\n\r\n        if (participant) {\r\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\r\n\r\n            if (tracks.length > 0 && participant.isAudioMuted()) {\r\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\r\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\r\n                // zero values for muted track.\r\n                return;\r\n            }\r\n        }\r\n\r\n        const localAudioLevels = this._localAudioLevelCache[userID];\r\n\r\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\r\n            this._audioProblemCandidates[userID] = {\r\n                remoteAudioLevels: avgAudioLevels,\r\n                localAudioLevels: []\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A listener for audio level data retrieved by the local stats.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\r\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\r\n     * @returns {void}\r\n     */\r\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\r\n        if (tpc !== this._conference.getActivePeerConnection()) {\r\n            return;\r\n        }\r\n\r\n        Object.keys(avgAudioLevels).forEach(userID => {\r\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\r\n                return;\r\n            }\r\n\r\n            const localAudioLevels = this._localAudioLevelCache[userID];\r\n\r\n            if (!Array.isArray(localAudioLevels)) {\r\n                this._localAudioLevelCache[userID] = [ ];\r\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\r\n                localAudioLevels.shift();\r\n            }\r\n\r\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\r\n        });\r\n\r\n\r\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\r\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\r\n\r\n            localAudioLevels.push(avgAudioLevels[userID]);\r\n\r\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\r\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\r\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\r\n\r\n                    Statistics.sendAnalytics(\r\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\r\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\r\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\r\n                        remoteAudioLevels}`);\r\n                    this._reportedParticipants.push(userID);\r\n                    this._clearUserData(userID);\r\n                }\r\n\r\n                delete this._audioProblemCandidates[userID];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears the data stored for a participant.\r\n     *\r\n     * @param {string} userID - The id of the participant.\r\n     * @returns {void}\r\n     */\r\n    _clearUserData(userID) {\r\n        delete this._localAudioLevelCache[userID];\r\n    }\r\n\r\n    /**\r\n     * Disposes the allocated resources.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    dispose() {\r\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\r\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\r\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\r\n        this._localAudioLevelCache = undefined;\r\n        this._audioProblemCandidates = undefined;\r\n        this._reportedParticipants = undefined;\r\n        this._numberOfRemoteAudioLevelsReceived = undefined;\r\n        this._conference = undefined;\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as VideoType from '../../service/RTC/VideoType';\r\nimport * as ConnectionQualityEvents\r\n    from '../../service/connectivity/ConnectionQualityEvents';\r\nimport {\r\n    createRtpStatsEvent,\r\n    createTransportStatsEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\n\r\nimport Statistics from './statistics';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This will calculate an average for one, named stat and submit it to\r\n * the analytics module when requested. It automatically counts the samples.\r\n */\r\nclass AverageStatReport {\r\n    /**\r\n     * Creates new <tt>AverageStatReport</tt> for given name.\r\n     * @param {string} name that's the name of the event that will be reported\r\n     * to the analytics module.\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.count = 0;\r\n        this.sum = 0;\r\n        this.samples = [];\r\n    }\r\n\r\n    /**\r\n     * Adds the next value that will be included in the average when\r\n     * {@link calculate} is called.\r\n     * @param {number} nextValue\r\n     */\r\n    addNext(nextValue) {\r\n        if (typeof nextValue !== 'number') {\r\n            logger.error(\r\n                `${this.name} - invalid value for idx: ${this.count}`,\r\n                nextValue);\r\n        } else if (!isNaN(nextValue)) {\r\n            this.sum += nextValue;\r\n            this.samples.push(nextValue);\r\n            this.count += 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates an average for the samples collected using {@link addNext}.\r\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\r\n     * if no samples were collected.\r\n     */\r\n    calculate() {\r\n        return this.sum / this.count;\r\n    }\r\n\r\n    /**\r\n     * Appends the report to the analytics \"data\" object. The object will be\r\n     * set under <tt>prefix</tt> + {@link this.name} key.\r\n     * @param {Object} report the analytics \"data\" object\r\n     */\r\n    appendReport(report) {\r\n        report[`${this.name}_avg`] = this.calculate();\r\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\r\n    }\r\n\r\n    /**\r\n     * Clears all memory of any samples collected, so that new average can be\r\n     * calculated using this instance.\r\n     */\r\n    reset() {\r\n        this.samples = [];\r\n        this.sum = 0;\r\n        this.count = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Class gathers the stats that are calculated and reported for a\r\n * {@link TraceablePeerConnection} even if it's not currently active. For\r\n * example we want to monitor RTT for the JVB connection while in P2P mode.\r\n */\r\nclass ConnectionAvgStats {\r\n    /**\r\n     * Creates new <tt>ConnectionAvgStats</tt>\r\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\r\n     * @param {boolean} isP2P\r\n     * @param {number} n the number of samples, before arithmetic mean is to be\r\n     * calculated and values submitted to the analytics module.\r\n     */\r\n    constructor(avgRtpStatsReporter, isP2P, n) {\r\n        /**\r\n         * Is this instance for JVB or P2P connection ?\r\n         * @type {boolean}\r\n         */\r\n        this.isP2P = isP2P;\r\n\r\n        /**\r\n         * How many samples are to be included in arithmetic mean calculation.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._n = n;\r\n\r\n        /**\r\n         * The current sample index. Starts from 0 and goes up to {@link _n})\r\n         * when analytics report will be submitted.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._sampleIdx = 0;\r\n\r\n        /**\r\n         * Average round trip time reported by the ICE candidate pair.\r\n         * @type {AverageStatReport}\r\n         */\r\n        this._avgRTT = new AverageStatReport('rtt');\r\n\r\n        /**\r\n         * Map stores average RTT to the JVB reported by remote participants.\r\n         * Mapped per participant id {@link JitsiParticipant.getId}.\r\n         *\r\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\r\n         * <tt>false</tt>.\r\n         *\r\n         * @type {Map<string,AverageStatReport>}\r\n         * @private\r\n         */\r\n        this._avgRemoteRTTMap = new Map();\r\n\r\n        /**\r\n         * The conference for which stats will be collected and reported.\r\n         * @type {JitsiConference}\r\n         * @private\r\n         */\r\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\r\n\r\n        /**\r\n         * The latest average E2E RTT for the JVB connection only.\r\n         *\r\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\r\n         * <tt>false</tt>.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this._avgEnd2EndRTT = undefined;\r\n\r\n        this._onConnectionStats = (tpc, stats) => {\r\n            if (this.isP2P === tpc.isP2P) {\r\n                this._calculateAvgStats(stats);\r\n            }\r\n        };\r\n\r\n        const conference = avgRtpStatsReporter._conference;\r\n\r\n        conference.statistics.addConnectionStatsListener(\r\n            this._onConnectionStats);\r\n\r\n        if (!this.isP2P) {\r\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\r\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n            this._onRemoteStatsUpdated\r\n                = (id, data) => this._processRemoteStats(id, data);\r\n            conference.on(\r\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n                this._onRemoteStatsUpdated);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes next batch of stats.\r\n     * @param {go figure} data\r\n     * @private\r\n     */\r\n    _calculateAvgStats(data) {\r\n        if (!data) {\r\n            logger.error('No stats');\r\n\r\n            return;\r\n        }\r\n\r\n        if (browser.supportsRTTStatistics()) {\r\n            if (data.transport && data.transport.length) {\r\n                this._avgRTT.addNext(data.transport[0].rtt);\r\n            }\r\n        }\r\n\r\n        this._sampleIdx += 1;\r\n\r\n        if (this._sampleIdx >= this._n) {\r\n            if (browser.supportsRTTStatistics()) {\r\n                const conference = this._avgRtpStatsReporter._conference;\r\n\r\n                const batchReport = {\r\n                    p2p: this.isP2P,\r\n                    'conference_size': conference.getParticipantCount()\r\n                };\r\n\r\n                if (data.transport && data.transport.length) {\r\n                    Object.assign(batchReport, {\r\n                        'local_candidate_type':\r\n                            data.transport[0].localCandidateType,\r\n                        'remote_candidate_type':\r\n                            data.transport[0].remoteCandidateType,\r\n                        'transport_type': data.transport[0].type\r\n                    });\r\n                }\r\n\r\n                this._avgRTT.appendReport(batchReport);\r\n\r\n                if (this.isP2P) {\r\n                    // Report RTT diff only for P2P.\r\n                    const jvbEnd2EndRTT = this\r\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\r\n\r\n                    if (!isNaN(jvbEnd2EndRTT)) {\r\n                        // eslint-disable-next-line dot-notation\r\n                        batchReport['rtt_diff']\r\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\r\n                    }\r\n                } else {\r\n                    // Report end to end RTT only for JVB.\r\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\r\n                    const avgLocalRTT = this._avgRTT.calculate();\r\n\r\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\r\n\r\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\r\n                        // eslint-disable-next-line dot-notation\r\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\r\n                    }\r\n                }\r\n\r\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\r\n            }\r\n\r\n            this._resetAvgStats();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\r\n     * participants.\r\n     * @return {number|NaN} NaN if not available (not enough data)\r\n     * @private\r\n     */\r\n    _calculateAvgRemoteRTT() {\r\n        let count = 0, sum = 0;\r\n\r\n        // FIXME should we ignore RTT for participant\r\n        // who \"is having connectivity issues\" ?\r\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\r\n            const avg = remoteAvg.calculate();\r\n\r\n            if (!isNaN(avg)) {\r\n                sum += avg;\r\n                count += 1;\r\n                remoteAvg.reset();\r\n            }\r\n        }\r\n\r\n        return sum / count;\r\n    }\r\n\r\n    /**\r\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\r\n     * RTT towards the JVB reported by each participant.\r\n     * @param {string} id {@link JitsiParticipant.getId}\r\n     * @param {go figure in ConnectionQuality.js} data\r\n     * @private\r\n     */\r\n    _processRemoteStats(id, data) {\r\n        const validData = typeof data.jvbRTT === 'number';\r\n        let rttAvg = this._avgRemoteRTTMap.get(id);\r\n\r\n        if (!rttAvg && validData) {\r\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\r\n            this._avgRemoteRTTMap.set(id, rttAvg);\r\n        }\r\n\r\n        if (validData) {\r\n            rttAvg.addNext(data.jvbRTT);\r\n        } else if (rttAvg) {\r\n            this._avgRemoteRTTMap.delete(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset cache of all averages and {@link _sampleIdx}.\r\n     * @private\r\n     */\r\n    _resetAvgStats() {\r\n        this._avgRTT.reset();\r\n        if (this._avgRemoteRTTMap) {\r\n            this._avgRemoteRTTMap.clear();\r\n        }\r\n        this._sampleIdx = 0;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    dispose() {\r\n\r\n        const conference = this._avgRtpStatsReporter._conference;\r\n\r\n        conference.statistics.removeConnectionStatsListener(\r\n            this._onConnectionStats);\r\n        if (!this.isP2P) {\r\n            conference.off(\r\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n                this._onRemoteStatsUpdated);\r\n            conference.off(\r\n                ConferenceEvents.USER_LEFT,\r\n                this._onUserLeft);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Reports average RTP statistics values (arithmetic mean) to the analytics\r\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\r\n * of the P2P vs JVB conference modes and submits the values under different\r\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\r\n * P2P mode resets the data collected so far and averages are calculated from\r\n * scratch.\r\n */\r\nexport default class AvgRTPStatsReporter {\r\n    /**\r\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\r\n     * @param {JitsiConference} conference\r\n     * @param {number} n the number of samples, before arithmetic mean is to be\r\n     * calculated and values submitted to the analytics module.\r\n     */\r\n    constructor(conference, n) {\r\n        /**\r\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\r\n         * are to be included in arithmetic mean calculation.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._n = n;\r\n\r\n        if (n > 0) {\r\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\r\n        } else {\r\n            logger.info('Avg RTP stats reports are disabled.');\r\n\r\n            // Do not initialize\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * The current sample index. Starts from 0 and goes up to {@link _n})\r\n         * when analytics report will be submitted.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._sampleIdx = 0;\r\n\r\n        /**\r\n         * The conference for which stats will be collected and reported.\r\n         * @type {JitsiConference}\r\n         * @private\r\n         */\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Average audio upload bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgAudioBitrateUp\r\n            = new AverageStatReport('bitrate_audio_upload');\r\n\r\n        /**\r\n         * Average audio download bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgAudioBitrateDown\r\n            = new AverageStatReport('bitrate_audio_download');\r\n\r\n        /**\r\n         * Average video upload bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgVideoBitrateUp\r\n            = new AverageStatReport('bitrate_video_upload');\r\n\r\n        /**\r\n         * Average video download bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgVideoBitrateDown\r\n            = new AverageStatReport('bitrate_video_download');\r\n\r\n        /**\r\n         * Average upload bandwidth\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgBandwidthUp\r\n            = new AverageStatReport('bandwidth_upload');\r\n\r\n        /**\r\n         * Average download bandwidth\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgBandwidthDown\r\n            = new AverageStatReport('bandwidth_download');\r\n\r\n        /**\r\n         * Average total packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossTotal\r\n            = new AverageStatReport('packet_loss_total');\r\n\r\n        /**\r\n         * Average upload packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossUp\r\n            = new AverageStatReport('packet_loss_upload');\r\n\r\n        /**\r\n         * Average download packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossDown\r\n            = new AverageStatReport('packet_loss_download');\r\n\r\n        /**\r\n         * Average FPS for remote videos\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\r\n\r\n        /**\r\n         * Average FPS for remote screen streaming videos (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteScreenFPS\r\n            = new AverageStatReport('framerate_screen_remote');\r\n\r\n        /**\r\n         * Average FPS for local video (camera)\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\r\n\r\n        /**\r\n         * Average FPS for local screen streaming video (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalScreenFPS\r\n            = new AverageStatReport('framerate_screen_local');\r\n\r\n        /**\r\n         * Average pixels for remote screen streaming videos (reported only if\r\n         * not a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteCameraPixels\r\n            = new AverageStatReport('pixels_remote');\r\n\r\n        /**\r\n         * Average pixels for remote screen streaming videos (reported only if\r\n         * not a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteScreenPixels\r\n            = new AverageStatReport('pixels_screen_remote');\r\n\r\n        /**\r\n         * Average pixels for local video (camera)\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalCameraPixels\r\n            = new AverageStatReport('pixels_local');\r\n\r\n        /**\r\n         * Average pixels for local screen streaming video (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalScreenPixels\r\n            = new AverageStatReport('pixels_screen_local');\r\n\r\n        /**\r\n         * Average connection quality as defined by\r\n         * the {@link ConnectionQuality} module.\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgCQ = new AverageStatReport('connection_quality');\r\n\r\n        this._cachedTransportStats = undefined;\r\n\r\n        this._onLocalStatsUpdated = data => {\r\n            this._calculateAvgStats(data);\r\n            this._maybeSendTransportAnalyticsEvent(data);\r\n        };\r\n        conference.on(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._onLocalStatsUpdated);\r\n\r\n        this._onP2PStatusChanged = () => {\r\n            logger.debug('Resetting average stats calculation');\r\n            this._resetAvgStats();\r\n            this.jvbStatsMonitor._resetAvgStats();\r\n            this.p2pStatsMonitor._resetAvgStats();\r\n        };\r\n        conference.on(\r\n            ConferenceEvents.P2P_STATUS,\r\n            this._onP2PStatusChanged);\r\n\r\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\r\n            // We want to reset only on the transition from false => true,\r\n            // because otherwise those stats are resetted on JVB <=> P2P\r\n            // transition.\r\n            if (newStatus === true) {\r\n                logger.info('Resetting JVB avg RTP stats');\r\n                this._resetAvgJvbStats();\r\n            }\r\n        };\r\n        conference.on(\r\n            ConferenceEvents.JVB121_STATUS,\r\n            this._onJvb121StatusChanged);\r\n\r\n        this.jvbStatsMonitor\r\n            = new ConnectionAvgStats(this, false /* JVB */, n);\r\n\r\n        this.p2pStatsMonitor\r\n            = new ConnectionAvgStats(this, true /* P2P */, n);\r\n    }\r\n\r\n    /**\r\n     * Processes next batch of stats reported on\r\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\r\n     * @param {go figure} data\r\n     * @private\r\n     */\r\n    _calculateAvgStats(data) {\r\n\r\n        if (!data) {\r\n            logger.error('No stats');\r\n\r\n            return;\r\n        }\r\n\r\n        const isP2P = this._conference.isP2PActive();\r\n        const confSize = this._conference.getParticipantCount();\r\n\r\n        if (!isP2P && confSize < 2) {\r\n\r\n            // There's no point in collecting stats for a JVB conference of 1.\r\n            // That happens for short period of time after everyone leaves\r\n            // the room, until Jicofo terminates the session.\r\n            return;\r\n        }\r\n\r\n        /* Uncomment to figure out stats structure\r\n        for (const key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                logger.info(`local stat ${key}: `, data[key]);\r\n            }\r\n        } */\r\n\r\n        const bitrate = data.bitrate;\r\n        const bandwidth = data.bandwidth;\r\n        const packetLoss = data.packetLoss;\r\n        const frameRate = data.framerate;\r\n        const resolution = data.resolution;\r\n\r\n        if (!bitrate) {\r\n            logger.error('No \"bitrate\"');\r\n\r\n            return;\r\n        } else if (!bandwidth) {\r\n            logger.error('No \"bandwidth\"');\r\n\r\n            return;\r\n        } else if (!packetLoss) {\r\n            logger.error('No \"packetloss\"');\r\n\r\n            return;\r\n        } else if (!frameRate) {\r\n            logger.error('No \"framerate\"');\r\n\r\n            return;\r\n        } else if (!resolution) {\r\n            logger.error('No resolution');\r\n\r\n            return;\r\n        }\r\n\r\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\r\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\r\n\r\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\r\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\r\n\r\n        if (browser.supportsBandwidthStatistics()) {\r\n            this._avgBandwidthUp.addNext(bandwidth.upload);\r\n            this._avgBandwidthDown.addNext(bandwidth.download);\r\n        }\r\n\r\n        this._avgPacketLossUp.addNext(packetLoss.upload);\r\n        this._avgPacketLossDown.addNext(packetLoss.download);\r\n        this._avgPacketLossTotal.addNext(packetLoss.total);\r\n\r\n        this._avgCQ.addNext(data.connectionQuality);\r\n\r\n        if (frameRate) {\r\n            this._avgRemoteFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, false /* remote */, VideoType.CAMERA));\r\n            this._avgRemoteScreenFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, false /* remote */, VideoType.DESKTOP));\r\n\r\n            this._avgLocalFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, true /* local */, VideoType.CAMERA));\r\n            this._avgLocalScreenFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, true /* local */, VideoType.DESKTOP));\r\n        }\r\n\r\n        if (resolution) {\r\n            this._avgRemoteCameraPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, false /* remote */, VideoType.CAMERA));\r\n\r\n            this._avgRemoteScreenPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, false /* remote */, VideoType.DESKTOP));\r\n\r\n            this._avgLocalCameraPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, true /* local */, VideoType.CAMERA));\r\n\r\n            this._avgLocalScreenPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, true /* local */, VideoType.DESKTOP));\r\n        }\r\n\r\n        this._sampleIdx += 1;\r\n\r\n        if (this._sampleIdx >= this._n) {\r\n\r\n            const batchReport = {\r\n                p2p: isP2P,\r\n                'conference_size': confSize\r\n            };\r\n\r\n            if (data.transport && data.transport.length) {\r\n                Object.assign(batchReport, {\r\n                    'local_candidate_type':\r\n                        data.transport[0].localCandidateType,\r\n                    'remote_candidate_type':\r\n                        data.transport[0].remoteCandidateType,\r\n                    'transport_type': data.transport[0].type\r\n                });\r\n            }\r\n\r\n            this._avgAudioBitrateUp.appendReport(batchReport);\r\n            this._avgAudioBitrateDown.appendReport(batchReport);\r\n\r\n            this._avgVideoBitrateUp.appendReport(batchReport);\r\n            this._avgVideoBitrateDown.appendReport(batchReport);\r\n\r\n            if (browser.supportsBandwidthStatistics()) {\r\n                this._avgBandwidthUp.appendReport(batchReport);\r\n                this._avgBandwidthDown.appendReport(batchReport);\r\n            }\r\n            this._avgPacketLossUp.appendReport(batchReport);\r\n            this._avgPacketLossDown.appendReport(batchReport);\r\n            this._avgPacketLossTotal.appendReport(batchReport);\r\n\r\n            this._avgRemoteFPS.appendReport(batchReport);\r\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\r\n                this._avgRemoteScreenFPS.appendReport(batchReport);\r\n            }\r\n            this._avgLocalFPS.appendReport(batchReport);\r\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\r\n                this._avgLocalScreenFPS.appendReport(batchReport);\r\n            }\r\n\r\n            this._avgRemoteCameraPixels.appendReport(batchReport);\r\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\r\n                this._avgRemoteScreenPixels.appendReport(batchReport);\r\n            }\r\n            this._avgLocalCameraPixels.appendReport(batchReport);\r\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\r\n                this._avgLocalScreenPixels.appendReport(batchReport);\r\n            }\r\n\r\n            this._avgCQ.appendReport(batchReport);\r\n\r\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\r\n\r\n            this._resetAvgStats();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates average number of pixels for the report\r\n     *\r\n     * @param {map} peerResolutions a map of peer resolutions\r\n     * @param {boolean} isLocal if the average is to be calculated for the local\r\n     * video or <tt>false</tt> if for remote videos.\r\n     * @param {VideoType} videoType\r\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\r\n     * are no samples.\r\n     * @private\r\n     */\r\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\r\n        let peerPixelsSum = 0;\r\n        let peerCount = 0;\r\n        const myID = this._conference.myUserId();\r\n\r\n        for (const peerID of Object.keys(peerResolutions)) {\r\n            if (isLocal ? peerID === myID : peerID !== myID) {\r\n                const participant\r\n                    = isLocal\r\n                        ? null\r\n                        : this._conference.getParticipantById(peerID);\r\n                const videosResolution = peerResolutions[peerID];\r\n\r\n                // Do not continue without participant for non local peerID\r\n                if ((isLocal || participant) && videosResolution) {\r\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\r\n                        videosResolution, participant, videoType);\r\n\r\n                    if (!isNaN(peerAvgPixels)) {\r\n                        peerPixelsSum += peerAvgPixels;\r\n                        peerCount += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return peerPixelsSum / peerCount;\r\n    }\r\n\r\n    /**\r\n     * Calculate average pixels for either remote or local participant\r\n     * @param {object} videos maps resolution per video SSRC\r\n     * @param {JitsiParticipant|null} participant remote participant or\r\n     * <tt>null</tt> for local video pixels calculation.\r\n     * @param {VideoType} videoType the type of the video for which an average\r\n     * will be calculated.\r\n     * @return {number|NaN} average video pixels of all participant's videos or\r\n     * <tt>NaN</tt> if currently not available\r\n     * @private\r\n     */\r\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\r\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\r\n        let videoTracks = null;\r\n\r\n        // NOTE that this method is supposed to be called for the stats\r\n        // received from the current peerconnection.\r\n        const tpc = this._conference.getActivePeerConnection();\r\n\r\n        if (participant) {\r\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n            if (videoTracks) {\r\n                ssrcs\r\n                    = ssrcs.filter(\r\n                        ssrc => videoTracks.find(\r\n                            track =>\r\n                                !track.isMuted()\r\n                                    && track.getSSRC() === ssrc\r\n                                    && track.videoType === videoType));\r\n            }\r\n        } else {\r\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\r\n            ssrcs\r\n                = ssrcs.filter(\r\n                    ssrc => videoTracks.find(\r\n                        track =>\r\n                            !track.isMuted()\r\n                                && tpc.getLocalSSRC(track) === ssrc\r\n                                && track.videoType === videoType));\r\n        }\r\n\r\n        let peerPixelsSum = 0;\r\n        let peerSsrcCount = 0;\r\n\r\n        for (const ssrc of ssrcs) {\r\n            const peerSsrcPixels\r\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\r\n\r\n            // FPS is reported as 0 for users with no video\r\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\r\n                peerPixelsSum += peerSsrcPixels;\r\n                peerSsrcCount += 1;\r\n            }\r\n        }\r\n\r\n        return peerPixelsSum / peerSsrcCount;\r\n    }\r\n\r\n\r\n    /**\r\n     * Calculates average FPS for the report\r\n     * @param {go figure} frameRate\r\n     * @param {boolean} isLocal if the average is to be calculated for the local\r\n     * video or <tt>false</tt> if for remote videos.\r\n     * @param {VideoType} videoType\r\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\r\n     * @private\r\n     */\r\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\r\n        let peerFpsSum = 0;\r\n        let peerCount = 0;\r\n        const myID = this._conference.myUserId();\r\n\r\n        for (const peerID of Object.keys(frameRate)) {\r\n            if (isLocal ? peerID === myID : peerID !== myID) {\r\n                const participant\r\n                    = isLocal\r\n                        ? null : this._conference.getParticipantById(peerID);\r\n                const videosFps = frameRate[peerID];\r\n\r\n                // Do not continue without participant for non local peerID\r\n                if ((isLocal || participant) && videosFps) {\r\n                    const peerAvgFPS\r\n                        = this._calculatePeerAvgVideoFps(\r\n                            videosFps, participant, videoType);\r\n\r\n                    if (!isNaN(peerAvgFPS)) {\r\n                        peerFpsSum += peerAvgFPS;\r\n                        peerCount += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return peerFpsSum / peerCount;\r\n    }\r\n\r\n    /**\r\n     * Calculate average FPS for either remote or local participant\r\n     * @param {object} videos maps FPS per video SSRC\r\n     * @param {JitsiParticipant|null} participant remote participant or\r\n     * <tt>null</tt> for local FPS calculation.\r\n     * @param {VideoType} videoType the type of the video for which an average\r\n     * will be calculated.\r\n     * @return {number|NaN} average FPS of all participant's videos or\r\n     * <tt>NaN</tt> if currently not available\r\n     * @private\r\n     */\r\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\r\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\r\n        let videoTracks = null;\r\n\r\n        // NOTE that this method is supposed to be called for the stats\r\n        // received from the current peerconnection.\r\n        const tpc = this._conference.getActivePeerConnection();\r\n\r\n        if (participant) {\r\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n            if (videoTracks) {\r\n                ssrcs\r\n                    = ssrcs.filter(\r\n                        ssrc => videoTracks.find(\r\n                            track => !track.isMuted()\r\n                                && track.getSSRC() === ssrc\r\n                                && track.videoType === videoType));\r\n            }\r\n        } else {\r\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\r\n            ssrcs\r\n                = ssrcs.filter(\r\n                    ssrc => videoTracks.find(\r\n                        track => !track.isMuted()\r\n                            && tpc.getLocalSSRC(track) === ssrc\r\n                            && track.videoType === videoType));\r\n        }\r\n\r\n        let peerFpsSum = 0;\r\n        let peerSsrcCount = 0;\r\n\r\n        for (const ssrc of ssrcs) {\r\n            const peerSsrcFps = Number(videos[ssrc]);\r\n\r\n            // FPS is reported as 0 for users with no video\r\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\r\n                peerFpsSum += peerSsrcFps;\r\n                peerSsrcCount += 1;\r\n            }\r\n        }\r\n\r\n        return peerFpsSum / peerSsrcCount;\r\n    }\r\n\r\n    /**\r\n     * Sends the 'transport.stats' analytics event whenever we detect that\r\n     * there is a change in the local or remote candidate type on the transport\r\n     * that is currently selected.\r\n     * @param {*} data\r\n     * @private\r\n     */\r\n    _maybeSendTransportAnalyticsEvent(data) {\r\n        if (!data || !data.transport || !data.transport.length) {\r\n            return;\r\n        }\r\n        const transportStats = {\r\n            p2p: data.transport[0].p2p,\r\n            'local_candidate_type': data.transport[0].localCandidateType,\r\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\r\n            'transport_type': data.transport[0].type\r\n        };\r\n\r\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\r\n            this._cachedTransportStats = transportStats;\r\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the stats related to JVB connection. Must not be called when in\r\n     * P2P mode, because then the {@link AverageStatReport} instances are\r\n     * tracking P2P stats. Note that this should never happen unless something\r\n     * is wrong with the P2P and JVB121 events.\r\n     * @private\r\n     */\r\n    _resetAvgJvbStats() {\r\n        this._resetAvgStats();\r\n        this.jvbStatsMonitor._resetAvgStats();\r\n    }\r\n\r\n    /**\r\n     * Reset cache of all averages and {@link _sampleIdx}.\r\n     * @private\r\n     */\r\n    _resetAvgStats() {\r\n        this._avgAudioBitrateUp.reset();\r\n        this._avgAudioBitrateDown.reset();\r\n\r\n        this._avgVideoBitrateUp.reset();\r\n        this._avgVideoBitrateDown.reset();\r\n\r\n        this._avgBandwidthUp.reset();\r\n        this._avgBandwidthDown.reset();\r\n\r\n        this._avgPacketLossUp.reset();\r\n        this._avgPacketLossDown.reset();\r\n        this._avgPacketLossTotal.reset();\r\n\r\n        this._avgRemoteFPS.reset();\r\n        this._avgRemoteScreenFPS.reset();\r\n        this._avgLocalFPS.reset();\r\n        this._avgLocalScreenFPS.reset();\r\n\r\n        this._avgRemoteCameraPixels.reset();\r\n        this._avgRemoteScreenPixels.reset();\r\n        this._avgLocalCameraPixels.reset();\r\n        this._avgLocalScreenPixels.reset();\r\n\r\n        this._avgCQ.reset();\r\n\r\n        this._sampleIdx = 0;\r\n    }\r\n\r\n    /**\r\n     * Unregisters all event listeners and stops working.\r\n     */\r\n    dispose() {\r\n        this._conference.off(\r\n            ConferenceEvents.P2P_STATUS,\r\n            this._onP2PStatusChanged);\r\n        this._conference.off(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._onLocalStatsUpdated);\r\n        this._conference.off(\r\n            ConferenceEvents.JVB121_STATUS,\r\n            this._onJvb121StatusChanged);\r\n        this.jvbStatsMonitor.dispose();\r\n        this.p2pStatsMonitor.dispose();\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport SpeakerStats from './SpeakerStats';\r\n\r\n/**\r\n * A collection for tracking speaker stats. Attaches listeners\r\n * to the conference to automatically update on tracked events.\r\n */\r\nexport default class SpeakerStatsCollector {\r\n    /**\r\n     * Initializes a new SpeakerStatsCollector instance.\r\n     *\r\n     * @constructor\r\n     * @param {JitsiConference} conference - The conference to track.\r\n     * @returns {void}\r\n     */\r\n    constructor(conference) {\r\n        this.stats = {\r\n            users: {\r\n\r\n                // userId: SpeakerStats\r\n            },\r\n            dominantSpeakerId: null\r\n        };\r\n\r\n        const userId = conference.myUserId();\r\n\r\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\r\n        this.conference = conference;\r\n\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\r\n            this._onDominantSpeaker.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this._onUserJoin.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this._onUserLeave.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\r\n            this._onDisplayNameChange.bind(this));\r\n        if (conference.xmpp) {\r\n            conference.xmpp.addListener(\r\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\r\n                this._updateStats.bind(this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to dominant speaker change events by changing its speaker stats\r\n     * models to reflect the current dominant speaker.\r\n     *\r\n     * @param {string} dominantSpeakerId - The user id of the new\r\n     * dominant speaker.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onDominantSpeaker(dominantSpeakerId) {\r\n        const oldDominantSpeaker\r\n            = this.stats.users[this.stats.dominantSpeakerId];\r\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\r\n\r\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\r\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\r\n        this.stats.dominantSpeakerId = dominantSpeakerId;\r\n    }\r\n\r\n    /**\r\n     * Reacts to user join events by creating a new SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the new user.\r\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onUserJoin(userId, participant) {\r\n        if (participant.isHidden()) {\r\n            return;\r\n        }\r\n\r\n        if (!this.stats.users[userId]) {\r\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to user leave events by updating the associated user's\r\n     * SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the user that left.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onUserLeave(userId) {\r\n        const savedUser = this.stats.users[userId];\r\n\r\n        if (savedUser) {\r\n            savedUser.markAsHasLeft();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to user name change events by updating the last known name\r\n     * tracked in the associated SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the user that left.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onDisplayNameChange(userId, newName) {\r\n        const savedUser = this.stats.users[userId];\r\n\r\n        if (savedUser) {\r\n            savedUser.setDisplayName(newName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return a copy of the tracked SpeakerStats models.\r\n     *\r\n     * @returns {Object} The keys are the user ids and the values are the\r\n     * associated user's SpeakerStats model.\r\n     * @private\r\n     */\r\n    getStats() {\r\n        return this.stats.users;\r\n    }\r\n\r\n    /**\r\n     * Updates of the current stats is requested, passing the new values.\r\n     *\r\n     * @param {Object} newStats - The new values used to update current one.\r\n     * @private\r\n     */\r\n    _updateStats(newStats) {\r\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\r\n            let speakerStatsToUpdate;\r\n            const newParticipant = this.conference.getParticipantById(userId);\r\n\r\n            // we want to ignore hidden participants\r\n            if (!newParticipant || !newParticipant.isHidden()) {\r\n                if (this.stats.users[userId]) {\r\n                    speakerStatsToUpdate = this.stats.users[userId];\r\n\r\n                    if (!speakerStatsToUpdate.getDisplayName()) {\r\n                        speakerStatsToUpdate\r\n                            .setDisplayName(newStats[userId].displayName);\r\n                    }\r\n                } else {\r\n                    speakerStatsToUpdate = new SpeakerStats(\r\n                        userId, newStats[userId].displayName);\r\n                    this.stats.users[userId] = speakerStatsToUpdate;\r\n                    speakerStatsToUpdate.markAsHasLeft();\r\n                }\r\n            }\r\n\r\n            speakerStatsToUpdate.totalDominantSpeakerTime\r\n                = newStats[userId].totalDominantSpeakerTime;\r\n        }\r\n    }\r\n}\r\n","const AudioRecorder = require('./audioRecorder');\r\nconst SphinxService = require(\r\n    './transcriptionServices/SphinxTranscriptionService');\r\n\r\nconst BEFORE_STATE = 'before';\r\nconst RECORDING_STATE = 'recording';\r\nconst TRANSCRIBING_STATE = 'transcribing';\r\nconst FINISHED_STATE = 'finished';\r\n\r\n// the amount of characters each line in the transcription will have\r\nconst MAXIMUM_SENTENCE_LENGTH = 80;\r\n\r\n/**\r\n * This is the main object for handing the Transcription. It interacts with\r\n * the audioRecorder to record every person in a conference and sends the\r\n * recorder audio to a transcriptionService. The returned speech-to-text result\r\n * will be merged to create a transcript\r\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\r\n */\r\nfunction Transcriber() {\r\n    // the object which can record all audio in the conference\r\n    this.audioRecorder = new AudioRecorder();\r\n\r\n    // this object can send the recorder audio to a speech-to-text service\r\n    this.transcriptionService = new SphinxService();\r\n\r\n    // holds a counter to keep track if merging can start\r\n    this.counter = null;\r\n\r\n    // holds the date when transcription started which makes it possible\r\n    // to calculate the offset between recordings\r\n    this.startTime = null;\r\n\r\n    // will hold the transcription once it is completed\r\n    this.transcription = null;\r\n\r\n    // this will be a method which will be called once the transcription is done\r\n    // with the transcription as parameter\r\n    this.callback = null;\r\n\r\n    // stores all the retrieved speech-to-text results to merge together\r\n    // this value will store an Array<Word> object\r\n    this.results = [];\r\n\r\n    // Stores the current state of the transcription process\r\n    this.state = BEFORE_STATE;\r\n\r\n    // Used in the updateTranscription method to add a new line when the\r\n    // sentence becomes to long\r\n    this.lineLength = 0;\r\n}\r\n\r\n/**\r\n * Method to start the transcription process. It will tell the audioRecorder\r\n * to start storing all audio streams and record the start time for merging\r\n * purposes\r\n */\r\nTranscriber.prototype.start = function start() {\r\n    if (this.state !== BEFORE_STATE) {\r\n        throw new Error(\r\n            `The transcription can only start when it's in the \"${\r\n                BEFORE_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n    this.state = RECORDING_STATE;\r\n    this.audioRecorder.start();\r\n    this.startTime = new Date();\r\n};\r\n\r\n/**\r\n * Method to stop the transcription process. It will tell the audioRecorder to\r\n * stop, and get all the recorded audio to send it to the transcription service\r\n\r\n * @param callback a callback which will receive the transcription\r\n */\r\nTranscriber.prototype.stop = function stop(callback) {\r\n    if (this.state !== RECORDING_STATE) {\r\n        throw new Error(\r\n            `The transcription can only stop when it's in the \"${\r\n                RECORDING_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n\r\n    // stop the recording\r\n    console.log('stopping recording and sending audio files');\r\n    this.audioRecorder.stop();\r\n\r\n    // and send all recorded audio the the transcription service\r\n    const callBack = blobCallBack.bind(null, this);\r\n\r\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\r\n        this.transcriptionService.send(recordingResult, callBack);\r\n        this.counter++;\r\n    });\r\n\r\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\r\n    this.state = TRANSCRIBING_STATE;\r\n\r\n    // and store the callback for later\r\n    this.callback = callback;\r\n};\r\n\r\n/**\r\n * This method gets the answer from the transcription service, calculates the\r\n * offset and adds is to every Word object. It will also start the merging\r\n * when every send request has been received\r\n *\r\n * note: Make sure to bind this as a Transcription object\r\n * @param {Transcriber} transcriber the transcriber instance\r\n * @param {RecordingResult} answer a RecordingResult object with a defined\r\n * WordArray\r\n */\r\nfunction blobCallBack(transcriber, answer) {\r\n    console.log(\r\n        'retrieved an answer from the transcription service. The answer has an'\r\n            + ` array of length: ${answer.wordArray.length}`);\r\n\r\n    // first add the offset between the start of the transcription and\r\n    // the start of the recording to all start and end times\r\n    if (answer.wordArray.length > 0) {\r\n        let offset = answer.startTime.getUTCMilliseconds()\r\n            - transcriber.startTime.getUTCMilliseconds();\r\n\r\n        // transcriber time will always be earlier\r\n\r\n        if (offset < 0) {\r\n            offset = 0; // presume 0 if it somehow not earlier\r\n        }\r\n\r\n        let array = '[';\r\n\r\n        answer.wordArray.forEach(wordObject => {\r\n            wordObject.begin += offset;\r\n            wordObject.end += offset;\r\n            array += `${wordObject.word},`;\r\n        });\r\n        array += ']';\r\n        console.log(array);\r\n\r\n        // give a name value to the Array object so that the merging can access\r\n        // the name value without having to use the whole recordingResult object\r\n        // in the algorithm\r\n        answer.wordArray.name = answer.name;\r\n    }\r\n\r\n    // then store the array and decrease the counter\r\n    transcriber.results.push(answer.wordArray);\r\n    transcriber.counter--;\r\n    console.log(`current counter: ${transcriber.counter}`);\r\n\r\n    // and check if all results have been received.\r\n    transcriber.maybeMerge();\r\n}\r\n\r\n/**\r\n * this method will check if the counter is zero. If it is, it will call\r\n * the merging method\r\n */\r\nTranscriber.prototype.maybeMerge = function() {\r\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\r\n        // make sure to include the events in the result arrays before\r\n        // merging starts\r\n        this.merge();\r\n    }\r\n};\r\n\r\n/**\r\n * This method will merge all speech-to-text arrays together in one\r\n * readable transcription string\r\n */\r\nTranscriber.prototype.merge = function() {\r\n    console.log(\r\n        `starting merge process!\\n The length of the array: ${\r\n            this.results.length}`);\r\n    this.transcription = '';\r\n\r\n    // the merging algorithm will look over all Word objects who are at pos 0 in\r\n    // every array. It will then select the one closest in time to the\r\n    // previously placed word, while removing the selected word from its array\r\n    // note: words can be skipped the skipped word's begin and end time somehow\r\n    // end up between the closest word start and end time\r\n    const arrays = this.results;\r\n\r\n    // arrays of Word objects\r\n    const potentialWords = []; // array of the first Word objects\r\n    // check if any arrays are already empty and remove them\r\n\r\n    hasPopulatedArrays(arrays);\r\n\r\n    // populate all the potential Words for a first time\r\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\r\n\r\n    // keep adding words to transcription until all arrays are exhausted\r\n    while (hasPopulatedArrays(arrays)) {\r\n        // first select the lowest array;\r\n        let lowestWordArray = arrays[0];\r\n\r\n        arrays.forEach(wordArray => {\r\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\r\n                lowestWordArray = wordArray;\r\n            }\r\n        });\r\n\r\n        // put the word in the transcription\r\n        let wordToAdd = lowestWordArray.shift();\r\n\r\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\r\n\r\n        // keep going until a word in another array has a smaller time\r\n        // or the array is empty\r\n        while (lowestWordArray.length > 0) {\r\n            let foundSmaller = false;\r\n            const wordToCompare = lowestWordArray[0].begin;\r\n\r\n            arrays.forEach(wordArray => {\r\n                if (wordArray[0].begin < wordToCompare) {\r\n                    foundSmaller = true;\r\n                }\r\n            });\r\n\r\n            // add next word if no smaller time has been found\r\n            if (foundSmaller) {\r\n                break;\r\n            }\r\n\r\n            wordToAdd = lowestWordArray.shift();\r\n            this.updateTranscription(wordToAdd, null);\r\n        }\r\n\r\n    }\r\n\r\n    // set the state to finished and do the necessary left-over tasks\r\n    this.state = FINISHED_STATE;\r\n    if (this.callback) {\r\n        this.callback(this.transcription);\r\n    }\r\n};\r\n\r\n/**\r\n * Appends a word object to the transcription. It will make a new line with a\r\n * name if a name is specified\r\n * @param {Word} word the Word object holding the word to append\r\n * @param {String|null} name the name of a new speaker. Null if not applicable\r\n */\r\nTranscriber.prototype.updateTranscription = function(word, name) {\r\n    if (name !== undefined && name !== null) {\r\n        this.transcription += `\\n${name}:`;\r\n        this.lineLength = name.length + 1; // +1 for the semi-colon\r\n    }\r\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\r\n        this.transcription += '\\n    ';\r\n        this.lineLength = 4; // because of the 4 spaces after the new line\r\n    }\r\n    this.transcription += ` ${word.word}`;\r\n    this.lineLength += word.word.length + 1; // +1 for the space\r\n};\r\n\r\n/**\r\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\r\n * All zero-element arrays inside will be removed\r\n * If any non-zero-element arrays are found, the method will return true.\r\n * otherwise it will return false\r\n * @param {Array<Array>} twoDimensionalArray the array to check\r\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\r\n */\r\nfunction hasPopulatedArrays(twoDimensionalArray) {\r\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\r\n        if (twoDimensionalArray[i].length === 0) {\r\n            twoDimensionalArray.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    return twoDimensionalArray.length > 0;\r\n}\r\n\r\n/**\r\n * Push a word to the right location in a sorted array. The array is sorted\r\n * from lowest to highest start time. Every word is stored in an object which\r\n * includes the name of the person saying the word.\r\n *\r\n * @param {Array<Word>} array the sorted array to push to\r\n * @param {Word} word the word to push into the array\r\n */\r\nfunction pushWordToSortedArray(array, word) {\r\n    if (array.length === 0) {\r\n        array.push(word);\r\n    } else {\r\n        if (array[array.length - 1].begin <= word.begin) {\r\n            array.push(word);\r\n\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n            if (word.begin < array[i].begin) {\r\n                array.splice(i, 0, word);\r\n\r\n                return;\r\n            }\r\n        }\r\n        array.push(word); // fail safe\r\n    }\r\n}\r\n\r\n/**\r\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\r\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\r\n * audiostream, it will not be added by the audioRecorder\r\n * @param {JitsiTrack} track the track to give to the audioRecorder\r\n */\r\nTranscriber.prototype.addTrack = function(track) {\r\n    this.audioRecorder.addTrack(track);\r\n};\r\n\r\n/**\r\n * Remove the given track from the auioRecorder\r\n * @param track\r\n */\r\nTranscriber.prototype.removeTrack = function(track) {\r\n    this.audioRecorder.removeTrack(track);\r\n};\r\n\r\n/**\r\n * Will return the created transcription if it's avialable or throw an error\r\n * when it's not done yet\r\n * @returns {String} the transcription as a String\r\n */\r\nTranscriber.prototype.getTranscription = function() {\r\n    if (this.state !== FINISHED_STATE) {\r\n        throw new Error(\r\n            `The transcription can only be retrieved when it's in the \"${\r\n                FINISHED_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n\r\n    return this.transcription;\r\n};\r\n\r\n/**\r\n * Returns the current state of the transcription process\r\n */\r\nTranscriber.prototype.getState = function() {\r\n    return this.state;\r\n};\r\n\r\n/**\r\n * Resets the state to the \"before\" state, such that it's again possible to\r\n * call the start method\r\n */\r\nTranscriber.prototype.reset = function() {\r\n    this.state = BEFORE_STATE;\r\n    this.counter = null;\r\n    this.transcription = null;\r\n    this.startTime = null;\r\n    this.callback = null;\r\n    this.results = [];\r\n    this.lineLength = 0;\r\n};\r\n\r\nmodule.exports = Transcriber;\r\n","import Statistics from '../statistics/statistics';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\r\n * the versions of conferencing system components in given\r\n * <tt>JitsiConference</tt>.\r\n * @param conference <tt>JitsiConference</tt> instance which will be used to\r\n *        listen for focus presence updates.\r\n * @constructor\r\n */\r\nexport default function ComponentsVersions(conference) {\r\n\r\n    this.versions = {};\r\n\r\n    this.conference = conference;\r\n    this.conference.addCommandListener(\r\n        'versions', this.processVersions.bind(this));\r\n}\r\n\r\nComponentsVersions.prototype.processVersions\r\n    = function(versions, mucResource, mucJid) {\r\n        if (!this.conference._isFocus(mucJid)) {\r\n            logger.warn(\r\n                `Received versions not from the focus user: ${versions}`,\r\n                mucJid);\r\n\r\n            return;\r\n        }\r\n\r\n        const log = [];\r\n\r\n        versions.children.forEach(component => {\r\n\r\n            const name = component.attributes.name;\r\n            const version = component.value;\r\n\r\n            if (this.versions[name] !== version) {\r\n                this.versions[name] = version;\r\n                logger.info(`Got ${name} version: ${version}`);\r\n\r\n                log.push({\r\n                    id: 'component_version',\r\n                    component: name,\r\n                    version\r\n                });\r\n            }\r\n        });\r\n\r\n        // logs versions to stats\r\n        if (log.length > 0) {\r\n            Statistics.sendLog(JSON.stringify(log));\r\n        }\r\n    };\r\n\r\n/**\r\n * Obtains the version of conferencing system component.\r\n * @param componentName the name of the component for which we want to obtain\r\n *        the version.\r\n * @returns {String} which describes the version of the component identified by\r\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\r\n */\r\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\r\n    return this.versions[componentName];\r\n};\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nconst logger = getLogger(__filename);\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\r\nimport * as Constants from './VideoSIPGWConstants';\r\n\r\n/**\r\n * Main video SIP GW handler. Stores references of all created sessions.\r\n */\r\nexport default class VideoSIPGW {\r\n\r\n    /**\r\n     * Creates new handler.\r\n     *\r\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\r\n     */\r\n    constructor(chatRoom) {\r\n        this.chatRoom = chatRoom;\r\n        this.eventEmitter = chatRoom.eventEmitter;\r\n        logger.debug('creating VideoSIPGW');\r\n        this.sessions = {};\r\n\r\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\r\n\r\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\r\n        // more than one VideoSIPGW can be created per JitsiConference,\r\n        // so we don't bother to cleanup\r\n        chatRoom.addPresenceListener('jibri-sip-call-state',\r\n            this.handleJibriSIPState.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Handles presence nodes with name: jibri-sip-call-state.\r\n     *\r\n     * @param {Object} node the presence node Object to handle.\r\n     * Object representing part of the presence received over xmpp.\r\n     */\r\n    handleJibriSIPState(node) {\r\n        const attributes = node.attributes;\r\n\r\n        if (!attributes) {\r\n            return;\r\n        }\r\n\r\n        logger.debug('Handle video sip gw state : ', attributes);\r\n\r\n        const newState = attributes.state;\r\n\r\n        if (newState === this.state) {\r\n            return;\r\n        }\r\n\r\n        switch (newState) {\r\n        case Constants.STATE_ON:\r\n        case Constants.STATE_OFF:\r\n        case Constants.STATE_PENDING:\r\n        case Constants.STATE_RETRYING:\r\n        case Constants.STATE_FAILED: {\r\n            const address = attributes.sipaddress;\r\n\r\n            if (!address) {\r\n                return;\r\n            }\r\n\r\n            // find the corresponding session and set its state\r\n            const session = this.sessions[address];\r\n\r\n            if (session) {\r\n                session.setState(newState, attributes.failure_reason);\r\n            } else {\r\n                logger.warn('Video SIP GW session not found:', address);\r\n            }\r\n        }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates new session and stores its reference if it does not exist or\r\n     * returns an error otherwise.\r\n     *\r\n     * @param {string} sipAddress - The sip address to use.\r\n     * @param {string} displayName - The display name to use.\r\n     * @returns {JitsiVideoSIPGWSession|Error}\r\n     */\r\n    createVideoSIPGWSession(sipAddress, displayName) {\r\n        if (this.sessions[sipAddress]) {\r\n            logger.warn('There was already a Video SIP GW session for address',\r\n                sipAddress);\r\n\r\n            return new Error(Constants.ERROR_SESSION_EXISTS);\r\n        }\r\n\r\n        const session = new JitsiVideoSIPGWSession(\r\n            sipAddress, displayName, this.chatRoom);\r\n\r\n        session.addStateListener(this.sessionStateChangeListener);\r\n\r\n        this.sessions[sipAddress] = session;\r\n\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * Listener for session state changed. When a session goes to off or failed\r\n     * we delete its reference.\r\n     *\r\n     * @param {options} event - { address, oldState, newState, displayName }\r\n     */\r\n    sessionStateChanged(event) {\r\n        const address = event.address;\r\n\r\n        if (event.newState === Constants.STATE_OFF\r\n            || event.newState === Constants.STATE_FAILED) {\r\n            const session = this.sessions[address];\r\n\r\n            if (!session) {\r\n                logger.error('Missing Video SIP GW session with address:',\r\n                    address);\r\n\r\n                return;\r\n            }\r\n\r\n            session.removeStateListener(this.sessionStateChangeListener);\r\n            delete this.sessions[address];\r\n        }\r\n\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\r\n            event);\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The event name for current sip video session state changed.\r\n * @type {string} event name for sip video session state changed.\r\n */\r\nconst STATE_CHANGED = 'STATE_CHANGED';\r\n\r\n/**\r\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\r\n * When session is in OFF or FAILED stated it cannot be used anymore.\r\n */\r\nexport default class JitsiVideoSIPGWSession extends Listenable {\r\n\r\n    /**\r\n     * Creates new session with the desired sip address and display name.\r\n     *\r\n     * @param {string} sipAddress - The sip address to use when\r\n     * starting the session.\r\n     * @param {string} displayName - The display name to use for\r\n     * that participant.\r\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\r\n     */\r\n    constructor(sipAddress, displayName, chatRoom) {\r\n        super();\r\n\r\n        this.sipAddress = sipAddress;\r\n        this.displayName = displayName;\r\n        this.chatRoom = chatRoom;\r\n\r\n        /*\r\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\r\n         * the session enters this state when it was in STATE_ON and was stopped\r\n         * and such session cannot be used anymore.\r\n         *\r\n         * @type {VideoSIPGWConstants|undefined}\r\n         */\r\n        this.state = undefined;\r\n    }\r\n\r\n    /**\r\n     * Stops the current session.\r\n     */\r\n    stop() {\r\n        if (this.state === VideoSIPGWConstants.STATE_OFF\r\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\r\n            logger.warn('Video SIP GW session already stopped or failed!');\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendJibriIQ('stop');\r\n    }\r\n\r\n    /**\r\n     * Starts a new session. Sends an iq to the focus.\r\n     */\r\n    start() {\r\n        // if state is off, this session was active for some reason\r\n        // and we should create new one, rather than reusing it\r\n        if (this.state === VideoSIPGWConstants.STATE_ON\r\n            || this.state === VideoSIPGWConstants.STATE_OFF\r\n            || this.state === VideoSIPGWConstants.STATE_PENDING\r\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\r\n            logger.warn('Video SIP GW session already started!');\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendJibriIQ('start');\r\n    }\r\n\r\n    /**\r\n     * Changes the state of this session.\r\n     *\r\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\r\n     * @param {string} [optional] failureReason - The reason why a failure state\r\n     * was entered.\r\n     * @returns {void}\r\n     */\r\n    setState(newState, failureReason) {\r\n        if (newState === this.state) {\r\n            return;\r\n        }\r\n\r\n        const oldState = this.state;\r\n\r\n        this.state = newState;\r\n        this.eventEmitter.emit(STATE_CHANGED,\r\n            {\r\n                address: this.sipAddress,\r\n                failureReason,\r\n                oldState,\r\n                newState: this.state,\r\n                displayName: this.displayName\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Subscribes the passed listener to the event for state change of this\r\n     * session.\r\n     *\r\n     * @param {Function} listener - The function that will receive the event.\r\n     */\r\n    addStateListener(listener) {\r\n        this.addListener(STATE_CHANGED, listener);\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes the passed handler.\r\n     *\r\n     * @param {Function} listener - The function to be removed.\r\n     */\r\n    removeStateListener(listener) {\r\n        this.removeListener(STATE_CHANGED, listener);\r\n    }\r\n\r\n    /**\r\n     * Sends a jibri command using an iq.\r\n     *\r\n     * @private\r\n     * @param {string} action - The action to send ('start' or 'stop').\r\n     */\r\n    _sendJibriIQ(action) {\r\n        const attributes = {\r\n            'xmlns': 'http://jitsi.org/protocol/jibri',\r\n            'action': action,\r\n            sipaddress: this.sipAddress\r\n        };\r\n\r\n        attributes.displayname = this.displayName;\r\n\r\n        const iq = $iq({\r\n            to: this.chatRoom.focusMucJid,\r\n            type: 'set' })\r\n            .c('jibri', attributes)\r\n            .up();\r\n\r\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\r\n        this.chatRoom.connection.sendIQ(\r\n            iq,\r\n            () => {}, // eslint-disable-line no-empty-function\r\n            error => {\r\n                logger.error(\r\n                    `Failed to ${action} video SIP GW session, error: `, error);\r\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\r\n            });\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport { MediaType } from '../../service/RTC/MediaType';\r\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\r\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\r\nimport { VideoType } from '../../service/RTC/VideoType';\r\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\n\r\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\r\n\r\n/**\r\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\r\n * the data from the MUC presence.\r\n */\r\nexport default class SignalingLayerImpl extends SignalingLayer {\r\n    /**\r\n     * Creates new instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * A map that stores SSRCs of remote streams. And is used only locally\r\n         * We store the mapping when jingle is received, and later is used\r\n         * onaddstream webrtc event where we have only the ssrc\r\n         * FIXME: This map got filled and never cleaned and can grow during long\r\n         * conference\r\n         * @type {Map<number, string>} maps SSRC number to jid\r\n         */\r\n        this.ssrcOwners = new Map();\r\n\r\n        /**\r\n         *\r\n         * @type {ChatRoom|null}\r\n         */\r\n        this.chatRoom = null;\r\n\r\n        /**\r\n         * @type {Map<SourceName, SourceInfo>}\r\n         * @private\r\n         */\r\n        this._localSourceState = { };\r\n\r\n        /**\r\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\r\n         * @private\r\n         */\r\n        this._remoteSourceState = { };\r\n\r\n        /**\r\n         * A map that stores the source name of a track identified by it's ssrc.\r\n         * We store the mapping when jingle is received, and later is used\r\n         * onaddstream webrtc event where we have only the ssrc\r\n         * FIXME: This map got filled and never cleaned and can grow during long\r\n         * conference\r\n         * @type {Map<number, string>} maps SSRC number to source name\r\n         */\r\n        this._sourceNames = new Map();\r\n    }\r\n\r\n    /**\r\n     * Adds <SourceInfo> element to the local presence.\r\n     *\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _addLocalSourceInfoToPresence() {\r\n        if (this.chatRoom) {\r\n            return this.chatRoom.addOrReplaceInPresence(\r\n                SOURCE_INFO_PRESENCE_ELEMENT,\r\n                { value: JSON.stringify(this._localSourceState) });\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\r\n     * is used by this endpoint.\r\n     *\r\n     * @param {EndpointId} endpointId\r\n     * @returns {boolean}\r\n     */\r\n    _doesEndpointSendNewSourceInfo(endpointId) {\r\n        const presence = this.chatRoom?.getLastPresence(endpointId);\r\n\r\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\r\n    }\r\n\r\n    /**\r\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\r\n     * @param {ChatRoom} room\r\n     */\r\n    setChatRoom(room) {\r\n        const oldChatRoom = this.chatRoom;\r\n\r\n        this.chatRoom = room;\r\n        if (oldChatRoom) {\r\n            oldChatRoom.removePresenceListener(\r\n                'audiomuted', this._audioMuteHandler);\r\n            oldChatRoom.removePresenceListener(\r\n                'videomuted', this._videoMuteHandler);\r\n            oldChatRoom.removePresenceListener(\r\n                'videoType', this._videoTypeHandler);\r\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                this._sourceInfoHandler\r\n                    && oldChatRoom.removePresenceListener(\r\n                        SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\r\n                this._memberLeftHandler\r\n                    && oldChatRoom.removeEventListener(\r\n                        XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\r\n            }\r\n        }\r\n        if (room) {\r\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                this._bindChatRoomEventHandlers(room);\r\n                this._addLocalSourceInfoToPresence();\r\n            } else {\r\n                // TODO the logic below has been duplicated in _bindChatRoomEventHandlers, clean this up once\r\n                //  the new impl has been tested well enough\r\n                // SignalingEvents\r\n                this._audioMuteHandler = (node, from) => {\r\n                    this.eventEmitter.emit(\r\n                        SignalingEvents.PEER_MUTED_CHANGED,\r\n                        from, MediaType.AUDIO, node.value === 'true');\r\n                };\r\n                room.addPresenceListener('audiomuted', this._audioMuteHandler);\r\n\r\n                this._videoMuteHandler = (node, from) => {\r\n                    this.eventEmitter.emit(\r\n                        SignalingEvents.PEER_MUTED_CHANGED,\r\n                        from, MediaType.VIDEO, node.value === 'true');\r\n                };\r\n                room.addPresenceListener('videomuted', this._videoMuteHandler);\r\n\r\n                this._videoTypeHandler = (node, from) => {\r\n                    this.eventEmitter.emit(\r\n                        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\r\n                        from, node.value);\r\n                };\r\n                room.addPresenceListener('videoType', this._videoTypeHandler);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds event listeners to the chat room instance.\r\n     * @param {ChatRoom} room\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _bindChatRoomEventHandlers(room) {\r\n        const emitAudioMutedEvent = (endpointId, muted) => {\r\n            this.eventEmitter.emit(\r\n                SignalingEvents.PEER_MUTED_CHANGED,\r\n                endpointId,\r\n                MediaType.AUDIO,\r\n                muted);\r\n        };\r\n        const emitVideoMutedEvent = (endpointId, muted) => {\r\n            this.eventEmitter.emit(\r\n                SignalingEvents.PEER_MUTED_CHANGED,\r\n                endpointId,\r\n                MediaType.VIDEO,\r\n                muted);\r\n        };\r\n\r\n        // SignalingEvents\r\n        this._audioMuteHandler = (node, from) => {\r\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\r\n                emitAudioMutedEvent(from, node.value === 'true');\r\n            }\r\n        };\r\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\r\n\r\n        this._videoMuteHandler = (node, from) => {\r\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\r\n                emitVideoMutedEvent(from, node.value === 'true');\r\n            }\r\n        };\r\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\r\n\r\n        const emitVideoTypeEvent = (endpointId, videoType) => {\r\n            this.eventEmitter.emit(\r\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\r\n                endpointId, videoType);\r\n        };\r\n\r\n        this._videoTypeHandler = (node, from) => {\r\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\r\n                emitVideoTypeEvent(from, node.value);\r\n            }\r\n        };\r\n\r\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\r\n            room.addPresenceListener('videoType', this._videoTypeHandler);\r\n        }\r\n\r\n        this._sourceInfoHandler = (node, mucNick) => {\r\n            const endpointId = mucNick;\r\n            const { value } = node;\r\n            const sourceInfoJSON = JSON.parse(value);\r\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\r\n            const endpointSourceState\r\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\r\n\r\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\r\n                const mediaType = getMediaTypeFromSourceName(sourceName);\r\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\r\n                const oldSourceState = endpointSourceState[sourceName]\r\n                    || (endpointSourceState[sourceName] = { sourceName });\r\n\r\n                if (oldSourceState.muted !== newMutedState) {\r\n                    oldSourceState.muted = newMutedState;\r\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\r\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_MUTED_CHANGED, sourceName, newMutedState);\r\n                    }\r\n                }\r\n\r\n                // Assume a default videoType of 'camera' for video sources.\r\n                const newVideoType = mediaType === MediaType.VIDEO\r\n                    ? (sourceInfoJSON[sourceName].videoType ? sourceInfoJSON[sourceName].videoType : VideoType.CAMERA)\r\n                    : undefined;\r\n\r\n                if (oldSourceState.videoType !== newVideoType) {\r\n                    oldSourceState.videoType = newVideoType;\r\n\r\n                    // Since having a mix of eps that do/don't support multi-stream in the same call is supported, emit\r\n                    // SOURCE_VIDEO_TYPE_CHANGED event when the remote source changes videoType.\r\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\r\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED, sourceName, newVideoType);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Cleanup removed source names\r\n            const newSourceNames = Object.keys(sourceInfoJSON);\r\n\r\n            for (const sourceName of Object.keys(endpointSourceState)) {\r\n                if (newSourceNames.indexOf(sourceName) === -1) {\r\n                    delete endpointSourceState[sourceName];\r\n                }\r\n            }\r\n        };\r\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\r\n\r\n        // Cleanup when participant leaves\r\n        this._memberLeftHandler = jid => {\r\n            const endpointId = Strophe.getResourceFromJid(jid);\r\n\r\n            delete this._remoteSourceState[endpointId];\r\n\r\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                for (const [ key, value ] of this.ssrcOwners.entries()) {\r\n                    if (value === endpointId) {\r\n                        delete this._sourceNames[key];\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\r\n    }\r\n\r\n    /**\r\n     * Finds the first source of given media type for the given endpoint.\r\n     * @param endpointId\r\n     * @param mediaType\r\n     * @returns {SourceInfo|null}\r\n     * @private\r\n     */\r\n    _findEndpointSourceInfoForMediaType(endpointId, mediaType) {\r\n        const remoteSourceState = this._remoteSourceState[endpointId];\r\n\r\n        if (!remoteSourceState) {\r\n            return null;\r\n        }\r\n\r\n        for (const sourceInfo of Object.values(remoteSourceState)) {\r\n            const _mediaType = getMediaTypeFromSourceName(sourceInfo.sourceName);\r\n\r\n            if (_mediaType === mediaType) {\r\n                return sourceInfo;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getPeerMediaInfo(owner, mediaType, sourceName) {\r\n        const legacyGetPeerMediaInfo = () => {\r\n            if (this.chatRoom) {\r\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\r\n            }\r\n            logger.error('Requested peer media info, before room was set');\r\n        };\r\n        const lastPresence = this.chatRoom.getLastPresence(owner);\r\n\r\n        if (!lastPresence) {\r\n            throw new Error(`getPeerMediaInfo - no presence stored for: ${owner}`);\r\n        }\r\n\r\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n            if (!this._doesEndpointSendNewSourceInfo(owner)) {\r\n                return legacyGetPeerMediaInfo();\r\n            }\r\n\r\n            if (sourceName) {\r\n                return this.getPeerSourceInfo(owner, sourceName);\r\n            }\r\n\r\n            /**\r\n             * @type {PeerMediaInfo}\r\n             */\r\n            const mediaInfo = {};\r\n            const endpointMediaSource = this._findEndpointSourceInfoForMediaType(owner, mediaType);\r\n\r\n            // The defaults are provided only, because getPeerMediaInfo is a legacy method. This will be eventually\r\n            // changed into a getSourceInfo method which returns undefined if there's no source. Also there will be\r\n            // no mediaType argument there.\r\n            if (mediaType === MediaType.AUDIO) {\r\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\r\n            } else if (mediaType === MediaType.VIDEO) {\r\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\r\n                mediaInfo.videoType = endpointMediaSource ? endpointMediaSource.videoType : undefined;\r\n\r\n                const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\r\n\r\n                if (codecTypeNode.length > 0) {\r\n                    mediaInfo.codecType = codecTypeNode[0].value;\r\n                }\r\n            } else {\r\n                throw new Error(`Unsupported media type: ${mediaType}`);\r\n            }\r\n\r\n            return mediaInfo;\r\n        }\r\n\r\n        return legacyGetPeerMediaInfo();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getPeerSourceInfo(owner, sourceName) {\r\n        const mediaInfo = {\r\n            muted: true, // muted by default\r\n            videoType: VideoType.CAMERA // 'camera' by default\r\n        };\r\n\r\n        return this._remoteSourceState[owner]\r\n            ? (this._remoteSourceState[owner][sourceName] ? this._remoteSourceState[owner][sourceName] : mediaInfo)\r\n            : undefined;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getSSRCOwner(ssrc) {\r\n        return this.ssrcOwners.get(ssrc);\r\n    }\r\n\r\n    /**\r\n     * Set an SSRC owner.\r\n     * @param {number} ssrc an SSRC to be owned\r\n     * @param {string} endpointId owner's ID (MUC nickname)\r\n     * @throws TypeError if <tt>ssrc</tt> is not a number\r\n     */\r\n    setSSRCOwner(ssrc, endpointId) {\r\n        if (typeof ssrc !== 'number') {\r\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\r\n        }\r\n\r\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\r\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\r\n        const existingOwner = this.ssrcOwners.get(ssrc);\r\n\r\n        if (existingOwner && existingOwner !== endpointId) {\r\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\r\n        }\r\n        this.ssrcOwners.set(ssrc, endpointId);\r\n    }\r\n\r\n    /**\r\n     * Adjusts muted status of given track.\r\n     *\r\n     * @param {SourceName} sourceName - the name of the track's source.\r\n     * @param {boolean} muted - the new muted status.\r\n     * @returns {boolean}\r\n     */\r\n    setTrackMuteStatus(sourceName, muted) {\r\n        if (!this._localSourceState[sourceName]) {\r\n            this._localSourceState[sourceName] = {};\r\n        }\r\n\r\n        this._localSourceState[sourceName].muted = muted;\r\n\r\n        if (this.chatRoom) {\r\n            // FIXME This only adjusts the presence, but doesn't actually send it. Here we temporarily rely on\r\n            // the legacy signaling part to send the presence. Remember to add \"send presence\" here when the legacy\r\n            // signaling is removed.\r\n            return this._addLocalSourceInfoToPresence();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sets track's video type.\r\n     * @param {SourceName} sourceName - the track's source name.\r\n     * @param {VideoType} videoType - the new video type.\r\n     * @returns {boolean}\r\n     */\r\n    setTrackVideoType(sourceName, videoType) {\r\n        if (!this._localSourceState[sourceName]) {\r\n            this._localSourceState[sourceName] = {};\r\n        }\r\n\r\n        if (this._localSourceState[sourceName].videoType !== videoType) {\r\n            // Include only if not a camera (default)\r\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\r\n\r\n            // NOTE this doesn't send the actual presence, because is called from the same place where the legacy video\r\n            // type is emitted which does the actual sending. A send presence statement needs to be added when\r\n            // the legacy part is removed.\r\n            return this._addLocalSourceInfoToPresence();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getTrackSourceName(ssrc) {\r\n        return this._sourceNames.get(ssrc);\r\n    }\r\n\r\n    /**\r\n     * Saves the source name for a track identified by it's ssrc.\r\n     * @param {number} ssrc the ssrc of the target track.\r\n     * @param {SourceName} sourceName the track's source name to save.\r\n     * @throws TypeError if <tt>ssrc</tt> is not a number\r\n     */\r\n    setTrackSourceName(ssrc, sourceName) {\r\n        if (typeof ssrc !== 'number') {\r\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\r\n        }\r\n\r\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\r\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\r\n        const existingName = this._sourceNames.get(ssrc);\r\n\r\n        if (existingName && existingName !== sourceName) {\r\n            logger.error(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\r\n        }\r\n\r\n        this._sourceNames.set(ssrc, sourceName);\r\n    }\r\n\r\n}","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport RTC from '../RTC/RTC';\r\nimport Statistics from '../statistics/statistics';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\r\n// i.e. audioLevel > 0.008\r\nconst DETECTION_TIMEOUT = 3000;\r\n\r\n\r\n/**\r\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\r\n *\r\n * @returns Promise<Object> - Object containing information about the found device.\r\n */\r\nexport default function getActiveAudioDevice() {\r\n\r\n    return new Promise(resolve => {\r\n        RTC.enumerateDevices(devices => {\r\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\r\n            const devicePromiseArray = [];\r\n\r\n\r\n            for (const micDevice of audioDevices) {\r\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\r\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\r\n\r\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\r\n                    // that's  why only take p.value[0].\r\n                    const track = tracks[0];\r\n                    const originalStream = track.getOriginalStream();\r\n\r\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\r\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\r\n                        Statistics.stopLocalStats(originalStream);\r\n                    });\r\n\r\n                    return track;\r\n                });\r\n\r\n                devicePromiseArray.push(devicePromise);\r\n            }\r\n\r\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\r\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\r\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\r\n\r\n\r\n                const availableDevices = successfulPromises.map(p => p.value);\r\n                const rejectReasons = rejectedPromises.map(p => p.value);\r\n\r\n                for (const reason of rejectReasons) {\r\n                    logger.error('Failed to acquire audio device with error: ', reason);\r\n                }\r\n\r\n                // Setup event handlers for monitored devices.\r\n                for (const device of availableDevices) {\r\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\r\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\r\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\r\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\r\n                        // no input.\r\n                        if (audioLevel > 0.008) {\r\n                            stopActiveDevices(availableDevices);\r\n                            resolve({ deviceId: device.deviceId,\r\n                                deviceLabel: device.track.label });\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\r\n                setTimeout(() => {\r\n                    stopActiveDevices(availableDevices);\r\n                    resolve({\r\n                        deviceId: '',\r\n                        deviceLabel: '' }\r\n                    );\r\n                }, DETECTION_TIMEOUT);\r\n\r\n            });\r\n\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Stop the streams of the provided JitsiLocalTracks.\r\n *\r\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\r\n * @returns {void}\r\n */\r\nfunction stopActiveDevices(deviceList) {\r\n    for (const device of deviceList) {\r\n        device.stopStream();\r\n    }\r\n}\r\n","/* globals $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport RTC from '../RTC/RTC';\r\n\r\nimport ProxyConnectionPC from './ProxyConnectionPC';\r\nimport { ACTIONS } from './constants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\r\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\r\n * and assumes IQs to be used for communication.\r\n */\r\nexport default class ProxyConnectionService {\r\n    /**\r\n     * Initializes a new {@code ProxyConnectionService} instance.\r\n     *\r\n     * @param {Object} options - Values to initialize the instance with.\r\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\r\n     * video should be returned as a desktop stream. Defaults to false.\r\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\r\n     * for the peer connection.\r\n     * @param {JitsiConnection} [options.jitsiConnection] - The\r\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\r\n     * the P2P connection.\r\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\r\n     * remote video stream has been received and converted to a\r\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\r\n     * @param {Function} options.onSendMessage - Callback to invoke when a\r\n     * message has to be sent (signaled) out. The arguments passed in are the\r\n     * jid to send the message to and the message\r\n     */\r\n    constructor(options = {}) {\r\n        const {\r\n            jitsiConnection,\r\n            ...otherOptions\r\n        } = options;\r\n\r\n        /**\r\n         * Holds a reference to the collection of all callbacks.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this._options = {\r\n            iceConfig: jitsiConnection\r\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\r\n            ...otherOptions\r\n        };\r\n\r\n        /**\r\n         * The active instance of {@code ProxyConnectionService}.\r\n         *\r\n         * @type {ProxyConnectionPC|null}\r\n         */\r\n        this._peerConnection = null;\r\n\r\n        // Bind event handlers so they are only bound once for every instance.\r\n        this._onFatalError = this._onFatalError.bind(this);\r\n        this._onSendMessage = this._onSendMessage.bind(this);\r\n        this._onRemoteStream = this._onRemoteStream.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a message object regarding a proxy connection to create a new\r\n     * proxy connection or update and existing connection.\r\n     *\r\n     * @param {Object} message - A message object regarding establishing or\r\n     * updating a proxy connection.\r\n     * @param {Object} message.data - An object containing additional message\r\n     * details.\r\n     * @param {string} message.data.iq - The stringified iq which explains how\r\n     * and what to update regarding the proxy connection.\r\n     * @param {string} message.from - The message sender's full jid. Used for\r\n     * sending replies.\r\n     * @returns {void}\r\n     */\r\n    processMessage(message) {\r\n        const peerJid = message.from;\r\n\r\n        if (!peerJid) {\r\n            return;\r\n        }\r\n\r\n        // If a proxy connection has already been established and messages come\r\n        // from another peer jid then those messages should be replied to with\r\n        // a rejection.\r\n        if (this._peerConnection\r\n            && this._peerConnection.getPeerJid() !== peerJid) {\r\n            this._onFatalError(\r\n                peerJid,\r\n                ACTIONS.CONNECTION_ERROR,\r\n                'rejected'\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        const iq = this._convertStringToXML(message.data.iq);\r\n        const $jingle = iq && iq.find('jingle');\r\n        const action = $jingle && $jingle.attr('action');\r\n\r\n        if (action === ACTIONS.INITIATE) {\r\n            this._peerConnection = this._createPeerConnection(peerJid, {\r\n                isInitiator: false,\r\n                receiveVideo: true\r\n            });\r\n        }\r\n\r\n        // Truthy check for peer connection added to protect against possibly\r\n        // receiving actions before an ACTIONS.INITIATE.\r\n        if (this._peerConnection) {\r\n            this._peerConnection.processMessage($jingle);\r\n        }\r\n\r\n        // Take additional steps to ensure the peer connection is cleaned up\r\n        // if it is to be closed.\r\n        if (action === ACTIONS.CONNECTION_ERROR\r\n            || action === ACTIONS.UNAVAILABLE\r\n            || action === ACTIONS.TERMINATE) {\r\n            this._selfCloseConnection();\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Instantiates and initiates a proxy peer connection.\r\n     *\r\n     * @param {string} peerJid - The jid of the remote client that should\r\n     * receive messages.\r\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\r\n     * send through to the peer.\r\n     * @returns {void}\r\n     */\r\n    start(peerJid, localTracks = []) {\r\n        this._peerConnection = this._createPeerConnection(peerJid, {\r\n            isInitiator: true,\r\n            receiveVideo: false\r\n        });\r\n\r\n        this._peerConnection.start(localTracks);\r\n    }\r\n\r\n    /**\r\n     * Terminates any active proxy peer connection.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        if (this._peerConnection) {\r\n            this._peerConnection.stop();\r\n        }\r\n\r\n        this._peerConnection = null;\r\n    }\r\n\r\n    /**\r\n     * Transforms a stringified xML into a XML wrapped in jQuery.\r\n     *\r\n     * @param {string} xml - The XML in string form.\r\n     * @private\r\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\r\n     * if an error is encountered during transformation.\r\n     */\r\n    _convertStringToXML(xml) {\r\n        try {\r\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\r\n\r\n            return $(xmlDom);\r\n        } catch (e) {\r\n            logger.error('Attempted to convert incorrectly formatted xml');\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\r\n     *\r\n     * @param {string} peerJid - The jid of the remote peer with which the\r\n     * {@code ProxyConnectionPC} will be established with.\r\n     * @param {Object} options - Additional defaults to instantiate the\r\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\r\n     * for more details.\r\n     * @private\r\n     * @returns {ProxyConnectionPC}\r\n     */\r\n    _createPeerConnection(peerJid, options = {}) {\r\n        if (!peerJid) {\r\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\r\n        }\r\n\r\n        const pcOptions = {\r\n            iceConfig: this._options.iceConfig,\r\n            onError: this._onFatalError,\r\n            onRemoteStream: this._onRemoteStream,\r\n            onSendMessage: this._onSendMessage,\r\n            peerJid,\r\n            ...options\r\n        };\r\n\r\n        return new ProxyConnectionPC(pcOptions);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when an error occurs that should cause\r\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\r\n     * connected. Sends an error message/reply back to the peer.\r\n     *\r\n     * @param {string} peerJid - The peer jid with which the connection was\r\n     * attempted or started, and to which an iq with error details should be\r\n     * sent.\r\n     * @param {string} errorType - The constant indicating the type of the error\r\n     * that occured.\r\n     * @param {string} details - Optional additional data about the error.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onFatalError(peerJid, errorType, details = '') {\r\n        logger.error(\r\n            'Received a proxy connection error', peerJid, errorType, details);\r\n\r\n        const iq = $iq({\r\n            to: peerJid,\r\n            type: 'set'\r\n        })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: errorType\r\n            })\r\n            .c('details')\r\n            .t(details)\r\n            .up();\r\n\r\n        this._onSendMessage(peerJid, iq);\r\n\r\n        if (this._peerConnection\r\n            && this._peerConnection.getPeerJid() === peerJid) {\r\n            this._selfCloseConnection();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\r\n     * has offered a media stream. The stream is converted into a\r\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\r\n     * callback is defined.\r\n     *\r\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\r\n     * for the peer's media stream.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onRemoteStream(jitsiRemoteTrack) {\r\n        if (!this._options.onRemoteStream) {\r\n            logger.error('Remote track received without callback.');\r\n            jitsiRemoteTrack.dispose();\r\n\r\n            return;\r\n        }\r\n\r\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\r\n        let videoType;\r\n\r\n        if (isVideo) {\r\n            videoType = this._options.convertVideoToDesktop\r\n                ? VideoType.DESKTOP : VideoType.CAMERA;\r\n        }\r\n\r\n        // Grab the webrtc media stream and pipe it through the same processing\r\n        // that would occur for a locally obtained media stream.\r\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\r\n        const jitsiLocalTracks = RTC.newCreateLocalTracks(\r\n            [\r\n                {\r\n                    deviceId:\r\n                        `proxy:${this._peerConnection.getPeerJid()}`,\r\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\r\n                    sourceType: 'proxy',\r\n                    stream: mediaStream,\r\n                    track: mediaStream.getVideoTracks()[0],\r\n                    videoType\r\n                }\r\n            ]);\r\n\r\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\r\n    }\r\n\r\n    /**\r\n     * Formats and forwards a message an iq to be sent to a peer jid.\r\n     *\r\n     * @param {string} peerJid - The jid the iq should be sent to.\r\n     * @param {Object} iq - The iq which would be sent to the peer jid.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSendMessage(peerJid, iq) {\r\n        if (!this._options.onSendMessage) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const stringifiedIq\r\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\r\n\r\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\r\n        } catch (e) {\r\n            logger.error('Attempted to send an incorrectly formatted iq.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _selfCloseConnection() {\r\n        this.stop();\r\n\r\n        this._options.onConnectionClosed\r\n            && this._options.onConnectionClosed();\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport RTC from '../RTC/RTC';\r\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\r\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\r\n\r\nimport { ACTIONS } from './constants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\r\n * an XMPP connection. It is being re-used for consistency with the rest of the\r\n * codebase and to leverage existing peer connection event handling. Also\r\n * this class provides a facade to hide most of the API for\r\n * {@code JingleSessionPC}.\r\n */\r\nexport default class ProxyConnectionPC {\r\n    /**\r\n     * Initializes a new {@code ProxyConnectionPC} instance.\r\n     *\r\n     * @param {Object} options - Values to initialize the instance with.\r\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\r\n     * for the peer connection.\r\n     * @param {boolean} [options.isInitiator] - If true, the local client should\r\n     * send offers. If false, the local client should send answers. Defaults to\r\n     * false.\r\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\r\n     * remote media stream has been received through the peer connection.\r\n     * @param {string} options.peerJid - The jid of the remote client with which\r\n     * the peer connection is being establish and which should receive direct\r\n     * messages regarding peer connection updates.\r\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\r\n     * connection should accept incoming video streams. Defaults to false.\r\n     * @param {Function} options.onSendMessage - Callback to invoke when a\r\n     * message has to be sent (signaled) out.\r\n     */\r\n    constructor(options = {}) {\r\n        this._options = {\r\n            iceConfig: {},\r\n            isInitiator: false,\r\n            receiveAudio: false,\r\n            receiveVideo: false,\r\n            ...options\r\n        };\r\n\r\n        /**\r\n         * Instances of {@code JitsiTrack} associated with this instance of\r\n         * {@code ProxyConnectionPC}.\r\n         *\r\n         * @type {Array<JitsiTrack>}\r\n         */\r\n        this._tracks = [];\r\n\r\n        /**\r\n         * The active instance of {@code JingleSessionPC}.\r\n         *\r\n         * @type {JingleSessionPC|null}\r\n         */\r\n        this._peerConnection = null;\r\n\r\n        // Bind event handlers so they are only bound once for every instance.\r\n        this._onError = this._onError.bind(this);\r\n        this._onRemoteStream = this._onRemoteStream.bind(this);\r\n        this._onSendMessage = this._onSendMessage.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the remote peer with which this peer connection should\r\n     * be established with.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getPeerJid() {\r\n        return this._options.peerJid;\r\n    }\r\n\r\n    /**\r\n     * Updates the peer connection based on the passed in jingle.\r\n     *\r\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\r\n     * describing how the peer connection should be updated.\r\n     * @returns {void}\r\n     */\r\n    processMessage($jingle) {\r\n        switch ($jingle.attr('action')) {\r\n        case ACTIONS.ACCEPT:\r\n            this._onSessionAccept($jingle);\r\n            break;\r\n\r\n        case ACTIONS.INITIATE:\r\n            this._onSessionInitiate($jingle);\r\n            break;\r\n\r\n        case ACTIONS.TERMINATE:\r\n            this._onSessionTerminate($jingle);\r\n            break;\r\n\r\n        case ACTIONS.TRANSPORT_INFO:\r\n            this._onTransportInfo($jingle);\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instantiates a peer connection and starts the offer/answer cycle to\r\n     * establish a connection with a remote peer.\r\n     *\r\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\r\n     * to add to the peer connection.\r\n     * @returns {void}\r\n     */\r\n    start(localTracks = []) {\r\n        if (this._peerConnection) {\r\n            return;\r\n        }\r\n\r\n        this._tracks = this._tracks.concat(localTracks);\r\n\r\n        this._peerConnection = this._createPeerConnection();\r\n\r\n        this._peerConnection.invite(localTracks);\r\n    }\r\n\r\n    /**\r\n     * Begins the process of disconnecting from a remote peer and cleaning up\r\n     * the peer connection.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        if (this._peerConnection) {\r\n            this._peerConnection.terminate();\r\n        }\r\n\r\n        this._onSessionTerminate();\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\r\n     * dependencies of {@code JingleSessionPC}.\r\n     *\r\n     * @private\r\n     * @returns {JingleSessionPC}\r\n     */\r\n    _createPeerConnection() {\r\n        /**\r\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\r\n         * object, which may not be accessible from the caller.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const configStub = {};\r\n\r\n        /**\r\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\r\n         * passed through, which also has the jingle plugin initialized on it.\r\n         * This connection object is used to signal out peer connection updates\r\n         * via iqs, and those updates need to be piped back out to the remote\r\n         * peer.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const connectionStub = {\r\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\r\n            // spot has no signalling it will not be in a meeting where this is used.\r\n            connected: true,\r\n            jingle: {\r\n                terminate: () => { /** no-op */ }\r\n            },\r\n            sendIQ: this._onSendMessage,\r\n\r\n            // Returns empty function, because it does not add any listeners for real\r\n            // eslint-disable-next-line no-empty-function\r\n            addEventListener: () => () => { }\r\n        };\r\n\r\n        /**\r\n         * {@code JingleSessionPC} can take in a custom ice configuration,\r\n         * depending on the peer connection type, peer-to-peer or other.\r\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\r\n         * connection so the ice configuration is hard-coded with defaults.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const iceConfigStub = {\r\n            iceServers: DEFAULT_STUN_SERVERS,\r\n            ...this._options.iceConfig\r\n        };\r\n\r\n        /**\r\n         * {@code JingleSessionPC} expects an instance of\r\n         * {@code JitsiConference}, which has an event emitter that is used\r\n         * to signal various connection updates that the local client should\r\n         * act upon. The conference instance is not a dependency of a proxy\r\n         * connection, but the emitted events can be relevant to the proxy\r\n         * connection so the event emitter is stubbed.\r\n         *\r\n         * @param {string} event - The constant for the event type.\r\n         * @type {Function}\r\n         * @returns {void}\r\n         */\r\n        const emitter = event => {\r\n            switch (event) {\r\n            case XMPPEvents.CONNECTION_ICE_FAILED:\r\n            case XMPPEvents.CONNECTION_FAILED:\r\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\r\n                break;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * {@link JingleSessionPC} expects an instance of\r\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\r\n         * is instantiated outside of the {@code JitsiConference}, so it must be\r\n         * stubbed to prevent errors.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const roomStub = {\r\n            addPresenceListener: () => { /** no-op */ },\r\n            connectionTimes: [],\r\n            eventEmitter: { emit: emitter },\r\n            getMediaPresenceInfo: () => {\r\n                // Errors occur if this function does not return an object\r\n\r\n                return {};\r\n            },\r\n            removePresenceListener: () => { /** no-op */ }\r\n        };\r\n\r\n        /**\r\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\r\n         * @type {Object}\r\n         */\r\n        const conferenceStub = {};\r\n\r\n        /**\r\n         * Create an instance of {@code RTC} as it is required for peer\r\n         * connection creation by {@code JingleSessionPC}. An existing instance\r\n         * of {@code RTC} from elsewhere should not be re-used because it is\r\n         * a stateful grouping of utilities.\r\n         */\r\n        this._rtc = new RTC(conferenceStub, {});\r\n\r\n        /**\r\n         * Add the remote track listener here as {@code JingleSessionPC} has\r\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\r\n         * emitter.\r\n         */\r\n        this._rtc.addListener(\r\n            RTCEvents.REMOTE_TRACK_ADDED,\r\n            this._onRemoteStream\r\n        );\r\n\r\n        const peerConnection = new JingleSessionPC(\r\n            undefined, // sid\r\n            undefined, // localJid\r\n            this._options.peerJid, // remoteJid\r\n            connectionStub, // connection\r\n            {\r\n                offerToReceiveAudio: this._options.receiveAudio,\r\n                offerToReceiveVideo: this._options.receiveVideo\r\n            }, // mediaConstraints\r\n            iceConfigStub, // iceConfig\r\n            true, // isP2P\r\n            this._options.isInitiator // isInitiator\r\n        );\r\n\r\n        /**\r\n         * An additional initialize call is necessary to properly set instance\r\n         * variable for calling.\r\n         */\r\n        peerConnection.initialize(roomStub, this._rtc, configStub);\r\n\r\n        return peerConnection;\r\n    }\r\n\r\n    /**\r\n     * Invoked when a connection related issue has been encountered.\r\n     *\r\n     * @param {string} errorType - The constant indicating the type of the error\r\n     * that occured.\r\n     * @param {string} details - Optional additional data about the error.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onError(errorType, details = '') {\r\n        this._options.onError(this._options.peerJid, errorType, details);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the peer connection has received a remote media\r\n     * stream.\r\n     *\r\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\r\n     * wrapped in {@code JitsiRemoteTrack}.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onRemoteStream(jitsiRemoteTrack) {\r\n        this._tracks.push(jitsiRemoteTrack);\r\n\r\n        this._options.onRemoteStream(jitsiRemoteTrack);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\r\n     * out to the remote peer.\r\n     *\r\n     * @param {XML} iq - The message to signal out.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSendMessage(iq) {\r\n        this._options.onSendMessage(this._options.peerJid, iq);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to an agreement to start a proxy connection.\r\n     * The passed in jingle element should contain an SDP answer to a previously\r\n     * sent SDP offer.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionAccept($jingle) {\r\n        if (!this._peerConnection) {\r\n            logger.error('Received an answer when no peer connection exists.');\r\n\r\n            return;\r\n        }\r\n\r\n        this._peerConnection.setAnswer($jingle);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to a request to start a proxy connection.\r\n     * The passed in jingle element should contain an SDP offer.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionInitiate($jingle) {\r\n        if (this._peerConnection) {\r\n            logger.error('Received an offer when an offer was already sent.');\r\n\r\n            return;\r\n        }\r\n\r\n        this._peerConnection = this._createPeerConnection();\r\n\r\n        this._peerConnection.acceptOffer(\r\n            $jingle,\r\n            () => { /** no-op */ },\r\n            () => this._onError(\r\n                this._options.peerJid,\r\n                ACTIONS.CONNECTION_ERROR,\r\n                'session initiate error'\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to a request to disconnect an active proxy\r\n     * connection. Cleans up tracks and the peer connection.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionTerminate() {\r\n        this._tracks.forEach(track => track.dispose());\r\n        this._tracks = [];\r\n\r\n        if (this._peerConnection) {\r\n            this._peerConnection.onTerminated();\r\n        }\r\n\r\n        if (this._rtc) {\r\n            this._rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_ADDED,\r\n                this._onRemoteStream\r\n            );\r\n\r\n            this._rtc.destroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to ICE candidates from the remote peer.\r\n     * The passed in jingle element should contain an ICE candidate.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTransportInfo($jingle) {\r\n        this._peerConnection.addIceCandidates($jingle);\r\n    }\r\n}\r\n","export default {\r\n    error: {\r\n        BUSY: 'busy',\r\n        ERROR: 'error',\r\n        RESOURCE_CONSTRAINT: 'resource-constraint',\r\n        SERVICE_UNAVAILABLE: 'service-unavailable'\r\n    },\r\n    mode: {\r\n        FILE: 'file',\r\n        STREAM: 'stream'\r\n    },\r\n    status: {\r\n        OFF: 'off',\r\n        ON: 'on',\r\n        PENDING: 'pending'\r\n    }\r\n};\r\n","import EventEmitter from 'events';\r\n\r\nimport browser from '../browser';\r\nimport Settings from '../settings/Settings';\r\nimport ScriptUtil from '../util/ScriptUtil';\r\n\r\nimport { CALLSTATS_SCRIPT_URL } from './constants';\r\n\r\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\r\nconst emitter = new EventEmitter();\r\nlet _initialized = false;\r\nlet api = null;\r\n\r\n/**\r\n * Loads the callstats io script.\r\n *\r\n * @returns {Promise<void>}\r\n */\r\nfunction _loadScript() {\r\n    if (browser.isReactNative()) {\r\n        return;\r\n    }\r\n\r\n    return new Promise(resolve => {\r\n        ScriptUtil.loadScript(\r\n            CALLSTATS_SCRIPT_URL,\r\n            /* async */ true,\r\n            /* prepend */ true,\r\n            /* relativeURL */ undefined,\r\n            /* loadCallback */ resolve);\r\n    });\r\n}\r\n\r\n/**\r\n * Initializes the callstats lib and registers a callback to be invoked\r\n * when there are 'preCallTestResults'.\r\n *\r\n * @typedef PrecallTestOptions\r\n * @type {Object}\r\n * @property {string} callStatsID - Callstats credentials - the id.\r\n * @property {string} callStatsSecret - Callstats credentials - the secret.\r\n * @property {string} statisticsId - The user name to use when initializing callstats.\r\n * @property {string} statisticsDisplayName - The user display name.\r\n *\r\n * @param { PrecallTestOptions} options - The init options.\r\n * @returns {Promise<void>}\r\n */\r\nfunction _initialize(options) {\r\n    return new Promise((resolve, reject) => {\r\n        const appId = options.callStatsID;\r\n        const appSecret = options.callStatsSecret;\r\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\r\n\r\n        api.initialize(appId, appSecret, userId, (status, message) => {\r\n            if (status === 'success') {\r\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\r\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\r\n                });\r\n                _initialized = true;\r\n                resolve();\r\n            } else {\r\n                reject({\r\n                    status,\r\n                    message\r\n                });\r\n            }\r\n        }, null, { disablePrecalltest: true });\r\n    });\r\n}\r\n\r\n/**\r\n * Loads the callstats script and initializes the library.\r\n *\r\n * @param {Function} onResult - The callback to be invoked when results are received.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function init(options) {\r\n    if (_initialized) {\r\n        throw new Error('Precall Test already initialized');\r\n    }\r\n\r\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\r\n\r\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\r\n        throw new Error('Callstats is disabled');\r\n    }\r\n\r\n    await _loadScript();\r\n    // eslint-disable-next-line new-cap\r\n    api = new window.callstats();\r\n\r\n    return _initialize(options);\r\n}\r\n\r\n/**\r\n * Executes a pre call test.\r\n *\r\n * @typedef PrecallTestResults\r\n * @type {Object}\r\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\r\n * @property {number} throughput  - The average throughput.\r\n * @property {number} fractionalLoss - The packet loss.\r\n * @property {number} rtt - The round trip time.\r\n * @property {string} provider - It is usually 'callstats'.\r\n *\r\n * @returns {Promise<{PrecallTestResults}>}\r\n */\r\nexport function execute() {\r\n    if (!_initialized) {\r\n        return Promise.reject('uninitialized');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\r\n            if (status === 'success') {\r\n                resolve(payload);\r\n            } else {\r\n                reject({\r\n                    status,\r\n                    payload\r\n                });\r\n            }\r\n\r\n        });\r\n\r\n        api.makePrecallTest();\r\n    });\r\n}\r\n\r\nexport default {\r\n    init,\r\n    execute\r\n};\r\n","const AuthUtil = {\r\n    /**\r\n     * Creates the URL pointing to JWT token authentication service. It is\r\n     * formatted from the 'urlPattern' argument which can contain the following\r\n     * constants:\r\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\r\n     * argument to this method.\r\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\r\n     * the role upgrade scenario, where user connects from anonymous domain and\r\n     * then gets upgraded to the moderator by logging-in from the popup window.\r\n     *\r\n     * @param urlPattern a URL pattern pointing to the login service\r\n     * @param roomName the name of the conference room for which the user will\r\n     * be authenticated\r\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\r\n     * upgrade scenario, where the user logs-in from the popup window in order\r\n     * to have the moderator rights granted\r\n     *\r\n     * @returns {string|null} the URL pointing to JWT login service or\r\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\r\n     * constructed.\r\n     */\r\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\r\n        const url = urlPattern;\r\n\r\n        if (typeof url !== 'string') {\r\n            return null;\r\n        }\r\n\r\n        return url.replace('{room}', roomName)\r\n            .replace('{roleUpgrade}', roleUpgrade === true);\r\n    }\r\n};\r\n\r\nmodule.exports = AuthUtil;\r\n","/* global\r\n    __filename\r\n*/\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport { createAudioContext } from './WebAudioUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\r\n * MediaStream.\r\n */\r\nexport default class AudioMixer {\r\n    /**\r\n     * Create AudioMixer instance.\r\n     */\r\n    constructor() {\r\n        this._started = false;\r\n        this._streamsToMix = [];\r\n        this._streamMSSArray = [];\r\n    }\r\n\r\n    /**\r\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\r\n     *\r\n     * @param {MediaStream} stream - MediaStream to be mixed.\r\n     */\r\n    addMediaStream(stream) {\r\n        if (!stream.getAudioTracks()) {\r\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\r\n        }\r\n\r\n        this._streamsToMix.push(stream);\r\n    }\r\n\r\n    /**\r\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\r\n     * it; the resulting mixed MediaStream is returned.\r\n     *\r\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\r\n     * is added.\r\n     */\r\n    start() {\r\n        // If the mixer was already started just return the existing mixed stream.\r\n        if (this._started) {\r\n            return this._mixedMSD.stream;\r\n        }\r\n\r\n        this._audioContext = createAudioContext();\r\n\r\n        if (!this._streamsToMix.length) {\r\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\r\n\r\n            return null;\r\n        }\r\n\r\n        this._started = true;\r\n\r\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\r\n\r\n        for (const stream of this._streamsToMix) {\r\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\r\n\r\n            streamMSS.connect(this._mixedMSD);\r\n\r\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\r\n            this._streamMSSArray.push(streamMSS);\r\n        }\r\n\r\n        return this._mixedMSD.stream;\r\n    }\r\n\r\n    /**\r\n     * Disconnect MediaStreamAudioSourceNode and clear references.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._started = false;\r\n        this._streamsToMix = [];\r\n\r\n        // Clean up created MediaStreamAudioSourceNode.\r\n        for (const streamMSS of this._streamMSSArray) {\r\n            streamMSS.disconnect();\r\n        }\r\n\r\n        this._streamMSSArray = [];\r\n\r\n        if (this._audioContext) {\r\n            this._audioContext = undefined;\r\n        }\r\n    }\r\n}\r\n","/* Copyright @ 2015 - Present, 8x8 Inc\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport transform from 'sdp-transform';\r\n\r\n/**\r\n * Rewrites the source information in the way sdp-transform expects.\r\n * Source information is split into multiple ssrc objects each containing\r\n * an id, attribute and value.\r\n * @param {Object} media - media description to be modified.\r\n * @returns {void}\r\n */\r\nconst write = function(session, opts) {\r\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\r\n        session.media.forEach(mLine => {\r\n            if (mLine.sources && mLine.sources.length) {\r\n                mLine.ssrcs = [];\r\n                mLine.sources.forEach(source => {\r\n                    Object.keys(source).forEach(attribute => {\r\n                        if (attribute === 'id') {\r\n                            return;\r\n                        }\r\n                        mLine.ssrcs.push({\r\n                            id: source.id,\r\n                            attribute,\r\n                            value: source[attribute]\r\n                        });\r\n                    });\r\n                });\r\n                delete mLine.sources;\r\n            }\r\n\r\n            // join ssrcs in ssrc groups\r\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\r\n                mLine.ssrcGroups.forEach(ssrcGroup => {\r\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\r\n                    && Array.isArray(ssrcGroup.ssrcs)) {\r\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return transform.write(session, opts);\r\n};\r\n\r\n/**\r\n * Rewrites the source information that we get from sdp-transform.\r\n * All the ssrc lines with different attributes that belong to the\r\n * same ssrc are grouped into a single soure object with multiple key value pairs.\r\n * @param {Object} media - media description to be modified.\r\n * @returns {void}\r\n */\r\nconst parse = function(sdp) {\r\n    const session = transform.parse(sdp);\r\n\r\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\r\n        session.media.forEach(mLine => {\r\n            // group sources attributes by ssrc\r\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\r\n                mLine.sources = [];\r\n                mLine.ssrcs.forEach(ssrc => {\r\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\r\n\r\n                    if (found > -1) {\r\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\r\n                    } else {\r\n                        const src = { id: ssrc.id };\r\n\r\n                        src[ssrc.attribute] = ssrc.value;\r\n                        mLine.sources.push(src);\r\n                    }\r\n                });\r\n                delete mLine.ssrcs;\r\n            }\r\n\r\n            // split ssrcs in ssrc groups\r\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\r\n                mLine.ssrcGroups.forEach(ssrcGroup => {\r\n                    if (typeof ssrcGroup.ssrcs === 'string') {\r\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return session;\r\n};\r\n\r\nexport default {\r\n    write,\r\n    parse\r\n};\r\n","/* Copyright @ 2015 - Present, 8x8 Inc\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport clonedeep from 'lodash.clonedeep';\r\nimport transform from './transform.js';\r\n\r\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\r\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\r\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\r\n\r\n/**\r\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\r\n * to the m-line.\r\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\r\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\r\n * the m-line.\r\n * @param {Object} sourceGroups - inverted source-group map.\r\n * @param {Array<Object>} sourceList - array containing all the sources.\r\n */\r\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\r\n    if (!mLine || !simGroup) {\r\n        return;\r\n    }\r\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\r\n\r\n    simGroup.ssrcs.forEach(src => {\r\n        mLine.sources.push(findSourcebyId(src));\r\n\r\n        // find the related FID group member for this ssrc.\r\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\r\n\r\n        if (relatedFidGroup) {\r\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\r\n\r\n            mLine.sources.push(findSourcebyId(relatedSsrc));\r\n            mLine.ssrcGroups.push(relatedFidGroup);\r\n        }\r\n    });\r\n\r\n    // Add the SIM group last.\r\n    mLine.ssrcGroups.push(simGroup);\r\n}\r\n\r\n/**\r\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\r\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\r\n * group and the other ssrcs from the related FID groups are added to the same\r\n * m-line since they all belong to the same remote source. Since the ssrcs are\r\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\r\n * if not, just add the FID group.\r\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\r\n * @param {Object} ssrc - the primary ssrc.\r\n * @param {Object} sourceGroups - inverted source-group map.\r\n * @param {Array<Object>} sourceList - array containing all the sources.\r\n * @returns {void}\r\n */\r\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\r\n    if (!mLine || !ssrc) {\r\n        return;\r\n    }\r\n    mLine.sources = [];\r\n    mLine.ssrcGroups = [];\r\n\r\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\r\n    if (!sourceGroups[ssrc.id]) {\r\n        mLine.sources.push(ssrc);\r\n        mLine.msid = ssrc.msid;\r\n\r\n        return;\r\n    }\r\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\r\n\r\n    // Find the SIM and FID groups that this ssrc belongs to.\r\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\r\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\r\n\r\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\r\n    if (simGroup) {\r\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\r\n    } else if (fidGroup) {\r\n        // check if the other ssrc from this FID group is part of a SIM group\r\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\r\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\r\n\r\n        if (simGroup2) {\r\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\r\n        } else {\r\n            // Add the FID group ssrcs.\r\n            fidGroup.ssrcs.forEach(src => {\r\n                mLine.sources.push(findSourcebyId(src));\r\n            });\r\n            mLine.ssrcGroups.push(fidGroup);\r\n        }\r\n    }\r\n\r\n    // Set the msid for the media description using the msid attribute of the ssrcs.\r\n    mLine.msid = mLine.sources[0].msid;\r\n}\r\n\r\n/**\r\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\r\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\r\n * so we also check if mline for that ssrc exists.\r\n * For example:\r\n * If the following ssrcs are in a SIM group,\r\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\r\n *        <source ssrc=\\\"1806330949\\\"/>\r\n *        <source ssrc=\\\"4173145196\\\"/>\r\n *        <source ssrc=\\\"2002632207\\\"/>\r\n * </ssrc-group>\r\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\r\n * @param {Object} ssrc - ssrc to check.\r\n * @param {Object} sourceGroups - inverted source-group map.\r\n * @param {Array<Object>} mlines - mlines in the description\r\n\r\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\r\n * exists, returns false otherwise.\r\n */\r\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\r\n    const findMatchingMline = mline => {\r\n        if (mline.sources) {\r\n            return mline.sources.some(source => source.id === ssrc.id);\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    if (!mlines.find(findMatchingMline)) {\r\n        // check if this ssrc is member of a SIM group. If so, check if there\r\n        // is a matching m-line for the primary ssrc of the SIM group.\r\n        if (!sourceGroups[ssrc.id]) {\r\n            return false;\r\n        }\r\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\r\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\r\n\r\n        if (simGroup) {\r\n            return mlines.some(mline => mline.sources\r\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\r\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\r\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\r\n\r\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\r\n\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Create an inverted sourceGroup map to put all the grouped ssrcs\r\n * in the same m-line.\r\n * @param {Array<Object>} sourceGroups\r\n * @returns {Object} - An inverted sourceGroup map.\r\n */\r\nfunction createSourceGroupMap(sourceGroups) {\r\n    const ssrc2group = {};\r\n\r\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\r\n        return ssrc2group;\r\n    }\r\n    sourceGroups.forEach(group => {\r\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\r\n            group.ssrcs.forEach(ssrc => {\r\n                if (typeof ssrc2group[ssrc] === 'undefined') {\r\n                    ssrc2group[ssrc] = [];\r\n                }\r\n                ssrc2group[ssrc].push(group);\r\n            });\r\n        }\r\n    });\r\n\r\n    return ssrc2group;\r\n}\r\n\r\n/**\r\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\r\n * vice versa.\r\n */\r\nexport class Interop {\r\n    /**\r\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\r\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\r\n     * @returns RTCSessionDescription - The transformed session description.\r\n     */\r\n    toPlanB(description) {\r\n        if (!description || typeof description.sdp !== 'string') {\r\n            console.warn('An empty description was passed as an argument.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Objectify the SDP for easier manipulation.\r\n        const session = transform.parse(description.sdp);\r\n\r\n        // If the SDP contains no media, there's nothing to transform.\r\n        if (!session.media || !session.media.length) {\r\n            console.warn('The description has no media.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Make sure this is a unified plan sdp\r\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\r\n            console.warn('The description does not look like unified plan sdp');\r\n\r\n            return description;\r\n        }\r\n\r\n        const media = {};\r\n        const sessionMedia = session.media;\r\n\r\n        session.media = [];\r\n        sessionMedia.forEach(mLine => {\r\n            const type = mLine.type;\r\n\r\n            if (type === 'application') {\r\n                mLine.mid = 'data';\r\n                media[mLine.mid] = mLine;\r\n\r\n                return;\r\n            }\r\n            if (typeof media[type] === 'undefined') {\r\n                const bLine = clonedeep(mLine);\r\n\r\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\r\n                if (bLine.sources && Array.isArray(bLine.sources)) {\r\n                    bLine.sources.forEach(source => {\r\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\r\n                    });\r\n                }\r\n\r\n                // Do not signal the FID groups if there is no msid attribute present\r\n                // on the sources as sesison-accept with this source info will fail strophe\r\n                // validation and the session will not be established. This behavior is seen\r\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\r\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\r\n                // this case.\r\n                if (!bLine.ssrcGroups || !mLine.msid) {\r\n                    bLine.ssrcGroups = [];\r\n                }\r\n                delete bLine.msid;\r\n                bLine.mid = type;\r\n                media[type] = bLine;\r\n            } else if (mLine.msid) {\r\n                // Add sources and source-groups to the existing m-line of the same media type.\r\n                if (mLine.sources && Array.isArray(mLine.sources)) {\r\n                    media[type].sources = media[type].sources.concat(mLine.sources);\r\n                }\r\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\r\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\r\n                }\r\n            }\r\n        });\r\n        session.media = Object.values(media);\r\n\r\n        // Bundle the media only if it is active.\r\n        const bundle = [];\r\n\r\n        Object.values(media).forEach(mline => {\r\n            if (mline.direction !== 'inactive') {\r\n                bundle.push(mline.mid);\r\n            }\r\n        });\r\n\r\n        // We regenerate the BUNDLE group with the new mids.\r\n        session.groups.forEach(group => {\r\n            if (group.type === 'BUNDLE') {\r\n                group.mids = bundle.join(' ');\r\n            }\r\n        });\r\n\r\n        // msid semantic\r\n        session.msidSemantic = {\r\n            semantic: 'WMS',\r\n            token: '*'\r\n        };\r\n        const resStr = transform.write(session);\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: resStr\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\r\n     * @param {RTCSessionDescription} description - The description in plan-b format.\r\n     * @param {RTCSessionDescription} current - The current description set on\r\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\r\n     * remoteDescription on the RTCPeerConnection object.\r\n     * @returns RTCSessionDescription - The transformed session description.\r\n     */\r\n    toUnifiedPlan(description, current = null) {\r\n        if (!description || typeof description.sdp !== 'string') {\r\n            console.warn('An empty description was passed as an argument.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Objectify the SDP for easier manipulation.\r\n        const session = transform.parse(description.sdp);\r\n\r\n        // If the SDP contains no media, there's nothing to transform.\r\n        if (!session.media || !session.media.length) {\r\n            console.warn('The description has no media.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Make sure this is a plan-b sdp.\r\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\r\n            console.warn('The description does not look like plan-b');\r\n\r\n            return description;\r\n        }\r\n        const currentDesc = current ? transform.parse(current.sdp) : null;\r\n        const media = {};\r\n\r\n        session.media.forEach(mLine => {\r\n            const type = mLine.type;\r\n\r\n            if (type === 'application') {\r\n                if (!currentDesc || !currentDesc.media) {\r\n                    const newMline = clonedeep(mLine);\r\n\r\n                    newMline.mid = Object.keys(media).length.toString();\r\n                    media[mLine.mid] = newMline;\r\n\r\n                    return;\r\n                }\r\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\r\n\r\n                if (mLineForData) {\r\n                    currentDesc.media[mLineForData] = mLine;\r\n                    currentDesc.media[mLineForData].mid = mLineForData;\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\r\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\r\n\r\n            if (!mLine.sources) {\r\n                return;\r\n            }\r\n            mLine.sources.forEach((ssrc, idx) => {\r\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\r\n                // These ssrcs do not have the \"msid\" attribute set.\r\n                if (!ssrc.msid) {\r\n                    return;\r\n                }\r\n\r\n                // If there is no description set on the peerconnection, create new m-lines.\r\n                if (!currentDesc || !currentDesc.media) {\r\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\r\n                        return;\r\n                    }\r\n                    const newMline = clonedeep(mLine);\r\n\r\n                    newMline.mid = Object.keys(media).length.toString();\r\n                    newMline.direction = idx\r\n                        ? 'sendonly'\r\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\r\n                    newMline.bundleOnly = undefined;\r\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\r\n                    media[newMline.mid] = newMline;\r\n\r\n                    return;\r\n                }\r\n\r\n                // Create and append the m-lines to the existing description.\r\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\r\n                    return;\r\n                }\r\n\r\n                // check if there is a m-line that is inactive and is of the same media type\r\n                const inactiveMid = currentDesc.media\r\n                    .findIndex(cmLine => cmLine.direction\r\n                        && cmLine.direction === 'inactive'\r\n                        && cmLine.type === type);\r\n\r\n                if (inactiveMid > -1) {\r\n                    currentDesc.media[inactiveMid].direction = 'sendonly';\r\n                    addSourcesToMline(currentDesc.media[inactiveMid], ssrc, ssrc2group, mLine.sources);\r\n                } else {\r\n                    const newMline = clonedeep(mLine);\r\n\r\n                    newMline.mid = currentDesc.media.length.toString();\r\n                    newMline.direction = 'sendonly';\r\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\r\n                    currentDesc.media.push(newMline);\r\n                }\r\n            });\r\n        });\r\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\r\n        const mids = [];\r\n\r\n        session.media.forEach(mLine => {\r\n            mids.push(mLine.mid);\r\n        });\r\n\r\n        // We regenerate the BUNDLE group (since we regenerated the mids)\r\n        session.groups.forEach(group => {\r\n            if (group.type === 'BUNDLE') {\r\n                group.mids = mids.join(' ');\r\n            }\r\n        });\r\n\r\n        // msid semantic\r\n        session.msidSemantic = {\r\n            semantic: 'WMS',\r\n            token: '*'\r\n        };\r\n\r\n        // Increment the session version every time.\r\n        session.origin.sessionVersion++;\r\n        const resultSdp = transform.write(session);\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: resultSdp\r\n        });\r\n    }\r\n}\r\n","/**\r\n * Enumeration of the media direction types.\r\n */\r\n export const MediaDirection =  {\r\n    /**\r\n     * Media is send and receive is suspended.\r\n     */\r\n    INACTIVE : 'inactive',\r\n\r\n    /**\r\n     * Media is only received from remote peer.\r\n     */\r\n    RECVONLY : 'recvonly',\r\n\r\n    /**\r\n     * Media is only sent to the remote peer.\r\n     */\r\n    SENDONLY : 'sendonly',\r\n\r\n    /**\r\n     * Media is sent and received.\r\n     */\r\n    SENDRECV : 'sendrecv'\r\n};","import { MediaDirection } from '../../service/RTC/MediaDirection';\r\nimport { MediaType } from '../../service/RTC/MediaType';\r\n\r\nimport * as transform from 'sdp-transform';\r\n\r\nconst DEFAULT_NUM_OF_LAYERS = 3;\r\n\r\ninterface Description {\r\n    type: RTCSdpType;\r\n    sdp: string;\r\n}\r\n\r\ninterface Options {\r\n    numOfLayers?: number\r\n}\r\n\r\n/**\r\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\r\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\r\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\r\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\r\n * to a given endpoint.\r\n */\r\nexport default class SdpSimulcast {\r\n    _options: Options;\r\n    _ssrcCache: Map<string, Array<number>>;\r\n\r\n    /**\r\n     * Creates a new instance.\r\n     *\r\n     * @param options\r\n     */\r\n    constructor(options: Options) {\r\n        this._options = options;\r\n        this._ssrcCache = new Map();\r\n\r\n        if (!this._options.numOfLayers) {\r\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the given media description using the SSRCs that were cached for the mid associated\r\n     * with the media description and returns the modified media description.\r\n     *\r\n     * @param mLine\r\n     * @returns\r\n     */\r\n     _fillSsrcsFromCache(mLine) : any {\r\n        const mid = mLine.mid;\r\n        const cachedSsrcs = this._ssrcCache.get(mid);\r\n        const newSsrcs = this._parseSimLayers(mLine);\r\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\r\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\r\n\r\n        mLine.ssrcs = [];\r\n        mLine.ssrcGroups = [];\r\n\r\n        for (const ssrc of cachedSsrcs) {\r\n            mLine.ssrcs.push({\r\n                id: ssrc,\r\n                attribute: 'msid',\r\n                value: newMsid\r\n            });\r\n            mLine.ssrcs.push({\r\n                id: ssrc,\r\n                attribute: 'cname',\r\n                value: newCname\r\n            });\r\n        }\r\n\r\n        mLine.ssrcGroups.push({\r\n            semantics: 'SIM',\r\n            ssrcs: cachedSsrcs.join(' ')\r\n        });\r\n\r\n        return mLine;\r\n    }\r\n\r\n    /**\r\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\r\n     * the given media description and returns the modified media description.\r\n     *\r\n     * @param mLine\r\n     * @param primarySsrc\r\n     * @returns\r\n     */\r\n    _generateNewSsrcsForSimulcast(mLine, primarySsrc: number) : any {\r\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\r\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\r\n        const addAssociatedAttributes = (mLine, ssrc: number) => {\r\n            mLine.ssrcs.push({\r\n                id: ssrc,\r\n                attribute: 'cname',\r\n                value: cname\r\n            });\r\n            mLine.ssrcs.push({\r\n                id: ssrc,\r\n                attribute: 'msid',\r\n                value: msid\r\n            });\r\n        }\r\n\r\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\r\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\r\n        // a=ssrc lines using the msid values from the a=msid line.\r\n        if (!msid) {\r\n            msid = mLine.msid;\r\n            const primarySsrcs = mLine.ssrcs;\r\n\r\n            primarySsrcs.forEach(ssrc => {\r\n                mLine.ssrcs.push({\r\n                    id: ssrc.id,\r\n                    attribute: 'msid',\r\n                    value: msid\r\n                });\r\n            })\r\n        }\r\n\r\n        // Generate SIM layers.\r\n        const simSsrcs = [];\r\n\r\n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\r\n            const simSsrc = this._generateSsrc();\r\n\r\n            addAssociatedAttributes(mLine, simSsrc);\r\n            simSsrcs.push(simSsrc);\r\n        }\r\n\r\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\r\n        mLine.ssrcGroups.push({\r\n            semantics: 'SIM',\r\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\r\n        });\r\n\r\n        return mLine;\r\n    }\r\n\r\n    /**\r\n     * Returns a random number to be used for the SSRC.\r\n     *\r\n     * @returns\r\n     */\r\n    _generateSsrc() : number {\r\n        const max = 0xffffffff;\r\n\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n\r\n    /**\r\n     * Returns the requested attribute value for a SSRC from a given media description.\r\n     *\r\n     * @param mLine\r\n     * @param ssrc\r\n     * @param attributeName\r\n     * @returns\r\n     */\r\n    _getSsrcAttribute(mLine, ssrc: number, attributeName: string) : string | undefined {\r\n        return mLine.ssrcs?.find(\r\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\r\n            && ssrcInfo.attribute === attributeName)?.value;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\r\n     *\r\n     * @param mLine\r\n     * @returns\r\n     */\r\n    _parseSimLayers(mLine) : Array<number> | null {\r\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\r\n\r\n        if (simGroup) {\r\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\r\n        }\r\n\r\n        if (mLine.ssrcs?.length) {\r\n            return [ Number(mLine.ssrcs[0].id) ];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\r\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\r\n     * endpoints.\r\n     * NOTE: This needs to be called only when simulcast is enabled.\r\n     *\r\n     * @param description\r\n     * @returns\r\n     */\r\n    mungeLocalDescription(description: Description) : Description {\r\n        if (!description || !description.sdp) {\r\n            return description;\r\n        }\r\n        const session = transform.parse(description.sdp);\r\n\r\n        for (let media of session.media) {\r\n            // Ignore recvonly and inactive transceivers created for remote sources.\r\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\r\n                continue;\r\n            }\r\n\r\n            // Ignore audio m-lines.\r\n            if (media.type !== MediaType.VIDEO) {\r\n                continue;\r\n            }\r\n            const mid = media.mid;\r\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\r\n            const numGroups = media.ssrcGroups?.length ? media.ssrcGroups?.length : 0;\r\n            let primarySsrc: number;\r\n\r\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\r\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\r\n                continue;\r\n            }\r\n            if (numSsrcs.size === 1) {\r\n                primarySsrc = Number(media.ssrcs[0]?.id);\r\n            } else {\r\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\r\n\r\n                if (fidGroup) {\r\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\r\n                }\r\n            }\r\n\r\n            if (this._ssrcCache.has(mid)) {\r\n                media = this._fillSsrcsFromCache(media);\r\n            } else {\r\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\r\n                const simulcastSsrcs = this._parseSimLayers(media);\r\n\r\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\r\n                this._ssrcCache.set(mid, simulcastSsrcs);\r\n            }\r\n        }\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: transform.write(session)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Munges the given media description by removing the SSRCs and related FID groups for the higher layer streams.\r\n     *\r\n     * @param description\r\n     * @returns\r\n     */\r\n    mungeRemoteDescription(description: Description) : Description {\r\n        if (!description || !description.sdp) {\r\n            return description;\r\n        }\r\n\r\n        const session = transform.parse(description.sdp);\r\n\r\n        for (const media of session.media) {\r\n            if (media.type !== MediaType.VIDEO) {\r\n                continue;\r\n            }\r\n\r\n            if (media.direction !== MediaDirection.SENDONLY) {\r\n                continue;\r\n            }\r\n\r\n            // Ignore m-lines that do not have any SSRCs or SSRC groups. These are the ones associated with remote\r\n            // sources that have left the call. These will be recycled when a new remote source joins the call.\r\n            if (!media.ssrcGroups?.length || !media?.ssrcs.length) {\r\n                continue;\r\n            }\r\n\r\n            // Cache the SSRCs and the source groups.\r\n            const mungedSsrcs = new Set(media.ssrcs.slice());\r\n            const mungedSsrcGroups = new Set(media.ssrcGroups.slice());\r\n            const fidGroups = media.ssrcGroups.filter(group => group.semantics === 'FID');\r\n            const simGroup = media.ssrcGroups.find(group => group.semantics === 'SIM');\r\n            const primarySsrc = simGroup?.ssrcs.split(' ')[0];;\r\n\r\n            // When simulcast and RTX are both enabled.\r\n            if (fidGroups.length && simGroup) {\r\n                const fidGroup = fidGroups.find(group => group.ssrcs.includes(primarySsrc));\r\n                const secondarySsrc = fidGroup.ssrcs.split(' ')[1];\r\n\r\n                for (const ssrcGroup of media.ssrcGroups) {\r\n                    if (ssrcGroup !== fidGroup) {\r\n                        mungedSsrcGroups.delete(ssrcGroup);\r\n                    }\r\n                }\r\n                for (const ssrc of media.ssrcs) {\r\n                    if (ssrc.id.toString() !== primarySsrc\r\n                        && ssrc.id.toString() !== secondarySsrc) {\r\n                        mungedSsrcs.delete(ssrc);\r\n                    }\r\n                }\r\n\r\n            // When simulcast is enabled but RTX is disabled.\r\n            } else if (simGroup) {\r\n                mungedSsrcGroups.delete(simGroup);\r\n\r\n                for (const ssrc of media.ssrcs) {\r\n                    if (ssrc.id.toString() !== primarySsrc) {\r\n                        mungedSsrcs.delete(ssrc);\r\n                    }\r\n                }\r\n            }\r\n\r\n            media.ssrcs = Array.from(mungedSsrcs);\r\n            media.ssrcGroups = Array.from(mungedSsrcGroups);\r\n        }\r\n\r\n        return new RTCSessionDescription ({\r\n            type: description.type,\r\n            sdp: transform.write(session)\r\n        });\r\n    }\r\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\r\n// require the crypto API and do not support built-in fallback to lower quality random number\r\n// generators (like Math.random()).\r\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\r\n// find the complete implementation of crypto (msCrypto) on IE11.\r\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\r\nvar rnds8 = new Uint8Array(16);\r\nexport default function rng() {\r\n  if (!getRandomValues) {\r\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\r\n  }\r\n\r\n  return getRandomValues(rnds8);\r\n}","/**\r\n * Convert array of 16 byte values to UUID string format of the form:\r\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\r\n */\r\nvar byteToHex = [];\r\n\r\nfor (var i = 0; i < 256; ++i) {\r\n  byteToHex.push((i + 0x100).toString(16).substr(1));\r\n}\r\n\r\nfunction bytesToUuid(buf, offset) {\r\n  var i = offset || 0;\r\n  var bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\r\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\r\n\r\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\r\n}\r\n\r\nexport default bytesToUuid;","import rng from './rng.js';\r\nimport bytesToUuid from './bytesToUuid.js';\r\n\r\nfunction v4(options, buf, offset) {\r\n  if (typeof options === 'string') {\r\n    buf = options === 'binary' ? new Uint8Array(16) : null;\r\n    options = null;\r\n  }\r\n\r\n  options = options || {};\r\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\r\n\r\n  rnds[6] = rnds[6] & 0x0f | 0x40;\r\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\r\n\r\n  if (buf) {\r\n    var start = offset || 0;\r\n\r\n    for (var i = 0; i < 16; ++i) {\r\n      buf[start + i] = rnds[i];\r\n    }\r\n\r\n    return buf;\r\n  }\r\n\r\n  return bytesToUuid(rnds);\r\n}\r\n\r\nexport default v4;","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\r\n// library (a.k.a. JitsiMeetJS).\r\nmodule.exports = require('./JitsiMeetJS').default;\r\n","/* global __filename */\r\n\r\nimport Logger from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport JitsiConnection from './JitsiConnection';\r\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\r\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\r\nimport JitsiMediaDevices from './JitsiMediaDevices';\r\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\r\nimport JitsiTrackError from './JitsiTrackError';\r\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\r\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\r\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\r\nimport { ParticipantConnectionStatus }\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\r\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\r\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\r\nimport ProxyConnectionService\r\n    from './modules/proxyconnection/ProxyConnectionService';\r\nimport recordingConstants from './modules/recording/recordingConstants';\r\nimport Settings from './modules/settings/Settings';\r\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\r\nimport precallTest from './modules/statistics/PrecallTest';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport AuthUtil from './modules/util/AuthUtil';\r\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\r\nimport ScriptUtil from './modules/util/ScriptUtil';\r\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\r\nimport AudioMixer from './modules/webaudio/AudioMixer';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport Resolutions from './service/RTC/Resolutions';\r\nimport * as ConnectionQualityEvents\r\n    from './service/connectivity/ConnectionQualityEvents';\r\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\r\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\r\n\r\nconst logger = Logger.getLogger(__filename);\r\n\r\n/**\r\n * The amount of time to wait until firing\r\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\r\n */\r\nconst USER_MEDIA_PERMISSION_PROMPT_TIMEOUT = 1000;\r\n\r\n/**\r\n * Gets the next lowest desirable resolution to try for a camera. If the given\r\n * resolution is already the lowest acceptable resolution, returns {@code null}.\r\n *\r\n * @param resolution the current resolution\r\n * @return the next lowest resolution from the given one, or {@code null} if it\r\n * is already the lowest acceptable resolution.\r\n */\r\nfunction getLowerResolution(resolution) {\r\n    if (!Resolutions[resolution]) {\r\n        return null;\r\n    }\r\n    const order = Resolutions[resolution].order;\r\n    let res = null;\r\n    let resName = null;\r\n\r\n    Object.keys(Resolutions).forEach(r => {\r\n        const value = Resolutions[r];\r\n\r\n        if (!res || (res.order < value.order && value.order < order)) {\r\n            resName = r;\r\n            res = value;\r\n        }\r\n    });\r\n\r\n    if (resName === resolution) {\r\n        resName = null;\r\n    }\r\n\r\n    return resName;\r\n}\r\n\r\n/**\r\n * Extracts from an 'options' objects with a specific format (TODO what IS the\r\n * format?) the attributes which are to be logged in analytics events.\r\n *\r\n * @param options gum options (???)\r\n * @returns {*} the attributes to attach to analytics events.\r\n */\r\nfunction getAnalyticsAttributesFromOptions(options) {\r\n    const attributes = {\r\n        'audio_requested':\r\n            options.devices.includes('audio'),\r\n        'video_requested':\r\n            options.devices.includes('video'),\r\n        'screen_sharing_requested':\r\n            options.devices.includes('desktop')\r\n    };\r\n\r\n    if (attributes.video_requested) {\r\n        attributes.resolution = options.resolution;\r\n    }\r\n\r\n    return attributes;\r\n}\r\n\r\n/**\r\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\r\n * this module, it's also a global (i.e. attached to {@code window}) namespace\r\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\r\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\r\n * automatically be attached to {@code window} by webpack. Unfortunately,\r\n * webpack's source code does not check whether the global variable has already\r\n * been assigned and overwrites it. Which is OK for the module\r\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\r\n * because it may already contain the values of other projects in the Jitsi Meet\r\n * family. The solution offered here works around webpack by merging all\r\n * existing values of the namespace {@code JitsiMeetJS} into the module\r\n * {@code JitsiMeetJS}.\r\n *\r\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\r\n * exported and may be attached to {@code window} by webpack later on).\r\n * @private\r\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\r\n * value of the namespace {@code JitsiMeetJS} (if any).\r\n */\r\nfunction _mergeNamespaceAndModule(module) {\r\n    return (\r\n        typeof window.JitsiMeetJS === 'object'\r\n            ? Object.assign({}, window.JitsiMeetJS, module)\r\n            : module);\r\n}\r\n\r\n/**\r\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\r\n */\r\nexport default _mergeNamespaceAndModule({\r\n\r\n    version: '{#COMMIT_HASH#}',\r\n\r\n    JitsiConnection,\r\n\r\n    /**\r\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\r\n     * local Jitsi participant without going through a Jitsi conference. It is\r\n     * currently used for room integration development, specifically wireless\r\n     * screensharing. Its API is experimental and will likely change; usage of\r\n     * it is advised against.\r\n     */\r\n    ProxyConnectionService,\r\n\r\n    constants: {\r\n        participantConnectionStatus: ParticipantConnectionStatus,\r\n        recording: recordingConstants,\r\n        sipVideoGW: VideoSIPGWConstants,\r\n        transcriptionStatus: JitsiTranscriptionStatus\r\n    },\r\n    events: {\r\n        conference: JitsiConferenceEvents,\r\n        connection: JitsiConnectionEvents,\r\n        detection: DetectionEvents,\r\n        track: JitsiTrackEvents,\r\n        mediaDevices: JitsiMediaDevicesEvents,\r\n        connectionQuality: ConnectionQualityEvents,\r\n        e2eping: E2ePingEvents\r\n    },\r\n    errors: {\r\n        conference: JitsiConferenceErrors,\r\n        connection: JitsiConnectionErrors,\r\n        track: JitsiTrackErrors\r\n    },\r\n    errorTypes: {\r\n        JitsiTrackError\r\n    },\r\n    logLevels: Logger.levels,\r\n    mediaDevices: JitsiMediaDevices,\r\n    analytics: Statistics.analytics,\r\n    init(options = {}) {\r\n        Settings.init(options.externalStorage);\r\n        Statistics.init(options);\r\n\r\n        // Initialize global window.connectionTimes\r\n        // FIXME do not use 'window'\r\n        if (!window.connectionTimes) {\r\n            window.connectionTimes = {};\r\n        }\r\n\r\n        if (options.enableAnalyticsLogging !== true) {\r\n            logger.warn('Analytics disabled, disposing.');\r\n            this.analytics.dispose();\r\n        }\r\n\r\n        if (options.enableWindowOnErrorHandler) {\r\n            GlobalOnErrorHandler.addHandler(\r\n                this.getGlobalOnErrorHandler.bind(this));\r\n        }\r\n\r\n        // Log deployment-specific information, if available. Defined outside\r\n        // the application by individual deployments\r\n        const aprops = options.deploymentInfo;\r\n\r\n        if (aprops && Object.keys(aprops).length > 0) {\r\n            const logObject = {};\r\n\r\n            for (const attr in aprops) {\r\n                if (aprops.hasOwnProperty(attr)) {\r\n                    logObject[attr] = aprops[attr];\r\n                }\r\n            }\r\n\r\n            logObject.id = 'deployment_info';\r\n            Statistics.sendLog(JSON.stringify(logObject));\r\n        }\r\n\r\n        if (this.version) {\r\n            const logObject = {\r\n                id: 'component_version',\r\n                component: 'lib-jitsi-meet',\r\n                version: this.version\r\n            };\r\n\r\n            Statistics.sendLog(JSON.stringify(logObject));\r\n        }\r\n\r\n        return RTC.init(options);\r\n    },\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isDesktopSharingEnabled() {\r\n        return RTC.isDesktopSharingEnabled();\r\n    },\r\n\r\n    /**\r\n     * Returns whether the current execution environment supports WebRTC (for\r\n     * use within this library).\r\n     *\r\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\r\n     * execution environment (for use within this library); {@code false},\r\n     * otherwise.\r\n     */\r\n    isWebRtcSupported() {\r\n        return RTC.isWebRtcSupported();\r\n    },\r\n\r\n    setLogLevel(level) {\r\n        Logger.setLogLevel(level);\r\n    },\r\n\r\n    /**\r\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\r\n     *\r\n     * @param {Logger.levels} level the logging level to be set\r\n     * @param {string} id the logger id to which new logging level will be set.\r\n     * Usually it's the name of the JavaScript source file including the path\r\n     * ex. \"modules/xmpp/ChatRoom.js\"\r\n     */\r\n    setLogLevelById(level, id) {\r\n        Logger.setLogLevelById(level, id);\r\n    },\r\n\r\n    /**\r\n     * Registers new global logger transport to the library logging framework.\r\n     *\r\n     * @param globalTransport\r\n     * @see Logger.addGlobalTransport\r\n     */\r\n    addGlobalLogTransport(globalTransport) {\r\n        Logger.addGlobalTransport(globalTransport);\r\n    },\r\n\r\n    /**\r\n     * Removes global logging transport from the library logging framework.\r\n     *\r\n     * @param globalTransport\r\n     * @see Logger.removeGlobalTransport\r\n     */\r\n    removeGlobalLogTransport(globalTransport) {\r\n        Logger.removeGlobalTransport(globalTransport);\r\n    },\r\n\r\n    /**\r\n    * Sets global options which will be used by all loggers. Changing these\r\n    * works even after other loggers are created.\r\n    *\r\n    * @param options\r\n    * @see Logger.setGlobalOptions\r\n    */\r\n    setGlobalLogOptions(options) {\r\n        Logger.setGlobalOptions(options);\r\n    },\r\n\r\n    /**\r\n     * Creates the media tracks and returns them trough the callback.\r\n     *\r\n     * @param options Object with properties / settings specifying the tracks\r\n     * which should be created. should be created or some additional\r\n     * configurations about resolution for example.\r\n     * @param {Array} options.effects optional effects array for the track\r\n     * @param {Array} options.devices the devices that will be requested\r\n     * @param {string} options.resolution resolution constraints\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @param {intiger} interval - the interval (in ms) for\r\n     * checking whether the desktop sharing extension is installed or not\r\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\r\n     * createLocalTracks will wait and check on every \"interval\" ms for the\r\n     * extension. If the desktop extension is not install and checkAgain()==true\r\n     * createLocalTracks will finish with rejected Promise.\r\n     * @param {Function} listener - The listener will be called to notify the\r\n     * user of lib-jitsi-meet that createLocalTracks is starting external\r\n     * extension installation process.\r\n     * NOTE: If the inline installation process is not possible and external\r\n     * installation is enabled the listener property will be called to notify\r\n     * the start of external installation process. After that createLocalTracks\r\n     * will start to check for the extension on every interval ms until the\r\n     * plugin is installed or until checkAgain return false. If the extension\r\n     * is found createLocalTracks will try to get the desktop sharing track and\r\n     * will finish the execution. If checkAgain returns false, createLocalTracks\r\n     * will finish the execution with rejected Promise.\r\n     *\r\n     * @param {boolean} (firePermissionPromptIsShownEvent) - if event\r\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\r\n     * @param originalOptions - internal use only, to be able to store the\r\n     * originally requested options.\r\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\r\n     * that returns an array of created JitsiTracks if resolved, or a\r\n     * JitsiConferenceError if rejected.\r\n     */\r\n    createLocalTracks(\r\n            options = {}, firePermissionPromptIsShownEvent, originalOptions) {\r\n        let promiseFulfilled = false;\r\n\r\n        if (firePermissionPromptIsShownEvent === true) {\r\n            window.setTimeout(() => {\r\n                if (!promiseFulfilled) {\r\n                    JitsiMediaDevices.emitEvent(\r\n                        JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\r\n                        browser.getName());\r\n                }\r\n            }, USER_MEDIA_PERMISSION_PROMPT_TIMEOUT);\r\n        }\r\n\r\n        if (!window.connectionTimes) {\r\n            window.connectionTimes = {};\r\n        }\r\n        window.connectionTimes['obtainPermissions.start']\r\n            = window.performance.now();\r\n\r\n        return RTC.obtainAudioAndVideoPermissions(options)\r\n            .then(tracks => {\r\n                promiseFulfilled = true;\r\n\r\n                window.connectionTimes['obtainPermissions.end']\r\n                    = window.performance.now();\r\n\r\n                Statistics.sendAnalytics(\r\n                    createGetUserMediaEvent(\r\n                        'success',\r\n                        getAnalyticsAttributesFromOptions(options)));\r\n\r\n                if (!RTC.options.disableAudioLevels) {\r\n                    for (let i = 0; i < tracks.length; i++) {\r\n                        const track = tracks[i];\r\n                        const mStream = track.getOriginalStream();\r\n\r\n                        if (track.getType() === MediaType.AUDIO) {\r\n                            Statistics.startLocalStats(mStream,\r\n                                track.setAudioLevel.bind(track));\r\n                            track.addEventListener(\r\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\r\n                                () => {\r\n                                    Statistics.stopLocalStats(mStream);\r\n                                });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // set real device ids\r\n                const currentlyAvailableMediaDevices\r\n                    = RTC.getCurrentlyAvailableMediaDevices();\r\n\r\n                if (currentlyAvailableMediaDevices) {\r\n                    for (let i = 0; i < tracks.length; i++) {\r\n                        const track = tracks[i];\r\n\r\n                        track._setRealDeviceIdFromDeviceList(\r\n                            currentlyAvailableMediaDevices);\r\n                    }\r\n                }\r\n\r\n                // set the contentHint to \"detail\" for desktop tracks\r\n                // eslint-disable-next-line prefer-const\r\n                for (const track of tracks) {\r\n                    if (track.type === MediaType.VIDEO\r\n                        && track.videoType === 'desktop') {\r\n                        this.setVideoTrackContentHints(track.track, 'detail');\r\n                    }\r\n                }\r\n\r\n                return tracks;\r\n            })\r\n            .catch(error => {\r\n                promiseFulfilled = true;\r\n\r\n                if (error.name === JitsiTrackErrors.UNSUPPORTED_RESOLUTION\r\n                    && !browser.usesNewGumFlow()) {\r\n                    const oldResolution = options.resolution || '720';\r\n                    const newResolution = getLowerResolution(oldResolution);\r\n\r\n                    if (newResolution !== null) {\r\n                        options.resolution = newResolution;\r\n\r\n                        logger.debug(\r\n                            'Retry createLocalTracks with resolution',\r\n                            newResolution);\r\n\r\n                        Statistics.sendAnalytics(createGetUserMediaEvent(\r\n                            'warning',\r\n                            {\r\n                                'old_resolution': oldResolution,\r\n                                'new_resolution': newResolution,\r\n                                reason: 'unsupported resolution'\r\n                            }));\r\n\r\n                        return this.createLocalTracks(\r\n                            options,\r\n                            undefined,\r\n                            originalOptions || Object.assign({}, options));\r\n                    }\r\n\r\n                    // We tried everything. If there is a mandatory device id,\r\n                    // remove it and let gum find a device to use.\r\n                    if (originalOptions\r\n                        && error.gum.constraints\r\n                        && error.gum.constraints.video\r\n                        && error.gum.constraints.video.mandatory\r\n                        && error.gum.constraints.video.mandatory.sourceId) {\r\n                        originalOptions.cameraDeviceId = undefined;\r\n\r\n                        return this.createLocalTracks(originalOptions);\r\n                    }\r\n                }\r\n\r\n                if (error.name\r\n                        === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\r\n                    // User cancelled action is not really an error, so only\r\n                    // log it as an event to avoid having conference classified\r\n                    // as partially failed\r\n                    const logObject = {\r\n                        id: 'screensharing_user_canceled',\r\n                        message: error.message\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent(\r\n                            'warning',\r\n                            {\r\n                                reason: 'extension install user canceled'\r\n                            }));\r\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\r\n                    // logs not found devices with just application log to cs\r\n                    const logObject = {\r\n                        id: 'usermedia_missing_device',\r\n                        status: error.gum.devices\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n\r\n                    const attributes\r\n                        = getAnalyticsAttributesFromOptions(options);\r\n\r\n                    attributes.reason = 'device not found';\r\n                    attributes.devices = error.gum.devices.join('.');\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent('error', attributes));\r\n                } else {\r\n                    // Report gUM failed to the stats\r\n                    Statistics.sendGetUserMediaFailed(error);\r\n\r\n                    const attributes\r\n                        = getAnalyticsAttributesFromOptions(options);\r\n\r\n                    attributes.reason = error.name;\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent('error', attributes));\r\n                }\r\n\r\n                window.connectionTimes['obtainPermissions.end']\r\n                    = window.performance.now();\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    },\r\n\r\n    /**\r\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\r\n     * order to obtain VAD scores for individual PCM audio samples.\r\n     * @param {string} localAudioDeviceId - The target local audio device.\r\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\r\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\r\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\r\n     * longer calls, lowers values mean more calls but shorter.\r\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\r\n     * to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * i.e. (16KHz, 44.1 KHz etc.)\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @returns {Promise<TrackVADEmitter>}\r\n     */\r\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\r\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\r\n    },\r\n\r\n    /**\r\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\r\n     * user to mix multiple MediaStreams into a single one.\r\n     *\r\n     * @returns {AudioMixer}\r\n     */\r\n    createAudioMixer() {\r\n        return new AudioMixer();\r\n    },\r\n\r\n    /**\r\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\r\n     *\r\n     * @returns Promise<Object> - Object containing information about the found device.\r\n     */\r\n    getActiveAudioDevice() {\r\n        return getActiveAudioDevice();\r\n    },\r\n\r\n    /**\r\n     * Checks if its possible to enumerate available cameras/microphones.\r\n     *\r\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\r\n     * the WebRTC stack is ready, either with true if the device listing is\r\n     * available available or with false otherwise.\r\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\r\n     */\r\n    isDeviceListAvailable() {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\r\n\r\n        return this.mediaDevices.isDeviceListAvailable();\r\n    },\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     *\r\n     * @param {string} [deviceType] - type of device to change. Default is\r\n     * {@code undefined} or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\r\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\r\n\r\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\r\n    },\r\n\r\n\r\n    /**\r\n     * Checks if the current environment supports having multiple audio\r\n     * input devices in use simultaneously.\r\n     *\r\n     * @returns {boolean} True if multiple audio input devices can be used.\r\n     */\r\n    isMultipleAudioInputSupported() {\r\n        return this.mediaDevices.isMultipleAudioInputSupported();\r\n    },\r\n\r\n    /**\r\n     * Checks if local tracks can collect stats and collection is enabled.\r\n     *\r\n     * @param {boolean} True if stats are being collected for local tracks.\r\n     */\r\n    isCollectingLocalStats() {\r\n        return Statistics.audioLevelsEnabled\r\n            && LocalStatsCollector.isLocalStatsSupported();\r\n    },\r\n\r\n    /**\r\n     * Executes callback with list of media devices connected.\r\n     *\r\n     * @param {function} callback\r\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\r\n     */\r\n    enumerateDevices(callback) {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\r\n        this.mediaDevices.enumerateDevices(callback);\r\n    },\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * @returns function that can be used to be attached to window.onerror and\r\n     * if options.enableWindowOnErrorHandler is enabled returns\r\n     * the function used by the lib.\r\n     * (function(message, source, lineno, colno, error)).\r\n     */\r\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\r\n        logger.error(\r\n            `UnhandledError: ${message}`,\r\n            `Script: ${source}`,\r\n            `Line: ${lineno}`,\r\n            `Column: ${colno}`,\r\n            'StackTrace: ', error);\r\n        Statistics.reportGlobalError(error);\r\n    },\r\n\r\n    /**\r\n     * Informs lib-jitsi-meet about the current network status.\r\n     *\r\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\r\n     * otherwise.\r\n     */\r\n    setNetworkInfo({ isOnline }) {\r\n        NetworkInfo.updateNetworkInfo({ isOnline });\r\n    },\r\n\r\n    /**\r\n     * Set the contentHint on the transmitted stream track to indicate\r\n     * charaterstics in the video stream, which informs PeerConnection\r\n     * on how to encode the track (to prefer motion or individual frame detail)\r\n     * @param {MediaStreamTrack} track - the track that is transmitted\r\n     * @param {String} hint - contentHint value that needs to be set on the track\r\n     */\r\n    setVideoTrackContentHints(track, hint) {\r\n        if ('contentHint' in track) {\r\n            track.contentHint = hint;\r\n            if (track.contentHint !== hint) {\r\n                logger.debug('Invalid video track contentHint');\r\n            }\r\n        } else {\r\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\r\n        }\r\n    },\r\n\r\n    precallTest,\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Represents a hub/namespace for utility functionality which may be of\r\n     * interest to lib-jitsi-meet clients.\r\n     */\r\n    util: {\r\n        AuthUtil,\r\n        ScriptUtil,\r\n        browser\r\n    }\r\n});\r\n","/* Copyright @ 2016-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Logger = require('./Logger.js');\r\n\r\n/**\r\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\r\n * and thus can be added as global transport in order to capture all the logs.\r\n *\r\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\r\n * a message and stores them in a queue in order to batch log entries. There are\r\n * time and size limit constraints which determine how often batch entries are\r\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\r\n * will use the <tt>logStorage</tt> object given as an argument to save\r\n * the batch log entry.\r\n *\r\n * @param {Object} logStorage an object which allows to store the logs collected\r\n * @param {function(string|object[])} logStorage.storeLogs a method called when\r\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\r\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\r\n * item is an object it means that it's an aggregated message. That is a message\r\n * which is the same as the previous one and it's representation has\r\n * the following format:\r\n * {\r\n *   {string} text: 'the text of some duplicated message'\r\n *   {number} count: 3 // how many times the message appeared in a row\r\n * }\r\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\r\n * the sequence of \"A\". Which means that even if the next message \"C\" is\r\n * the same as \"A\" it will start a new aggregated message \"C\".\r\n * @param {function()} logStorage.isReady a method which should return\r\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\r\n * time storage is not ready log batches will be cached and stored on the next\r\n * occasion (flush or interval timeout).\r\n *\r\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\r\n * @param {number} options.maxEntryLength the size limit for a single log entry\r\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\r\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\r\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\r\n * storage becomes ready. Note that the \"is ready\" condition is checked every\r\n * <tt>options.storeInterval</tt> milliseconds.\r\n * @param {number} options.storeInterval how often the logs should be stored in\r\n * case <tt>maxEntryLength</tt> was not exceeded.\r\n * @param {boolean} options.stringifyObjects indicates whether or not object\r\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\r\n * message is composed. Note that objects logged on the error log level are\r\n * always stringified.\r\n *\r\n * @constructor\r\n */\r\nfunction LogCollector(logStorage, options) {\r\n    this.logStorage = logStorage;\r\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\r\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\r\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\r\n    // Bind the log method for each level to the corresponding method name\r\n    // in order to implement \"global log transport\" object.\r\n    Object.keys(Logger.levels).forEach(\r\n    function (logLevel) {\r\n        var methodName = Logger.levels[logLevel];\r\n        this[methodName] = function () {\r\n            this._log.apply(this, arguments);\r\n        }.bind(this, logLevel);\r\n    }.bind(this));\r\n    /**\r\n     * The ID of store logs interval if one is currently scheduled or\r\n     * <tt>null</tt> otherwise.\r\n     * @type {number|null}\r\n     */\r\n    this.storeLogsIntervalID = null;\r\n    /**\r\n     * The log messages that are to be batched into log entry when\r\n     * {@link LogCollector._flush} method is called.\r\n     * @type {string[]}\r\n     */\r\n    this.queue = [];\r\n    /**\r\n     * The total length of all messages currently stored in the {@link queue}.\r\n     * @type {number}\r\n     */\r\n    this.totalLen = 0;\r\n    /**\r\n     * An array used to temporarily store log batches, before the storage gets\r\n     * ready.\r\n     * @type {string[]}\r\n     */\r\n    this.outputCache = [];\r\n}\r\n\r\n/**\r\n * Method called inside of {@link formatLogMessage} in order to covert an\r\n * <tt>Object</tt> argument to string. The conversion will happen when either\r\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\r\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\r\n * returns \"[object with circular refs?]\" instead of an object if it fails.\r\n *\r\n * @param {object} someObject the <tt>object</tt> to be stringified.\r\n *\r\n * @return {string} the result of <tt>JSON.stringify</tt> or\r\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\r\n *\r\n * @protected\r\n */\r\nLogCollector.prototype.stringify = function (someObject) {\r\n    try {\r\n        return JSON.stringify(someObject);\r\n    } catch (error) {\r\n        return '[object with circular refs?]';\r\n    }\r\n};\r\n\r\n/**\r\n * Formats log entry for the given logging level and arguments passed to the\r\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\r\n * arguments have to be captured using JS built-in 'arguments' variable.\r\n *\r\n * @param {Logger.levels} logLevel provides the logging level of the message to\r\n * be logged.\r\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\r\n *\r\n * @return {string|null} a non-empty string representation of the log entry\r\n * crafted from the log arguments. If the return value is <tt>null</tt> then\r\n * the message wil be discarded by this <tt>LogCollector</tt>.\r\n *\r\n * @protected\r\n */\r\nLogCollector.prototype.formatLogMessage = function (\r\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\r\n    var msg = '';\r\n    for (var i = 1, len = arguments.length; i < len; i++) {\r\n        var arg = arguments[i];\r\n        // objects logged on error level are always converted to JSON\r\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\r\n            typeof arg === 'object') {\r\n            arg = this.stringify(arg);\r\n        }\r\n        msg += arg;\r\n        if (i !== len - 1) {\r\n            msg += ' ';\r\n        }\r\n    }\r\n    return msg.length ? msg : null;\r\n};\r\n\r\n/**\r\n * The log method bound to each of the logging levels in order to implement\r\n * \"global log transport\" object.\r\n *\r\n * @private\r\n */\r\nLogCollector.prototype._log = function() {\r\n\r\n    // var logLevel = arguments[0]; first argument is the log level\r\n    var timestamp = arguments[1];\r\n    var msg = this.formatLogMessage.apply(this, arguments);\r\n    if (msg) {\r\n        // The same as the previous message aggregation logic\r\n        var prevMessage = this.queue[this.queue.length - 1];\r\n        var prevMessageText = prevMessage && prevMessage.text;\r\n        if (prevMessageText === msg) {\r\n            prevMessage.count += 1;\r\n        } else {\r\n            this.queue.push({\r\n                text: msg,\r\n                timestamp: timestamp,\r\n                count: 1\r\n            });\r\n            this.totalLen += msg.length;\r\n        }\r\n    }\r\n\r\n    if (this.totalLen >= this.maxEntryLength) {\r\n        this._flush(true /* force */, true /* reschedule */);\r\n    }\r\n};\r\n\r\n/**\r\n * Starts periodical \"store logs\" task which will be triggered at the interval\r\n * specified in the constructor options.\r\n */\r\nLogCollector.prototype.start = function () {\r\n    this._reschedulePublishInterval();\r\n};\r\n\r\n/**\r\n * Reschedules the periodical \"store logs\" task which will store the next batch\r\n * log entry in the storage.\r\n * @private\r\n */\r\nLogCollector.prototype._reschedulePublishInterval = function () {\r\n    if (this.storeLogsIntervalID) {\r\n        window.clearTimeout(this.storeLogsIntervalID);\r\n        this.storeLogsIntervalID = null;\r\n    }\r\n    // It's actually a timeout, because it is rescheduled on every flush\r\n    this.storeLogsIntervalID = window.setTimeout(\r\n        this._flush.bind(\r\n            this, false /* do not force */, true /* reschedule */),\r\n        this.storeInterval);\r\n};\r\n\r\n/**\r\n * Call this method to flush the log entry buffer and store it in the log\r\n * storage immediately (given that the storage is ready).\r\n */\r\nLogCollector.prototype.flush = function() {\r\n    this._flush(\r\n        false /* do not force, as it will not be stored anyway */,\r\n        true /* reschedule next update */ );\r\n};\r\n\r\n/**\r\n * Stores the next batch log entry in the log storage.\r\n * @param {boolean} force enforce current logs batch to be stored or cached if\r\n * there is anything to be logged, but the storage is not ready yet. One of\r\n * legitimate reasons to force is when the logs length exceeds size limit which\r\n * could result in truncation.\r\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\r\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\r\n * task cycle.\r\n * @private\r\n */\r\nLogCollector.prototype._flush = function(force, reschedule) {\r\n    // Publish only if there's anything to be logged\r\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\r\n        //FIXME avoid truncating\r\n        // right now we don't care if the message size is \"slightly\" exceeded\r\n        if (this.logStorage.isReady()) {\r\n            // Sends all cached logs\r\n            if (this.outputCache.length) {\r\n                this.outputCache.forEach(\r\n                    function (cachedQueue) {\r\n                        this.logStorage.storeLogs(cachedQueue);\r\n                    }.bind(this)\r\n                );\r\n                // Clear the cache\r\n                this.outputCache = [];\r\n            }\r\n            // Send current batch\r\n            this.logStorage.storeLogs(this.queue);\r\n        } else {\r\n            this.outputCache.push(this.queue);\r\n        }\r\n\r\n        this.queue = [];\r\n        this.totalLen = 0;\r\n    }\r\n\r\n    if (reschedule) {\r\n        this._reschedulePublishInterval();\r\n    }\r\n};\r\n\r\n/**\r\n * Stops the periodical \"store logs\" task and immediately stores any pending\r\n * log entries as a batch.\r\n */\r\nLogCollector.prototype.stop = function() {\r\n    // Flush and stop publishing logs\r\n    this._flush(false /* do not force */, false /* do not reschedule */);\r\n};\r\n\r\nmodule.exports = LogCollector;\r\n","/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n","/*!\r\n * currentExecutingScript\r\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\r\n * Copyright (c) 2015 James M. Greene\r\n * Licensed MIT\r\n * https://github.com/JamesMGreene/currentExecutingScript\r\n * v0.1.3\r\n */\r\n(function(root, factory) {\r\n  if (typeof define === \"function\" && define.amd) {\r\n    // AMD. Register as an anonymous module.\r\n    define([], factory);\r\n  } else if (typeof exports === \"object\") {\r\n    // CommonJS-like environments that support `module.exports`,\r\n    // like Node.js. Does not work with strict CommonJS!\r\n    module.exports = factory();\r\n  } else {\r\n    // Browser globals (`root` is `window`)\r\n    root.currentExecutingScript = factory();\r\n  }\r\n}(\r\n  // Current context/scope\r\n  this || window,\r\n\r\n  // Factory function to return the export\r\n  function() {\r\n\r\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\r\n\r\n// This page's URL (minus query string and fragment identifer hash, if any)\r\nvar fullPageUrl = !!window.location ? window.location.href : null;\r\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\r\n\r\n// Live NodeList collection\r\nvar scripts = document.getElementsByTagName(\"script\");\r\n\r\n// Check if the browser supports the `readyState` property on `script` elements\r\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\r\n\r\n// Lousy browser detection for [not] Opera\r\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\r\n\r\n// Detect if `document.currentScript` is supported\r\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\r\n\r\nvar originalStackDepthConfig;\r\n// Detect if the V8 Error Stack Trace API is supported\r\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\r\n  originalStackDepthConfig = Error.stackTraceLimit;\r\n  Error.stackTraceLimit = Infinity;\r\n}\r\n\r\n\r\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\r\n// object instance without needing to throw it. Avoiding an unnecessary\r\n// use of `throw` saves time and performance.\r\nvar hasStackBeforeThrowing = false,\r\n    hasStackAfterThrowing = false;\r\n(function() {\r\n  try {\r\n    var err = new Error();\r\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\r\n    throw err;\r\n  }\r\n  catch (thrownErr) {\r\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\r\n  }\r\n})();\r\n\r\n\r\n// Normalize whitespace within a string\r\nfunction normalizeWhitespace(str) {\r\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\r\n}\r\n\r\n// Get script object based on the `src` URL\r\nfunction getScriptFromUrl(url, eligibleScripts) {\r\n  var i,\r\n      script = null;\r\n\r\n  eligibleScripts = eligibleScripts || scripts;\r\n\r\n  if (typeof url === \"string\" && url) {\r\n    for (i = eligibleScripts.length; i--; ) {\r\n      if (eligibleScripts[i].src === url) {\r\n        // NOTE: Could check if the same script URL is used by more than one `script` element\r\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\r\n        script = eligibleScripts[i];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return script;\r\n}\r\n\r\n// Get script object based on the caller function's source code body (text)\r\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\r\n  var i, inlineScriptText,\r\n      script = null,\r\n      callerSourceText = normalizeWhitespace(callerFnSource);\r\n\r\n  eligibleScripts = eligibleScripts || scripts;\r\n\r\n  if (callerFnSource && callerSourceText) {\r\n    for (i = eligibleScripts.length; i--; ) {\r\n      // Only look at inline scripts\r\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\r\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\r\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\r\n          // If more than one match is found, don't return any\r\n          if (script) {\r\n            script = null;\r\n            break;\r\n          }\r\n          script = eligibleScripts[i];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return script;\r\n}\r\n\r\n// If there is only a single inline script on the page, return it; otherwise `null`\r\nfunction getSoleInlineScript(eligibleScripts) {\r\n  var i, len,\r\n      script = null;\r\n  eligibleScripts = eligibleScripts || scripts;\r\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\r\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\r\n      if (script) {\r\n        script = null;\r\n        break;\r\n      }\r\n      script = eligibleScripts[i];\r\n    }\r\n  }\r\n  return script;\r\n}\r\n\r\n// Get the currently executing script URL from an Error stack trace\r\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\r\n  var matches, remainingStack,\r\n      url = null,\r\n      ignoreMessage = typeof skipStackDepth === \"number\";\r\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\r\n  if (typeof stack === \"string\" && stack) {\r\n    if (ignoreMessage) {\r\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\r\n    }\r\n    else {\r\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\r\n\r\n      if (!(matches && matches[1])) {\r\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\r\n      }\r\n    }\r\n\r\n    if (matches && matches[1]) {\r\n      if (skipStackDepth > 0) {\r\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\r\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\r\n      }\r\n      else {\r\n        url = matches[1];\r\n      }\r\n    }\r\n\r\n    // TODO: Handle more edge cases!\r\n    // Fixes #1\r\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\r\n\r\n    // ???\r\n\r\n  }\r\n  return url;\r\n}\r\n\r\n\r\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\r\n// element for the caller function, regardless of whether it is that `script`\r\n// DOM element is currently being evaluated for the first time. The farthest\r\n// currently executing `script` DOM element would typically be considered the\r\n// originator of the current execution stack.\r\nfunction _farthestExecutingScript() {\r\n  /*jshint noarg:false */\r\n\r\n  // TODO: Implement!\r\n  // Fixes #3\r\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\r\n  return null;\r\n\r\n/*\r\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\r\n  if (scripts.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  // Guaranteed accurate in IE 6-10.\r\n  // Not accurate/supported in any other browsers.\r\n  if (isNotOpera && supportsScriptReadyState) {\r\n    for (var i = scripts.length; i--; ) {\r\n      if (scripts[i].readyState === \"interactive\") {\r\n        return scripts[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  var stack,\r\n      e = new Error();\r\n  if (hasStackBeforeThrowing) {\r\n    stack = e.stack;\r\n  }\r\n  if (!stack && hasStackAfterThrowing) {\r\n    try {\r\n      throw e;\r\n    }\r\n    catch (err) {\r\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\r\n      stack = err.stack;\r\n    }\r\n  }\r\n  if (stack) {\r\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\r\n    var script = getScriptFromUrl(url, scripts );\r\n    if (!script && pageUrl && url === pageUrl) {\r\n      // Try to find the correct inline script by searching through\r\n      // inline scripts' text content for the caller function's source\r\n      // code to be present. If the caller function's source code is\r\n      // not available, see if there is only one inline script element\r\n      // in the DOM and return that (even though it may be wrong)\r\n\r\n      // TODO: Implement!\r\n      // Fixes #4 in part\r\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\r\n\r\n      var callerFn = _farthestExecutingScript.caller || null,\r\n          callerFnStack = [],\r\n          callerFnSource = null;\r\n\r\n      while (callerFn) {\r\n        callerFnStack.push(callerFn);\r\n        callerFn = callerFn.caller || null;\r\n      }\r\n      callerFn = callerFnStack.slice(-1)[0];\r\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\r\n\r\n\r\n      if (callerFnSource) {\r\n        script = getInlineScriptFromCallerSource(callerFnSource);\r\n      }\r\n      else {\r\n        // NOTE: This is a loose assumption that could be inaccurate!\r\n        //\r\n        // Inaccuracies:\r\n        //  - If the inline script that initiated the call was also removed from the DOM.\r\n        //  - If the call was initiated by an element's inline event handler,\r\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\r\n        script = getSoleInlineScript();\r\n      }\r\n    }\r\n    return script;\r\n  }\r\n\r\n  // NOTE: This is a loose assumption that could be inaccurate!\r\n  //\r\n  // Inaccuracies:\r\n  //  - If a script is created dynamically and appended to some position\r\n  //    other than the very end of the document.\r\n  //  - If multiple scripts are created dynamically and all appended to the\r\n  //    same position within the document (and do not have their `async` attributes\r\n  //    set to `false`, at least in browsers that support async script evaluation.\r\n  //    other than the very end of the document.\r\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\r\n  //    that supports it.\r\n  //  - May get confused by `script` elements within `svg` elements\r\n  return scripts[scripts.length - 1] || null;\r\n*/\r\n}\r\n\r\n\r\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\r\n// element or attribute node (e.g. `onclick`) for the caller function,\r\n// regardless of whether it is that `script` DOM element is currently being\r\n// evaluated for the first time. The originating currently executing `script`\r\n// DOM element [or attribute node] is the originator of the current execution stack.\r\nfunction _originatingExecutingScript() {\r\n  // TODO: Implement!\r\n  // Fixes #2\r\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\r\n  return null;\r\n}\r\n\r\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\r\n// element for the caller function, regardless of whether it is that `script`\r\n// DOM element is currently being evaluated for the first time.\r\nfunction _nearestExecutingScript() {\r\n  /*jshint noarg:false */\r\n\r\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\r\n  if (scripts.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  var i, e, stack, url, script,\r\n      eligibleScripts = [],\r\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\r\n\r\n      // TODO: Implement!\r\n      // Fixes #4 in part\r\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\r\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\r\n\r\n  // This part will only help in IE 6-10.\r\n  for (i = 0; i < scripts.length; i++) {\r\n    if (isNotOpera && supportsScriptReadyState) {\r\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\r\n        eligibleScripts.push(scripts[i]);\r\n      }\r\n    }\r\n    else {\r\n      eligibleScripts.push(scripts[i]);\r\n    }\r\n  }\r\n\r\n  e = new Error();\r\n  if (hasStackBeforeThrowing) {\r\n    stack = e.stack;\r\n  }\r\n  if (!stack && hasStackAfterThrowing) {\r\n    try {\r\n      throw e;\r\n    }\r\n    catch (err) {\r\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\r\n      stack = err.stack;\r\n    }\r\n  }\r\n\r\n  if (stack) {\r\n    url = getScriptUrlFromStack(stack, skipStackDepth);\r\n    script = getScriptFromUrl(url, eligibleScripts);\r\n\r\n    if (!script && pageUrl && url === pageUrl) {\r\n      // Try to find the correct inline script by searching through\r\n      // inline scripts' text content for the caller function's source\r\n      // code to be present.\r\n      if (callerFnSource) {\r\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\r\n      }\r\n      // If the caller function's source code is not available, see if\r\n      // there is only one inline script element in the DOM and return\r\n      // that (even though it may be wrong)...\r\n      else {\r\n        // NOTE: This is a loose assumption that could be inaccurate!\r\n        //\r\n        // Inaccuracies:\r\n        //  - If the inline script that initiated the call was also removed from the DOM.\r\n        //  - If the call was initiated by an element's inline event handler,\r\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\r\n        script = getSoleInlineScript(eligibleScripts);\r\n      }\r\n    }\r\n  }\r\n\r\n  //\r\n  // Welcome to the Island of Inaccurate Assumptions!\r\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\r\n  //\r\n\r\n  if (!script) {\r\n    // Inaccuracies:\r\n    //  - If the inline script that initiated the call was also removed from the DOM.\r\n    //  - If the call was initiated by an element's inline event handler,\r\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\r\n    if (eligibleScripts.length === 1) {\r\n      script = eligibleScripts[0];\r\n    }\r\n  }\r\n\r\n  if (!script) {\r\n    // Inaccuracies:\r\n    //  - If script currently being synchronously evaluated by the parser is the\r\n    //    originator of this call stack but NOT the source script of the caller/invocation\r\n    //    e.g.\r\n    //    ```html\r\n    //    <script id=\"a\">\r\n    //    function getCurrentScriptCallerFn() {\r\n    //      return currentExecutingScript.near();\r\n    //    }\r\n    //    </script>\r\n    //    <script id=\"b\">\r\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\r\n    //    getCurrentScriptCallerFn();\r\n    //    </script>\r\n    if (hasNativeCurrentScriptAccessor) {\r\n      script = document.currentScript;\r\n    }\r\n  }\r\n\r\n  if (!script) {\r\n    // Inaccuracies:\r\n    //  - If script currently being synchronously evaluated by the parser is the\r\n    //    originator of this call stack but NOT the source script of the caller/invocation\r\n    //    e.g.\r\n    //    ```html\r\n    //    <script id=\"a\">\r\n    //    function getCurrentScriptCallerFn() {\r\n    //      return currentExecutingScript.near();\r\n    //    }\r\n    //    </script>\r\n    //    <script id=\"b\">\r\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\r\n    //    getCurrentScriptCallerFn();\r\n    //    </script>\r\n    if (isNotOpera && supportsScriptReadyState) {\r\n      for (i = eligibleScripts.length; i--; ) {\r\n        if (eligibleScripts[i].readyState === \"interactive\") {\r\n          script = eligibleScripts[i];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!script) {\r\n    // Inaccuracies:\r\n    //  - If a script is created dynamically and appended to some position\r\n    //    other than the very end of the document.\r\n    //  - If multiple scripts are created dynamically and all appended to the\r\n    //    same position within the document (and do not have their `async` attributes\r\n    //    set to `false`, at least in browsers that support async script evaluation.\r\n    //    other than the very end of the document.\r\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\r\n    //    that supports it.\r\n    //  - May get confused by `script` elements within `svg` elements\r\n    //  - If script currently being synchronously evaluated by the parser is the\r\n    //    originator of this call stack but NOT the source script of the caller/invocation\r\n    //    e.g.\r\n    //    ```html\r\n    //    <script id=\"a\">\r\n    //    function getCurrentScriptCallerFn() {\r\n    //      return currentExecutingScript.near();\r\n    //    }\r\n    //    </script>\r\n    //    <script id=\"b\">\r\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\r\n    //    getCurrentScriptCallerFn();\r\n    //    </script>\r\n    //    ```\r\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\r\n  }\r\n\r\n  return script;\r\n}\r\n\r\n// Default stack depth to skip over when analyzing call stack frames\r\n_nearestExecutingScript.skipStackDepth = 1;\r\n\r\n\r\n\r\n    //\r\n    // Export the API\r\n    //\r\n    var currentExecutingScript    = _nearestExecutingScript;      // default\r\n    currentExecutingScript.near   = _nearestExecutingScript;\r\n    currentExecutingScript.far    = _farthestExecutingScript;\r\n    currentExecutingScript.origin = _originatingExecutingScript;\r\n\r\n\r\n    // Just return a value to define the module export.\r\n    // This example returns an object, but the module\r\n    // can return a function as the exported value.\r\n    return currentExecutingScript;\r\n  })\r\n);\r\n","const Constants = {\r\n    LOCAL_JID: 'local'\r\n};\r\n\r\nmodule.exports = Constants;\r\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","var scope = (typeof global !== \"undefined\" && global) ||\r\n            (typeof self !== \"undefined\" && self) ||\r\n            window;\r\nvar apply = Function.prototype.apply;\r\n\r\n// DOM APIs, for completeness\r\n\r\nexports.setTimeout = function() {\r\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\r\n};\r\nexports.setInterval = function() {\r\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\r\n};\r\nexports.clearTimeout =\r\nexports.clearInterval = function(timeout) {\r\n  if (timeout) {\r\n    timeout.close();\r\n  }\r\n};\r\n\r\nfunction Timeout(id, clearFn) {\r\n  this._id = id;\r\n  this._clearFn = clearFn;\r\n}\r\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\r\nTimeout.prototype.close = function() {\r\n  this._clearFn.call(scope, this._id);\r\n};\r\n\r\n// Does not start the time, just sets up the members needed.\r\nexports.enroll = function(item, msecs) {\r\n  clearTimeout(item._idleTimeoutId);\r\n  item._idleTimeout = msecs;\r\n};\r\n\r\nexports.unenroll = function(item) {\r\n  clearTimeout(item._idleTimeoutId);\r\n  item._idleTimeout = -1;\r\n};\r\n\r\nexports._unrefActive = exports.active = function(item) {\r\n  clearTimeout(item._idleTimeoutId);\r\n\r\n  var msecs = item._idleTimeout;\r\n  if (msecs >= 0) {\r\n    item._idleTimeoutId = setTimeout(function onTimeout() {\r\n      if (item._onTimeout)\r\n        item._onTimeout();\r\n    }, msecs);\r\n  }\r\n};\r\n\r\n// setimmediate attaches itself to the global object\r\nrequire(\"setimmediate\");\r\n// On some exotic environments, it's not clear which object `setimmediate` was\r\n// able to install onto.  Search each possibility in the same order as the\r\n// `setimmediate` library.\r\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\r\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\r\n                       (this && this.setImmediate);\r\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\r\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\r\n                         (this && this.clearImmediate);\r\n","(function (global, undefined) {\r\n    \"use strict\";\r\n\r\n    if (global.setImmediate) {\r\n        return;\r\n    }\r\n\r\n    var nextHandle = 1; // Spec says greater than zero\r\n    var tasksByHandle = {};\r\n    var currentlyRunningATask = false;\r\n    var doc = global.document;\r\n    var registerImmediate;\r\n\r\n    function setImmediate(callback) {\r\n      // Callback can either be a function or a string\r\n      if (typeof callback !== \"function\") {\r\n        callback = new Function(\"\" + callback);\r\n      }\r\n      // Copy function arguments\r\n      var args = new Array(arguments.length - 1);\r\n      for (var i = 0; i < args.length; i++) {\r\n          args[i] = arguments[i + 1];\r\n      }\r\n      // Store and register the task\r\n      var task = { callback: callback, args: args };\r\n      tasksByHandle[nextHandle] = task;\r\n      registerImmediate(nextHandle);\r\n      return nextHandle++;\r\n    }\r\n\r\n    function clearImmediate(handle) {\r\n        delete tasksByHandle[handle];\r\n    }\r\n\r\n    function run(task) {\r\n        var callback = task.callback;\r\n        var args = task.args;\r\n        switch (args.length) {\r\n        case 0:\r\n            callback();\r\n            break;\r\n        case 1:\r\n            callback(args[0]);\r\n            break;\r\n        case 2:\r\n            callback(args[0], args[1]);\r\n            break;\r\n        case 3:\r\n            callback(args[0], args[1], args[2]);\r\n            break;\r\n        default:\r\n            callback.apply(undefined, args);\r\n            break;\r\n        }\r\n    }\r\n\r\n    function runIfPresent(handle) {\r\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\r\n        // So if we're currently running a task, we'll need to delay this invocation.\r\n        if (currentlyRunningATask) {\r\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\r\n            // \"too much recursion\" error.\r\n            setTimeout(runIfPresent, 0, handle);\r\n        } else {\r\n            var task = tasksByHandle[handle];\r\n            if (task) {\r\n                currentlyRunningATask = true;\r\n                try {\r\n                    run(task);\r\n                } finally {\r\n                    clearImmediate(handle);\r\n                    currentlyRunningATask = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function installNextTickImplementation() {\r\n        registerImmediate = function(handle) {\r\n            process.nextTick(function () { runIfPresent(handle); });\r\n        };\r\n    }\r\n\r\n    function canUsePostMessage() {\r\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\r\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\r\n        if (global.postMessage && !global.importScripts) {\r\n            var postMessageIsAsynchronous = true;\r\n            var oldOnMessage = global.onmessage;\r\n            global.onmessage = function() {\r\n                postMessageIsAsynchronous = false;\r\n            };\r\n            global.postMessage(\"\", \"*\");\r\n            global.onmessage = oldOnMessage;\r\n            return postMessageIsAsynchronous;\r\n        }\r\n    }\r\n\r\n    function installPostMessageImplementation() {\r\n        // Installs an event handler on `global` for the `message` event: see\r\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\r\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\r\n\r\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\r\n        var onGlobalMessage = function(event) {\r\n            if (event.source === global &&\r\n                typeof event.data === \"string\" &&\r\n                event.data.indexOf(messagePrefix) === 0) {\r\n                runIfPresent(+event.data.slice(messagePrefix.length));\r\n            }\r\n        };\r\n\r\n        if (global.addEventListener) {\r\n            global.addEventListener(\"message\", onGlobalMessage, false);\r\n        } else {\r\n            global.attachEvent(\"onmessage\", onGlobalMessage);\r\n        }\r\n\r\n        registerImmediate = function(handle) {\r\n            global.postMessage(messagePrefix + handle, \"*\");\r\n        };\r\n    }\r\n\r\n    function installMessageChannelImplementation() {\r\n        var channel = new MessageChannel();\r\n        channel.port1.onmessage = function(event) {\r\n            var handle = event.data;\r\n            runIfPresent(handle);\r\n        };\r\n\r\n        registerImmediate = function(handle) {\r\n            channel.port2.postMessage(handle);\r\n        };\r\n    }\r\n\r\n    function installReadyStateChangeImplementation() {\r\n        var html = doc.documentElement;\r\n        registerImmediate = function(handle) {\r\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\r\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\r\n            var script = doc.createElement(\"script\");\r\n            script.onreadystatechange = function () {\r\n                runIfPresent(handle);\r\n                script.onreadystatechange = null;\r\n                html.removeChild(script);\r\n                script = null;\r\n            };\r\n            html.appendChild(script);\r\n        };\r\n    }\r\n\r\n    function installSetTimeoutImplementation() {\r\n        registerImmediate = function(handle) {\r\n            setTimeout(runIfPresent, 0, handle);\r\n        };\r\n    }\r\n\r\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\r\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\r\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\r\n\r\n    // Don't get fooled by e.g. browserify environments.\r\n    if ({}.toString.call(global.process) === \"[object process]\") {\r\n        // For Node.js before 0.9\r\n        installNextTickImplementation();\r\n\r\n    } else if (canUsePostMessage()) {\r\n        // For non-IE10 modern browsers\r\n        installPostMessageImplementation();\r\n\r\n    } else if (global.MessageChannel) {\r\n        // For web workers, where supported\r\n        installMessageChannelImplementation();\r\n\r\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\r\n        // For IE 6–8\r\n        installReadyStateChangeImplementation();\r\n\r\n    } else {\r\n        // For older browsers\r\n        installSetTimeoutImplementation();\r\n    }\r\n\r\n    attachTo.setImmediate = setImmediate;\r\n    attachTo.clearImmediate = clearImmediate;\r\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\r\n","var toIntIfInt = function (v) {\r\n  return String(Number(v)) === v ? Number(v) : v;\r\n};\r\n\r\nvar attachProperties = function (match, location, names, rawName) {\r\n  if (rawName && !names) {\r\n    location[rawName] = toIntIfInt(match[1]);\r\n  }\r\n  else {\r\n    for (var i = 0; i < names.length; i += 1) {\r\n      if (match[i+1] != null) {\r\n        location[names[i]] = toIntIfInt(match[i+1]);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nvar parseReg = function (obj, location, content) {\r\n  var needsBlank = obj.name && obj.names;\r\n  if (obj.push && !location[obj.push]) {\r\n    location[obj.push] = [];\r\n  }\r\n  else if (needsBlank && !location[obj.name]) {\r\n    location[obj.name] = {};\r\n  }\r\n  var keyLocation = obj.push ?\r\n    {} :  // blank object that will be pushed\r\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\r\n\r\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\r\n\r\n  if (obj.push) {\r\n    location[obj.push].push(keyLocation);\r\n  }\r\n};\r\n\r\nvar grammar = require('./grammar');\r\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\r\n\r\nexports.parse = function (sdp) {\r\n  var session = {}\r\n    , media = []\r\n    , location = session; // points at where properties go under (one of the above)\r\n\r\n  // parse lines we understand\r\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\r\n    var type = l[0];\r\n    var content = l.slice(2);\r\n    if (type === 'm') {\r\n      media.push({rtp: [], fmtp: []});\r\n      location = media[media.length-1]; // point at latest media line\r\n    }\r\n\r\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\r\n      var obj = grammar[type][j];\r\n      if (obj.reg.test(content)) {\r\n        return parseReg(obj, location, content);\r\n      }\r\n    }\r\n  });\r\n\r\n  session.media = media; // link it up\r\n  return session;\r\n};\r\n\r\nvar paramReducer = function (acc, expr) {\r\n  var s = expr.split(/=(.+)/, 2);\r\n  if (s.length === 2) {\r\n    acc[s[0]] = toIntIfInt(s[1]);\r\n  }\r\n  return acc;\r\n};\r\n\r\nexports.parseParams = function (str) {\r\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\r\n};\r\n\r\n// For backward compatibility - alias will be removed in 3.0.0\r\nexports.parseFmtpConfig = exports.parseParams;\r\n\r\nexports.parsePayloads = function (str) {\r\n  return str.split(' ').map(Number);\r\n};\r\n\r\nexports.parseRemoteCandidates = function (str) {\r\n  var candidates = [];\r\n  var parts = str.split(' ').map(toIntIfInt);\r\n  for (var i = 0; i < parts.length; i += 3) {\r\n    candidates.push({\r\n      component: parts[i],\r\n      ip: parts[i + 1],\r\n      port: parts[i + 2]\r\n    });\r\n  }\r\n  return candidates;\r\n};\r\n\r\nexports.parseImageAttributes = function (str) {\r\n  return str.split(' ').map(function (item) {\r\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\r\n  });\r\n};\r\n\r\nexports.parseSimulcastStreamList = function (str) {\r\n  return str.split(';').map(function (stream) {\r\n    return stream.split(',').map(function (format) {\r\n      var scid, paused = false;\r\n\r\n      if (format[0] !== '~') {\r\n        scid = toIntIfInt(format);\r\n      } else {\r\n        scid = toIntIfInt(format.substring(1, format.length));\r\n        paused = true;\r\n      }\r\n\r\n      return {\r\n        scid: scid,\r\n        paused: paused\r\n      };\r\n    });\r\n  });\r\n};\r\n","var grammar = require('./grammar');\r\n\r\n// customized util.format - discards excess arguments and can void middle ones\r\nvar formatRegExp = /%[sdv%]/g;\r\nvar format = function (formatStr) {\r\n  var i = 1;\r\n  var args = arguments;\r\n  var len = args.length;\r\n  return formatStr.replace(formatRegExp, function (x) {\r\n    if (i >= len) {\r\n      return x; // missing argument\r\n    }\r\n    var arg = args[i];\r\n    i += 1;\r\n    switch (x) {\r\n    case '%%':\r\n      return '%';\r\n    case '%s':\r\n      return String(arg);\r\n    case '%d':\r\n      return Number(arg);\r\n    case '%v':\r\n      return '';\r\n    }\r\n  });\r\n  // NB: we discard excess arguments - they are typically undefined from makeLine\r\n};\r\n\r\nvar makeLine = function (type, obj, location) {\r\n  var str = obj.format instanceof Function ?\r\n    (obj.format(obj.push ? location : location[obj.name])) :\r\n    obj.format;\r\n\r\n  var args = [type + '=' + str];\r\n  if (obj.names) {\r\n    for (var i = 0; i < obj.names.length; i += 1) {\r\n      var n = obj.names[i];\r\n      if (obj.name) {\r\n        args.push(location[obj.name][n]);\r\n      }\r\n      else { // for mLine and push attributes\r\n        args.push(location[obj.names[i]]);\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    args.push(location[obj.name]);\r\n  }\r\n  return format.apply(null, args);\r\n};\r\n\r\n// RFC specified order\r\n// TODO: extend this with all the rest\r\nvar defaultOuterOrder = [\r\n  'v', 'o', 's', 'i',\r\n  'u', 'e', 'p', 'c',\r\n  'b', 't', 'r', 'z', 'a'\r\n];\r\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\r\n\r\n\r\nmodule.exports = function (session, opts) {\r\n  opts = opts || {};\r\n  // ensure certain properties exist\r\n  if (session.version == null) {\r\n    session.version = 0; // 'v=0' must be there (only defined version atm)\r\n  }\r\n  if (session.name == null) {\r\n    session.name = ' '; // 's= ' must be there if no meaningful name set\r\n  }\r\n  session.media.forEach(function (mLine) {\r\n    if (mLine.payloads == null) {\r\n      mLine.payloads = '';\r\n    }\r\n  });\r\n\r\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\r\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\r\n  var sdp = [];\r\n\r\n  // loop through outerOrder for matching properties on session\r\n  outerOrder.forEach(function (type) {\r\n    grammar[type].forEach(function (obj) {\r\n      if (obj.name in session && session[obj.name] != null) {\r\n        sdp.push(makeLine(type, obj, session));\r\n      }\r\n      else if (obj.push in session && session[obj.push] != null) {\r\n        session[obj.push].forEach(function (el) {\r\n          sdp.push(makeLine(type, obj, el));\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  // then for each media line, follow the innerOrder\r\n  session.media.forEach(function (mLine) {\r\n    sdp.push(makeLine('m', grammar.m[0], mLine));\r\n\r\n    innerOrder.forEach(function (type) {\r\n      grammar[type].forEach(function (obj) {\r\n        if (obj.name in mLine && mLine[obj.name] != null) {\r\n          sdp.push(makeLine(type, obj, mLine));\r\n        }\r\n        else if (obj.push in mLine && mLine[obj.push] != null) {\r\n          mLine[obj.push].forEach(function (el) {\r\n            sdp.push(makeLine(type, obj, el));\r\n          });\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  return sdp.join('\\r\\n') + '\\r\\n';\r\n};\r\n","/* Copyright @ 2016 Atlassian Pty Ltd\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nvar transform = require('sdp-transform');\r\nvar transformUtils = require('./transform-utils');\r\nvar parseSsrcs = transformUtils.parseSsrcs;\r\nvar writeSsrcs = transformUtils.writeSsrcs;\r\n\r\n//region Constants\r\n\r\nvar DEFAULT_NUM_OF_LAYERS = 3;\r\n\r\n//endregion\r\n\r\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\r\n    return mLine\r\n        .ssrcs\r\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\r\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\r\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\r\n}\r\n\r\n//region Ctor\r\n\r\nfunction Simulcast(options) {\r\n\r\n    this.options = options ? options : {};\r\n\r\n    if (!this.options.numOfLayers) {\r\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\r\n    }\r\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\r\n\r\n    /**\r\n     * An IN-ORDER list of the simulcast ssrcs\r\n     * @type {list<number>}\r\n     */\r\n    this.ssrcCache = [];\r\n}\r\n\r\n//endregion\r\n\r\n//region Stateless private utility functions\r\n\r\n/**\r\n * Returns a random integer between min (included) and max (excluded)\r\n * Using Math.round() gives a non-uniform distribution!\r\n * @returns {number}\r\n */\r\nfunction generateSSRC() {\r\n    var min = 0, max = 0xffffffff;\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n};\r\n\r\nfunction processVideo(session, action) {\r\n    if (session == null || !Array.isArray(session.media)) {\r\n        return;\r\n    }\r\n\r\n    session.media.forEach(function (mLine) {\r\n        if (mLine.type === 'video') {\r\n            action(mLine);\r\n        }\r\n    });\r\n};\r\n\r\nfunction validateDescription(desc)\r\n{\r\n    return desc && desc != null\r\n        && desc.type && desc.type != ''\r\n        && desc.sdp && desc.sdp != '';\r\n}\r\n\r\nfunction explodeRemoteSimulcast(mLine) {\r\n\r\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\r\n        return;\r\n    }\r\n\r\n    var sources = parseSsrcs(mLine);\r\n    var order = [];\r\n\r\n    // Find the SIM group and explode its sources.\r\n    var j = mLine.ssrcGroups.length;\r\n    while (j--) {\r\n\r\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\r\n            continue;\r\n        }\r\n\r\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\r\n\r\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\r\n\r\n            var ssrc = simulcastSsrcs[i];\r\n            order.push(ssrc);\r\n\r\n            var parts = sources[ssrc].msid.split(' ');\r\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\r\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\r\n\r\n            // Remove all the groups that this SSRC participates in.\r\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\r\n                if (relatedGroup.semantics === 'SIM') {\r\n                    return;\r\n                }\r\n\r\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\r\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\r\n                    return;\r\n                }\r\n\r\n                // Nuke all the related SSRCs.\r\n                relatedSsrcs.forEach(function (relatedSSRC) {\r\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\r\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\r\n                    if (relatedSSRC !== ssrc) {\r\n                        order.push(relatedSSRC);\r\n                    }\r\n                });\r\n\r\n                // Schedule the related group for nuking.\r\n            })\r\n        }\r\n\r\n        mLine.ssrcs = writeSsrcs(sources, order);\r\n        mLine.ssrcGroups.splice(j, 1);\r\n    };\r\n}\r\n\r\nfunction implodeRemoteSimulcast(mLine) {\r\n\r\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\r\n        console.info('Halt: There are no SSRC groups in the remote ' +\r\n                'description.');\r\n        return;\r\n    }\r\n\r\n    var sources = parseSsrcs(mLine);\r\n\r\n    // Find the SIM group and nuke it.\r\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\r\n        if (simulcastGroup.semantics !== 'SIM') {\r\n            return;\r\n        }\r\n\r\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\r\n        // Schedule the SIM group for nuking.\r\n        simulcastGroup.nuke = true;\r\n\r\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\r\n\r\n        // Nuke all the higher layer SSRCs.\r\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\r\n\r\n            var ssrc = simulcastSsrcs[i];\r\n            delete sources[ssrc];\r\n\r\n            // Remove all the groups that this SSRC participates in.\r\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\r\n                if (relatedGroup.semantics === 'SIM') {\r\n                    return;\r\n                }\r\n\r\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\r\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\r\n                    return;\r\n                }\r\n\r\n                // Nuke all the related SSRCs.\r\n                relatedSsrcs.forEach(function (relatedSSRC) {\r\n                    delete sources[relatedSSRC];\r\n                });\r\n\r\n                // Schedule the related group for nuking.\r\n                relatedGroup.nuke = true;\r\n            })\r\n        }\r\n\r\n        return;\r\n    });\r\n\r\n    mLine.ssrcs = writeSsrcs(sources);\r\n\r\n    // Nuke all the scheduled groups.\r\n    var i = mLine.ssrcGroups.length;\r\n    while (i--) {\r\n        if (mLine.ssrcGroups[i].nuke) {\r\n            mLine.ssrcGroups.splice(i, 1);\r\n        }\r\n    }\r\n}\r\n\r\nfunction removeGoogConference(mLine) {\r\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\r\n        return;\r\n    }\r\n\r\n    mLine.xGoogleFlag = undefined;\r\n}\r\n\r\nfunction assertGoogConference(mLine) {\r\n    if (!mLine) {\r\n        return;\r\n    }\r\n\r\n    if (!Array.isArray(mLine.invalid)) {\r\n        mLine.invalid = [];\r\n    }\r\n\r\n    if (!mLine.invalid.some(\r\n            function (i) { return i.value === 'x-google-flag:conference' })) {\r\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\r\n    }\r\n}\r\n\r\nSimulcast.prototype.clearSsrcCache = function() {\r\n    this.ssrcCache = [];\r\n}\r\n\r\n/**\r\n * When we start as video muted, all of the video\r\n *  ssrcs get generated so we can include them as part\r\n *  of the original session-accept.  That means we\r\n *  need this library to restore to those same ssrcs\r\n *  the first time we unmute, so we need the ability to\r\n *  force its cache\r\n */\r\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\r\n    this.ssrcCache = ssrcs;\r\n}\r\n\r\n//endregion\r\n\r\n//region \"Private\" functions\r\n\r\n/**\r\n * Given a video mLine, return a list of the video ssrcs\r\n *  in simulcast layer order (returns a list of just\r\n *  the primary ssrc if there are no simulcast layers)\r\n */\r\nSimulcast.prototype._parseSimLayers = function (mLine) {\r\n    var simGroup = mLine.ssrcGroups &&\r\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\r\n    if (simGroup) {\r\n        return simGroup.ssrcs\r\n            .split(\" \")\r\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\r\n    } else {\r\n        return [mLine.ssrcs[0].id];\r\n    }\r\n}\r\n\r\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\r\n    var ssrcMap = {};\r\n    for (var i = 0; i < newSsrcList.length; ++i) {\r\n        var newSsrc = newSsrcList[i];\r\n        var oldSsrc = oldSsrcList[i] || null;\r\n        ssrcMap[newSsrc] = oldSsrc;\r\n    }\r\n    return ssrcMap;\r\n}\r\n\r\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\r\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\r\n    var newSimSsrcs = this._parseSimLayers(mLine);\r\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\r\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\r\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\r\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\r\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\r\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\r\n    //  to replace directly\r\n    var ssrcsToAdd = this.ssrcCache\r\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\r\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\r\n\r\n    // First do the replacements\r\n    mLine.ssrcs.forEach(function(ssrc) {\r\n        if (ssrcsToReplace[ssrc.id]) {\r\n            ssrc.id = ssrcsToReplace[ssrc.id];\r\n        }\r\n    });\r\n    // Now the adds\r\n    ssrcsToAdd.forEach(function(ssrc) {\r\n        mLine.ssrcs.push({\r\n            id: ssrc,\r\n            attribute: \"msid\",\r\n            value: newMsid\r\n        });\r\n        mLine.ssrcs.push({\r\n            id: ssrc,\r\n            attribute: \"cname\",\r\n            value: newCname\r\n        });\r\n    });\r\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\r\n    mLine.ssrcGroups.push({\r\n        semantics: \"SIM\",\r\n        ssrcs: this.ssrcCache.join(\" \")\r\n    });\r\n    return mLine;\r\n}\r\n\r\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\r\n    var addAssociatedStream = function(mLine, ssrc) {\r\n        mLine.ssrcs.push({\r\n            id: ssrc,\r\n            attribute: \"cname\",\r\n            value: primarySsrcCname\r\n        });\r\n        mLine.ssrcs.push({\r\n            id: ssrc,\r\n            attribute: \"msid\",\r\n            value: primarySsrcMsid\r\n        });\r\n    }\r\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\r\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\r\n\r\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\r\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\r\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\r\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\r\n        primarySsrcMsid = mLine.msid;\r\n        var primarySsrcs = mLine.ssrcs;\r\n        primarySsrcs.forEach(ssrc => {\r\n            mLine.ssrcs.push({\r\n                id: ssrc.id,\r\n                attribute: \"msid\",\r\n                value: primarySsrcMsid\r\n            });\r\n        });\r\n    }\r\n\r\n    // Generate sim layers\r\n    var simSsrcs = [];\r\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\r\n        var simSsrc = generateSSRC();\r\n        addAssociatedStream(mLine, simSsrc);\r\n        simSsrcs.push(simSsrc);\r\n    }\r\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\r\n    mLine.ssrcGroups.push({\r\n        semantics: \"SIM\",\r\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\r\n    });\r\n    return mLine;\r\n}\r\n\r\n\r\n\r\n// Assumptions:\r\n//  1) 'mLine' contains only a single primary video source\r\n//   (i.e. it will not already have simulcast streams inserted)\r\n//  2) 'mLine' MAY already contain an RTX stream for its video source\r\n//  3) 'mLine' is in sendrecv or sendonly state\r\n// Guarantees:\r\n//  1) return mLine will contain 2 additional simulcast layers\r\n//   generated\r\n//  2) if the base video ssrc in mLine has been seen before,\r\n//   then the same generated simulcast streams from before will\r\n//   be used again\r\n//  3) if rtx is enabled for the mLine, all generated simulcast\r\n//   streams will have rtx streams generated as well\r\n//  4) if rtx has been generated for a src before, we will generate\r\n//   the same rtx stream again\r\nSimulcast.prototype._restoreSimulcast = function(mLine) {\r\n    // First, find the primary video source in the given\r\n    // mLine and see if we've seen it before.\r\n    var primarySsrc;\r\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\r\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\r\n        .filter(function(ssrc, index, array) {\r\n            return array.indexOf(ssrc) === index;\r\n        })\r\n        .length || 0;\r\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\r\n\r\n    if (numSsrcs === 0 || numSsrcs > 2) {\r\n        // Unsupported scenario\r\n        return mLine;\r\n    }\r\n    if (numSsrcs == 2 && numGroups === 0) {\r\n        // Unsupported scenario\r\n        return mLine;\r\n    }\r\n\r\n    if (numSsrcs === 1) {\r\n        primarySsrc = mLine.ssrcs[0].id;\r\n    } else {\r\n        // There must be an FID group, so parse\r\n        //  that and pull the primary ssrc from there\r\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\r\n        if (fidGroup) {\r\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\r\n        } else {\r\n            // Unsupported scenario\r\n            return mLine;\r\n        }\r\n    }\r\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\r\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\r\n\r\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\r\n\r\n    if (seenPrimarySsrc) {\r\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\r\n            \"filling in data from cache\");\r\n        mLine = this._fillInSourceDataFromCache(mLine);\r\n    } else {\r\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\r\n            \"generating source data\");\r\n        mLine = this._generateSourceData(mLine, primarySsrc);\r\n    }\r\n    // Now update the cache to match whatever we've just put into this sdp\r\n    this.ssrcCache = this._parseSimLayers(mLine);\r\n    return mLine;\r\n}\r\n\r\n//endregion\r\n\r\n//region \"Public\" functions\r\n\r\n/**\r\n *\r\n * @param desc\r\n * @param enableConferenceFlag\r\n * @returns {RTCSessionDescription}\r\n */\r\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\r\n\r\n    if (!validateDescription(desc)) {\r\n        return desc;\r\n    }\r\n\r\n    var session = transform.parse(desc.sdp);\r\n\r\n    var self = this;\r\n    processVideo(session, function (mLine) {\r\n\r\n        // Handle simulcast reception.\r\n        if (self.options.explodeRemoteSimulcast) {\r\n            explodeRemoteSimulcast(mLine);\r\n        } else {\r\n            implodeRemoteSimulcast(mLine);\r\n        }\r\n\r\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\r\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\r\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\r\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\r\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\r\n            assertGoogConference(mLine);\r\n        } else {\r\n            removeGoogConference(mLine);\r\n        }\r\n    });\r\n\r\n    return new RTCSessionDescription({\r\n        type: desc.type,\r\n        sdp: transform.write(session)\r\n    });\r\n};\r\n\r\n/**\r\n *\r\n * NOTE this method should be called only if simulcast is supported by\r\n * the current browser, otherwise local SDP should not be munged.\r\n * @param desc\r\n * @returns {RTCSessionDescription}\r\n */\r\nSimulcast.prototype.mungeLocalDescription = function (desc) {\r\n\r\n    if (!validateDescription(desc)) {\r\n        return desc;\r\n    }\r\n\r\n    var session = transform.parse(desc.sdp);\r\n\r\n    var self = this;\r\n    processVideo(session, function (mLine) {\r\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\r\n        {\r\n            return;\r\n        }\r\n        self._restoreSimulcast(mLine);\r\n    });\r\n\r\n    return new RTCSessionDescription({\r\n        type: desc.type,\r\n        sdp: transform.write(session)\r\n    });\r\n};\r\n\r\n//endregion\r\n\r\nmodule.exports = Simulcast;\r\n","/* Copyright @ 2015 Atlassian Pty Ltd\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * FIXME\r\n * @param sources FIXME\r\n * @param order An array of SSRCs which will be used to order the entries in\r\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\r\n * in the specified order, and all other sources will be added afterwards (in\r\n * no specific order).\r\n * @returns {Array} FIXME\r\n */\r\nexports.writeSsrcs = function(sources, order) {\r\n  var ssrcs = [];\r\n\r\n  // expand sources to ssrcs\r\n  if (typeof sources !== 'undefined' &&\r\n      Object.keys(sources).length !== 0) {\r\n\r\n    if (!Array.isArray(order)) {\r\n      order = []\r\n    }\r\n\r\n    // Add the sources that appear in 'order' first.\r\n    for (var i = 0; i < order.length; i++) {\r\n      var ssrc = order[i];\r\n      var source = sources[ssrc];\r\n      Object.keys(source).forEach(function (attribute) {\r\n        ssrcs.push({\r\n          id: ssrc,\r\n          attribute: attribute,\r\n          value: source[attribute]\r\n        });\r\n      });\r\n    }\r\n\r\n    // Now add the rest of the sources.\r\n    Object.keys(sources).forEach(function (ssrc) {\r\n      ssrc = parseInt(ssrc); // Object.keys() returns string\r\n      if (order.indexOf(ssrc) >= 0) {\r\n        // Already added.\r\n        return;\r\n      }\r\n\r\n      var source = sources[ssrc];\r\n      Object.keys(source).forEach(function (attribute) {\r\n        ssrcs.push({\r\n          id: ssrc,\r\n          attribute: attribute,\r\n          value: source[attribute]\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  return ssrcs;\r\n};\r\n\r\nexports.parseSsrcs = function (mLine) {\r\n  var sources = {};\r\n  // group sources attributes by ssrc.\r\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\r\n    mLine.ssrcs.forEach(function (ssrc) {\r\n      if (!sources[ssrc.id])\r\n        sources[ssrc.id] = {};\r\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\r\n    });\r\n  }\r\n  return sources;\r\n};\r\n\r\n","/* eslint-disable max-params */\r\n\r\n/**\r\n * This object stores variables needed around the recording of an audio stream\r\n * and passing this recording along with additional information along to\r\n * different processes\r\n * @param blob the recording audio stream as a single blob\r\n * @param name the name of the person of the audio stream\r\n * @param startTime the time in UTC when recording of the audiostream started\r\n * @param wordArray the recorder audio stream transcribed as an array of Word\r\n *                  objects\r\n */\r\nconst RecordingResult = function(blob, name, startTime, wordArray) {\r\n    this.blob = blob;\r\n    this.name = name;\r\n    this.startTime = startTime;\r\n    this.wordArray = wordArray;\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\nmodule.exports = RecordingResult;\r\n","/* global config */\r\n\r\nconst Word = require('../word');\r\n\r\nconst audioRecorder = require('./../audioRecorder');\r\nconst TranscriptionService = require('./AbstractTranscriptionService');\r\n\r\n/**\r\n * Implements a TranscriptionService for a Sphinx4 http server\r\n */\r\nconst SphinxService = function() {\r\n    // set the correct url\r\n    this.url = getURL();\r\n};\r\n\r\n/**\r\n * Subclass of AbstractTranscriptionService\r\n */\r\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\r\n\r\n/**\r\n * Set the right constructor\r\n */\r\nSphinxService.constructor = SphinxService;\r\n\r\n/**\r\n * Overrides the sendRequest method from AbstractTranscriptionService\r\n * it will send the audio stream the a Sphinx4 server to get the transcription\r\n *\r\n * @param audioFileBlob the recorder audio stream an a single Blob\r\n * @param callback the callback function retrieving the server response\r\n */\r\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\r\n    console.log(`sending an audio file  to ${this.url}`);\r\n    console.log(`the audio file being sent: ${audioFileBlob}`);\r\n    const request = new XMLHttpRequest();\r\n\r\n    request.onreadystatechange = function() {\r\n        if (request.readyState === XMLHttpRequest.DONE\r\n            && request.status === 200) {\r\n            callback(request.responseText);\r\n        } else if (request.readyState === XMLHttpRequest.DONE) {\r\n            throw new Error(\r\n                `unable to accept response from sphinx server. status: ${\r\n                    request.status}`);\r\n        }\r\n\r\n        // if not ready no point to throw an error\r\n    };\r\n    request.open('POST', this.url);\r\n    request.setRequestHeader('Content-Type',\r\n        audioRecorder.determineCorrectFileType());\r\n    request.send(audioFileBlob);\r\n    console.log(`send ${audioFileBlob}`);\r\n};\r\n\r\n/**\r\n * Overrides the formatResponse method from AbstractTranscriptionService\r\n * It will parse the answer from the server in the expected format\r\n *\r\n * @param response the JSON body retrieved from the Sphinx4 server\r\n */\r\nSphinxService.prototype.formatResponse = function(response) {\r\n    const result = JSON.parse(response).objects;\r\n\r\n    // make sure to delete the session id object, which is always\r\n    // the first value in the JSON array\r\n\r\n    result.shift();\r\n    const array = [];\r\n\r\n    result.forEach(\r\n        word =>\r\n            word.filler\r\n                || array.push(new Word(word.word, word.start, word.end)));\r\n\r\n    return array;\r\n};\r\n\r\n/**\r\n * checks wether the reply is empty, or doesn't contain a correct JSON object\r\n * @param response the server response\r\n * @return {boolean} whether the response is valid\r\n */\r\nSphinxService.prototype.verify = function(response) {\r\n    console.log(`response from server:${response.toString()}`);\r\n\r\n    // test if server responded with a string object\r\n    if (typeof response !== 'string') {\r\n        return false;\r\n    }\r\n\r\n    // test if the string can be parsed into valid JSON\r\n    let json;\r\n\r\n    try {\r\n        json = JSON.parse(response);\r\n    } catch (error) {\r\n        console.log(error);\r\n\r\n        return false;\r\n    }\r\n\r\n    // check if the JSON has a \"objects\" value\r\n    if (json.objects === undefined) {\r\n        return false;\r\n    }\r\n\r\n    // get the \"objects\" value and check for a session ID\r\n    const array = json.objects;\r\n\r\n    if (!(array[0] && array[0]['session-id'])) {\r\n        return false;\r\n    }\r\n\r\n    // everything seems to be in order\r\n    return true;\r\n};\r\n\r\n/**\r\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\r\n * it will throw an error\r\n *\r\n * @returns {string} the URL to the sphinx4 server\r\n */\r\nfunction getURL() {\r\n    const message = 'config does not contain an url to a Sphinx4 https server';\r\n\r\n    if (config.sphinxURL === undefined) {\r\n        console.log(message);\r\n    } else {\r\n        const toReturn = config.sphinxURL;\r\n\r\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\r\n            return toReturn;\r\n        }\r\n        console.log(message);\r\n\r\n    }\r\n}\r\n\r\nmodule.exports = SphinxService;\r\n","/**\r\n * An object representing a transcribed word, with some additional information\r\n * @param word the word\r\n * @param begin the time the word was started being uttered\r\n * @param end the time the word stopped being uttered\r\n */\r\nconst Word = function(word, begin, end) {\r\n    this.word = word;\r\n    this.begin = begin;\r\n    this.end = end;\r\n};\r\n\r\n/**\r\n * Get the string representation of the word\r\n * @returns {*} the word as a string\r\n */\r\nWord.prototype.getWord = function() {\r\n    return this.word;\r\n};\r\n\r\n/**\r\n * Get the time the word started being uttered\r\n * @returns {*} the start time as an integer\r\n */\r\nWord.prototype.getBeginTime = function() {\r\n    return this.begin;\r\n};\r\n\r\n/**\r\n * Get the time the word stopped being uttered\r\n * @returns {*} the end time as an integer\r\n */\r\nWord.prototype.getEndTime = function() {\r\n    return this.end;\r\n};\r\n\r\nmodule.exports = Word;\r\n","/**\r\n * Abstract class representing an interface to implement a speech-to-text\r\n * service on.\r\n */\r\nconst TranscriptionService = function() {\r\n    throw new Error('TranscriptionService is abstract and cannot be'\r\n        + 'created');\r\n};\r\n\r\n/**\r\n * This method can be used to send the recorder audio stream and\r\n * retrieve the answer from the transcription service from the callback\r\n *\r\n * @param {RecordingResult} recordingResult a recordingResult object which\r\n * includes the recorded audio stream as a blob\r\n * @param {Function} callback  which will retrieve the a RecordingResult with\r\n *        the answer as a WordArray\r\n */\r\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\r\n    this.sendRequest(recordingResult.blob, response => {\r\n        if (this.verify(response)) {\r\n            recordingResult.wordArray = this.formatResponse(response);\r\n        } else {\r\n            console.log('the retrieved response from the server is not valid!');\r\n            recordingResult.wordArray = [];\r\n        }\r\n        callback(recordingResult);\r\n    });\r\n};\r\n\r\n/**\r\n * Abstract method which will rend the recorder audio stream to the implemented\r\n * transcription service and will retrieve an answer, which will be\r\n * called on the given callback method\r\n *\r\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\r\n * @param {function} callback function which will retrieve the answer\r\n *                            from the service\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\r\n    throw new Error('TranscriptionService.sendRequest is abstract');\r\n};\r\n\r\n/**\r\n * Abstract method which will parse the output from the implemented\r\n * transcription service to the expected format\r\n *\r\n * The transcriber class expect an array of word objects, where each word\r\n * object is one transcribed word by the service.\r\n *\r\n * The expected output of this method is an array of word objects, in\r\n * the correct order. That is, the first object in the array is the first word\r\n * being said, and the last word in the array is the last word being said\r\n *\r\n * @param response the answer from the speech-to-text server which needs to be\r\n *                 formatted\r\n * @return {Array<Word>} an array of Word objects\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.formatResponse = function(response) {\r\n    throw new Error('TranscriptionService.format is abstract');\r\n};\r\n\r\n/**\r\n * Abstract method which will verify that the response from the server is valid\r\n *\r\n * @param response the response from the server\r\n * @return {boolean} true if response is valid, false otherwise\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.verify = function(response) {\r\n    throw new Error('TranscriptionService.verify is abstract');\r\n};\r\n\r\nmodule.exports = TranscriptionService;\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n /* eslint-env node */\r\n'use strict';\r\n\r\nlet logDisabled_ = true;\r\nlet deprecationWarnings_ = true;\r\n\r\n/**\r\n * Extract browser version out of the provided user agent string.\r\n *\r\n * @param {!string} uastring userAgent string.\r\n * @param {!string} expr Regular expression used as match criteria.\r\n * @param {!number} pos position in the version string to be returned.\r\n * @return {!number} browser version.\r\n */\r\nexport function extractVersion(uastring, expr, pos) {\r\n  const match = uastring.match(expr);\r\n  return match && match.length >= pos && parseInt(match[pos], 10);\r\n}\r\n\r\n// Wraps the peerconnection event eventNameToWrap in a function\r\n// which returns the modified event object (or false to prevent\r\n// the event).\r\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const proto = window.RTCPeerConnection.prototype;\r\n  const nativeAddEventListener = proto.addEventListener;\r\n  proto.addEventListener = function(nativeEventName, cb) {\r\n    if (nativeEventName !== eventNameToWrap) {\r\n      return nativeAddEventListener.apply(this, arguments);\r\n    }\r\n    const wrappedCallback = (e) => {\r\n      const modifiedEvent = wrapper(e);\r\n      if (modifiedEvent) {\r\n        cb(modifiedEvent);\r\n      }\r\n    };\r\n    this._eventMap = this._eventMap || {};\r\n    this._eventMap[cb] = wrappedCallback;\r\n    return nativeAddEventListener.apply(this, [nativeEventName,\r\n      wrappedCallback]);\r\n  };\r\n\r\n  const nativeRemoveEventListener = proto.removeEventListener;\r\n  proto.removeEventListener = function(nativeEventName, cb) {\r\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\r\n        || !this._eventMap[cb]) {\r\n      return nativeRemoveEventListener.apply(this, arguments);\r\n    }\r\n    const unwrappedCb = this._eventMap[cb];\r\n    delete this._eventMap[cb];\r\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\r\n      unwrappedCb]);\r\n  };\r\n\r\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\r\n    get() {\r\n      return this['_on' + eventNameToWrap];\r\n    },\r\n    set(cb) {\r\n      if (this['_on' + eventNameToWrap]) {\r\n        this.removeEventListener(eventNameToWrap,\r\n            this['_on' + eventNameToWrap]);\r\n        delete this['_on' + eventNameToWrap];\r\n      }\r\n      if (cb) {\r\n        this.addEventListener(eventNameToWrap,\r\n            this['_on' + eventNameToWrap] = cb);\r\n      }\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n  });\r\n}\r\n\r\nexport function disableLog(bool) {\r\n  if (typeof bool !== 'boolean') {\r\n    return new Error('Argument type: ' + typeof bool +\r\n        '. Please use a boolean.');\r\n  }\r\n  logDisabled_ = bool;\r\n  return (bool) ? 'adapter.js logging disabled' :\r\n      'adapter.js logging enabled';\r\n}\r\n\r\n/**\r\n * Disable or enable deprecation warnings\r\n * @param {!boolean} bool set to true to disable warnings.\r\n */\r\nexport function disableWarnings(bool) {\r\n  if (typeof bool !== 'boolean') {\r\n    return new Error('Argument type: ' + typeof bool +\r\n        '. Please use a boolean.');\r\n  }\r\n  deprecationWarnings_ = !bool;\r\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\r\n}\r\n\r\nexport function log() {\r\n  if (typeof window === 'object') {\r\n    if (logDisabled_) {\r\n      return;\r\n    }\r\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\r\n      console.log.apply(console, arguments);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\r\n */\r\nexport function deprecated(oldMethod, newMethod) {\r\n  if (!deprecationWarnings_) {\r\n    return;\r\n  }\r\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\r\n      ' instead.');\r\n}\r\n\r\n/**\r\n * Browser detector.\r\n *\r\n * @return {object} result containing browser and version\r\n *     properties.\r\n */\r\nexport function detectBrowser(window) {\r\n  const {navigator} = window;\r\n\r\n  // Returned result object.\r\n  const result = {browser: null, version: null};\r\n\r\n  // Fail early if it's not a browser\r\n  if (typeof window === 'undefined' || !window.navigator) {\r\n    result.browser = 'Not a browser.';\r\n    return result;\r\n  }\r\n\r\n  if (navigator.mozGetUserMedia) { // Firefox.\r\n    result.browser = 'firefox';\r\n    result.version = extractVersion(navigator.userAgent,\r\n        /Firefox\\/(\\d+)\\./, 1);\r\n  } else if (navigator.webkitGetUserMedia ||\r\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\r\n       !window.RTCIceGatherer)) {\r\n    // Chrome, Chromium, Webview, Opera.\r\n    // Version matches Chrome/WebRTC version.\r\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\r\n    // more complicated fallback to webkitRTCPeerConnection.\r\n    result.browser = 'chrome';\r\n    result.version = extractVersion(navigator.userAgent,\r\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\r\n  } else if (navigator.mediaDevices &&\r\n      navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\r\n    result.browser = 'edge';\r\n    result.version = extractVersion(navigator.userAgent,\r\n        /Edge\\/(\\d+).(\\d+)$/, 2);\r\n  } else if (window.RTCPeerConnection &&\r\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\r\n    result.browser = 'safari';\r\n    result.version = extractVersion(navigator.userAgent,\r\n        /AppleWebKit\\/(\\d+)\\./, 1);\r\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\r\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\r\n  } else { // Default fallthrough: not supported.\r\n    result.browser = 'Not a supported browser.';\r\n    return result;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Checks if something is an object.\r\n *\r\n * @param {*} val The something you want to check.\r\n * @return true if val is an object, false otherwise.\r\n */\r\nfunction isObject(val) {\r\n  return Object.prototype.toString.call(val) === '[object Object]';\r\n}\r\n\r\n/**\r\n * Remove all empty objects and undefined values\r\n * from a nested object -- an enhanced and vanilla version\r\n * of Lodash's `compact`.\r\n */\r\nexport function compactObject(data) {\r\n  if (!isObject(data)) {\r\n    return data;\r\n  }\r\n\r\n  return Object.keys(data).reduce(function(accumulator, key) {\r\n    const isObj = isObject(data[key]);\r\n    const value = isObj ? compactObject(data[key]) : data[key];\r\n    const isEmptyObject = isObj && !Object.keys(value).length;\r\n    if (value === undefined || isEmptyObject) {\r\n      return accumulator;\r\n    }\r\n    return Object.assign(accumulator, {[key]: value});\r\n  }, {});\r\n}\r\n\r\n/* iterates the stats graph recursively. */\r\nexport function walkStats(stats, base, resultSet) {\r\n  if (!base || resultSet.has(base.id)) {\r\n    return;\r\n  }\r\n  resultSet.set(base.id, base);\r\n  Object.keys(base).forEach(name => {\r\n    if (name.endsWith('Id')) {\r\n      walkStats(stats, stats.get(base[name]), resultSet);\r\n    } else if (name.endsWith('Ids')) {\r\n      base[name].forEach(id => {\r\n        walkStats(stats, stats.get(id), resultSet);\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n/* filter getStats for a sender/receiver track. */\r\nexport function filterStats(result, track, outbound) {\r\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\r\n  const filteredResult = new Map();\r\n  if (track === null) {\r\n    return filteredResult;\r\n  }\r\n  const trackStats = [];\r\n  result.forEach(value => {\r\n    if (value.type === 'track' &&\r\n        value.trackIdentifier === track.id) {\r\n      trackStats.push(value);\r\n    }\r\n  });\r\n  trackStats.forEach(trackStat => {\r\n    result.forEach(stats => {\r\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\r\n        walkStats(result, stats, filteredResult);\r\n      }\r\n    });\r\n  });\r\n  return filteredResult;\r\n}\r\n\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\nimport * as utils from '../utils.js';\r\nconst logging = utils.log;\r\n\r\nexport function shimGetUserMedia(window) {\r\n  const navigator = window && window.navigator;\r\n\r\n  if (!navigator.mediaDevices) {\r\n    return;\r\n  }\r\n\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  const constraintsToChrome_ = function(c) {\r\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\r\n      return c;\r\n    }\r\n    const cc = {};\r\n    Object.keys(c).forEach(key => {\r\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\r\n        return;\r\n      }\r\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\r\n      if (r.exact !== undefined && typeof r.exact === 'number') {\r\n        r.min = r.max = r.exact;\r\n      }\r\n      const oldname_ = function(prefix, name) {\r\n        if (prefix) {\r\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\r\n        }\r\n        return (name === 'deviceId') ? 'sourceId' : name;\r\n      };\r\n      if (r.ideal !== undefined) {\r\n        cc.optional = cc.optional || [];\r\n        let oc = {};\r\n        if (typeof r.ideal === 'number') {\r\n          oc[oldname_('min', key)] = r.ideal;\r\n          cc.optional.push(oc);\r\n          oc = {};\r\n          oc[oldname_('max', key)] = r.ideal;\r\n          cc.optional.push(oc);\r\n        } else {\r\n          oc[oldname_('', key)] = r.ideal;\r\n          cc.optional.push(oc);\r\n        }\r\n      }\r\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\r\n        cc.mandatory = cc.mandatory || {};\r\n        cc.mandatory[oldname_('', key)] = r.exact;\r\n      } else {\r\n        ['min', 'max'].forEach(mix => {\r\n          if (r[mix] !== undefined) {\r\n            cc.mandatory = cc.mandatory || {};\r\n            cc.mandatory[oldname_(mix, key)] = r[mix];\r\n          }\r\n        });\r\n      }\r\n    });\r\n    if (c.advanced) {\r\n      cc.optional = (cc.optional || []).concat(c.advanced);\r\n    }\r\n    return cc;\r\n  };\r\n\r\n  const shimConstraints_ = function(constraints, func) {\r\n    if (browserDetails.version >= 61) {\r\n      return func(constraints);\r\n    }\r\n    constraints = JSON.parse(JSON.stringify(constraints));\r\n    if (constraints && typeof constraints.audio === 'object') {\r\n      const remap = function(obj, a, b) {\r\n        if (a in obj && !(b in obj)) {\r\n          obj[b] = obj[a];\r\n          delete obj[a];\r\n        }\r\n      };\r\n      constraints = JSON.parse(JSON.stringify(constraints));\r\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\r\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\r\n      constraints.audio = constraintsToChrome_(constraints.audio);\r\n    }\r\n    if (constraints && typeof constraints.video === 'object') {\r\n      // Shim facingMode for mobile & surface pro.\r\n      let face = constraints.video.facingMode;\r\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\r\n      const getSupportedFacingModeLies = browserDetails.version < 66;\r\n\r\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\r\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\r\n          !(navigator.mediaDevices.getSupportedConstraints &&\r\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\r\n            !getSupportedFacingModeLies)) {\r\n        delete constraints.video.facingMode;\r\n        let matches;\r\n        if (face.exact === 'environment' || face.ideal === 'environment') {\r\n          matches = ['back', 'rear'];\r\n        } else if (face.exact === 'user' || face.ideal === 'user') {\r\n          matches = ['front'];\r\n        }\r\n        if (matches) {\r\n          // Look for matches in label, or use last cam for back (typical).\r\n          return navigator.mediaDevices.enumerateDevices()\r\n          .then(devices => {\r\n            devices = devices.filter(d => d.kind === 'videoinput');\r\n            let dev = devices.find(d => matches.some(match =>\r\n              d.label.toLowerCase().includes(match)));\r\n            if (!dev && devices.length && matches.includes('back')) {\r\n              dev = devices[devices.length - 1]; // more likely the back cam\r\n            }\r\n            if (dev) {\r\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\r\n                                                        {ideal: dev.deviceId};\r\n            }\r\n            constraints.video = constraintsToChrome_(constraints.video);\r\n            logging('chrome: ' + JSON.stringify(constraints));\r\n            return func(constraints);\r\n          });\r\n        }\r\n      }\r\n      constraints.video = constraintsToChrome_(constraints.video);\r\n    }\r\n    logging('chrome: ' + JSON.stringify(constraints));\r\n    return func(constraints);\r\n  };\r\n\r\n  const shimError_ = function(e) {\r\n    if (browserDetails.version >= 64) {\r\n      return e;\r\n    }\r\n    return {\r\n      name: {\r\n        PermissionDeniedError: 'NotAllowedError',\r\n        PermissionDismissedError: 'NotAllowedError',\r\n        InvalidStateError: 'NotAllowedError',\r\n        DevicesNotFoundError: 'NotFoundError',\r\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\r\n        TrackStartError: 'NotReadableError',\r\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\r\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\r\n        TabCaptureError: 'AbortError',\r\n        ScreenCaptureError: 'AbortError',\r\n        DeviceCaptureError: 'AbortError'\r\n      }[e.name] || e.name,\r\n      message: e.message,\r\n      constraint: e.constraint || e.constraintName,\r\n      toString() {\r\n        return this.name + (this.message && ': ') + this.message;\r\n      }\r\n    };\r\n  };\r\n\r\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\r\n    shimConstraints_(constraints, c => {\r\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\r\n        if (onError) {\r\n          onError(shimError_(e));\r\n        }\r\n      });\r\n    });\r\n  };\r\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\r\n\r\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\r\n  // function which returns a Promise, it does not accept spec-style\r\n  // constraints.\r\n  if (navigator.mediaDevices.getUserMedia) {\r\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\r\n        bind(navigator.mediaDevices);\r\n    navigator.mediaDevices.getUserMedia = function(cs) {\r\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\r\n        if (c.audio && !stream.getAudioTracks().length ||\r\n            c.video && !stream.getVideoTracks().length) {\r\n          stream.getTracks().forEach(track => {\r\n            track.stop();\r\n          });\r\n          throw new DOMException('', 'NotFoundError');\r\n        }\r\n        return stream;\r\n      }, e => Promise.reject(shimError_(e))));\r\n    };\r\n  }\r\n}\r\n","/*\r\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\nexport function shimGetDisplayMedia(window, getSourceId) {\r\n  if (window.navigator.mediaDevices &&\r\n    'getDisplayMedia' in window.navigator.mediaDevices) {\r\n    return;\r\n  }\r\n  if (!(window.navigator.mediaDevices)) {\r\n    return;\r\n  }\r\n  // getSourceId is a function that returns a promise resolving with\r\n  // the sourceId of the screen/window/tab to be shared.\r\n  if (typeof getSourceId !== 'function') {\r\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\r\n        'a function');\r\n    return;\r\n  }\r\n  window.navigator.mediaDevices.getDisplayMedia =\r\n    function getDisplayMedia(constraints) {\r\n      return getSourceId(constraints)\r\n        .then(sourceId => {\r\n          const widthSpecified = constraints.video && constraints.video.width;\r\n          const heightSpecified = constraints.video &&\r\n            constraints.video.height;\r\n          const frameRateSpecified = constraints.video &&\r\n            constraints.video.frameRate;\r\n          constraints.video = {\r\n            mandatory: {\r\n              chromeMediaSource: 'desktop',\r\n              chromeMediaSourceId: sourceId,\r\n              maxFrameRate: frameRateSpecified || 3\r\n            }\r\n          };\r\n          if (widthSpecified) {\r\n            constraints.video.mandatory.maxWidth = widthSpecified;\r\n          }\r\n          if (heightSpecified) {\r\n            constraints.video.mandatory.maxHeight = heightSpecified;\r\n          }\r\n          return window.navigator.mediaDevices.getUserMedia(constraints);\r\n        });\r\n    };\r\n}\r\n","\r\n/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n /* eslint-env node */\r\n'use strict';\r\nimport * as utils from '../utils.js';\r\n\r\nexport {shimGetUserMedia} from './getusermedia';\r\nexport {shimGetDisplayMedia} from './getdisplaymedia';\r\n\r\nexport function shimMediaStream(window) {\r\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\r\n}\r\n\r\nexport function shimOnTrack(window) {\r\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\r\n      window.RTCPeerConnection.prototype)) {\r\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\r\n      get() {\r\n        return this._ontrack;\r\n      },\r\n      set(f) {\r\n        if (this._ontrack) {\r\n          this.removeEventListener('track', this._ontrack);\r\n        }\r\n        this.addEventListener('track', this._ontrack = f);\r\n      },\r\n      enumerable: true,\r\n      configurable: true\r\n    });\r\n    const origSetRemoteDescription =\r\n        window.RTCPeerConnection.prototype.setRemoteDescription;\r\n    window.RTCPeerConnection.prototype.setRemoteDescription =\r\n      function setRemoteDescription() {\r\n        if (!this._ontrackpoly) {\r\n          this._ontrackpoly = (e) => {\r\n            // onaddstream does not fire when a track is added to an existing\r\n            // stream. But stream.onaddtrack is implemented so we use that.\r\n            e.stream.addEventListener('addtrack', te => {\r\n              let receiver;\r\n              if (window.RTCPeerConnection.prototype.getReceivers) {\r\n                receiver = this.getReceivers()\r\n                  .find(r => r.track && r.track.id === te.track.id);\r\n              } else {\r\n                receiver = {track: te.track};\r\n              }\r\n\r\n              const event = new Event('track');\r\n              event.track = te.track;\r\n              event.receiver = receiver;\r\n              event.transceiver = {receiver};\r\n              event.streams = [e.stream];\r\n              this.dispatchEvent(event);\r\n            });\r\n            e.stream.getTracks().forEach(track => {\r\n              let receiver;\r\n              if (window.RTCPeerConnection.prototype.getReceivers) {\r\n                receiver = this.getReceivers()\r\n                  .find(r => r.track && r.track.id === track.id);\r\n              } else {\r\n                receiver = {track};\r\n              }\r\n              const event = new Event('track');\r\n              event.track = track;\r\n              event.receiver = receiver;\r\n              event.transceiver = {receiver};\r\n              event.streams = [e.stream];\r\n              this.dispatchEvent(event);\r\n            });\r\n          };\r\n          this.addEventListener('addstream', this._ontrackpoly);\r\n        }\r\n        return origSetRemoteDescription.apply(this, arguments);\r\n      };\r\n  } else {\r\n    // even if RTCRtpTransceiver is in window, it is only used and\r\n    // emitted in unified-plan. Unfortunately this means we need\r\n    // to unconditionally wrap the event.\r\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\r\n      if (!e.transceiver) {\r\n        Object.defineProperty(e, 'transceiver',\r\n          {value: {receiver: e.receiver}});\r\n      }\r\n      return e;\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimGetSendersWithDtmf(window) {\r\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\r\n  if (typeof window === 'object' && window.RTCPeerConnection &&\r\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\r\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\r\n    const shimSenderWithDtmf = function(pc, track) {\r\n      return {\r\n        track,\r\n        get dtmf() {\r\n          if (this._dtmf === undefined) {\r\n            if (track.kind === 'audio') {\r\n              this._dtmf = pc.createDTMFSender(track);\r\n            } else {\r\n              this._dtmf = null;\r\n            }\r\n          }\r\n          return this._dtmf;\r\n        },\r\n        _pc: pc\r\n      };\r\n    };\r\n\r\n    // augment addTrack when getSenders is not available.\r\n    if (!window.RTCPeerConnection.prototype.getSenders) {\r\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n        this._senders = this._senders || [];\r\n        return this._senders.slice(); // return a copy of the internal state.\r\n      };\r\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n      window.RTCPeerConnection.prototype.addTrack =\r\n        function addTrack(track, stream) {\r\n          let sender = origAddTrack.apply(this, arguments);\r\n          if (!sender) {\r\n            sender = shimSenderWithDtmf(this, track);\r\n            this._senders.push(sender);\r\n          }\r\n          return sender;\r\n        };\r\n\r\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\r\n      window.RTCPeerConnection.prototype.removeTrack =\r\n        function removeTrack(sender) {\r\n          origRemoveTrack.apply(this, arguments);\r\n          const idx = this._senders.indexOf(sender);\r\n          if (idx !== -1) {\r\n            this._senders.splice(idx, 1);\r\n          }\r\n        };\r\n    }\r\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\r\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n      this._senders = this._senders || [];\r\n      origAddStream.apply(this, [stream]);\r\n      stream.getTracks().forEach(track => {\r\n        this._senders.push(shimSenderWithDtmf(this, track));\r\n      });\r\n    };\r\n\r\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\r\n    window.RTCPeerConnection.prototype.removeStream =\r\n      function removeStream(stream) {\r\n        this._senders = this._senders || [];\r\n        origRemoveStream.apply(this, [stream]);\r\n\r\n        stream.getTracks().forEach(track => {\r\n          const sender = this._senders.find(s => s.track === track);\r\n          if (sender) { // remove sender\r\n            this._senders.splice(this._senders.indexOf(sender), 1);\r\n          }\r\n        });\r\n      };\r\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\r\n             'getSenders' in window.RTCPeerConnection.prototype &&\r\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\r\n             window.RTCRtpSender &&\r\n             !('dtmf' in window.RTCRtpSender.prototype)) {\r\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\r\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n      const senders = origGetSenders.apply(this, []);\r\n      senders.forEach(sender => sender._pc = this);\r\n      return senders;\r\n    };\r\n\r\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\r\n      get() {\r\n        if (this._dtmf === undefined) {\r\n          if (this.track.kind === 'audio') {\r\n            this._dtmf = this._pc.createDTMFSender(this.track);\r\n          } else {\r\n            this._dtmf = null;\r\n          }\r\n        }\r\n        return this._dtmf;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimGetStats(window) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n\r\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\r\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\r\n    const [selector, onSucc, onErr] = arguments;\r\n\r\n    // If selector is a function then we are in the old style stats so just\r\n    // pass back the original getStats format to avoid breaking old users.\r\n    if (arguments.length > 0 && typeof selector === 'function') {\r\n      return origGetStats.apply(this, arguments);\r\n    }\r\n\r\n    // When spec-style getStats is supported, return those when called with\r\n    // either no arguments or the selector argument is null.\r\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\r\n        typeof selector !== 'function')) {\r\n      return origGetStats.apply(this, []);\r\n    }\r\n\r\n    const fixChromeStats_ = function(response) {\r\n      const standardReport = {};\r\n      const reports = response.result();\r\n      reports.forEach(report => {\r\n        const standardStats = {\r\n          id: report.id,\r\n          timestamp: report.timestamp,\r\n          type: {\r\n            localcandidate: 'local-candidate',\r\n            remotecandidate: 'remote-candidate'\r\n          }[report.type] || report.type\r\n        };\r\n        report.names().forEach(name => {\r\n          standardStats[name] = report.stat(name);\r\n        });\r\n        standardReport[standardStats.id] = standardStats;\r\n      });\r\n\r\n      return standardReport;\r\n    };\r\n\r\n    // shim getStats with maplike support\r\n    const makeMapStats = function(stats) {\r\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\r\n    };\r\n\r\n    if (arguments.length >= 2) {\r\n      const successCallbackWrapper_ = function(response) {\r\n        onSucc(makeMapStats(fixChromeStats_(response)));\r\n      };\r\n\r\n      return origGetStats.apply(this, [successCallbackWrapper_,\r\n        selector]);\r\n    }\r\n\r\n    // promise-support\r\n    return new Promise((resolve, reject) => {\r\n      origGetStats.apply(this, [\r\n        function(response) {\r\n          resolve(makeMapStats(fixChromeStats_(response)));\r\n        }, reject]);\r\n    }).then(onSucc, onErr);\r\n  };\r\n}\r\n\r\nexport function shimSenderReceiverGetStats(window) {\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\r\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\r\n    return;\r\n  }\r\n\r\n  // shim sender stats.\r\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\r\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\r\n    if (origGetSenders) {\r\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n        const senders = origGetSenders.apply(this, []);\r\n        senders.forEach(sender => sender._pc = this);\r\n        return senders;\r\n      };\r\n    }\r\n\r\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n    if (origAddTrack) {\r\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\r\n        const sender = origAddTrack.apply(this, arguments);\r\n        sender._pc = this;\r\n        return sender;\r\n      };\r\n    }\r\n    window.RTCRtpSender.prototype.getStats = function getStats() {\r\n      const sender = this;\r\n      return this._pc.getStats().then(result =>\r\n        /* Note: this will include stats of all senders that\r\n         *   send a track with the same id as sender.track as\r\n         *   it is not possible to identify the RTCRtpSender.\r\n         */\r\n        utils.filterStats(result, sender.track, true));\r\n    };\r\n  }\r\n\r\n  // shim receiver stats.\r\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\r\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\r\n    if (origGetReceivers) {\r\n      window.RTCPeerConnection.prototype.getReceivers =\r\n        function getReceivers() {\r\n          const receivers = origGetReceivers.apply(this, []);\r\n          receivers.forEach(receiver => receiver._pc = this);\r\n          return receivers;\r\n        };\r\n    }\r\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\r\n      e.receiver._pc = e.srcElement;\r\n      return e;\r\n    });\r\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\r\n      const receiver = this;\r\n      return this._pc.getStats().then(result =>\r\n        utils.filterStats(result, receiver.track, false));\r\n    };\r\n  }\r\n\r\n  if (!('getStats' in window.RTCRtpSender.prototype &&\r\n      'getStats' in window.RTCRtpReceiver.prototype)) {\r\n    return;\r\n  }\r\n\r\n  // shim RTCPeerConnection.getStats(track).\r\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\r\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\r\n    if (arguments.length > 0 &&\r\n        arguments[0] instanceof window.MediaStreamTrack) {\r\n      const track = arguments[0];\r\n      let sender;\r\n      let receiver;\r\n      let err;\r\n      this.getSenders().forEach(s => {\r\n        if (s.track === track) {\r\n          if (sender) {\r\n            err = true;\r\n          } else {\r\n            sender = s;\r\n          }\r\n        }\r\n      });\r\n      this.getReceivers().forEach(r => {\r\n        if (r.track === track) {\r\n          if (receiver) {\r\n            err = true;\r\n          } else {\r\n            receiver = r;\r\n          }\r\n        }\r\n        return r.track === track;\r\n      });\r\n      if (err || (sender && receiver)) {\r\n        return Promise.reject(new DOMException(\r\n          'There are more than one sender or receiver for the track.',\r\n          'InvalidAccessError'));\r\n      } else if (sender) {\r\n        return sender.getStats();\r\n      } else if (receiver) {\r\n        return receiver.getStats();\r\n      }\r\n      return Promise.reject(new DOMException(\r\n        'There is no sender or receiver for the track.',\r\n        'InvalidAccessError'));\r\n    }\r\n    return origGetStats.apply(this, arguments);\r\n  };\r\n}\r\n\r\nexport function shimAddTrackRemoveTrackWithNative(window) {\r\n  // shim addTrack/removeTrack with native variants in order to make\r\n  // the interactions with legacy getLocalStreams behave as in other browsers.\r\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\r\n  window.RTCPeerConnection.prototype.getLocalStreams =\r\n    function getLocalStreams() {\r\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n      return Object.keys(this._shimmedLocalStreams)\r\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\r\n    };\r\n\r\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n  window.RTCPeerConnection.prototype.addTrack =\r\n    function addTrack(track, stream) {\r\n      if (!stream) {\r\n        return origAddTrack.apply(this, arguments);\r\n      }\r\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n\r\n      const sender = origAddTrack.apply(this, arguments);\r\n      if (!this._shimmedLocalStreams[stream.id]) {\r\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\r\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\r\n        this._shimmedLocalStreams[stream.id].push(sender);\r\n      }\r\n      return sender;\r\n    };\r\n\r\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\r\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n\r\n    stream.getTracks().forEach(track => {\r\n      const alreadyExists = this.getSenders().find(s => s.track === track);\r\n      if (alreadyExists) {\r\n        throw new DOMException('Track already exists.',\r\n            'InvalidAccessError');\r\n      }\r\n    });\r\n    const existingSenders = this.getSenders();\r\n    origAddStream.apply(this, arguments);\r\n    const newSenders = this.getSenders()\r\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\r\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\r\n  };\r\n\r\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\r\n  window.RTCPeerConnection.prototype.removeStream =\r\n    function removeStream(stream) {\r\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n      delete this._shimmedLocalStreams[stream.id];\r\n      return origRemoveStream.apply(this, arguments);\r\n    };\r\n\r\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\r\n  window.RTCPeerConnection.prototype.removeTrack =\r\n    function removeTrack(sender) {\r\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n      if (sender) {\r\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\r\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\r\n          if (idx !== -1) {\r\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\r\n          }\r\n          if (this._shimmedLocalStreams[streamId].length === 1) {\r\n            delete this._shimmedLocalStreams[streamId];\r\n          }\r\n        });\r\n      }\r\n      return origRemoveTrack.apply(this, arguments);\r\n    };\r\n}\r\n\r\nexport function shimAddTrackRemoveTrack(window) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const browserDetails = utils.detectBrowser(window);\r\n  // shim addTrack and removeTrack.\r\n  if (window.RTCPeerConnection.prototype.addTrack &&\r\n      browserDetails.version >= 65) {\r\n    return shimAddTrackRemoveTrackWithNative(window);\r\n  }\r\n\r\n  // also shim pc.getLocalStreams when addTrack is shimmed\r\n  // to return the original streams.\r\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\r\n      .getLocalStreams;\r\n  window.RTCPeerConnection.prototype.getLocalStreams =\r\n    function getLocalStreams() {\r\n      const nativeStreams = origGetLocalStreams.apply(this);\r\n      this._reverseStreams = this._reverseStreams || {};\r\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\r\n    };\r\n\r\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\r\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n    this._streams = this._streams || {};\r\n    this._reverseStreams = this._reverseStreams || {};\r\n\r\n    stream.getTracks().forEach(track => {\r\n      const alreadyExists = this.getSenders().find(s => s.track === track);\r\n      if (alreadyExists) {\r\n        throw new DOMException('Track already exists.',\r\n            'InvalidAccessError');\r\n      }\r\n    });\r\n    // Add identity mapping for consistency with addTrack.\r\n    // Unless this is being used with a stream from addTrack.\r\n    if (!this._reverseStreams[stream.id]) {\r\n      const newStream = new window.MediaStream(stream.getTracks());\r\n      this._streams[stream.id] = newStream;\r\n      this._reverseStreams[newStream.id] = stream;\r\n      stream = newStream;\r\n    }\r\n    origAddStream.apply(this, [stream]);\r\n  };\r\n\r\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\r\n  window.RTCPeerConnection.prototype.removeStream =\r\n    function removeStream(stream) {\r\n      this._streams = this._streams || {};\r\n      this._reverseStreams = this._reverseStreams || {};\r\n\r\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\r\n      delete this._reverseStreams[(this._streams[stream.id] ?\r\n          this._streams[stream.id].id : stream.id)];\r\n      delete this._streams[stream.id];\r\n    };\r\n\r\n  window.RTCPeerConnection.prototype.addTrack =\r\n    function addTrack(track, stream) {\r\n      if (this.signalingState === 'closed') {\r\n        throw new DOMException(\r\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\r\n          'InvalidStateError');\r\n      }\r\n      const streams = [].slice.call(arguments, 1);\r\n      if (streams.length !== 1 ||\r\n          !streams[0].getTracks().find(t => t === track)) {\r\n        // this is not fully correct but all we can manage without\r\n        // [[associated MediaStreams]] internal slot.\r\n        throw new DOMException(\r\n          'The adapter.js addTrack polyfill only supports a single ' +\r\n          ' stream which is associated with the specified track.',\r\n          'NotSupportedError');\r\n      }\r\n\r\n      const alreadyExists = this.getSenders().find(s => s.track === track);\r\n      if (alreadyExists) {\r\n        throw new DOMException('Track already exists.',\r\n            'InvalidAccessError');\r\n      }\r\n\r\n      this._streams = this._streams || {};\r\n      this._reverseStreams = this._reverseStreams || {};\r\n      const oldStream = this._streams[stream.id];\r\n      if (oldStream) {\r\n        // this is using odd Chrome behaviour, use with caution:\r\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\r\n        // Note: we rely on the high-level addTrack/dtmf shim to\r\n        // create the sender with a dtmf sender.\r\n        oldStream.addTrack(track);\r\n\r\n        // Trigger ONN async.\r\n        Promise.resolve().then(() => {\r\n          this.dispatchEvent(new Event('negotiationneeded'));\r\n        });\r\n      } else {\r\n        const newStream = new window.MediaStream([track]);\r\n        this._streams[stream.id] = newStream;\r\n        this._reverseStreams[newStream.id] = stream;\r\n        this.addStream(newStream);\r\n      }\r\n      return this.getSenders().find(s => s.track === track);\r\n    };\r\n\r\n  // replace the internal stream id with the external one and\r\n  // vice versa.\r\n  function replaceInternalStreamId(pc, description) {\r\n    let sdp = description.sdp;\r\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\r\n      const externalStream = pc._reverseStreams[internalId];\r\n      const internalStream = pc._streams[externalStream.id];\r\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\r\n          externalStream.id);\r\n    });\r\n    return new RTCSessionDescription({\r\n      type: description.type,\r\n      sdp\r\n    });\r\n  }\r\n  function replaceExternalStreamId(pc, description) {\r\n    let sdp = description.sdp;\r\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\r\n      const externalStream = pc._reverseStreams[internalId];\r\n      const internalStream = pc._streams[externalStream.id];\r\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\r\n          internalStream.id);\r\n    });\r\n    return new RTCSessionDescription({\r\n      type: description.type,\r\n      sdp\r\n    });\r\n  }\r\n  ['createOffer', 'createAnswer'].forEach(function(method) {\r\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\r\n    const methodObj = {[method]() {\r\n      const args = arguments;\r\n      const isLegacyCall = arguments.length &&\r\n          typeof arguments[0] === 'function';\r\n      if (isLegacyCall) {\r\n        return nativeMethod.apply(this, [\r\n          (description) => {\r\n            const desc = replaceInternalStreamId(this, description);\r\n            args[0].apply(null, [desc]);\r\n          },\r\n          (err) => {\r\n            if (args[1]) {\r\n              args[1].apply(null, err);\r\n            }\r\n          }, arguments[2]\r\n        ]);\r\n      }\r\n      return nativeMethod.apply(this, arguments)\r\n      .then(description => replaceInternalStreamId(this, description));\r\n    }};\r\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\r\n  });\r\n\r\n  const origSetLocalDescription =\r\n      window.RTCPeerConnection.prototype.setLocalDescription;\r\n  window.RTCPeerConnection.prototype.setLocalDescription =\r\n    function setLocalDescription() {\r\n      if (!arguments.length || !arguments[0].type) {\r\n        return origSetLocalDescription.apply(this, arguments);\r\n      }\r\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\r\n      return origSetLocalDescription.apply(this, arguments);\r\n    };\r\n\r\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\r\n\r\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\r\n      window.RTCPeerConnection.prototype, 'localDescription');\r\n  Object.defineProperty(window.RTCPeerConnection.prototype,\r\n      'localDescription', {\r\n        get() {\r\n          const description = origLocalDescription.get.apply(this);\r\n          if (description.type === '') {\r\n            return description;\r\n          }\r\n          return replaceInternalStreamId(this, description);\r\n        }\r\n      });\r\n\r\n  window.RTCPeerConnection.prototype.removeTrack =\r\n    function removeTrack(sender) {\r\n      if (this.signalingState === 'closed') {\r\n        throw new DOMException(\r\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\r\n          'InvalidStateError');\r\n      }\r\n      // We can not yet check for sender instanceof RTCRtpSender\r\n      // since we shim RTPSender. So we check if sender._pc is set.\r\n      if (!sender._pc) {\r\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\r\n            'does not implement interface RTCRtpSender.', 'TypeError');\r\n      }\r\n      const isLocal = sender._pc === this;\r\n      if (!isLocal) {\r\n        throw new DOMException('Sender was not created by this connection.',\r\n            'InvalidAccessError');\r\n      }\r\n\r\n      // Search for the native stream the senders track belongs to.\r\n      this._streams = this._streams || {};\r\n      let stream;\r\n      Object.keys(this._streams).forEach(streamid => {\r\n        const hasTrack = this._streams[streamid].getTracks()\r\n          .find(track => sender.track === track);\r\n        if (hasTrack) {\r\n          stream = this._streams[streamid];\r\n        }\r\n      });\r\n\r\n      if (stream) {\r\n        if (stream.getTracks().length === 1) {\r\n          // if this is the last track of the stream, remove the stream. This\r\n          // takes care of any shimmed _senders.\r\n          this.removeStream(this._reverseStreams[stream.id]);\r\n        } else {\r\n          // relying on the same odd chrome behaviour as above.\r\n          stream.removeTrack(sender.track);\r\n        }\r\n        this.dispatchEvent(new Event('negotiationneeded'));\r\n      }\r\n    };\r\n}\r\n\r\nexport function shimPeerConnection(window) {\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\r\n    // very basic support for old versions.\r\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\r\n  }\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n\r\n  const addIceCandidateNullSupported =\r\n    window.RTCPeerConnection.prototype.addIceCandidate.length === 0;\r\n\r\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\r\n  if (browserDetails.version < 53) {\r\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\r\n        .forEach(function(method) {\r\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\r\n          const methodObj = {[method]() {\r\n            arguments[0] = new ((method === 'addIceCandidate') ?\r\n                window.RTCIceCandidate :\r\n                window.RTCSessionDescription)(arguments[0]);\r\n            return nativeMethod.apply(this, arguments);\r\n          }};\r\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\r\n        });\r\n  }\r\n\r\n  // support for addIceCandidate(null or undefined)\r\n  const nativeAddIceCandidate =\r\n      window.RTCPeerConnection.prototype.addIceCandidate;\r\n  window.RTCPeerConnection.prototype.addIceCandidate =\r\n    function addIceCandidate() {\r\n      if (!addIceCandidateNullSupported && !arguments[0]) {\r\n        if (arguments[1]) {\r\n          arguments[1].apply(null);\r\n        }\r\n        return Promise.resolve();\r\n      }\r\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\r\n      // in older versions. Native support planned for Chrome M77.\r\n      if (browserDetails.version < 78 &&\r\n        arguments[0] && arguments[0].candidate === '') {\r\n        return Promise.resolve();\r\n      }\r\n      return nativeAddIceCandidate.apply(this, arguments);\r\n    };\r\n}\r\n\r\nexport function fixNegotiationNeeded(window) {\r\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\r\n    const pc = e.target;\r\n    if (pc.signalingState !== 'stable') {\r\n      return;\r\n    }\r\n    return e;\r\n  });\r\n}\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n /* eslint-env node */\r\n'use strict';\r\n\r\nexport function shimGetUserMedia(window) {\r\n  const navigator = window && window.navigator;\r\n\r\n  const shimError_ = function(e) {\r\n    return {\r\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\r\n      message: e.message,\r\n      constraint: e.constraint,\r\n      toString() {\r\n        return this.name;\r\n      }\r\n    };\r\n  };\r\n\r\n  // getUserMedia error shim.\r\n  const origGetUserMedia = navigator.mediaDevices.getUserMedia.\r\n      bind(navigator.mediaDevices);\r\n  navigator.mediaDevices.getUserMedia = function(c) {\r\n    return origGetUserMedia(c).catch(e => Promise.reject(shimError_(e)));\r\n  };\r\n}\r\n","/*\r\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n /* eslint-env node */\r\n'use strict';\r\n\r\nexport function shimGetDisplayMedia(window) {\r\n  if (!('getDisplayMedia' in window.navigator)) {\r\n    return;\r\n  }\r\n  if (!(window.navigator.mediaDevices)) {\r\n    return;\r\n  }\r\n  if (window.navigator.mediaDevices &&\r\n    'getDisplayMedia' in window.navigator.mediaDevices) {\r\n    return;\r\n  }\r\n  window.navigator.mediaDevices.getDisplayMedia =\r\n    window.navigator.getDisplayMedia.bind(window.navigator);\r\n}\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport * as utils from '../utils';\r\nimport {filterIceServers} from './filtericeservers';\r\nimport shimRTCPeerConnection from 'rtcpeerconnection-shim';\r\n\r\nexport {shimGetUserMedia} from './getusermedia';\r\nexport {shimGetDisplayMedia} from './getdisplaymedia';\r\n\r\nexport function shimPeerConnection(window) {\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  if (window.RTCIceGatherer) {\r\n    if (!window.RTCIceCandidate) {\r\n      window.RTCIceCandidate = function RTCIceCandidate(args) {\r\n        return args;\r\n      };\r\n    }\r\n    if (!window.RTCSessionDescription) {\r\n      window.RTCSessionDescription = function RTCSessionDescription(args) {\r\n        return args;\r\n      };\r\n    }\r\n    // this adds an additional event listener to MediaStrackTrack that signals\r\n    // when a tracks enabled property was changed. Workaround for a bug in\r\n    // addStream, see below. No longer required in 15025+\r\n    if (browserDetails.version < 15025) {\r\n      const origMSTEnabled = Object.getOwnPropertyDescriptor(\r\n          window.MediaStreamTrack.prototype, 'enabled');\r\n      Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\r\n        set(value) {\r\n          origMSTEnabled.set.call(this, value);\r\n          const ev = new Event('enabled');\r\n          ev.enabled = value;\r\n          this.dispatchEvent(ev);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // ORTC defines the DTMF sender a bit different.\r\n  // https://github.com/w3c/ortc/issues/714\r\n  if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\r\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\r\n      get() {\r\n        if (this._dtmf === undefined) {\r\n          if (this.track.kind === 'audio') {\r\n            this._dtmf = new window.RTCDtmfSender(this);\r\n          } else if (this.track.kind === 'video') {\r\n            this._dtmf = null;\r\n          }\r\n        }\r\n        return this._dtmf;\r\n      }\r\n    });\r\n  }\r\n  // Edge currently only implements the RTCDtmfSender, not the\r\n  // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*\r\n  if (window.RTCDtmfSender && !window.RTCDTMFSender) {\r\n    window.RTCDTMFSender = window.RTCDtmfSender;\r\n  }\r\n\r\n  const RTCPeerConnectionShim = shimRTCPeerConnection(window,\r\n      browserDetails.version);\r\n  window.RTCPeerConnection = function RTCPeerConnection(config) {\r\n    if (config && config.iceServers) {\r\n      config.iceServers = filterIceServers(config.iceServers,\r\n        browserDetails.version);\r\n      utils.log('ICE servers after filtering:', config.iceServers);\r\n    }\r\n    return new RTCPeerConnectionShim(config);\r\n  };\r\n  window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;\r\n}\r\n\r\nexport function shimReplaceTrack(window) {\r\n  // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\r\n  if (window.RTCRtpSender &&\r\n      !('replaceTrack' in window.RTCRtpSender.prototype)) {\r\n    window.RTCRtpSender.prototype.replaceTrack =\r\n        window.RTCRtpSender.prototype.setTrack;\r\n  }\r\n}\r\n","/*\r\n *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport * as utils from '../utils';\r\n// Edge does not like\r\n// 1) stun: filtered after 14393 unless ?transport=udp is present\r\n// 2) turn: that does not have all of turn:host:port?transport=udp\r\n// 3) turn: with ipv6 addresses\r\n// 4) turn: occurring muliple times\r\nexport function filterIceServers(iceServers, edgeVersion) {\r\n  let hasTurn = false;\r\n  iceServers = JSON.parse(JSON.stringify(iceServers));\r\n  return iceServers.filter(server => {\r\n    if (server && (server.urls || server.url)) {\r\n      var urls = server.urls || server.url;\r\n      if (server.url && !server.urls) {\r\n        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\r\n      }\r\n      const isString = typeof urls === 'string';\r\n      if (isString) {\r\n        urls = [urls];\r\n      }\r\n      urls = urls.filter(url => {\r\n        // filter STUN unconditionally.\r\n        if (url.indexOf('stun:') === 0) {\r\n          return false;\r\n        }\r\n\r\n        const validTurn = url.startsWith('turn') &&\r\n            !url.startsWith('turn:[') &&\r\n            url.includes('transport=udp');\r\n        if (validTurn && !hasTurn) {\r\n          hasTurn = true;\r\n          return true;\r\n        }\r\n        return validTurn && !hasTurn;\r\n      });\r\n\r\n      delete server.url;\r\n      server.urls = isString ? urls[0] : urls;\r\n      return !!urls.length;\r\n    }\r\n  });\r\n}\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport * as utils from '../utils';\r\n\r\nexport function shimGetUserMedia(window) {\r\n  const browserDetails = utils.detectBrowser(window);\r\n  const navigator = window && window.navigator;\r\n  const MediaStreamTrack = window && window.MediaStreamTrack;\r\n\r\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\r\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\r\n    utils.deprecated('navigator.getUserMedia',\r\n        'navigator.mediaDevices.getUserMedia');\r\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\r\n  };\r\n\r\n  if (!(browserDetails.version > 55 &&\r\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\r\n    const remap = function(obj, a, b) {\r\n      if (a in obj && !(b in obj)) {\r\n        obj[b] = obj[a];\r\n        delete obj[a];\r\n      }\r\n    };\r\n\r\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\r\n        bind(navigator.mediaDevices);\r\n    navigator.mediaDevices.getUserMedia = function(c) {\r\n      if (typeof c === 'object' && typeof c.audio === 'object') {\r\n        c = JSON.parse(JSON.stringify(c));\r\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\r\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\r\n      }\r\n      return nativeGetUserMedia(c);\r\n    };\r\n\r\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\r\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\r\n      MediaStreamTrack.prototype.getSettings = function() {\r\n        const obj = nativeGetSettings.apply(this, arguments);\r\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\r\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\r\n        return obj;\r\n      };\r\n    }\r\n\r\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\r\n      const nativeApplyConstraints =\r\n        MediaStreamTrack.prototype.applyConstraints;\r\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\r\n        if (this.kind === 'audio' && typeof c === 'object') {\r\n          c = JSON.parse(JSON.stringify(c));\r\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\r\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\r\n        }\r\n        return nativeApplyConstraints.apply(this, [c]);\r\n      };\r\n    }\r\n  }\r\n}\r\n","/*\r\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\r\n  if (window.navigator.mediaDevices &&\r\n    'getDisplayMedia' in window.navigator.mediaDevices) {\r\n    return;\r\n  }\r\n  if (!(window.navigator.mediaDevices)) {\r\n    return;\r\n  }\r\n  window.navigator.mediaDevices.getDisplayMedia =\r\n    function getDisplayMedia(constraints) {\r\n      if (!(constraints && constraints.video)) {\r\n        const err = new DOMException('getDisplayMedia without video ' +\r\n            'constraints is undefined');\r\n        err.name = 'NotFoundError';\r\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\r\n        err.code = 8;\r\n        return Promise.reject(err);\r\n      }\r\n      if (constraints.video === true) {\r\n        constraints.video = {mediaSource: preferredMediaSource};\r\n      } else {\r\n        constraints.video.mediaSource = preferredMediaSource;\r\n      }\r\n      return window.navigator.mediaDevices.getUserMedia(constraints);\r\n    };\r\n}\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport * as utils from '../utils';\r\nexport {shimGetUserMedia} from './getusermedia';\r\nexport {shimGetDisplayMedia} from './getdisplaymedia';\r\n\r\nexport function shimOnTrack(window) {\r\n  if (typeof window === 'object' && window.RTCTrackEvent &&\r\n      ('receiver' in window.RTCTrackEvent.prototype) &&\r\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\r\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\r\n      get() {\r\n        return {receiver: this.receiver};\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimPeerConnection(window) {\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  if (typeof window !== 'object' ||\r\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\r\n    return; // probably media.peerconnection.enabled=false in about:config\r\n  }\r\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\r\n    // very basic support for old versions.\r\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\r\n  }\r\n\r\n  if (browserDetails.version < 53) {\r\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\r\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\r\n        .forEach(function(method) {\r\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\r\n          const methodObj = {[method]() {\r\n            arguments[0] = new ((method === 'addIceCandidate') ?\r\n                window.RTCIceCandidate :\r\n                window.RTCSessionDescription)(arguments[0]);\r\n            return nativeMethod.apply(this, arguments);\r\n          }};\r\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\r\n        });\r\n  }\r\n\r\n  // support for addIceCandidate(null or undefined)\r\n  // as well as ignoring {sdpMid, candidate: \"\"}\r\n  if (browserDetails.version < 68) {\r\n    const nativeAddIceCandidate =\r\n        window.RTCPeerConnection.prototype.addIceCandidate;\r\n    window.RTCPeerConnection.prototype.addIceCandidate =\r\n    function addIceCandidate() {\r\n      if (!arguments[0]) {\r\n        if (arguments[1]) {\r\n          arguments[1].apply(null);\r\n        }\r\n        return Promise.resolve();\r\n      }\r\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\r\n      // in older versions.\r\n      if (arguments[0] && arguments[0].candidate === '') {\r\n        return Promise.resolve();\r\n      }\r\n      return nativeAddIceCandidate.apply(this, arguments);\r\n    };\r\n  }\r\n\r\n  const modernStatsTypes = {\r\n    inboundrtp: 'inbound-rtp',\r\n    outboundrtp: 'outbound-rtp',\r\n    candidatepair: 'candidate-pair',\r\n    localcandidate: 'local-candidate',\r\n    remotecandidate: 'remote-candidate'\r\n  };\r\n\r\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\r\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\r\n    const [selector, onSucc, onErr] = arguments;\r\n    return nativeGetStats.apply(this, [selector || null])\r\n      .then(stats => {\r\n        if (browserDetails.version < 53 && !onSucc) {\r\n          // Shim only promise getStats with spec-hyphens in type names\r\n          // Leave callback version alone; misc old uses of forEach before Map\r\n          try {\r\n            stats.forEach(stat => {\r\n              stat.type = modernStatsTypes[stat.type] || stat.type;\r\n            });\r\n          } catch (e) {\r\n            if (e.name !== 'TypeError') {\r\n              throw e;\r\n            }\r\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\r\n            stats.forEach((stat, i) => {\r\n              stats.set(i, Object.assign({}, stat, {\r\n                type: modernStatsTypes[stat.type] || stat.type\r\n              }));\r\n            });\r\n          }\r\n        }\r\n        return stats;\r\n      })\r\n      .then(onSucc, onErr);\r\n  };\r\n}\r\n\r\nexport function shimSenderGetStats(window) {\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\r\n      window.RTCRtpSender)) {\r\n    return;\r\n  }\r\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\r\n    return;\r\n  }\r\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\r\n  if (origGetSenders) {\r\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n      const senders = origGetSenders.apply(this, []);\r\n      senders.forEach(sender => sender._pc = this);\r\n      return senders;\r\n    };\r\n  }\r\n\r\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n  if (origAddTrack) {\r\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\r\n      const sender = origAddTrack.apply(this, arguments);\r\n      sender._pc = this;\r\n      return sender;\r\n    };\r\n  }\r\n  window.RTCRtpSender.prototype.getStats = function getStats() {\r\n    return this.track ? this._pc.getStats(this.track) :\r\n        Promise.resolve(new Map());\r\n  };\r\n}\r\n\r\nexport function shimReceiverGetStats(window) {\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\r\n      window.RTCRtpSender)) {\r\n    return;\r\n  }\r\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\r\n    return;\r\n  }\r\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\r\n  if (origGetReceivers) {\r\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\r\n      const receivers = origGetReceivers.apply(this, []);\r\n      receivers.forEach(receiver => receiver._pc = this);\r\n      return receivers;\r\n    };\r\n  }\r\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\r\n    e.receiver._pc = e.srcElement;\r\n    return e;\r\n  });\r\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\r\n    return this._pc.getStats(this.track);\r\n  };\r\n}\r\n\r\nexport function shimRemoveStream(window) {\r\n  if (!window.RTCPeerConnection ||\r\n      'removeStream' in window.RTCPeerConnection.prototype) {\r\n    return;\r\n  }\r\n  window.RTCPeerConnection.prototype.removeStream =\r\n    function removeStream(stream) {\r\n      utils.deprecated('removeStream', 'removeTrack');\r\n      this.getSenders().forEach(sender => {\r\n        if (sender.track && stream.getTracks().includes(sender.track)) {\r\n          this.removeTrack(sender);\r\n        }\r\n      });\r\n    };\r\n}\r\n\r\nexport function shimRTCDataChannel(window) {\r\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\r\n  if (window.DataChannel && !window.RTCDataChannel) {\r\n    window.RTCDataChannel = window.DataChannel;\r\n  }\r\n}\r\n\r\nexport function shimAddTransceiver(window) {\r\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\r\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\r\n    return;\r\n  }\r\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\r\n  if (origAddTransceiver) {\r\n    window.RTCPeerConnection.prototype.addTransceiver =\r\n      function addTransceiver() {\r\n        this.setParametersPromises = [];\r\n        const initParameters = arguments[1];\r\n        const shouldPerformCheck = initParameters &&\r\n                                  'sendEncodings' in initParameters;\r\n        if (shouldPerformCheck) {\r\n          // If sendEncodings params are provided, validate grammar\r\n          initParameters.sendEncodings.forEach((encodingParam) => {\r\n            if ('rid' in encodingParam) {\r\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\r\n              if (!ridRegex.test(encodingParam.rid)) {\r\n                throw new TypeError('Invalid RID value provided.');\r\n              }\r\n            }\r\n            if ('scaleResolutionDownBy' in encodingParam) {\r\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\r\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\r\n              }\r\n            }\r\n            if ('maxFramerate' in encodingParam) {\r\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\r\n                throw new RangeError('max_framerate must be >= 0.0');\r\n              }\r\n            }\r\n          });\r\n        }\r\n        const transceiver = origAddTransceiver.apply(this, arguments);\r\n        if (shouldPerformCheck) {\r\n          // Check if the init options were applied. If not we do this in an\r\n          // asynchronous way and save the promise reference in a global object.\r\n          // This is an ugly hack, but at the same time is way more robust than\r\n          // checking the sender parameters before and after the createOffer\r\n          // Also note that after the createoffer we are not 100% sure that\r\n          // the params were asynchronously applied so we might miss the\r\n          // opportunity to recreate offer.\r\n          const {sender} = transceiver;\r\n          const params = sender.getParameters();\r\n          if (!('encodings' in params)) {\r\n            params.encodings = initParameters.sendEncodings;\r\n            this.setParametersPromises.push(\r\n              sender.setParameters(params)\r\n              .catch(() => {})\r\n            );\r\n          }\r\n        }\r\n        return transceiver;\r\n      };\r\n  }\r\n}\r\n\r\nexport function shimCreateOffer(window) {\r\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\r\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\r\n    return;\r\n  }\r\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\r\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\r\n    if (this.setParametersPromises && this.setParametersPromises.length) {\r\n      return Promise.all(this.setParametersPromises)\r\n      .then(() => {\r\n        return origCreateOffer.apply(this, arguments);\r\n      })\r\n      .finally(() => {\r\n        this.setParametersPromises = [];\r\n      });\r\n    }\r\n    return origCreateOffer.apply(this, arguments);\r\n  };\r\n}\r\n\r\nexport function shimCreateAnswer(window) {\r\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\r\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\r\n    return;\r\n  }\r\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\r\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\r\n    if (this.setParametersPromises && this.setParametersPromises.length) {\r\n      return Promise.all(this.setParametersPromises)\r\n      .then(() => {\r\n        return origCreateAnswer.apply(this, arguments);\r\n      })\r\n      .finally(() => {\r\n        this.setParametersPromises = [];\r\n      });\r\n    }\r\n    return origCreateAnswer.apply(this, arguments);\r\n  };\r\n}","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n'use strict';\r\nimport * as utils from '../utils';\r\n\r\nexport function shimLocalStreamsAPI(window) {\r\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\r\n    window.RTCPeerConnection.prototype.getLocalStreams =\r\n      function getLocalStreams() {\r\n        if (!this._localStreams) {\r\n          this._localStreams = [];\r\n        }\r\n        return this._localStreams;\r\n      };\r\n  }\r\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\r\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\r\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n      if (!this._localStreams) {\r\n        this._localStreams = [];\r\n      }\r\n      if (!this._localStreams.includes(stream)) {\r\n        this._localStreams.push(stream);\r\n      }\r\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\r\n      // Safari orders by track id.\r\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\r\n        stream));\r\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\r\n        stream));\r\n    };\r\n\r\n    window.RTCPeerConnection.prototype.addTrack =\r\n      function addTrack(track) {\r\n        const stream = arguments[1];\r\n        if (stream) {\r\n          if (!this._localStreams) {\r\n            this._localStreams = [stream];\r\n          } else if (!this._localStreams.includes(stream)) {\r\n            this._localStreams.push(stream);\r\n          }\r\n        }\r\n        return _addTrack.apply(this, arguments);\r\n      };\r\n  }\r\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\r\n    window.RTCPeerConnection.prototype.removeStream =\r\n      function removeStream(stream) {\r\n        if (!this._localStreams) {\r\n          this._localStreams = [];\r\n        }\r\n        const index = this._localStreams.indexOf(stream);\r\n        if (index === -1) {\r\n          return;\r\n        }\r\n        this._localStreams.splice(index, 1);\r\n        const tracks = stream.getTracks();\r\n        this.getSenders().forEach(sender => {\r\n          if (tracks.includes(sender.track)) {\r\n            this.removeTrack(sender);\r\n          }\r\n        });\r\n      };\r\n  }\r\n}\r\n\r\nexport function shimRemoteStreamsAPI(window) {\r\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\r\n    window.RTCPeerConnection.prototype.getRemoteStreams =\r\n      function getRemoteStreams() {\r\n        return this._remoteStreams ? this._remoteStreams : [];\r\n      };\r\n  }\r\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\r\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\r\n      get() {\r\n        return this._onaddstream;\r\n      },\r\n      set(f) {\r\n        if (this._onaddstream) {\r\n          this.removeEventListener('addstream', this._onaddstream);\r\n          this.removeEventListener('track', this._onaddstreampoly);\r\n        }\r\n        this.addEventListener('addstream', this._onaddstream = f);\r\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\r\n          e.streams.forEach(stream => {\r\n            if (!this._remoteStreams) {\r\n              this._remoteStreams = [];\r\n            }\r\n            if (this._remoteStreams.includes(stream)) {\r\n              return;\r\n            }\r\n            this._remoteStreams.push(stream);\r\n            const event = new Event('addstream');\r\n            event.stream = stream;\r\n            this.dispatchEvent(event);\r\n          });\r\n        });\r\n      }\r\n    });\r\n    const origSetRemoteDescription =\r\n      window.RTCPeerConnection.prototype.setRemoteDescription;\r\n    window.RTCPeerConnection.prototype.setRemoteDescription =\r\n      function setRemoteDescription() {\r\n        const pc = this;\r\n        if (!this._onaddstreampoly) {\r\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\r\n            e.streams.forEach(stream => {\r\n              if (!pc._remoteStreams) {\r\n                pc._remoteStreams = [];\r\n              }\r\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\r\n                return;\r\n              }\r\n              pc._remoteStreams.push(stream);\r\n              const event = new Event('addstream');\r\n              event.stream = stream;\r\n              pc.dispatchEvent(event);\r\n            });\r\n          });\r\n        }\r\n        return origSetRemoteDescription.apply(pc, arguments);\r\n      };\r\n  }\r\n}\r\n\r\nexport function shimCallbacksAPI(window) {\r\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const prototype = window.RTCPeerConnection.prototype;\r\n  const origCreateOffer = prototype.createOffer;\r\n  const origCreateAnswer = prototype.createAnswer;\r\n  const setLocalDescription = prototype.setLocalDescription;\r\n  const setRemoteDescription = prototype.setRemoteDescription;\r\n  const addIceCandidate = prototype.addIceCandidate;\r\n\r\n  prototype.createOffer =\r\n    function createOffer(successCallback, failureCallback) {\r\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\r\n      const promise = origCreateOffer.apply(this, [options]);\r\n      if (!failureCallback) {\r\n        return promise;\r\n      }\r\n      promise.then(successCallback, failureCallback);\r\n      return Promise.resolve();\r\n    };\r\n\r\n  prototype.createAnswer =\r\n    function createAnswer(successCallback, failureCallback) {\r\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\r\n      const promise = origCreateAnswer.apply(this, [options]);\r\n      if (!failureCallback) {\r\n        return promise;\r\n      }\r\n      promise.then(successCallback, failureCallback);\r\n      return Promise.resolve();\r\n    };\r\n\r\n  let withCallback = function(description, successCallback, failureCallback) {\r\n    const promise = setLocalDescription.apply(this, [description]);\r\n    if (!failureCallback) {\r\n      return promise;\r\n    }\r\n    promise.then(successCallback, failureCallback);\r\n    return Promise.resolve();\r\n  };\r\n  prototype.setLocalDescription = withCallback;\r\n\r\n  withCallback = function(description, successCallback, failureCallback) {\r\n    const promise = setRemoteDescription.apply(this, [description]);\r\n    if (!failureCallback) {\r\n      return promise;\r\n    }\r\n    promise.then(successCallback, failureCallback);\r\n    return Promise.resolve();\r\n  };\r\n  prototype.setRemoteDescription = withCallback;\r\n\r\n  withCallback = function(candidate, successCallback, failureCallback) {\r\n    const promise = addIceCandidate.apply(this, [candidate]);\r\n    if (!failureCallback) {\r\n      return promise;\r\n    }\r\n    promise.then(successCallback, failureCallback);\r\n    return Promise.resolve();\r\n  };\r\n  prototype.addIceCandidate = withCallback;\r\n}\r\n\r\nexport function shimGetUserMedia(window) {\r\n  const navigator = window && window.navigator;\r\n\r\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n    // shim not needed in Safari 12.1\r\n    const mediaDevices = navigator.mediaDevices;\r\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\r\n    navigator.mediaDevices.getUserMedia = (constraints) => {\r\n      return _getUserMedia(shimConstraints(constraints));\r\n    };\r\n  }\r\n\r\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\r\n    navigator.mediaDevices.getUserMedia) {\r\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\r\n      navigator.mediaDevices.getUserMedia(constraints)\r\n      .then(cb, errcb);\r\n    }.bind(navigator);\r\n  }\r\n}\r\n\r\nexport function shimConstraints(constraints) {\r\n  if (constraints && constraints.video !== undefined) {\r\n    return Object.assign({},\r\n      constraints,\r\n      {video: utils.compactObject(constraints.video)}\r\n    );\r\n  }\r\n\r\n  return constraints;\r\n}\r\n\r\nexport function shimRTCIceServerUrls(window) {\r\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\r\n  const OrigPeerConnection = window.RTCPeerConnection;\r\n  window.RTCPeerConnection =\r\n    function RTCPeerConnection(pcConfig, pcConstraints) {\r\n      if (pcConfig && pcConfig.iceServers) {\r\n        const newIceServers = [];\r\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\r\n          let server = pcConfig.iceServers[i];\r\n          if (!server.hasOwnProperty('urls') &&\r\n              server.hasOwnProperty('url')) {\r\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\r\n            server = JSON.parse(JSON.stringify(server));\r\n            server.urls = server.url;\r\n            delete server.url;\r\n            newIceServers.push(server);\r\n          } else {\r\n            newIceServers.push(pcConfig.iceServers[i]);\r\n          }\r\n        }\r\n        pcConfig.iceServers = newIceServers;\r\n      }\r\n      return new OrigPeerConnection(pcConfig, pcConstraints);\r\n    };\r\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\r\n  // wrap static methods. Currently just generateCertificate.\r\n  if ('generateCertificate' in window.RTCPeerConnection) {\r\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\r\n      get() {\r\n        return OrigPeerConnection.generateCertificate;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimTrackEventTransceiver(window) {\r\n  // Add event.transceiver member over deprecated event.receiver\r\n  if (typeof window === 'object' && window.RTCTrackEvent &&\r\n      'receiver' in window.RTCTrackEvent.prototype &&\r\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\r\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\r\n      get() {\r\n        return {receiver: this.receiver};\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimCreateOfferLegacy(window) {\r\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\r\n  window.RTCPeerConnection.prototype.createOffer =\r\n    function createOffer(offerOptions) {\r\n      if (offerOptions) {\r\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\r\n          // support bit values\r\n          offerOptions.offerToReceiveAudio =\r\n            !!offerOptions.offerToReceiveAudio;\r\n        }\r\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\r\n          transceiver.receiver.track.kind === 'audio');\r\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\r\n          if (audioTransceiver.direction === 'sendrecv') {\r\n            if (audioTransceiver.setDirection) {\r\n              audioTransceiver.setDirection('sendonly');\r\n            } else {\r\n              audioTransceiver.direction = 'sendonly';\r\n            }\r\n          } else if (audioTransceiver.direction === 'recvonly') {\r\n            if (audioTransceiver.setDirection) {\r\n              audioTransceiver.setDirection('inactive');\r\n            } else {\r\n              audioTransceiver.direction = 'inactive';\r\n            }\r\n          }\r\n        } else if (offerOptions.offerToReceiveAudio === true &&\r\n            !audioTransceiver) {\r\n          this.addTransceiver('audio');\r\n        }\r\n\r\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\r\n          // support bit values\r\n          offerOptions.offerToReceiveVideo =\r\n            !!offerOptions.offerToReceiveVideo;\r\n        }\r\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\r\n          transceiver.receiver.track.kind === 'video');\r\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\r\n          if (videoTransceiver.direction === 'sendrecv') {\r\n            if (videoTransceiver.setDirection) {\r\n              videoTransceiver.setDirection('sendonly');\r\n            } else {\r\n              videoTransceiver.direction = 'sendonly';\r\n            }\r\n          } else if (videoTransceiver.direction === 'recvonly') {\r\n            if (videoTransceiver.setDirection) {\r\n              videoTransceiver.setDirection('inactive');\r\n            } else {\r\n              videoTransceiver.direction = 'inactive';\r\n            }\r\n          }\r\n        } else if (offerOptions.offerToReceiveVideo === true &&\r\n            !videoTransceiver) {\r\n          this.addTransceiver('video');\r\n        }\r\n      }\r\n      return origCreateOffer.apply(this, arguments);\r\n    };\r\n}\r\n","/*\r\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport SDPUtils from 'sdp';\r\nimport * as utils from './utils';\r\n\r\nexport function shimRTCIceCandidate(window) {\r\n  // foundation is arbitrarily chosen as an indicator for full support for\r\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\r\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\r\n      window.RTCIceCandidate.prototype)) {\r\n    return;\r\n  }\r\n\r\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\r\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\r\n    // Remove the a= which shouldn't be part of the candidate string.\r\n    if (typeof args === 'object' && args.candidate &&\r\n        args.candidate.indexOf('a=') === 0) {\r\n      args = JSON.parse(JSON.stringify(args));\r\n      args.candidate = args.candidate.substr(2);\r\n    }\r\n\r\n    if (args.candidate && args.candidate.length) {\r\n      // Augment the native candidate with the parsed fields.\r\n      const nativeCandidate = new NativeRTCIceCandidate(args);\r\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\r\n      const augmentedCandidate = Object.assign(nativeCandidate,\r\n          parsedCandidate);\r\n\r\n      // Add a serializer that does not serialize the extra attributes.\r\n      augmentedCandidate.toJSON = function toJSON() {\r\n        return {\r\n          candidate: augmentedCandidate.candidate,\r\n          sdpMid: augmentedCandidate.sdpMid,\r\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\r\n          usernameFragment: augmentedCandidate.usernameFragment,\r\n        };\r\n      };\r\n      return augmentedCandidate;\r\n    }\r\n    return new NativeRTCIceCandidate(args);\r\n  };\r\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\r\n\r\n  // Hook up the augmented candidate in onicecandidate and\r\n  // addEventListener('icecandidate', ...)\r\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\r\n    if (e.candidate) {\r\n      Object.defineProperty(e, 'candidate', {\r\n        value: new window.RTCIceCandidate(e.candidate),\r\n        writable: 'false'\r\n      });\r\n    }\r\n    return e;\r\n  });\r\n}\r\n\r\nexport function shimMaxMessageSize(window) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\r\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\r\n      get() {\r\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\r\n      }\r\n    });\r\n  }\r\n\r\n  const sctpInDescription = function(description) {\r\n    if (!description || !description.sdp) {\r\n      return false;\r\n    }\r\n    const sections = SDPUtils.splitSections(description.sdp);\r\n    sections.shift();\r\n    return sections.some(mediaSection => {\r\n      const mLine = SDPUtils.parseMLine(mediaSection);\r\n      return mLine && mLine.kind === 'application'\r\n          && mLine.protocol.indexOf('SCTP') !== -1;\r\n    });\r\n  };\r\n\r\n  const getRemoteFirefoxVersion = function(description) {\r\n    // TODO: Is there a better solution for detecting Firefox?\r\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\r\n    if (match === null || match.length < 2) {\r\n      return -1;\r\n    }\r\n    const version = parseInt(match[1], 10);\r\n    // Test for NaN (yes, this is ugly)\r\n    return version !== version ? -1 : version;\r\n  };\r\n\r\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\r\n    // Every implementation we know can send at least 64 KiB.\r\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\r\n    //       data does not reach the other peer reliably.\r\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\r\n    let canSendMaxMessageSize = 65536;\r\n    if (browserDetails.browser === 'firefox') {\r\n      if (browserDetails.version < 57) {\r\n        if (remoteIsFirefox === -1) {\r\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\r\n          // fragmentation.\r\n          canSendMaxMessageSize = 16384;\r\n        } else {\r\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\r\n          // messages. Thus, supporting ~2 GiB when sending.\r\n          canSendMaxMessageSize = 2147483637;\r\n        }\r\n      } else if (browserDetails.version < 60) {\r\n        // Currently, all FF >= 57 will reset the remote maximum message size\r\n        // to the default value when a data channel is created at a later\r\n        // stage. :(\r\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\r\n        canSendMaxMessageSize =\r\n          browserDetails.version === 57 ? 65535 : 65536;\r\n      } else {\r\n        // FF >= 60 supports sending ~2 GiB\r\n        canSendMaxMessageSize = 2147483637;\r\n      }\r\n    }\r\n    return canSendMaxMessageSize;\r\n  };\r\n\r\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\r\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\r\n    //       every implementation we know supports receiving 65536 bytes.\r\n    let maxMessageSize = 65536;\r\n\r\n    // FF 57 has a slightly incorrect default remote max message size, so\r\n    // we need to adjust it here to avoid a failure when sending.\r\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\r\n    if (browserDetails.browser === 'firefox'\r\n         && browserDetails.version === 57) {\r\n      maxMessageSize = 65535;\r\n    }\r\n\r\n    const match = SDPUtils.matchPrefix(description.sdp,\r\n      'a=max-message-size:');\r\n    if (match.length > 0) {\r\n      maxMessageSize = parseInt(match[0].substr(19), 10);\r\n    } else if (browserDetails.browser === 'firefox' &&\r\n                remoteIsFirefox !== -1) {\r\n      // If the maximum message size is not present in the remote SDP and\r\n      // both local and remote are Firefox, the remote peer can receive\r\n      // ~2 GiB.\r\n      maxMessageSize = 2147483637;\r\n    }\r\n    return maxMessageSize;\r\n  };\r\n\r\n  const origSetRemoteDescription =\r\n      window.RTCPeerConnection.prototype.setRemoteDescription;\r\n  window.RTCPeerConnection.prototype.setRemoteDescription =\r\n    function setRemoteDescription() {\r\n      this._sctp = null;\r\n      // Chrome decided to not expose .sctp in plan-b mode.\r\n      // As usual, adapter.js has to do an 'ugly worakaround'\r\n      // to cover up the mess.\r\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\r\n        const {sdpSemantics} = this.getConfiguration();\r\n        if (sdpSemantics === 'plan-b') {\r\n          Object.defineProperty(this, 'sctp', {\r\n            get() {\r\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\r\n            },\r\n            enumerable: true,\r\n            configurable: true,\r\n          });\r\n        }\r\n      }\r\n\r\n      if (sctpInDescription(arguments[0])) {\r\n        // Check if the remote is FF.\r\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\r\n\r\n        // Get the maximum message size the local peer is capable of sending\r\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\r\n\r\n        // Get the maximum message size of the remote peer.\r\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\r\n\r\n        // Determine final maximum message size\r\n        let maxMessageSize;\r\n        if (canSendMMS === 0 && remoteMMS === 0) {\r\n          maxMessageSize = Number.POSITIVE_INFINITY;\r\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\r\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\r\n        } else {\r\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\r\n        }\r\n\r\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\r\n        // attribute.\r\n        const sctp = {};\r\n        Object.defineProperty(sctp, 'maxMessageSize', {\r\n          get() {\r\n            return maxMessageSize;\r\n          }\r\n        });\r\n        this._sctp = sctp;\r\n      }\r\n\r\n      return origSetRemoteDescription.apply(this, arguments);\r\n    };\r\n}\r\n\r\nexport function shimSendThrowTypeError(window) {\r\n  if (!(window.RTCPeerConnection &&\r\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\r\n    return;\r\n  }\r\n\r\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\r\n  //       message size can be reset for all data channels at a later stage.\r\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\r\n\r\n  function wrapDcSend(dc, pc) {\r\n    const origDataChannelSend = dc.send;\r\n    dc.send = function send() {\r\n      const data = arguments[0];\r\n      const length = data.length || data.size || data.byteLength;\r\n      if (dc.readyState === 'open' &&\r\n          pc.sctp && length > pc.sctp.maxMessageSize) {\r\n        throw new TypeError('Message too large (can send a maximum of ' +\r\n          pc.sctp.maxMessageSize + ' bytes)');\r\n      }\r\n      return origDataChannelSend.apply(dc, arguments);\r\n    };\r\n  }\r\n  const origCreateDataChannel =\r\n    window.RTCPeerConnection.prototype.createDataChannel;\r\n  window.RTCPeerConnection.prototype.createDataChannel =\r\n    function createDataChannel() {\r\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\r\n      wrapDcSend(dataChannel, this);\r\n      return dataChannel;\r\n    };\r\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\r\n    wrapDcSend(e.channel, e.target);\r\n    return e;\r\n  });\r\n}\r\n\r\n\r\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\r\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\r\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\r\n * since DTLS failures would be hidden. See\r\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\r\n * for the Firefox tracking bug.\r\n */\r\nexport function shimConnectionState(window) {\r\n  if (!window.RTCPeerConnection ||\r\n      'connectionState' in window.RTCPeerConnection.prototype) {\r\n    return;\r\n  }\r\n  const proto = window.RTCPeerConnection.prototype;\r\n  Object.defineProperty(proto, 'connectionState', {\r\n    get() {\r\n      return {\r\n        completed: 'connected',\r\n        checking: 'connecting'\r\n      }[this.iceConnectionState] || this.iceConnectionState;\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n  });\r\n  Object.defineProperty(proto, 'onconnectionstatechange', {\r\n    get() {\r\n      return this._onconnectionstatechange || null;\r\n    },\r\n    set(cb) {\r\n      if (this._onconnectionstatechange) {\r\n        this.removeEventListener('connectionstatechange',\r\n            this._onconnectionstatechange);\r\n        delete this._onconnectionstatechange;\r\n      }\r\n      if (cb) {\r\n        this.addEventListener('connectionstatechange',\r\n            this._onconnectionstatechange = cb);\r\n      }\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n  });\r\n\r\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\r\n    const origMethod = proto[method];\r\n    proto[method] = function() {\r\n      if (!this._connectionstatechangepoly) {\r\n        this._connectionstatechangepoly = e => {\r\n          const pc = e.target;\r\n          if (pc._lastConnectionState !== pc.connectionState) {\r\n            pc._lastConnectionState = pc.connectionState;\r\n            const newEvent = new Event('connectionstatechange', e);\r\n            pc.dispatchEvent(newEvent);\r\n          }\r\n          return e;\r\n        };\r\n        this.addEventListener('iceconnectionstatechange',\r\n          this._connectionstatechangepoly);\r\n      }\r\n      return origMethod.apply(this, arguments);\r\n    };\r\n  });\r\n}\r\n\r\nexport function removeAllowExtmapMixed(window) {\r\n  /* remove a=extmap-allow-mixed for Chrome < M71 */\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const browserDetails = utils.detectBrowser(window);\r\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\r\n    return;\r\n  }\r\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\r\n  window.RTCPeerConnection.prototype.setRemoteDescription =\r\n  function setRemoteDescription(desc) {\r\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\r\n      desc.sdp = desc.sdp.split('\\n').filter((line) => {\r\n        return line.trim() !== 'a=extmap-allow-mixed';\r\n      }).join('\\n');\r\n    }\r\n    return nativeSRD.apply(this, arguments);\r\n  };\r\n}\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n\r\n'use strict';\r\n\r\nimport {adapterFactory} from './adapter_factory.js';\r\n\r\nconst adapter = adapterFactory({window});\r\nexport default adapter;\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\nimport * as utils from './utils';\r\n\r\n  // Browser shims.\r\nimport * as chromeShim from './chrome/chrome_shim';\r\nimport * as edgeShim from './edge/edge_shim';\r\nimport * as firefoxShim from './firefox/firefox_shim';\r\nimport * as safariShim from './safari/safari_shim';\r\nimport * as commonShim from './common_shim';\r\n\r\n// Shimming starts here.\r\nexport function adapterFactory({window} = {}, options = {\r\n  shimChrome: true,\r\n  shimFirefox: true,\r\n  shimEdge: true,\r\n  shimSafari: true,\r\n}) {\r\n  // Utils.\r\n  const logging = utils.log;\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  const adapter = {\r\n    browserDetails,\r\n    commonShim,\r\n    extractVersion: utils.extractVersion,\r\n    disableLog: utils.disableLog,\r\n    disableWarnings: utils.disableWarnings\r\n  };\r\n\r\n  // Shim browser if found.\r\n  switch (browserDetails.browser) {\r\n    case 'chrome':\r\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\r\n          !options.shimChrome) {\r\n        logging('Chrome shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming chrome.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = chromeShim;\r\n\r\n      chromeShim.shimGetUserMedia(window);\r\n      chromeShim.shimMediaStream(window);\r\n      chromeShim.shimPeerConnection(window);\r\n      chromeShim.shimOnTrack(window);\r\n      chromeShim.shimAddTrackRemoveTrack(window);\r\n      chromeShim.shimGetSendersWithDtmf(window);\r\n      chromeShim.shimGetStats(window);\r\n      chromeShim.shimSenderReceiverGetStats(window);\r\n      chromeShim.fixNegotiationNeeded(window);\r\n\r\n      commonShim.shimRTCIceCandidate(window);\r\n      commonShim.shimConnectionState(window);\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      commonShim.removeAllowExtmapMixed(window);\r\n      break;\r\n    case 'firefox':\r\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\r\n          !options.shimFirefox) {\r\n        logging('Firefox shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming firefox.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = firefoxShim;\r\n\r\n      firefoxShim.shimGetUserMedia(window);\r\n      firefoxShim.shimPeerConnection(window);\r\n      firefoxShim.shimOnTrack(window);\r\n      firefoxShim.shimRemoveStream(window);\r\n      firefoxShim.shimSenderGetStats(window);\r\n      firefoxShim.shimReceiverGetStats(window);\r\n      firefoxShim.shimRTCDataChannel(window);\r\n      firefoxShim.shimAddTransceiver(window);\r\n      firefoxShim.shimCreateOffer(window);\r\n      firefoxShim.shimCreateAnswer(window);\r\n\r\n      commonShim.shimRTCIceCandidate(window);\r\n      commonShim.shimConnectionState(window);\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      break;\r\n    case 'edge':\r\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\r\n        logging('MS edge shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming edge.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = edgeShim;\r\n\r\n      edgeShim.shimGetUserMedia(window);\r\n      edgeShim.shimGetDisplayMedia(window);\r\n      edgeShim.shimPeerConnection(window);\r\n      edgeShim.shimReplaceTrack(window);\r\n\r\n      // the edge shim implements the full RTCIceCandidate object.\r\n\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      break;\r\n    case 'safari':\r\n      if (!safariShim || !options.shimSafari) {\r\n        logging('Safari shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming safari.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = safariShim;\r\n\r\n      safariShim.shimRTCIceServerUrls(window);\r\n      safariShim.shimCreateOfferLegacy(window);\r\n      safariShim.shimCallbacksAPI(window);\r\n      safariShim.shimLocalStreamsAPI(window);\r\n      safariShim.shimRemoteStreamsAPI(window);\r\n      safariShim.shimTrackEventTransceiver(window);\r\n      safariShim.shimGetUserMedia(window);\r\n\r\n      commonShim.shimRTCIceCandidate(window);\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      commonShim.removeAllowExtmapMixed(window);\r\n      break;\r\n    default:\r\n      logging('Unsupported browser!');\r\n      break;\r\n  }\r\n\r\n  return adapter;\r\n}\r\n"],"sourceRoot":""}