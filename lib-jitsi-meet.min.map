{"version":3,"sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./node_modules/strophe.js/dist/strophe.umd.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDPUtil.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./modules/flags/FeatureFlags.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SDP.js","webpack://JitsiMeetJS/./service/RTC/MediaDirection.ts","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/@jitsi/js-utils/jitsi-local-storage/index.js","webpack://JitsiMeetJS/./modules/detection/DetectionEvents.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./service/RTC/CodecMimeType.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./modules/xmpp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./node_modules/lodash.clonedeep/index.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./modules/xmpp/XmppConnection.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/(webpack)/buildin/global.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./modules/connectivity/NetworkInfo.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/./modules/e2ee/OlmAdapter.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEncryption.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./modules/xmpp/MediaSessionEvents.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./node_modules/base64-js/index.js","webpack://JitsiMeetJS/./modules/xmpp/SDPDiffer.js","webpack://JitsiMeetJS/./modules/RTC/TPCUtils.js","webpack://JitsiMeetJS/./node_modules/process/browser.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/statistics/constants.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/detection/TrackVADEmitter.js","webpack://JitsiMeetJS/./modules/webaudio/WebAudioUtils.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/util/Deferred.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./node_modules/lodash.debounce/index.js","webpack://JitsiMeetJS/./modules/e2ee/crypto-utils.js","webpack://JitsiMeetJS/./modules/detection/VADAudioAnalyser.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/(webpack)/buildin/module.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./node_modules/bowser/es5.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/statistics/PerformanceObserverStats.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/e2ee/E2EEContext.js","webpack://JitsiMeetJS/./modules/xmpp/ResumeTask.js","webpack://JitsiMeetJS/./modules/util/Retry.js","webpack://JitsiMeetJS/./modules/xmpp/StropheLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/Lobby.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./node_modules/async/lib/async.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/xmpp/RtxModifier.js","webpack://JitsiMeetJS/./modules/xmpp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/xmpp/SdpSimulcast.ts","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedHandling.js","webpack://JitsiMeetJS/./modules/detection/NoAudioSignalDetection.js","webpack://JitsiMeetJS/./modules/detection/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/detection/VADNoiseDetection.js","webpack://JitsiMeetJS/./modules/detection/VADTalkMutedDetection.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/qualitycontrol/QualityController.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./modules/detection/ActiveDeviceDetector.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./modules/statistics/PrecallTest.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./modules/webaudio/AudioMixer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/rng.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/bytesToUuid.js","webpack://JitsiMeetJS/./node_modules/uuid/dist/esm-browser/v4.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/(webpack)/buildin/amd-options.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/../src/strophe.disco.js","webpack://JitsiMeetJS/../src/strophe.stream-management.js","webpack://JitsiMeetJS/./node_modules/timers-browserify/main.js","webpack://JitsiMeetJS/./node_modules/setimmediate/setImmediate.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/edge_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/filtericeservers.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getdisplaymedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","VIDEO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","KICKED","LOCAL_ROLE_CHANGED","MEETING_ID_SET","MESSAGE_RECEIVED","INVITE_MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LOBBY_MEMBER_JOINED","MUC_LOBBY_MEMBER_UPDATED","MUC_LOBBY_MEMBER_LEFT","MUC_DENIED_ACCESS","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","MUC_MEMBERS_ONLY_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTCIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_CONNECT_MEMBERS_ONLY_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SOURCE_ADD","SOURCE_ADD_ERROR","SOURCE_REMOVE","SOURCE_REMOVE_ERROR","SPEAKER_STATS_RECEIVED","CONFERENCE_TIMESTAMP_RECEIVED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","AUDIO_INPUT_STATE_CHANGE","AUTH_STATUS_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","DATA_CHANNEL_OPENED","DOMINANT_SPEAKER_CHANGED","CONFERENCE_CREATED_TIMESTAMP","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","JVB121_STATUS","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","_MEDIA_SESSION_STARTED","_MEDIA_SESSION_ACTIVE_CHANGED","MEMBERS_ONLY_CHANGED","NO_AUDIO_INPUT","NOISY_MIC","PARTICIPANT_CONN_STATUS_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","TRACK_UNMUTE_REJECTED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","LOBBY_USER_JOINED","LOBBY_USER_UPDATED","LOBBY_USER_LEFT","FORWARDED_SOURCES_CHANGED","global$1","global","self","_typeof","obj","iterator","constructor","_toConsumableArray","arr","Array","isArray","arr2","length","_arrayWithoutHoles","iter","toString","from","_iterableToArray","TypeError","_nonIterableSpread","safe_add","x","y","lsw","str2binl","str","Error","bin","charCodeAt","md5_cmn","q","a","b","num","cnt","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","len","olda","oldb","oldc","oldd","MD5","hexdigest","binarray","charAt","binl2hex","hash","String","fromCharCode","binl2str","core_sha1","j","olde","w","e","rol","safe_add$1","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","concat","binb2b64","triplet","binb2str","SHA1","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","utils","out","cookies","cookieName","expires","domain","path","cookieObj","isObj","cookieValue","escape","unescape","document","cookie","$build","attrs","Strophe","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","BINDREQUIRED","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","func","childNodes","childNode","nodeType","this","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","undefined","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","arguments","arg","xmlTextNode","sort","attr","setAttribute","k","xmlescape","text","replace","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","_i","createHtml","toLowerCase","getAttribute","cssText","cssAttrs","split","cssName","cssValue","push","join","_i2","createDocumentFragment","_i3","_i4","escapeNode","unescapeNode","getNodeFromJid","jid","indexOf","getDomainFromJid","bare","getBareJidFromJid","parts","splice","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","tree","names","keys","map","result","reduce","getNamedItem","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","id","options","matchBare","matchBareFromJid","user","getNamespace","elNamespace","ignoreNamespaceFragment","namespaceMatch","_this","nsMatch","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","_this2","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","handlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","setTimeout","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","Math","random","addProtocolErrorHandler","status_code","callback","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","_this3","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","_this4","iqtype","element","_sendRestart","_this5","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","forEach","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","plugin","statusChanged","err","_dataRecv","req","raw","_this6","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_i5","_hand","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","matched","mech","authenticate","_no_auth_received","sortMechanismsByPriority","higher","priority","swap","_attemptSASLAuth","_attemptLegacyAuth","mechanism_found","test","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","btoa","challenge","atob","_onLegacyAuthIQResult","iq","_auth2_cb","_this7","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_onStreamFeaturesAfterSASL","explicitResourceBinding","_onResourceBindResultIQ","resource","jidNode","_establishSession","_onSessionResultIQ","onFailure","_this8","now","_i6","_thand","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","Hi","U","U_old","responseText","authMessage","attribMatch","substr","clientKey","serverKey","clientSignature","_quote","realm","host","digest_uri","cred","A1","A2","core","Strophe$1","$build$1","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","floor","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","body","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","reqStatus","_getRequestStatus","err_callback","HTTP","_hitError","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","Number","_processRequest","primary_timeout","isNaN","secondary_timeout","server_error","content_type","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","Strophe$2","$build$2","new_service","location","pathname","_buildStream","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","ver","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","$msg","BrowserCapabilities","AUDIO","PRESENTER","VIDEO","MediaType","Logger","require","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","__filename","_instances","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","initBackend","callStatsID","callStatsSecret","userName","aliasName","applicationName","getWiFiStatsMethod","confID","siteID","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","enableCallStats","disableThirdPartyRequests","callStatsApplicationLogsDisabled","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","CALLSTATS_SCRIPT_URL","loadCallStatsAPI","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","pcStatsInterval","audioLevelsInterval","longTasksStatsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","addLongTasksStatsListener","attachLongTasksStats","conference","supportsPerformanceObserver","performanceObserverStats","PerformanceObserverStats","JitsiConferenceEvents","startObserver","stopObserver","getLongTasksStats","removeLongTasksStatsListener","dispose","size","emit","callStats","values","stopCallStats","tpc","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getAllCallStatsInstances","csInstances","statistics","cs","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","sendDominantSpeakerEvent","roomJid","sendActiveDeviceListEvent","devicesData","globalSet","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","stats","next","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","properties","eventToLog","sendAnalytics","eventName","RTCEvents","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","PERMISSIONS_CHANGED","SENDER_VIDEO_CONSTRAINTS_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","ENDPOINT_STATS_RECEIVED","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","substring","buildICEUfrag","frag","buildICEPwd","parseMID","parseMSIDAttribute","ssrcLines","msidLine","find","v","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","parseSCTPPort","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseSourceNameLine","sourceNameLine","ssrcSdpLine","parseRTCPFB","pt","params","parseExtmap","direction","uri","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","index","array","numGroups","ssrcGroups","primarySsrc","fidGroup","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferCodec","codecName","matchingPayloadTypes","rtp","codec","payload","payloadTypes","payloads","reverse","payloadIndex","unshift","stripCodec","highProfile","h264Pts","removePts","stripH264HighCodec","CodecMimeType","H264","fmtp","item","config","includes","rtxApts","rtxPts","keepPts","rtcpFb","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_DECLINED","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","createConferenceEvent","source","createConnectionStageReachedEvent","stage","createE2eRttEvent","participantId","region","rtt","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createTransportStatsEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","VideoType","CAMERA","DESKTOP","flags","_sourceNameSignaling","Boolean","sourceNameSignaling","_sendMultipleVideoStreams","sendMultipleVideoStreams","_usesUnifiedPlan","usesUnifiedPlan","isChromiumBased","enableUnifiedOnChrome","isMultiStreamSupportEnabled","isSourceNameSignalingEnabled","usesAdapter","DEFAULT_CONSTRAINTS","video","height","ideal","max","width","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","disableHPF","stereo","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","availableDevicesPollTimer","availableDevices","emptyFuncton","updateGrantedPermissions","um","audioTracksReceived","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","audio","GRANTED_PERMISSIONS","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","deviceId","groupId","label","updateKnownDevices","pds","newDevices","mediaDeviceInfoToJSON","facing","compareAvailableMediaDevices","slice","RTCUtils","Listenable","super","audioQuality","clearInterval","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","wrapAttachMediaStream","src","srcObjectPropertyName","jitsiObjectURL","URL","createObjectURL","defaultSetVideoSrc","getStreamID","getTrackID","MediaStream","videoTracks","audioTracks","srcObject","pcConstraints","optional","googScreencastMinBitrate","googCpuOveruseDetection","screenObtainer","isDeviceListAvailable","enumerateDevices","ds","supportsDeviceChangeEvent","navigator","mediaDevices","addEventListener","setInterval","then","devices","catch","_getUserMedia","umDevices","Promise","resolve","reject","gumTimeout","timeoutExpired","JitsiTrackErrors","getUserMedia","jitsiError","_getDesktopMedia","isSupported","obtainStream","_getMissingTracks","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","obtainAudioAndVideoPermissions","otherOptions","mediaStreamsMetaData","maybeRequestDesktopDevice","desktopSharingSourceDevice","matchingDevice","sourceType","maybeRequestCaptureDevices","requestedCaptureDevices","clonedeep","Resolutions","resolution","isWebKitBased","cameraDeviceId","facingMode","CameraFacingMode","USER","autoGainControl","micDeviceId","echoCancellation","noiseSuppression","assign","channelCount","getConstraints","desktopStream","sourceId","desktopAudioTracks","desktopAudioStream","track","desktopVideoTracks","desktopVideoStream","videoType","avStream","audioStream","effects","videoStream","stopMediaStream","isDeviceChangeAvailable","deviceType","isIosBrowser","mediaStream","getTracks","release","url","revokeObjectURL","isDesktopSharingEnabled","setAudioOutputDevice","setDesktopSharingFrameRate","maxFps","getAudioOutputDevice","getCurrentlyAvailableMediaDevices","arePermissionsGrantedForAvailableDevices","some","getEventDataForActiveDevice","deviceData","setSuspendVideo","enable","googSuspendBelowMinBitrate","rtcUtils","origAttachMediaStream","res","apply","ex","GlobalOnErrorHandler","callUnhandledRejectionHandler","promise","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","args","callErrorHandler","errHandler","peerConnectionIdCounter","rtcTrackIdCounter","_createLocalTracks","mediaStreamMetaData","metaData","getSettings","safeCounterIncrement","JitsiLocalTrack","rtcId","RTC","peerConnections","localTracks","_channel","_lastN","_lastNEndpoints","_forwardedSources","_senderVideoConstraints","_maxFrameHeight","_pinnedEndpoint","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_forwardedSourcesChangeListener","_onForwardedSourcesChanged","_onDeviceListChanged","_updateAudioOutputForAudioTracks","_videoType","addListener","destroy","_channelOpenListener","tracksInfo","initializeBridgeChannel","wsUrl","BridgeChannel","logError","msgType","_receiverVideoConstraints","sendNewReceiverVideoConstraintsMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","sendSetLastNMessage","FeatureFlags","sendVideoTypeMessage","_senderVideoConstraintsChanged","senderVideoConstraints","lastNEndpoints","oldLastNEndpoints","leavingLastNEndpoints","enteringLastNEndpoints","isInLastN","forwardedSources","oldForwardedSources","leavingForwardedSources","enteringForwardedSources","sourceName","isInForwardedSources","onCallEnded","setNewReceiverVideoConstraints","isOpen","setReceiverVideoConstraint","maxFrameHeight","setVideoType","sendSourceVideoType","sendSourceVideoTypeMessage","selectEndpoints","ids","pinEndpoint","sendPinnedEndpointMessage","eventType","createPeerConnection","signaling","pcConfig","isP2P","abtestSuspendVideo","addPermanentProperties","enableInsertableStreams","encodedInsertableStreams","sdpSemantics","supportsSdpSemantics","forceTurnRelay","iceTransportPolicy","bundlePolicy","newConnection","TraceablePeerConnection","_removePeerConnection","traceablePeerConnection","addLocalTrack","getLastN","getSenderVideoConstraints","getForwardedSources","getLocalVideoTrack","localVideo","getLocalTracks","getLocalVideoTracks","getLocalAudioTrack","localAudio","getLocalEndpointId","myUserId","tracks","getType","getRemoteTracks","remoteTracks","pcRemoteTracks","setAudioMute","mutePromises","audioTrack","mute","unmute","all","setVideoMute","videoTrack","removeLocalTrack","pos","removeRemoteTracks","owner","removedTracks","pcRemovedTracks","p2pPcConstraints","elSelector","isUserStreamById","streamId","closeBridgeChannel","setAudioLevel","audioLevel","getTrackBySSRC","isAudioTrack","sendChannelMessage","to","sendMessage","sendEndpointStatsMessage","setLastN","remoteAudioTracks","setAudioOutput","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","GENERAL","NOT_FOUND","PERMISSION_DENIED","SCREENSHARING_GENERIC_ERROR","SCREENSHARING_USER_CANCELED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","TRACK_STREAMING_STATUS_CHANGED","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","addMlineForNewLocalSource","mid","transform","MediaDirection","RECVONLY","msid","groups","mids","write","getMediaSsrcMap","mediaSSRCs","mediaindex","linessrc","idx","containsSSRC","medias","toJingle","thecreator","assrcline","creator","amidline","rtpmap","afmtpline","fmtpParameters","rtcpFbToJingle","ssrcMap","availableSsrc","ssrcParameters","ridLines","usesRidsForSimulcast","rids","ridLine","ridInfo","extmapLines","extmap","senders","transportToJingle","sctpport","sctpmap","sctpAttrs","number","streams","setupLine","setup","iceParameters","payloadtype","feedback","rtcpFbFromJingle","feedbackElementTrrInt","each","_","fb","hasAttribute","fromJingle","jingle","sessionId","$","contents","content","jingle2media","sctp","payloadType","__","parameter","hdrExt","userSources","nonUserSources","isUserSource","sourceStr","INACTIVE","SENDONLY","SENDRECV","parser","writer","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","NOT_ALLOWED_ERROR","MEMBERS_ONLY_ERROR","CONFERENCE_ACCESS_DENIED","ICE_FAILED","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","VIDEOBRIDGE_NOT_AVAILABLE","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","Function","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","NumberIsNaN","once","emitter","eventListener","errorListener","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","existing","warning","newListener","warned","count","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","ret","unwrapListeners","arrayClone","listenerCount","copy","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","listeners","prependListener","prependOnceListener","list","position","originalListener","spliceOne","off","rawListeners","eventNames","TRACK_ERROR_TO_MESSAGE_MAP","constraint","failedConstraintName","mandatory","minWidth","minHeight","getResolutionFromFailedConstraint","removeEventListener","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","_detectElectron","userAgent","version","_detectNWJS","_detectReactNative","product","_detect","bowser","browserInfo","detectors","getBrowserName","getBrowserVersion","_detectChromiumBased","BrowserDetection","_bowser","Bowser","getParser","detectedBrowserInfo","_name","_version","getName","isChrome","isOpera","isIExplorer","isSafari","isNWJS","isElectron","getVersion","_checkCondition","checkTree","satisfies","isVersionGreaterThan","isVersionLessThan","isVersionEqualTo","DummyLocalStorage","clear","_storage","keyName","keyValue","JitsiLocalStorage","localStorage","_localStorageDisabled","ignore","isLocalStorageDisabled","dontEmitChangedEvent","localStorageContent","jitsiLocalStorage","DETECTOR_STATE_CHANGE","VAD_NOISY_DEVICE","VAD_REPORT_PUBLISHED","VAD_SCORE_PUBLISHED","VAD_TALK_WHILE_MUTED","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","LONG_TASKS_STATS","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","WRONG_STATE","DISPLAY_NAME_REQUIRED","VP8","VP9","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","XMPP","token","disconnectInProgress","connectionTimes","authenticatedUser","initStropheUtil","initStropheLogger","enableWebsocketResume","serviceUrl","websocketKeepAlive","XmppConnection","createConnection","bosh","_initStrophePlugins","caps","Caps","clientNode","initFeaturesList","ev","addFeature","disableRtx","enableOpusRed","supportsAudioRed","enableLipSync","rayo","E2EEncryption","getConnection","connectionHandler","credentials","performance","statusStr","getStatusString","XMPPEvents","getStunAndTurnCredentials","_resetState","pingJid","getFeaturesAndIdentities","identities","PING","identity","speakerStatsComponentAddress","conferenceDurationComponentAddress","lobbySupported","f","fr","endsWith","JitsiConnectionEvents","_onPrivateMessage","errmsg","password","anonymousConnectionFailed","connectionFailed","lastErrorMsg","JitsiConnectionErrors","ping","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","attaching","anonymousdomain","hosts","configDomain","hostname","createRoom","roomName","onCreateResource","roomjid","customDomain","muc","mucNickname","randomHexString","emuc","getJid","getJingleLog","getLog","getXmppLog","dial","getSessions","sessions","disconnectListener","_cleanupXmppConnection","isUsingWebSocket","evType","sendUnavailableBeacon","iceConfig","jvb","iceServers","p2p","p2pStunServers","stunServers","MucConnectionPlugin","JingleConnectionPlugin","RayoConnectionPlugin","deploymentInfo","shard","headersArr","trim","shard_changed","suspend_time","getPingSuspendTime","time_since_last_success","getTimeSinceLastSuccess","room","tryParseJSONAndVerify","jsonString","json","jsonMessage","parsedJson","users","created_timestamp","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","SOURCE_MUTED_CHANGED","SOURCE_VIDEO_TYPE_CHANGED","_callStatsUserName","_machineId","_p8","externalStorage","username","UsernameGenerator","generateUsername","generateCallStatsUserName","jitsiMeetId","generateJitsiMeetId","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","getSSRCAttrValue","ssrcNumber","attrName","ssrcObj","removeSSRC","ssrcNum","addSSRCAttribute","findGroup","findGroups","findGroupByPrimarySSRC","primarySSRC","findSSRCByMSID","getSSRCCount","containsAnySSRCGroups","getPrimaryVideoSsrc","fecGroup","getRtxSSRC","getSSRCs","getPrimaryVideoSSRCs","videoSSRCs","ssrcGroupInfo","secondarySsrc","dumpSSRCGroups","removeGroupsWithSSRC","groupInfo","removeGroupsBySemantics","replaceSSRC","oldSSRC","newSSRC","addSSRCGroup","SdpTransformWrap","rawSDP","parsedSDP","selectMedia","selectedMLines","toRawSDP","nextValue","MAX_SAFE_INTEGER","calculateAverage","valueArray","filterPositiveValues","RunningAverage","average","addNext","getAverage","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","PENDING","ACTIVE","ENDED","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","wrtcFuncNames","fabricEvent","reportType","_fabrics","backend","backendInitialized","atLeastOneFabric","defaultInstance","fabrics","hasFabric","_addNewFabric","_emptyReportQueue","csInstance","defaultConfID","defaultPC","report","reportsQueue","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","originalMethod","theArguments","debugMethods","originalReportError","exception","CallStatsBackend","callstats","configParams","_traceAndCatchBackendCalls","applicationVersion","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","getConnectionPluginDefinition","base","ConnectionPluginListenable","argsTag","mapTag","objectTag","setTag","reIsHostCtor","reIsUint","typedArrayTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","freeProcess","process","nodeUtil","binding","nodeIsTypedArray","isTypedArray","arraySome","predicate","mapToArray","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","funcToString","maskSrcKey","exec","IE_PROTO","nativeObjectToString","reIsNative","RegExp","Buffer","Uint8Array","propertyIsEnumerable","symToStringTag","nativeGetSymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","entry","ListCache","MapCache","SetCache","__data__","Stack","arrayLikeKeys","inherited","isArr","isArg","isArguments","isBuff","isType","skipIndexes","iteratee","baseTimes","isIndex","assocIndexOf","eq","baseGetTag","isOwn","unmasked","getRawTag","objectToString","baseIsArguments","isObjectLike","baseIsEqual","other","bitmask","customizer","equalFunc","objIsArr","othIsArr","objTag","getTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","byteLength","byteOffset","buffer","convert","isPartial","stacked","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","getAllKeys","objLength","othLength","skipCtor","objValue","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","baseIsNative","isObject","isMasked","isFunction","baseKeys","Ctor","arrLength","seen","arrValue","othIndex","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getSymbols","getMapData","getValue","pairs","LARGE_ARRAY_SIZE","resIndex","arrayFilter","symbol","ArrayBuffer","ctorString","isLength","baseUnary","ENVIRONMENT","randomElement","randomHexDigit","randomAlphanumStr","funcTag","genTag","reFlags","cloneableTags","addMapEntry","pair","addSetEntry","arrayReduce","accumulator","initAccum","isHostObject","overArg","getPrototype","objectCreate","isArrayLike","isArrayLikeObject","assignValue","baseClone","isDeep","isFull","input","initCloneArray","copyArray","isFunc","cloneBuffer","isPrototype","initCloneObject","copyObject","copySymbols","baseAssign","cloneFunc","cloneArrayBuffer","dataView","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","props","arrayEach","subValue","arrayBuffer","newValue","cache","order","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","CONN_STATUS_CHANGED","_options","_stropheConn","_usesWebsocket","_lastSuccessTracker","LastSuccessTracker","startTracking","_resumeTask","ResumeTask","_deferredIQs","PingConnectionPlugin","onPingThresholdExceeded","_onPingErrorThresholdExceeded","websocket","_status","OPEN","disco","_stropheConnectionCb","targetCallback","blockCallback","_maybeEnableStreamResume","_maybeStartWSKeepAlive","_processDeferredIQs","cancel","startInterval","_tryResumingConnection","_wsKeepAlive","Events","_clearDeferredIQs","deferred","closeWebsocket","streamManagement","getResumeToken","intervalWithJitter","fetch","timeLeft","sendIQ2","sendBeacon","schedule","gumFunction","SS_DEFAULT_FRAME_RATE","ScreenObtainer","_createObtainStreamMethod","JitsiMeetNW","obtainDesktopStream","obtainScreenOnElectron","supportsGetDisplayMedia","obtainScreenFromGetDisplayMediaRN","obtainScreenFromGetDisplayMedia","_getAudioConstraints","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingSources","gumOptions","streamType","screenShareAudio","onGetStreamResponse","errorCallback","getDisplayMedia","desktopSharingFrameRate","frameRate","cursor","errorDetails","errorName","errorMsg","errorStack","g","currentExecutingScript","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","ParticipantConnectionStatus","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","_getVideoFrozenTimeout","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","figureOutConnectionStatus","_changeConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","NETWORK_INFO_EVENT","NetworkInfo","_current","isOnline","updateNetworkInfo","networkInfo","SDPUtils","localCName","generateIdentifier","splitLines","blob","splitSections","part","getDescription","sections","getMediaSections","matchPrefix","prefix","parseCandidate","address","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","kv","writeFmtp","parameters","param","parseRtcpFb","writeRtcpFb","rtcpFeedback","parseSsrcMedia","sp","colon","parseSsrcGroup","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","parseCryptoLine","cryptoSuite","keyParams","sessionParams","writeCryptoLine","writeCryptoKeyParams","parseCryptoKeyParams","keyMethod","keySalt","lifeTime","mkiValue","mkiLength","getCryptoParameters","getIceParameters","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","bandwidth","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","parseMsid","spec","planB","msidParts","parseSctpDescription","maxMessageSize","maxSizeLine","sctpPort","writeSctpDescription","output","generateSessionId","writeSessionBoilerplate","sessId","sessVer","sessUser","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","isValidSDP","SignalingLayer","getSSRCOwner","getPeerMediaInfo","getSourceNameForJitsiTrack","trackIdx","getMediaTypeFromSourceName","firstLetterOfMediaTypeIdx","firstLetterOfMediaType","getFocusRecordingUpdate","presence","jibriStatus","initiator","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","OLM_MESSAGE_TYPES","kOlmData","OlmAdapterEvents","OLM_ID_KEY_READY","PARTICIPANT_E2EE_CHANNEL_READY","PARTICIPANT_KEY_UPDATED","OlmAdapter","_conf","_init","Deferred","_key","_keyIndex","_reqs","_bootstrapOlm","_onEndpointMessageReceived","_onConferenceJoined","_onConferenceLeft","_onParticipantLeft","Olm","promises","pId","olmData","_getParticipantOlmData","uuidv4","olm","ciphertext","_encryptKeyInfo","setRejectTimeout","_sendMessage","allSettled","_olmAccount","Account","idKeys","identity_keys","_idKey","curve25519","keyInfo","base64js","fromByteArray","keyIndex","encrypt","_sendSessionInit","free","_sendError","Session","create_outbound","idKey","otKey","ack","pendingSessionUuid","create_inbound","remove_one_time_keys","decrypt","safeJsonParse","toByteArray","lastKey","isEqual","generate_one_time_keys","otKeys","one_time_keys","mark_keys_as_published","_conferenceJoined","_enabled","_initialized","_e2eeCtx","E2EEContext","_olmAdapter","_ratchetKey","debounce","_ratchetKeyImpl","_rotateKey","_rotateKeyImpl","_onParticipantPropertyChanged","_onParticipantJoined","_onMediaSessionStarted","_onLocalTrackAdded","_setupReceiverE2EEForTrack","_trackMuteChanged","_onOlmIdKeyReady","_onParticipantE2EEChannelReady","_onParticipantKeyUpdated","supportsInsertableStreams","testing","disableE2EE","isEnabled","setEnabled","enabled","_restartMediaSessions","_generateKey","updateKey","setKey","crypto","getRandomValues","_getMediaSessions","_setupSenderE2EEForTrack","setLocalParticipantProperty","cleanup","oldValue","material","importKey","newKey","ratchet","updateCurrentKey","findReceiverForTrack","handleReceiver","sender","findSenderForTrack","handleSender","doesVideoMuteByStreamRemove","isVideoTrack","JingleSessionPC","JingleSession","jingleContents","videoContents","maxFrameHeightSel","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_cachedOldLocalSdp","_cachedNewLocalSdp","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","localRecvMaxFrameHeight","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","remoteRecvMaxFrameHeight","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","_xmppListeners","onXmppStatusChanged","_removeSenderVideoConstraintsChangeListener","_assertNotEnded","JingleSessionState","doInitialize","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","capScreenshareBitrate","videoQuality","disabledCodec","preferredCodec","disableSimulcast","disableH264","preferH264","_abtestSuspendVideoEnabled","startSilent","_signalingLayer","onicecandidate","phase","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","iceConnectionState","reconnect","iceStarted","onnegotiationneeded","remoteDescription","workFunction","finishedCallback","oldSdp","localDescription","_renegotiate","newSdp","notifyMySSRCUpdate","enableLayerSuspension","MediaSessionEvents","REMOTE_VIDEO_CONSTRAINTS_CHANGED","getRemoteRecvMaxFrameHeight","idealHeight","localSDP","ice","sdpMLineIndex","jcand","errorMesssage","usedrip","dripContainer","sendIceCandidates","candidates","initiatorJid","cands","sdpMid","fingerprintLine","tmp","required","newJingleErrorHandler","sendIceFailedNotification","sessionInfo","addIceCandidates","iceCandidates","rtcCandidate","RTCIceCandidate","outerHTML","iceCandidate","addIceCandidate","readSsrcInfo","ssrcElement","setTrackSourceName","setSSRCOwner","i3","ssrcInfoElement","jidOrEndpointId","generateRecvonlySsrc","acceptOffer","jingleOffer","failure","setOfferAnswerCycle","sendSessionAccept","invite","addTracks","addTrack","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","setAnswer","jingleAnswer","remoteSdp","RTCSessionDescription","_responderRenegotiate","jingleOfferAnswerIq","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","replaceTransport","jingleOfferElem","enableForcedReload","sendTransportAccept","CONNECTION_RESTARTED","originalOffer","clone","remove","newFingerprint","accept","responder","responderJid","sessionModify","transportAccept","medialines","sendTransportReject","transportReject","setSenderMaxBitrates","setMaxBitRate","setSenderVideoConstraint","jitsiLocalTrack","getSourceName","setSenderVideoConstraints","setSenderVideoDegradationPreference","terminate","sendSessionTerminate","sessionTerminate","reasonDescription","restart","requestRestart","onTerminated","reasonCondition","reasonText","_parseSsrcInfoFromSourceAdd","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","midFound","i2","addRemoteStream","_addOrRemoveRemoteStream","removeRemoteStream","removeRemoteStreamsOnLeave","finishCallback","removeSsrcInfo","getRemoteSourceInfoByParticipant","_processRemoteRemoveSource","newLocalSDP","isAdd","logPrefix","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","offerIq","findIndex","desiredDirection","getDesiredMediaDirection","optionalRemoteSdp","_initiatorRenegotiate","setRemoteDescription","createAnswer","answer","offer","replaceTracks","oldLocalSDP","replaceTrack","oldTrack","newTrack","usesPlanB","clearRecvonlySsrc","shouldRenegotiate","sourceRemoveElem","_verifyNoSSRCChanged","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","addTrackAsUnmute","_addRemoveTrackAsMuteUnmute","removeTrackAsMute","isMute","removeTrackMute","addTrackUnmute","setMediaTransferActive","audioActive","videoActive","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","modifyContents","newVideoSenders","parseVideoSenders","newMaxFrameHeight","parseMaxFrameHeight","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","isScreenShare","localTrack","getSignaledSourceInfo","sdpDiffer","newMedia","mediaIndex","signaledSsrcs","ctx","removedSsrcInfo","addedSsrcInfo","request","failureCb","errResponse","errorElSel","errorReasonSel","errorMsgSel","getIceConnectionState","getConnectionState","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","PERMISSION_PROMPT_IS_SHOWN","b64","lens","getLens","validLen","placeHoldersLen","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","len2","encodeChunk","lookup","end","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","SIM_LAYER_RIDS","TPCUtils","videoBitrates","localStreamEncodingsConfig","active","high","low","scaleResolutionDownBy","standard","_getStreamEncodings","isSimulcastOn","ensureCorrectOrderOfSsrcs","parsedSdp","reorderedSsrcs","sources","findTransceiver","getOriginalStream","getTransceivers","getTrackId","insertUnifiedPlanSimulcastReceive","usesSdpMungingForSimulcast","simulcast_03","simulcast","simulcastLine","getTrack","transceiverInit","sendEncodings","addTransceiver","addStream","setEncodings","getLocalStreamHeightConstraints","localVideoHeightConstraints","encoding","calculateEncodingsActiveState","localVideoTrack","newHeight","frameHeight","getVideoType","isSharingLowFpsScreen","calculateEncodingsBitrates","desktopShareBitrate","desktopBitrate","presenterEnabled","_originalStream","getStreamId","isNewLocalSource","currentDirection","trackIndex","getParameters","encodings","setParameters","transceivers","updateEncodingsResolution","every","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","env","argv","versions","cwd","chdir","dir","umask","AudioContext","webkitAudioContext","LocalStatsCollector","interval","intervalId","intervalMilis","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","frequencyBinCount","getByteTimeDomainData","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","newLevel","lastLevel","diff","animateLevel","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","ERROR_FEATURE_VERSION_MISMATCH","compareIdentities","generateSha","sortedIdentities","accumulatedValue","sortedFeatures","feature","versionToCapabilities","jidToVersion","rooms","_addChatRoom","_removeChatRoom","CAPS","_handleCaps","_onMucMemberLeft","_removeJidToVersionEntry","submit","_generateVersion","removeFeature","getFeatures","_getDiscoInfo","sha","receivedNode","category","_fixChatRoomPresenceMap","addToPresence","_notifyVersionChanged","_identities","_features","oldVersion","packet2JSON","nodes","children","json2packet","packet","filterNodeFromPresenceJSON","MEMBERS_AFFILIATIONS","ChatRoom","myroomjid","members","presMap","presHandlers","_removeConnListeners","joined","focusMucJid","noBridgeAvailable","moderator","Moderator","enableLobby","lobby","Lobby","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","transcriptionStatus","JitsiTranscriptionStatus","xns","statsId","addVideoInfoToPresence","userRegion","presenceUpdateTime","getLastPresence","mucNick","customJoinPresenceExtensions","disableFocus","allocateConferenceFocus","onConnStatusChanged","fromJoin","presenceSyncTime","doLeave","discoRoomInfo","getInfo","meetingIdValEl","setMeetingId","membersOnly","lobbyRoomField","setLobbyRoomJid","membersOnlyEnabled","meetingId","createNonAnonymousRoom","disableDiscoInfo","getForm","form","formSubmit","onPresence","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","affiliation","isFocus","getFocusUserJid","isHiddenDomain","hiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","botType","nick","statsID","_extractFeatures","newRole","_initFocus","memberOfThis","displayName","PARTICIPANT_FEATURES_CHANGED","displayJids","att","phone","pin","processNode","var","focusFeatures","setParticipantPropertyListener","supportsRestartByTerminate","tagHandlers","elementName","nickname","sendPrivateMessage","setSubject","subject","onParticipantLeft","skipEvents","onMucMemberLeft","onPresenceUnavailable","destroySelect","reasonSelect","isSelfPresence","isKick","membersKeys","actorSelect","actorNick","onMessage","txt","subjectText","interfaceConfig","APP_NAME","stamp","dateParts","passwordSelect","onPresenceError","lobbyRoomNode","lobbyRoomJid","lobbyRoomOldNode","setAffiliation","grantIQ","kick","kickIQ","lockRoom","onError","onNotSupported","formsubmit","setMembersOnly","formToSubmit","addOrReplaceInPresence","matchingNodes","removeFromPresence","getFromPresence","addPresenceListener","removePresenceListener","handlerIdx","mucJid","isModerator","getMemberRole","peerJid","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","getMediaPresenceInfo","mutedNode","videoTypeNode","isSIPCallingSupported","isSipGatewayEnabled","hangup","getLobby","getPhoneNumber","getPhonePin","getMeetingId","muteParticipant","iqToFocus","onMute","clean","leave","onMucLeft","doReject","ON","OFF","trackHandler2Prop","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_addMediaStreamInactiveHandler","onended","oninactive","_setHandler","_unregisterHandlers","isWebRTCTrackMuted","isLocalAudioTrack","getTrackLabel","getUsageLabel","_maybeFireTrackAttached","container","_onTrackAttach","_attachTTFMTracker","detach","_onTrackDetach","isScreenSharing","newAudioLevel","supportsReceiverStats","getMSID","trackId","TrackVADEmitter","procNodeSampleRate","vadProcessor","_procNodeSampleRate","_vadProcessor","_localTrack","_bufferResidue","Float32Array","_audioContext","createAudioContext","sampleRate","getRequiredPCMFrequency","_vadSampleSize","getSampleLength","_onAudioProcess","_initializeAudioContext","_audioSource","_audioProcessingNode","createScriptProcessor","audioEvent","inData","inputBuffer","getChannelData","completeInData","sampleTimestamp","pcmSample","vadScore","calculateAudioFrameVAD","timestamp","score","pcmData","getDeviceId","_connectAudioGraph","onaudioprocess","destination","_disconnectAudioGraph","_cleanupResources","stopStream","getDeviceLabel","_destroyed","AudioContextImpl","E2E_RTT_CHANGED","clearRejectTimeout","_timeout","ms","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","getUserId","getDisplayName","newName","isDominantSpeaker","isNowDominantSpeaker","timeElapsed","getTotalDominantSpeakerTime","total","hasLeft","markAsHasLeft","consoleTransport","globalTransports","transportIdx","globalOptions","getCallerInfo","callerInfo","fileLocation","column","disableCallerInfo","logPrefixes","toISOString","fullLogParts","methods","LOG","IDENTITY_UPDATED","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","first","notString","lastByteIndex","finalize","bc","da","hex","base64","v1","v2","v3","base64Str","md5","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","nativeMax","nativeMin","toNumber","isSymbol","isBinary","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","time","thisArg","leadingEdge","timerExpired","shouldInvoke","timeSinceLastCall","trailingEdge","remainingWait","debounced","isInvoking","textEncoder","TextEncoder","subtle","deriveBits","encode","keyBytes","VADAudioAnalyser","createVADProcessor","_createVADProcessor","_vadEmitter","_isVADEmitterRunning","_detectionServices","_vadInitTracker","_processVADScore","_trackAdded","_trackRemoved","addVADDetectionService","vadService","detector","_stopVADEmitter","_startVADEmitter","processVADScore","_changeDetectorsMuteState","changeMuteState","vadEmitter","JibriSession","_mode","_setSessionID","setStatus","getError","getID","_sessionID","getInitiator","_initiator","getLiveStreamViewURL","_liveStreamViewURL","getStatus","getTerminator","_terminator","getMode","setError","setLiveStreamViewURL","setInitiator","setTerminator","appData","broadcastId","_createIQ","recordingXMLUtils","_setErrorFromIq","errorIq","_eventEmitter","_grantedPermissions","JitsiMediaDevicesEvents","_logOutputDevice","_handleGrantedPermissions","_permissionsApiSupported","permissions","query","deviceID","isDevicePermissionGranted","supported","results","permissionStatus","isMultipleAudioInputSupported","emitEvent","supportsVideo","webpackPolyfill","deprecate","paths","grammar","reg","format","u","z","rate","subtype","sessionConfig","raddr","dir2","RecordingResult","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","createEmptyStream","mimeType","ondataavailable","dataEvent","removeTrack","recorderToRemove","download","Blob","href","click","getRecordingResults","getFileType","JitsiConnection","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","setToken","initJitsiConference","JitsiConference","getConnectionTimes","getLogs","metadata","ua","eventManager","JitsiConferenceEventManager","SignalingLayerImpl","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","wasStopped","connectionQuality","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","_conferenceJoinAnalyticsEventSent","isE2EESupported","_e2eEncryption","resourceCreator","isAuthenticatedUser","setupXMPPListeners","_statsCurrentId","statisticsId","Settings","callStatsUserName","setChatRoom","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","_sendConferenceJoinAnalyticsEvent","_removeLocalSourceOnReject","_updateRoomPresence","e2eping","E2ePing","setupRTCListeners","qualityController","QualityController","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","callStatsThreshold","statisticsDisplayName","callStatsCustomScriptUrl","setupChatRoomListeners","setupStatisticsListeners","enableTalkWhileMuted","_audioAnalyser","vadTalkMutedDetection","VADTalkMutedDetection","DetectionEvents","enableNoisyMicDetection","vadNoiseDetection","VADNoiseDetection","enableNoAudioDetection","_noAudioSignalDetection","NoAudioSignalDetection","hasAudioSignal","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","onLocalTrackRemoved","_sendConferenceLeftAnalyticsEvent","_delayedIceFailed","removeXMPPListeners","onMemberLeft","_getActiveMediaSession","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getPerformanceStats","longTasksStats","eventId","addCommandListener","command","removeCommandListener","sendTextMessage","sendPrivateTextMessage","sendCommand","sendCommandOnce","removeCommand","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","addTrackPromises","_setupNewTrack","_sendBridgeVideoTypeMessage","isVideoMutedByFocus","_fireMuteChangeEvent","localtrack","_desktopSharingFrameRate","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","actorParticipant","actorId","setConference","muteHandler","audioLevelHandler","oldVideoType","newVideoType","oldTrackBelongsToConference","setSourceName","_doReplaceTrack","_setEffectInProgress","replaceTrackPromises","jingleSession","_setNewVideoType","videoTypeChanged","setTrackVideoType","videoTypeTagName","trackVideoType","legacyTypeChanged","_setTrackMuteStatus","presenceChanged","setTrackMuteStatus","audioMuteChanged","videoMuteChanged","_addLocalTrackAsUnmute","addAsUnmutePromises","_removeLocalTrackAsMute","removeAsMutePromises","getRole","isHidden","lock","JitsiConferenceErrors","unlock","selectParticipant","selectParticipants","pinParticipant","lastN","isInteger","isVideoActive","getParticipantCount","countHidden","grantOwner","kickParticipant","_maybeClearSITimeout","_sessionInitiateTimeout","onMemberJoined","JitsiParticipant","_role","_botType","_updateFeatures","_maybeStartOrStopP2P","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","mediaSessions","getMediaSessions","tracksToBeRemoved","onMemberKicked","kickedParticipantId","kickedParticipant","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","onTransportInfo","transportInfo","removedTrack","_onIncomingCallP2P","rejectReason","supportsP2P","_shouldBeInP2PMode","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","_acceptJvbIncomingCall","serverRegion","_isE2EEEnabled","_setBridgeChannel","_suspendMediaTransferForJvbConnection","webSocket","bridgeChannelType","openBridgeChannel","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","sendTones","tones","duration","peerConnection","startRecording","stopRecording","startTranscriber","stopTranscriber","getMeetingUniqueId","setStartMutedPolicy","policy","getStartMutedPolicy","isStartAudioMuted","isStartVideoMuted","removeLocalParticipantProperty","getLocalParticipantProperty","prop","overallFeedback","detailedFeedback","getSsrcByTrack","getLocalSSRC","getSSRC","remoteUserId","_isFocus","_fireIncompatibleVersionsEvent","sendEndpointMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onIceConnectionFailed","IceFailedHandling","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","logName","p2pEstablishmentDuration","jvbEstablishmentDuration","done","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","changed","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","userLeftEvent","peers","peerCount","shouldBeInP2P","myId","peersId","hasBotPeer","wasP2PEstablished","skip","muteStatusChanged","localVideoTracks","audioMuteStatusChanged","videoMuteStatusChanged","getP2PConnectionState","startP2PSession","stopP2PSession","getSpeakerStats","getStats","setPreferredReceiveMaxFrameHeight","setPreferredSendMaxFrameHeight","createVideoSIPGWSession","sipAddress","VideoSIPGWConstants","perf","toggleE2EE","isLobbySupported","isMembersOnly","disableLobby","disable","joinLobby","email","lobbyDenyAccess","denyAccess","lobbyApproveAccess","approveAccess","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","setFeatures","actor","forward","recorderSession","logObject","AuthenticationEvents","myJid","ts","updated","featuresChangedListener","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","createdTimestamp","onByteSentStatsReceived","isEngine","RTCRtpTransceiver","isUserInteractionRequiredForUnmute","supportsBandwidthStatistics","supportsCodecPreferences","RTCRtpSender","ondevicechange","supportsLocalCandidateRttStatistics","PerformanceObserver","supportedEntryTypes","RTCRtpReceiver","supportsRTTStatistics","usesNewGumFlow","_getChromiumBasedVersion","createEncodedStreams","createEncodedVideoStreams","ReadableStream","postMessage","getCapabilities","chromium","default","17","getFirstMatch","getSecondMatch","matchAndReturnConst","getWindowsVersionName","getMacOSVersionName","getAndroidVersionName","getVersionPrecision","compareVersions","getBrowserAlias","BROWSER_ALIASES_MAP","getBrowserTypeByAlias","BROWSER_MAP","18","ENGINE_MAP","OS_MAP","PLATFORMS_MAP","Bada","BlackBerry","Chrome","Chromium","Epiphany","Firefox","Focus","Generic","Googlebot","Maxthon","Opera","PhantomJS","Puffin","QupZilla","QQ","QQLite","Safari","Sailfish","SeaMonkey","Sleipnir","Swing","Tizen","Vivaldi","WeChat","Roku","amazon_silk","android","bada","blackberry","chrome","epiphany","firefox","focus","generic","googlebot","google_search","ie","k_meleon","maxthon","edge","mz","naver","opera","opera_coast","phantomjs","puffin","qupzilla","qq","qqlite","safari","sailfish","samsung_internet","seamonkey","sleipnir","swing","tizen","uc","vivaldi","webos","wechat","yandex","tablet","mobile","desktop","tv","WindowsPhone","Windows","MacOS","iOS","Android","WebOS","Linux","ChromeOS","PlayStation4","EdgeHTML","Blink","Trident","Presto","Gecko","WebKit","90","configurable","writable","getResult","91","_ua","parsedResult","getUA","parseBrowser","describe","getBrowser","getOS","os","parseOS","getOSName","getOSVersion","getPlatform","platform","parsePlatform","getPlatformType","getEngine","engine","parseEngine","getEngineName","isOS","isPlatform","isBrowser","compareVersion","is","92","93","versionName","94","vendor","model","95","analyticsHandlers","permanentProperties","conferenceName","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","setConferenceName","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","statsInterval","longTasks","maxDuration","performanceStatsInterval","avgRatePerMinute","maxDurationMs","longTaskEventHandler","getEntries","task","observer","observe","buffered","longTasksIntervalId","_lastTimeStamp","KEYS_BY_BROWSER_TYPE","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","_browserType","_usesPromiseGetStats","_getStatValue","_defineNewGetStatValueMethod","_defineGetStatValueMethod","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","browsers","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","setCodec","startAudioLevelStats","audioLevels","getAudioLevels","processNewAudioLevelReport","processAudioLevelReport","processNewStatsReport","processStatsReport","itemStatByKey","stat","keyFromName","getNonNegativeStat","getStatValue","byteSentStats","receiveBandwidth","sendBandwidth","localCandidateType","localip","remoteCandidateType","conferenceStatsTransport","selected","local","localCandidateId","remote","remoteCandidateId","ipAddress","portNumber","candidateType","before","ssrcIds","isRemote","remoteSource","ssrcStats","isDownloadStream","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","packetsTotal","packetsLost","bytesReceivedNow","bytesReceivedBefore","bytesReceived","bytesSent","nowBytesTransmitted","timeMs","bitrateReceivedKbps","bitrateSentKbps","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","audioCodec","videoBitrateDownload","videoBitrateUpload","videoCodec","userResolutions","userFramerates","codecDesc","userCodecs","avgAudioLevels","localAvgAudioLevels","avgAudioLevel","sum","currentValue","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","localIp","networkType","currentRoundTripTime","framerateMean","frameWidth","framesPerSecond","framesSent","trackIdentifier","getSsrcByTrackId","dest","srcEvent","hidden","_jid","_id","_conference","_hidden","_statsID","_connectionStatus","_properties","_identity","getConference","jitsiTrack","isAudioMuted","_isMediaTypeMuted","_getFeaturesPromise","getBotType","onLoginSuccessful","roomPassword","rejectPromise","canceled","authenticationError","connectionError","kJitsiE2EE","E2EEcontext","baseUrl","ljm","workerBlob","blobUrl","_worker","Worker","operation","receiverStreams","createEncodedAudioStreams","readableStream","readable","writableStream","senderStreams","stropheConnection","_resumeRetryN","_retryDelay","_cancelResume","_networkOnlineListener","_scheduleResume","_resumeTimeout","getJitterDelay","retryDelay","_resumeConnection","resumeToken","retry","minDelay","LastRequestTracker","_lastSuccess","xmppConnection","originalRawInput","ConnectionPlugin","failedPings","pingExecIntervals","_onPingThresholdExceeded","_addPingExecutionTimestamp","pingIntervals","maxInterval","previousTS","currentInterval","mainRoom","maybeJoinLobbyRoom","_maybeJoinLobbyRoom","lobbyRoom","_leaveLobbyRoom","avatar","invitePassword","memberRoomJid","msgToSend","createExpBackoffTimer","step","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","call_control","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","createConferenceIq","machineUID","machineId","openSctp","enforcedBridge","enableTcc","enableRemb","minParticipants","audioPacketDelay","startBitrate","minBitrate","octo","probability","opusMaxAverageBitrate","useRoomAsSharedDocumentName","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","onJingle","fromJid","sess","startMuted","successTime","me","iceservers","dict","credential","temp","useTurnUdp","updateLog","_queue","_processQueueTasks","_stopped","kill","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","_map","_keys","setImmediate","completed","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detect","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","_concat","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","idle","priorityQueue","_compareTasks","sequence","compare","beg","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","char","signalingLayer","getState","addSources","removeSources","StropheLogger","logIncoming","logOutgoing","onRayo","roomPass","callResource","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","trace","errStatusCapture","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","_startConnectionRetries","timeoutS","reload","_retryTimeout","_stopConnectionRetries","_retryWebSocketConnection","closeEvent","colibriClass","msgPayload","jsonObject","pinnedEndpoint","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","endpoint","videoConstraints","maxHeight","effect","_startStreamEffect","displaySurface","maxEnabledResolution","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_sourceName","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_addStreamToConferenceAsUnmute","_fireNoDataFromSourceEvent","isReceivingData","isEnded","_isNoDataFromSourceEventsEnabled","_queueSetMuted","setMuted","_setMuted","_removeStreamFromConferenceAsMute","successCallback","_sendMuteStatus","logMuteInfo","_streamEffect","_stopStreamEffect","streamOptions","getCameraFacingMode","streamsInfo","streamInfo","cont","storedMSID","startEffect","stopEffect","_switchCamera","_switchStreamEffect","setEffect","trackSettings","getDuration","_stopStreamInProgress","_effectEnabled","dtlsRole","_initialTrackId","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","addRemoteCandidate","makeError","NotSupportedError","InvalidStateError","InvalidAccessError","OperationError","edgeVersion","addTrackToStreamAndFireEvent","dispatchEvent","MediaStreamTrackEvent","fireAddTrack","trackEvent","Event","_dispatchEvent","_eventTarget","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","_localDescription","_remoteDescription","iceGatheringState","usingBundle","rtcpMuxPolicy","hasTurn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","RTCIceGatherer","gatherPolicy","_config","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","onaddstream","ontrack","onremovestream","onconnectionstatechange","onicegatheringstatechange","ondatachannel","_emitGatheringStateChange","getConfiguration","getLocalStreams","getRemoteStreams","_createTransceiver","doNotAdd","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","_createIceAndDtlsTransports","_maybeFireNegotiationNeeded","clonedStream","clonedTrack","removeStream","getSenders","getReceivers","_createIceGatherer","bufferedCandidateEvents","bufferCandidates","_gather","onlocalcandidate","evt","serializedCandidate","toJSON","complete","RTCIceTransport","onicestatechange","_updateIceConnectionState","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","receive","isIceLite","rejected","remoteIceParameters","remoteDtlsParameters","_updateSignalingState","receiverList","iceOptions","remoteMsid","isComplete","setTransport","setRemoteCandidates","isNewTrack","nativeTrack","removeTrackFromStreamAndFireEvent","states","checking","disconnected","failed","new","connecting","numAudioTracks","numVideoTracks","offerOptions","remoteCodec","rHdrExt","getLocalCandidates","mediaSectionsInOffer","candidateString","selector","MediaStreamTrack","senderOrReceiver","allStats","ortcObjectName","nativeGetstats","nativeStats","mapStats","inboundrtp","outboundrtp","candidatepair","localcandidate","remotecandidate","nativeMethod","audioTransferActive","_dtmfSender","_dtmfTonesQueue","videoTransferActive","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_dtlsTransport","_peerVideoTypeChanged","SignalingEvents","_peerMutedChanged","_sourceMutedChanged","_sourceVideoTypeChanged","safeConstraints","rtcStatsSFUP2P","standardVideoBitrates","maxBitratesVideo","tpcUtils","statsinterval","_usesTransceiverCodecPreferences","_capScreenshareBitrate","interop","Interop","SdpSimulcast","numOfLayers","Simulcast","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","senderVideoMaxHeight","getCodecMimeType","codecPreference","what","_remoteStreamAdded","_remoteStreamRemoved","_remoteTrackAdded","onremovetrack","_remoteTrackRemoved","_processStat","statValue","endTime","dumpSDP","isAddOperation","hasLocalSource","hasAnyTracksOfType","_setVideoType","setMute","getSynchronizationSources","endpoints","endpointTracksByMediaType","findTrackById","onaddtrack","streamAudioTracks","streamVideoTracks","remoteSDP","mediaLines","mls","trackSsrc","ownerEndpointId","getTrackSourceName","peerMediaInfo","_createRemoteTrack","remoteTracksMap","userTracksByMediaType","existingTrack","JitsiRemoteTrack","isUserStream","toBeRemoved","_removeRemoteTrack","_getRemoteTrackById","endpointTrackMap","mediaTrack","removedAudioTrack","removedVideoTrack","_removeRemoteTrackById","normalizePlanB","firstSsrcs","newSsrcLines","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","fidGroups","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","videoMedia","enforceSendRecv","transformStreamIdentifiers","_adjustRemoteMediaDirection","hasCameraTrack","_mungeCodecOrder","getConfiguredVideoCodec","bitrates","hdBitrate","_isSharingScreen","containsTrack","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","rtxSsrcMapping","rtxSsrc","promiseChain","_assertTrackBelongs","webRtcStream","_removeStream","doesBelong","isMediaStreamInPc","findSenderByKind","negotiationNeeded","oldTrackSSRC","mediaActive","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","_getDesiredMediaDirection","desiredVideoDirection","hasRemoteSource","_initializeDtlsTransport","onstatechange","configureSenderVideoEncodings","_senderMaxHeights","_senderVideoMaxHeight","_mungeOpus","videoSender","preference","degradationPreference","scaleFactor","layer","enableConferenceFlag","mungeRemoteDescription","currentDescription","toUnifiedPlan","encodingsEnabledState","maxBitrates","HD_SCALE_FACTOR","getTargetVideoBitrates","ldStreamIndex","interToneGap","dtmf","localAudioTrack","createDTMFSender","ontonechange","_onToneChange","toneBuffer","insertDTMF","tone","clearVideoSsrcCache","onTrack","peerTracks","_createOfferOrAnswer","isOffer","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","groupsMap","groupSSRCs","extractSSRCMap","_processLocalSSRCsMap","handleFailure","capabilities","setCodecPreferences","oaPromise","_extractPrimarySSRC","sourceIdentifier","trackMSID","newSSRCNum","oldSSRCNum","currNumSsrcs","mLines","fmtpOpus","fmtpConfig","sdpChanged","maxaveragebitrate","mungedConfig","defaultCodec","primarySsrcs","fidLines","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","correspondingRtxSsrcs","clearSsrcCache","ssrcMapping","sdpTransformer","videoMLines","modifyRtxSsrcs2","primaryVideoSsrcs","correspondingRtxSsrc","previousAssociatedRtxStream","stripRtx","cachedPrimarySsrc","injectRecvOnly","newPrimarySsrc","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","_trackStreamingStatus","_trackStreamingStatusImpl","_enteredForwardedSourcesTimestamp","_addEventListener","_removeEventListener","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","_initTrackStreamingStatus","_disposeTrackStreamingStatus","_playCallback","gumStart","gumEnd","gumDuration","ttfm","_getStatus","TrackStreamingStatus","TrackStreamingStatusImpl","p2pRtcMuteTimeout","_p2pConnStatusRtcMuteTimeout","outOfForwardedSourcesTimeout","_setTrackStreamingStatus","getTrackStreamingStatus","_clearEnteredForwardedSourcesTimestamp","_setEnteredForwardedSourcesTimestamp","_getEnteredForwardedSourcesTimestamp","localEndpointId","audioSourcesToMsidMap","videoSourcesToMsidMap","_addMutedLocalVideoTracksToSDP","localVideos","isCamera","isInPeerConnection","requiredSSRCs","ssrcCache","primaryCname","_generateMsidAttribute","pcId","_transformMediaIdentifiers","streamAndTrackIDs","mediaDirection","generatedMsid","sessionDesc","audioMLine","_injectSourceNames","videoMlines","nameExists","_ssrcCache","_fillSsrcsFromCache","cachedSsrcs","newSsrcs","_parseSimLayers","newMsid","_getSsrcAttribute","newCname","_generateNewSsrcsForSimulcast","addAssociatedAttributes","simSsrcs","simSsrc","_generateSsrc","simulcastSsrcs","mungedSsrcs","mungedSsrcGroups","kSimulcastFormats","layers","videoBitrateCap","getTarget","millisSinceStart","simulcastFormat","targetHeight","pixels","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","_timeLastBwCapRemoved","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","_calculateConnectionQuality","resolutionName","quality","activeTPC","newVideoBitrateCap","bandwidthLimiter","getBandwidthLimit","maxIncreasePerSecond","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_actOnIceFailed","enableIceRestart","explicitlyDisabled","useTerminateForRestart","jvbConnection","jvbConnIceState","_canceled","_iceFailedTimeout","_timeoutTrigger","_hasAudioInput","_audioLevel","_clearTriggerTimeout","_handleAudioInputStateChange","_handleNoAudioInputDetection","_eventFired","_audioTrack","myUserID","_processing","_scoreArray","_audioLvlArray","_active","_calculateNoisyScore","scoreAvg","audioLevelAvg","_setActiveState","_recordValues","avgAudioLvl","_processTimeout","posAudioLevels","_calculateVADScore","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingInterval","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","_propagateSendMaxFrameHeight","mediaSession","preferredReceiveMaxFrameHeight","sendMaxFrameHeight","selectSendMaxFrameHeight","activeMediaSession","preferredSendMaxFrameHeight","_sessions","_chatRoom","getSession","_handleFocusPresence","_handleJibriPresence","_addSession","_emitSessionUpdate","_createSession","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","localAudioLevelsString","AverageStatReport","calculate","appendReport","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","batchReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_cachedTransportStats","_onLocalStatsUpdated","_maybeSendTransportAnalyticsEvent","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","transportStats","dominantSpeakerId","SpeakerStats","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","newStats","speakerStatsToUpdate","newParticipant","SphinxService","audioRecorder","transcriptionService","transcription","lineLength","blobCallBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","hasPopulatedArrays","twoDimensionalArray","callBack","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","ssrcOwners","_localSourceState","_remoteSourceState","_sourceNames","_addLocalSourceInfoToPresence","_doesEndpointSendNewSourceInfo","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","_sourceInfoHandler","_memberLeftHandler","_bindChatRoomEventHandlers","emitAudioMutedEvent","emitVideoMutedEvent","emitVideoTypeEvent","sourceInfoJSON","emitEventsFromHere","endpointSourceState","newMutedState","oldSourceState","newSourceNames","_findEndpointSourceInfoForMediaType","remoteSourceState","sourceInfo","legacyGetPeerMediaInfo","lastPresence","getPeerSourceInfo","mediaInfo","endpointMediaSource","codecTypeNode","codecType","existingOwner","existingName","getActiveAudioDevice","audioDevices","devicePromiseArray","micDevice","devicePromise","outcomeArray","successfulPromises","rejectedPromises","rejectReasons","stopActiveDevices","deviceLabel","ProxyConnectionService","jitsiConnection","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","processMessage","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","_selfCloseConnection","xml","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","newCreateLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","_rtc","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","api","_loadScript","appId","appSecret","disablePrecalltest","_initialize","execute","makePrecallTest","AuthUtil","getTokenAuthUrl","urlPattern","roleUpgrade","AudioMixer","_started","_streamsToMix","_streamMSSArray","addMediaStream","_mixedMSD","createMediaStreamDestination","streamMSS","found","PLAN_B_MIDS","findSimGroup","grp","findFidGroup","addSimGroupSources","sourceGroups","sourceList","findSourcebyId","relatedFidGroup","relatedSsrc","addSourcesToMline","otherSsrc","simGroup2","checkIfMlineForSsrcExists","mlines","sessionMedia","bLine","bundle","msidSemantic","semantic","current","currentDesc","newMline","mLineForData","ssrc2group","createSourceGroupMap","bundleOnly","inactiveMid","cmLine","msCrypto","rnds8","rng","byteToHex","bytesToUuid","buf","bth","v4","rnds","getAnalyticsAttributesFromOptions","video_requested","_mergeNamespaceAndModule","JitsiMeetJS","constants","recording","recordingConstants","sipVideoGW","detection","errorTypes","logLevels","JitsiMediaDevices","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","createLocalTracks","firePermissionPromptIsShownEvent","originalOptions","promiseFulfilled","mStream","currentlyAvailableMediaDevices","setVideoTrackContentHints","createTrackVADEmitter","localAudioDeviceId","createAudioMixer","isCollectingLocalStats","lineno","colno","setNetworkInfo","hint","contentHint","precallTest","util","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","prevMessageText","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptFromUrl","getScriptUrlFromStack","ignoreMessage","getSoleInlineScript","currentScript","thrownErr","near","far","_items","conn","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","logging","autoSendCountOnEveryIncomingStanza","requestResponseInterval","_c","_NS","_isStreamManagementEnabled","_serverProcesssedStanzasCounter","_clientProcessedStanzasCounter","_clientSentStanzasCounter","_originalXMLOutput","_requestHandler","_incomingHandler","_requestResponseIntervalCount","_isSupported","_unacknowledgedStanzas","_acknowledgedStanzaListeners","addAcknowledgedStanzaListener","_resumeToken","_resuming","_originalConnect","_connectArgs","requestAcknowledgement","getOutgoingCounter","getIncomingCounter","_interceptConnectArgs","_originalOnStreamFeaturesAfterSASL","_originalDoDisconnect","_interceptDoDisconnect","_originalDisconnect","_interceptDisconnect","_resumeState","_storedJid","previd","_handleServerRequestHandler","_ackHandler","_handleServerAck","_incomingStanzaHandler","_enabledHandler","_handleEnabled","_resumeFailedHandler","_handleResumeFailed","_resumedHandler","_handleResumed","_increaseSentStanzasCounter","firstElementChild","handledCount","_handleAcknowledgedStanzas","_increaseReceivedStanzasCounter","_answerProcessedStanzas","reportedHandledCount","lastKnownHandledCount","delta","_throwError","scope","Timeout","clearFn","_clearFn","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","handle","runIfPresent","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","removeChild","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","expr","scid","formatRegExp","formatStr","makeLine","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","transformUtils","parseSsrcs","writeSsrcs","processVideo","validateDescription","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","_restoreSimulcast","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","xGoogleFlag","removeGoogConference","Word","TranscriptionService","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","getWord","getBeginTime","getEndTime","audioBlob","logDisabled_","deprecationWarnings_","extractVersion","uastring","wrapPeerConnectionEvent","eventNameToWrap","nativeAddEventListener","nativeEventName","modifiedEvent","_eventMap","nativeRemoveEventListener","unwrappedCb","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","detectBrowser","mozGetUserMedia","webkitGetUserMedia","isSecureContext","webkitRTCPeerConnection","supportsUnifiedPlan","val","compactObject","isEmptyObject","filterStats","outbound","streamStatsType","filteredResult","trackStats","trackStat","walkStats","resultSet","shimGetUserMedia","browserDetails","constraintsToChrome_","cc","exact","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","PermissionDismissedError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","TabCaptureError","ScreenCaptureError","DeviceCaptureError","origGetUserMedia","DOMException","shimGetDisplayMedia","getSourceId","widthSpecified","heightSpecified","frameRateSpecified","chromeMediaSource","chromeMediaSourceId","maxFrameRate","maxWidth","shimMediaStream","webkitMediaStream","shimOnTrack","_ontrack","origSetRemoteDescription","_ontrackpoly","te","shimGetSendersWithDtmf","shimSenderWithDtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","origGetSenders","shimGetStats","origGetStats","onSucc","onErr","fixChromeStats_","standardReport","standardStats","makeMapStats","successCallbackWrapper_","shimSenderReceiverGetStats","origGetReceivers","receivers","srcElement","shimAddTrackRemoveTrackWithNative","_shimmedLocalStreams","existingSenders","newSenders","newSender","shimAddTrackRemoveTrack","origGetLocalStreams","nativeStreams","_reverseStreams","_streams","newStream","replaceInternalStreamId","internalId","externalStream","internalStream","replaceExternalStreamId","alreadyExists","oldStream","methodObj","origSetLocalDescription","origLocalDescription","getOwnPropertyDescriptor","streamid","shimPeerConnection","addIceCandidateNullSupported","nativeAddIceCandidate","fixNegotiationNeeded","origMSTEnabled","RTCDtmfSender","RTCDTMFSender","RTCPeerConnectionShim","shimRTCPeerConnection","validTurn","shimReplaceTrack","setTrack","nativeGetUserMedia","nativeGetSettings","applyConstraints","nativeApplyConstraints","preferredMediaSource","mediaSource","RTCTrackEvent","mozRTCPeerConnection","modernStatsTypes","nativeGetStats","shimSenderGetStats","shimReceiverGetStats","shimRemoveStream","shimRTCDataChannel","DataChannel","RTCDataChannel","shimAddTransceiver","origAddTransceiver","setParametersPromises","initParameters","shouldPerformCheck","encodingParam","maxFramerate","shimCreateOffer","origCreateOffer","finally","shimCreateAnswer","origCreateAnswer","shimLocalStreamsAPI","_localStreams","_addTrack","shimRemoteStreamsAPI","_remoteStreams","_onaddstream","_onaddstreampoly","shimCallbacksAPI","withCallback","shimConstraints","errcb","shimRTCIceServerUrls","OrigPeerConnection","newIceServers","generateCertificate","shimTrackEventTransceiver","shimCreateOfferLegacy","audioTransceiver","setDirection","videoTransceiver","shimRTCIceCandidate","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","shimMaxMessageSize","_sctp","sctpInDescription","getRemoteFirefoxVersion","getCanSendMaxMessageSize","remoteIsFirefox","canSendMaxMessageSize","getMaxMessageSize","canSendMMS","remoteMMS","POSITIVE_INFINITY","shimSendThrowTypeError","wrapDcSend","dc","origDataChannelSend","origCreateDataChannel","dataChannel","shimConnectionState","_onconnectionstatechange","origMethod","_connectionstatechangepoly","_lastConnectionState","newEvent","removeAllowExtmapMixed","nativeSRD","adapter","shimChrome","shimFirefox","shimEdge","shimSafari","commonShim","chromeShim","browserShim","firefoxShim","edgeShim","safariShim","adapterFactory"],"mappings":"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","file":"lib-jitsi-meet.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 150);\n","const XMPPEvents = {\r\n    /**\r\n     * Indicates error while adding ice candidate.\r\n     */\r\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\r\n\r\n    // Designates an event indicating that the focus has asked us to mute our\r\n    // audio.\r\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\r\n    VIDEO_MUTED_BY_FOCUS : 'xmpp.video_muted_by_focus',\r\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\r\n    BRIDGE_DOWN: 'xmpp.bridge_down',\r\n\r\n    /**\r\n     * Triggered when 'session-accept' is received from the responder.\r\n     */\r\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\r\n\r\n    // Designates an event indicating that an offer (e.g. Jingle\r\n    // session-initiate) was received.\r\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\r\n\r\n    // Triggered when Jicofo kills our media session, this can happen while\r\n    // we're still in the MUC, when it decides to terminate the media session.\r\n    // For example when the session is idle for too long, because we're the only\r\n    // person in the conference room.\r\n    CALL_ENDED: 'xmpp.callended.jingle',\r\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\r\n\r\n    // The conference properties (as advertised by jicofo) have changed\r\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\r\n\r\n    /**\r\n     * This event is triggered when the ICE connects for the first time.\r\n     */\r\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\r\n\r\n    // Designates an event indicating that the connection to the XMPP server\r\n    // failed.\r\n    CONNECTION_FAILED: 'xmpp.connection.failed',\r\n\r\n    // Designates an event indicating that the media (ICE) connection was\r\n    // interrupted. This should go to the RTC module.\r\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\r\n\r\n    // Designates an event indicating that the media (ICE) connection was\r\n    // restored. This should go to the RTC module.\r\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\r\n\r\n    // Designates an event indicating that the media (ICE) connection failed.\r\n    // This should go to the RTC module.\r\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\r\n\r\n    /**\r\n     * Designates an event indicating connection status changes.\r\n     */\r\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\r\n\r\n    // Designates an event indicating that the display name of a participant\r\n    // has changed.\r\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\r\n\r\n    /**\r\n     * Chat room instance have been added to Strophe.emuc plugin.\r\n     */\r\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\r\n\r\n    /**\r\n     * Chat room instance have been removed from Strophe.emuc plugin.\r\n     */\r\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\r\n    ETHERPAD: 'xmpp.etherpad',\r\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\r\n    FOCUS_LEFT: 'xmpp.focus_left',\r\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\r\n\r\n    /**\r\n     * Event fired when 'transport-replace' Jingle message has been received,\r\n     * before the new offer is set on the PeerConnection.\r\n     */\r\n    ICE_RESTARTING: 'rtc.ice_restarting',\r\n\r\n    /**\r\n     * Event fired after the 'transport-replace' message has been processed\r\n     * and the new offer has been set successfully.\r\n     */\r\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\r\n\r\n    /**\r\n     * Designates an event indicating that we were kicked from the XMPP MUC.\r\n     * @param {boolean} isSelfPresence - whether it is for local participant\r\n     * or another participant.\r\n     * @param {string} actorJid - the jid of the participant who was initator\r\n     * of the kick.\r\n     * @param {?string} participantJid - when it is not a kick for local participant,\r\n     * this is the jid of the participant which was kicked.\r\n     */\r\n    KICKED: 'xmpp.kicked',\r\n\r\n    // Designates an event indicating that our role in the XMPP MUC has changed.\r\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\r\n\r\n    /**\r\n     * Event fired when the unique meeting id is set.\r\n     */\r\n    MEETING_ID_SET: 'xmpp.meeting_id_set',\r\n\r\n    // Designates an event indicating that an XMPP message in the MUC was\r\n    // received.\r\n    MESSAGE_RECEIVED: 'xmpp.message_received',\r\n\r\n    // Designates an event indicating that an invite XMPP message in the MUC was\r\n    // received.\r\n    INVITE_MESSAGE_RECEIVED: 'xmpp.invite_message_received',\r\n\r\n    // Designates an event indicating that a private XMPP message in the MUC was\r\n    // received.\r\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\r\n\r\n    // Designates an event indicating that a bot participant type had changed\r\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\r\n\r\n    // Designates an event indicating that the XMPP MUC was destroyed.\r\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\r\n\r\n    // Designates an event indicating that we have joined the XMPP MUC.\r\n    MUC_JOINED: 'xmpp.muc_joined',\r\n\r\n    // Designates an event indicating that a participant joined the XMPP MUC.\r\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\r\n\r\n    // Designates an event indicating that a participant left the XMPP MUC.\r\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\r\n\r\n    // Designates an event indicating that a participant joined the lobby XMPP MUC.\r\n    MUC_LOBBY_MEMBER_JOINED: 'xmpp.muc_lobby_member_joined',\r\n\r\n    // Designates an event indicating that a participant in the lobby XMPP MUC has been updated\r\n    MUC_LOBBY_MEMBER_UPDATED: 'xmpp.muc_lobby_member_updated',\r\n\r\n    // Designates an event indicating that a participant left the XMPP MUC.\r\n    MUC_LOBBY_MEMBER_LEFT: 'xmpp.muc_lobby_member_left',\r\n\r\n    // Designates an event indicating that a participant was denied access to a conference from the lobby XMPP MUC.\r\n    MUC_DENIED_ACCESS: 'xmpp.muc_denied access',\r\n\r\n    // Designates an event indicating that local participant left the muc\r\n    MUC_LEFT: 'xmpp.muc_left',\r\n\r\n    // Designates an event indicating that the MUC role of a participant has\r\n    // changed.\r\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\r\n\r\n    // Designates an event indicating that the MUC has been locked or unlocked.\r\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\r\n\r\n    // Designates an event indicating that the MUC members only config has changed.\r\n    MUC_MEMBERS_ONLY_CHANGED: 'xmpp.muc_members_only_changed',\r\n\r\n    // Designates an event indicating that a participant in the XMPP MUC has\r\n    // advertised that they have audio muted (or unmuted).\r\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\r\n\r\n    // Designates an event indicating that a participant in the XMPP MUC has\r\n    // advertised that they have video muted (or unmuted).\r\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\r\n\r\n    // Designates an event indicating that the video type (e.g. 'camera' or\r\n    // 'screen') for a participant has changed.\r\n    // Note: currently this event fires every time we receive presence from\r\n    // someone (regardless of whether or not the \"video type\" changed).\r\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\r\n\r\n    /**\r\n     * Indicates that the features of the participant has been changed.\r\n     */\r\n    PARTCIPANT_FEATURES_CHANGED: 'xmpp.partcipant_features_changed',\r\n    PASSWORD_REQUIRED: 'xmpp.password_required',\r\n\r\n    /**\r\n     * Indicates that phone number changed.\r\n     */\r\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\r\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\r\n    PRESENCE_STATUS: 'xmpp.presence_status',\r\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\r\n\r\n    // xmpp is connected and obtained user media\r\n    READY_TO_JOIN: 'xmpp.ready_to_join',\r\n\r\n    /**\r\n     * Indicates that recording state changed.\r\n     */\r\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\r\n\r\n    // Designates an event indicating that we received statistics from a\r\n    // participant in the MUC.\r\n    REMOTE_STATS: 'xmpp.remote_stats',\r\n\r\n    /**\r\n     * Indicates that the offer / answer renegotiation has failed.\r\n     */\r\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\r\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\r\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\r\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\r\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\r\n    ROOM_CONNECT_MEMBERS_ONLY_ERROR: 'xmpp.room_connect_error.members_only',\r\n\r\n    /**\r\n     * Indicates that max users limit has been reached.\r\n     */\r\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\r\n\r\n    // Designates an event indicating that we sent an XMPP message to the MUC.\r\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\r\n\r\n    // Designates an event indicating that we sent a private XMPP message to\r\n    // a specific user of the muc.\r\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\r\n\r\n    /**\r\n    SESSION_ACCEPT = 'xmpp.session_accept',\r\n    SESSION_ACCEPT_ERROR = 'xmpp.session_accept_error',\r\n     * Event fired when we do not get our 'session-accept' acknowledged by\r\n     * Jicofo. It most likely means that there is serious problem with our\r\n     * connection or XMPP server and we should reload the conference.\r\n     *\r\n     * We have seen that to happen in BOSH requests race condition when the BOSH\r\n     * request table containing the 'session-accept' was discarded by Prosody.\r\n     * Jicofo does send the RESULT immediately without any condition, so missing\r\n     * packets means that most likely it has never seen our IQ.\r\n     */\r\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\r\n\r\n    /**\r\n     * Event fired after successful sending of jingle source-add.\r\n     */\r\n    SOURCE_ADD : 'xmpp.source_add',\r\n\r\n    /**\r\n     * Event fired after receiving an error sending of jingle source-add.\r\n     */\r\n    SOURCE_ADD_ERROR : 'xmpp.source_add_error',\r\n\r\n    /**\r\n     * Event fired after successful sending of jingle source-remove.\r\n     */\r\n    SOURCE_REMOVE : 'xmpp.source_remove',\r\n\r\n    /**\r\n     * Event fired after receiving an error sending of jingle source-remove.\r\n     */\r\n    SOURCE_REMOVE_ERROR : 'xmpp.source_remove_error',\r\n\r\n    /**\r\n     * Event fired when speaker stats update message is received.\r\n     */\r\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\r\n\r\n    /**\r\n     * Event fired when conference creation timestamp is received.\r\n     */\r\n    CONFERENCE_TIMESTAMP_RECEIVED: 'xmpp.conference_timestamp_received',\r\n\r\n    // Designates an event indicating that we should join the conference with\r\n    // audio and/or video muted.\r\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\r\n\r\n    // Designates an event indicating that the subject of the XMPP MUC has\r\n    // changed.\r\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\r\n\r\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\r\n    // suspending detected\r\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\r\n\r\n    /**\r\n     * Notifies for transcription status changes. The event provides the\r\n     * following parameters to its listeners:\r\n     *\r\n     * @param {String} status - The new status.\r\n     */\r\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\r\n\r\n    /**\r\n     * Event fired when 'transport-info' with new ICE candidates is received.\r\n     */\r\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\r\n\r\n    /**\r\n     * Indicates that video SIP GW state changed.\r\n     *\r\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\r\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\r\n     */\r\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\r\n\r\n    /**\r\n     * Indicates that video SIP GW Session state changed.\r\n     * The statuses are any of the following statuses:\r\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\r\n     * {@see VideoSIPGWConstants}\r\n     *\r\n     * @param {options} event - {address, oldState, newState, displayName}.\r\n     */\r\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\r\n        'xmpp.videoSIPGWSessionStateChanged',\r\n\r\n    // Designates an event indicating that the local ICE connection state has\r\n    // changed.\r\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\r\n\r\n    /**\r\n     * Event which is emitted when the body in an XMPP message in the MUC\r\n     * contains JSON\r\n     */\r\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\r\n};\r\n\r\nmodule.exports = XMPPEvents;\r\n","/**\r\n * The events for the conference.\r\n */\r\n\r\n/**\r\n * Event indicates that the current conference audio input switched between audio\r\n * input states,i.e. with or without audio input.\r\n */\r\nexport const AUDIO_INPUT_STATE_CHANGE = 'conference.audio_input_state_changed';\r\n\r\n/**\r\n * Indicates that authentication status changed.\r\n */\r\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\r\n\r\n/**\r\n * Fired just before the statistics module is disposed and it's the last chance\r\n * to submit some logs to the statistics service (ex. CallStats if enabled),\r\n * before it's disconnected.\r\n */\r\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\r\n\r\n/**\r\n * Indicates that an error occured.\r\n */\r\nexport const CONFERENCE_ERROR = 'conference.error';\r\n\r\n/**\r\n * Indicates that conference failed.\r\n */\r\nexport const CONFERENCE_FAILED = 'conference.failed';\r\n\r\n/**\r\n * Indicates that conference has been joined. The event does NOT provide any\r\n * parameters to its listeners.\r\n */\r\nexport const CONFERENCE_JOINED = 'conference.joined';\r\n\r\n/**\r\n * Indicates that conference has been left.\r\n */\r\nexport const CONFERENCE_LEFT = 'conference.left';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been established\r\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\r\n * state for the first time.\r\n */\r\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been interrupted for some\r\n * reason.\r\n * XXX This is currently fired when the *ICE* connection is interrupted.\r\n */\r\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\r\n\r\n/**\r\n * Indicates that the connection to the conference has been restored.\r\n * XXX This is currently fired when the *ICE* connection is restored.\r\n */\r\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\r\n\r\n/**\r\n * A connection to the video bridge's data channel has been established.\r\n */\r\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\r\n\r\n/**\r\n * A user has changed it display name\r\n */\r\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\r\n\r\n/**\r\n * The dominant speaker was changed.\r\n */\r\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\r\n\r\n/**\r\n * UTC conference timestamp when first participant joined.\r\n */\r\nexport const CONFERENCE_CREATED_TIMESTAMP = 'conference.createdTimestamp';\r\n\r\n/**\r\n * Indicates that DTMF support changed.\r\n */\r\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\r\n\r\n/**\r\n * Indicates that a message from another participant is received on data\r\n * channel.\r\n */\r\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\r\n\r\n/**\r\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\r\n *\r\n * Event emitted when conference transits, between one to one and multiparty JVB\r\n * conference. If the conference switches to P2P it's neither one to one nor\r\n * a multiparty JVB conference, but P2P (the status argument of this event will\r\n * be <tt>false</tt>).\r\n *\r\n * The first argument is a boolean which carries the previous value and\r\n * the seconds argument is a boolean with the new status. The event is emitted\r\n * only if the previous and the new values are different.\r\n *\r\n * @type {string}\r\n */\r\nexport const JVB121_STATUS = 'conference.jvb121Status';\r\n\r\n/**\r\n * You are kicked from the conference.\r\n * @param {JitsiParticipant} the participant that initiated the kick.\r\n */\r\nexport const KICKED = 'conference.kicked';\r\n\r\n/**\r\n * Participant was kicked from the conference.\r\n * @param {JitsiParticipant} the participant that initiated the kick.\r\n * @param {JitsiParticipant} the participant that was kicked.\r\n */\r\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\r\n\r\n/**\r\n * The Last N set is changed.\r\n *\r\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\r\n * which are leaving Last N\r\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\r\n * which are entering Last N\r\n */\r\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\r\n\r\n/**\r\n * Indicates that the room has been locked or unlocked.\r\n */\r\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\r\n\r\n/**\r\n * Indicates that the region of the media server (jitsi-videobridge) that we\r\n * are connected to changed (or was initially set).\r\n * @type {string} the region.\r\n */\r\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\r\n\r\n/**\r\n * An event(library-private) fired when a new media session is added to the conference.\r\n * @type {string}\r\n * @private\r\n */\r\nexport const _MEDIA_SESSION_STARTED = 'conference.media_session.started';\r\n\r\n/**\r\n * An event(library-private) fired when the conference switches the currently active media session.\r\n * @type {string}\r\n * @private\r\n */\r\nexport const _MEDIA_SESSION_ACTIVE_CHANGED = 'conference.media_session.active_changed';\r\n\r\n/**\r\n * Indicates that the conference had changed to members only enabled/disabled.\r\n * The first argument of this event is a <tt>boolean</tt> which when set to\r\n * <tt>true</tt> means that the conference is running in members only mode.\r\n * You may need to use Lobby if supported to ask for permissions to enter the conference.\r\n */\r\nexport const MEMBERS_ONLY_CHANGED = 'conference.membersOnlyChanged';\r\n\r\n/**\r\n * New text message was received.\r\n */\r\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\r\n\r\n/**\r\n * Event indicates that the current selected input device has no signal\r\n */\r\nexport const NO_AUDIO_INPUT = 'conference.no_audio_input';\r\n\r\n/**\r\n * Event indicates that the current microphone used by the conference is noisy.\r\n */\r\nexport const NOISY_MIC = 'conference.noisy_mic';\r\n\r\n/**\r\n * New private text message was received.\r\n */\r\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\r\n\r\n/**\r\n * Event fired when JVB sends notification about interrupted/restored user's\r\n * ICE connection status or we detect local problem with the video track.\r\n * First argument is the ID of the participant and\r\n * the seconds is a string indicating if the connection is currently\r\n * - active - the connection is active\r\n * - inactive - the connection is inactive, was intentionally interrupted by\r\n * the bridge\r\n * - interrupted - a network problem occurred\r\n * - restoring - the connection was inactive and is restoring now\r\n *\r\n * The current status value can be obtained by calling\r\n * JitsiParticipant.getConnectionStatus().\r\n */\r\nexport const PARTICIPANT_CONN_STATUS_CHANGED\r\n    = 'conference.participant_conn_status_changed';\r\n\r\n/**\r\n * Indicates that the features of the participant has been changed.\r\n */\r\nexport const PARTCIPANT_FEATURES_CHANGED\r\n    = 'conference.partcipant_features_changed';\r\n\r\n/**\r\n * Indicates that a the value of a specific property of a specific participant\r\n * has changed.\r\n */\r\nexport const PARTICIPANT_PROPERTY_CHANGED\r\n    = 'conference.participant_property_changed';\r\n\r\n/**\r\n * Indicates that the conference has switched between JVB and P2P connections.\r\n * The first argument of this event is a <tt>boolean</tt> which when set to\r\n * <tt>true</tt> means that the conference is running on the P2P connection.\r\n */\r\nexport const P2P_STATUS = 'conference.p2pStatus';\r\n\r\n/**\r\n * Indicates that phone number changed.\r\n */\r\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\r\n\r\n/**\r\n * The conference properties changed.\r\n * @type {string}\r\n */\r\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\r\n\r\n/**\r\n * Indicates that recording state changed.\r\n */\r\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\r\n\r\n/**\r\n * Indicates that video SIP GW state changed.\r\n * @param {VideoSIPGWConstants} status.\r\n */\r\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\r\n    = 'conference.videoSIPGWAvailabilityChanged';\r\n\r\n/**\r\n * Indicates that video SIP GW Session state changed.\r\n * @param {options} event - {\r\n *     {string} address,\r\n *     {VideoSIPGWConstants} oldState,\r\n *     {VideoSIPGWConstants} newState,\r\n *     {string} displayName}\r\n * }.\r\n */\r\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\r\n    = 'conference.videoSIPGWSessionStateChanged';\r\n\r\n/**\r\n * Indicates that start muted settings changed.\r\n */\r\nexport const START_MUTED_POLICY_CHANGED\r\n    = 'conference.start_muted_policy_changed';\r\n\r\n/**\r\n * Indicates that the local user has started muted.\r\n */\r\nexport const STARTED_MUTED = 'conference.started_muted';\r\n\r\n/**\r\n * Indicates that subject of the conference has changed.\r\n */\r\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\r\n\r\n/**\r\n * Indicates that DTMF support changed.\r\n */\r\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\r\n\r\n/**\r\n * Event indicates that local user is talking while he muted himself\r\n */\r\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\r\n\r\n/**\r\n * A new media track was added to the conference. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {JitsiTrack} track the added JitsiTrack\r\n */\r\nexport const TRACK_ADDED = 'conference.trackAdded';\r\n\r\n/**\r\n * Audio levels of a media track ( attached to the conference) was changed.\r\n */\r\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\r\n\r\n/**\r\n * A media track ( attached to the conference) mute status was changed.\r\n * @param {JitsiParticipant|null} the participant that initiated the mute\r\n * if it is a remote mute.\r\n */\r\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\r\n\r\n/**\r\n * The media track was removed from the conference. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {JitsiTrack} track the removed JitsiTrack\r\n */\r\nexport const TRACK_REMOVED = 'conference.trackRemoved';\r\n\r\nexport const TRACK_UNMUTE_REJECTED = 'conference.trackUnmuteRejected';\r\n\r\n/**\r\n * Notifies for transcription status changes. The event provides the\r\n * following parameters to its listeners:\r\n *\r\n * @param {String} status - The new status.\r\n */\r\nexport const TRANSCRIPTION_STATUS_CHANGED\r\n    = 'conference.transcriptionStatusChanged';\r\n\r\n\r\n/**\r\n * A new user joined the conference.\r\n */\r\nexport const USER_JOINED = 'conference.userJoined';\r\n\r\n/**\r\n * A user has left the conference.\r\n */\r\nexport const USER_LEFT = 'conference.userLeft';\r\n\r\n/**\r\n * User role changed.\r\n */\r\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\r\n\r\n/**\r\n * User status changed.\r\n */\r\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\r\n\r\n/**\r\n * Event indicates that the bot participant type changed.\r\n */\r\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\r\n\r\n/**\r\n * A new user joined the lobby room.\r\n */\r\nexport const LOBBY_USER_JOINED = 'conference.lobby.userJoined';\r\n\r\n/**\r\n * A user from the lobby room has been update.\r\n */\r\nexport const LOBBY_USER_UPDATED = 'conference.lobby.userUpdated';\r\n\r\n/**\r\n * A user left the lobby room.\r\n */\r\nexport const LOBBY_USER_LEFT = 'conference.lobby.userLeft';\r\n\r\n\r\nexport const FORWARDED_SOURCES_CHANGED = 'conference.forwardedSourcesChanged';","(function (global, factory) {\r\n            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n            typeof define === 'function' && define.amd ? define(factory) :\r\n            (global = global || self, global.strophe = factory());\r\n}(this, function () { 'use strict';\r\n\r\n            var global$1 = (typeof global !== \"undefined\" ? global :\r\n                        typeof self !== \"undefined\" ? self :\r\n                        typeof window !== \"undefined\" ? window : {});\r\n\r\n            function _typeof(obj) {\r\n              if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\r\n                _typeof = function (obj) {\r\n                  return typeof obj;\r\n                };\r\n              } else {\r\n                _typeof = function (obj) {\r\n                  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\r\n                };\r\n              }\r\n\r\n              return _typeof(obj);\r\n            }\r\n\r\n            function _toConsumableArray(arr) {\r\n              return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\r\n            }\r\n\r\n            function _arrayWithoutHoles(arr) {\r\n              if (Array.isArray(arr)) {\r\n                for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\r\n\r\n                return arr2;\r\n              }\r\n            }\r\n\r\n            function _iterableToArray(iter) {\r\n              if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\r\n            }\r\n\r\n            function _nonIterableSpread() {\r\n              throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\r\n            }\r\n\r\n            /*\r\n             * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\r\n             * Digest Algorithm, as defined in RFC 1321.\r\n             * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\r\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n             * Distributed under the BSD License\r\n             * See http://pajhome.org.uk/crypt/md5 for more info.\r\n             */\r\n\r\n            /*\r\n             * Everything that isn't used by Strophe has been stripped here!\r\n             */\r\n\r\n            /*\r\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n             * to work around bugs in some JS interpreters.\r\n             */\r\n            var safe_add = function safe_add(x, y) {\r\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n              return msw << 16 | lsw & 0xFFFF;\r\n            };\r\n            /*\r\n             * Bitwise rotate a 32-bit number to the left.\r\n             */\r\n\r\n\r\n            var bit_rol = function bit_rol(num, cnt) {\r\n              return num << cnt | num >>> 32 - cnt;\r\n            };\r\n            /*\r\n             * Convert a string to an array of little-endian words\r\n             */\r\n\r\n\r\n            var str2binl = function str2binl(str) {\r\n              if (typeof str !== \"string\") {\r\n                throw new Error(\"str2binl was passed a non-string\");\r\n              }\r\n\r\n              var bin = [];\r\n\r\n              for (var i = 0; i < str.length * 8; i += 8) {\r\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\r\n              }\r\n\r\n              return bin;\r\n            };\r\n            /*\r\n             * Convert an array of little-endian words to a string\r\n             */\r\n\r\n\r\n            var binl2str = function binl2str(bin) {\r\n              var str = \"\";\r\n\r\n              for (var i = 0; i < bin.length * 32; i += 8) {\r\n                str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\r\n              }\r\n\r\n              return str;\r\n            };\r\n            /*\r\n             * Convert an array of little-endian words to a hex string.\r\n             */\r\n\r\n\r\n            var binl2hex = function binl2hex(binarray) {\r\n              var hex_tab = \"0123456789abcdef\";\r\n              var str = \"\";\r\n\r\n              for (var i = 0; i < binarray.length * 4; i++) {\r\n                str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) + hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\r\n              }\r\n\r\n              return str;\r\n            };\r\n            /*\r\n             * These functions implement the four basic operations the algorithm uses.\r\n             */\r\n\r\n\r\n            var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\r\n              return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\r\n            };\r\n\r\n            var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\r\n              return md5_cmn(b & c | ~b & d, a, b, x, s, t);\r\n            };\r\n\r\n            var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\r\n              return md5_cmn(b & d | c & ~d, a, b, x, s, t);\r\n            };\r\n\r\n            var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\r\n              return md5_cmn(b ^ c ^ d, a, b, x, s, t);\r\n            };\r\n\r\n            var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\r\n              return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\r\n            };\r\n            /*\r\n             * Calculate the MD5 of an array of little-endian words, and a bit length\r\n             */\r\n\r\n\r\n            var core_md5 = function core_md5(x, len) {\r\n              /* append padding */\r\n              x[len >> 5] |= 0x80 << len % 32;\r\n              x[(len + 64 >>> 9 << 4) + 14] = len;\r\n              var a = 1732584193;\r\n              var b = -271733879;\r\n              var c = -1732584194;\r\n              var d = 271733878;\r\n              var olda, oldb, oldc, oldd;\r\n\r\n              for (var i = 0; i < x.length; i += 16) {\r\n                olda = a;\r\n                oldb = b;\r\n                oldc = c;\r\n                oldd = d;\r\n                a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\r\n                d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\r\n                c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\r\n                b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\r\n                a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\r\n                d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\r\n                c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\r\n                b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\r\n                a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\r\n                d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\r\n                c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\r\n                b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\r\n                a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\r\n                d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\r\n                c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\r\n                b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\r\n                a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\r\n                d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\r\n                c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\r\n                b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\r\n                a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\r\n                d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\r\n                c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\r\n                b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\r\n                a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\r\n                d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\r\n                c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\r\n                b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\r\n                a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\r\n                d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\r\n                c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\r\n                b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\r\n                a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\r\n                d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\r\n                c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\r\n                b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\r\n                a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\r\n                d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\r\n                c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\r\n                b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\r\n                a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\r\n                d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\r\n                c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\r\n                b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\r\n                a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\r\n                d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\r\n                c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\r\n                b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\r\n                a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\r\n                d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\r\n                c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\r\n                b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\r\n                a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\r\n                d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\r\n                c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\r\n                b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\r\n                a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\r\n                d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\r\n                c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\r\n                b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\r\n                a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\r\n                d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\r\n                c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\r\n                b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\r\n                a = safe_add(a, olda);\r\n                b = safe_add(b, oldb);\r\n                c = safe_add(c, oldc);\r\n                d = safe_add(d, oldd);\r\n              }\r\n\r\n              return [a, b, c, d];\r\n            };\r\n            /*\r\n             * These are the functions you'll usually want to call.\r\n             * They take string arguments and return either hex or base-64 encoded\r\n             * strings.\r\n             */\r\n\r\n\r\n            var MD5 = {\r\n              hexdigest: function hexdigest(s) {\r\n                return binl2hex(core_md5(str2binl(s), s.length * 8));\r\n              },\r\n              hash: function hash(s) {\r\n                return binl2str(core_md5(str2binl(s), s.length * 8));\r\n              }\r\n            };\r\n\r\n            /*\r\n             * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\r\n             * in FIPS PUB 180-1\r\n             * Version 2.1a Copyright Paul Johnston 2000 - 2002.\r\n             * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n             * Distributed under the BSD License\r\n             * See http://pajhome.org.uk/crypt/md5 for details.\r\n             */\r\n\r\n            /* global define */\r\n\r\n            /* Some functions and variables have been stripped for use with Strophe */\r\n\r\n            /*\r\n             * Calculate the SHA-1 of an array of big-endian words, and a bit length\r\n             */\r\n            function core_sha1(x, len) {\r\n              /* append padding */\r\n              x[len >> 5] |= 0x80 << 24 - len % 32;\r\n              x[(len + 64 >> 9 << 4) + 15] = len;\r\n              var w = new Array(80);\r\n              var a = 1732584193;\r\n              var b = -271733879;\r\n              var c = -1732584194;\r\n              var d = 271733878;\r\n              var e = -1009589776;\r\n              var i, j, t, olda, oldb, oldc, oldd, olde;\r\n\r\n              for (i = 0; i < x.length; i += 16) {\r\n                olda = a;\r\n                oldb = b;\r\n                oldc = c;\r\n                oldd = d;\r\n                olde = e;\r\n\r\n                for (j = 0; j < 80; j++) {\r\n                  if (j < 16) {\r\n                    w[j] = x[i + j];\r\n                  } else {\r\n                    w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\r\n                  }\r\n\r\n                  t = safe_add$1(safe_add$1(rol(a, 5), sha1_ft(j, b, c, d)), safe_add$1(safe_add$1(e, w[j]), sha1_kt(j)));\r\n                  e = d;\r\n                  d = c;\r\n                  c = rol(b, 30);\r\n                  b = a;\r\n                  a = t;\r\n                }\r\n\r\n                a = safe_add$1(a, olda);\r\n                b = safe_add$1(b, oldb);\r\n                c = safe_add$1(c, oldc);\r\n                d = safe_add$1(d, oldd);\r\n                e = safe_add$1(e, olde);\r\n              }\r\n\r\n              return [a, b, c, d, e];\r\n            }\r\n            /*\r\n             * Perform the appropriate triplet combination function for the current\r\n             * iteration\r\n             */\r\n\r\n\r\n            function sha1_ft(t, b, c, d) {\r\n              if (t < 20) {\r\n                return b & c | ~b & d;\r\n              }\r\n\r\n              if (t < 40) {\r\n                return b ^ c ^ d;\r\n              }\r\n\r\n              if (t < 60) {\r\n                return b & c | b & d | c & d;\r\n              }\r\n\r\n              return b ^ c ^ d;\r\n            }\r\n            /*\r\n             * Determine the appropriate additive constant for the current iteration\r\n             */\r\n\r\n\r\n            function sha1_kt(t) {\r\n              return t < 20 ? 1518500249 : t < 40 ? 1859775393 : t < 60 ? -1894007588 : -899497514;\r\n            }\r\n            /*\r\n             * Calculate the HMAC-SHA1 of a key and some data\r\n             */\r\n\r\n\r\n            function core_hmac_sha1(key, data) {\r\n              var bkey = str2binb(key);\r\n\r\n              if (bkey.length > 16) {\r\n                bkey = core_sha1(bkey, key.length * 8);\r\n              }\r\n\r\n              var ipad = new Array(16),\r\n                  opad = new Array(16);\r\n\r\n              for (var i = 0; i < 16; i++) {\r\n                ipad[i] = bkey[i] ^ 0x36363636;\r\n                opad[i] = bkey[i] ^ 0x5C5C5C5C;\r\n              }\r\n\r\n              var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\r\n              return core_sha1(opad.concat(hash), 512 + 160);\r\n            }\r\n            /*\r\n             * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n             * to work around bugs in some JS interpreters.\r\n             */\r\n\r\n\r\n            function safe_add$1(x, y) {\r\n              var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n              var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n              return msw << 16 | lsw & 0xFFFF;\r\n            }\r\n            /*\r\n             * Bitwise rotate a 32-bit number to the left.\r\n             */\r\n\r\n\r\n            function rol(num, cnt) {\r\n              return num << cnt | num >>> 32 - cnt;\r\n            }\r\n            /*\r\n             * Convert an 8-bit or 16-bit string to an array of big-endian words\r\n             * In 8-bit function, characters >255 have their hi-byte silently ignored.\r\n             */\r\n\r\n\r\n            function str2binb(str) {\r\n              var bin = [];\r\n              var mask = 255;\r\n\r\n              for (var i = 0; i < str.length * 8; i += 8) {\r\n                bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\r\n              }\r\n\r\n              return bin;\r\n            }\r\n            /*\r\n             * Convert an array of big-endian words to a base-64 string\r\n             */\r\n\r\n\r\n            function binb2b64(binarray) {\r\n              var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n              var str = \"\";\r\n              var triplet, j;\r\n\r\n              for (var i = 0; i < binarray.length * 4; i += 3) {\r\n                triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 | (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 | binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\r\n\r\n                for (j = 0; j < 4; j++) {\r\n                  if (i * 8 + j * 6 > binarray.length * 32) {\r\n                    str += \"=\";\r\n                  } else {\r\n                    str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\r\n                  }\r\n                }\r\n              }\r\n\r\n              return str;\r\n            }\r\n            /*\r\n             * Convert an array of big-endian words to a string\r\n             */\r\n\r\n\r\n            function binb2str(bin) {\r\n              var str = \"\";\r\n              var mask = 255;\r\n\r\n              for (var i = 0; i < bin.length * 32; i += 8) {\r\n                str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\r\n              }\r\n\r\n              return str;\r\n            }\r\n            /*\r\n             * These are the functions you'll usually want to call\r\n             * They take string arguments and return either hex or base-64 encoded strings\r\n             */\r\n\r\n\r\n            var SHA1 = {\r\n              b64_hmac_sha1: function b64_hmac_sha1(key, data) {\r\n                return binb2b64(core_hmac_sha1(key, data));\r\n              },\r\n              b64_sha1: function b64_sha1(s) {\r\n                return binb2b64(core_sha1(str2binb(s), s.length * 8));\r\n              },\r\n              binb2str: binb2str,\r\n              core_hmac_sha1: core_hmac_sha1,\r\n              str_hmac_sha1: function str_hmac_sha1(key, data) {\r\n                return binb2str(core_hmac_sha1(key, data));\r\n              },\r\n              str_sha1: function str_sha1(s) {\r\n                return binb2str(core_sha1(str2binb(s), s.length * 8));\r\n              }\r\n            };\r\n\r\n            var utils = {\r\n              utf16to8: function utf16to8(str) {\r\n                var i, c;\r\n                var out = \"\";\r\n                var len = str.length;\r\n\r\n                for (i = 0; i < len; i++) {\r\n                  c = str.charCodeAt(i);\r\n\r\n                  if (c >= 0x0000 && c <= 0x007F) {\r\n                    out += str.charAt(i);\r\n                  } else if (c > 0x07FF) {\r\n                    out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\r\n                    out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\r\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\r\n                  } else {\r\n                    out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\r\n                    out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\r\n                  }\r\n                }\r\n\r\n                return out;\r\n              },\r\n              addCookies: function addCookies(cookies) {\r\n                /* Parameters:\r\n                 *  (Object) cookies - either a map of cookie names\r\n                 *    to string values or to maps of cookie values.\r\n                 *\r\n                 * For example:\r\n                 * { \"myCookie\": \"1234\" }\r\n                 *\r\n                 * or:\r\n                 * { \"myCookie\": {\r\n                 *      \"value\": \"1234\",\r\n                 *      \"domain\": \".example.org\",\r\n                 *      \"path\": \"/\",\r\n                 *      \"expires\": expirationDate\r\n                 *      }\r\n                 *  }\r\n                 *\r\n                 *  These values get passed to Strophe.Connection via\r\n                 *   options.cookies\r\n                 */\r\n                cookies = cookies || {};\r\n\r\n                for (var cookieName in cookies) {\r\n                  if (Object.prototype.hasOwnProperty.call(cookies, cookieName)) {\r\n                    var expires = '';\r\n                    var domain = '';\r\n                    var path = '';\r\n                    var cookieObj = cookies[cookieName];\r\n                    var isObj = _typeof(cookieObj) === \"object\";\r\n                    var cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\r\n\r\n                    if (isObj) {\r\n                      expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\r\n                      domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\r\n                      path = cookieObj.path ? \";path=\" + cookieObj.path : '';\r\n                    }\r\n\r\n                    document.cookie = cookieName + '=' + cookieValue + expires + domain + path;\r\n                  }\r\n                }\r\n              }\r\n            };\r\n\r\n            /** Function: $build\r\n             *  Create a Strophe.Builder.\r\n             *  This is an alias for 'new Strophe.Builder(name, attrs)'.\r\n             *\r\n             *  Parameters:\r\n             *    (String) name - The root element name.\r\n             *    (Object) attrs - The attributes for the root element in object notation.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Builder object.\r\n             */\r\n\r\n            function $build(name, attrs) {\r\n              return new Strophe.Builder(name, attrs);\r\n            }\r\n            /** Function: $msg\r\n             *  Create a Strophe.Builder with a <message/> element as the root.\r\n             *\r\n             *  Parameters:\r\n             *    (Object) attrs - The <message/> element attributes in object notation.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Builder object.\r\n             */\r\n\r\n\r\n            function $msg(attrs) {\r\n              return new Strophe.Builder(\"message\", attrs);\r\n            }\r\n            /** Function: $iq\r\n             *  Create a Strophe.Builder with an <iq/> element as the root.\r\n             *\r\n             *  Parameters:\r\n             *    (Object) attrs - The <iq/> element attributes in object notation.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Builder object.\r\n             */\r\n\r\n\r\n            function $iq(attrs) {\r\n              return new Strophe.Builder(\"iq\", attrs);\r\n            }\r\n            /** Function: $pres\r\n             *  Create a Strophe.Builder with a <presence/> element as the root.\r\n             *\r\n             *  Parameters:\r\n             *    (Object) attrs - The <presence/> element attributes in object notation.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Builder object.\r\n             */\r\n\r\n\r\n            function $pres(attrs) {\r\n              return new Strophe.Builder(\"presence\", attrs);\r\n            }\r\n            /** Class: Strophe\r\n             *  An object container for all Strophe library functions.\r\n             *\r\n             *  This class is just a container for all the objects and constants\r\n             *  used in the library.  It is not meant to be instantiated, but to\r\n             *  provide a namespace for library objects, constants, and functions.\r\n             */\r\n\r\n\r\n            var Strophe = {\r\n              /** Constant: VERSION */\r\n              VERSION: \"@VERSION@\",\r\n\r\n              /** Constants: XMPP Namespace Constants\r\n               *  Common namespace constants from the XMPP RFCs and XEPs.\r\n               *\r\n               *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\r\n               *  NS.BOSH - BOSH namespace from XEP 206.\r\n               *  NS.CLIENT - Main XMPP client namespace.\r\n               *  NS.AUTH - Legacy authentication namespace.\r\n               *  NS.ROSTER - Roster operations namespace.\r\n               *  NS.PROFILE - Profile namespace.\r\n               *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\r\n               *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\r\n               *  NS.MUC - Multi-User Chat namespace from XEP 45.\r\n               *  NS.SASL - XMPP SASL namespace from RFC 3920.\r\n               *  NS.STREAM - XMPP Streams namespace from RFC 3920.\r\n               *  NS.BIND - XMPP Binding namespace from RFC 3920 and RFC 6120.\r\n               *  NS.SESSION - XMPP Session namespace from RFC 3920.\r\n               *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\r\n               *  NS.XHTML - XHTML body namespace from XEP 71.\r\n               */\r\n              NS: {\r\n                HTTPBIND: \"http://jabber.org/protocol/httpbind\",\r\n                BOSH: \"urn:xmpp:xbosh\",\r\n                CLIENT: \"jabber:client\",\r\n                AUTH: \"jabber:iq:auth\",\r\n                ROSTER: \"jabber:iq:roster\",\r\n                PROFILE: \"jabber:iq:profile\",\r\n                DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\r\n                DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\r\n                MUC: \"http://jabber.org/protocol/muc\",\r\n                SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\r\n                STREAM: \"http://etherx.jabber.org/streams\",\r\n                FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\r\n                BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\r\n                SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\r\n                VERSION: \"jabber:iq:version\",\r\n                STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\r\n                XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\r\n                XHTML: \"http://www.w3.org/1999/xhtml\"\r\n              },\r\n\r\n              /** Constants: XHTML_IM Namespace\r\n               *  contains allowed tags, tag attributes, and css properties.\r\n               *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\r\n               *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\r\n               *  allowed tags and their attributes.\r\n               */\r\n              XHTML: {\r\n                tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\r\n                attributes: {\r\n                  'a': ['href'],\r\n                  'blockquote': ['style'],\r\n                  'br': [],\r\n                  'cite': ['style'],\r\n                  'em': [],\r\n                  'img': ['src', 'alt', 'style', 'height', 'width'],\r\n                  'li': ['style'],\r\n                  'ol': ['style'],\r\n                  'p': ['style'],\r\n                  'span': ['style'],\r\n                  'strong': [],\r\n                  'ul': ['style'],\r\n                  'body': []\r\n                },\r\n                css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\r\n\r\n                /** Function: XHTML.validTag\r\n                 *\r\n                 * Utility method to determine whether a tag is allowed\r\n                 * in the XHTML_IM namespace.\r\n                 *\r\n                 * XHTML tag names are case sensitive and must be lower case.\r\n                 */\r\n                validTag: function validTag(tag) {\r\n                  for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\r\n                    if (tag === Strophe.XHTML.tags[i]) {\r\n                      return true;\r\n                    }\r\n                  }\r\n\r\n                  return false;\r\n                },\r\n\r\n                /** Function: XHTML.validAttribute\r\n                 *\r\n                 * Utility method to determine whether an attribute is allowed\r\n                 * as recommended per XEP-0071\r\n                 *\r\n                 * XHTML attribute names are case sensitive and must be lower case.\r\n                 */\r\n                validAttribute: function validAttribute(tag, attribute) {\r\n                  if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\r\n                    for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\r\n                      if (attribute === Strophe.XHTML.attributes[tag][i]) {\r\n                        return true;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  return false;\r\n                },\r\n                validCSS: function validCSS(style) {\r\n                  for (var i = 0; i < Strophe.XHTML.css.length; i++) {\r\n                    if (style === Strophe.XHTML.css[i]) {\r\n                      return true;\r\n                    }\r\n                  }\r\n\r\n                  return false;\r\n                }\r\n              },\r\n\r\n              /** Constants: Connection Status Constants\r\n               *  Connection status constants for use by the connection handler\r\n               *  callback.\r\n               *\r\n               *  Status.ERROR - An error has occurred\r\n               *  Status.CONNECTING - The connection is currently being made\r\n               *  Status.CONNFAIL - The connection attempt failed\r\n               *  Status.AUTHENTICATING - The connection is authenticating\r\n               *  Status.AUTHFAIL - The authentication attempt failed\r\n               *  Status.CONNECTED - The connection has succeeded\r\n               *  Status.DISCONNECTED - The connection has been terminated\r\n               *  Status.DISCONNECTING - The connection is currently being terminated\r\n               *  Status.ATTACHED - The connection has been attached\r\n               *  Status.REDIRECT - The connection has been redirected\r\n               *  Status.CONNTIMEOUT - The connection has timed out\r\n               */\r\n              Status: {\r\n                ERROR: 0,\r\n                CONNECTING: 1,\r\n                CONNFAIL: 2,\r\n                AUTHENTICATING: 3,\r\n                AUTHFAIL: 4,\r\n                CONNECTED: 5,\r\n                DISCONNECTED: 6,\r\n                DISCONNECTING: 7,\r\n                ATTACHED: 8,\r\n                REDIRECT: 9,\r\n                CONNTIMEOUT: 10,\r\n                BINDREQUIRED: 11\r\n              },\r\n              ErrorCondition: {\r\n                BAD_FORMAT: \"bad-format\",\r\n                CONFLICT: \"conflict\",\r\n                MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\r\n                NO_AUTH_MECH: \"no-auth-mech\",\r\n                UNKNOWN_REASON: \"unknown\"\r\n              },\r\n\r\n              /** Constants: Log Level Constants\r\n               *  Logging level indicators.\r\n               *\r\n               *  LogLevel.DEBUG - Debug output\r\n               *  LogLevel.INFO - Informational output\r\n               *  LogLevel.WARN - Warnings\r\n               *  LogLevel.ERROR - Errors\r\n               *  LogLevel.FATAL - Fatal errors\r\n               */\r\n              LogLevel: {\r\n                DEBUG: 0,\r\n                INFO: 1,\r\n                WARN: 2,\r\n                ERROR: 3,\r\n                FATAL: 4\r\n              },\r\n\r\n              /** PrivateConstants: DOM Element Type Constants\r\n               *  DOM element types.\r\n               *\r\n               *  ElementType.NORMAL - Normal element.\r\n               *  ElementType.TEXT - Text data element.\r\n               *  ElementType.FRAGMENT - XHTML fragment element.\r\n               */\r\n              ElementType: {\r\n                NORMAL: 1,\r\n                TEXT: 3,\r\n                CDATA: 4,\r\n                FRAGMENT: 11\r\n              },\r\n\r\n              /** PrivateConstants: Timeout Values\r\n               *  Timeout values for error states.  These values are in seconds.\r\n               *  These should not be changed unless you know exactly what you are\r\n               *  doing.\r\n               *\r\n               *  TIMEOUT - Timeout multiplier. A waiting request will be considered\r\n               *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\r\n               *      This defaults to 1.1, and with default wait, 66 seconds.\r\n               *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\r\n               *      Strophe can detect early failure, it will consider the request\r\n               *      failed if it doesn't return after\r\n               *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\r\n               *      This defaults to 0.1, and with default wait, 6 seconds.\r\n               */\r\n              TIMEOUT: 1.1,\r\n              SECONDARY_TIMEOUT: 0.1,\r\n\r\n              /** Function: addNamespace\r\n               *  This function is used to extend the current namespaces in\r\n               *  Strophe.NS.  It takes a key and a value with the key being the\r\n               *  name of the new namespace, with its actual value.\r\n               *  For example:\r\n               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\r\n               *\r\n               *  Parameters:\r\n               *    (String) name - The name under which the namespace will be\r\n               *      referenced under Strophe.NS\r\n               *    (String) value - The actual namespace.\r\n               */\r\n              addNamespace: function addNamespace(name, value) {\r\n                Strophe.NS[name] = value;\r\n              },\r\n\r\n              /** Function: forEachChild\r\n               *  Map a function over some or all child elements of a given element.\r\n               *\r\n               *  This is a small convenience function for mapping a function over\r\n               *  some or all of the children of an element.  If elemName is null, all\r\n               *  children will be passed to the function, otherwise only children\r\n               *  whose tag names match elemName will be passed.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The element to operate on.\r\n               *    (String) elemName - The child element tag name filter.\r\n               *    (Function) func - The function to apply to each child.  This\r\n               *      function should take a single argument, a DOM element.\r\n               */\r\n              forEachChild: function forEachChild(elem, elemName, func) {\r\n                for (var i = 0; i < elem.childNodes.length; i++) {\r\n                  var childNode = elem.childNodes[i];\r\n\r\n                  if (childNode.nodeType === Strophe.ElementType.NORMAL && (!elemName || this.isTagEqual(childNode, elemName))) {\r\n                    func(childNode);\r\n                  }\r\n                }\r\n              },\r\n\r\n              /** Function: isTagEqual\r\n               *  Compare an element's tag name with a string.\r\n               *\r\n               *  This function is case sensitive.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) el - A DOM element.\r\n               *    (String) name - The element name.\r\n               *\r\n               *  Returns:\r\n               *    true if the element's tag name matches _el_, and false\r\n               *    otherwise.\r\n               */\r\n              isTagEqual: function isTagEqual(el, name) {\r\n                return el.tagName === name;\r\n              },\r\n\r\n              /** PrivateVariable: _xmlGenerator\r\n               *  _Private_ variable that caches a DOM document to\r\n               *  generate elements.\r\n               */\r\n              _xmlGenerator: null,\r\n\r\n              /** PrivateFunction: _makeGenerator\r\n               *  _Private_ function that creates a dummy XML DOM document to serve as\r\n               *  an element and text node generator.\r\n               */\r\n              _makeGenerator: function _makeGenerator() {\r\n                var doc; // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\r\n                // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\r\n                // less than 10 in the case of IE9 and below.\r\n\r\n                if (document.implementation.createDocument === undefined || document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\r\n                  doc = this._getIEXmlDom();\r\n                  doc.appendChild(doc.createElement('strophe'));\r\n                } else {\r\n                  doc = document.implementation.createDocument('jabber:client', 'strophe', null);\r\n                }\r\n\r\n                return doc;\r\n              },\r\n\r\n              /** Function: xmlGenerator\r\n               *  Get the DOM document to generate elements.\r\n               *\r\n               *  Returns:\r\n               *    The currently used DOM document.\r\n               */\r\n              xmlGenerator: function xmlGenerator() {\r\n                if (!Strophe._xmlGenerator) {\r\n                  Strophe._xmlGenerator = Strophe._makeGenerator();\r\n                }\r\n\r\n                return Strophe._xmlGenerator;\r\n              },\r\n\r\n              /** PrivateFunction: _getIEXmlDom\r\n               *  Gets IE xml doc object\r\n               *\r\n               *  Returns:\r\n               *    A Microsoft XML DOM Object\r\n               *  See Also:\r\n               *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\r\n               */\r\n              _getIEXmlDom: function _getIEXmlDom() {\r\n                var doc = null;\r\n                var docStrings = [\"Msxml2.DOMDocument.6.0\", \"Msxml2.DOMDocument.5.0\", \"Msxml2.DOMDocument.4.0\", \"MSXML2.DOMDocument.3.0\", \"MSXML2.DOMDocument\", \"MSXML.DOMDocument\", \"Microsoft.XMLDOM\"];\r\n\r\n                for (var d = 0; d < docStrings.length; d++) {\r\n                  if (doc === null) {\r\n                    try {\r\n                      doc = new ActiveXObject(docStrings[d]);\r\n                    } catch (e) {\r\n                      doc = null;\r\n                    }\r\n                  } else {\r\n                    break;\r\n                  }\r\n                }\r\n\r\n                return doc;\r\n              },\r\n\r\n              /** Function: xmlElement\r\n               *  Create an XML DOM element.\r\n               *\r\n               *  This function creates an XML DOM element correctly across all\r\n               *  implementations. Note that these are not HTML DOM elements, which\r\n               *  aren't appropriate for XMPP stanzas.\r\n               *\r\n               *  Parameters:\r\n               *    (String) name - The name for the element.\r\n               *    (Array|Object) attrs - An optional array or object containing\r\n               *      key/value pairs to use as element attributes. The object should\r\n               *      be in the format {'key': 'value'} or {key: 'value'}. The array\r\n               *      should have the format [['key1', 'value1'], ['key2', 'value2']].\r\n               *    (String) text - The text child data for the element.\r\n               *\r\n               *  Returns:\r\n               *    A new XML DOM element.\r\n               */\r\n              xmlElement: function xmlElement(name) {\r\n                if (!name) {\r\n                  return null;\r\n                }\r\n\r\n                var node = Strophe.xmlGenerator().createElement(name); // FIXME: this should throw errors if args are the wrong type or\r\n                // there are more than two optional args\r\n\r\n                for (var a = 1; a < arguments.length; a++) {\r\n                  var arg = arguments[a];\r\n\r\n                  if (!arg) {\r\n                    continue;\r\n                  }\r\n\r\n                  if (typeof arg === \"string\" || typeof arg === \"number\") {\r\n                    node.appendChild(Strophe.xmlTextNode(arg));\r\n                  } else if (_typeof(arg) === \"object\" && typeof arg.sort === \"function\") {\r\n                    for (var i = 0; i < arg.length; i++) {\r\n                      var attr = arg[i];\r\n\r\n                      if (_typeof(attr) === \"object\" && typeof attr.sort === \"function\" && attr[1] !== undefined && attr[1] !== null) {\r\n                        node.setAttribute(attr[0], attr[1]);\r\n                      }\r\n                    }\r\n                  } else if (_typeof(arg) === \"object\") {\r\n                    for (var k in arg) {\r\n                      if (Object.prototype.hasOwnProperty.call(arg, k) && arg[k] !== undefined && arg[k] !== null) {\r\n                        node.setAttribute(k, arg[k]);\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n\r\n                return node;\r\n              },\r\n\r\n              /*  Function: xmlescape\r\n               *  Excapes invalid xml characters.\r\n               *\r\n               *  Parameters:\r\n               *     (String) text - text to escape.\r\n               *\r\n               *  Returns:\r\n               *      Escaped text.\r\n               */\r\n              xmlescape: function xmlescape(text) {\r\n                text = text.replace(/\\&/g, \"&amp;\");\r\n                text = text.replace(/</g, \"&lt;\");\r\n                text = text.replace(/>/g, \"&gt;\");\r\n                text = text.replace(/'/g, \"&apos;\");\r\n                text = text.replace(/\"/g, \"&quot;\");\r\n                return text;\r\n              },\r\n\r\n              /*  Function: xmlunescape\r\n              *  Unexcapes invalid xml characters.\r\n              *\r\n              *  Parameters:\r\n              *     (String) text - text to unescape.\r\n              *\r\n              *  Returns:\r\n              *      Unescaped text.\r\n              */\r\n              xmlunescape: function xmlunescape(text) {\r\n                text = text.replace(/\\&amp;/g, \"&\");\r\n                text = text.replace(/&lt;/g, \"<\");\r\n                text = text.replace(/&gt;/g, \">\");\r\n                text = text.replace(/&apos;/g, \"'\");\r\n                text = text.replace(/&quot;/g, \"\\\"\");\r\n                return text;\r\n              },\r\n\r\n              /** Function: xmlTextNode\r\n               *  Creates an XML DOM text node.\r\n               *\r\n               *  Provides a cross implementation version of document.createTextNode.\r\n               *\r\n               *  Parameters:\r\n               *    (String) text - The content of the text node.\r\n               *\r\n               *  Returns:\r\n               *    A new XML DOM text node.\r\n               */\r\n              xmlTextNode: function xmlTextNode(text) {\r\n                return Strophe.xmlGenerator().createTextNode(text);\r\n              },\r\n\r\n              /** Function: xmlHtmlNode\r\n               *  Creates an XML DOM html node.\r\n               *\r\n               *  Parameters:\r\n               *    (String) html - The content of the html node.\r\n               *\r\n               *  Returns:\r\n               *    A new XML DOM text node.\r\n               */\r\n              xmlHtmlNode: function xmlHtmlNode(html) {\r\n                var node; //ensure text is escaped\r\n\r\n                if (DOMParser) {\r\n                  var parser = new DOMParser();\r\n                  node = parser.parseFromString(html, \"text/xml\");\r\n                } else {\r\n                  node = new ActiveXObject(\"Microsoft.XMLDOM\");\r\n                  node.async = \"false\";\r\n                  node.loadXML(html);\r\n                }\r\n\r\n                return node;\r\n              },\r\n\r\n              /** Function: getText\r\n               *  Get the concatenation of all text children of an element.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - A DOM element.\r\n               *\r\n               *  Returns:\r\n               *    A String with the concatenated text of all text element children.\r\n               */\r\n              getText: function getText(elem) {\r\n                if (!elem) {\r\n                  return null;\r\n                }\r\n\r\n                var str = \"\";\r\n\r\n                if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\r\n                  str += elem.nodeValue;\r\n                }\r\n\r\n                for (var i = 0; i < elem.childNodes.length; i++) {\r\n                  if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\r\n                    str += elem.childNodes[i].nodeValue;\r\n                  }\r\n                }\r\n\r\n                return Strophe.xmlescape(str);\r\n              },\r\n\r\n              /** Function: copyElement\r\n               *  Copy an XML DOM element.\r\n               *\r\n               *  This function copies a DOM element and all its descendants and returns\r\n               *  the new copy.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - A DOM element.\r\n               *\r\n               *  Returns:\r\n               *    A new, copied DOM element tree.\r\n               */\r\n              copyElement: function copyElement(elem) {\r\n                var el;\r\n\r\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\r\n                  el = Strophe.xmlElement(elem.tagName);\r\n\r\n                  for (var i = 0; i < elem.attributes.length; i++) {\r\n                    el.setAttribute(elem.attributes[i].nodeName, elem.attributes[i].value);\r\n                  }\r\n\r\n                  for (var _i = 0; _i < elem.childNodes.length; _i++) {\r\n                    el.appendChild(Strophe.copyElement(elem.childNodes[_i]));\r\n                  }\r\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\r\n                  el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\r\n                }\r\n\r\n                return el;\r\n              },\r\n\r\n              /** Function: createHtml\r\n               *  Copy an HTML DOM element into an XML DOM.\r\n               *\r\n               *  This function copies a DOM element and all its descendants and returns\r\n               *  the new copy.\r\n               *\r\n               *  Parameters:\r\n               *    (HTMLElement) elem - A DOM element.\r\n               *\r\n               *  Returns:\r\n               *    A new, copied DOM element tree.\r\n               */\r\n              createHtml: function createHtml(elem) {\r\n                var el;\r\n\r\n                if (elem.nodeType === Strophe.ElementType.NORMAL) {\r\n                  var tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\r\n\r\n                  if (Strophe.XHTML.validTag(tag)) {\r\n                    try {\r\n                      el = Strophe.xmlElement(tag);\r\n\r\n                      for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\r\n                        var attribute = Strophe.XHTML.attributes[tag][i];\r\n                        var value = elem.getAttribute(attribute);\r\n\r\n                        if (typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\r\n                          continue;\r\n                        }\r\n\r\n                        if (attribute === 'style' && _typeof(value) === 'object' && typeof value.cssText !== 'undefined') {\r\n                          value = value.cssText; // we're dealing with IE, need to get CSS out\r\n                        } // filter out invalid css styles\r\n\r\n\r\n                        if (attribute === 'style') {\r\n                          var css = [];\r\n                          var cssAttrs = value.split(';');\r\n\r\n                          for (var j = 0; j < cssAttrs.length; j++) {\r\n                            var attr = cssAttrs[j].split(':');\r\n                            var cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\r\n\r\n                            if (Strophe.XHTML.validCSS(cssName)) {\r\n                              var cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\r\n                              css.push(cssName + ': ' + cssValue);\r\n                            }\r\n                          }\r\n\r\n                          if (css.length > 0) {\r\n                            value = css.join('; ');\r\n                            el.setAttribute(attribute, value);\r\n                          }\r\n                        } else {\r\n                          el.setAttribute(attribute, value);\r\n                        }\r\n                      }\r\n\r\n                      for (var _i2 = 0; _i2 < elem.childNodes.length; _i2++) {\r\n                        el.appendChild(Strophe.createHtml(elem.childNodes[_i2]));\r\n                      }\r\n                    } catch (e) {\r\n                      // invalid elements\r\n                      el = Strophe.xmlTextNode('');\r\n                    }\r\n                  } else {\r\n                    el = Strophe.xmlGenerator().createDocumentFragment();\r\n\r\n                    for (var _i3 = 0; _i3 < elem.childNodes.length; _i3++) {\r\n                      el.appendChild(Strophe.createHtml(elem.childNodes[_i3]));\r\n                    }\r\n                  }\r\n                } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\r\n                  el = Strophe.xmlGenerator().createDocumentFragment();\r\n\r\n                  for (var _i4 = 0; _i4 < elem.childNodes.length; _i4++) {\r\n                    el.appendChild(Strophe.createHtml(elem.childNodes[_i4]));\r\n                  }\r\n                } else if (elem.nodeType === Strophe.ElementType.TEXT) {\r\n                  el = Strophe.xmlTextNode(elem.nodeValue);\r\n                }\r\n\r\n                return el;\r\n              },\r\n\r\n              /** Function: escapeNode\r\n               *  Escape the node part (also called local part) of a JID.\r\n               *\r\n               *  Parameters:\r\n               *    (String) node - A node (or local part).\r\n               *\r\n               *  Returns:\r\n               *    An escaped node (or local part).\r\n               */\r\n              escapeNode: function escapeNode(node) {\r\n                if (typeof node !== \"string\") {\r\n                  return node;\r\n                }\r\n\r\n                return node.replace(/^\\s+|\\s+$/g, '').replace(/\\\\/g, \"\\\\5c\").replace(/ /g, \"\\\\20\").replace(/\\\"/g, \"\\\\22\").replace(/\\&/g, \"\\\\26\").replace(/\\'/g, \"\\\\27\").replace(/\\//g, \"\\\\2f\").replace(/:/g, \"\\\\3a\").replace(/</g, \"\\\\3c\").replace(/>/g, \"\\\\3e\").replace(/@/g, \"\\\\40\");\r\n              },\r\n\r\n              /** Function: unescapeNode\r\n               *  Unescape a node part (also called local part) of a JID.\r\n               *\r\n               *  Parameters:\r\n               *    (String) node - A node (or local part).\r\n               *\r\n               *  Returns:\r\n               *    An unescaped node (or local part).\r\n               */\r\n              unescapeNode: function unescapeNode(node) {\r\n                if (typeof node !== \"string\") {\r\n                  return node;\r\n                }\r\n\r\n                return node.replace(/\\\\20/g, \" \").replace(/\\\\22/g, '\"').replace(/\\\\26/g, \"&\").replace(/\\\\27/g, \"'\").replace(/\\\\2f/g, \"/\").replace(/\\\\3a/g, \":\").replace(/\\\\3c/g, \"<\").replace(/\\\\3e/g, \">\").replace(/\\\\40/g, \"@\").replace(/\\\\5c/g, \"\\\\\");\r\n              },\r\n\r\n              /** Function: getNodeFromJid\r\n               *  Get the node portion of a JID String.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - A JID.\r\n               *\r\n               *  Returns:\r\n               *    A String containing the node.\r\n               */\r\n              getNodeFromJid: function getNodeFromJid(jid) {\r\n                if (jid.indexOf(\"@\") < 0) {\r\n                  return null;\r\n                }\r\n\r\n                return jid.split(\"@\")[0];\r\n              },\r\n\r\n              /** Function: getDomainFromJid\r\n               *  Get the domain portion of a JID String.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - A JID.\r\n               *\r\n               *  Returns:\r\n               *    A String containing the domain.\r\n               */\r\n              getDomainFromJid: function getDomainFromJid(jid) {\r\n                var bare = Strophe.getBareJidFromJid(jid);\r\n\r\n                if (bare.indexOf(\"@\") < 0) {\r\n                  return bare;\r\n                } else {\r\n                  var parts = bare.split(\"@\");\r\n                  parts.splice(0, 1);\r\n                  return parts.join('@');\r\n                }\r\n              },\r\n\r\n              /** Function: getResourceFromJid\r\n               *  Get the resource portion of a JID String.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - A JID.\r\n               *\r\n               *  Returns:\r\n               *    A String containing the resource.\r\n               */\r\n              getResourceFromJid: function getResourceFromJid(jid) {\r\n                if (!jid) {\r\n                  return null;\r\n                }\r\n\r\n                var s = jid.split(\"/\");\r\n\r\n                if (s.length < 2) {\r\n                  return null;\r\n                }\r\n\r\n                s.splice(0, 1);\r\n                return s.join('/');\r\n              },\r\n\r\n              /** Function: getBareJidFromJid\r\n               *  Get the bare JID from a JID String.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - A JID.\r\n               *\r\n               *  Returns:\r\n               *    A String containing the bare JID.\r\n               */\r\n              getBareJidFromJid: function getBareJidFromJid(jid) {\r\n                return jid ? jid.split(\"/\")[0] : null;\r\n              },\r\n\r\n              /** PrivateFunction: _handleError\r\n               *  _Private_ function that properly logs an error to the console\r\n               */\r\n              _handleError: function _handleError(e) {\r\n                if (typeof e.stack !== \"undefined\") {\r\n                  Strophe.fatal(e.stack);\r\n                }\r\n\r\n                if (e.sourceURL) {\r\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" + e.line + \" - \" + e.name + \": \" + e.message);\r\n                } else if (e.fileName) {\r\n                  Strophe.fatal(\"error: \" + this.handler + \" \" + e.fileName + \":\" + e.lineNumber + \" - \" + e.name + \": \" + e.message);\r\n                } else {\r\n                  Strophe.fatal(\"error: \" + e.message);\r\n                }\r\n              },\r\n\r\n              /** Function: log\r\n               *  User overrideable logging function.\r\n               *\r\n               *  This function is called whenever the Strophe library calls any\r\n               *  of the logging functions.  The default implementation of this\r\n               *  function logs only fatal errors.  If client code wishes to handle the logging\r\n               *  messages, it should override this with\r\n               *  > Strophe.log = function (level, msg) {\r\n               *  >   (user code here)\r\n               *  > };\r\n               *\r\n               *  Please note that data sent and received over the wire is logged\r\n               *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\r\n               *\r\n               *  The different levels and their meanings are\r\n               *\r\n               *    DEBUG - Messages useful for debugging purposes.\r\n               *    INFO - Informational messages.  This is mostly information like\r\n               *      'disconnect was called' or 'SASL auth succeeded'.\r\n               *    WARN - Warnings about potential problems.  This is mostly used\r\n               *      to report transient connection errors like request timeouts.\r\n               *    ERROR - Some error occurred.\r\n               *    FATAL - A non-recoverable fatal error occurred.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) level - The log level of the log message.  This will\r\n               *      be one of the values in Strophe.LogLevel.\r\n               *    (String) msg - The log message.\r\n               */\r\n              log: function log(level, msg) {\r\n                if (level === this.LogLevel.FATAL && _typeof(window.console) === 'object' && typeof window.console.error === 'function') {\r\n                  window.console.error(msg);\r\n                }\r\n              },\r\n\r\n              /** Function: debug\r\n               *  Log a message at the Strophe.LogLevel.DEBUG level.\r\n               *\r\n               *  Parameters:\r\n               *    (String) msg - The log message.\r\n               */\r\n              debug: function debug(msg) {\r\n                this.log(this.LogLevel.DEBUG, msg);\r\n              },\r\n\r\n              /** Function: info\r\n               *  Log a message at the Strophe.LogLevel.INFO level.\r\n               *\r\n               *  Parameters:\r\n               *    (String) msg - The log message.\r\n               */\r\n              info: function info(msg) {\r\n                this.log(this.LogLevel.INFO, msg);\r\n              },\r\n\r\n              /** Function: warn\r\n               *  Log a message at the Strophe.LogLevel.WARN level.\r\n               *\r\n               *  Parameters:\r\n               *    (String) msg - The log message.\r\n               */\r\n              warn: function warn(msg) {\r\n                this.log(this.LogLevel.WARN, msg);\r\n              },\r\n\r\n              /** Function: error\r\n               *  Log a message at the Strophe.LogLevel.ERROR level.\r\n               *\r\n               *  Parameters:\r\n               *    (String) msg - The log message.\r\n               */\r\n              error: function error(msg) {\r\n                this.log(this.LogLevel.ERROR, msg);\r\n              },\r\n\r\n              /** Function: fatal\r\n               *  Log a message at the Strophe.LogLevel.FATAL level.\r\n               *\r\n               *  Parameters:\r\n               *    (String) msg - The log message.\r\n               */\r\n              fatal: function fatal(msg) {\r\n                this.log(this.LogLevel.FATAL, msg);\r\n              },\r\n\r\n              /** Function: serialize\r\n               *  Render a DOM element and all descendants to a String.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - A DOM element.\r\n               *\r\n               *  Returns:\r\n               *    The serialized element tree as a String.\r\n               */\r\n              serialize: function serialize(elem) {\r\n                if (!elem) {\r\n                  return null;\r\n                }\r\n\r\n                if (typeof elem.tree === \"function\") {\r\n                  elem = elem.tree();\r\n                }\r\n\r\n                var names = _toConsumableArray(Array(elem.attributes.length).keys()).map(function (i) {\r\n                  return elem.attributes[i].nodeName;\r\n                });\r\n\r\n                names.sort();\r\n                var result = names.reduce(function (a, n) {\r\n                  return \"\".concat(a, \" \").concat(n, \"=\\\"\").concat(Strophe.xmlescape(elem.attributes.getNamedItem(n).value), \"\\\"\");\r\n                }, \"<\".concat(elem.nodeName));\r\n\r\n                if (elem.childNodes.length > 0) {\r\n                  result += \">\";\r\n\r\n                  for (var i = 0; i < elem.childNodes.length; i++) {\r\n                    var child = elem.childNodes[i];\r\n\r\n                    switch (child.nodeType) {\r\n                      case Strophe.ElementType.NORMAL:\r\n                        // normal element, so recurse\r\n                        result += Strophe.serialize(child);\r\n                        break;\r\n\r\n                      case Strophe.ElementType.TEXT:\r\n                        // text element to escape values\r\n                        result += Strophe.xmlescape(child.nodeValue);\r\n                        break;\r\n\r\n                      case Strophe.ElementType.CDATA:\r\n                        // cdata section so don't escape values\r\n                        result += \"<![CDATA[\" + child.nodeValue + \"]]>\";\r\n                    }\r\n                  }\r\n\r\n                  result += \"</\" + elem.nodeName + \">\";\r\n                } else {\r\n                  result += \"/>\";\r\n                }\r\n\r\n                return result;\r\n              },\r\n\r\n              /** PrivateVariable: _requestId\r\n               *  _Private_ variable that keeps track of the request ids for\r\n               *  connections.\r\n               */\r\n              _requestId: 0,\r\n\r\n              /** PrivateVariable: Strophe.connectionPlugins\r\n               *  _Private_ variable Used to store plugin names that need\r\n               *  initialization on Strophe.Connection construction.\r\n               */\r\n              _connectionPlugins: {},\r\n\r\n              /** Function: addConnectionPlugin\r\n               *  Extends the Strophe.Connection object with the given plugin.\r\n               *\r\n               *  Parameters:\r\n               *    (String) name - The name of the extension.\r\n               *    (Object) ptype - The plugin's prototype.\r\n               */\r\n              addConnectionPlugin: function addConnectionPlugin(name, ptype) {\r\n                Strophe._connectionPlugins[name] = ptype;\r\n              }\r\n            };\r\n            /** Class: Strophe.Builder\r\n             *  XML DOM builder.\r\n             *\r\n             *  This object provides an interface similar to JQuery but for building\r\n             *  DOM elements easily and rapidly.  All the functions except for toString()\r\n             *  and tree() return the object, so calls can be chained.  Here's an\r\n             *  example using the $iq() builder helper.\r\n             *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\r\n             *  >     .c('query', {xmlns: 'strophe:example'})\r\n             *  >     .c('example')\r\n             *  >     .toString()\r\n             *\r\n             *  The above generates this XML fragment\r\n             *  > <iq to='you' from='me' type='get' id='1'>\r\n             *  >   <query xmlns='strophe:example'>\r\n             *  >     <example/>\r\n             *  >   </query>\r\n             *  > </iq>\r\n             *  The corresponding DOM manipulations to get a similar fragment would be\r\n             *  a lot more tedious and probably involve several helper variables.\r\n             *\r\n             *  Since adding children makes new operations operate on the child, up()\r\n             *  is provided to traverse up the tree.  To add two children, do\r\n             *  > builder.c('child1', ...).up().c('child2', ...)\r\n             *  The next operation on the Builder will be relative to the second child.\r\n             */\r\n\r\n            /** Constructor: Strophe.Builder\r\n             *  Create a Strophe.Builder object.\r\n             *\r\n             *  The attributes should be passed in object notation.  For example\r\n             *  > let b = new Builder('message', {to: 'you', from: 'me'});\r\n             *  or\r\n             *  > let b = new Builder('messsage', {'xml:lang': 'en'});\r\n             *\r\n             *  Parameters:\r\n             *    (String) name - The name of the root element.\r\n             *    (Object) attrs - The attributes for the root element in object notation.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Builder.\r\n             */\r\n\r\n            Strophe.Builder = function (name, attrs) {\r\n              // Set correct namespace for jabber:client elements\r\n              if (name === \"presence\" || name === \"message\" || name === \"iq\") {\r\n                if (attrs && !attrs.xmlns) {\r\n                  attrs.xmlns = Strophe.NS.CLIENT;\r\n                } else if (!attrs) {\r\n                  attrs = {\r\n                    xmlns: Strophe.NS.CLIENT\r\n                  };\r\n                }\r\n              } // Holds the tree being built.\r\n\r\n\r\n              this.nodeTree = Strophe.xmlElement(name, attrs); // Points to the current operation node.\r\n\r\n              this.node = this.nodeTree;\r\n            };\r\n\r\n            Strophe.Builder.prototype = {\r\n              /** Function: tree\r\n               *  Return the DOM tree.\r\n               *\r\n               *  This function returns the current DOM tree as an element object.  This\r\n               *  is suitable for passing to functions like Strophe.Connection.send().\r\n               *\r\n               *  Returns:\r\n               *    The DOM tree as a element object.\r\n               */\r\n              tree: function tree() {\r\n                return this.nodeTree;\r\n              },\r\n\r\n              /** Function: toString\r\n               *  Serialize the DOM tree to a String.\r\n               *\r\n               *  This function returns a string serialization of the current DOM\r\n               *  tree.  It is often used internally to pass data to a\r\n               *  Strophe.Request object.\r\n               *\r\n               *  Returns:\r\n               *    The serialized DOM tree in a String.\r\n               */\r\n              toString: function toString() {\r\n                return Strophe.serialize(this.nodeTree);\r\n              },\r\n\r\n              /** Function: up\r\n               *  Make the current parent element the new current element.\r\n               *\r\n               *  This function is often used after c() to traverse back up the tree.\r\n               *  For example, to add two children to the same element\r\n               *  > builder.c('child1', {}).up().c('child2', {});\r\n               *\r\n               *  Returns:\r\n               *    The Stophe.Builder object.\r\n               */\r\n              up: function up() {\r\n                this.node = this.node.parentNode;\r\n                return this;\r\n              },\r\n\r\n              /** Function: root\r\n               *  Make the root element the new current element.\r\n               *\r\n               *  When at a deeply nested element in the tree, this function can be used\r\n               *  to jump back to the root of the tree, instead of having to repeatedly\r\n               *  call up().\r\n               *\r\n               *  Returns:\r\n               *    The Stophe.Builder object.\r\n               */\r\n              root: function root() {\r\n                this.node = this.nodeTree;\r\n                return this;\r\n              },\r\n\r\n              /** Function: attrs\r\n               *  Add or modify attributes of the current element.\r\n               *\r\n               *  The attributes should be passed in object notation.  This function\r\n               *  does not move the current element pointer.\r\n               *\r\n               *  Parameters:\r\n               *    (Object) moreattrs - The attributes to add/modify in object notation.\r\n               *\r\n               *  Returns:\r\n               *    The Strophe.Builder object.\r\n               */\r\n              attrs: function attrs(moreattrs) {\r\n                for (var k in moreattrs) {\r\n                  if (Object.prototype.hasOwnProperty.call(moreattrs, k)) {\r\n                    if (moreattrs[k] === undefined) {\r\n                      this.node.removeAttribute(k);\r\n                    } else {\r\n                      this.node.setAttribute(k, moreattrs[k]);\r\n                    }\r\n                  }\r\n                }\r\n\r\n                return this;\r\n              },\r\n\r\n              /** Function: c\r\n               *  Add a child to the current element and make it the new current\r\n               *  element.\r\n               *\r\n               *  This function moves the current element pointer to the child,\r\n               *  unless text is provided.  If you need to add another child, it\r\n               *  is necessary to use up() to go back to the parent in the tree.\r\n               *\r\n               *  Parameters:\r\n               *    (String) name - The name of the child.\r\n               *    (Object) attrs - The attributes of the child in object notation.\r\n               *    (String) text - The text to add to the child.\r\n               *\r\n               *  Returns:\r\n               *    The Strophe.Builder object.\r\n               */\r\n              c: function c(name, attrs, text) {\r\n                var child = Strophe.xmlElement(name, attrs, text);\r\n                this.node.appendChild(child);\r\n\r\n                if (typeof text !== \"string\" && typeof text !== \"number\") {\r\n                  this.node = child;\r\n                }\r\n\r\n                return this;\r\n              },\r\n\r\n              /** Function: cnode\r\n               *  Add a child to the current element and make it the new current\r\n               *  element.\r\n               *\r\n               *  This function is the same as c() except that instead of using a\r\n               *  name and an attributes object to create the child it uses an\r\n               *  existing DOM element object.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - A DOM element.\r\n               *\r\n               *  Returns:\r\n               *    The Strophe.Builder object.\r\n               */\r\n              cnode: function cnode(elem) {\r\n                var impNode;\r\n                var xmlGen = Strophe.xmlGenerator();\r\n\r\n                try {\r\n                  impNode = xmlGen.importNode !== undefined;\r\n                } catch (e) {\r\n                  impNode = false;\r\n                }\r\n\r\n                var newElem = impNode ? xmlGen.importNode(elem, true) : Strophe.copyElement(elem);\r\n                this.node.appendChild(newElem);\r\n                this.node = newElem;\r\n                return this;\r\n              },\r\n\r\n              /** Function: t\r\n               *  Add a child text element.\r\n               *\r\n               *  This *does not* make the child the new current element since there\r\n               *  are no children of text elements.\r\n               *\r\n               *  Parameters:\r\n               *    (String) text - The text data to append to the current element.\r\n               *\r\n               *  Returns:\r\n               *    The Strophe.Builder object.\r\n               */\r\n              t: function t(text) {\r\n                var child = Strophe.xmlTextNode(text);\r\n                this.node.appendChild(child);\r\n                return this;\r\n              },\r\n\r\n              /** Function: h\r\n               *  Replace current element contents with the HTML passed in.\r\n               *\r\n               *  This *does not* make the child the new current element\r\n               *\r\n               *  Parameters:\r\n               *    (String) html - The html to insert as contents of current element.\r\n               *\r\n               *  Returns:\r\n               *    The Strophe.Builder object.\r\n               */\r\n              h: function h(html) {\r\n                var fragment = document.createElement('body'); // force the browser to try and fix any invalid HTML tags\r\n\r\n                fragment.innerHTML = html; // copy cleaned html into an xml dom\r\n\r\n                var xhtml = Strophe.createHtml(fragment);\r\n\r\n                while (xhtml.childNodes.length > 0) {\r\n                  this.node.appendChild(xhtml.childNodes[0]);\r\n                }\r\n\r\n                return this;\r\n              }\r\n            };\r\n            /** PrivateClass: Strophe.Handler\r\n             *  _Private_ helper class for managing stanza handlers.\r\n             *\r\n             *  A Strophe.Handler encapsulates a user provided callback function to be\r\n             *  executed when matching stanzas are received by the connection.\r\n             *  Handlers can be either one-off or persistant depending on their\r\n             *  return value. Returning true will cause a Handler to remain active, and\r\n             *  returning false will remove the Handler.\r\n             *\r\n             *  Users will not use Strophe.Handler objects directly, but instead they\r\n             *  will use Strophe.Connection.addHandler() and\r\n             *  Strophe.Connection.deleteHandler().\r\n             */\r\n\r\n            /** PrivateConstructor: Strophe.Handler\r\n             *  Create and initialize a new Strophe.Handler.\r\n             *\r\n             *  Parameters:\r\n             *    (Function) handler - A function to be executed when the handler is run.\r\n             *    (String) ns - The namespace to match.\r\n             *    (String) name - The element name to match.\r\n             *    (String) type - The element type to match.\r\n             *    (String) id - The element id attribute to match.\r\n             *    (String) from - The element from attribute to match.\r\n             *    (Object) options - Handler options\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Handler object.\r\n             */\r\n\r\n            Strophe.Handler = function (handler, ns, name, type, id, from, options) {\r\n              this.handler = handler;\r\n              this.ns = ns;\r\n              this.name = name;\r\n              this.type = type;\r\n              this.id = id;\r\n              this.options = options || {\r\n                'matchBareFromJid': false,\r\n                'ignoreNamespaceFragment': false\r\n              }; // BBB: Maintain backward compatibility with old `matchBare` option\r\n\r\n              if (this.options.matchBare) {\r\n                Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\r\n                this.options.matchBareFromJid = this.options.matchBare;\r\n                delete this.options.matchBare;\r\n              }\r\n\r\n              if (this.options.matchBareFromJid) {\r\n                this.from = from ? Strophe.getBareJidFromJid(from) : null;\r\n              } else {\r\n                this.from = from;\r\n              } // whether the handler is a user handler or a system handler\r\n\r\n\r\n              this.user = true;\r\n            };\r\n\r\n            Strophe.Handler.prototype = {\r\n              /** PrivateFunction: getNamespace\r\n               *  Returns the XML namespace attribute on an element.\r\n               *  If `ignoreNamespaceFragment` was passed in for this handler, then the\r\n               *  URL fragment will be stripped.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The XML element with the namespace.\r\n               *\r\n               *  Returns:\r\n               *    The namespace, with optionally the fragment stripped.\r\n               */\r\n              getNamespace: function getNamespace(elem) {\r\n                var elNamespace = elem.getAttribute(\"xmlns\");\r\n\r\n                if (elNamespace && this.options.ignoreNamespaceFragment) {\r\n                  elNamespace = elNamespace.split('#')[0];\r\n                }\r\n\r\n                return elNamespace;\r\n              },\r\n\r\n              /** PrivateFunction: namespaceMatch\r\n               *  Tests if a stanza matches the namespace set for this Strophe.Handler.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The XML element to test.\r\n               *\r\n               *  Returns:\r\n               *    true if the stanza matches and false otherwise.\r\n               */\r\n              namespaceMatch: function namespaceMatch(elem) {\r\n                var _this = this;\r\n\r\n                var nsMatch = false;\r\n\r\n                if (!this.ns) {\r\n                  return true;\r\n                } else {\r\n                  Strophe.forEachChild(elem, null, function (elem) {\r\n                    if (_this.getNamespace(elem) === _this.ns) {\r\n                      nsMatch = true;\r\n                    }\r\n                  });\r\n                  return nsMatch || this.getNamespace(elem) === this.ns;\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: isMatch\r\n               *  Tests if a stanza matches the Strophe.Handler.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The XML element to test.\r\n               *\r\n               *  Returns:\r\n               *    true if the stanza matches and false otherwise.\r\n               */\r\n              isMatch: function isMatch(elem) {\r\n                var from = elem.getAttribute('from');\r\n\r\n                if (this.options.matchBareFromJid) {\r\n                  from = Strophe.getBareJidFromJid(from);\r\n                }\r\n\r\n                var elem_type = elem.getAttribute(\"type\");\r\n\r\n                if (this.namespaceMatch(elem) && (!this.name || Strophe.isTagEqual(elem, this.name)) && (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) && (!this.id || elem.getAttribute(\"id\") === this.id) && (!this.from || from === this.from)) {\r\n                  return true;\r\n                }\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: run\r\n               *  Run the callback on a matching stanza.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The DOM element that triggered the\r\n               *      Strophe.Handler.\r\n               *\r\n               *  Returns:\r\n               *    A boolean indicating if the handler should remain active.\r\n               */\r\n              run: function run(elem) {\r\n                var result = null;\r\n\r\n                try {\r\n                  result = this.handler(elem);\r\n                } catch (e) {\r\n                  Strophe._handleError(e);\r\n\r\n                  throw e;\r\n                }\r\n\r\n                return result;\r\n              },\r\n\r\n              /** PrivateFunction: toString\r\n               *  Get a String representation of the Strophe.Handler object.\r\n               *\r\n               *  Returns:\r\n               *    A String.\r\n               */\r\n              toString: function toString() {\r\n                return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" + this.id + \",\" + this.ns + \")}\";\r\n              }\r\n            };\r\n            /** PrivateClass: Strophe.TimedHandler\r\n             *  _Private_ helper class for managing timed handlers.\r\n             *\r\n             *  A Strophe.TimedHandler encapsulates a user provided callback that\r\n             *  should be called after a certain period of time or at regular\r\n             *  intervals.  The return value of the callback determines whether the\r\n             *  Strophe.TimedHandler will continue to fire.\r\n             *\r\n             *  Users will not use Strophe.TimedHandler objects directly, but instead\r\n             *  they will use Strophe.Connection.addTimedHandler() and\r\n             *  Strophe.Connection.deleteTimedHandler().\r\n             */\r\n\r\n            /** PrivateConstructor: Strophe.TimedHandler\r\n             *  Create and initialize a new Strophe.TimedHandler object.\r\n             *\r\n             *  Parameters:\r\n             *    (Integer) period - The number of milliseconds to wait before the\r\n             *      handler is called.\r\n             *    (Function) handler - The callback to run when the handler fires.  This\r\n             *      function should take no arguments.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.TimedHandler object.\r\n             */\r\n\r\n            Strophe.TimedHandler = function (period, handler) {\r\n              this.period = period;\r\n              this.handler = handler;\r\n              this.lastCalled = new Date().getTime();\r\n              this.user = true;\r\n            };\r\n\r\n            Strophe.TimedHandler.prototype = {\r\n              /** PrivateFunction: run\r\n               *  Run the callback for the Strophe.TimedHandler.\r\n               *\r\n               *  Returns:\r\n               *    true if the Strophe.TimedHandler should be called again, and false\r\n               *      otherwise.\r\n               */\r\n              run: function run() {\r\n                this.lastCalled = new Date().getTime();\r\n                return this.handler();\r\n              },\r\n\r\n              /** PrivateFunction: reset\r\n               *  Reset the last called time for the Strophe.TimedHandler.\r\n               */\r\n              reset: function reset() {\r\n                this.lastCalled = new Date().getTime();\r\n              },\r\n\r\n              /** PrivateFunction: toString\r\n               *  Get a string representation of the Strophe.TimedHandler object.\r\n               *\r\n               *  Returns:\r\n               *    The string representation.\r\n               */\r\n              toString: function toString() {\r\n                return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\r\n              }\r\n            };\r\n            /** Class: Strophe.Connection\r\n             *  XMPP Connection manager.\r\n             *\r\n             *  This class is the main part of Strophe.  It manages a BOSH or websocket\r\n             *  connection to an XMPP server and dispatches events to the user callbacks\r\n             *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\r\n             *  and legacy authentication.\r\n             *\r\n             *  After creating a Strophe.Connection object, the user will typically\r\n             *  call connect() with a user supplied callback to handle connection level\r\n             *  events like authentication failure, disconnection, or connection\r\n             *  complete.\r\n             *\r\n             *  The user will also have several event handlers defined by using\r\n             *  addHandler() and addTimedHandler().  These will allow the user code to\r\n             *  respond to interesting stanzas or do something periodically with the\r\n             *  connection. These handlers will be active once authentication is\r\n             *  finished.\r\n             *\r\n             *  To send data to the connection, use send().\r\n             */\r\n\r\n            /** Constructor: Strophe.Connection\r\n             *  Create and initialize a Strophe.Connection object.\r\n             *\r\n             *  The transport-protocol for this connection will be chosen automatically\r\n             *  based on the given service parameter. URLs starting with \"ws://\" or\r\n             *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\r\n             *  or without a protocol will use BOSH.\r\n             *\r\n             *  To make Strophe connect to the current host you can leave out the protocol\r\n             *  and host part and just pass the path, e.g.\r\n             *\r\n             *  > let conn = new Strophe.Connection(\"/http-bind/\");\r\n             *\r\n             *  Options common to both Websocket and BOSH:\r\n             *  ------------------------------------------\r\n             *\r\n             *  cookies:\r\n             *\r\n             *  The *cookies* option allows you to pass in cookies to be added to the\r\n             *  document. These cookies will then be included in the BOSH XMLHttpRequest\r\n             *  or in the websocket connection.\r\n             *\r\n             *  The passed in value must be a map of cookie names and string values.\r\n             *\r\n             *  > { \"myCookie\": {\r\n             *  >     \"value\": \"1234\",\r\n             *  >     \"domain\": \".example.org\",\r\n             *  >     \"path\": \"/\",\r\n             *  >     \"expires\": expirationDate\r\n             *  >     }\r\n             *  > }\r\n             *\r\n             *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\r\n             *  Those cookies need to be set under those domains, for example they can be\r\n             *  set server-side by making a XHR call to that domain to ask it to set any\r\n             *  necessary cookies.\r\n             *\r\n             *  mechanisms:\r\n             *\r\n             *  The *mechanisms* option allows you to specify the SASL mechanisms that this\r\n             *  instance of Strophe.Connection (and therefore your XMPP client) will\r\n             *  support.\r\n             *\r\n             *  The value must be an array of objects with Strophe.SASLMechanism\r\n             *  prototypes.\r\n             *\r\n             *  If nothing is specified, then the following mechanisms (and their\r\n             *  priorities) are registered:\r\n             *\r\n             *      SCRAM-SHA1 - 70\r\n             *      DIGEST-MD5 - 60\r\n             *      PLAIN - 50\r\n             *      OAUTH-BEARER - 40\r\n             *      OAUTH-2 - 30\r\n             *      ANONYMOUS - 20\r\n             *      EXTERNAL - 10\r\n             *\r\n             *  explicitResourceBinding:\r\n             *\r\n             *  If `explicitResourceBinding` is set to a truthy value, then the XMPP client\r\n             *  needs to explicitly call `Strophe.Connection.prototype.bind` once the XMPP\r\n             *  server has advertised the \"urn:ietf:params:xml:ns:xmpp-bind\" feature.\r\n             *\r\n             *  Making this step explicit allows client authors to first finish other\r\n             *  stream related tasks, such as setting up an XEP-0198 Stream Management\r\n             *  session, before binding the JID resource for this session.\r\n             *\r\n             *  WebSocket options:\r\n             *  ------------------\r\n             *\r\n             *  If you want to connect to the current host with a WebSocket connection you\r\n             *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\r\n             *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\r\n             *  for Secure WebSocket.\r\n             *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\r\n             *\r\n             *  > let conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\r\n             *\r\n             *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\r\n             *  of the current site.\r\n             *\r\n             *  Also because downgrading security is not permitted by browsers, when using\r\n             *  relative URLs both BOSH and WebSocket connections will use their secure\r\n             *  variants if the current connection to the site is also secure (https).\r\n             *\r\n             *  BOSH options:\r\n             *  -------------\r\n             *\r\n             *  By adding \"sync\" to the options, you can control if requests will\r\n             *  be made synchronously or not. The default behaviour is asynchronous.\r\n             *  If you want to make requests synchronous, make \"sync\" evaluate to true.\r\n             *  > let conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\r\n             *\r\n             *  You can also toggle this on an already established connection.\r\n             *  > conn.options.sync = true;\r\n             *\r\n             *  The *customHeaders* option can be used to provide custom HTTP headers to be\r\n             *  included in the XMLHttpRequests made.\r\n             *\r\n             *  The *keepalive* option can be used to instruct Strophe to maintain the\r\n             *  current BOSH session across interruptions such as webpage reloads.\r\n             *\r\n             *  It will do this by caching the sessions tokens in sessionStorage, and when\r\n             *  \"restore\" is called it will check whether there are cached tokens with\r\n             *  which it can resume an existing session.\r\n             *\r\n             *  The *withCredentials* option should receive a Boolean value and is used to\r\n             *  indicate wether cookies should be included in ajax requests (by default\r\n             *  they're not).\r\n             *  Set this value to true if you are connecting to a BOSH service\r\n             *  and for some reason need to send cookies to it.\r\n             *  In order for this to work cross-domain, the server must also enable\r\n             *  credentials by setting the Access-Control-Allow-Credentials response header\r\n             *  to \"true\". For most usecases however this setting should be false (which\r\n             *  is the default).\r\n             *  Additionally, when using Access-Control-Allow-Credentials, the\r\n             *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\r\n             *  instead must be restricted to actual domains.\r\n             *\r\n             *  The *contentType* option can be set to change the default Content-Type\r\n             *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\r\n             *  CORS preflight requests that are sent to the server.\r\n             *\r\n             *  Parameters:\r\n             *    (String) service - The BOSH or WebSocket service URL.\r\n             *    (Object) options - A hash of configuration options\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Connection object.\r\n             */\r\n\r\n            Strophe.Connection = function (service, options) {\r\n              var _this2 = this;\r\n\r\n              // The service URL\r\n              this.service = service; // Configuration options\r\n\r\n              this.options = options || {};\r\n              var proto = this.options.protocol || \"\"; // Select protocal based on service or options\r\n\r\n              if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 || proto.indexOf(\"ws\") === 0) {\r\n                this._proto = new Strophe.Websocket(this);\r\n              } else {\r\n                this._proto = new Strophe.Bosh(this);\r\n              }\r\n              /* The connected JID. */\r\n\r\n\r\n              this.jid = \"\";\r\n              /* the JIDs domain */\r\n\r\n              this.domain = null;\r\n              /* stream:features */\r\n\r\n              this.features = null; // SASL\r\n\r\n              this._sasl_data = {};\r\n              this.do_session = false;\r\n              this.do_bind = false; // handler lists\r\n\r\n              this.timedHandlers = [];\r\n              this.handlers = [];\r\n              this.removeTimeds = [];\r\n              this.removeHandlers = [];\r\n              this.addTimeds = [];\r\n              this.addHandlers = [];\r\n              this.protocolErrorHandlers = {\r\n                'HTTP': {},\r\n                'websocket': {}\r\n              };\r\n              this._idleTimeout = null;\r\n              this._disconnectTimeout = null;\r\n              this.authenticated = false;\r\n              this.connected = false;\r\n              this.disconnecting = false;\r\n              this.do_authentication = true;\r\n              this.paused = false;\r\n              this.restored = false;\r\n              this._data = [];\r\n              this._uniqueId = 0;\r\n              this._sasl_success_handler = null;\r\n              this._sasl_failure_handler = null;\r\n              this._sasl_challenge_handler = null; // Max retries before disconnecting\r\n\r\n              this.maxRetries = 5; // Call onIdle callback every 1/10th of a second\r\n\r\n              this._idleTimeout = setTimeout(function () {\r\n                return _this2._onIdle();\r\n              }, 100);\r\n              utils.addCookies(this.options.cookies);\r\n              this.registerSASLMechanisms(this.options.mechanisms); // initialize plugins\r\n\r\n              for (var k in Strophe._connectionPlugins) {\r\n                if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\r\n                  var F = function F() {};\r\n\r\n                  F.prototype = Strophe._connectionPlugins[k];\r\n                  this[k] = new F();\r\n                  this[k].init(this);\r\n                }\r\n              }\r\n            };\r\n\r\n            Strophe.Connection.prototype = {\r\n              /** Function: reset\r\n               *  Reset the connection.\r\n               *\r\n               *  This function should be called after a connection is disconnected\r\n               *  before that connection is reused.\r\n               */\r\n              reset: function reset() {\r\n                this._proto._reset(); // SASL\r\n\r\n\r\n                this.do_session = false;\r\n                this.do_bind = false; // handler lists\r\n\r\n                this.timedHandlers = [];\r\n                this.handlers = [];\r\n                this.removeTimeds = [];\r\n                this.removeHandlers = [];\r\n                this.addTimeds = [];\r\n                this.addHandlers = [];\r\n                this.authenticated = false;\r\n                this.connected = false;\r\n                this.disconnecting = false;\r\n                this.restored = false;\r\n                this._data = [];\r\n                this._requests = [];\r\n                this._uniqueId = 0;\r\n              },\r\n\r\n              /** Function: pause\r\n               *  Pause the request manager.\r\n               *\r\n               *  This will prevent Strophe from sending any more requests to the\r\n               *  server.  This is very useful for temporarily pausing\r\n               *  BOSH-Connections while a lot of send() calls are happening quickly.\r\n               *  This causes Strophe to send the data in a single request, saving\r\n               *  many request trips.\r\n               */\r\n              pause: function pause() {\r\n                this.paused = true;\r\n              },\r\n\r\n              /** Function: resume\r\n               *  Resume the request manager.\r\n               *\r\n               *  This resumes after pause() has been called.\r\n               */\r\n              resume: function resume() {\r\n                this.paused = false;\r\n              },\r\n\r\n              /** Function: getUniqueId\r\n               *  Generate a unique ID for use in <iq/> elements.\r\n               *\r\n               *  All <iq/> stanzas are required to have unique id attributes.  This\r\n               *  function makes creating these easy.  Each connection instance has\r\n               *  a counter which starts from zero, and the value of this counter\r\n               *  plus a colon followed by the suffix becomes the unique id. If no\r\n               *  suffix is supplied, the counter is used as the unique id.\r\n               *\r\n               *  Suffixes are used to make debugging easier when reading the stream\r\n               *  data, and their use is recommended.  The counter resets to 0 for\r\n               *  every new connection for the same reason.  For connections to the\r\n               *  same server that authenticate the same way, all the ids should be\r\n               *  the same, which makes it easy to see changes.  This is useful for\r\n               *  automated testing as well.\r\n               *\r\n               *  Parameters:\r\n               *    (String) suffix - A optional suffix to append to the id.\r\n               *\r\n               *  Returns:\r\n               *    A unique string to be used for the id attribute.\r\n               */\r\n              getUniqueId: function getUniqueId(suffix) {\r\n                var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n                  var r = Math.random() * 16 | 0,\r\n                      v = c === 'x' ? r : r & 0x3 | 0x8;\r\n                  return v.toString(16);\r\n                });\r\n\r\n                if (typeof suffix === \"string\" || typeof suffix === \"number\") {\r\n                  return uuid + \":\" + suffix;\r\n                } else {\r\n                  return uuid + \"\";\r\n                }\r\n              },\r\n\r\n              /** Function: addProtocolErrorHandler\r\n               *  Register a handler function for when a protocol (websocker or HTTP)\r\n               *  error occurs.\r\n               *\r\n               *  NOTE: Currently only HTTP errors for BOSH requests are handled.\r\n               *  Patches that handle websocket errors would be very welcome.\r\n               *\r\n               *  Parameters:\r\n               *    (String) protocol - 'HTTP' or 'websocket'\r\n               *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\r\n               *    (Function) callback - Function that will fire on Http error\r\n               *\r\n               *  Example:\r\n               *  function onError(err_code){\r\n               *    //do stuff\r\n               *  }\r\n               *\r\n               *  let conn = Strophe.connect('http://example.com/http-bind');\r\n               *  conn.addProtocolErrorHandler('HTTP', 500, onError);\r\n               *  // Triggers HTTP 500 error and onError handler will be called\r\n               *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\r\n               */\r\n              addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\r\n                this.protocolErrorHandlers[protocol][status_code] = callback;\r\n              },\r\n\r\n              /** Function: connect\r\n               *  Starts the connection process.\r\n               *\r\n               *  As the connection process proceeds, the user supplied callback will\r\n               *  be triggered multiple times with status updates.  The callback\r\n               *  should take two arguments - the status code and the error condition.\r\n               *\r\n               *  The status code will be one of the values in the Strophe.Status\r\n               *  constants.  The error condition will be one of the conditions\r\n               *  defined in RFC 3920 or the condition 'strophe-parsererror'.\r\n               *\r\n               *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\r\n               *  for BOSH connections. Please see XEP 124 for a more detailed explanation\r\n               *  of the optional parameters.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - The user's JID.  This may be a bare JID,\r\n               *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\r\n               *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\r\n               *      process the provided password value as an access token).\r\n               *    (String) pass - The user's password.\r\n               *    (Function) callback - The connect callback function.\r\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n               *      time the server will wait before returning an empty result for\r\n               *      a request.  The default setting of 60 seconds is recommended.\r\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n               *      number of connections the server will hold at one time.  This\r\n               *      should almost always be set to 1 (the default).\r\n               *    (String) route - The optional route value.\r\n               *    (String) authcid - The optional alternative authentication identity\r\n               *      (username) if intending to impersonate another user.\r\n               *      When using the SASL-EXTERNAL authentication mechanism, for example\r\n               *      with client certificates, then the authcid value is used to\r\n               *      determine whether an authorization JID (authzid) should be sent to\r\n               *      the server. The authzid should not be sent to the server if the\r\n               *      authzid and authcid are the same. So to prevent it from being sent\r\n               *      (for example when the JID is already contained in the client\r\n               *      certificate), set authcid to that same JID. See XEP-178 for more\r\n               *      details.\r\n               */\r\n              connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\r\n                this.jid = jid;\r\n                /** Variable: authzid\r\n                 *  Authorization identity.\r\n                 */\r\n\r\n                this.authzid = Strophe.getBareJidFromJid(this.jid);\r\n                /** Variable: authcid\r\n                 *  Authentication identity (User name).\r\n                 */\r\n\r\n                this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\r\n                /** Variable: pass\r\n                 *  Authentication identity (User password).\r\n                 */\r\n\r\n                this.pass = pass;\r\n                /** Variable: servtype\r\n                 *  Digest MD5 compatibility.\r\n                 */\r\n\r\n                this.servtype = \"xmpp\";\r\n                this.connect_callback = callback;\r\n                this.disconnecting = false;\r\n                this.connected = false;\r\n                this.authenticated = false;\r\n                this.restored = false; // parse jid for domain\r\n\r\n                this.domain = Strophe.getDomainFromJid(this.jid);\r\n\r\n                this._changeConnectStatus(Strophe.Status.CONNECTING, null);\r\n\r\n                this._proto._connect(wait, hold, route);\r\n              },\r\n\r\n              /** Function: attach\r\n               *  Attach to an already created and authenticated BOSH session.\r\n               *\r\n               *  This function is provided to allow Strophe to attach to BOSH\r\n               *  sessions which have been created externally, perhaps by a Web\r\n               *  application.  This is often used to support auto-login type features\r\n               *  without putting user credentials into the page.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - The full JID that is bound by the session.\r\n               *    (String) sid - The SID of the BOSH session.\r\n               *    (String) rid - The current RID of the BOSH session.  This RID\r\n               *      will be used by the next request.\r\n               *    (Function) callback The connect callback function.\r\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n               *      time the server will wait before returning an empty result for\r\n               *      a request.  The default setting of 60 seconds is recommended.\r\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\r\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n               *      number of connections the server will hold at one time.  This\r\n               *      should almost always be set to 1 (the default).\r\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n               *      allowed range of request ids that are valid.  The default is 5.\r\n               */\r\n              attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\r\n                if (this._proto instanceof Strophe.Bosh) {\r\n                  this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\r\n                } else {\r\n                  var error = new Error('The \"attach\" method can only be used with a BOSH connection.');\r\n                  error.name = 'StropheSessionError';\r\n                  throw error;\r\n                }\r\n              },\r\n\r\n              /** Function: restore\r\n               *  Attempt to restore a cached BOSH session.\r\n               *\r\n               *  This function is only useful in conjunction with providing the\r\n               *  \"keepalive\":true option when instantiating a new Strophe.Connection.\r\n               *\r\n               *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\r\n               *  RID (Request ID) and SID (Session ID) and then when this function is\r\n               *  called, it will attempt to restore the session from those cached\r\n               *  tokens.\r\n               *\r\n               *  This function must therefore be called instead of connect or attach.\r\n               *\r\n               *  For an example on how to use it, please see examples/restore.js\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\r\n               *    (Function) callback - The connect callback function.\r\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n               *      time the server will wait before returning an empty result for\r\n               *      a request.  The default setting of 60 seconds is recommended.\r\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n               *      number of connections the server will hold at one time.  This\r\n               *      should almost always be set to 1 (the default).\r\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n               *      allowed range of request ids that are valid.  The default is 5.\r\n               */\r\n              restore: function restore(jid, callback, wait, hold, wind) {\r\n                if (this._sessionCachingSupported()) {\r\n                  this._proto._restore(jid, callback, wait, hold, wind);\r\n                } else {\r\n                  var error = new Error('The \"restore\" method can only be used with a BOSH connection.');\r\n                  error.name = 'StropheSessionError';\r\n                  throw error;\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _sessionCachingSupported\r\n               * Checks whether sessionStorage and JSON are supported and whether we're\r\n               * using BOSH.\r\n               */\r\n              _sessionCachingSupported: function _sessionCachingSupported() {\r\n                if (this._proto instanceof Strophe.Bosh) {\r\n                  if (!JSON) {\r\n                    return false;\r\n                  }\r\n\r\n                  try {\r\n                    sessionStorage.setItem('_strophe_', '_strophe_');\r\n                    sessionStorage.removeItem('_strophe_');\r\n                  } catch (e) {\r\n                    return false;\r\n                  }\r\n\r\n                  return true;\r\n                }\r\n\r\n                return false;\r\n              },\r\n\r\n              /** Function: xmlInput\r\n               *  User overrideable function that receives XML data coming into the\r\n               *  connection.\r\n               *\r\n               *  The default function does nothing.  User code can override this with\r\n               *  > Strophe.Connection.xmlInput = function (elem) {\r\n               *  >   (user code)\r\n               *  > };\r\n               *\r\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\r\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\r\n               *\r\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\r\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The XML data received by the connection.\r\n               */\r\n              xmlInput: function xmlInput(elem) {\r\n                return;\r\n              },\r\n\r\n              /** Function: xmlOutput\r\n               *  User overrideable function that receives XML data sent to the\r\n               *  connection.\r\n               *\r\n               *  The default function does nothing.  User code can override this with\r\n               *  > Strophe.Connection.xmlOutput = function (elem) {\r\n               *  >   (user code)\r\n               *  > };\r\n               *\r\n               *  Due to limitations of current Browsers' XML-Parsers the opening and closing\r\n               *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\r\n               *\r\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\r\n               *  <Strophe.Bosh.strip> if you want to strip this tag.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The XMLdata sent by the connection.\r\n               */\r\n              xmlOutput: function xmlOutput(elem) {\r\n                return;\r\n              },\r\n\r\n              /** Function: rawInput\r\n               *  User overrideable function that receives raw data coming into the\r\n               *  connection.\r\n               *\r\n               *  The default function does nothing.  User code can override this with\r\n               *  > Strophe.Connection.rawInput = function (data) {\r\n               *  >   (user code)\r\n               *  > };\r\n               *\r\n               *  Parameters:\r\n               *    (String) data - The data received by the connection.\r\n               */\r\n              rawInput: function rawInput(data) {\r\n                return;\r\n              },\r\n\r\n              /** Function: rawOutput\r\n               *  User overrideable function that receives raw data sent to the\r\n               *  connection.\r\n               *\r\n               *  The default function does nothing.  User code can override this with\r\n               *  > Strophe.Connection.rawOutput = function (data) {\r\n               *  >   (user code)\r\n               *  > };\r\n               *\r\n               *  Parameters:\r\n               *    (String) data - The data sent by the connection.\r\n               */\r\n              rawOutput: function rawOutput(data) {\r\n                return;\r\n              },\r\n\r\n              /** Function: nextValidRid\r\n               *  User overrideable function that receives the new valid rid.\r\n               *\r\n               *  The default function does nothing. User code can override this with\r\n               *  > Strophe.Connection.nextValidRid = function (rid) {\r\n               *  >    (user code)\r\n               *  > };\r\n               *\r\n               *  Parameters:\r\n               *    (Number) rid - The next valid rid\r\n               */\r\n              nextValidRid: function nextValidRid(rid) {\r\n                return;\r\n              },\r\n\r\n              /** Function: send\r\n               *  Send a stanza.\r\n               *\r\n               *  This function is called to push data onto the send queue to\r\n               *  go out over the wire.  Whenever a request is sent to the BOSH\r\n               *  server, all pending data is sent and the queue is flushed.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement |\r\n               *     [XMLElement] |\r\n               *     Strophe.Builder) elem - The stanza to send.\r\n               */\r\n              send: function send(elem) {\r\n                if (elem === null) {\r\n                  return;\r\n                }\r\n\r\n                if (typeof elem.sort === \"function\") {\r\n                  for (var i = 0; i < elem.length; i++) {\r\n                    this._queueData(elem[i]);\r\n                  }\r\n                } else if (typeof elem.tree === \"function\") {\r\n                  this._queueData(elem.tree());\r\n                } else {\r\n                  this._queueData(elem);\r\n                }\r\n\r\n                this._proto._send();\r\n              },\r\n\r\n              /** Function: flush\r\n               *  Immediately send any pending outgoing data.\r\n               *\r\n               *  Normally send() queues outgoing data until the next idle period\r\n               *  (100ms), which optimizes network use in the common cases when\r\n               *  several send()s are called in succession. flush() can be used to\r\n               *  immediately send all pending data.\r\n               */\r\n              flush: function flush() {\r\n                // cancel the pending idle period and run the idle function\r\n                // immediately\r\n                clearTimeout(this._idleTimeout);\r\n\r\n                this._onIdle();\r\n              },\r\n\r\n              /** Function: sendPresence\r\n               *  Helper function to send presence stanzas. The main benefit is for\r\n               *  sending presence stanzas for which you expect a responding presence\r\n               *  stanza with the same id (for example when leaving a chat room).\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The stanza to send.\r\n               *    (Function) callback - The callback function for a successful request.\r\n               *    (Function) errback - The callback function for a failed or timed\r\n               *      out request.  On timeout, the stanza will be null.\r\n               *    (Integer) timeout - The time specified in milliseconds for a\r\n               *      timeout to occur.\r\n               *\r\n               *  Returns:\r\n               *    The id used to send the presence.\r\n               */\r\n              sendPresence: function sendPresence(elem, callback, errback, timeout) {\r\n                var _this3 = this;\r\n\r\n                var timeoutHandler = null;\r\n\r\n                if (typeof elem.tree === \"function\") {\r\n                  elem = elem.tree();\r\n                }\r\n\r\n                var id = elem.getAttribute('id');\r\n\r\n                if (!id) {\r\n                  // inject id if not found\r\n                  id = this.getUniqueId(\"sendPresence\");\r\n                  elem.setAttribute(\"id\", id);\r\n                }\r\n\r\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\r\n                  var handler = this.addHandler(function (stanza) {\r\n                    // remove timeout handler if there is one\r\n                    if (timeoutHandler) {\r\n                      _this3.deleteTimedHandler(timeoutHandler);\r\n                    }\r\n\r\n                    if (stanza.getAttribute('type') === 'error') {\r\n                      if (errback) {\r\n                        errback(stanza);\r\n                      }\r\n                    } else if (callback) {\r\n                      callback(stanza);\r\n                    }\r\n                  }, null, 'presence', null, id); // if timeout specified, set up a timeout handler.\r\n\r\n                  if (timeout) {\r\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\r\n                      // get rid of normal handler\r\n                      _this3.deleteHandler(handler); // call errback on timeout with null stanza\r\n\r\n\r\n                      if (errback) {\r\n                        errback(null);\r\n                      }\r\n\r\n                      return false;\r\n                    });\r\n                  }\r\n                }\r\n\r\n                this.send(elem);\r\n                return id;\r\n              },\r\n\r\n              /** Function: sendIQ\r\n               *  Helper function to send IQ stanzas.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The stanza to send.\r\n               *    (Function) callback - The callback function for a successful request.\r\n               *    (Function) errback - The callback function for a failed or timed\r\n               *      out request.  On timeout, the stanza will be null.\r\n               *    (Integer) timeout - The time specified in milliseconds for a\r\n               *      timeout to occur.\r\n               *\r\n               *  Returns:\r\n               *    The id used to send the IQ.\r\n              */\r\n              sendIQ: function sendIQ(elem, callback, errback, timeout) {\r\n                var _this4 = this;\r\n\r\n                var timeoutHandler = null;\r\n\r\n                if (typeof elem.tree === \"function\") {\r\n                  elem = elem.tree();\r\n                }\r\n\r\n                var id = elem.getAttribute('id');\r\n\r\n                if (!id) {\r\n                  // inject id if not found\r\n                  id = this.getUniqueId(\"sendIQ\");\r\n                  elem.setAttribute(\"id\", id);\r\n                }\r\n\r\n                if (typeof callback === \"function\" || typeof errback === \"function\") {\r\n                  var handler = this.addHandler(function (stanza) {\r\n                    // remove timeout handler if there is one\r\n                    if (timeoutHandler) {\r\n                      _this4.deleteTimedHandler(timeoutHandler);\r\n                    }\r\n\r\n                    var iqtype = stanza.getAttribute('type');\r\n\r\n                    if (iqtype === 'result') {\r\n                      if (callback) {\r\n                        callback(stanza);\r\n                      }\r\n                    } else if (iqtype === 'error') {\r\n                      if (errback) {\r\n                        errback(stanza);\r\n                      }\r\n                    } else {\r\n                      var error = new Error(\"Got bad IQ type of \".concat(iqtype));\r\n                      error.name = \"StropheError\";\r\n                      throw error;\r\n                    }\r\n                  }, null, 'iq', ['error', 'result'], id); // if timeout specified, set up a timeout handler.\r\n\r\n                  if (timeout) {\r\n                    timeoutHandler = this.addTimedHandler(timeout, function () {\r\n                      // get rid of normal handler\r\n                      _this4.deleteHandler(handler); // call errback on timeout with null stanza\r\n\r\n\r\n                      if (errback) {\r\n                        errback(null);\r\n                      }\r\n\r\n                      return false;\r\n                    });\r\n                  }\r\n                }\r\n\r\n                this.send(elem);\r\n                return id;\r\n              },\r\n\r\n              /** PrivateFunction: _queueData\r\n               *  Queue outgoing data for later sending.  Also ensures that the data\r\n               *  is a DOMElement.\r\n               */\r\n              _queueData: function _queueData(element) {\r\n                if (element === null || !element.tagName || !element.childNodes) {\r\n                  var error = new Error(\"Cannot queue non-DOMElement.\");\r\n                  error.name = \"StropheError\";\r\n                  throw error;\r\n                }\r\n\r\n                this._data.push(element);\r\n              },\r\n\r\n              /** PrivateFunction: _sendRestart\r\n               *  Send an xmpp:restart stanza.\r\n               */\r\n              _sendRestart: function _sendRestart() {\r\n                var _this5 = this;\r\n\r\n                this._data.push(\"restart\");\r\n\r\n                this._proto._sendRestart();\r\n\r\n                this._idleTimeout = setTimeout(function () {\r\n                  return _this5._onIdle();\r\n                }, 100);\r\n              },\r\n\r\n              /** Function: addTimedHandler\r\n               *  Add a timed handler to the connection.\r\n               *\r\n               *  This function adds a timed handler.  The provided handler will\r\n               *  be called every period milliseconds until it returns false,\r\n               *  the connection is terminated, or the handler is removed.  Handlers\r\n               *  that wish to continue being invoked should return true.\r\n               *\r\n               *  Because of method binding it is necessary to save the result of\r\n               *  this function if you wish to remove a handler with\r\n               *  deleteTimedHandler().\r\n               *\r\n               *  Note that user handlers are not active until authentication is\r\n               *  successful.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) period - The period of the handler.\r\n               *    (Function) handler - The callback function.\r\n               *\r\n               *  Returns:\r\n               *    A reference to the handler that can be used to remove it.\r\n               */\r\n              addTimedHandler: function addTimedHandler(period, handler) {\r\n                var thand = new Strophe.TimedHandler(period, handler);\r\n                this.addTimeds.push(thand);\r\n                return thand;\r\n              },\r\n\r\n              /** Function: deleteTimedHandler\r\n               *  Delete a timed handler for a connection.\r\n               *\r\n               *  This function removes a timed handler from the connection.  The\r\n               *  handRef parameter is *not* the function passed to addTimedHandler(),\r\n               *  but is the reference returned from addTimedHandler().\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.TimedHandler) handRef - The handler reference.\r\n               */\r\n              deleteTimedHandler: function deleteTimedHandler(handRef) {\r\n                // this must be done in the Idle loop so that we don't change\r\n                // the handlers during iteration\r\n                this.removeTimeds.push(handRef);\r\n              },\r\n\r\n              /** Function: addHandler\r\n               *  Add a stanza handler for the connection.\r\n               *\r\n               *  This function adds a stanza handler to the connection.  The\r\n               *  handler callback will be called for any stanza that matches\r\n               *  the parameters.  Note that if multiple parameters are supplied,\r\n               *  they must all match for the handler to be invoked.\r\n               *\r\n               *  The handler will receive the stanza that triggered it as its argument.\r\n               *  *The handler should return true if it is to be invoked again;\r\n               *  returning false will remove the handler after it returns.*\r\n               *\r\n               *  As a convenience, the ns parameters applies to the top level element\r\n               *  and also any of its immediate children.  This is primarily to make\r\n               *  matching /iq/query elements easy.\r\n               *\r\n               *  Options\r\n               *  ~~~~~~~\r\n               *  With the options argument, you can specify boolean flags that affect how\r\n               *  matches are being done.\r\n               *\r\n               *  Currently two flags exist:\r\n               *\r\n               *  - matchBareFromJid:\r\n               *      When set to true, the from parameter and the\r\n               *      from attribute on the stanza will be matched as bare JIDs instead\r\n               *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\r\n               *      value of options. The default value for matchBareFromJid is false.\r\n               *\r\n               *  - ignoreNamespaceFragment:\r\n               *      When set to true, a fragment specified on the stanza's namespace\r\n               *      URL will be ignored when it's matched with the one configured for\r\n               *      the handler.\r\n               *\r\n               *      This means that if you register like this:\r\n               *      >   connection.addHandler(\r\n               *      >       handler,\r\n               *      >       'http://jabber.org/protocol/muc',\r\n               *      >       null, null, null, null,\r\n               *      >       {'ignoreNamespaceFragment': true}\r\n               *      >   );\r\n               *\r\n               *      Then a stanza with XML namespace of\r\n               *      'http://jabber.org/protocol/muc#user' will also be matched. If\r\n               *      'ignoreNamespaceFragment' is false, then only stanzas with\r\n               *      'http://jabber.org/protocol/muc' will be matched.\r\n               *\r\n               *  Deleting the handler\r\n               *  ~~~~~~~~~~~~~~~~~~~~\r\n               *  The return value should be saved if you wish to remove the handler\r\n               *  with deleteHandler().\r\n               *\r\n               *  Parameters:\r\n               *    (Function) handler - The user callback.\r\n               *    (String) ns - The namespace to match.\r\n               *    (String) name - The stanza name to match.\r\n               *    (String|Array) type - The stanza type (or types if an array) to match.\r\n               *    (String) id - The stanza id attribute to match.\r\n               *    (String) from - The stanza from attribute to match.\r\n               *    (String) options - The handler options\r\n               *\r\n               *  Returns:\r\n               *    A reference to the handler that can be used to remove it.\r\n               */\r\n              addHandler: function addHandler(handler, ns, name, type, id, from, options) {\r\n                var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\r\n                this.addHandlers.push(hand);\r\n                return hand;\r\n              },\r\n\r\n              /** Function: deleteHandler\r\n               *  Delete a stanza handler for a connection.\r\n               *\r\n               *  This function removes a stanza handler from the connection.  The\r\n               *  handRef parameter is *not* the function passed to addHandler(),\r\n               *  but is the reference returned from addHandler().\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Handler) handRef - The handler reference.\r\n               */\r\n              deleteHandler: function deleteHandler(handRef) {\r\n                // this must be done in the Idle loop so that we don't change\r\n                // the handlers during iteration\r\n                this.removeHandlers.push(handRef); // If a handler is being deleted while it is being added,\r\n                // prevent it from getting added\r\n\r\n                var i = this.addHandlers.indexOf(handRef);\r\n\r\n                if (i >= 0) {\r\n                  this.addHandlers.splice(i, 1);\r\n                }\r\n              },\r\n\r\n              /** Function: registerSASLMechanisms\r\n               *\r\n               * Register the SASL mechanisms which will be supported by this instance of\r\n               * Strophe.Connection (i.e. which this XMPP client will support).\r\n               *\r\n               *  Parameters:\r\n               *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\r\n               *\r\n               */\r\n              registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\r\n                this.mechanisms = {};\r\n                mechanisms = mechanisms || [Strophe.SASLAnonymous, Strophe.SASLExternal, Strophe.SASLMD5, Strophe.SASLOAuthBearer, Strophe.SASLXOAuth2, Strophe.SASLPlain, Strophe.SASLSHA1];\r\n                mechanisms.forEach(this.registerSASLMechanism.bind(this));\r\n              },\r\n\r\n              /** Function: registerSASLMechanism\r\n               *\r\n               * Register a single SASL mechanism, to be supported by this client.\r\n               *\r\n               *  Parameters:\r\n               *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\r\n               *\r\n               */\r\n              registerSASLMechanism: function registerSASLMechanism(mechanism) {\r\n                this.mechanisms[mechanism.prototype.name] = mechanism;\r\n              },\r\n\r\n              /** Function: disconnect\r\n               *  Start the graceful disconnection process.\r\n               *\r\n               *  This function starts the disconnection process.  This process starts\r\n               *  by sending unavailable presence and sending BOSH body of type\r\n               *  terminate.  A timeout handler makes sure that disconnection happens\r\n               *  even if the BOSH server does not respond.\r\n               *  If the Connection object isn't connected, at least tries to abort all pending requests\r\n               *  so the connection object won't generate successful requests (which were already opened).\r\n               *\r\n               *  The user supplied connection callback will be notified of the\r\n               *  progress as this process happens.\r\n               *\r\n               *  Parameters:\r\n               *    (String) reason - The reason the disconnect is occuring.\r\n               */\r\n              disconnect: function disconnect(reason) {\r\n                this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\r\n\r\n                Strophe.warn(\"Disconnect was called because: \" + reason);\r\n\r\n                if (this.connected) {\r\n                  var pres = false;\r\n                  this.disconnecting = true;\r\n\r\n                  if (this.authenticated) {\r\n                    pres = $pres({\r\n                      'xmlns': Strophe.NS.CLIENT,\r\n                      'type': 'unavailable'\r\n                    });\r\n                  } // setup timeout handler\r\n\r\n\r\n                  this._disconnectTimeout = this._addSysTimedHandler(3000, this._onDisconnectTimeout.bind(this));\r\n\r\n                  this._proto._disconnect(pres);\r\n                } else {\r\n                  Strophe.warn(\"Disconnect was called before Strophe connected to the server\");\r\n\r\n                  this._proto._abortAllRequests();\r\n\r\n                  this._doDisconnect();\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _changeConnectStatus\r\n               *  _Private_ helper function that makes sure plugins and the user's\r\n               *  callback are notified of connection status changes.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) status - the new connection status, one of the values\r\n               *      in Strophe.Status\r\n               *    (String) condition - the error condition or null\r\n               *    (XMLElement) elem - The triggering stanza.\r\n               */\r\n              _changeConnectStatus: function _changeConnectStatus(status, condition, elem) {\r\n                // notify all plugins listening for status changes\r\n                for (var k in Strophe._connectionPlugins) {\r\n                  if (Object.prototype.hasOwnProperty.call(Strophe._connectionPlugins, k)) {\r\n                    var plugin = this[k];\r\n\r\n                    if (plugin.statusChanged) {\r\n                      try {\r\n                        plugin.statusChanged(status, condition);\r\n                      } catch (err) {\r\n                        Strophe.error(\"\".concat(k, \" plugin caused an exception changing status: \").concat(err));\r\n                      }\r\n                    }\r\n                  }\r\n                } // notify the user's callback\r\n\r\n\r\n                if (this.connect_callback) {\r\n                  try {\r\n                    this.connect_callback(status, condition, elem);\r\n                  } catch (e) {\r\n                    Strophe._handleError(e);\r\n\r\n                    Strophe.error(\"User connection callback caused an exception: \".concat(e));\r\n                  }\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _doDisconnect\r\n               *  _Private_ function to disconnect.\r\n               *\r\n               *  This is the last piece of the disconnection logic.  This resets the\r\n               *  connection and alerts the user's connection callback.\r\n               */\r\n              _doDisconnect: function _doDisconnect(condition) {\r\n                if (typeof this._idleTimeout === \"number\") {\r\n                  clearTimeout(this._idleTimeout);\r\n                } // Cancel Disconnect Timeout\r\n\r\n\r\n                if (this._disconnectTimeout !== null) {\r\n                  this.deleteTimedHandler(this._disconnectTimeout);\r\n                  this._disconnectTimeout = null;\r\n                }\r\n\r\n                Strophe.debug(\"_doDisconnect was called\");\r\n\r\n                this._proto._doDisconnect();\r\n\r\n                this.authenticated = false;\r\n                this.disconnecting = false;\r\n                this.restored = false; // delete handlers\r\n\r\n                this.handlers = [];\r\n                this.timedHandlers = [];\r\n                this.removeTimeds = [];\r\n                this.removeHandlers = [];\r\n                this.addTimeds = [];\r\n                this.addHandlers = []; // tell the parent we disconnected\r\n\r\n                this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\r\n\r\n                this.connected = false;\r\n              },\r\n\r\n              /** PrivateFunction: _dataRecv\r\n               *  _Private_ handler to processes incoming data from the the connection.\r\n               *\r\n               *  Except for _connect_cb handling the initial connection request,\r\n               *  this function handles the incoming data for all requests.  This\r\n               *  function also fires stanza handlers that match each incoming\r\n               *  stanza.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) req - The request that has data ready.\r\n               *    (string) req - The stanza a raw string (optiona).\r\n               */\r\n              _dataRecv: function _dataRecv(req, raw) {\r\n                var _this6 = this;\r\n\r\n                Strophe.debug(\"_dataRecv called\");\r\n\r\n                var elem = this._proto._reqToData(req);\r\n\r\n                if (elem === null) {\r\n                  return;\r\n                }\r\n\r\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\r\n                  if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\r\n                    this.xmlInput(elem.childNodes[0]);\r\n                  } else {\r\n                    this.xmlInput(elem);\r\n                  }\r\n                }\r\n\r\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\r\n                  if (raw) {\r\n                    this.rawInput(raw);\r\n                  } else {\r\n                    this.rawInput(Strophe.serialize(elem));\r\n                  }\r\n                } // remove handlers scheduled for deletion\r\n\r\n\r\n                while (this.removeHandlers.length > 0) {\r\n                  var hand = this.removeHandlers.pop();\r\n                  var i = this.handlers.indexOf(hand);\r\n\r\n                  if (i >= 0) {\r\n                    this.handlers.splice(i, 1);\r\n                  }\r\n                } // add handlers scheduled for addition\r\n\r\n\r\n                while (this.addHandlers.length > 0) {\r\n                  this.handlers.push(this.addHandlers.pop());\r\n                } // handle graceful disconnect\r\n\r\n\r\n                if (this.disconnecting && this._proto._emptyQueue()) {\r\n                  this._doDisconnect();\r\n\r\n                  return;\r\n                }\r\n\r\n                var type = elem.getAttribute(\"type\");\r\n\r\n                if (type !== null && type === \"terminate\") {\r\n                  // Don't process stanzas that come in after disconnect\r\n                  if (this.disconnecting) {\r\n                    return;\r\n                  } // an error occurred\r\n\r\n\r\n                  var cond = elem.getAttribute(\"condition\");\r\n                  var conflict = elem.getElementsByTagName(\"conflict\");\r\n\r\n                  if (cond !== null) {\r\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\r\n                      cond = \"conflict\";\r\n                    }\r\n\r\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\r\n                  } else {\r\n                    this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.UNKOWN_REASON);\r\n                  }\r\n\r\n                  this._doDisconnect(cond);\r\n\r\n                  return;\r\n                } // send each incoming stanza through the handler chain\r\n\r\n\r\n                Strophe.forEachChild(elem, null, function (child) {\r\n                  // process handlers\r\n                  var newList = _this6.handlers;\r\n                  _this6.handlers = [];\r\n\r\n                  for (var _i5 = 0; _i5 < newList.length; _i5++) {\r\n                    var _hand = newList[_i5]; // encapsulate 'handler.run' not to lose the whole handler list if\r\n                    // one of the handlers throws an exception\r\n\r\n                    try {\r\n                      if (_hand.isMatch(child) && (_this6.authenticated || !_hand.user)) {\r\n                        if (_hand.run(child)) {\r\n                          _this6.handlers.push(_hand);\r\n                        }\r\n                      } else {\r\n                        _this6.handlers.push(_hand);\r\n                      }\r\n                    } catch (e) {\r\n                      // if the handler throws an exception, we consider it as false\r\n                      Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\r\n                    }\r\n                  }\r\n                });\r\n              },\r\n\r\n              /** Attribute: mechanisms\r\n               *  SASL Mechanisms available for Connection.\r\n               */\r\n              mechanisms: {},\r\n\r\n              /** PrivateFunction: _connect_cb\r\n               *  _Private_ handler for initial connection request.\r\n               *\r\n               *  This handler is used to process the initial connection request\r\n               *  response from the BOSH server. It is used to set up authentication\r\n               *  handlers and start the authentication process.\r\n               *\r\n               *  SASL authentication will be attempted if available, otherwise\r\n               *  the code will fall back to legacy authentication.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) req - The current request.\r\n               *    (Function) _callback - low level (xmpp) connect callback function.\r\n               *      Useful for plugins with their own xmpp connect callback (when they\r\n               *      want to do something special).\r\n               */\r\n              _connect_cb: function _connect_cb(req, _callback, raw) {\r\n                Strophe.debug(\"_connect_cb was called\");\r\n                this.connected = true;\r\n                var bodyWrap;\r\n\r\n                try {\r\n                  bodyWrap = this._proto._reqToData(req);\r\n                } catch (e) {\r\n                  if (e.name !== Strophe.ErrorCondition.BAD_FORMAT) {\r\n                    throw e;\r\n                  }\r\n\r\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.BAD_FORMAT);\r\n\r\n                  this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\r\n                }\r\n\r\n                if (!bodyWrap) {\r\n                  return;\r\n                }\r\n\r\n                if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\r\n                  if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\r\n                    this.xmlInput(bodyWrap.childNodes[0]);\r\n                  } else {\r\n                    this.xmlInput(bodyWrap);\r\n                  }\r\n                }\r\n\r\n                if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\r\n                  if (raw) {\r\n                    this.rawInput(raw);\r\n                  } else {\r\n                    this.rawInput(Strophe.serialize(bodyWrap));\r\n                  }\r\n                }\r\n\r\n                var conncheck = this._proto._connect_cb(bodyWrap);\r\n\r\n                if (conncheck === Strophe.Status.CONNFAIL) {\r\n                  return;\r\n                } // Check for the stream:features tag\r\n\r\n\r\n                var hasFeatures;\r\n\r\n                if (bodyWrap.getElementsByTagNameNS) {\r\n                  hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\r\n                } else {\r\n                  hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 || bodyWrap.getElementsByTagName(\"features\").length > 0;\r\n                }\r\n\r\n                if (!hasFeatures) {\r\n                  this._proto._no_auth_received(_callback);\r\n\r\n                  return;\r\n                }\r\n\r\n                var matched = [];\r\n                var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\r\n\r\n                if (mechanisms.length > 0) {\r\n                  for (var i = 0; i < mechanisms.length; i++) {\r\n                    var mech = Strophe.getText(mechanisms[i]);\r\n                    if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\r\n                  }\r\n                }\r\n\r\n                if (matched.length === 0) {\r\n                  if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\r\n                    // There are no matching SASL mechanisms and also no legacy\r\n                    // auth available.\r\n                    this._proto._no_auth_received(_callback);\r\n\r\n                    return;\r\n                  }\r\n                }\r\n\r\n                if (this.do_authentication !== false) {\r\n                  this.authenticate(matched);\r\n                }\r\n              },\r\n\r\n              /** Function: sortMechanismsByPriority\r\n               *\r\n               *  Sorts an array of objects with prototype SASLMechanism according to\r\n               *  their priorities.\r\n               *\r\n               *  Parameters:\r\n               *    (Array) mechanisms - Array of SASL mechanisms.\r\n               *\r\n               */\r\n              sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\r\n                // Sorting mechanisms according to priority.\r\n                for (var i = 0; i < mechanisms.length - 1; ++i) {\r\n                  var higher = i;\r\n\r\n                  for (var j = i + 1; j < mechanisms.length; ++j) {\r\n                    if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\r\n                      higher = j;\r\n                    }\r\n                  }\r\n\r\n                  if (higher !== i) {\r\n                    var swap = mechanisms[i];\r\n                    mechanisms[i] = mechanisms[higher];\r\n                    mechanisms[higher] = swap;\r\n                  }\r\n                }\r\n\r\n                return mechanisms;\r\n              },\r\n\r\n              /** Function: authenticate\r\n               * Set up authentication\r\n               *\r\n               *  Continues the initial connection request by setting up authentication\r\n               *  handlers and starting the authentication process.\r\n               *\r\n               *  SASL authentication will be attempted if available, otherwise\r\n               *  the code will fall back to legacy authentication.\r\n               *\r\n               *  Parameters:\r\n               *    (Array) matched - Array of SASL mechanisms supported.\r\n               *\r\n               */\r\n              authenticate: function authenticate(matched) {\r\n                if (!this._attemptSASLAuth(matched)) {\r\n                  this._attemptLegacyAuth();\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _attemptSASLAuth\r\n               *\r\n               *  Iterate through an array of SASL mechanisms and attempt authentication\r\n               *  with the highest priority (enabled) mechanism.\r\n               *\r\n               *  Parameters:\r\n               *    (Array) mechanisms - Array of SASL mechanisms.\r\n               *\r\n               *  Returns:\r\n               *    (Boolean) mechanism_found - true or false, depending on whether a\r\n               *          valid SASL mechanism was found with which authentication could be\r\n               *          started.\r\n               */\r\n              _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\r\n                mechanisms = this.sortMechanismsByPriority(mechanisms || []);\r\n                var mechanism_found = false;\r\n\r\n                for (var i = 0; i < mechanisms.length; ++i) {\r\n                  if (!mechanisms[i].prototype.test(this)) {\r\n                    continue;\r\n                  }\r\n\r\n                  this._sasl_success_handler = this._addSysHandler(this._sasl_success_cb.bind(this), null, \"success\", null, null);\r\n                  this._sasl_failure_handler = this._addSysHandler(this._sasl_failure_cb.bind(this), null, \"failure\", null, null);\r\n                  this._sasl_challenge_handler = this._addSysHandler(this._sasl_challenge_cb.bind(this), null, \"challenge\", null, null);\r\n                  this._sasl_mechanism = new mechanisms[i]();\r\n\r\n                  this._sasl_mechanism.onStart(this);\r\n\r\n                  var request_auth_exchange = $build(\"auth\", {\r\n                    'xmlns': Strophe.NS.SASL,\r\n                    'mechanism': this._sasl_mechanism.name\r\n                  });\r\n\r\n                  if (this._sasl_mechanism.isClientFirst) {\r\n                    var response = this._sasl_mechanism.onChallenge(this, null);\r\n\r\n                    request_auth_exchange.t(btoa(response));\r\n                  }\r\n\r\n                  this.send(request_auth_exchange.tree());\r\n                  mechanism_found = true;\r\n                  break;\r\n                }\r\n\r\n                return mechanism_found;\r\n              },\r\n\r\n              /** PrivateFunction: _sasl_challenge_cb\r\n               *  _Private_ handler for the SASL challenge\r\n               *\r\n               */\r\n              _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\r\n                var challenge = atob(Strophe.getText(elem));\r\n\r\n                var response = this._sasl_mechanism.onChallenge(this, challenge);\r\n\r\n                var stanza = $build('response', {\r\n                  'xmlns': Strophe.NS.SASL\r\n                });\r\n\r\n                if (response !== \"\") {\r\n                  stanza.t(btoa(response));\r\n                }\r\n\r\n                this.send(stanza.tree());\r\n                return true;\r\n              },\r\n\r\n              /** PrivateFunction: _attemptLegacyAuth\r\n               *\r\n               *  Attempt legacy (i.e. non-SASL) authentication.\r\n               */\r\n              _attemptLegacyAuth: function _attemptLegacyAuth() {\r\n                if (Strophe.getNodeFromJid(this.jid) === null) {\r\n                  // we don't have a node, which is required for non-anonymous\r\n                  // client connections\r\n                  this._changeConnectStatus(Strophe.Status.CONNFAIL, Strophe.ErrorCondition.MISSING_JID_NODE);\r\n\r\n                  this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\r\n                } else {\r\n                  // Fall back to legacy authentication\r\n                  this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\r\n\r\n                  this._addSysHandler(this._onLegacyAuthIQResult.bind(this), null, null, null, \"_auth_1\");\r\n\r\n                  this.send($iq({\r\n                    'type': \"get\",\r\n                    'to': this.domain,\r\n                    'id': \"_auth_1\"\r\n                  }).c(\"query\", {\r\n                    xmlns: Strophe.NS.AUTH\r\n                  }).c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).tree());\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _onLegacyAuthIQResult\r\n               *  _Private_ handler for legacy authentication.\r\n               *\r\n               *  This handler is called in response to the initial <iq type='get'/>\r\n               *  for legacy authentication.  It builds an authentication <iq/> and\r\n               *  sends it, creating a handler (calling back to _auth2_cb()) to\r\n               *  handle the result\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The stanza that triggered the callback.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _onLegacyAuthIQResult: function _onLegacyAuthIQResult(elem) {\r\n                // build plaintext auth iq\r\n                var iq = $iq({\r\n                  type: \"set\",\r\n                  id: \"_auth_2\"\r\n                }).c('query', {\r\n                  xmlns: Strophe.NS.AUTH\r\n                }).c('username', {}).t(Strophe.getNodeFromJid(this.jid)).up().c('password').t(this.pass);\r\n\r\n                if (!Strophe.getResourceFromJid(this.jid)) {\r\n                  // since the user has not supplied a resource, we pick\r\n                  // a default one here.  unlike other auth methods, the server\r\n                  // cannot do this for us.\r\n                  this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\r\n                }\r\n\r\n                iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\r\n\r\n                this._addSysHandler(this._auth2_cb.bind(this), null, null, null, \"_auth_2\");\r\n\r\n                this.send(iq.tree());\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _sasl_success_cb\r\n               *  _Private_ handler for succesful SASL authentication.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The matching stanza.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _sasl_success_cb: function _sasl_success_cb(elem) {\r\n                var _this7 = this;\r\n\r\n                if (this._sasl_data[\"server-signature\"]) {\r\n                  var serverSignature;\r\n                  var success = atob(Strophe.getText(elem));\r\n                  var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\r\n                  var matches = success.match(attribMatch);\r\n\r\n                  if (matches[1] === \"v\") {\r\n                    serverSignature = matches[2];\r\n                  }\r\n\r\n                  if (serverSignature !== this._sasl_data[\"server-signature\"]) {\r\n                    // remove old handlers\r\n                    this.deleteHandler(this._sasl_failure_handler);\r\n                    this._sasl_failure_handler = null;\r\n\r\n                    if (this._sasl_challenge_handler) {\r\n                      this.deleteHandler(this._sasl_challenge_handler);\r\n                      this._sasl_challenge_handler = null;\r\n                    }\r\n\r\n                    this._sasl_data = {};\r\n                    return this._sasl_failure_cb(null);\r\n                  }\r\n                }\r\n\r\n                Strophe.info(\"SASL authentication succeeded.\");\r\n\r\n                if (this._sasl_mechanism) {\r\n                  this._sasl_mechanism.onSuccess();\r\n                } // remove old handlers\r\n\r\n\r\n                this.deleteHandler(this._sasl_failure_handler);\r\n                this._sasl_failure_handler = null;\r\n\r\n                if (this._sasl_challenge_handler) {\r\n                  this.deleteHandler(this._sasl_challenge_handler);\r\n                  this._sasl_challenge_handler = null;\r\n                }\r\n\r\n                var streamfeature_handlers = [];\r\n\r\n                var wrapper = function wrapper(handlers, elem) {\r\n                  while (handlers.length) {\r\n                    _this7.deleteHandler(handlers.pop());\r\n                  }\r\n\r\n                  _this7._onStreamFeaturesAfterSASL(elem);\r\n\r\n                  return false;\r\n                };\r\n\r\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\r\n                  return wrapper(streamfeature_handlers, elem);\r\n                }, null, \"stream:features\", null, null));\r\n                streamfeature_handlers.push(this._addSysHandler(function (elem) {\r\n                  return wrapper(streamfeature_handlers, elem);\r\n                }, Strophe.NS.STREAM, \"features\", null, null)); // we must send an xmpp:restart now\r\n\r\n                this._sendRestart();\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _onStreamFeaturesAfterSASL\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The matching stanza.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _onStreamFeaturesAfterSASL: function _onStreamFeaturesAfterSASL(elem) {\r\n                // save stream:features for future usage\r\n                this.features = elem;\r\n\r\n                for (var i = 0; i < elem.childNodes.length; i++) {\r\n                  var child = elem.childNodes[i];\r\n\r\n                  if (child.nodeName === 'bind') {\r\n                    this.do_bind = true;\r\n                  }\r\n\r\n                  if (child.nodeName === 'session') {\r\n                    this.do_session = true;\r\n                  }\r\n                }\r\n\r\n                if (!this.do_bind) {\r\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\r\n\r\n                  return false;\r\n                } else if (!this.options.explicitResourceBinding) {\r\n                  this.bind();\r\n                } else {\r\n                  this._changeConnectStatus(Strophe.Status.BINDREQUIRED, null);\r\n                }\r\n\r\n                return false;\r\n              },\r\n\r\n              /** Function: bind\r\n               *\r\n               *  Sends an IQ to the XMPP server to bind a JID resource for this session.\r\n               *\r\n               *  https://tools.ietf.org/html/rfc6120#section-7.5\r\n               *\r\n               *  If `explicitResourceBinding` was set to a truthy value in the options\r\n               *  passed to the Strophe.Connection constructor, then this function needs\r\n               *  to be called explicitly by the client author.\r\n               *\r\n               *  Otherwise it'll be called automatically as soon as the XMPP server\r\n               *  advertises the \"urn:ietf:params:xml:ns:xmpp-bind\" stream feature.\r\n               */\r\n              bind: function bind() {\r\n                if (!this.do_bind) {\r\n                  Strophe.log(Strophe.LogLevel.INFO, \"Strophe.Connection.prototype.bind called but \\\"do_bind\\\" is false\");\r\n                  return;\r\n                }\r\n\r\n                this._addSysHandler(this._onResourceBindResultIQ.bind(this), null, null, null, \"_bind_auth_2\");\r\n\r\n                var resource = Strophe.getResourceFromJid(this.jid);\r\n\r\n                if (resource) {\r\n                  this.send($iq({\r\n                    type: \"set\",\r\n                    id: \"_bind_auth_2\"\r\n                  }).c('bind', {\r\n                    xmlns: Strophe.NS.BIND\r\n                  }).c('resource', {}).t(resource).tree());\r\n                } else {\r\n                  this.send($iq({\r\n                    type: \"set\",\r\n                    id: \"_bind_auth_2\"\r\n                  }).c('bind', {\r\n                    xmlns: Strophe.NS.BIND\r\n                  }).tree());\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _onResourceBindIQ\r\n               *  _Private_ handler for binding result and session start.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The matching stanza.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _onResourceBindResultIQ: function _onResourceBindResultIQ(elem) {\r\n                if (elem.getAttribute(\"type\") === \"error\") {\r\n                  Strophe.warn(\"Resource binding failed.\");\r\n                  var conflict = elem.getElementsByTagName(\"conflict\");\r\n                  var condition;\r\n\r\n                  if (conflict.length > 0) {\r\n                    condition = Strophe.ErrorCondition.CONFLICT;\r\n                  }\r\n\r\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\r\n\r\n                  return false;\r\n                } // TODO - need to grab errors\r\n\r\n\r\n                var bind = elem.getElementsByTagName(\"bind\");\r\n\r\n                if (bind.length > 0) {\r\n                  var jidNode = bind[0].getElementsByTagName(\"jid\");\r\n\r\n                  if (jidNode.length > 0) {\r\n                    this.jid = Strophe.getText(jidNode[0]);\r\n\r\n                    if (this.do_session) {\r\n                      this._establishSession();\r\n                    } else {\r\n                      this.authenticated = true;\r\n\r\n                      this._changeConnectStatus(Strophe.Status.CONNECTED, null);\r\n                    }\r\n                  }\r\n                } else {\r\n                  Strophe.warn(\"Resource binding failed.\");\r\n\r\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\r\n\r\n                  return false;\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _establishSession\r\n               *  Send IQ request to establish a session with the XMPP server.\r\n               *\r\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\r\n               *\r\n               *  Note: The protocol for session establishment has been determined as\r\n               *  unnecessary and removed in RFC-6121.\r\n               */\r\n              _establishSession: function _establishSession() {\r\n                if (!this.do_session) {\r\n                  throw new Error(\"Strophe.Connection.prototype._establishSession \" + \"called but apparently \".concat(Strophe.NS.SESSION, \" wasn't advertised by the server\"));\r\n                }\r\n\r\n                this._addSysHandler(this._onSessionResultIQ.bind(this), null, null, null, \"_session_auth_2\");\r\n\r\n                this.send($iq({\r\n                  type: \"set\",\r\n                  id: \"_session_auth_2\"\r\n                }).c('session', {\r\n                  xmlns: Strophe.NS.SESSION\r\n                }).tree());\r\n              },\r\n\r\n              /** PrivateFunction: _onSessionResultIQ\r\n               *  _Private_ handler for the server's IQ response to a client's session\r\n               *  request.\r\n               *\r\n               *  This sets Connection.authenticated to true on success, which\r\n               *  starts the processing of user handlers.\r\n               *\r\n               *  See https://xmpp.org/rfcs/rfc3921.html#session\r\n               *\r\n               *  Note: The protocol for session establishment has been determined as\r\n               *  unnecessary and removed in RFC-6121.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The matching stanza.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _onSessionResultIQ: function _onSessionResultIQ(elem) {\r\n                if (elem.getAttribute(\"type\") === \"result\") {\r\n                  this.authenticated = true;\r\n\r\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\r\n                } else if (elem.getAttribute(\"type\") === \"error\") {\r\n                  Strophe.warn(\"Session creation failed.\");\r\n\r\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\r\n\r\n                  return false;\r\n                }\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _sasl_failure_cb\r\n               *  _Private_ handler for SASL authentication failure.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The matching stanza.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _sasl_failure_cb: function _sasl_failure_cb(elem) {\r\n                // delete unneeded handlers\r\n                if (this._sasl_success_handler) {\r\n                  this.deleteHandler(this._sasl_success_handler);\r\n                  this._sasl_success_handler = null;\r\n                }\r\n\r\n                if (this._sasl_challenge_handler) {\r\n                  this.deleteHandler(this._sasl_challenge_handler);\r\n                  this._sasl_challenge_handler = null;\r\n                }\r\n\r\n                if (this._sasl_mechanism) this._sasl_mechanism.onFailure();\r\n\r\n                this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _auth2_cb\r\n               *  _Private_ handler to finish legacy authentication.\r\n               *\r\n               *  This handler is called when the result from the jabber:iq:auth\r\n               *  <iq/> stanza is returned.\r\n               *\r\n               *  Parameters:\r\n               *    (XMLElement) elem - The stanza that triggered the callback.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _auth2_cb: function _auth2_cb(elem) {\r\n                if (elem.getAttribute(\"type\") === \"result\") {\r\n                  this.authenticated = true;\r\n\r\n                  this._changeConnectStatus(Strophe.Status.CONNECTED, null);\r\n                } else if (elem.getAttribute(\"type\") === \"error\") {\r\n                  this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\r\n\r\n                  this.disconnect('authentication failed');\r\n                }\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _addSysTimedHandler\r\n               *  _Private_ function to add a system level timed handler.\r\n               *\r\n               *  This function is used to add a Strophe.TimedHandler for the\r\n               *  library code.  System timed handlers are allowed to run before\r\n               *  authentication is complete.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) period - The period of the handler.\r\n               *    (Function) handler - The callback function.\r\n               */\r\n              _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\r\n                var thand = new Strophe.TimedHandler(period, handler);\r\n                thand.user = false;\r\n                this.addTimeds.push(thand);\r\n                return thand;\r\n              },\r\n\r\n              /** PrivateFunction: _addSysHandler\r\n               *  _Private_ function to add a system level stanza handler.\r\n               *\r\n               *  This function is used to add a Strophe.Handler for the\r\n               *  library code.  System stanza handlers are allowed to run before\r\n               *  authentication is complete.\r\n               *\r\n               *  Parameters:\r\n               *    (Function) handler - The callback function.\r\n               *    (String) ns - The namespace to match.\r\n               *    (String) name - The stanza name to match.\r\n               *    (String) type - The stanza type attribute to match.\r\n               *    (String) id - The stanza id attribute to match.\r\n               */\r\n              _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\r\n                var hand = new Strophe.Handler(handler, ns, name, type, id);\r\n                hand.user = false;\r\n                this.addHandlers.push(hand);\r\n                return hand;\r\n              },\r\n\r\n              /** PrivateFunction: _onDisconnectTimeout\r\n               *  _Private_ timeout handler for handling non-graceful disconnection.\r\n               *\r\n               *  If the graceful disconnect process does not complete within the\r\n               *  time allotted, this handler finishes the disconnect anyway.\r\n               *\r\n               *  Returns:\r\n               *    false to remove the handler.\r\n               */\r\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\r\n                Strophe.debug(\"_onDisconnectTimeout was called\");\r\n\r\n                this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\r\n\r\n                this._proto._onDisconnectTimeout(); // actually disconnect\r\n\r\n\r\n                this._doDisconnect();\r\n\r\n                return false;\r\n              },\r\n\r\n              /** PrivateFunction: _onIdle\r\n               *  _Private_ handler to process events during idle cycle.\r\n               *\r\n               *  This handler is called every 100ms to fire timed handlers that\r\n               *  are ready and keep poll requests going.\r\n               */\r\n              _onIdle: function _onIdle() {\r\n                var _this8 = this;\r\n\r\n                // add timed handlers scheduled for addition\r\n                // NOTE: we add before remove in the case a timed handler is\r\n                // added and then deleted before the next _onIdle() call.\r\n                while (this.addTimeds.length > 0) {\r\n                  this.timedHandlers.push(this.addTimeds.pop());\r\n                } // remove timed handlers that have been scheduled for deletion\r\n\r\n\r\n                while (this.removeTimeds.length > 0) {\r\n                  var thand = this.removeTimeds.pop();\r\n                  var i = this.timedHandlers.indexOf(thand);\r\n\r\n                  if (i >= 0) {\r\n                    this.timedHandlers.splice(i, 1);\r\n                  }\r\n                } // call ready timed handlers\r\n\r\n\r\n                var now = new Date().getTime();\r\n                var newList = [];\r\n\r\n                for (var _i6 = 0; _i6 < this.timedHandlers.length; _i6++) {\r\n                  var _thand = this.timedHandlers[_i6];\r\n\r\n                  if (this.authenticated || !_thand.user) {\r\n                    var since = _thand.lastCalled + _thand.period;\r\n\r\n                    if (since - now <= 0) {\r\n                      if (_thand.run()) {\r\n                        newList.push(_thand);\r\n                      }\r\n                    } else {\r\n                      newList.push(_thand);\r\n                    }\r\n                  }\r\n                }\r\n\r\n                this.timedHandlers = newList;\r\n                clearTimeout(this._idleTimeout);\r\n\r\n                this._proto._onIdle(); // reactivate the timer only if connected\r\n\r\n\r\n                if (this.connected) {\r\n                  this._idleTimeout = setTimeout(function () {\r\n                    return _this8._onIdle();\r\n                  }, 100);\r\n                }\r\n              }\r\n            };\r\n            /** Class: Strophe.SASLMechanism\r\n             *\r\n             *  encapsulates SASL authentication mechanisms.\r\n             *\r\n             *  User code may override the priority for each mechanism or disable it completely.\r\n             *  See <priority> for information about changing priority and <test> for informatian on\r\n             *  how to disable a mechanism.\r\n             *\r\n             *  By default, all mechanisms are enabled and the priorities are\r\n             *\r\n             *      OAUTHBEARER - 60\r\n             *      SCRAM-SHA1 - 50\r\n             *      DIGEST-MD5 - 40\r\n             *      PLAIN - 30\r\n             *      ANONYMOUS - 20\r\n             *      EXTERNAL - 10\r\n             *\r\n             *  See: Strophe.Connection.addSupportedSASLMechanisms\r\n             */\r\n\r\n            /**\r\n             * PrivateConstructor: Strophe.SASLMechanism\r\n             * SASL auth mechanism abstraction.\r\n             *\r\n             *  Parameters:\r\n             *    (String) name - SASL Mechanism name.\r\n             *    (Boolean) isClientFirst - If client should send response first without challenge.\r\n             *    (Number) priority - Priority.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.SASLMechanism object.\r\n             */\r\n\r\n            Strophe.SASLMechanism = function (name, isClientFirst, priority) {\r\n              /** PrivateVariable: name\r\n               *  Mechanism name.\r\n               */\r\n              this.name = name;\r\n              /** PrivateVariable: isClientFirst\r\n               *  If client sends response without initial server challenge.\r\n               */\r\n\r\n              this.isClientFirst = isClientFirst;\r\n              /** Variable: priority\r\n               *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\r\n               *  Users may override this to prioritize mechanisms differently.\r\n               *\r\n               *  In the default configuration the priorities are\r\n               *\r\n               *  SCRAM-SHA1 - 40\r\n               *  DIGEST-MD5 - 30\r\n               *  Plain - 20\r\n               *\r\n               *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\r\n               *\r\n               *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\r\n               *\r\n               *  See <SASL mechanisms> for a list of available mechanisms.\r\n               *\r\n               */\r\n\r\n              this.priority = priority;\r\n            };\r\n\r\n            Strophe.SASLMechanism.prototype = {\r\n              /**\r\n               *  Function: test\r\n               *  Checks if mechanism able to run.\r\n               *  To disable a mechanism, make this return false;\r\n               *\r\n               *  To disable plain authentication run\r\n               *  > Strophe.SASLPlain.test = function() {\r\n               *  >   return false;\r\n               *  > }\r\n               *\r\n               *  See <SASL mechanisms> for a list of available mechanisms.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Connection) connection - Target Connection.\r\n               *\r\n               *  Returns:\r\n               *    (Boolean) If mechanism was able to run.\r\n               */\r\n              test: function test(connection) {\r\n                return true;\r\n              },\r\n\r\n              /** PrivateFunction: onStart\r\n               *  Called before starting mechanism on some connection.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Connection) connection - Target Connection.\r\n               */\r\n              onStart: function onStart(connection) {\r\n                this._connection = connection;\r\n              },\r\n\r\n              /** PrivateFunction: onChallenge\r\n               *  Called by protocol implementation on incoming challenge. If client is\r\n               *  first (isClientFirst === true) challenge will be null on the first call.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Connection) connection - Target Connection.\r\n               *    (String) challenge - current challenge to handle.\r\n               *\r\n               *  Returns:\r\n               *    (String) Mechanism response.\r\n               */\r\n              onChallenge: function onChallenge(connection, challenge) {\r\n                throw new Error(\"You should implement challenge handling!\");\r\n              },\r\n\r\n              /** PrivateFunction: onFailure\r\n               *  Protocol informs mechanism implementation about SASL failure.\r\n               */\r\n              onFailure: function onFailure() {\r\n                this._connection = null;\r\n              },\r\n\r\n              /** PrivateFunction: onSuccess\r\n               *  Protocol informs mechanism implementation about SASL success.\r\n               */\r\n              onSuccess: function onSuccess() {\r\n                this._connection = null;\r\n              }\r\n            };\r\n            /** Constants: SASL mechanisms\r\n             *  Available authentication mechanisms\r\n             *\r\n             *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\r\n             *  Strophe.SASLPlain - SASL PLAIN authentication.\r\n             *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\r\n             *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\r\n             *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\r\n             *  Strophe.SASLExternal - SASL EXTERNAL authentication\r\n             *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\r\n             */\r\n            // Building SASL callbacks\r\n\r\n            /** PrivateConstructor: SASLAnonymous\r\n             *  SASL ANONYMOUS authentication.\r\n             */\r\n\r\n            Strophe.SASLAnonymous = function () {};\r\n\r\n            Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\r\n\r\n            Strophe.SASLAnonymous.prototype.test = function (connection) {\r\n              return connection.authcid === null;\r\n            };\r\n            /** PrivateConstructor: SASLPlain\r\n             *  SASL PLAIN authentication.\r\n             */\r\n\r\n\r\n            Strophe.SASLPlain = function () {};\r\n\r\n            Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\r\n\r\n            Strophe.SASLPlain.prototype.test = function (connection) {\r\n              return connection.authcid !== null;\r\n            };\r\n\r\n            Strophe.SASLPlain.prototype.onChallenge = function (connection) {\r\n              var auth_str = connection.authzid;\r\n              auth_str = auth_str + \"\\0\";\r\n              auth_str = auth_str + connection.authcid;\r\n              auth_str = auth_str + \"\\0\";\r\n              auth_str = auth_str + connection.pass;\r\n              return utils.utf16to8(auth_str);\r\n            };\r\n            /** PrivateConstructor: SASLSHA1\r\n             *  SASL SCRAM SHA 1 authentication.\r\n             */\r\n\r\n\r\n            Strophe.SASLSHA1 = function () {};\r\n\r\n            Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\r\n\r\n            Strophe.SASLSHA1.prototype.test = function (connection) {\r\n              return connection.authcid !== null;\r\n            };\r\n\r\n            Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\r\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\r\n              var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\r\n              auth_str += \",r=\";\r\n              auth_str += cnonce;\r\n              connection._sasl_data.cnonce = cnonce;\r\n              connection._sasl_data[\"client-first-message-bare\"] = auth_str;\r\n              auth_str = \"n,,\" + auth_str;\r\n\r\n              this.onChallenge = function (connection, challenge) {\r\n                var nonce, salt, iter, Hi, U, U_old, i, k;\r\n                var responseText = \"c=biws,\";\r\n                var authMessage = \"\".concat(connection._sasl_data[\"client-first-message-bare\"], \",\").concat(challenge, \",\");\r\n                var cnonce = connection._sasl_data.cnonce;\r\n                var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\r\n\r\n                while (challenge.match(attribMatch)) {\r\n                  var matches = challenge.match(attribMatch);\r\n                  challenge = challenge.replace(matches[0], \"\");\r\n\r\n                  switch (matches[1]) {\r\n                    case \"r\":\r\n                      nonce = matches[2];\r\n                      break;\r\n\r\n                    case \"s\":\r\n                      salt = matches[2];\r\n                      break;\r\n\r\n                    case \"i\":\r\n                      iter = matches[2];\r\n                      break;\r\n                  }\r\n                }\r\n\r\n                if (nonce.substr(0, cnonce.length) !== cnonce) {\r\n                  connection._sasl_data = {};\r\n                  return connection._sasl_failure_cb();\r\n                }\r\n\r\n                responseText += \"r=\" + nonce;\r\n                authMessage += responseText;\r\n                salt = atob(salt);\r\n                salt += \"\\x00\\x00\\x00\\x01\";\r\n                var pass = utils.utf16to8(connection.pass);\r\n                Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\r\n\r\n                for (i = 1; i < iter; i++) {\r\n                  U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\r\n\r\n                  for (k = 0; k < 5; k++) {\r\n                    Hi[k] ^= U[k];\r\n                  }\r\n\r\n                  U_old = U;\r\n                }\r\n\r\n                Hi = SHA1.binb2str(Hi);\r\n                var clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\r\n                var serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\r\n                var clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\r\n                connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\r\n\r\n                for (k = 0; k < 5; k++) {\r\n                  clientKey[k] ^= clientSignature[k];\r\n                }\r\n\r\n                responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\r\n                return responseText;\r\n              };\r\n\r\n              return auth_str;\r\n            };\r\n            /** PrivateConstructor: SASLMD5\r\n             *  SASL DIGEST MD5 authentication.\r\n             */\r\n\r\n\r\n            Strophe.SASLMD5 = function () {};\r\n\r\n            Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\r\n\r\n            Strophe.SASLMD5.prototype.test = function (connection) {\r\n              return connection.authcid !== null;\r\n            };\r\n            /** PrivateFunction: _quote\r\n             *  _Private_ utility function to backslash escape and quote strings.\r\n             *\r\n             *  Parameters:\r\n             *    (String) str - The string to be quoted.\r\n             *\r\n             *  Returns:\r\n             *    quoted string\r\n             */\r\n\r\n\r\n            Strophe.SASLMD5.prototype._quote = function (str) {\r\n              return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"'; //\" end string workaround for emacs\r\n            };\r\n\r\n            Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\r\n              var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\r\n              var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\r\n              var realm = \"\";\r\n              var host = null;\r\n              var nonce = \"\";\r\n              var qop = \"\";\r\n\r\n              while (challenge.match(attribMatch)) {\r\n                var matches = challenge.match(attribMatch);\r\n                challenge = challenge.replace(matches[0], \"\");\r\n                matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\r\n\r\n                switch (matches[1]) {\r\n                  case \"realm\":\r\n                    realm = matches[2];\r\n                    break;\r\n\r\n                  case \"nonce\":\r\n                    nonce = matches[2];\r\n                    break;\r\n\r\n                  case \"qop\":\r\n                    qop = matches[2];\r\n                    break;\r\n\r\n                  case \"host\":\r\n                    host = matches[2];\r\n                    break;\r\n                }\r\n              }\r\n\r\n              var digest_uri = connection.servtype + \"/\" + connection.domain;\r\n\r\n              if (host !== null) {\r\n                digest_uri = digest_uri + \"/\" + host;\r\n              }\r\n\r\n              var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\r\n              var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\r\n              var A2 = 'AUTHENTICATE:' + digest_uri;\r\n              var responseText = \"\";\r\n              responseText += 'charset=utf-8,';\r\n              responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\r\n              responseText += 'realm=' + this._quote(realm) + ',';\r\n              responseText += 'nonce=' + this._quote(nonce) + ',';\r\n              responseText += 'nc=00000001,';\r\n              responseText += 'cnonce=' + this._quote(cnonce) + ',';\r\n              responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\r\n              responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" + nonce + \":00000001:\" + cnonce + \":auth:\" + MD5.hexdigest(A2)) + \",\";\r\n              responseText += 'qop=auth';\r\n\r\n              this.onChallenge = function () {\r\n                return \"\";\r\n              };\r\n\r\n              return responseText;\r\n            };\r\n            /** PrivateConstructor: SASLOAuthBearer\r\n             *  SASL OAuth Bearer authentication.\r\n             */\r\n\r\n\r\n            Strophe.SASLOAuthBearer = function () {};\r\n\r\n            Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\r\n\r\n            Strophe.SASLOAuthBearer.prototype.test = function (connection) {\r\n              return connection.pass !== null;\r\n            };\r\n\r\n            Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\r\n              var auth_str = 'n,';\r\n\r\n              if (connection.authcid !== null) {\r\n                auth_str = auth_str + 'a=' + connection.authzid;\r\n              }\r\n\r\n              auth_str = auth_str + ',';\r\n              auth_str = auth_str + \"\\x01\";\r\n              auth_str = auth_str + 'auth=Bearer ';\r\n              auth_str = auth_str + connection.pass;\r\n              auth_str = auth_str + \"\\x01\";\r\n              auth_str = auth_str + \"\\x01\";\r\n              return utils.utf16to8(auth_str);\r\n            };\r\n            /** PrivateConstructor: SASLExternal\r\n             *  SASL EXTERNAL authentication.\r\n             *\r\n             *  The EXTERNAL mechanism allows a client to request the server to use\r\n             *  credentials established by means external to the mechanism to\r\n             *  authenticate the client. The external means may be, for instance,\r\n             *  TLS services.\r\n             */\r\n\r\n\r\n            Strophe.SASLExternal = function () {};\r\n\r\n            Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\r\n\r\n            Strophe.SASLExternal.prototype.onChallenge = function (connection) {\r\n              /** According to XEP-178, an authzid SHOULD NOT be presented when the\r\n               * authcid contained or implied in the client certificate is the JID (i.e.\r\n               * authzid) with which the user wants to log in as.\r\n               *\r\n               * To NOT send the authzid, the user should therefore set the authcid equal\r\n               * to the JID when instantiating a new Strophe.Connection object.\r\n               */\r\n              return connection.authcid === connection.authzid ? '' : connection.authzid;\r\n            };\r\n            /** PrivateConstructor: SASLXOAuth2\r\n             *  SASL X-OAuth2 authentication.\r\n             */\r\n\r\n\r\n            Strophe.SASLXOAuth2 = function () {};\r\n\r\n            Strophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\r\n\r\n            Strophe.SASLXOAuth2.prototype.test = function (connection) {\r\n              return connection.pass !== null;\r\n            };\r\n\r\n            Strophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\r\n              var auth_str = \"\\0\";\r\n\r\n              if (connection.authcid !== null) {\r\n                auth_str = auth_str + connection.authzid;\r\n              }\r\n\r\n              auth_str = auth_str + \"\\0\";\r\n              auth_str = auth_str + connection.pass;\r\n              return utils.utf16to8(auth_str);\r\n            };\r\n            var core = {\r\n              'Strophe': Strophe,\r\n              '$build': $build,\r\n              '$iq': $iq,\r\n              '$msg': $msg,\r\n              '$pres': $pres,\r\n              'SHA1': SHA1,\r\n              'MD5': MD5,\r\n              'b64_hmac_sha1': SHA1.b64_hmac_sha1,\r\n              'b64_sha1': SHA1.b64_sha1,\r\n              'str_hmac_sha1': SHA1.str_hmac_sha1,\r\n              'str_sha1': SHA1.str_sha1\r\n            };\r\n\r\n            /*\r\n                This program is distributed under the terms of the MIT license.\r\n                Please see the LICENSE file for details.\r\n\r\n                Copyright 2006-2008, OGG, LLC\r\n            */\r\n            var Strophe$1 = core.Strophe;\r\n            var $build$1 = core.$build;\r\n            /** PrivateClass: Strophe.Request\r\n             *  _Private_ helper class that provides a cross implementation abstraction\r\n             *  for a BOSH related XMLHttpRequest.\r\n             *\r\n             *  The Strophe.Request class is used internally to encapsulate BOSH request\r\n             *  information.  It is not meant to be used from user's code.\r\n             */\r\n\r\n            /** PrivateConstructor: Strophe.Request\r\n             *  Create and initialize a new Strophe.Request object.\r\n             *\r\n             *  Parameters:\r\n             *    (XMLElement) elem - The XML data to be sent in the request.\r\n             *    (Function) func - The function that will be called when the\r\n             *      XMLHttpRequest readyState changes.\r\n             *    (Integer) rid - The BOSH rid attribute associated with this request.\r\n             *    (Integer) sends - The number of times this same request has been sent.\r\n             */\r\n\r\n            Strophe$1.Request = function (elem, func, rid, sends) {\r\n              this.id = ++Strophe$1._requestId;\r\n              this.xmlData = elem;\r\n              this.data = Strophe$1.serialize(elem); // save original function in case we need to make a new request\r\n              // from this one.\r\n\r\n              this.origFunc = func;\r\n              this.func = func;\r\n              this.rid = rid;\r\n              this.date = NaN;\r\n              this.sends = sends || 0;\r\n              this.abort = false;\r\n              this.dead = null;\r\n\r\n              this.age = function () {\r\n                if (!this.date) {\r\n                  return 0;\r\n                }\r\n\r\n                var now = new Date();\r\n                return (now - this.date) / 1000;\r\n              };\r\n\r\n              this.timeDead = function () {\r\n                if (!this.dead) {\r\n                  return 0;\r\n                }\r\n\r\n                var now = new Date();\r\n                return (now - this.dead) / 1000;\r\n              };\r\n\r\n              this.xhr = this._newXHR();\r\n            };\r\n\r\n            Strophe$1.Request.prototype = {\r\n              /** PrivateFunction: getResponse\r\n               *  Get a response from the underlying XMLHttpRequest.\r\n               *\r\n               *  This function attempts to get a response from the request and checks\r\n               *  for errors.\r\n               *\r\n               *  Throws:\r\n               *    \"parsererror\" - A parser error occured.\r\n               *    \"bad-format\" - The entity has sent XML that cannot be processed.\r\n               *\r\n               *  Returns:\r\n               *    The DOM element tree of the response.\r\n               */\r\n              getResponse: function getResponse() {\r\n                var node = null;\r\n\r\n                if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\r\n                  node = this.xhr.responseXML.documentElement;\r\n\r\n                  if (node.tagName === \"parsererror\") {\r\n                    Strophe$1.error(\"invalid response received\");\r\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\r\n                    Strophe$1.error(\"responseXML: \" + Strophe$1.serialize(this.xhr.responseXML));\r\n                    throw new Error(\"parsererror\");\r\n                  }\r\n                } else if (this.xhr.responseText) {\r\n                  // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\r\n                  Strophe$1.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\r\n                  node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\r\n\r\n                  if (!node) {\r\n                    throw new Error('Parsing produced null node');\r\n                  } else if (node.querySelector('parsererror')) {\r\n                    Strophe$1.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\r\n                    Strophe$1.error(\"responseText: \" + this.xhr.responseText);\r\n                    var error = new Error();\r\n                    error.name = Strophe$1.ErrorCondition.BAD_FORMAT;\r\n                    throw error;\r\n                  }\r\n                }\r\n\r\n                return node;\r\n              },\r\n\r\n              /** PrivateFunction: _newXHR\r\n               *  _Private_ helper function to create XMLHttpRequests.\r\n               *\r\n               *  This function creates XMLHttpRequests across all implementations.\r\n               *\r\n               *  Returns:\r\n               *    A new XMLHttpRequest.\r\n               */\r\n              _newXHR: function _newXHR() {\r\n                var xhr = null;\r\n\r\n                if (window.XMLHttpRequest) {\r\n                  xhr = new XMLHttpRequest();\r\n\r\n                  if (xhr.overrideMimeType) {\r\n                    xhr.overrideMimeType(\"text/xml; charset=utf-8\");\r\n                  }\r\n                } else if (window.ActiveXObject) {\r\n                  xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n                } // use Function.bind() to prepend ourselves as an argument\r\n\r\n\r\n                xhr.onreadystatechange = this.func.bind(null, this);\r\n                return xhr;\r\n              }\r\n            };\r\n            /** Class: Strophe.Bosh\r\n             *  _Private_ helper class that handles BOSH Connections\r\n             *\r\n             *  The Strophe.Bosh class is used internally by Strophe.Connection\r\n             *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\r\n             */\r\n\r\n            /** File: bosh.js\r\n             *  A JavaScript library to enable BOSH in Strophejs.\r\n             *\r\n             *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\r\n             *  to emulate a persistent, stateful, two-way connection to an XMPP server.\r\n             *  More information on BOSH can be found in XEP 124.\r\n             */\r\n\r\n            /** PrivateConstructor: Strophe.Bosh\r\n             *  Create and initialize a Strophe.Bosh object.\r\n             *\r\n             *  Parameters:\r\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.Bosh object.\r\n             */\r\n\r\n            Strophe$1.Bosh = function (connection) {\r\n              this._conn = connection;\r\n              /* request id for body tags */\r\n\r\n              this.rid = Math.floor(Math.random() * 4294967295);\r\n              /* The current session ID. */\r\n\r\n              this.sid = null; // default BOSH values\r\n\r\n              this.hold = 1;\r\n              this.wait = 60;\r\n              this.window = 5;\r\n              this.errors = 0;\r\n              this.inactivity = null;\r\n              this.lastResponseHeaders = null;\r\n              this._requests = [];\r\n            };\r\n\r\n            Strophe$1.Bosh.prototype = {\r\n              /** Variable: strip\r\n               *\r\n               *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\r\n               *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\r\n               *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\r\n               *\r\n               *  > Strophe.Bosh.prototype.strip = \"body\";\r\n               *\r\n               *  This will enable stripping of the body tag in both\r\n               *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\r\n               */\r\n              strip: null,\r\n\r\n              /** PrivateFunction: _buildBody\r\n               *  _Private_ helper function to generate the <body/> wrapper for BOSH.\r\n               *\r\n               *  Returns:\r\n               *    A Strophe.Builder with a <body/> element.\r\n               */\r\n              _buildBody: function _buildBody() {\r\n                var bodyWrap = $build$1('body', {\r\n                  'rid': this.rid++,\r\n                  'xmlns': Strophe$1.NS.HTTPBIND\r\n                });\r\n\r\n                if (this.sid !== null) {\r\n                  bodyWrap.attrs({\r\n                    'sid': this.sid\r\n                  });\r\n                }\r\n\r\n                if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\r\n                  this._cacheSession();\r\n                }\r\n\r\n                return bodyWrap;\r\n              },\r\n\r\n              /** PrivateFunction: _reset\r\n               *  Reset the connection.\r\n               *\r\n               *  This function is called by the reset function of the Strophe Connection\r\n               */\r\n              _reset: function _reset() {\r\n                this.rid = Math.floor(Math.random() * 4294967295);\r\n                this.sid = null;\r\n                this.errors = 0;\r\n\r\n                if (this._conn._sessionCachingSupported()) {\r\n                  window.sessionStorage.removeItem('strophe-bosh-session');\r\n                }\r\n\r\n                this._conn.nextValidRid(this.rid);\r\n              },\r\n\r\n              /** PrivateFunction: _connect\r\n               *  _Private_ function that initializes the BOSH connection.\r\n               *\r\n               *  Creates and sends the Request that initializes the BOSH connection.\r\n               */\r\n              _connect: function _connect(wait, hold, route) {\r\n                this.wait = wait || this.wait;\r\n                this.hold = hold || this.hold;\r\n                this.errors = 0;\r\n\r\n                var body = this._buildBody().attrs({\r\n                  \"to\": this._conn.domain,\r\n                  \"xml:lang\": \"en\",\r\n                  \"wait\": this.wait,\r\n                  \"hold\": this.hold,\r\n                  \"content\": \"text/xml; charset=utf-8\",\r\n                  \"ver\": \"1.6\",\r\n                  \"xmpp:version\": \"1.0\",\r\n                  \"xmlns:xmpp\": Strophe$1.NS.BOSH\r\n                });\r\n\r\n                if (route) {\r\n                  body.attrs({\r\n                    'route': route\r\n                  });\r\n                }\r\n\r\n                var _connect_cb = this._conn._connect_cb;\r\n\r\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, _connect_cb.bind(this._conn)), body.tree().getAttribute(\"rid\")));\r\n\r\n                this._throttledRequestHandler();\r\n              },\r\n\r\n              /** PrivateFunction: _attach\r\n               *  Attach to an already created and authenticated BOSH session.\r\n               *\r\n               *  This function is provided to allow Strophe to attach to BOSH\r\n               *  sessions which have been created externally, perhaps by a Web\r\n               *  application.  This is often used to support auto-login type features\r\n               *  without putting user credentials into the page.\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - The full JID that is bound by the session.\r\n               *    (String) sid - The SID of the BOSH session.\r\n               *    (String) rid - The current RID of the BOSH session.  This RID\r\n               *      will be used by the next request.\r\n               *    (Function) callback The connect callback function.\r\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n               *      time the server will wait before returning an empty result for\r\n               *      a request.  The default setting of 60 seconds is recommended.\r\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\r\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n               *      number of connections the server will hold at one time.  This\r\n               *      should almost always be set to 1 (the default).\r\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n               *      allowed range of request ids that are valid.  The default is 5.\r\n               */\r\n              _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\r\n                this._conn.jid = jid;\r\n                this.sid = sid;\r\n                this.rid = rid;\r\n                this._conn.connect_callback = callback;\r\n                this._conn.domain = Strophe$1.getDomainFromJid(this._conn.jid);\r\n                this._conn.authenticated = true;\r\n                this._conn.connected = true;\r\n                this.wait = wait || this.wait;\r\n                this.hold = hold || this.hold;\r\n                this.window = wind || this.window;\r\n\r\n                this._conn._changeConnectStatus(Strophe$1.Status.ATTACHED, null);\r\n              },\r\n\r\n              /** PrivateFunction: _restore\r\n               *  Attempt to restore a cached BOSH session\r\n               *\r\n               *  Parameters:\r\n               *    (String) jid - The full JID that is bound by the session.\r\n               *      This parameter is optional but recommended, specifically in cases\r\n               *      where prebinded BOSH sessions are used where it's important to know\r\n               *      that the right session is being restored.\r\n               *    (Function) callback The connect callback function.\r\n               *    (Integer) wait - The optional HTTPBIND wait value.  This is the\r\n               *      time the server will wait before returning an empty result for\r\n               *      a request.  The default setting of 60 seconds is recommended.\r\n               *      Other settings will require tweaks to the Strophe.TIMEOUT value.\r\n               *    (Integer) hold - The optional HTTPBIND hold value.  This is the\r\n               *      number of connections the server will hold at one time.  This\r\n               *      should almost always be set to 1 (the default).\r\n               *    (Integer) wind - The optional HTTBIND window value.  This is the\r\n               *      allowed range of request ids that are valid.  The default is 5.\r\n               */\r\n              _restore: function _restore(jid, callback, wait, hold, wind) {\r\n                var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\r\n\r\n                if (typeof session !== \"undefined\" && session !== null && session.rid && session.sid && session.jid && (typeof jid === \"undefined\" || jid === null || Strophe$1.getBareJidFromJid(session.jid) === Strophe$1.getBareJidFromJid(jid) || // If authcid is null, then it's an anonymous login, so\r\n                // we compare only the domains:\r\n                Strophe$1.getNodeFromJid(jid) === null && Strophe$1.getDomainFromJid(session.jid) === jid)) {\r\n                  this._conn.restored = true;\r\n\r\n                  this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\r\n                } else {\r\n                  var error = new Error(\"_restore: no restoreable session.\");\r\n                  error.name = \"StropheSessionError\";\r\n                  throw error;\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _cacheSession\r\n               *  _Private_ handler for the beforeunload event.\r\n               *\r\n               *  This handler is used to process the Bosh-part of the initial request.\r\n               *  Parameters:\r\n               *    (Strophe.Request) bodyWrap - The received stanza.\r\n               */\r\n              _cacheSession: function _cacheSession() {\r\n                if (this._conn.authenticated) {\r\n                  if (this._conn.jid && this.rid && this.sid) {\r\n                    window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\r\n                      'jid': this._conn.jid,\r\n                      'rid': this.rid,\r\n                      'sid': this.sid\r\n                    }));\r\n                  }\r\n                } else {\r\n                  window.sessionStorage.removeItem('strophe-bosh-session');\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _connect_cb\r\n               *  _Private_ handler for initial connection request.\r\n               *\r\n               *  This handler is used to process the Bosh-part of the initial request.\r\n               *  Parameters:\r\n               *    (Strophe.Request) bodyWrap - The received stanza.\r\n               */\r\n              _connect_cb: function _connect_cb(bodyWrap) {\r\n                var typ = bodyWrap.getAttribute(\"type\");\r\n\r\n                if (typ !== null && typ === \"terminate\") {\r\n                  // an error occurred\r\n                  var cond = bodyWrap.getAttribute(\"condition\");\r\n                  Strophe$1.error(\"BOSH-Connection failed: \" + cond);\r\n                  var conflict = bodyWrap.getElementsByTagName(\"conflict\");\r\n\r\n                  if (cond !== null) {\r\n                    if (cond === \"remote-stream-error\" && conflict.length > 0) {\r\n                      cond = \"conflict\";\r\n                    }\r\n\r\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, cond);\r\n                  } else {\r\n                    this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"unknown\");\r\n                  }\r\n\r\n                  this._conn._doDisconnect(cond);\r\n\r\n                  return Strophe$1.Status.CONNFAIL;\r\n                } // check to make sure we don't overwrite these if _connect_cb is\r\n                // called multiple times in the case of missing stream:features\r\n\r\n\r\n                if (!this.sid) {\r\n                  this.sid = bodyWrap.getAttribute(\"sid\");\r\n                }\r\n\r\n                var wind = bodyWrap.getAttribute('requests');\r\n\r\n                if (wind) {\r\n                  this.window = parseInt(wind, 10);\r\n                }\r\n\r\n                var hold = bodyWrap.getAttribute('hold');\r\n\r\n                if (hold) {\r\n                  this.hold = parseInt(hold, 10);\r\n                }\r\n\r\n                var wait = bodyWrap.getAttribute('wait');\r\n\r\n                if (wait) {\r\n                  this.wait = parseInt(wait, 10);\r\n                }\r\n\r\n                var inactivity = bodyWrap.getAttribute('inactivity');\r\n\r\n                if (inactivity) {\r\n                  this.inactivity = parseInt(inactivity, 10);\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _disconnect\r\n               *  _Private_ part of Connection.disconnect for Bosh\r\n               *\r\n               *  Parameters:\r\n               *    (Request) pres - This stanza will be sent before disconnecting.\r\n               */\r\n              _disconnect: function _disconnect(pres) {\r\n                this._sendTerminate(pres);\r\n              },\r\n\r\n              /** PrivateFunction: _doDisconnect\r\n               *  _Private_ function to disconnect.\r\n               *\r\n               *  Resets the SID and RID.\r\n               */\r\n              _doDisconnect: function _doDisconnect() {\r\n                this.sid = null;\r\n                this.rid = Math.floor(Math.random() * 4294967295);\r\n\r\n                if (this._conn._sessionCachingSupported()) {\r\n                  window.sessionStorage.removeItem('strophe-bosh-session');\r\n                }\r\n\r\n                this._conn.nextValidRid(this.rid);\r\n              },\r\n\r\n              /** PrivateFunction: _emptyQueue\r\n               * _Private_ function to check if the Request queue is empty.\r\n               *\r\n               *  Returns:\r\n               *    True, if there are no Requests queued, False otherwise.\r\n               */\r\n              _emptyQueue: function _emptyQueue() {\r\n                return this._requests.length === 0;\r\n              },\r\n\r\n              /** PrivateFunction: _callProtocolErrorHandlers\r\n               *  _Private_ function to call error handlers registered for HTTP errors.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) req - The request that is changing readyState.\r\n               */\r\n              _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\r\n                var reqStatus = this._getRequestStatus(req);\r\n\r\n                var err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\r\n\r\n                if (err_callback) {\r\n                  err_callback.call(this, reqStatus);\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _hitError\r\n               *  _Private_ function to handle the error count.\r\n               *\r\n               *  Requests are resent automatically until their error count reaches\r\n               *  5.  Each time an error is encountered, this function is called to\r\n               *  increment the count and disconnect if the count is too high.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) reqStatus - The request status.\r\n               */\r\n              _hitError: function _hitError(reqStatus) {\r\n                this.errors++;\r\n                Strophe$1.warn(\"request errored, status: \" + reqStatus + \", number of errors: \" + this.errors);\r\n\r\n                if (this.errors > 4) {\r\n                  this._conn._onDisconnectTimeout();\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _no_auth_received\r\n               *\r\n               * Called on stream start/restart when no stream:features\r\n               * has been received and sends a blank poll request.\r\n               */\r\n              _no_auth_received: function _no_auth_received(callback) {\r\n                Strophe$1.warn(\"Server did not yet offer a supported authentication \" + \"mechanism. Sending a blank poll request.\");\r\n\r\n                if (callback) {\r\n                  callback = callback.bind(this._conn);\r\n                } else {\r\n                  callback = this._conn._connect_cb.bind(this._conn);\r\n                }\r\n\r\n                var body = this._buildBody();\r\n\r\n                this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, callback), body.tree().getAttribute(\"rid\")));\r\n\r\n                this._throttledRequestHandler();\r\n              },\r\n\r\n              /** PrivateFunction: _onDisconnectTimeout\r\n               *  _Private_ timeout handler for handling non-graceful disconnection.\r\n               *\r\n               *  Cancels all remaining Requests and clears the queue.\r\n               */\r\n              _onDisconnectTimeout: function _onDisconnectTimeout() {\r\n                this._abortAllRequests();\r\n              },\r\n\r\n              /** PrivateFunction: _abortAllRequests\r\n               *  _Private_ helper function that makes sure all pending requests are aborted.\r\n               */\r\n              _abortAllRequests: function _abortAllRequests() {\r\n                while (this._requests.length > 0) {\r\n                  var req = this._requests.pop();\r\n\r\n                  req.abort = true;\r\n                  req.xhr.abort();\r\n\r\n                  req.xhr.onreadystatechange = function () {};\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _onIdle\r\n               *  _Private_ handler called by Strophe.Connection._onIdle\r\n               *\r\n               *  Sends all queued Requests or polls with empty Request if there are none.\r\n               */\r\n              _onIdle: function _onIdle() {\r\n                var data = this._conn._data; // if no requests are in progress, poll\r\n\r\n                if (this._conn.authenticated && this._requests.length === 0 && data.length === 0 && !this._conn.disconnecting) {\r\n                  Strophe$1.debug(\"no requests during idle cycle, sending blank request\");\r\n                  data.push(null);\r\n                }\r\n\r\n                if (this._conn.paused) {\r\n                  return;\r\n                }\r\n\r\n                if (this._requests.length < 2 && data.length > 0) {\r\n                  var body = this._buildBody();\r\n\r\n                  for (var i = 0; i < data.length; i++) {\r\n                    if (data[i] !== null) {\r\n                      if (data[i] === \"restart\") {\r\n                        body.attrs({\r\n                          \"to\": this._conn.domain,\r\n                          \"xml:lang\": \"en\",\r\n                          \"xmpp:restart\": \"true\",\r\n                          \"xmlns:xmpp\": Strophe$1.NS.BOSH\r\n                        });\r\n                      } else {\r\n                        body.cnode(data[i]).up();\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  delete this._conn._data;\r\n                  this._conn._data = [];\r\n\r\n                  this._requests.push(new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\")));\r\n\r\n                  this._throttledRequestHandler();\r\n                }\r\n\r\n                if (this._requests.length > 0) {\r\n                  var time_elapsed = this._requests[0].age();\r\n\r\n                  if (this._requests[0].dead !== null) {\r\n                    if (this._requests[0].timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\r\n                      this._throttledRequestHandler();\r\n                    }\r\n                  }\r\n\r\n                  if (time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait)) {\r\n                    Strophe$1.warn(\"Request \" + this._requests[0].id + \" timed out, over \" + Math.floor(Strophe$1.TIMEOUT * this.wait) + \" seconds since last activity\");\r\n\r\n                    this._throttledRequestHandler();\r\n                  }\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _getRequestStatus\r\n               *\r\n               *  Returns the HTTP status code from a Strophe.Request\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) req - The Strophe.Request instance.\r\n               *    (Integer) def - The default value that should be returned if no\r\n               *          status value was found.\r\n               */\r\n              _getRequestStatus: function _getRequestStatus(req, def) {\r\n                var reqStatus;\r\n\r\n                if (req.xhr.readyState === 4) {\r\n                  try {\r\n                    reqStatus = req.xhr.status;\r\n                  } catch (e) {\r\n                    // ignore errors from undefined status attribute. Works\r\n                    // around a browser bug\r\n                    Strophe$1.error(\"Caught an error while retrieving a request's status, \" + \"reqStatus: \" + reqStatus);\r\n                  }\r\n                }\r\n\r\n                if (typeof reqStatus === \"undefined\") {\r\n                  reqStatus = typeof def === 'number' ? def : 0;\r\n                }\r\n\r\n                return reqStatus;\r\n              },\r\n\r\n              /** PrivateFunction: _onRequestStateChange\r\n               *  _Private_ handler for Strophe.Request state changes.\r\n               *\r\n               *  This function is called when the XMLHttpRequest readyState changes.\r\n               *  It contains a lot of error handling logic for the many ways that\r\n               *  requests can fail, and calls the request callback when requests\r\n               *  succeed.\r\n               *\r\n               *  Parameters:\r\n               *    (Function) func - The handler for the request.\r\n               *    (Strophe.Request) req - The request that is changing readyState.\r\n               */\r\n              _onRequestStateChange: function _onRequestStateChange(func, req) {\r\n                Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" state changed to \" + req.xhr.readyState);\r\n\r\n                if (req.abort) {\r\n                  req.abort = false;\r\n                  return;\r\n                }\r\n\r\n                if (req.xhr.readyState !== 4) {\r\n                  // The request is not yet complete\r\n                  return;\r\n                }\r\n\r\n                var reqStatus = this._getRequestStatus(req);\r\n\r\n                this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\r\n\r\n                if (this.disconnecting && reqStatus >= 400) {\r\n                  this._hitError(reqStatus);\r\n\r\n                  this._callProtocolErrorHandlers(req);\r\n\r\n                  return;\r\n                }\r\n\r\n                var valid_request = reqStatus > 0 && reqStatus < 500;\r\n                var too_many_retries = req.sends > this._conn.maxRetries;\r\n\r\n                if (valid_request || too_many_retries) {\r\n                  // remove from internal queue\r\n                  this._removeRequest(req);\r\n\r\n                  Strophe$1.debug(\"request id \" + req.id + \" should now be removed\");\r\n                }\r\n\r\n                if (reqStatus === 200) {\r\n                  // request succeeded\r\n                  var reqIs0 = this._requests[0] === req;\r\n                  var reqIs1 = this._requests[1] === req; // if request 1 finished, or request 0 finished and request\r\n                  // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\r\n                  // restart the other - both will be in the first spot, as the\r\n                  // completed request has been removed from the queue already\r\n\r\n                  if (reqIs1 || reqIs0 && this._requests.length > 0 && this._requests[0].age() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait)) {\r\n                    this._restartRequest(0);\r\n                  }\r\n\r\n                  this._conn.nextValidRid(Number(req.rid) + 1);\r\n\r\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\r\n                  func(req); // call handler\r\n\r\n                  this.errors = 0;\r\n                } else if (reqStatus === 0 || reqStatus >= 400 && reqStatus < 600 || reqStatus >= 12000) {\r\n                  // request failed\r\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\r\n\r\n                  this._hitError(reqStatus);\r\n\r\n                  this._callProtocolErrorHandlers(req);\r\n\r\n                  if (reqStatus >= 400 && reqStatus < 500) {\r\n                    this._conn._changeConnectStatus(Strophe$1.Status.DISCONNECTING, null);\r\n\r\n                    this._conn._doDisconnect();\r\n                  }\r\n                } else {\r\n                  Strophe$1.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\r\n                }\r\n\r\n                if (!valid_request && !too_many_retries) {\r\n                  this._throttledRequestHandler();\r\n                } else if (too_many_retries && !this._conn.connected) {\r\n                  this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"giving-up\");\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _processRequest\r\n               *  _Private_ function to process a request in the queue.\r\n               *\r\n               *  This function takes requests off the queue and sends them and\r\n               *  restarts dead requests.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) i - The index of the request in the queue.\r\n               */\r\n              _processRequest: function _processRequest(i) {\r\n                var _this = this;\r\n\r\n                var req = this._requests[i];\r\n\r\n                var reqStatus = this._getRequestStatus(req, -1); // make sure we limit the number of retries\r\n\r\n\r\n                if (req.sends > this._conn.maxRetries) {\r\n                  this._conn._onDisconnectTimeout();\r\n\r\n                  return;\r\n                }\r\n\r\n                var time_elapsed = req.age();\r\n                var primary_timeout = !isNaN(time_elapsed) && time_elapsed > Math.floor(Strophe$1.TIMEOUT * this.wait);\r\n                var secondary_timeout = req.dead !== null && req.timeDead() > Math.floor(Strophe$1.SECONDARY_TIMEOUT * this.wait);\r\n                var server_error = req.xhr.readyState === 4 && (reqStatus < 1 || reqStatus >= 500);\r\n\r\n                if (primary_timeout || secondary_timeout || server_error) {\r\n                  if (secondary_timeout) {\r\n                    Strophe$1.error(\"Request \".concat(this._requests[i].id, \" timed out (secondary), restarting\"));\r\n                  }\r\n\r\n                  req.abort = true;\r\n                  req.xhr.abort(); // setting to null fails on IE6, so set to empty function\r\n\r\n                  req.xhr.onreadystatechange = function () {};\r\n\r\n                  this._requests[i] = new Strophe$1.Request(req.xmlData, req.origFunc, req.rid, req.sends);\r\n                  req = this._requests[i];\r\n                }\r\n\r\n                if (req.xhr.readyState === 0) {\r\n                  Strophe$1.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\r\n\r\n                  try {\r\n                    var content_type = this._conn.options.contentType || \"text/xml; charset=utf-8\";\r\n                    req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\r\n\r\n                    if (typeof req.xhr.setRequestHeader !== 'undefined') {\r\n                      // IE9 doesn't have setRequestHeader\r\n                      req.xhr.setRequestHeader(\"Content-Type\", content_type);\r\n                    }\r\n\r\n                    if (this._conn.options.withCredentials) {\r\n                      req.xhr.withCredentials = true;\r\n                    }\r\n                  } catch (e2) {\r\n                    Strophe$1.error(\"XHR open failed: \" + e2.toString());\r\n\r\n                    if (!this._conn.connected) {\r\n                      this._conn._changeConnectStatus(Strophe$1.Status.CONNFAIL, \"bad-service\");\r\n                    }\r\n\r\n                    this._conn.disconnect();\r\n\r\n                    return;\r\n                  } // Fires the XHR request -- may be invoked immediately\r\n                  // or on a gradually expanding retry window for reconnects\r\n\r\n\r\n                  var sendFunc = function sendFunc() {\r\n                    req.date = new Date();\r\n\r\n                    if (_this._conn.options.customHeaders) {\r\n                      var headers = _this._conn.options.customHeaders;\r\n\r\n                      for (var header in headers) {\r\n                        if (Object.prototype.hasOwnProperty.call(headers, header)) {\r\n                          req.xhr.setRequestHeader(header, headers[header]);\r\n                        }\r\n                      }\r\n                    }\r\n\r\n                    req.xhr.send(req.data);\r\n                  }; // Implement progressive backoff for reconnects --\r\n                  // First retry (send === 1) should also be instantaneous\r\n\r\n\r\n                  if (req.sends > 1) {\r\n                    // Using a cube of the retry number creates a nicely\r\n                    // expanding retry window\r\n                    var backoff = Math.min(Math.floor(Strophe$1.TIMEOUT * this.wait), Math.pow(req.sends, 3)) * 1000;\r\n                    setTimeout(function () {\r\n                      // XXX: setTimeout should be called only with function expressions (23974bc1)\r\n                      sendFunc();\r\n                    }, backoff);\r\n                  } else {\r\n                    sendFunc();\r\n                  }\r\n\r\n                  req.sends++;\r\n\r\n                  if (this._conn.xmlOutput !== Strophe$1.Connection.prototype.xmlOutput) {\r\n                    if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\r\n                      this._conn.xmlOutput(req.xmlData.childNodes[0]);\r\n                    } else {\r\n                      this._conn.xmlOutput(req.xmlData);\r\n                    }\r\n                  }\r\n\r\n                  if (this._conn.rawOutput !== Strophe$1.Connection.prototype.rawOutput) {\r\n                    this._conn.rawOutput(req.data);\r\n                  }\r\n                } else {\r\n                  Strophe$1.debug(\"_processRequest: \" + (i === 0 ? \"first\" : \"second\") + \" request has readyState of \" + req.xhr.readyState);\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _removeRequest\r\n               *  _Private_ function to remove a request from the queue.\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) req - The request to remove.\r\n               */\r\n              _removeRequest: function _removeRequest(req) {\r\n                Strophe$1.debug(\"removing request\");\r\n\r\n                for (var i = this._requests.length - 1; i >= 0; i--) {\r\n                  if (req === this._requests[i]) {\r\n                    this._requests.splice(i, 1);\r\n                  }\r\n                } // IE6 fails on setting to null, so set to empty function\r\n\r\n\r\n                req.xhr.onreadystatechange = function () {};\r\n\r\n                this._throttledRequestHandler();\r\n              },\r\n\r\n              /** PrivateFunction: _restartRequest\r\n               *  _Private_ function to restart a request that is presumed dead.\r\n               *\r\n               *  Parameters:\r\n               *    (Integer) i - The index of the request in the queue.\r\n               */\r\n              _restartRequest: function _restartRequest(i) {\r\n                var req = this._requests[i];\r\n\r\n                if (req.dead === null) {\r\n                  req.dead = new Date();\r\n                }\r\n\r\n                this._processRequest(i);\r\n              },\r\n\r\n              /** PrivateFunction: _reqToData\r\n               * _Private_ function to get a stanza out of a request.\r\n               *\r\n               * Tries to extract a stanza out of a Request Object.\r\n               * When this fails the current connection will be disconnected.\r\n               *\r\n               *  Parameters:\r\n               *    (Object) req - The Request.\r\n               *\r\n               *  Returns:\r\n               *    The stanza that was passed.\r\n               */\r\n              _reqToData: function _reqToData(req) {\r\n                try {\r\n                  return req.getResponse();\r\n                } catch (e) {\r\n                  if (e.message !== \"parsererror\") {\r\n                    throw e;\r\n                  }\r\n\r\n                  this._conn.disconnect(\"strophe-parsererror\");\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _sendTerminate\r\n               *  _Private_ function to send initial disconnect sequence.\r\n               *\r\n               *  This is the first step in a graceful disconnect.  It sends\r\n               *  the BOSH server a terminate body and includes an unavailable\r\n               *  presence if authentication has completed.\r\n               */\r\n              _sendTerminate: function _sendTerminate(pres) {\r\n                Strophe$1.debug(\"_sendTerminate was called\");\r\n\r\n                var body = this._buildBody().attrs({\r\n                  type: \"terminate\"\r\n                });\r\n\r\n                if (pres) {\r\n                  body.cnode(pres.tree());\r\n                }\r\n\r\n                var req = new Strophe$1.Request(body.tree(), this._onRequestStateChange.bind(this, this._conn._dataRecv.bind(this._conn)), body.tree().getAttribute(\"rid\"));\r\n\r\n                this._requests.push(req);\r\n\r\n                this._throttledRequestHandler();\r\n              },\r\n\r\n              /** PrivateFunction: _send\r\n               *  _Private_ part of the Connection.send function for BOSH\r\n               *\r\n               * Just triggers the RequestHandler to send the messages that are in the queue\r\n               */\r\n              _send: function _send() {\r\n                var _this2 = this;\r\n\r\n                clearTimeout(this._conn._idleTimeout);\r\n\r\n                this._throttledRequestHandler();\r\n\r\n                this._conn._idleTimeout = setTimeout(function () {\r\n                  return _this2._conn._onIdle();\r\n                }, 100);\r\n              },\r\n\r\n              /** PrivateFunction: _sendRestart\r\n               *\r\n               *  Send an xmpp:restart stanza.\r\n               */\r\n              _sendRestart: function _sendRestart() {\r\n                this._throttledRequestHandler();\r\n\r\n                clearTimeout(this._conn._idleTimeout);\r\n              },\r\n\r\n              /** PrivateFunction: _throttledRequestHandler\r\n               *  _Private_ function to throttle requests to the connection window.\r\n               *\r\n               *  This function makes sure we don't send requests so fast that the\r\n               *  request ids overflow the connection window in the case that one\r\n               *  request died.\r\n               */\r\n              _throttledRequestHandler: function _throttledRequestHandler() {\r\n                if (!this._requests) {\r\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + \"undefined requests\");\r\n                } else {\r\n                  Strophe$1.debug(\"_throttledRequestHandler called with \" + this._requests.length + \" requests\");\r\n                }\r\n\r\n                if (!this._requests || this._requests.length === 0) {\r\n                  return;\r\n                }\r\n\r\n                if (this._requests.length > 0) {\r\n                  this._processRequest(0);\r\n                }\r\n\r\n                if (this._requests.length > 1 && Math.abs(this._requests[0].rid - this._requests[1].rid) < this.window) {\r\n                  this._processRequest(1);\r\n                }\r\n              }\r\n            };\r\n\r\n            /*\r\n                This program is distributed under the terms of the MIT license.\r\n                Please see the LICENSE file for details.\r\n\r\n                Copyright 2006-2008, OGG, LLC\r\n            */\r\n            var Strophe$2 = core.Strophe;\r\n            var $build$2 = core.$build;\r\n            /** Class: Strophe.WebSocket\r\n             *  _Private_ helper class that handles WebSocket Connections\r\n             *\r\n             *  The Strophe.WebSocket class is used internally by Strophe.Connection\r\n             *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\r\n             */\r\n\r\n            /** File: websocket.js\r\n             *  A JavaScript library to enable XMPP over Websocket in Strophejs.\r\n             *\r\n             *  This file implements XMPP over WebSockets for Strophejs.\r\n             *  If a Connection is established with a Websocket url (ws://...)\r\n             *  Strophe will use WebSockets.\r\n             *  For more information on XMPP-over-WebSocket see RFC 7395:\r\n             *  http://tools.ietf.org/html/rfc7395\r\n             *\r\n             *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\r\n             */\r\n\r\n            /** PrivateConstructor: Strophe.Websocket\r\n             *  Create and initialize a Strophe.WebSocket object.\r\n             *  Currently only sets the connection Object.\r\n             *\r\n             *  Parameters:\r\n             *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\r\n             *\r\n             *  Returns:\r\n             *    A new Strophe.WebSocket object.\r\n             */\r\n\r\n            Strophe$2.Websocket = function (connection) {\r\n              this._conn = connection;\r\n              this.strip = \"wrapper\";\r\n              var service = connection.service;\r\n\r\n              if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\r\n                // If the service is not an absolute URL, assume it is a path and put the absolute\r\n                // URL together from options, current URL and the path.\r\n                var new_service = \"\";\r\n\r\n                if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\r\n                  new_service += \"ws\";\r\n                } else {\r\n                  new_service += \"wss\";\r\n                }\r\n\r\n                new_service += \"://\" + window.location.host;\r\n\r\n                if (service.indexOf(\"/\") !== 0) {\r\n                  new_service += window.location.pathname + service;\r\n                } else {\r\n                  new_service += service;\r\n                }\r\n\r\n                connection.service = new_service;\r\n              }\r\n            };\r\n\r\n            Strophe$2.Websocket.prototype = {\r\n              /** PrivateFunction: _buildStream\r\n               *  _Private_ helper function to generate the <stream> start tag for WebSockets\r\n               *\r\n               *  Returns:\r\n               *    A Strophe.Builder with a <stream> element.\r\n               */\r\n              _buildStream: function _buildStream() {\r\n                return $build$2(\"open\", {\r\n                  \"xmlns\": Strophe$2.NS.FRAMING,\r\n                  \"to\": this._conn.domain,\r\n                  \"version\": '1.0'\r\n                });\r\n              },\r\n\r\n              /** PrivateFunction: _check_streamerror\r\n               * _Private_ checks a message for stream:error\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) bodyWrap - The received stanza.\r\n               *    connectstatus - The ConnectStatus that will be set on error.\r\n               *  Returns:\r\n               *     true if there was a streamerror, false otherwise.\r\n               */\r\n              _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\r\n                var errors;\r\n\r\n                if (bodyWrap.getElementsByTagNameNS) {\r\n                  errors = bodyWrap.getElementsByTagNameNS(Strophe$2.NS.STREAM, \"error\");\r\n                } else {\r\n                  errors = bodyWrap.getElementsByTagName(\"stream:error\");\r\n                }\r\n\r\n                if (errors.length === 0) {\r\n                  return false;\r\n                }\r\n\r\n                var error = errors[0];\r\n                var condition = \"\";\r\n                var text = \"\";\r\n                var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\r\n\r\n                for (var i = 0; i < error.childNodes.length; i++) {\r\n                  var e = error.childNodes[i];\r\n\r\n                  if (e.getAttribute(\"xmlns\") !== ns) {\r\n                    break;\r\n                  }\r\n\r\n                  if (e.nodeName === \"text\") {\r\n                    text = e.textContent;\r\n                  } else {\r\n                    condition = e.nodeName;\r\n                  }\r\n                }\r\n\r\n                var errorString = \"WebSocket stream error: \";\r\n\r\n                if (condition) {\r\n                  errorString += condition;\r\n                } else {\r\n                  errorString += \"unknown\";\r\n                }\r\n\r\n                if (text) {\r\n                  errorString += \" - \" + text;\r\n                }\r\n\r\n                Strophe$2.error(errorString); // close the connection on stream_error\r\n\r\n                this._conn._changeConnectStatus(connectstatus, condition);\r\n\r\n                this._conn._doDisconnect();\r\n\r\n                return true;\r\n              },\r\n\r\n              /** PrivateFunction: _reset\r\n               *  Reset the connection.\r\n               *\r\n               *  This function is called by the reset function of the Strophe Connection.\r\n               *  Is not needed by WebSockets.\r\n               */\r\n              _reset: function _reset() {\r\n                return;\r\n              },\r\n\r\n              /** PrivateFunction: _connect\r\n               *  _Private_ function called by Strophe.Connection.connect\r\n               *\r\n               *  Creates a WebSocket for a connection and assigns Callbacks to it.\r\n               *  Does nothing if there already is a WebSocket.\r\n               */\r\n              _connect: function _connect() {\r\n                // Ensure that there is no open WebSocket from a previous Connection.\r\n                this._closeSocket(); // Create the new WobSocket\r\n\r\n\r\n                this.socket = new WebSocket(this._conn.service, \"xmpp\");\r\n                this.socket.onopen = this._onOpen.bind(this);\r\n                this.socket.onerror = this._onError.bind(this);\r\n                this.socket.onclose = this._onClose.bind(this);\r\n                this.socket.onmessage = this._connect_cb_wrapper.bind(this);\r\n              },\r\n\r\n              /** PrivateFunction: _connect_cb\r\n               *  _Private_ function called by Strophe.Connection._connect_cb\r\n               *\r\n               * checks for stream:error\r\n               *\r\n               *  Parameters:\r\n               *    (Strophe.Request) bodyWrap - The received stanza.\r\n               */\r\n              _connect_cb: function _connect_cb(bodyWrap) {\r\n                var error = this._check_streamerror(bodyWrap, Strophe$2.Status.CONNFAIL);\r\n\r\n                if (error) {\r\n                  return Strophe$2.Status.CONNFAIL;\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _handleStreamStart\r\n               * _Private_ function that checks the opening <open /> tag for errors.\r\n               *\r\n               * Disconnects if there is an error and returns false, true otherwise.\r\n               *\r\n               *  Parameters:\r\n               *    (Node) message - Stanza containing the <open /> tag.\r\n               */\r\n              _handleStreamStart: function _handleStreamStart(message) {\r\n                var error = false; // Check for errors in the <open /> tag\r\n\r\n                var ns = message.getAttribute(\"xmlns\");\r\n\r\n                if (typeof ns !== \"string\") {\r\n                  error = \"Missing xmlns in <open />\";\r\n                } else if (ns !== Strophe$2.NS.FRAMING) {\r\n                  error = \"Wrong xmlns in <open />: \" + ns;\r\n                }\r\n\r\n                var ver = message.getAttribute(\"version\");\r\n\r\n                if (typeof ver !== \"string\") {\r\n                  error = \"Missing version in <open />\";\r\n                } else if (ver !== \"1.0\") {\r\n                  error = \"Wrong version in <open />: \" + ver;\r\n                }\r\n\r\n                if (error) {\r\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, error);\r\n\r\n                  this._conn._doDisconnect();\r\n\r\n                  return false;\r\n                }\r\n\r\n                return true;\r\n              },\r\n\r\n              /** PrivateFunction: _connect_cb_wrapper\r\n               * _Private_ function that handles the first connection messages.\r\n               *\r\n               * On receiving an opening stream tag this callback replaces itself with the real\r\n               * message handler. On receiving a stream error the connection is terminated.\r\n               */\r\n              _connect_cb_wrapper: function _connect_cb_wrapper(message) {\r\n                if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\r\n                  // Strip the XML Declaration, if there is one\r\n                  var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\r\n                  if (data === '') return;\r\n                  var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\r\n\r\n                  this._conn.xmlInput(streamStart);\r\n\r\n                  this._conn.rawInput(message.data); //_handleStreamSteart will check for XML errors and disconnect on error\r\n\r\n\r\n                  if (this._handleStreamStart(streamStart)) {\r\n                    //_connect_cb will check for stream:error and disconnect on error\r\n                    this._connect_cb(streamStart);\r\n                  }\r\n                } else if (message.data.indexOf(\"<close \") === 0) {\r\n                  // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\r\n                  // Parse the raw string to an XML element\r\n                  var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement; // Report this input to the raw and xml handlers\r\n\r\n                  this._conn.xmlInput(parsedMessage);\r\n\r\n                  this._conn.rawInput(message.data);\r\n\r\n                  var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\r\n\r\n                  if (see_uri) {\r\n                    var service = this._conn.service; // Valid scenarios: WSS->WSS, WS->ANY\r\n\r\n                    var isSecureRedirect = service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0 || service.indexOf(\"ws:\") >= 0;\r\n\r\n                    if (isSecureRedirect) {\r\n                      this._conn._changeConnectStatus(Strophe$2.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\r\n\r\n                      this._conn.reset();\r\n\r\n                      this._conn.service = see_uri;\r\n\r\n                      this._connect();\r\n                    }\r\n                  } else {\r\n                    this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"Received closing stream\");\r\n\r\n                    this._conn._doDisconnect();\r\n                  }\r\n                } else {\r\n                  var string = this._streamWrap(message.data);\r\n\r\n                  var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\r\n                  this.socket.onmessage = this._onMessage.bind(this);\r\n\r\n                  this._conn._connect_cb(elem, null, message.data);\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _disconnect\r\n               *  _Private_ function called by Strophe.Connection.disconnect\r\n               *\r\n               *  Disconnects and sends a last stanza if one is given\r\n               *\r\n               *  Parameters:\r\n               *    (Request) pres - This stanza will be sent before disconnecting.\r\n               */\r\n              _disconnect: function _disconnect(pres) {\r\n                if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\r\n                  if (pres) {\r\n                    this._conn.send(pres);\r\n                  }\r\n\r\n                  var close = $build$2(\"close\", {\r\n                    \"xmlns\": Strophe$2.NS.FRAMING\r\n                  });\r\n\r\n                  this._conn.xmlOutput(close.tree());\r\n\r\n                  var closeString = Strophe$2.serialize(close);\r\n\r\n                  this._conn.rawOutput(closeString);\r\n\r\n                  try {\r\n                    this.socket.send(closeString);\r\n                  } catch (e) {\r\n                    Strophe$2.warn(\"Couldn't send <close /> tag.\");\r\n                  }\r\n                }\r\n\r\n                this._conn._doDisconnect();\r\n              },\r\n\r\n              /** PrivateFunction: _doDisconnect\r\n               *  _Private_ function to disconnect.\r\n               *\r\n               *  Just closes the Socket for WebSockets\r\n               */\r\n              _doDisconnect: function _doDisconnect() {\r\n                Strophe$2.debug(\"WebSockets _doDisconnect was called\");\r\n\r\n                this._closeSocket();\r\n              },\r\n\r\n              /** PrivateFunction _streamWrap\r\n               *  _Private_ helper function to wrap a stanza in a <stream> tag.\r\n               *  This is used so Strophe can process stanzas from WebSockets like BOSH\r\n               */\r\n              _streamWrap: function _streamWrap(stanza) {\r\n                return \"<wrapper>\" + stanza + '</wrapper>';\r\n              },\r\n\r\n              /** PrivateFunction: _closeSocket\r\n               *  _Private_ function to close the WebSocket.\r\n               *\r\n               *  Closes the socket if it is still open and deletes it\r\n               */\r\n              _closeSocket: function _closeSocket() {\r\n                if (this.socket) {\r\n                  try {\r\n                    this.socket.onclose = null;\r\n                    this.socket.onerror = null;\r\n                    this.socket.onmessage = null;\r\n                    this.socket.close();\r\n                  } catch (e) {\r\n                    Strophe$2.debug(e.message);\r\n                  }\r\n                }\r\n\r\n                this.socket = null;\r\n              },\r\n\r\n              /** PrivateFunction: _emptyQueue\r\n               * _Private_ function to check if the message queue is empty.\r\n               *\r\n               *  Returns:\r\n               *    True, because WebSocket messages are send immediately after queueing.\r\n               */\r\n              _emptyQueue: function _emptyQueue() {\r\n                return true;\r\n              },\r\n\r\n              /** PrivateFunction: _onClose\r\n               * _Private_ function to handle websockets closing.\r\n               *\r\n               * Nothing to do here for WebSockets\r\n               */\r\n              _onClose: function _onClose(e) {\r\n                if (this._conn.connected && !this._conn.disconnecting) {\r\n                  Strophe$2.error(\"Websocket closed unexpectedly\");\r\n\r\n                  this._conn._doDisconnect();\r\n                } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\r\n                  // in case the onError callback was not called (Safari 10 does not\r\n                  // call onerror when the initial connection fails) we need to\r\n                  // dispatch a CONNFAIL status update to be consistent with the\r\n                  // behavior on other browsers.\r\n                  Strophe$2.error(\"Websocket closed unexcectedly\");\r\n\r\n                  this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\r\n\r\n                  this._conn._doDisconnect();\r\n                } else {\r\n                  Strophe$2.debug(\"Websocket closed\");\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _no_auth_received\r\n               *\r\n               * Called on stream start/restart when no stream:features\r\n               * has been received.\r\n               */\r\n              _no_auth_received: function _no_auth_received(callback) {\r\n                Strophe$2.error(\"Server did not offer a supported authentication mechanism\");\r\n\r\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, Strophe$2.ErrorCondition.NO_AUTH_MECH);\r\n\r\n                if (callback) {\r\n                  callback.call(this._conn);\r\n                }\r\n\r\n                this._conn._doDisconnect();\r\n              },\r\n\r\n              /** PrivateFunction: _onDisconnectTimeout\r\n               *  _Private_ timeout handler for handling non-graceful disconnection.\r\n               *\r\n               *  This does nothing for WebSockets\r\n               */\r\n              _onDisconnectTimeout: function _onDisconnectTimeout() {},\r\n\r\n              /** PrivateFunction: _abortAllRequests\r\n               *  _Private_ helper function that makes sure all pending requests are aborted.\r\n               */\r\n              _abortAllRequests: function _abortAllRequests() {},\r\n\r\n              /** PrivateFunction: _onError\r\n               * _Private_ function to handle websockets errors.\r\n               *\r\n               * Parameters:\r\n               * (Object) error - The websocket error.\r\n               */\r\n              _onError: function _onError(error) {\r\n                Strophe$2.error(\"Websocket error \" + error);\r\n\r\n                this._conn._changeConnectStatus(Strophe$2.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\r\n\r\n                this._disconnect();\r\n              },\r\n\r\n              /** PrivateFunction: _onIdle\r\n               *  _Private_ function called by Strophe.Connection._onIdle\r\n               *\r\n               *  sends all queued stanzas\r\n               */\r\n              _onIdle: function _onIdle() {\r\n                var data = this._conn._data;\r\n\r\n                if (data.length > 0 && !this._conn.paused) {\r\n                  for (var i = 0; i < data.length; i++) {\r\n                    if (data[i] !== null) {\r\n                      var stanza = void 0;\r\n\r\n                      if (data[i] === \"restart\") {\r\n                        stanza = this._buildStream().tree();\r\n                      } else {\r\n                        stanza = data[i];\r\n                      }\r\n\r\n                      var rawStanza = Strophe$2.serialize(stanza);\r\n\r\n                      this._conn.xmlOutput(stanza);\r\n\r\n                      this._conn.rawOutput(rawStanza);\r\n\r\n                      this.socket.send(rawStanza);\r\n                    }\r\n                  }\r\n\r\n                  this._conn._data = [];\r\n                }\r\n              },\r\n\r\n              /** PrivateFunction: _onMessage\r\n               * _Private_ function to handle websockets messages.\r\n               *\r\n               * This function parses each of the messages as if they are full documents.\r\n               * [TODO : We may actually want to use a SAX Push parser].\r\n               *\r\n               * Since all XMPP traffic starts with\r\n               *  <stream:stream version='1.0'\r\n               *                 xml:lang='en'\r\n               *                 xmlns='jabber:client'\r\n               *                 xmlns:stream='http://etherx.jabber.org/streams'\r\n               *                 id='3697395463'\r\n               *                 from='SERVER'>\r\n               *\r\n               * The first stanza will always fail to be parsed.\r\n               *\r\n               * Additionally, the seconds stanza will always be <stream:features> with\r\n               * the stream NS defined in the previous stanza, so we need to 'force'\r\n               * the inclusion of the NS in this stanza.\r\n               *\r\n               * Parameters:\r\n               * (string) message - The websocket message.\r\n               */\r\n              _onMessage: function _onMessage(message) {\r\n                var elem; // check for closing stream\r\n\r\n                var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\r\n\r\n                if (message.data === close) {\r\n                  this._conn.rawInput(close);\r\n\r\n                  this._conn.xmlInput(message);\r\n\r\n                  if (!this._conn.disconnecting) {\r\n                    this._conn._doDisconnect();\r\n                  }\r\n\r\n                  return;\r\n                } else if (message.data.search(\"<open \") === 0) {\r\n                  // This handles stream restarts\r\n                  elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\r\n\r\n                  if (!this._handleStreamStart(elem)) {\r\n                    return;\r\n                  }\r\n                } else {\r\n                  var data = this._streamWrap(message.data);\r\n\r\n                  elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\r\n                }\r\n\r\n                if (this._check_streamerror(elem, Strophe$2.Status.ERROR)) {\r\n                  return;\r\n                } //handle unavailable presence stanza before disconnecting\r\n\r\n\r\n                if (this._conn.disconnecting && elem.firstChild.nodeName === \"presence\" && elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\r\n                  this._conn.xmlInput(elem);\r\n\r\n                  this._conn.rawInput(Strophe$2.serialize(elem)); // if we are already disconnecting we will ignore the unavailable stanza and\r\n                  // wait for the </stream:stream> tag before we close the connection\r\n\r\n\r\n                  return;\r\n                }\r\n\r\n                this._conn._dataRecv(elem, message.data);\r\n              },\r\n\r\n              /** PrivateFunction: _onOpen\r\n               * _Private_ function to handle websockets connection setup.\r\n               *\r\n               * The opening stream tag is sent here.\r\n               */\r\n              _onOpen: function _onOpen() {\r\n                Strophe$2.debug(\"Websocket open\");\r\n\r\n                var start = this._buildStream();\r\n\r\n                this._conn.xmlOutput(start.tree());\r\n\r\n                var startString = Strophe$2.serialize(start);\r\n\r\n                this._conn.rawOutput(startString);\r\n\r\n                this.socket.send(startString);\r\n              },\r\n\r\n              /** PrivateFunction: _reqToData\r\n               * _Private_ function to get a stanza out of a request.\r\n               *\r\n               * WebSockets don't use requests, so the passed argument is just returned.\r\n               *\r\n               *  Parameters:\r\n               *    (Object) stanza - The stanza.\r\n               *\r\n               *  Returns:\r\n               *    The stanza that was passed.\r\n               */\r\n              _reqToData: function _reqToData(stanza) {\r\n                return stanza;\r\n              },\r\n\r\n              /** PrivateFunction: _send\r\n               *  _Private_ part of the Connection.send function for WebSocket\r\n               *\r\n               * Just flushes the messages that are in the queue\r\n               */\r\n              _send: function _send() {\r\n                this._conn.flush();\r\n              },\r\n\r\n              /** PrivateFunction: _sendRestart\r\n               *\r\n               *  Send an xmpp:restart stanza.\r\n               */\r\n              _sendRestart: function _sendRestart() {\r\n                clearTimeout(this._conn._idleTimeout);\r\n\r\n                this._conn._onIdle.bind(this._conn)();\r\n              }\r\n            };\r\n\r\n            global$1.Strophe = core.Strophe;\r\n            global$1.$build = core.$build;\r\n            global$1.$iq = core.$iq;\r\n            global$1.$msg = core.$msg;\r\n            global$1.$pres = core.$pres;\r\n\r\n            return core;\r\n\r\n}));\r\n","import BrowserCapabilities from './BrowserCapabilities';\r\n\r\nexport default new BrowserCapabilities();\r\n","/**\r\n * The audio type.\r\n */\r\nexport const AUDIO = 'audio';\r\n\r\n/**\r\n * The presenter type.\r\n */\r\nexport const PRESENTER = 'presenter';\r\n\r\n/**\r\n * The video type.\r\n */\r\nexport const VIDEO = 'video';\r\n\r\nexport const MediaType = {\r\n    /**\r\n     * The audio type.\r\n     */\r\n    AUDIO : 'audio',\r\n\r\n    /**\r\n     * The presenter type.\r\n     */\r\n    PRESENTER : 'presenter',\r\n\r\n    /**\r\n     * The video type.\r\n     */\r\n    VIDEO : 'video'\r\n}\r\n","/* Copyright @ 2015-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Logger = require(\"./Logger\");\r\nvar LogCollector = require(\"./LogCollector\");\r\n\r\n/**\r\n * Definition of the log method\r\n * @name log_method\r\n * @function\r\n * @param {...*} log_args the arguments to be logged\r\n */\r\n/**\r\n * The logger's transport type definition.\r\n *\r\n * @typedef {object} LoggerTransport\r\n *\r\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\r\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\r\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\r\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\r\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\r\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\r\n */\r\n\r\n/**\r\n * Map with the created loggers with ID.\r\n */\r\nvar idLoggers = {};\r\n\r\n/**\r\n * Array with the loggers without id.\r\n */\r\nvar loggers = [];\r\n\r\n/**\r\n * Log level for the lbrary.\r\n */\r\nvar curLevel = Logger.levels.TRACE;\r\n\r\n\r\nmodule.exports = {\r\n    /**\r\n     * Adds given {@link LoggerTransport} instance to the list of global\r\n     * transports which means that it'll be used by all {@link Logger}s\r\n     * @param {LoggerTransport} transport\r\n     */\r\n    addGlobalTransport: function(transport) {\r\n        Logger.addGlobalTransport(transport);\r\n    },\r\n    /**\r\n     * Removes given {@link LoggerTransport} instance from the list of global\r\n     * transports\r\n     * @param {LoggerTransport} transport\r\n     */\r\n    removeGlobalTransport: function(transport) {\r\n        Logger.removeGlobalTransport(transport);\r\n    },\r\n    /**\r\n    * Sets global options which will be used by all loggers. Changing these\r\n    * works even after other loggers are created.\r\n    */\r\n    setGlobalOptions: function(options) {\r\n        Logger.setGlobalOptions(options);\r\n    },\r\n    /**\r\n     * Creates new logger.\r\n     * @arguments the same as Logger constructor\r\n     */\r\n    getLogger: function(id, transports, options) {\r\n        var logger = new Logger(curLevel, id, transports, options);\r\n        if(id) {\r\n            idLoggers[id] = idLoggers[id] || [];\r\n            idLoggers[id].push(logger);\r\n        } else {\r\n            loggers.push(logger);\r\n        }\r\n        return logger;\r\n    },\r\n    /**\r\n     * Changes the log level for the existing loggers by id.\r\n     * @param level the new log level.\r\n     * @param id if specified the level will be changed only for loggers with the\r\n     * same id. Otherwise the operation will affect all loggers that don't\r\n     * have id.\r\n     */\r\n    setLogLevelById: function(level, id) {\r\n        var l = id? (idLoggers[id] || []) : loggers;\r\n        for(var i = 0; i < l.length; i++) {\r\n            l[i].setLevel(level);\r\n        }\r\n    },\r\n    /**\r\n     * Changes the log level for all existing loggers.\r\n     * @param level the new log level.\r\n     */\r\n    setLogLevel: function (level) {\r\n        curLevel = level;\r\n        var i = 0;\r\n        for(; i < loggers.length; i++) {\r\n            loggers[i].setLevel(level);\r\n        }\r\n\r\n        for(var id in idLoggers) {\r\n            var l = idLoggers[id] || [];\r\n            for(i = 0; i < l.length; i++) {\r\n                l[i].setLevel(level);\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * The supported log levels.\r\n     */\r\n    levels: Logger.levels,\r\n    /**\r\n     * Exports the <tt>LogCollector</tt>.\r\n     */\r\n    LogCollector: LogCollector\r\n};\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport browser from '../browser';\r\nimport ScriptUtil from '../util/ScriptUtil';\r\n\r\nimport analytics from './AnalyticsAdapter';\r\nimport CallStats from './CallStats';\r\nimport LocalStats from './LocalStatsCollector';\r\nimport { PerformanceObserverStats } from './PerformanceObserverStats';\r\nimport RTPStats from './RTPStatsCollector';\r\nimport { CALLSTATS_SCRIPT_URL } from './constants';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * Stores all active {@link Statistics} instances.\r\n * @type {Set<Statistics>}\r\n */\r\nlet _instances;\r\n\r\n/**\r\n * True if callstats API is loaded\r\n */\r\nlet isCallstatsLoaded = false;\r\n\r\n/**\r\n * Since callstats.io is a third party, we cannot guarantee the quality of their\r\n * service. More specifically, their server may take noticeably long time to\r\n * respond. Consequently, it is in our best interest (in the sense that the\r\n * intergration of callstats.io is pretty important to us but not enough to\r\n * allow it to prevent people from joining a conference) to (1) start\r\n * downloading their API as soon as possible and (2) do the downloading\r\n * asynchronously.\r\n *\r\n * @param {StatisticsOptions} options - Options to use for downloading and\r\n * initializing callstats backend.\r\n */\r\nfunction loadCallStatsAPI(options) {\r\n    if (!isCallstatsLoaded) {\r\n        ScriptUtil.loadScript(\r\n            options.customScriptUrl || CALLSTATS_SCRIPT_URL,\r\n            /* async */ true,\r\n            /* prepend */ true,\r\n            /* relativeURL */ undefined,\r\n            /* loadCallback */ () => _initCallStatsBackend(options)\r\n        );\r\n        isCallstatsLoaded = true;\r\n    }\r\n}\r\n\r\n/**\r\n * Initializes Callstats backend.\r\n *\r\n * @param {StatisticsOptions} options - The options to use for initializing\r\n * callstats backend.\r\n * @private\r\n */\r\nfunction _initCallStatsBackend(options) {\r\n    if (CallStats.isBackendInitialized()) {\r\n        return;\r\n    }\r\n\r\n    if (!CallStats.initBackend({\r\n        callStatsID: options.callStatsID,\r\n        callStatsSecret: options.callStatsSecret,\r\n        userName: options.userName,\r\n        aliasName: options.aliasName,\r\n        applicationName: options.applicationName,\r\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\r\n        confID: options.confID,\r\n        siteID: options.siteID\r\n    })) {\r\n        logger.error('CallStats Backend initialization failed bad');\r\n    }\r\n}\r\n\r\n/**\r\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\r\n * \"message\" and \"constraintName\". So we need to bundle additional information\r\n * from JitsiTrackError into error passed to callstats to preserve valuable\r\n * information about error.\r\n * @param {JitsiTrackError} error\r\n */\r\nfunction formatJitsiTrackErrorForCallStats(error) {\r\n    const err = new Error();\r\n\r\n    // Just copy original stack from error\r\n    err.stack = error.stack;\r\n\r\n    // Combine name from error's name plus (possibly) name of original GUM error\r\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\r\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\r\n\r\n    // Put all constraints into this field. For constraint failed errors we will\r\n    // still know which exactly constraint failed as it will be a part of\r\n    // message.\r\n    err.constraintName = error.gum && error.gum.constraints\r\n        ? JSON.stringify(error.gum.constraints) : '';\r\n\r\n    // Just copy error's message.\r\n    err.message = error.message;\r\n\r\n    return err;\r\n}\r\n\r\n/**\r\n * Init statistic options\r\n * @param options\r\n */\r\nStatistics.init = function(options) {\r\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\r\n    if (typeof options.pcStatsInterval === 'number') {\r\n        Statistics.pcStatsInterval = options.pcStatsInterval;\r\n    }\r\n\r\n    if (typeof options.audioLevelsInterval === 'number') {\r\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\r\n    }\r\n\r\n    if (typeof options.longTasksStatsInterval === 'number') {\r\n        Statistics.longTasksStatsInterval = options.longTasksStatsInterval;\r\n    }\r\n\r\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\r\n};\r\n\r\n/**\r\n * The options to configure Statistics.\r\n * @typedef {Object} StatisticsOptions\r\n * @property {string} applicationName - The application name to pass to\r\n * callstats.\r\n * @property {string} aliasName - The alias name to use when initializing callstats.\r\n * @property {string} userName - The user name to use when initializing callstats.\r\n * @property {string} confID - The callstats conference ID to use.\r\n * @property {string} callStatsID - Callstats credentials - the id.\r\n * @property {string} callStatsSecret - Callstats credentials - the secret.\r\n * @property {string} customScriptUrl - A custom lib url to use when downloading\r\n * callstats library.\r\n * @property {string} roomName - The room name we are currently in.\r\n */\r\n/**\r\n *\r\n * @param xmpp\r\n * @param {StatisticsOptions} options - The options to use creating the\r\n * Statistics.\r\n */\r\nexport default function Statistics(xmpp, options) {\r\n    /**\r\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\r\n     * collect RTP statistics for each peerconnection.\r\n     * @type {Map<string, RTPStats}\r\n     */\r\n    this.rtpStatsMap = new Map();\r\n    this.eventEmitter = new EventEmitter();\r\n    this.xmpp = xmpp;\r\n    this.options = options || {};\r\n\r\n    this.callStatsIntegrationEnabled\r\n        = this.options.callStatsID && this.options.callStatsSecret && this.options.enableCallStats\r\n\r\n            // Even though AppID and AppSecret may be specified, the integration\r\n            // of callstats.io may be disabled because of globally-disallowed\r\n            // requests to any third parties.\r\n            && (Statistics.disableThirdPartyRequests !== true);\r\n    if (this.callStatsIntegrationEnabled) {\r\n        this.callStatsApplicationLogsDisabled\r\n            = this.options.callStatsApplicationLogsDisabled;\r\n        if (browser.isReactNative()) {\r\n            _initCallStatsBackend(this.options);\r\n        } else {\r\n            loadCallStatsAPI(this.options);\r\n        }\r\n\r\n        if (!this.options.confID) {\r\n            logger.warn('\"confID\" is not defined');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores {@link CallStats} instances for each\r\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\r\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\r\n     * @type {Map<number, CallStats>}\r\n     */\r\n    this.callsStatsInstances = new Map();\r\n\r\n    Statistics.instances.add(this);\r\n}\r\nStatistics.audioLevelsEnabled = false;\r\nStatistics.audioLevelsInterval = 200;\r\nStatistics.pcStatsInterval = 10000;\r\nStatistics.disableThirdPartyRequests = false;\r\nStatistics.analytics = analytics;\r\n\r\nObject.defineProperty(Statistics, 'instances', {\r\n    /**\r\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\r\n     * initializes the Set to allow any Set polyfills to be applied.\r\n     * @type {Set<Statistics>}\r\n     */\r\n    get() {\r\n        if (!_instances) {\r\n            _instances = new Set();\r\n        }\r\n\r\n        return _instances;\r\n    }\r\n});\r\n\r\n/**\r\n * Starts collecting RTP stats for given peerconnection.\r\n * @param {TraceablePeerConnection} peerconnection\r\n */\r\nStatistics.prototype.startRemoteStats = function(peerconnection) {\r\n    this.stopRemoteStats(peerconnection);\r\n\r\n    try {\r\n        const rtpStats\r\n            = new RTPStats(\r\n                peerconnection,\r\n                Statistics.audioLevelsInterval,\r\n                Statistics.pcStatsInterval,\r\n                this.eventEmitter);\r\n\r\n        rtpStats.start(Statistics.audioLevelsEnabled);\r\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\r\n    } catch (e) {\r\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\r\n    }\r\n};\r\n\r\nStatistics.localStats = [];\r\n\r\nStatistics.startLocalStats = function(stream, callback) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\r\n        callback);\r\n\r\n    this.localStats.push(localStats);\r\n    localStats.start();\r\n};\r\n\r\nStatistics.prototype.addAudioLevelListener = function(listener) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\r\n};\r\n\r\nStatistics.prototype.removeAudioLevelListener = function(listener) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\r\n};\r\n\r\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\r\n};\r\n\r\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\r\n    this.eventEmitter.removeListener(\r\n        StatisticsEvents.BEFORE_DISPOSED, listener);\r\n};\r\n\r\nStatistics.prototype.addConnectionStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(\r\n        StatisticsEvents.CONNECTION_STATS,\r\n        listener);\r\n};\r\n\r\nStatistics.prototype.addByteSentStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\r\n        listener);\r\n};\r\n\r\n/**\r\n * Add a listener that would be notified on a LONG_TASKS_STATS event.\r\n *\r\n * @param {Function} listener a function that would be called when notified.\r\n * @returns {void}\r\n */\r\nStatistics.prototype.addLongTasksStatsListener = function(listener) {\r\n    this.eventEmitter.on(StatisticsEvents.LONG_TASKS_STATS, listener);\r\n};\r\n\r\n/**\r\n * Creates an instance of {@link PerformanceObserverStats} and starts the\r\n * observer that records the stats periodically.\r\n *\r\n * @returns {void}\r\n */\r\nStatistics.prototype.attachLongTasksStats = function(conference) {\r\n    if (!browser.supportsPerformanceObserver()) {\r\n        logger.warn('Performance observer for long tasks not supported by browser!');\r\n\r\n        return;\r\n    }\r\n\r\n    this.performanceObserverStats = new PerformanceObserverStats(\r\n        this.eventEmitter,\r\n        Statistics.longTasksStatsInterval);\r\n\r\n    conference.on(\r\n        JitsiConferenceEvents.CONFERENCE_JOINED,\r\n        () => this.performanceObserverStats.startObserver());\r\n    conference.on(\r\n        JitsiConferenceEvents.CONFERENCE_LEFT,\r\n        () => this.performanceObserverStats.stopObserver());\r\n};\r\n\r\n/**\r\n * Obtains the current value of the LongTasks event statistics.\r\n *\r\n * @returns {Object|null} stats object if the observer has been\r\n * created, null otherwise.\r\n */\r\nStatistics.prototype.getLongTasksStats = function() {\r\n    return this.performanceObserverStats\r\n        ? this.performanceObserverStats.getLongTasksStats()\r\n        : null;\r\n};\r\n\r\n/**\r\n * Removes the given listener for the LONG_TASKS_STATS event.\r\n *\r\n * @param {Function} listener the listener we want to remove.\r\n * @returns {void}\r\n */\r\nStatistics.prototype.removeLongTasksStatsListener = function(listener) {\r\n    this.eventEmitter.removeListener(StatisticsEvents.LONG_TASKS_STATS, listener);\r\n};\r\n\r\nStatistics.prototype.dispose = function() {\r\n    try {\r\n        // NOTE Before reading this please see the comment in stopCallStats...\r\n        //\r\n        // Here we prevent from emitting the event twice in case it will be\r\n        // triggered from stopCallStats.\r\n        // If the event is triggered from here it means that the logs will not\r\n        // be submitted anyway (because there is no CallStats instance), but\r\n        // we're doing that for the sake of some kind of consistency.\r\n        if (!this.callsStatsInstances.size) {\r\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\r\n        }\r\n        for (const callStats of this.callsStatsInstances.values()) {\r\n            this.stopCallStats(callStats.tpc);\r\n        }\r\n        for (const tpcId of this.rtpStatsMap.keys()) {\r\n            this._stopRemoteStats(tpcId);\r\n        }\r\n        if (this.eventEmitter) {\r\n            this.eventEmitter.removeAllListeners();\r\n        }\r\n    } finally {\r\n        Statistics.instances.delete(this);\r\n    }\r\n};\r\n\r\nStatistics.stopLocalStats = function(stream) {\r\n    if (!Statistics.audioLevelsEnabled) {\r\n        return;\r\n    }\r\n\r\n    for (let i = 0; i < Statistics.localStats.length; i++) {\r\n        if (Statistics.localStats[i].stream === stream) {\r\n            const localStats = Statistics.localStats.splice(i, 1);\r\n\r\n            localStats[0].stop();\r\n            break;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Stops remote RTP stats for given peerconnection ID.\r\n * @param {string} tpcId {@link TraceablePeerConnection.id}\r\n * @private\r\n */\r\nStatistics.prototype._stopRemoteStats = function(tpcId) {\r\n    const rtpStats = this.rtpStatsMap.get(tpcId);\r\n\r\n    if (rtpStats) {\r\n        rtpStats.stop();\r\n        this.rtpStatsMap.delete(tpcId);\r\n    }\r\n};\r\n\r\n/**\r\n * Stops collecting RTP stats for given peerconnection\r\n * @param {TraceablePeerConnection} tpc\r\n */\r\nStatistics.prototype.stopRemoteStats = function(tpc) {\r\n    this._stopRemoteStats(tpc.id);\r\n};\r\n\r\n// CALSTATS METHODS\r\n\r\n/**\r\n * Initializes the callstats.io API.\r\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\r\n * instance for which CalStats will be started.\r\n * @param {string} remoteUserID\r\n */\r\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\r\n    if (!this.callStatsIntegrationEnabled) {\r\n        return;\r\n    } else if (this.callsStatsInstances.has(tpc.id)) {\r\n        logger.error('CallStats instance for ${tpc} exists already');\r\n\r\n        return;\r\n    }\r\n\r\n    logger.info(`Starting CallStats for ${tpc}...`);\r\n\r\n    const newInstance\r\n        = new CallStats(\r\n            tpc,\r\n            {\r\n                confID: this.options.confID,\r\n                remoteUserID\r\n            });\r\n\r\n    this.callsStatsInstances.set(tpc.id, newInstance);\r\n};\r\n\r\n/**\r\n * Obtains the list of *all* {@link CallStats} instances collected from every\r\n * valid {@link Statistics} instance.\r\n * @return {Set<CallStats>}\r\n * @private\r\n */\r\nStatistics._getAllCallStatsInstances = function() {\r\n    const csInstances = new Set();\r\n\r\n    for (const statistics of Statistics.instances) {\r\n        for (const cs of statistics.callsStatsInstances.values()) {\r\n            csInstances.add(cs);\r\n        }\r\n    }\r\n\r\n    return csInstances;\r\n};\r\n\r\n/**\r\n * Removes the callstats.io instances.\r\n */\r\nStatistics.prototype.stopCallStats = function(tpc) {\r\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (callStatsInstance) {\r\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\r\n        // able to submit the last log batch from jitsi-meet to CallStats. After\r\n        // recent changes we dispose the CallStats earlier\r\n        // (before Statistics.dispose), so we need to emit this event here to\r\n        // give this last chance for final log batch submission.\r\n        //\r\n        // Eventually there should be a separate module called \"log storage\"\r\n        // which should emit proper events when it's underlying\r\n        // CallStats instance is going away.\r\n        if (this.callsStatsInstances.size === 1) {\r\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\r\n        }\r\n        this.callsStatsInstances.delete(tpc.id);\r\n\r\n        // The fabric needs to be terminated when being stopped\r\n        callStatsInstance.sendTerminateEvent();\r\n    }\r\n};\r\n\r\n/**\r\n * Returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n *\r\n * @returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n */\r\nStatistics.prototype.isCallstatsEnabled = function() {\r\n    return this.callStatsIntegrationEnabled;\r\n};\r\n\r\n/**\r\n * Logs either resume or hold event for the given peer connection.\r\n * @param {TraceablePeerConnection} tpc the connection for which event will be\r\n * reported\r\n * @param {boolean} isResume true for resume or false for hold\r\n */\r\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendResumeOrHoldEvent(isResume);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats and analytics (if present) for ice connection failed\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendIceConnectionFailedEvent();\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats for mute events\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n * @param {boolean} muted true for muted and false for not muted\r\n * @param {String} type \"audio\"/\"video\"\r\n */\r\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\r\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\r\n\r\n    CallStats.sendMuteEvent(muted, type, instance);\r\n};\r\n\r\n/**\r\n * Notifies CallStats for screen sharing events\r\n * @param start {boolean} true for starting screen sharing and\r\n * false for not stopping\r\n * @param {string|null} ssrc - optional ssrc value, used only when\r\n * starting screen sharing.\r\n */\r\nStatistics.prototype.sendScreenSharingEvent\r\n    = function(start, ssrc) {\r\n        for (const cs of this.callsStatsInstances.values()) {\r\n            cs.sendScreenSharingEvent(start, ssrc);\r\n        }\r\n    };\r\n\r\n/**\r\n * Notifies the statistics module that we are now the dominant speaker of the\r\n * conference.\r\n * @param {String} roomJid - The room jid where the speaker event occurred.\r\n */\r\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\r\n    for (const cs of this.callsStatsInstances.values()) {\r\n        cs.sendDominantSpeakerEvent();\r\n    }\r\n\r\n    // xmpp send dominant speaker event\r\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\r\n};\r\n\r\n/**\r\n * Notifies about active device.\r\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\r\n *      their data\r\n */\r\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\r\n    const globalSet = Statistics._getAllCallStatsInstances();\r\n\r\n    if (globalSet.size) {\r\n        for (const cs of globalSet) {\r\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\r\n        }\r\n    } else {\r\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\r\n    }\r\n};\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Lets the underlying statistics module know where is given SSRC rendered by\r\n * providing renderer tag ID.\r\n * @param {TraceablePeerConnection} tpc the connection to which the stream\r\n * belongs to\r\n * @param {number} ssrc the SSRC of the stream\r\n * @param {boolean} isLocal\r\n * @param {string} userId\r\n * @param {string} usageLabel  meaningful usage label of this stream like\r\n *        'microphone', 'camera' or 'screen'.\r\n * @param {string} containerId the id of media 'audio' or 'video' tag which\r\n *        renders the stream.\r\n */\r\nStatistics.prototype.associateStreamWithVideoTag = function(\r\n        tpc,\r\n        ssrc,\r\n        isLocal,\r\n        userId,\r\n        usageLabel,\r\n        containerId) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.associateStreamWithVideoTag(\r\n            ssrc,\r\n            isLocal,\r\n            userId,\r\n            usageLabel,\r\n            containerId);\r\n    }\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Notifies CallStats that getUserMedia failed.\r\n *\r\n * @param {Error} e error to send\r\n */\r\nStatistics.sendGetUserMediaFailed = function(e) {\r\n    const error\r\n        = e instanceof JitsiTrackError\r\n            ? formatJitsiTrackErrorForCallStats(e) : e;\r\n    const globalSet = Statistics._getAllCallStatsInstances();\r\n\r\n    if (globalSet.size) {\r\n        for (const cs of globalSet) {\r\n            CallStats.sendGetUserMediaFailed(error, cs);\r\n        }\r\n    } else {\r\n        CallStats.sendGetUserMediaFailed(error, null);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to create offer.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendCreateOfferFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to create answer.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\r\n */\r\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendCreateAnswerFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to set local description.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendSetLocalDescFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to set remote description.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendSetRemoteDescFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies CallStats that peer connection failed to add ICE candidate.\r\n *\r\n * @param {Error} e error to send\r\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\r\n */\r\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\r\n    const instance = this.callsStatsInstances.get(tpc.id);\r\n\r\n    if (instance) {\r\n        instance.sendAddIceCandidateFailed(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Adds to CallStats an application log.\r\n *\r\n * @param {String} m a log message to send or an {Error} object to be reported\r\n */\r\nStatistics.sendLog = function(m) {\r\n    const globalSubSet = new Set();\r\n\r\n    // FIXME we don't want to duplicate logs over P2P instance, but\r\n    // here we should go over instances and call this method for each\r\n    // unique conference ID rather than selecting the first one.\r\n    // We don't have such use case though, so leaving as is for now.\r\n    for (const stats of Statistics.instances) {\r\n        if (stats.callStatsApplicationLogsDisabled) {\r\n            return;\r\n        }\r\n\r\n        if (stats.callsStatsInstances.size) {\r\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\r\n        }\r\n    }\r\n\r\n    if (globalSubSet.size) {\r\n        for (const csPerStats of globalSubSet) {\r\n            CallStats.sendApplicationLog(m, csPerStats);\r\n        }\r\n    } else {\r\n        CallStats.sendApplicationLog(m, null);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends the given feedback through CallStats.\r\n *\r\n * @param overall an integer between 1 and 5 indicating the user's rating.\r\n * @param comment the comment from the user.\r\n * @returns {Promise} Resolves when callstats feedback has been submitted\r\n * successfully.\r\n */\r\nStatistics.prototype.sendFeedback = function(overall, comment) {\r\n    // Statistics.analytics.sendEvent is currently fire and forget, without\r\n    // confirmation of successful send.\r\n    Statistics.analytics.sendEvent(\r\n        FEEDBACK,\r\n        {\r\n            rating: overall,\r\n            comment\r\n        });\r\n\r\n    return CallStats.sendFeedback(this.options.confID, overall, comment);\r\n};\r\n\r\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\r\n\r\n/**\r\n * Reports global error to CallStats.\r\n *\r\n * @param {Error} error\r\n */\r\nStatistics.reportGlobalError = function(error) {\r\n    if (error instanceof JitsiTrackError && error.gum) {\r\n        Statistics.sendGetUserMediaFailed(error);\r\n    } else {\r\n        Statistics.sendLog(error);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends event to analytics and logs a message to the logger/console. Console\r\n * messages might also be logged to callstats automatically.\r\n *\r\n * @param {string | Object} event the event name, or an object which\r\n * represents the entire event.\r\n * @param {Object} properties properties to attach to the event (if an event\r\n * name as opposed to an event object is provided).\r\n */\r\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\r\n    if (!event) {\r\n        logger.warn('No event or event name given.');\r\n\r\n        return;\r\n    }\r\n\r\n    let eventToLog;\r\n\r\n    // Also support an API with a single object as an event.\r\n    if (typeof event === 'object') {\r\n        eventToLog = event;\r\n    } else {\r\n        eventToLog = {\r\n            name: event,\r\n            properties\r\n        };\r\n    }\r\n\r\n    logger.log(JSON.stringify(eventToLog));\r\n\r\n    // We do this last, because it may modify the object which is passed.\r\n    this.analytics.sendEvent(event, properties);\r\n};\r\n\r\n/**\r\n * Sends event to analytics.\r\n *\r\n * @param {string | Object} eventName the event name, or an object which\r\n * represents the entire event.\r\n * @param {Object} properties properties to attach to the event\r\n */\r\nStatistics.sendAnalytics = function(eventName, properties = {}) {\r\n    this.analytics.sendEvent(eventName, properties);\r\n};\r\n","export const RTCEvents = {\r\n    /**\r\n     * Indicates error while create answer call.\r\n     */\r\n    CREATE_ANSWER_FAILED : 'rtc.create_answer_failed',\r\n\r\n    /**\r\n     * Indicates error while create offer call.\r\n     */\r\n    CREATE_OFFER_FAILED : 'rtc.create_offer_failed',\r\n    DATA_CHANNEL_OPEN : 'rtc.data_channel_open',\r\n    ENDPOINT_CONN_STATUS_CHANGED : 'rtc.endpoint_conn_status_changed',\r\n    DOMINANT_SPEAKER_CHANGED : 'rtc.dominant_speaker_changed',\r\n    LASTN_ENDPOINT_CHANGED : 'rtc.lastn_endpoint_changed',\r\n    FORWARDED_SOURCES_CHANGED : 'rtc.forwarded_sources_changed',\r\n\r\n    /**\r\n     * Event emitted when the user granted/blocked a permission for the camera / mic.\r\n     * Used to keep track of the granted permissions on browsers which don't\r\n     * support the Permissions API.\r\n     */\r\n    PERMISSIONS_CHANGED : 'rtc.permissions_changed',\r\n\r\n    SENDER_VIDEO_CONSTRAINTS_CHANGED : 'rtc.sender_video_constraints_changed',\r\n\r\n    /**\r\n     * Event emitted when {@link RTC.setLastN} method is called to update with\r\n     * the new value set.\r\n     * The first argument is the value passed to {@link RTC.setLastN}.\r\n     */\r\n    LASTN_VALUE_CHANGED : 'rtc.lastn_value_changed',\r\n\r\n    /**\r\n     * Event emitted when ssrc for a local track is extracted and stored\r\n     * in {@link TraceablePeerConnection}.\r\n     * @param {JitsiLocalTrack} track which ssrc was updated\r\n     * @param {string} ssrc that was stored\r\n     */\r\n    LOCAL_TRACK_SSRC_UPDATED : 'rtc.local_track_ssrc_updated',\r\n\r\n    /**\r\n     * The max enabled resolution of a local video track was changed.\r\n     */\r\n    LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED : 'rtc.local_track_max_enabled_resolution_changed',\r\n\r\n    TRACK_ATTACHED : 'rtc.track_attached',\r\n\r\n    /**\r\n     * Event fired when we remote track is added to the conference.\r\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\r\n     **/\r\n    REMOTE_TRACK_ADDED : 'rtc.remote_track_added',\r\n\r\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\r\n    // (currently implemented for local tracks only)\r\n    REMOTE_TRACK_MUTE : 'rtc.remote_track_mute',\r\n\r\n    /**\r\n     * Indicates that the remote track has been removed from the conference.\r\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\r\n     */\r\n    REMOTE_TRACK_REMOVED : 'rtc.remote_track_removed',\r\n\r\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\r\n    // (currently implemented for local tracks only)\r\n    REMOTE_TRACK_UNMUTE : 'rtc.remote_track_unmute',\r\n\r\n    /**\r\n     * Indicates error while set local description.\r\n     */\r\n    SET_LOCAL_DESCRIPTION_FAILED : 'rtc.set_local_description_failed',\r\n\r\n    /**\r\n     * Indicates error while set remote description.\r\n     */\r\n    SET_REMOTE_DESCRIPTION_FAILED : 'rtc.set_remote_description_failed',\r\n    AUDIO_OUTPUT_DEVICE_CHANGED : 'rtc.audio_output_device_changed',\r\n    DEVICE_LIST_CHANGED : 'rtc.device_list_changed',\r\n\r\n    /**\r\n     * Indicates that the list with available devices will change.\r\n     */\r\n    DEVICE_LIST_WILL_CHANGE : 'rtc.device_list_will_change',\r\n    DEVICE_LIST_AVAILABLE : 'rtc.device_list_available',\r\n\r\n    /**\r\n     * Indicates that a message from another participant is received on\r\n     * data channel.\r\n     */\r\n    ENDPOINT_MESSAGE_RECEIVED : 'rtc.endpoint_message_received',\r\n\r\n    /**\r\n     * Indicates that the remote endpoint stats have been received on data channel.\r\n     */\r\n    ENDPOINT_STATS_RECEIVED : 'rtc.endpoint_stats_received',\r\n\r\n    /**\r\n     * Designates an event indicating that the local ICE username fragment of\r\n     * the jingle session has changed.\r\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\r\n     * is the source of the event.\r\n     * The second argument is the actual \"ufrag\" string.\r\n     */\r\n    LOCAL_UFRAG_CHANGED : 'rtc.local_ufrag_changed',\r\n\r\n    /**\r\n     * Designates an event indicating that the local ICE username fragment of\r\n     * the jingle session has changed.\r\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\r\n     * is the source of the event.\r\n     * The second argument is the actual \"ufrag\" string.\r\n     */\r\n    REMOTE_UFRAG_CHANGED : 'rtc.remote_ufrag_changed'\r\n};\r\n\r\nexport const CREATE_ANSWER_FAILED = RTCEvents.CREATE_ANSWER_FAILED;\r\nexport const CREATE_OFFER_FAILED = RTCEvents.CREATE_OFFER_FAILED;\r\nexport const DATA_CHANNEL_OPEN = RTCEvents.DATA_CHANNEL_OPEN;\r\nexport const ENDPOINT_CONN_STATUS_CHANGED = RTCEvents.ENDPOINT_CONN_STATUS_CHANGED;\r\nexport const DOMINANT_SPEAKER_CHANGED = RTCEvents.DOMINANT_SPEAKER_CHANGED;\r\nexport const LASTN_ENDPOINT_CHANGED = RTCEvents.LASTN_ENDPOINT_CHANGED;\r\nexport const FORWARDED_SOURCES_CHANGED = RTCEvents.FORWARDED_SOURCES_CHANGED;\r\nexport const PERMISSIONS_CHANGED = RTCEvents.PERMISSIONS_CHANGED;\r\nexport const SENDER_VIDEO_CONSTRAINTS_CHANGED = RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED;\r\nexport const LASTN_VALUE_CHANGED = RTCEvents.LASTN_VALUE_CHANGED;\r\nexport const LOCAL_TRACK_SSRC_UPDATED = RTCEvents.LOCAL_TRACK_SSRC_UPDATED;\r\nexport const LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED = RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED;\r\nexport const TRACK_ATTACHED = RTCEvents.TRACK_ATTACHED;\r\nexport const REMOTE_TRACK_ADDED = RTCEvents.REMOTE_TRACK_ADDED;\r\nexport const REMOTE_TRACK_MUTE = RTCEvents.REMOTE_TRACK_MUTE;\r\nexport const REMOTE_TRACK_REMOVED = RTCEvents.REMOTE_TRACK_REMOVED;\r\nexport const REMOTE_TRACK_UNMUTE = RTCEvents.REMOTE_TRACK_UNMUTE;\r\nexport const SET_LOCAL_DESCRIPTION_FAILED = RTCEvents.SET_LOCAL_DESCRIPTION_FAILED;\r\nexport const SET_REMOTE_DESCRIPTION_FAILED = RTCEvents.SET_REMOTE_DESCRIPTION_FAILED;\r\nexport const AUDIO_OUTPUT_DEVICE_CHANGED = RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED;\r\nexport const DEVICE_LIST_CHANGED = RTCEvents.DEVICE_LIST_CHANGED;\r\nexport const DEVICE_LIST_WILL_CHANGE = RTCEvents.DEVICE_LIST_WILL_CHANGE;\r\nexport const DEVICE_LIST_AVAILABLE = RTCEvents.DEVICE_LIST_AVAILABLE;\r\nexport const ENDPOINT_MESSAGE_RECEIVED = RTCEvents.ENDPOINT_MESSAGE_RECEIVED;\r\nexport const ENDPOINT_STATS_RECEIVED = RTCEvents.ENDPOINT_STATS_RECEIVED;\r\nexport const LOCAL_UFRAG_CHANGED = RTCEvents.LOCAL_UFRAG_CHANGED;\r\nexport const REMOTE_UFRAG_CHANGED = RTCEvents.REMOTE_UFRAG_CHANGED;\r\n\r\n// TODO: this was a pre-ES6 module using module.exports = RTCEvents which doesn't translate well\r\n// it is used in a number of places and should be updated to use the named export\r\n\r\nexport default RTCEvents;","import { getLogger } from 'jitsi-meet-logger';\r\nconst logger = getLogger(__filename);\r\n\r\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport browser from '../browser';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nconst SDPUtil = {\r\n    filterSpecialChars(text) {\r\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\r\n        // \"\", etc.) \"contain\" special chars.\r\n        // eslint-disable-next-line no-useless-escape\r\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\r\n    },\r\n    iceparams(mediadesc, sessiondesc) {\r\n        let data = null;\r\n        let pwd, ufrag;\r\n\r\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\r\n                && (pwd\r\n                    = SDPUtil.findLine(\r\n                        mediadesc,\r\n                        'a=ice-pwd:',\r\n                        sessiondesc))) {\r\n            data = {\r\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\r\n                pwd: SDPUtil.parseICEPwd(pwd)\r\n            };\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseICEUfrag(line) {\r\n        return line.substring(12);\r\n    },\r\n    buildICEUfrag(frag) {\r\n        return `a=ice-ufrag:${frag}`;\r\n    },\r\n    parseICEPwd(line) {\r\n        return line.substring(10);\r\n    },\r\n    buildICEPwd(pwd) {\r\n        return `a=ice-pwd:${pwd}`;\r\n    },\r\n    parseMID(line) {\r\n        return line.substring(6);\r\n    },\r\n    /**\r\n     * Finds the MSID attribute in the given array of SSRC attribute lines and returns the value.\r\n     *\r\n     * @param {string[]} ssrcLines - an array of lines similar to 'a:213123 msid:stream-id track-id'.\r\n     * @returns {undefined|string}\r\n     */\r\n     parseMSIDAttribute(ssrcLines) {\r\n        const msidLine = ssrcLines.find(line => line.indexOf(' msid:') > 0);\r\n\r\n        if (!msidLine) {\r\n            return undefined;\r\n        }\r\n\r\n        const v = msidLine.substring(msidLine.indexOf(' msid:') + 6 /* the length of ' msid:' */);\r\n\r\n        return SDPUtil.filterSpecialChars(v);\r\n    },\r\n    parseMLine(line) {\r\n        const data = {};\r\n        const parts = line.substring(2).split(' ');\r\n\r\n        data.media = parts.shift();\r\n        data.port = parts.shift();\r\n        data.proto = parts.shift();\r\n        if (parts[parts.length - 1] === '') { // trailing whitespace\r\n            parts.pop();\r\n        }\r\n        data.fmt = parts;\r\n\r\n        return data;\r\n    },\r\n    buildMLine(mline) {\r\n        return (\r\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\r\n                mline.fmt.join(' ')}`);\r\n    },\r\n    parseRTPMap(line) {\r\n        const data = {};\r\n        let parts = line.substring(9).split(' ');\r\n\r\n        data.id = parts.shift();\r\n        parts = parts[0].split('/');\r\n        data.name = parts.shift();\r\n        data.clockrate = parts.shift();\r\n        data.channels = parts.length ? parts.shift() : '1';\r\n\r\n        return data;\r\n    },\r\n\r\n    /**\r\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\r\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\r\n     * @returns [SCTP port number, protocol, streams]\r\n     */\r\n    parseSCTPMap(line) {\r\n        const parts = line.substring(10).split(' ');\r\n        const sctpPort = parts[0];\r\n        const protocol = parts[1];\r\n\r\n        // Stream count is optional\r\n        const streamCount = parts.length > 2 ? parts[2] : null;\r\n\r\n\r\n        return [ sctpPort, protocol, streamCount ];// SCTP port\r\n    },\r\n    parseSCTPPort(line) {\r\n        return line.substring(12);\r\n    },\r\n    buildRTPMap(el) {\r\n        let line\r\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\r\n                el.getAttribute('clockrate')}`;\r\n\r\n        if (el.getAttribute('channels')\r\n            && el.getAttribute('channels') !== '1') {\r\n            line += `/${el.getAttribute('channels')}`;\r\n        }\r\n\r\n        return line;\r\n    },\r\n    parseCrypto(line) {\r\n        const data = {};\r\n        const parts = line.substring(9).split(' ');\r\n\r\n        data.tag = parts.shift();\r\n        data['crypto-suite'] = parts.shift();\r\n        data['key-params'] = parts.shift();\r\n        if (parts.length) {\r\n            data['session-params'] = parts.join(' ');\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseFingerprint(line) { // RFC 4572\r\n        const data = {};\r\n        const parts = line.substring(14).split(' ');\r\n\r\n        data.hash = parts.shift();\r\n        data.fingerprint = parts.shift();\r\n\r\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\r\n        return data;\r\n    },\r\n    parseFmtp(line) {\r\n        const data = [];\r\n        let parts = line.split(' ');\r\n\r\n        parts.shift();\r\n        parts = parts.join(' ').split(';');\r\n        for (let i = 0; i < parts.length; i++) {\r\n            let key = parts[i].split('=')[0];\r\n\r\n            while (key.length && key[0] === ' ') {\r\n                key = key.substring(1);\r\n            }\r\n            const value = parts[i].split('=')[1];\r\n\r\n            if (key && value) {\r\n                data.push({ name: key,\r\n                    value });\r\n            } else if (key) {\r\n                // rfc 4733 (DTMF) style stuff\r\n                data.push({ name: '',\r\n                    value: key });\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    parseICECandidate(line) {\r\n        const candidate = {};\r\n        const elems = line.split(' ');\r\n\r\n        candidate.foundation = elems[0].substring(12);\r\n        candidate.component = elems[1];\r\n        candidate.protocol = elems[2].toLowerCase();\r\n        candidate.priority = elems[3];\r\n        candidate.ip = elems[4];\r\n        candidate.port = elems[5];\r\n\r\n        // elems[6] => \"typ\"\r\n        candidate.type = elems[7];\r\n        candidate.generation = 0; // default value, may be overwritten below\r\n        for (let i = 8; i < elems.length; i += 2) {\r\n            switch (elems[i]) {\r\n            case 'raddr':\r\n                candidate['rel-addr'] = elems[i + 1];\r\n                break;\r\n            case 'rport':\r\n                candidate['rel-port'] = elems[i + 1];\r\n                break;\r\n            case 'generation':\r\n                candidate.generation = elems[i + 1];\r\n                break;\r\n            case 'tcptype':\r\n                candidate.tcptype = elems[i + 1];\r\n                break;\r\n            default: // TODO\r\n                logger.log(\r\n                    `parseICECandidate not translating \"${\r\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\r\n            }\r\n        }\r\n        candidate.network = '1';\r\n\r\n        // not applicable to SDP -- FIXME: should be unique, not just random\r\n        // eslint-disable-next-line newline-per-chained-call\r\n        candidate.id = Math.random().toString(36).substr(2, 10);\r\n\r\n        return candidate;\r\n    },\r\n    buildICECandidate(cand) {\r\n        let line = [\r\n            `a=candidate:${cand.foundation}`,\r\n            cand.component,\r\n            cand.protocol,\r\n            cand.priority,\r\n            cand.ip,\r\n            cand.port,\r\n            'typ',\r\n            cand.type\r\n        ].join(' ');\r\n\r\n        line += ' ';\r\n        switch (cand.type) {\r\n        case 'srflx':\r\n        case 'prflx':\r\n        case 'relay':\r\n            if (cand.hasOwnAttribute('rel-addr')\r\n                    && cand.hasOwnAttribute('rel-port')) {\r\n                line += 'raddr';\r\n                line += ' ';\r\n                line += cand['rel-addr'];\r\n                line += ' ';\r\n                line += 'rport';\r\n                line += ' ';\r\n                line += cand['rel-port'];\r\n                line += ' ';\r\n            }\r\n            break;\r\n        }\r\n        if (cand.hasOwnAttribute('tcptype')) {\r\n            line += 'tcptype';\r\n            line += ' ';\r\n            line += cand.tcptype;\r\n            line += ' ';\r\n        }\r\n        line += 'generation';\r\n        line += ' ';\r\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\r\n\r\n        return line;\r\n    },\r\n    parseSSRC(desc) {\r\n        // proprietary mapping of a=ssrc lines\r\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\r\n        // on google docs and parse according to that\r\n        const data = new Map();\r\n        const lines = desc.split('\\r\\n');\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\r\n                // FIXME: Use regex to smartly find the ssrc.\r\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\r\n\r\n                if (!data.get(ssrc)) {\r\n                    data.set(ssrc, []);\r\n                }\r\n\r\n                data.get(ssrc).push(lines[i]);\r\n            }\r\n        }\r\n\r\n        return data;\r\n    },\r\n    /**\r\n     * Gets the source name out of the name attribute \"a=ssrc:254321 name:name1\".\r\n     *\r\n     * @param {string[]} ssrcLines\r\n     * @returns {string | undefined}\r\n     */\r\n     parseSourceNameLine(ssrcLines) {\r\n        const sourceNameLine = ssrcLines.find(ssrcSdpLine => ssrcSdpLine.indexOf(' name:') > 0);\r\n\r\n        // Everything past the \"name:\" part\r\n        return sourceNameLine?.substring(sourceNameLine.indexOf(' name:') + 6);\r\n    },\r\n    parseRTCPFB(line) {\r\n        const parts = line.substr(10).split(' ');\r\n        const data = {};\r\n\r\n        data.pt = parts.shift();\r\n        data.type = parts.shift();\r\n        data.params = parts;\r\n\r\n        return data;\r\n    },\r\n    parseExtmap(line) {\r\n        const parts = line.substr(9).split(' ');\r\n        const data = {};\r\n\r\n        data.value = parts.shift();\r\n        if (data.value.indexOf('/') === -1) {\r\n            data.direction = 'both';\r\n        } else {\r\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\r\n            data.value = data.value.substr(0, data.value.indexOf('/'));\r\n        }\r\n        data.uri = parts.shift();\r\n        data.params = parts;\r\n\r\n        return data;\r\n    },\r\n    findLine(haystack, needle, sessionpart) {\r\n        let lines = haystack.split('\\r\\n');\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, needle.length) === needle) {\r\n                return lines[i];\r\n            }\r\n        }\r\n        if (!sessionpart) {\r\n            return false;\r\n        }\r\n\r\n        // search session part\r\n        lines = sessionpart.split('\\r\\n');\r\n        for (let j = 0; j < lines.length; j++) {\r\n            if (lines[j].substring(0, needle.length) === needle) {\r\n                return lines[j];\r\n            }\r\n        }\r\n\r\n        return false;\r\n    },\r\n    findLines(haystack, needle, sessionpart) {\r\n        let lines = haystack.split('\\r\\n');\r\n        const needles = [];\r\n\r\n        for (let i = 0; i < lines.length; i++) {\r\n            if (lines[i].substring(0, needle.length) === needle) {\r\n                needles.push(lines[i]);\r\n            }\r\n        }\r\n        if (needles.length || !sessionpart) {\r\n            return needles;\r\n        }\r\n\r\n        // search session part\r\n        lines = sessionpart.split('\\r\\n');\r\n        for (let j = 0; j < lines.length; j++) {\r\n            if (lines[j].substring(0, needle.length) === needle) {\r\n                needles.push(lines[j]);\r\n            }\r\n        }\r\n\r\n        return needles;\r\n    },\r\n    candidateToJingle(line) {\r\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\r\n        // generation 0\r\n        //      <candidate component=... foundation=... generation=... id=...\r\n        // ip=... network=... port=... priority=... protocol=... type=.../>\r\n        if (line.indexOf('candidate:') === 0) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            line = `a=${line}`;\r\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\r\n            logger.log(\r\n                'parseCandidate called with a line that is not a candidate'\r\n                    + ' line');\r\n            logger.log(line);\r\n\r\n            return null;\r\n        }\r\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\r\n            // eslint-disable-next-line no-param-reassign\r\n            line = line.substring(0, line.length - 2);\r\n        }\r\n        const candidate = {};\r\n        const elems = line.split(' ');\r\n\r\n        if (elems[6] !== 'typ') {\r\n            logger.log('did not find typ in the right place');\r\n            logger.log(line);\r\n\r\n            return null;\r\n        }\r\n        candidate.foundation = elems[0].substring(12);\r\n        candidate.component = elems[1];\r\n        candidate.protocol = elems[2].toLowerCase();\r\n        candidate.priority = elems[3];\r\n        candidate.ip = elems[4];\r\n        candidate.port = elems[5];\r\n\r\n        // elems[6] => \"typ\"\r\n        candidate.type = elems[7];\r\n\r\n        candidate.generation = '0'; // default, may be overwritten below\r\n        for (let i = 8; i < elems.length; i += 2) {\r\n            switch (elems[i]) {\r\n            case 'raddr':\r\n                candidate['rel-addr'] = elems[i + 1];\r\n                break;\r\n            case 'rport':\r\n                candidate['rel-port'] = elems[i + 1];\r\n                break;\r\n            case 'generation':\r\n                candidate.generation = elems[i + 1];\r\n                break;\r\n            case 'tcptype':\r\n                candidate.tcptype = elems[i + 1];\r\n                break;\r\n            default: // TODO\r\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\r\n            }\r\n        }\r\n        candidate.network = '1';\r\n\r\n        // not applicable to SDP -- FIXME: should be unique, not just random\r\n        // eslint-disable-next-line newline-per-chained-call\r\n        candidate.id = Math.random().toString(36).substr(2, 10);\r\n\r\n        return candidate;\r\n    },\r\n    candidateFromJingle(cand) {\r\n        let line = 'a=candidate:';\r\n\r\n        line += cand.getAttribute('foundation');\r\n        line += ' ';\r\n        line += cand.getAttribute('component');\r\n        line += ' ';\r\n\r\n        let protocol = cand.getAttribute('protocol');\r\n\r\n        // use tcp candidates for FF\r\n\r\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\r\n            protocol = 'tcp';\r\n        }\r\n\r\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\r\n        line += ' ';\r\n        line += cand.getAttribute('priority');\r\n        line += ' ';\r\n        line += cand.getAttribute('ip');\r\n        line += ' ';\r\n        line += cand.getAttribute('port');\r\n        line += ' ';\r\n        line += 'typ';\r\n        line += ` ${cand.getAttribute('type')}`;\r\n        line += ' ';\r\n        switch (cand.getAttribute('type')) {\r\n        case 'srflx':\r\n        case 'prflx':\r\n        case 'relay':\r\n            if (cand.getAttribute('rel-addr')\r\n                    && cand.getAttribute('rel-port')) {\r\n                line += 'raddr';\r\n                line += ' ';\r\n                line += cand.getAttribute('rel-addr');\r\n                line += ' ';\r\n                line += 'rport';\r\n                line += ' ';\r\n                line += cand.getAttribute('rel-port');\r\n                line += ' ';\r\n            }\r\n            break;\r\n        }\r\n        if (protocol.toLowerCase() === 'tcp') {\r\n            line += 'tcptype';\r\n            line += ' ';\r\n            line += cand.getAttribute('tcptype');\r\n            line += ' ';\r\n        }\r\n        line += 'generation';\r\n        line += ' ';\r\n        line += cand.getAttribute('generation') || '0';\r\n\r\n        return `${line}\\r\\n`;\r\n    },\r\n\r\n    /**\r\n     * Parse the 'most' primary video ssrc from the given m line\r\n     * @param {object} mLine object as parsed from transform.parse\r\n     * @return {number} the primary video ssrc from the given m line\r\n     */\r\n    parsePrimaryVideoSsrc(videoMLine) {\r\n        const numSsrcs = videoMLine.ssrcs\r\n            .map(ssrcInfo => ssrcInfo.id)\r\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\r\n            .length;\r\n        const numGroups\r\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\r\n\r\n        if (numSsrcs > 1 && numGroups === 0) {\r\n            // Ambiguous, can't figure out the primary\r\n            return;\r\n        }\r\n        let primarySsrc = null;\r\n\r\n        if (numSsrcs === 1) {\r\n            primarySsrc = videoMLine.ssrcs[0].id;\r\n        } else if (numSsrcs === 2) {\r\n            // Can figure it out if there's an FID group\r\n            const fidGroup\r\n                = videoMLine.ssrcGroups.find(\r\n                    group => group.semantics === 'FID');\r\n\r\n            if (fidGroup) {\r\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\r\n            }\r\n        } else if (numSsrcs >= 3) {\r\n            // Can figure it out if there's a sim group\r\n            const simGroup\r\n                = videoMLine.ssrcGroups.find(\r\n                    group => group.semantics === 'SIM');\r\n\r\n            if (simGroup) {\r\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\r\n            }\r\n        }\r\n\r\n        return primarySsrc;\r\n    },\r\n\r\n    /**\r\n     * Generate an ssrc\r\n     * @returns {number} an ssrc\r\n     */\r\n    generateSsrc() {\r\n        return RandomUtil.randomInt(1, 0xffffffff);\r\n    },\r\n\r\n    /**\r\n     * Get an attribute for the given ssrc with the given attributeName\r\n     *  from the given mline\r\n     * @param {object} mLine an mLine object as parsed from transform.parse\r\n     * @param {number} ssrc the ssrc for which an attribute is desired\r\n     * @param {string} attributeName the name of the desired attribute\r\n     * @returns {string} the value corresponding to the given ssrc\r\n     *  and attributeName\r\n     */\r\n    getSsrcAttribute(mLine, ssrc, attributeName) {\r\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\r\n            const ssrcLine = mLine.ssrcs[i];\r\n\r\n            if (ssrcLine.id === ssrc\r\n                && ssrcLine.attribute === attributeName) {\r\n                return ssrcLine.value;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Parses the ssrcs from the group sdp line and\r\n     *  returns them as a list of numbers\r\n     * @param {object} the ssrcGroup object as parsed from\r\n     *  sdp-transform\r\n     * @returns {list<number>} a list of the ssrcs in the group\r\n     *  parsed as numbers\r\n     */\r\n    parseGroupSsrcs(ssrcGroup) {\r\n        return ssrcGroup\r\n            .ssrcs\r\n            .split(' ')\r\n            .map(ssrcStr => parseInt(ssrcStr, 10));\r\n    },\r\n\r\n    /**\r\n     * Get the mline of the given type from the given sdp\r\n     * @param {object} sdp sdp as parsed from transform.parse\r\n     * @param {string} type the type of the desired mline (e.g. \"video\")\r\n     * @returns {object} a media object\r\n     */\r\n    getMedia(sdp, type) {\r\n        return sdp.media.find(m => m.type === type);\r\n    },\r\n\r\n    /**\r\n     * Extracts the ICE username fragment from an SDP string.\r\n     * @param {string} sdp the SDP in raw text format\r\n     */\r\n    getUfrag(sdp) {\r\n        const ufragLines\r\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\r\n\r\n        if (ufragLines.length > 0) {\r\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sets the given codecName as the preferred codec by moving it to the beginning\r\n     * of the payload types list (modifies the given mline in place). All instances\r\n     * of the codec are moved up.\r\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse\r\n     * @param {string} codecName the name of the preferred codec\r\n     */\r\n    preferCodec(mline, codecName) {\r\n        if (!mline || !codecName) {\r\n            return;\r\n        }\r\n\r\n        const matchingPayloadTypes = mline.rtp\r\n            .filter(rtp => rtp.codec && rtp.codec.toLowerCase() === codecName.toLowerCase())\r\n            .map(rtp => rtp.payload);\r\n\r\n        if (matchingPayloadTypes) {\r\n            // Call toString() on payloads to get around an issue within SDPTransform that sets\r\n            // payloads as a number, instead of a string, when there is only one payload.\r\n            const payloadTypes\r\n                = mline.payloads\r\n                .toString()\r\n                .split(' ')\r\n                .map(p => parseInt(p, 10));\r\n\r\n            for (const pt of matchingPayloadTypes.reverse()) {\r\n                const payloadIndex = payloadTypes.indexOf(pt);\r\n\r\n                payloadTypes.splice(payloadIndex, 1);\r\n                payloadTypes.unshift(pt);\r\n            }\r\n            mline.payloads = payloadTypes.join(' ');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Strips the given codec from the given mline. All related RTX payload\r\n     * types are also stripped. If the resulting mline would have no codecs,\r\n     * it's disabled.\r\n     *\r\n     * @param {object} mLine the mline object from an sdp as parsed by transform.parse.\r\n     * @param {string} codecName the name of the codec which will be stripped.\r\n     * @param {boolean} highProfile determines if only the high profile H264 codec needs to be\r\n     * stripped from the sdp when the passed codecName is H264.\r\n     */\r\n    stripCodec(mLine, codecName, highProfile = false) {\r\n        if (!mLine || !codecName) {\r\n            return;\r\n        }\r\n\r\n        const h264Pts = [];\r\n        let removePts = [];\r\n        const stripH264HighCodec = codecName.toLowerCase() === CodecMimeType.H264 && highProfile;\r\n\r\n        for (const rtp of mLine.rtp) {\r\n            if (rtp.codec\r\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\r\n                if (stripH264HighCodec) {\r\n                    h264Pts.push(rtp.payload);\r\n                } else {\r\n                    removePts.push(rtp.payload);\r\n                }\r\n            }\r\n        }\r\n\r\n        // high profile H264 codecs have 64 as the first two bytes of the profile-level-id.\r\n        if (stripH264HighCodec) {\r\n            removePts = mLine.fmtp\r\n                .filter(item => h264Pts.indexOf(item.payload) > -1 && item.config.includes('profile-level-id=64'))\r\n                .map(item => item.payload);\r\n        }\r\n\r\n        if (removePts.length > 0) {\r\n            // We also need to remove the payload types that are related to RTX\r\n            // for the codecs we want to disable.\r\n            const rtxApts = removePts.map(item => `apt=${item}`);\r\n            const rtxPts = mLine.fmtp.filter(\r\n                item => rtxApts.indexOf(item.config) !== -1);\r\n\r\n            removePts.push(...rtxPts.map(item => item.payload));\r\n\r\n            // Call toString() on payloads to get around an issue within\r\n            // SDPTransform that sets payloads as a number, instead of a string,\r\n            // when there is only one payload.\r\n            const allPts = mLine.payloads\r\n                .toString()\r\n                .split(' ')\r\n                .map(Number);\r\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\r\n\r\n            if (keepPts.length === 0) {\r\n                // There are no other codecs, disable the stream.\r\n                mLine.port = 0;\r\n                mLine.direction = 'inactive';\r\n                mLine.payloads = '*';\r\n            } else {\r\n                mLine.payloads = keepPts.join(' ');\r\n            }\r\n\r\n            mLine.rtp = mLine.rtp.filter(\r\n                item => keepPts.indexOf(item.payload) !== -1);\r\n            mLine.fmtp = mLine.fmtp.filter(\r\n                item => keepPts.indexOf(item.payload) !== -1);\r\n            if (mLine.rtcpFb) {\r\n                mLine.rtcpFb = mLine.rtcpFb.filter(\r\n                    item => keepPts.indexOf(item.payload) !== -1);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default SDPUtil;\r\n","/**\r\n * This class exports constants and factory methods related to the analytics\r\n * API provided by AnalyticsAdapter. In order for entries in a database to be\r\n * somewhat easily traceable back to the code which produced them, events sent\r\n * through analytics should be defined here.\r\n *\r\n * Since the AnalyticsAdapter API can be used in different ways, for some events\r\n * it is more convenient to just define the event name as a constant. For other\r\n * events a factory function is easier.\r\n *\r\n * A general approach for adding a new event:\r\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\r\n * operational.\r\n * 2. Determine whether the event is related to other existing events, and\r\n * which fields are desired to be set: name, action, actionSubject, source.\r\n * 3. If the name is sufficient (the other fields are not important), use a\r\n * constant. Otherwise use a factory function.\r\n *\r\n * Note that the AnalyticsAdapter uses the events passed to its functions for\r\n * its own purposes, and might modify them. Because of this, factory functions\r\n * should create new objects.\r\n *\r\n */\r\n\r\n/**\r\n * The constant which identifies an event of type \"operational\".\r\n * @type {string}\r\n */\r\nexport const TYPE_OPERATIONAL = 'operational';\r\n\r\n/**\r\n * The constant which identifies an event of type \"page\".\r\n * @type {string}\r\n */\r\nexport const TYPE_PAGE = 'page';\r\n\r\n/**\r\n * The constant which identifies an event of type \"track\".\r\n * @type {string}\r\n */\r\nexport const TYPE_TRACK = 'track';\r\n\r\n/**\r\n * The constant which identifies an event of type \"ui\".\r\n * @type {string}\r\n */\r\nexport const TYPE_UI = 'ui';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that the Jingle session\r\n * was restarted (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_RESTART = 'restart';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-accept\r\n * timed out (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-initiate\r\n * was received.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a session-initiate\r\n * not arrived within a timeout (the value is specified in\r\n * the {@link JingleSessionPC}.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\r\n\r\n/**\r\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\r\n * the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a transport-replace\r\n * was received.\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TR_RECEIVED\r\n    = 'transport-replace.received';\r\n\r\n/**\r\n * The \"action\" value for Jingle events which indicates that a transport-replace\r\n * succeeded (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_JINGLE_TR_SUCCESS\r\n    = 'transport-replace.success';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that P2P session initiate message has been rejected by the client\r\n * because the mandatory requirements were not met.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_DECLINED = 'decline';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that a connection was\r\n * established (TODO: verify/fix the documentation)\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_ESTABLISHED = 'established';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that something failed.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_FAILED = 'failed';\r\n\r\n/**\r\n * The \"action\" value for P2P events which indicates that a switch to\r\n * jitsi-videobridge happened.\r\n * @type {string}\r\n */\r\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\r\n\r\n/**\r\n * The name of an event which indicates an available device. We send one such\r\n * event per available device once when the available devices are first known,\r\n * and every time that they change\r\n * @type {string}\r\n *\r\n * Properties:\r\n *      audio_input_device_count: the number of audio input devices available at\r\n *          the time the event was sent.\r\n *      audio_output_device_count: the number of audio output devices available\r\n *          at the time the event was sent.\r\n *      video_input_device_count: the number of video input devices available at\r\n *          the time the event was sent.\r\n *      video_output_device_count: the number of video output devices available\r\n *          at the time the event was sent.\r\n *      device_id: an identifier of the device described in this event.\r\n *      device_group_id:\r\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\r\n *          'videooutput'.\r\n *      device_label: a string which describes the device.\r\n */\r\nexport const AVAILABLE_DEVICE = 'available.device';\r\n\r\n/**\r\n * This appears to be fired only in certain cases when the XMPP connection\r\n * disconnects (and it was intentional?). It is currently never observed to\r\n * fire in production.\r\n *\r\n * TODO: document\r\n *\r\n * Properties:\r\n *      message: an error message\r\n */\r\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\r\n\r\n/**\r\n * Indicates that the user of the application provided feedback in terms of a\r\n * rating (an integer from 1 to 5) and an optional comment.\r\n * Properties:\r\n *      value: the user's rating (an integer from 1 to 5)\r\n *      comment: the user's comment\r\n */\r\nexport const FEEDBACK = 'feedback';\r\n\r\n/**\r\n * Indicates the duration of a particular phase of the ICE connectivity\r\n * establishment.\r\n *\r\n * Properties:\r\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\r\n *      value: the duration in milliseconds.\r\n *      p2p: whether the associated ICE connection is p2p or towards a\r\n *          jitsi-videobridge\r\n *      initiator: whether the local Jingle peer is the initiator or responder\r\n *          in the Jingle session. XXX we probably actually care about the ICE\r\n *          role (controlling vs controlled), and we assume that this correlates\r\n *          with the Jingle initiator.\r\n */\r\nexport const ICE_DURATION = 'ice.duration';\r\n\r\n/**\r\n * Indicates the difference in milliseconds between the ICE establishment time\r\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\r\n * P2P connection took 10ms more than JVB connection to establish).\r\n *\r\n * Properties:\r\n *      value: the difference in establishment durations in milliseconds.\r\n *\r\n */\r\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\r\n    = 'ice.establishment.duration.diff';\r\n\r\n/**\r\n * Indicates that the ICE state has changed.\r\n *\r\n * Properties:\r\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\r\n *          'completed', etc).\r\n *      value: the time in milliseconds (as reported by\r\n *          window.performance.now()) that the state change occurred.\r\n *      p2p: whether the associated ICE connection is p2p or towards a\r\n *          jitsi-videobridge\r\n *      signalingState: The signaling state of the associated PeerConnection\r\n *      reconnect: whether the associated Jingle session is in the process of\r\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\r\n */\r\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\r\n\r\n/**\r\n * Indicates that no bytes have been sent for the track.\r\n *\r\n * Properties:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n */\r\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\r\n\r\n/**\r\n * Indicates that a track was unmuted (?).\r\n *\r\n * Properties:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n *      trackType: the type of the track ('local' or 'remote').\r\n *      value: TODO: document\r\n */\r\nexport const TRACK_UNMUTED = 'track.unmuted';\r\n\r\n/**\r\n * Creates an operational event which indicates that we have received a\r\n * \"bridge down\" event from jicofo.\r\n */\r\nexport const createBridgeDownEvent = function() {\r\n    const bridgeDown = 'bridge.down';\r\n\r\n    return {\r\n        action: bridgeDown,\r\n        actionSubject: bridgeDown,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that the XMPP connection failed\r\n * @param errorType TODO\r\n * @param errorMessage TODO\r\n * @param detail connection failed details.\r\n */\r\nexport const createConnectionFailedEvent\r\n    = function(errorType, errorMessage, details) {\r\n        return {\r\n            type: TYPE_OPERATIONAL,\r\n            action: 'connection.failed',\r\n            attributes: {\r\n                'error_type': errorType,\r\n                'error_message': errorMessage,\r\n                ...details\r\n            }\r\n        };\r\n    };\r\n\r\n/**\r\n * Creates a conference event.\r\n *\r\n * @param {string} action - The action of the event.\r\n * @param {Object} attributes - The attributes to be added to the event.\r\n * @returns {{type: string, source: string, action: string, attributes: object}}\r\n */\r\nexport function createConferenceEvent(action, attributes) {\r\n    return {\r\n        action,\r\n        attributes,\r\n        source: 'conference',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an operational event which indicates that a particular connection\r\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\r\n * state).\r\n *\r\n * @param stage the stage which was reached\r\n * @param attributes additional attributes for the event. This should be an\r\n * object with a \"value\" property indicating a timestamp in milliseconds\r\n * relative to the beginning of the document's lifetime.\r\n *\r\n */\r\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\r\n    const action = 'connection.stage.reached';\r\n\r\n    return {\r\n        action,\r\n        actionSubject: stage,\r\n        attributes,\r\n        source: action,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an operational event for the end-to-end round trip time to a\r\n * specific remote participant.\r\n * @param participantId the ID of the remote participant.\r\n * @param region the region of the remote participant\r\n * @param rtt the rtt\r\n */\r\nexport const createE2eRttEvent = function(participantId, region, rtt) {\r\n    const attributes = {\r\n        'participant_id': participantId,\r\n        region,\r\n        rtt\r\n    };\r\n\r\n    return {\r\n        attributes,\r\n        name: 'e2e_rtt',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that the focus has left the MUC.\r\n */\r\nexport const createFocusLeftEvent = function() {\r\n    const action = 'focus.left';\r\n\r\n    return {\r\n        action,\r\n        actionSubject: action,\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event related to a getUserMedia call.\r\n *\r\n * @param action the type of the result that the event represents: 'error',\r\n * 'success', 'warning', etc.\r\n * @param attributes the attributes to attach to the event.\r\n * @returns {{type: string, source: string, name: string}}\r\n */\r\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        source: 'get.user.media',\r\n        action,\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event related to remote participant connection status changes.\r\n *\r\n * @param attributes the attributes to attach to the event.\r\n * @returns {{type: string, source: string, name: string}}\r\n */\r\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\r\n    const action = 'duration';\r\n\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        source: 'peer.conn.status',\r\n        action,\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event for a Jingle-related event.\r\n * @param action the action of the event\r\n * @param attributes attributes to add to the event.\r\n */\r\nexport const createJingleEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action,\r\n        source: 'jingle',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates that a local track was not able to read\r\n * data from its source (a camera or a microphone).\r\n *\r\n * @param mediaType {String} the media type of the local track ('audio' or\r\n * 'video').\r\n */\r\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\r\n    return {\r\n        attributes: {\r\n            'media_type': mediaType,\r\n            value\r\n        },\r\n        action: 'track.no.data.from.source',\r\n        type: TYPE_OPERATIONAL\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event for a p2p-related event.\r\n * @param action the action of the event\r\n * @param attributes attributes to add to the event.\r\n */\r\nexport const createP2PEvent = function(action, attributes = {}) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action,\r\n        source: 'p2p',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Indicates that we received a remote command to mute.\r\n */\r\nexport const createRemotelyMutedEvent = function() {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'remotely.muted'\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains RTP statistics such as RTT and packet loss.\r\n *\r\n * All average RTP stats are currently reported under 1 event name, but with\r\n * different properties that allows to distinguish between a P2P call, a\r\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\r\n *\r\n * The structure of the event is:\r\n *\r\n * {\r\n *      p2p: true,\r\n *      conferenceSize: 2,\r\n *      localCandidateType: \"relay\",\r\n *      remoteCandidateType: \"relay\",\r\n *      transportType: \"udp\",\r\n *\r\n *      // Average RTT of 200ms\r\n *      \"rtt.avg\": 200,\r\n *      \"rtt.samples\": \"[100, 200, 300]\",\r\n *\r\n *      // Average packet loss of 10%\r\n *      \"packet.loss.avg\": 10,\r\n *      \"packet.loss.samples\": '[5, 10, 15]'\r\n *\r\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\r\n *      // The e2e RTT through jvb is 15ms shorter:\r\n *      \"rtt.diff\": 15,\r\n *\r\n *      // End-to-end RTT through JVB is ms.\r\n *      \"end2end.rtt.avg\" = 100\r\n * }\r\n *\r\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\r\n * and not JSON arrays, as events' attributes can not be nested. The samples are\r\n * currently included for debug purposes only and can be removed anytime soon\r\n * from the structure.\r\n *\r\n * Also note that not all of values are present in each event, as values are\r\n * obtained and calculated as part of different process/event pipe. For example\r\n * {@link ConnectionAvgStats} instances are doing the reports for each\r\n * {@link TraceablePeerConnection} and work independently from the main stats\r\n * pipe.\r\n */\r\nexport const createRtpStatsEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'rtp.stats',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains the round trip time (RTT) to a set of\r\n * regions.\r\n *\r\n * @param attributes\r\n * @returns {{type: string, action: string, attributes: *}}\r\n */\r\nexport const createRttByRegionEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'rtt.by.region',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains the local and remote ICE candidate types\r\n * for the transport that is currently selected.\r\n *\r\n * @param attributes\r\n * @returns {{type: string, action: string, attributes: *}}\r\n */\r\nexport const createTransportStatsEvent = function(attributes) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'transport.stats',\r\n        attributes\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\r\n * the local audio levels and the remote audio levels that triggered the event).\r\n *\r\n * @param {string} userID - The user id of the affected participant.\r\n * @param {*} localAudioLevels - The local audio levels.\r\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\r\n */\r\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'audio.output.problem',\r\n        attributes: {\r\n            userID,\r\n            localAudioLevels,\r\n            remoteAudioLevels\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * Creates an event which contains an information related to the bridge channel close event.\r\n *\r\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\r\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\r\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\r\n */\r\nexport const createBridgeChannelClosedEvent = function(code, reason) {\r\n    return {\r\n        type: TYPE_OPERATIONAL,\r\n        action: 'bridge-channel.error',\r\n        attributes: {\r\n            code,\r\n            reason\r\n        }\r\n    };\r\n};\r\n\r\n/**\r\n * Creates an event which indicates the Time To First Media (TTFM).\r\n * It is measured in milliseconds relative to the beginning of the document's\r\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\r\n * the following:\r\n * 1. The delay due to getUserMedia()\r\n * 2. The period between the MUC being joined and the reception of the Jingle\r\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\r\n * session until there are at least 2 participants in the room.\r\n *\r\n * @param attributes the attributes to add to the event. Currently used fields:\r\n *      mediaType: the media type of the local track ('audio' or 'video').\r\n *      muted: whether the track has ever been muted (?)\r\n *      value: the TTMF in milliseconds.\r\n */\r\nexport const createTtfmEvent = function(attributes) {\r\n    return createConnectionStageReachedEvent('ttfm', attributes);\r\n};\r\n","/* global module */\r\n/**\r\n * Enumeration of the video types\r\n * @type {{CAMERA: string, DESKTOP: string}}\r\n */\r\nexport const VideoType = {\r\n    /**\r\n     * The camera video type.\r\n     */\r\n    CAMERA: 'camera',\r\n\r\n    /**\r\n     * The desktop video type.\r\n     */\r\n    DESKTOP: 'desktop'\r\n};\r\n\r\nexport const CAMERA = VideoType.CAMERA;\r\nexport const DESKTOP = VideoType.DESKTOP;\r\nexport default VideoType;","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport browser from '../browser';\r\n\r\nconst logger = getLogger('FeatureFlags');\r\n\r\n/**\r\n * A global module for accessing information about different feature flags state.\r\n */\r\nclass FeatureFlags {\r\n    /**\r\n     * Configures the module.\r\n     *\r\n     * @param {boolean} flags.sourceNameSignaling - Enables source names in the signaling.\r\n     */\r\n    init(flags) {\r\n        this._sourceNameSignaling = Boolean(flags.sourceNameSignaling);\r\n        this._sendMultipleVideoStreams = Boolean(flags.sendMultipleVideoStreams);\r\n\r\n        // For Chromium, check if Unified plan is enabled.\r\n        this._usesUnifiedPlan = browser.usesUnifiedPlan()\r\n            && (!browser.isChromiumBased() || (flags.enableUnifiedOnChrome ? flags.enableUnifiedOnChrome : true));\r\n\r\n        logger.info(`Source name signaling: ${this._sourceNameSignaling},`\r\n            + ` Send multiple video streams: ${this._sendMultipleVideoStreams},`\r\n            + ` uses Unified plan: ${this._usesUnifiedPlan}`);\r\n    }\r\n\r\n    /**\r\n     * Checks if multiple local video streams support is enabled.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isMultiStreamSupportEnabled() {\r\n        return this._sourceNameSignaling && this._sendMultipleVideoStreams && this._usesUnifiedPlan;\r\n    }\r\n\r\n    /**\r\n     * Checks if the source name signaling is enabled.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isSourceNameSignalingEnabled() {\r\n        return this._sourceNameSignaling;\r\n    }\r\n}\r\n\r\nexport default new FeatureFlags();","/* global\r\n          __filename,\r\n          MediaStreamTrack,\r\n          RTCIceCandidate: true,\r\n          RTCPeerConnection,\r\n          RTCSessionDescription: true\r\n*/\r\n\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport clonedeep from 'lodash.clonedeep';\r\n\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\r\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport Resolutions from '../../service/RTC/Resolutions';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport SDPUtil from '../xmpp/SDPUtil';\r\n\r\nimport screenObtainer from './ScreenObtainer';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Require adapter only for certain browsers. This is being done for\r\n// react-native, which has its own shims, and while browsers are being migrated\r\n// over to use adapter's shims.\r\nif (browser.usesAdapter()) {\r\n    require('webrtc-adapter');\r\n}\r\n\r\nconst eventEmitter = new EventEmitter();\r\n\r\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\r\n\r\n/**\r\n * Default resolution to obtain for video tracks if no resolution is specified.\r\n * This default is used for old gum flow only, as new gum flow uses\r\n * {@link DEFAULT_CONSTRAINTS}.\r\n */\r\nconst OLD_GUM_DEFAULT_RESOLUTION = 720;\r\n\r\n/**\r\n * Default devices to obtain when no specific devices are specified. This\r\n * default is used for old gum flow only.\r\n */\r\nconst OLD_GUM_DEFAULT_DEVICES = [ 'audio', 'video' ];\r\n\r\n/**\r\n * Default MediaStreamConstraints to use for calls to getUserMedia.\r\n *\r\n * @private\r\n */\r\nconst DEFAULT_CONSTRAINTS = {\r\n    video: {\r\n        height: {\r\n            ideal: 720,\r\n            max: 720,\r\n            min: 180\r\n        },\r\n        width: {\r\n            ideal: 1280,\r\n            max: 1280,\r\n            min: 320\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * The default frame rate for Screen Sharing.\r\n */\r\nconst SS_DEFAULT_FRAME_RATE = 5;\r\n\r\n// Currently audio output device change is supported only in Chrome and\r\n// default output always has 'default' device ID\r\nlet audioOutputDeviceId = 'default'; // default device\r\n// whether user has explicitly set a device to use\r\nlet audioOutputChanged = false;\r\n\r\n// Disables all audio processing\r\nlet disableAP = false;\r\n\r\n// Disables Acoustic Echo Cancellation\r\nlet disableAEC = false;\r\n\r\n// Disables Noise Suppression\r\nlet disableNS = false;\r\n\r\n// Disables Automatic Gain Control\r\nlet disableAGC = false;\r\n\r\n// Disables Highpass Filter\r\nlet disableHPF = false;\r\nlet stereo = null;\r\n\r\nconst featureDetectionAudioEl = document.createElement('audio');\r\nconst isAudioOutputDeviceChangeAvailable\r\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\r\n\r\nlet availableDevices = [];\r\nlet availableDevicesPollTimer;\r\n\r\n/**\r\n * An empty function.\r\n */\r\nfunction emptyFuncton() {\r\n    // no-op\r\n}\r\n\r\n/**\r\n * Creates a constraints object to be passed into a call to getUserMedia.\r\n *\r\n * @param {Array} um - An array of user media types to get. The accepted types are \"video\", \"audio\", and \"desktop.\"\r\n * @param {Object} options - Various values to be added to the constraints.\r\n * @param {string} options.cameraDeviceId - The device id for the video capture device to get video from.\r\n * @param {Object} options.constraints - Default constraints object to use as a base for the returned constraints.\r\n * @param {Object} options.desktopStream - The desktop source id from which to capture a desktop sharing video.\r\n * @param {string} options.facingMode - Which direction the camera is pointing to (applicable on mobile)\r\n * @param {string} options.micDeviceId - The device id for the audio capture device to get audio from.\r\n * @private\r\n * @returns {Object}\r\n */\r\nfunction getConstraints(um = [], options = {}) {\r\n    // Create a deep copy of the constraints to avoid any modification of\r\n    // the passed in constraints object.\r\n    const constraints = clonedeep(options.constraints || DEFAULT_CONSTRAINTS);\r\n\r\n    if (um.indexOf('video') >= 0) {\r\n        // The \"resolution\" option is a shortcut and takes precendence.\r\n        if (Resolutions[options.resolution]) {\r\n            const r = Resolutions[options.resolution];\r\n\r\n            constraints.video.height = { ideal: r.height };\r\n            constraints.video.width = { ideal: r.width };\r\n        }\r\n\r\n        if (!constraints.video) {\r\n            constraints.video = {};\r\n        }\r\n\r\n        // Override the constraints on Safari because of the following webkit bug.\r\n        // https://bugs.webkit.org/show_bug.cgi?id=210932\r\n        // Camera doesn't start on older macOS versions if min/max constraints are specified.\r\n        // TODO: remove this hack when the bug fix is available on Mojave, Sierra and High Sierra.\r\n        if (browser.isWebKitBased()) {\r\n            if (constraints.video.height && constraints.video.height.ideal) {\r\n                constraints.video.height = { ideal: constraints.video.height.ideal };\r\n            } else {\r\n                logger.warn('Ideal camera height missing, camera may not start properly');\r\n            }\r\n            if (constraints.video.width && constraints.video.width.ideal) {\r\n                constraints.video.width = { ideal: constraints.video.width.ideal };\r\n            } else {\r\n                logger.warn('Ideal camera width missing, camera may not start properly');\r\n            }\r\n        }\r\n        if (options.cameraDeviceId) {\r\n            constraints.video.deviceId = options.cameraDeviceId;\r\n        } else {\r\n            const facingMode = options.facingMode || CameraFacingMode.USER;\r\n\r\n            constraints.video.facingMode = facingMode;\r\n        }\r\n    } else {\r\n        constraints.video = false;\r\n    }\r\n\r\n    if (um.indexOf('audio') >= 0) {\r\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\r\n            constraints.audio = {};\r\n        }\r\n\r\n        constraints.audio = {\r\n            autoGainControl: !disableAGC && !disableAP,\r\n            deviceId: options.micDeviceId,\r\n            echoCancellation: !disableAEC && !disableAP,\r\n            noiseSuppression: !disableNS && !disableAP\r\n        };\r\n\r\n        if (stereo) {\r\n            Object.assign(constraints.audio, { channelCount: 2 });\r\n        }\r\n    } else {\r\n        constraints.audio = false;\r\n    }\r\n\r\n    return constraints;\r\n}\r\n\r\n/**\r\n * Updates the granted permissions based on the options we requested and the\r\n * streams we received.\r\n * @param um the options we requested to getUserMedia.\r\n * @param stream the stream we received from calling getUserMedia.\r\n */\r\nfunction updateGrantedPermissions(um, stream) {\r\n    const audioTracksReceived\r\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\r\n    const videoTracksReceived\r\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\r\n    const grantedPermissions = {};\r\n\r\n    if (um.indexOf('video') !== -1) {\r\n        grantedPermissions.video = videoTracksReceived;\r\n    }\r\n    if (um.indexOf('audio') !== -1) {\r\n        grantedPermissions.audio = audioTracksReceived;\r\n    }\r\n\r\n    eventEmitter.emit(RTCEvents.GRANTED_PERMISSIONS, grantedPermissions);\r\n}\r\n\r\n/**\r\n * Checks if new list of available media devices differs from previous one.\r\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\r\n * @returns {boolean} - true if list is different, false otherwise.\r\n */\r\nfunction compareAvailableMediaDevices(newDevices) {\r\n    if (newDevices.length !== availableDevices.length) {\r\n        return true;\r\n    }\r\n\r\n    /* eslint-disable newline-per-chained-call */\r\n\r\n    return (\r\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\r\n            !== availableDevices\r\n                .map(mediaDeviceInfoToJSON).sort().join(''));\r\n\r\n    /* eslint-enable newline-per-chained-call */\r\n\r\n    /**\r\n     *\r\n     * @param info\r\n     */\r\n    function mediaDeviceInfoToJSON(info) {\r\n        return JSON.stringify({\r\n            kind: info.kind,\r\n            deviceId: info.deviceId,\r\n            groupId: info.groupId,\r\n            label: info.label,\r\n            facing: info.facing\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Sends analytics event with the passed device list.\r\n *\r\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\r\n * available devices.\r\n * @returns {void}\r\n */\r\nfunction sendDeviceListToAnalytics(deviceList) {\r\n    const audioInputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'audioinput').length;\r\n    const audioOutputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\r\n    const videoInputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'videoinput').length;\r\n    const videoOutputDeviceCount\r\n        = deviceList.filter(d => d.kind === 'videooutput').length;\r\n\r\n    deviceList.forEach(device => {\r\n        const attributes = {\r\n            'audio_input_device_count': audioInputDeviceCount,\r\n            'audio_output_device_count': audioOutputDeviceCount,\r\n            'video_input_device_count': videoInputDeviceCount,\r\n            'video_output_device_count': videoOutputDeviceCount,\r\n            'device_id': device.deviceId,\r\n            'device_group_id': device.groupId,\r\n            'device_kind': device.kind,\r\n            'device_label': device.label\r\n        };\r\n\r\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Update known devices.\r\n *\r\n * @param {Array<Object>} pds - The new devices.\r\n * @returns {void}\r\n *\r\n * NOTE: Use this function as a shared callback to handle both the devicechange event  and the polling implementations.\r\n * This prevents duplication and works around a chrome bug (verified to occur on 68) where devicechange fires twice in\r\n * a row, which can cause async post devicechange processing to collide.\r\n */\r\nfunction updateKnownDevices(pds) {\r\n    if (compareAvailableMediaDevices(pds)) {\r\n        onMediaDevicesListChanged(pds);\r\n    }\r\n}\r\n\r\n/**\r\n * Event handler for the 'devicechange' event.\r\n *\r\n * @param {MediaDeviceInfo[]} devices - list of media devices.\r\n * @emits RTCEvents.DEVICE_LIST_CHANGED\r\n */\r\nfunction onMediaDevicesListChanged(devicesReceived) {\r\n    availableDevices = devicesReceived.slice(0);\r\n    logger.info(\r\n        'list of media devices has changed:',\r\n        availableDevices);\r\n\r\n    sendDeviceListToAnalytics(availableDevices);\r\n\r\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\r\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, availableDevices);\r\n\r\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, availableDevices);\r\n}\r\n\r\n/**\r\n * Represents a default implementation of setting a <tt>MediaStream</tt> as the\r\n * source of a video element that tries to be browser-agnostic through feature\r\n * checking. Note though that it was not completely clear from the predating\r\n * browser-specific implementations what &quot;videoSrc&quot; was because one\r\n * implementation of {@link RTCUtils#getVideoSrc} would return\r\n * <tt>MediaStream</tt> (e.g. Firefox), another a <tt>string</tt> representation\r\n * of the <tt>URL</tt> of the <tt>MediaStream</tt> (e.g. Chrome) and the return\r\n * value was only used by {@link RTCUIHelper#getVideoId} which itself did not\r\n * appear to be used anywhere. Generally, the implementation will try to follow\r\n * the related standards i.e. work with the <tt>srcObject</tt> and <tt>src</tt>\r\n * properties of the specified <tt>element</tt> taking into account vender\r\n * prefixes.\r\n *\r\n * @param element the element whose video source/src is to be set to the\r\n * specified <tt>stream</tt>\r\n * @param {MediaStream} stream the <tt>MediaStream</tt> to set as the video\r\n * source/src of <tt>element</tt>\r\n */\r\n function defaultSetVideoSrc(element, stream) {\r\n    // srcObject\r\n    let srcObjectPropertyName = 'srcObject';\r\n\r\n    if (!(srcObjectPropertyName in element)) {\r\n        srcObjectPropertyName = 'mozSrcObject';\r\n        if (!(srcObjectPropertyName in element)) {\r\n            srcObjectPropertyName = null;\r\n        }\r\n    }\r\n    if (srcObjectPropertyName) {\r\n        element[srcObjectPropertyName] = stream;\r\n\r\n        return;\r\n    }\r\n\r\n    // src\r\n    let src;\r\n\r\n    if (stream) {\r\n        src = stream.jitsiObjectURL;\r\n\r\n        // Save the created URL for stream so we can reuse it and not keep\r\n        // creating URLs.\r\n        if (!src) {\r\n            stream.jitsiObjectURL = src = URL.createObjectURL(stream);\r\n        }\r\n    }\r\n    element.src = src || '';\r\n}\r\n\r\n/**\r\n *\r\n */\r\nclass RTCUtils extends Listenable {\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        super(eventEmitter);\r\n    }\r\n\r\n    /**\r\n     * Depending on the browser, sets difference instance methods for\r\n     * interacting with user media and adds methods to native WebRTC-related\r\n     * objects. Also creates an instance variable for peer connection\r\n     * constraints.\r\n     *\r\n     * @param {Object} options\r\n     * @returns {void}\r\n     */\r\n    init(options = {}) {\r\n        if (typeof options.disableAEC === 'boolean') {\r\n            disableAEC = options.disableAEC;\r\n            logger.info(`Disable AEC: ${disableAEC}`);\r\n        }\r\n        if (typeof options.disableNS === 'boolean') {\r\n            disableNS = options.disableNS;\r\n            logger.info(`Disable NS: ${disableNS}`);\r\n        }\r\n        if (typeof options.disableAP === 'boolean') {\r\n            disableAP = options.disableAP;\r\n            logger.info(`Disable AP: ${disableAP}`);\r\n        }\r\n        if (typeof options.disableAGC === 'boolean') {\r\n            disableAGC = options.disableAGC;\r\n            logger.info(`Disable AGC: ${disableAGC}`);\r\n        }\r\n        if (typeof options.disableHPF === 'boolean') {\r\n            disableHPF = options.disableHPF;\r\n            logger.info(`Disable HPF: ${disableHPF}`);\r\n        }\r\n        if (typeof options.audioQuality?.stereo === 'boolean') {\r\n            stereo = options.audioQuality.stereo;\r\n            logger.info(`Stereo: ${stereo}`);\r\n        }\r\n\r\n        availableDevices = [];\r\n        window.clearInterval(availableDevicesPollTimer);\r\n        availableDevicesPollTimer = undefined;\r\n\r\n        if (browser.isReactNative()) {\r\n            this.RTCPeerConnectionType = RTCPeerConnection;\r\n\r\n            this.attachMediaStream\r\n                = wrapAttachMediaStream((element, stream) => {\r\n                    defaultSetVideoSrc(element, stream);\r\n\r\n                    return element;\r\n                });\r\n\r\n            this.getStreamID = function({ id }) {\r\n                // A. MediaStreams from FF endpoints have the characters '{' and\r\n                // '}' that make jQuery choke.\r\n                // B. The react-native-webrtc implementation that we use at the\r\n                // time of this writing returns a number for the id of\r\n                // MediaStream. Let's just say that a number contains no special\r\n                // characters.\r\n                return (\r\n                    typeof id === 'number'\r\n                        ? id\r\n                        : SDPUtil.filterSpecialChars(id));\r\n            };\r\n            this.getTrackID = ({ id }) => id;\r\n\r\n            if (!MediaStream.prototype.getVideoTracks) {\r\n                MediaStream.prototype.getVideoTracks = function() {\r\n                    return this.videoTracks;\r\n                };\r\n            }\r\n            if (!MediaStream.prototype.getAudioTracks) {\r\n                MediaStream.prototype.getAudioTracks = function() {\r\n                    return this.audioTracks;\r\n                };\r\n            }\r\n        } else {\r\n            this.RTCPeerConnectionType = RTCPeerConnection;\r\n\r\n            this.attachMediaStream\r\n                = wrapAttachMediaStream((element, stream) => {\r\n                    if (element) {\r\n                        element.srcObject = stream;\r\n                    }\r\n                });\r\n\r\n            this.getStreamID = ({ id }) => id;\r\n            this.getTrackID = ({ id }) => id;\r\n        }\r\n\r\n        this.pcConstraints = browser.isChromiumBased() || browser.isReactNative()\r\n            ? { optional: [\r\n                { googScreencastMinBitrate: 100 },\r\n                { googCpuOveruseDetection: true }\r\n            ] }\r\n            : {};\r\n\r\n        screenObtainer.init(options);\r\n\r\n        if (this.isDeviceListAvailable()) {\r\n            this.enumerateDevices(ds => {\r\n                availableDevices = ds.slice(0);\r\n\r\n                logger.debug('Available devices: ', availableDevices);\r\n                sendDeviceListToAnalytics(availableDevices);\r\n\r\n                eventEmitter.emit(\r\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\r\n                    availableDevices);\r\n\r\n                if (browser.supportsDeviceChangeEvent()) {\r\n                    navigator.mediaDevices.addEventListener(\r\n                        'devicechange',\r\n                        () => this.enumerateDevices(emptyFuncton));\r\n                } else {\r\n                    // Periodically poll enumerateDevices() method to check if\r\n                    // list of media devices has changed.\r\n                    availableDevicesPollTimer = window.setInterval(\r\n                        () => this.enumerateDevices(emptyFuncton),\r\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    enumerateDevices(callback) {\r\n        navigator.mediaDevices.enumerateDevices()\r\n            .then(devices => {\r\n                updateKnownDevices(devices);\r\n                callback(devices);\r\n            })\r\n            .catch(error => {\r\n                logger.warn(`Failed to  enumerate devices. ${error}`);\r\n                updateKnownDevices([]);\r\n                callback([]);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Acquires a media stream via getUserMedia that\r\n     * matches the given constraints\r\n     *\r\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\r\n     * @param {Object} constraints - Stream specifications to use.\r\n     * @returns {Promise}\r\n     */\r\n     _getUserMedia(umDevices, constraints = {}, timeout = 0) {\r\n        return new Promise((resolve, reject) => {\r\n            let gumTimeout, timeoutExpired = false;\r\n\r\n            if (typeof timeout === 'number' && !isNaN(timeout) && timeout > 0) {\r\n                gumTimeout = setTimeout(() => {\r\n                    timeoutExpired = true;\r\n                    gumTimeout = undefined;\r\n                    reject(new JitsiTrackError(JitsiTrackErrors.TIMEOUT));\r\n                }, timeout);\r\n            }\r\n\r\n            navigator.mediaDevices.getUserMedia(constraints)\r\n                .then(stream => {\r\n                    logger.log('onUserMediaSuccess');\r\n                    updateGrantedPermissions(umDevices, stream);\r\n                    if (!timeoutExpired) {\r\n                        if (typeof gumTimeout !== 'undefined') {\r\n                            clearTimeout(gumTimeout);\r\n                        }\r\n                        resolve(stream);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    logger.warn(`Failed to get access to local media. ${error} ${JSON.stringify(constraints)}`);\r\n                    const jitsiError = new JitsiTrackError(error, constraints, umDevices);\r\n\r\n                    if (!timeoutExpired) {\r\n                        if (typeof gumTimeout !== 'undefined') {\r\n                            clearTimeout(gumTimeout);\r\n                        }\r\n                        reject(jitsiError);\r\n                    }\r\n\r\n                    if (jitsiError.name === JitsiTrackErrors.PERMISSION_DENIED) {\r\n                        updateGrantedPermissions(umDevices, undefined);\r\n                    }\r\n\r\n                    // else {\r\n                    // Probably the error is not caused by the lack of permissions and we don't need to update them.\r\n                    // }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Acquire a display stream via the screenObtainer. This requires extra\r\n     * logic compared to use screenObtainer versus normal device capture logic\r\n     *\r\n     * @param {Object} options\r\n     * @param {string[]} options.desktopSharingSources\r\n     * @param {Object} options.desktopSharingFrameRate\r\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\r\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\r\n     * @returns {Promise} A promise which will be resolved with an object which\r\n     * contains the acquired display stream. If desktop sharing is not supported\r\n     * then a rejected promise will be returned.\r\n     */\r\n    _getDesktopMedia() {\r\n        if (!screenObtainer.isSupported()) {\r\n            return Promise.reject(new Error('Desktop sharing is not supported!'));\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            screenObtainer.obtainStream(\r\n                stream => {\r\n                    resolve(stream);\r\n                },\r\n                error => {\r\n                    reject(error);\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Private utility for determining if the passed in MediaStream contains\r\n     * tracks of the type(s) specified in the requested devices.\r\n     *\r\n     * @param {string[]} requestedDevices - The track types that are expected to\r\n     * be includes in the stream.\r\n     * @param {MediaStream} stream - The MediaStream to check if it has the\r\n     * expected track types.\r\n     * @returns {string[]} An array of string with the missing track types. The\r\n     * array will be empty if all requestedDevices are found in the stream.\r\n     */\r\n    _getMissingTracks(requestedDevices = [], stream) {\r\n        const missingDevices = [];\r\n\r\n        const audioDeviceRequested = requestedDevices.includes('audio');\r\n        const audioTracksReceived\r\n            = stream && stream.getAudioTracks().length > 0;\r\n\r\n        if (audioDeviceRequested && !audioTracksReceived) {\r\n            missingDevices.push('audio');\r\n        }\r\n\r\n        const videoDeviceRequested = requestedDevices.includes('video');\r\n        const videoTracksReceived\r\n            = stream && stream.getVideoTracks().length > 0;\r\n\r\n        if (videoDeviceRequested && !videoTracksReceived) {\r\n            missingDevices.push('video');\r\n        }\r\n\r\n        return missingDevices;\r\n    }\r\n\r\n    /**\r\n     * Gets streams from specified device types. This function intentionally\r\n     * ignores errors for upstream to catch and handle instead.\r\n     *\r\n     * @param {Object} options - A hash describing what devices to get and\r\n     * relevant constraints.\r\n     * @param {string[]} options.devices - The types of media to capture. Valid\r\n     * values are \"desktop\", \"audio\", and \"video\".\r\n     * @param {Object} options.desktopSharingFrameRate\r\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\r\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\r\n     * @param {String} options.desktopSharingSourceDevice - The device id or\r\n     * label for a video input source that should be used for screensharing.\r\n     * @returns {Promise} The promise, when successful, will return an array of\r\n     * meta data for the requested device type, which includes the stream and\r\n     * track. If an error occurs, it will be deferred to the caller for\r\n     * handling.\r\n     */\r\n    obtainAudioAndVideoPermissions(options) {\r\n        const {\r\n            timeout,\r\n            ...otherOptions\r\n        } = options;\r\n\r\n        const mediaStreamsMetaData = [];\r\n\r\n        // Declare private functions to be used in the promise chain below.\r\n        // These functions are declared in the scope of this function because\r\n        // they are not being used anywhere else, so only this function needs to\r\n        // know about them.\r\n\r\n        /**\r\n         * Executes a request for desktop media if specified in options.\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        const maybeRequestDesktopDevice = function() {\r\n            const umDevices = otherOptions.devices || [];\r\n            const isDesktopDeviceRequested\r\n                = umDevices.indexOf('desktop') !== -1;\r\n\r\n            if (!isDesktopDeviceRequested) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            const {\r\n                desktopSharingSourceDevice\r\n            } = otherOptions;\r\n\r\n            // Attempt to use a video input device as a screenshare source if\r\n            // the option is defined.\r\n            if (desktopSharingSourceDevice) {\r\n                const matchingDevice\r\n                    = availableDevices && availableDevices.find(device =>\r\n                        device.kind === 'videoinput'\r\n                            && (device.deviceId === desktopSharingSourceDevice\r\n                            || device.label === desktopSharingSourceDevice));\r\n\r\n                if (!matchingDevice) {\r\n                    return Promise.reject(new JitsiTrackError(\r\n                        { name: 'ConstraintNotSatisfiedError' },\r\n                        {},\r\n                        [ desktopSharingSourceDevice ]\r\n                    ));\r\n                }\r\n\r\n                const requestedDevices = [ 'video' ];\r\n                const constraints = {\r\n                    video: {\r\n                        deviceId: matchingDevice.deviceId\r\n\r\n                        // frameRate is omited here on purpose since this is a device that we'll pretend is a screen.\r\n                    }\r\n                };\r\n\r\n                return this._getUserMedia(requestedDevices, constraints, timeout)\r\n                    .then(stream => {\r\n                        return {\r\n                            sourceType: 'device',\r\n                            stream\r\n                        };\r\n                    });\r\n            }\r\n\r\n            return this._getDesktopMedia();\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Creates a meta data object about the passed in desktopStream and\r\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\r\n         * returned later.\r\n         *\r\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\r\n         * capture.\r\n         * @returns {void}\r\n         */\r\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\r\n            if (!desktopStream) {\r\n                return;\r\n            }\r\n\r\n            const { stream, sourceId, sourceType } = desktopStream;\r\n\r\n            const desktopAudioTracks = stream.getAudioTracks();\r\n\r\n            if (desktopAudioTracks.length) {\r\n                const desktopAudioStream = new MediaStream(desktopAudioTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: desktopAudioStream,\r\n                    sourceId,\r\n                    sourceType,\r\n                    track: desktopAudioStream.getAudioTracks()[0]\r\n                });\r\n            }\r\n\r\n            const desktopVideoTracks = stream.getVideoTracks();\r\n\r\n            if (desktopVideoTracks.length) {\r\n                const desktopVideoStream = new MediaStream(desktopVideoTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: desktopVideoStream,\r\n                    sourceId,\r\n                    sourceType,\r\n                    track: desktopVideoStream.getVideoTracks()[0],\r\n                    videoType: VideoType.DESKTOP\r\n                });\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Executes a request for audio and/or video, as specified in options.\r\n         * By default both audio and video will be captured if options.devices\r\n         * is not defined.\r\n         *\r\n         * @returns {Promise}\r\n         */\r\n        const maybeRequestCaptureDevices = function() {\r\n            const umDevices = otherOptions.devices || [ 'audio', 'video' ];\r\n            const requestedCaptureDevices = umDevices.filter(device => device === 'audio' || device === 'video');\r\n\r\n            if (!requestedCaptureDevices.length) {\r\n                return Promise.resolve();\r\n            }\r\n\r\n            const constraints = getConstraints(requestedCaptureDevices, otherOptions);\r\n\r\n            logger.info('Got media constraints: ', JSON.stringify(constraints));\r\n\r\n            return this._getUserMedia(requestedCaptureDevices, constraints, timeout);\r\n        }.bind(this);\r\n\r\n        /**\r\n         * Splits the passed in media stream into separate audio and video\r\n         * streams and creates meta data objects for each and pushes them to the\r\n         * internal array mediaStreamsMetaData to be returned later.\r\n         *\r\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\r\n         * video track.\r\n         * @returns {void}\r\n         */\r\n        const maybeCreateAndAddAVTracks = function(avStream) {\r\n            if (!avStream) {\r\n                return;\r\n            }\r\n\r\n            const audioTracks = avStream.getAudioTracks();\r\n\r\n            if (audioTracks.length) {\r\n                const audioStream = new MediaStream(audioTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: audioStream,\r\n                    track: audioStream.getAudioTracks()[0],\r\n                    effects: options.effects\r\n                });\r\n            }\r\n\r\n            const videoTracks = avStream.getVideoTracks();\r\n\r\n            if (videoTracks.length) {\r\n                const videoStream = new MediaStream(videoTracks);\r\n\r\n                mediaStreamsMetaData.push({\r\n                    stream: videoStream,\r\n                    track: videoStream.getVideoTracks()[0],\r\n                    videoType: VideoType.CAMERA,\r\n                    effects: options.effects\r\n                });\r\n            }\r\n        };\r\n\r\n        return maybeRequestDesktopDevice()\r\n            .then(maybeCreateAndAddDesktopTrack)\r\n            .then(maybeRequestCaptureDevices)\r\n            .then(maybeCreateAndAddAVTracks)\r\n            .then(() => mediaStreamsMetaData)\r\n            .catch(error => {\r\n                mediaStreamsMetaData.forEach(({ stream }) => {\r\n                    this.stopMediaStream(stream);\r\n                });\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Checks whether it is possible to enumerate available cameras/microphones.\r\n     *\r\n     * @returns {boolean} {@code true} if the device listing is available;\r\n     * {@code false}, otherwise.\r\n     */\r\n    isDeviceListAvailable() {\r\n        return Boolean(\r\n            navigator.mediaDevices\r\n                && navigator.mediaDevices.enumerateDevices);\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @params {string} [deviceType] - type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        if (deviceType === 'output' || deviceType === 'audiooutput') {\r\n            return isAudioOutputDeviceChangeAvailable;\r\n        }\r\n\r\n        // Calling getUserMedia again (for preview) kills the track returned by the first getUserMedia call because of\r\n        // https://bugs.webkit.org/show_bug.cgi?id=179363. Therefore, do not show microphone/camera options on mobile\r\n        // Safari.\r\n        if ((deviceType === 'audioinput' || deviceType === 'input') && browser.isIosBrowser()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * A method to handle stopping of the stream.\r\n     * One point to handle the differences in various implementations.\r\n     * @param mediaStream MediaStream object to stop.\r\n     */\r\n    stopMediaStream(mediaStream) {\r\n        if (!mediaStream) {\r\n            return;\r\n        }\r\n\r\n        mediaStream.getTracks().forEach(track => {\r\n            if (track.stop) {\r\n                track.stop();\r\n            }\r\n        });\r\n\r\n        // leave stop for implementation still using it\r\n        if (mediaStream.stop) {\r\n            mediaStream.stop();\r\n        }\r\n\r\n        // The MediaStream implementation of the react-native-webrtc project has\r\n        // an explicit release method that is to be invoked in order to release\r\n        // used resources such as memory.\r\n        if (mediaStream.release) {\r\n            mediaStream.release();\r\n        }\r\n\r\n        // if we have done createObjectURL, lets clean it\r\n        const url = mediaStream.jitsiObjectURL;\r\n\r\n        if (url) {\r\n            delete mediaStream.jitsiObjectURL;\r\n            URL.revokeObjectURL(url);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     * @returns {boolean}\r\n     */\r\n    isDesktopSharingEnabled() {\r\n        return screenObtainer.isSupported();\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\r\n     *      device\r\n     * @returns {Promise} - resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    setAudioOutputDevice(deviceId) {\r\n        if (!this.isDeviceChangeAvailable('output')) {\r\n            return Promise.reject(\r\n                new Error('Audio output device change is not supported'));\r\n        }\r\n\r\n        return featureDetectionAudioEl.setSinkId(deviceId)\r\n            .then(() => {\r\n                audioOutputDeviceId = deviceId;\r\n                audioOutputChanged = true;\r\n\r\n                logger.log(`Audio output device set to ${deviceId}`);\r\n\r\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                    deviceId);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sets the capture frame rate for desktop tracks.\r\n     *\r\n     * @param {number} maxFps - max fps to be used as the capture frame rate.\r\n     * @returns {void}\r\n     */\r\n    setDesktopSharingFrameRate(maxFps) {\r\n        screenObtainer.setDesktopSharingFrameRate(maxFps);\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, '' stands for default\r\n     * device\r\n     * @returns {string}\r\n     */\r\n    getAudioOutputDevice() {\r\n        return audioOutputDeviceId;\r\n    }\r\n\r\n    /**\r\n     * Returns list of available media devices if its obtained, otherwise an\r\n     * empty array is returned/\r\n     * @returns {Array} list of available media devices.\r\n     */\r\n    getCurrentlyAvailableMediaDevices() {\r\n        return availableDevices;\r\n    }\r\n\r\n    /**\r\n     * Returns whether available devices have permissions granted\r\n     * @returns {Boolean}\r\n     */\r\n    arePermissionsGrantedForAvailableDevices() {\r\n        return availableDevices.some(device => Boolean(device.label));\r\n    }\r\n\r\n    /**\r\n     * Returns event data for device to be reported to stats.\r\n     * @returns {MediaDeviceInfo} device.\r\n     */\r\n    getEventDataForActiveDevice(device) {\r\n        const deviceList = [];\r\n        const deviceData = {\r\n            'deviceId': device.deviceId,\r\n            'kind': device.kind,\r\n            'label': device.label,\r\n            'groupId': device.groupId\r\n        };\r\n\r\n        deviceList.push(deviceData);\r\n\r\n        return { deviceList };\r\n    }\r\n\r\n    /**\r\n     * Configures the given PeerConnection constraints to either enable or\r\n     * disable (according to the value of the 'enable' parameter) the\r\n     * 'googSuspendBelowMinBitrate' option.\r\n     * @param constraints the constraints on which to operate.\r\n     * @param enable {boolean} whether to enable or disable the suspend video\r\n     * option.\r\n     */\r\n    setSuspendVideo(constraints, enable) {\r\n        if (!constraints.optional) {\r\n            constraints.optional = [];\r\n        }\r\n\r\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\r\n        // that the elements of constraints.optional contain a single property).\r\n        constraints.optional\r\n            = constraints.optional.filter(\r\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\r\n\r\n        if (enable) {\r\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\r\n        }\r\n    }\r\n}\r\n\r\nconst rtcUtils = new RTCUtils();\r\n\r\n/**\r\n * Wraps original attachMediaStream function to set current audio output device\r\n * if this is supported.\r\n * @param {Function} origAttachMediaStream\r\n * @returns {Function}\r\n */\r\nfunction wrapAttachMediaStream(origAttachMediaStream) {\r\n    return function(element, stream) {\r\n        // eslint-disable-next-line prefer-rest-params\r\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\r\n\r\n        if (stream\r\n                && rtcUtils.isDeviceChangeAvailable('output')\r\n                && stream.getAudioTracks\r\n                && stream.getAudioTracks().length\r\n\r\n                // we skip setting audio output if there was no explicit change\r\n                && audioOutputChanged) {\r\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\r\n                .catch(function(ex) {\r\n                    const err\r\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\r\n\r\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\r\n                        promise: this, // eslint-disable-line no-invalid-this\r\n                        reason: err\r\n                    });\r\n\r\n                    logger.warn(\r\n                        'Failed to set audio output device for the element.'\r\n                            + ' Default audio output device will be used'\r\n                            + ' instead',\r\n                        element,\r\n                        err);\r\n                });\r\n        }\r\n\r\n        return res;\r\n    };\r\n}\r\n\r\nexport default rtcUtils;\r\n","/**\r\n * This utility class defines custom onerror and onunhandledrejection functions.\r\n * The custom error handlers respect the previously-defined error handlers.\r\n * GlobalOnErrorHandler class provides utilities to add many custom error\r\n * handlers and to execute the error handlers directly.\r\n */\r\n\r\n\r\n/**\r\n * List with global error handlers that will be executed.\r\n */\r\nconst handlers = [];\r\n\r\n// If an old handler exists, also fire its events.\r\nconst oldOnErrorHandler = window.onerror;\r\n\r\n/**\r\n * Custom error handler that calls the old global error handler and executes\r\n * all handlers that were previously added.\r\n */\r\nfunction JitsiGlobalErrorHandler(...args) {\r\n    handlers.forEach(handler => handler(...args));\r\n    oldOnErrorHandler && oldOnErrorHandler(...args);\r\n}\r\n\r\n// If an old handler exists, also fire its events.\r\nconst oldOnUnhandledRejection = window.onunhandledrejection;\r\n\r\n/**\r\n * Custom handler that calls the old global handler and executes all handlers\r\n * that were previously added. This handler handles rejected Promises.\r\n */\r\nfunction JitsiGlobalUnhandledRejection(event) {\r\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\r\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\r\n}\r\n\r\n// Setting the custom error handlers.\r\nwindow.onerror = JitsiGlobalErrorHandler;\r\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\r\n\r\nconst GlobalOnErrorHandler = {\r\n    /**\r\n     * Adds new error handlers.\r\n     * @param handler the new handler.\r\n     */\r\n    addHandler(handler) {\r\n        handlers.push(handler);\r\n    },\r\n\r\n    /**\r\n     * Calls the global error handler if there is one.\r\n     * @param error the error to pass to the error handler\r\n     */\r\n    callErrorHandler(error) {\r\n        const errHandler = window.onerror;\r\n\r\n        if (!errHandler) {\r\n            return;\r\n        }\r\n        errHandler(null, null, null, null, error);\r\n    },\r\n\r\n    /**\r\n     * Calls the global rejection handler if there is one.\r\n     * @param error the error to pass to the rejection handler.\r\n     */\r\n    callUnhandledRejectionHandler(error) {\r\n        const errHandler = window.onunhandledrejection;\r\n\r\n        if (!errHandler) {\r\n            return;\r\n        }\r\n        errHandler(error);\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = GlobalOnErrorHandler;\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport { safeCounterIncrement } from '../util/MathUtil';\r\n\r\nimport BridgeChannel from './BridgeChannel';\r\nimport JitsiLocalTrack from './JitsiLocalTrack';\r\nimport RTCUtils from './RTCUtils';\r\nimport TraceablePeerConnection from './TraceablePeerConnection';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The counter used to generated id numbers assigned to peer connections\r\n * @type {number}\r\n */\r\nlet peerConnectionIdCounter = 0;\r\n\r\n/**\r\n * The counter used to generate id number for the local\r\n * <code>MediaStreamTrack</code>s.\r\n * @type {number}\r\n */\r\nlet rtcTrackIdCounter = 0;\r\n\r\n/**\r\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\r\n * about MedieaTracks.\r\n *\r\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\r\n * MediaTrack instances. Each can look like:\r\n * {{\r\n *     stream: MediaStream instance that holds a track with audio or video,\r\n *     track: MediaTrack within the MediaStream,\r\n *     videoType: \"camera\" or \"desktop\" or falsy,\r\n *     sourceId: ID of the desktopsharing source,\r\n *     sourceType: The desktopsharing source type,\r\n *     effects: Array of effect types\r\n * }}\r\n */\r\nfunction _createLocalTracks(mediaStreamMetaData = []) {\r\n    return mediaStreamMetaData.map(metaData => {\r\n        const {\r\n            sourceId,\r\n            sourceType,\r\n            stream,\r\n            track,\r\n            videoType,\r\n            effects\r\n        } = metaData;\r\n\r\n        const { deviceId, facingMode } = track.getSettings();\r\n\r\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\r\n        // so RTC does not need to handle ID management. This move would be\r\n        // safer to do once the old createLocalTracks is removed.\r\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\r\n\r\n        return new JitsiLocalTrack({\r\n            deviceId,\r\n            facingMode,\r\n            mediaType: track.kind,\r\n            rtcId: rtcTrackIdCounter,\r\n            sourceId,\r\n            sourceType,\r\n            stream,\r\n            track,\r\n            videoType: videoType || null,\r\n            effects\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport default class RTC extends Listenable {\r\n    /**\r\n     *\r\n     * @param conference\r\n     * @param options\r\n     */\r\n    constructor(conference, options = {}) {\r\n        super();\r\n        this.conference = conference;\r\n\r\n        /**\r\n         * A map of active <tt>TraceablePeerConnection</tt>.\r\n         * @type {Map.<number, TraceablePeerConnection>}\r\n         */\r\n        this.peerConnections = new Map();\r\n\r\n        this.localTracks = [];\r\n\r\n        this.options = options;\r\n\r\n        // BridgeChannel instance.\r\n        // @private\r\n        // @type {BridgeChannel}\r\n        this._channel = null;\r\n\r\n        /**\r\n         * The value specified to the last invocation of setLastN before the\r\n         * channel completed opening. If non-null, the value will be sent\r\n         * through a channel (once) as soon as it opens and will then be\r\n         * discarded.\r\n         * @private\r\n         * @type {number}\r\n         */\r\n        this._lastN = -1;\r\n\r\n        /**\r\n         * Defines the last N endpoints list. It can be null or an array once\r\n         * initialised with a channel last N event.\r\n         * @type {Array<string>|null}\r\n         * @private\r\n         */\r\n        this._lastNEndpoints = null;\r\n\r\n        this._forwardedSources = null;\r\n\r\n        /*\r\n         * Holds the sender video constraints signaled from the bridge.\r\n         */\r\n        this._senderVideoConstraints = {};\r\n\r\n        /**\r\n         * The number representing the maximum video height the local client\r\n         * should receive from the bridge.\r\n         *\r\n         * @type {number|undefined}\r\n         * @private\r\n         */\r\n        this._maxFrameHeight = undefined;\r\n\r\n        /**\r\n         * The endpoint ID of currently pinned participant or <tt>null</tt> if\r\n         * no user is pinned.\r\n         * @type {string|null}\r\n         * @private\r\n         */\r\n        this._pinnedEndpoint = null;\r\n\r\n        /**\r\n         * The endpoint IDs of currently selected participants.\r\n         *\r\n         * @type {Array}\r\n         * @private\r\n         */\r\n        this._selectedEndpoints = [];\r\n\r\n        // The last N change listener.\r\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\r\n\r\n        this._forwardedSourcesChangeListener = this._onForwardedSourcesChanged.bind(this);\r\n\r\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\r\n        this._updateAudioOutputForAudioTracks\r\n            = this._updateAudioOutputForAudioTracks.bind(this);\r\n\r\n        this._videoType = 'none';\r\n\r\n        // Switch audio output device on all remote audio tracks. Local audio\r\n        // tracks handle this event by themselves.\r\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\r\n            RTCUtils.addListener(\r\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._updateAudioOutputForAudioTracks\r\n            );\r\n\r\n            RTCUtils.addListener(\r\n                RTCEvents.DEVICE_LIST_CHANGED,\r\n                this._onDeviceListChanged\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes any listeners and stored state from this {@code RTC} instance.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    destroy() {\r\n        RTCUtils.removeListener(\r\n            RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n            this._updateAudioOutputForAudioTracks\r\n        );\r\n\r\n        RTCUtils.removeListener(\r\n            RTCEvents.DEVICE_LIST_CHANGED,\r\n            this._onDeviceListChanged\r\n        );\r\n\r\n        this.removeListener(\r\n            RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n            this._lastNChangeListener\r\n        );\r\n\r\n        if (this._channelOpenListener) {\r\n            this.removeListener(\r\n                RTCEvents.DATA_CHANNEL_OPEN,\r\n                this._channelOpenListener\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exposes the private helper for converting a WebRTC MediaStream to a\r\n     * JitsiLocalTrack.\r\n     *\r\n     * @param {Array<Object>} tracksInfo\r\n     * @returns {Array<JitsiLocalTrack>}\r\n     */\r\n    static createLocalTracks(tracksInfo) {\r\n        return _createLocalTracks(tracksInfo);\r\n    }\r\n\r\n    /**\r\n     * Creates the local MediaStreams.\r\n     * @param {object} [options] Optional parameters.\r\n     * @param {array} options.devices The devices that will be requested.\r\n     * @param {string} options.resolution Resolution constraints.\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @returns {*} Promise object that will receive the new JitsiTracks\r\n     */\r\n    static obtainAudioAndVideoPermissions(options) {\r\n        return RTCUtils.obtainAudioAndVideoPermissions(options)\r\n            .then(tracksInfo => _createLocalTracks(tracksInfo));\r\n    }\r\n\r\n    /**\r\n     * Initializes the bridge channel of this instance.\r\n     * At least one of both, peerconnection or wsUrl parameters, must be\r\n     * given.\r\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\r\n     * instance.\r\n     * @param {string} [wsUrl] WebSocket URL.\r\n     */\r\n    initializeBridgeChannel(peerconnection, wsUrl) {\r\n        this._channel = new BridgeChannel(peerconnection, wsUrl, this.eventEmitter);\r\n\r\n        this._channelOpenListener = () => {\r\n            const logError = (error, msgType, value) => {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(`Cannot send ${msgType}(${JSON.stringify(value)}) endpoint message`, error);\r\n            };\r\n\r\n            // When the channel becomes available, tell the bridge about video selections so that it can do adaptive\r\n            // simulcast, we want the notification to trigger even if userJid is undefined, or null.\r\n            if (this._receiverVideoConstraints) {\r\n                try {\r\n                    this._channel.sendNewReceiverVideoConstraintsMessage(this._receiverVideoConstraints);\r\n                } catch (error) {\r\n                    logError(error, 'ReceiverVideoConstraints', this._receiverVideoConstraints);\r\n                }\r\n            }\r\n            if (this._selectedEndpoints) {\r\n                try {\r\n                    this._channel.sendSelectedEndpointsMessage(this._selectedEndpoints);\r\n                } catch (error) {\r\n                    logError(error, 'SelectedEndpointsChangedEvent', this._selectedEndpoints);\r\n                }\r\n            }\r\n            if (typeof this._maxFrameHeight !== 'undefined') {\r\n                try {\r\n                    this._channel.sendReceiverVideoConstraintMessage(this._maxFrameHeight);\r\n                } catch (error) {\r\n                    logError(error, 'ReceiverVideoConstraint', this._maxFrameHeight);\r\n                }\r\n            }\r\n            if (typeof this._lastN !== 'undefined' && this._lastN !== -1) {\r\n                try {\r\n                    this._channel.sendSetLastNMessage(this._lastN);\r\n                } catch (error) {\r\n                    logError(error, 'LastNChangedEvent', this._lastN);\r\n                }\r\n            }\r\n            if (!FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                try {\r\n                    this._channel.sendVideoTypeMessage(this._videoType);\r\n                } catch (error) {\r\n                    logError(error, 'VideoTypeMessage', this._videoType);\r\n                }\r\n            }\r\n        };\r\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN, this._channelOpenListener);\r\n\r\n        // Add Last N change listener.\r\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED, this._lastNChangeListener);\r\n\r\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n            // Add forwarded sources change listener.\r\n            this.addListener(RTCEvents.FORWARDED_SOURCES_CHANGED, this._forwardedSourcesChangeListener);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the list of known audio and video devices has\r\n     * been updated. Attempts to update the known available audio output\r\n     * devices.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onDeviceListChanged() {\r\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\r\n    }\r\n\r\n    /**\r\n     * Notifies this instance that the sender video constraints signaled from the bridge have changed.\r\n     *\r\n     * @param {Object} senderVideoConstraints the sender video constraints from the bridge.\r\n     * @private\r\n     */\r\n    _senderVideoConstraintsChanged(senderVideoConstraints) {\r\n        logger.info(`Received remote max frame height of ${senderVideoConstraints} on the bridge channel`);\r\n        this._senderVideoConstraints = senderVideoConstraints;\r\n        this.eventEmitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED);\r\n    }\r\n\r\n    /**\r\n     * Receives events when Last N had changed.\r\n     * @param {array} lastNEndpoints The new Last N endpoints.\r\n     * @private\r\n     */\r\n    _onLastNChanged(lastNEndpoints = []) {\r\n        const oldLastNEndpoints = this._lastNEndpoints || [];\r\n        let leavingLastNEndpoints = [];\r\n        let enteringLastNEndpoints = [];\r\n\r\n        this._lastNEndpoints = lastNEndpoints;\r\n\r\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\r\n            id => !this.isInLastN(id));\r\n\r\n        enteringLastNEndpoints = lastNEndpoints.filter(\r\n            id => oldLastNEndpoints.indexOf(id) === -1);\r\n\r\n        this.conference.eventEmitter.emit(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            leavingLastNEndpoints,\r\n            enteringLastNEndpoints);\r\n    }\r\n\r\n    /**\r\n     * Receives events when forwarded sources had changed.\r\n     *\r\n     * @param {array} forwardedSources The new forwarded sources.\r\n     * @private\r\n     */\r\n    _onForwardedSourcesChanged(forwardedSources = []) {\r\n        const oldForwardedSources = this._forwardedSources || [];\r\n        let leavingForwardedSources = [];\r\n        let enteringForwardedSources = [];\r\n\r\n        this._forwardedSources = forwardedSources;\r\n\r\n        leavingForwardedSources = oldForwardedSources.filter(sourceName => !this.isInForwardedSources(sourceName));\r\n\r\n        enteringForwardedSources = forwardedSources.filter(\r\n            sourceName => oldForwardedSources.indexOf(sourceName) === -1);\r\n\r\n        this.conference.eventEmitter.emit(\r\n            JitsiConferenceEvents.FORWARDED_SOURCES_CHANGED,\r\n            leavingForwardedSources,\r\n            enteringForwardedSources,\r\n            Date.now());\r\n    }\r\n\r\n    /**\r\n     * Should be called when current media session ends and after the\r\n     * PeerConnection has been closed using PeerConnection.close() method.\r\n     */\r\n    onCallEnded() {\r\n        if (this._channel) {\r\n            // The BridgeChannel is not explicitly closed as the PeerConnection\r\n            // is closed on call ended which triggers datachannel onclose\r\n            // events. If using a WebSocket, the channel must be closed since\r\n            // it is not managed by the PeerConnection.\r\n            // The reference is cleared to disable any logic related to the\r\n            // channel.\r\n            if (this._channel && this._channel.mode === 'websocket') {\r\n                this._channel.close();\r\n            }\r\n\r\n            this._channel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the capture frame rate to be used for desktop tracks.\r\n     *\r\n     * @param {number} maxFps framerate to be used for desktop track capture.\r\n     */\r\n    setDesktopSharingFrameRate(maxFps) {\r\n        RTCUtils.setDesktopSharingFrameRate(maxFps);\r\n    }\r\n\r\n    /**\r\n     * Sets the receiver video constraints that determine how bitrate is allocated to each of the video streams\r\n     * requested from the bridge. The constraints are cached and sent through the bridge channel once the channel\r\n     * is established.\r\n     * @param {*} constraints\r\n     */\r\n     setNewReceiverVideoConstraints(constraints) {\r\n        this._receiverVideoConstraints = constraints;\r\n\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendNewReceiverVideoConstraintsMessage(constraints);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum video size the local participant should receive from\r\n     * remote participants. Will cache the value and send it through the channel\r\n     * once it is created.\r\n     *\r\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\r\n     * this receiver is willing to receive.\r\n     * @returns {void}\r\n     */\r\n    setReceiverVideoConstraint(maxFrameHeight) {\r\n        this._maxFrameHeight = maxFrameHeight;\r\n\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the video type and availability for the local video source.\r\n     *\r\n     * @param {string} videoType 'camera' for camera, 'desktop' for screenshare and\r\n     * 'none' for when local video source is muted or removed from the peerconnection.\r\n     * @returns {void}\r\n     */\r\n     setVideoType(videoType) {\r\n        if (this._videoType !== videoType) {\r\n            this._videoType = videoType;\r\n\r\n            if (this._channel && this._channel.isOpen()) {\r\n                this._channel.sendVideoTypeMessage(videoType);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the track's  video type to the JVB.\r\n     * @param {SourceName} sourceName - the track's source name.\r\n     * @param {BridgeVideoType} videoType - the track's video type.\r\n     */\r\n    sendSourceVideoType(sourceName, videoType) {\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendSourceVideoTypeMessage(sourceName, videoType);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elects the participants with the given ids to be the selected\r\n     * participants in order to always receive video for this participant (even\r\n     * when last n is enabled). If there is no channel we store it and send it\r\n     * through the channel once it is created.\r\n     *\r\n     * @param {Array<string>} ids - The user ids.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails.\r\n     * @returns {void}\r\n     */\r\n    selectEndpoints(ids) {\r\n        this._selectedEndpoints = ids;\r\n\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendSelectedEndpointsMessage(ids);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elects the participant with the given id to be the pinned participant in\r\n     * order to always receive video for this participant (even when last n is\r\n     * enabled).\r\n     * @param {stirng} id The user id.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails.\r\n     */\r\n    pinEndpoint(id) {\r\n        // Cache the value if channel is missing, till we open it.\r\n        this._pinnedEndpoint = id;\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendPinnedEndpointMessage(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param eventType\r\n     * @param listener\r\n     */\r\n    static addListener(eventType, listener) {\r\n        RTCUtils.addListener(eventType, listener);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param eventType\r\n     * @param listener\r\n     */\r\n    static removeListener(eventType, listener) {\r\n        RTCUtils.removeListener(eventType, listener);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param options\r\n     */\r\n    static init(options = {}) {\r\n        this.options = options;\r\n\r\n        return RTCUtils.init(this.options);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>TraceablePeerConnection</tt>\r\n     * @param {SignalingLayer} signaling The signaling layer that will\r\n     *      provide information about the media or participants which is not\r\n     *      carried over SDP.\r\n     * @param {object} iceConfig An object describing the ICE config like\r\n     *      defined in the WebRTC specification.\r\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\r\n     *      in a peer to peer type of session.\r\n     * @param {object} options The config options.\r\n     * @param {boolean} options.enableInsertableStreams - Set to true when the insertable streams constraints is to be\r\n     * enabled on the PeerConnection.\r\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\r\n     *      the simulcast.\r\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\r\n     *      RTX.\r\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\r\n     *      disabled by removing it from the SDP.\r\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\r\n     *      preferred over other video codecs.\r\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\r\n     * @return {TraceablePeerConnection}\r\n     */\r\n    createPeerConnection(signaling, pcConfig, isP2P, options) {\r\n        const pcConstraints = JSON.parse(JSON.stringify(RTCUtils.pcConstraints));\r\n\r\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\r\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\r\n\r\n            Statistics.analytics.addPermanentProperties(\r\n                { abtestSuspendVideo: options.abtestSuspendVideo });\r\n        }\r\n\r\n        if (options.enableInsertableStreams) {\r\n            logger.debug('E2EE - setting insertable streams constraints');\r\n            pcConfig.encodedInsertableStreams = true;\r\n        }\r\n\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n        pcConfig.sdpSemantics = 'unified-plan';\r\n\r\n        if (browser.supportsSdpSemantics()) {\r\n            logger.debug('WebRTC application is running in plan-b mode');\r\n            pcConfig.sdpSemantics = 'plan-b';\r\n        }\r\n\r\n        if (options.forceTurnRelay) {\r\n            pcConfig.iceTransportPolicy = 'relay';\r\n        }\r\n\r\n        // Set the RTCBundlePolicy to max-bundle so that only one set of ice candidates is generated.\r\n        // The default policy generates separate ice candidates for audio and video connections.\r\n        // This change is necessary for Unified plan to work properly on Chrome and Safari.\r\n        pcConfig.bundlePolicy = 'max-bundle';\r\n\r\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\r\n\r\n        const newConnection\r\n            = new TraceablePeerConnection(\r\n                this,\r\n                peerConnectionIdCounter,\r\n                signaling,\r\n                pcConfig, pcConstraints,\r\n                isP2P, options);\r\n\r\n        this.peerConnections.set(newConnection.id, newConnection);\r\n\r\n        return newConnection;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Removed given peer connection from this RTC module instance.\r\n     * @param {TraceablePeerConnection} traceablePeerConnection\r\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\r\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\r\n     * this RTC instance.\r\n     */\r\n    _removePeerConnection(traceablePeerConnection) {\r\n        const id = traceablePeerConnection.id;\r\n\r\n        if (this.peerConnections.has(id)) {\r\n            // NOTE Remote tracks are not removed here.\r\n            this.peerConnections.delete(id);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param track\r\n     */\r\n    addLocalTrack(track) {\r\n        if (!track) {\r\n            throw new Error('track must not be null nor undefined');\r\n        }\r\n\r\n        this.localTracks.push(track);\r\n\r\n        track.conference = this.conference;\r\n    }\r\n\r\n    /**\r\n     * Returns the current value for \"lastN\" - the amount of videos are going\r\n     * to be delivered. When set to -1 for unlimited or all available videos.\r\n     * @return {number}\r\n     */\r\n    getLastN() {\r\n        return this._lastN;\r\n    }\r\n\r\n    /**\r\n     * @return {Object} The sender video constraints signaled from the brridge.\r\n     */\r\n    getSenderVideoConstraints() {\r\n        return this._senderVideoConstraints;\r\n    }\r\n    \r\n    getForwardedSources() {\r\n        return this._forwardedSources;\r\n    }\r\n\r\n    /**\r\n     * Get local video track.\r\n     * @returns {JitsiLocalTrack|undefined}\r\n     */\r\n    getLocalVideoTrack() {\r\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\r\n\r\n\r\n        return localVideo.length ? localVideo[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns all the local video tracks.\r\n     * @returns {Array<JitsiLocalTrack>}\r\n     */\r\n    getLocalVideoTracks() {\r\n        return this.getLocalTracks(MediaType.VIDEO);\r\n    }\r\n\r\n    /**\r\n     * Get local audio track.\r\n     * @returns {JitsiLocalTrack|undefined}\r\n     */\r\n    getLocalAudioTrack() {\r\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\r\n\r\n\r\n        return localAudio.length ? localAudio[0] : undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns the endpoint id for the local user.\r\n     * @returns {string}\r\n     */\r\n    getLocalEndpointId() {\r\n        return this.conference.myUserId();\r\n    }\r\n\r\n    /**\r\n     * Returns the local tracks of the given media type, or all local tracks if\r\n     * no specific type is given.\r\n     * @param {MediaType} [mediaType] Optional media type filter.\r\n     * (audio or video).\r\n     */\r\n    getLocalTracks(mediaType) {\r\n        let tracks = this.localTracks.slice();\r\n\r\n        if (mediaType !== undefined) {\r\n            tracks = tracks.filter(\r\n                track => track.getType() === mediaType);\r\n        }\r\n\r\n        return tracks;\r\n    }\r\n\r\n    /**\r\n     * Obtains all remote tracks currently known to this RTC module instance.\r\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\r\n     *      by their media type if this argument is specified.\r\n     * @return {Array<JitsiRemoteTrack>}\r\n     */\r\n    getRemoteTracks(mediaType) {\r\n        let remoteTracks = [];\r\n\r\n        for (const tpc of this.peerConnections.values()) {\r\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\r\n\r\n            if (pcRemoteTracks) {\r\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\r\n            }\r\n        }\r\n\r\n        return remoteTracks;\r\n    }\r\n\r\n    /**\r\n     * Set mute for all local audio streams attached to the conference.\r\n     * @param value The mute value.\r\n     * @returns {Promise}\r\n     */\r\n    setAudioMute(value) {\r\n        const mutePromises = [];\r\n\r\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\r\n            // this is a Promise\r\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\r\n        });\r\n\r\n        // We return a Promise from all Promises so we can wait for their\r\n        // execution.\r\n        return Promise.all(mutePromises);\r\n    }\r\n\r\n    /**\r\n    * Set mute for all local video streams attached to the conference.\r\n    * @param value The mute value.\r\n    * @returns {Promise}\r\n    */\r\n    setVideoMute(value) {\r\n        const mutePromises = [];\r\n\r\n        this.getLocalTracks(MediaType.VIDEO).concat(this.getLocalTracks(MediaType.PRESENTER))\r\n            .forEach(videoTrack => {\r\n                // this is a Promise\r\n                mutePromises.push(value ? videoTrack.mute() : videoTrack.unmute());\r\n            });\r\n\r\n        // We return a Promise from all Promises so we can wait for their\r\n        // execution.\r\n        return Promise.all(mutePromises);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param track\r\n     */\r\n    removeLocalTrack(track) {\r\n        const pos = this.localTracks.indexOf(track);\r\n\r\n        if (pos === -1) {\r\n            return;\r\n        }\r\n\r\n        this.localTracks.splice(pos, 1);\r\n    }\r\n\r\n    /**\r\n     * Removes all JitsiRemoteTracks associated with given MUC nickname\r\n     * (resource part of the JID). Returns array of removed tracks.\r\n     *\r\n     * @param {string} Owner The resource part of the MUC JID.\r\n     * @returns {JitsiRemoteTrack[]}\r\n     */\r\n    removeRemoteTracks(owner) {\r\n        let removedTracks = [];\r\n\r\n        for (const tpc of this.peerConnections.values()) {\r\n            const pcRemovedTracks = tpc.removeRemoteTracks(owner);\r\n\r\n            removedTracks = removedTracks.concat(pcRemovedTracks);\r\n        }\r\n\r\n        logger.debug(\r\n            `Removed remote tracks for ${owner}`\r\n                + ` count: ${removedTracks.length}`);\r\n\r\n        return removedTracks;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    static getPCConstraints(isP2P) {\r\n        const pcConstraints\r\n            = isP2P ? RTCUtils.p2pPcConstraints : RTCUtils.pcConstraints;\r\n\r\n        if (!pcConstraints) {\r\n            return {};\r\n        }\r\n\r\n        return JSON.parse(JSON.stringify(pcConstraints));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param elSelector\r\n     * @param stream\r\n     */\r\n    static attachMediaStream(elSelector, stream) {\r\n        return RTCUtils.attachMediaStream(elSelector, stream);\r\n    }\r\n\r\n    /**\r\n     * Returns the id of the given stream.\r\n     * @param {MediaStream} stream\r\n     */\r\n    static getStreamID(stream) {\r\n        return RTCUtils.getStreamID(stream);\r\n    }\r\n\r\n    /**\r\n     * Returns the id of the given track.\r\n     * @param {MediaStreamTrack} track\r\n     */\r\n    static getTrackID(track) {\r\n        return RTCUtils.getTrackID(track);\r\n    }\r\n\r\n    /**\r\n     * Returns true if retrieving the the list of input devices is supported\r\n     * and false if not.\r\n     */\r\n    static isDeviceListAvailable() {\r\n        return RTCUtils.isDeviceListAvailable();\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @param {string} [deviceType] Type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    static isDeviceChangeAvailable(deviceType) {\r\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the current execution environment supports WebRTC (for\r\n     * use within this library).\r\n     *\r\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\r\n     * execution environment (for use within this library); {@code false},\r\n     * otherwise.\r\n     */\r\n    static isWebRtcSupported() {\r\n        return browser.isSupported();\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, '' stands for default\r\n     * device\r\n     * @returns {string}\r\n     */\r\n    static getAudioOutputDevice() {\r\n        return RTCUtils.getAudioOutputDevice();\r\n    }\r\n\r\n    /**\r\n     * Returns list of available media devices if its obtained, otherwise an\r\n     * empty array is returned/\r\n     * @returns {array} list of available media devices.\r\n     */\r\n    static getCurrentlyAvailableMediaDevices() {\r\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\r\n    }\r\n\r\n    /**\r\n     * Returns whether available devices have permissions granted\r\n     * @returns {Boolean}\r\n     */\r\n    static arePermissionsGrantedForAvailableDevices() {\r\n        return RTCUtils.arePermissionsGrantedForAvailableDevices();\r\n    }\r\n\r\n    /**\r\n     * Returns event data for device to be reported to stats.\r\n     * @returns {MediaDeviceInfo} device.\r\n     */\r\n    static getEventDataForActiveDevice(device) {\r\n        return RTCUtils.getEventDataForActiveDevice(device);\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId Id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices().\r\n     * @returns {Promise} resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    static setAudioOutputDevice(deviceId) {\r\n        return RTCUtils.setAudioOutputDevice(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\r\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\r\n     * \"mixed\" JVB stream.\r\n     *\r\n     * Clients that implement Unified Plan, such as Firefox use recvonly\r\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\r\n     * to Plan B where there are only 3 channels: audio, video and data.\r\n     *\r\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\r\n     * @returns {boolean}\r\n     */\r\n    static isUserStream(stream) {\r\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\r\n     * ID is considered a valid \"user\" stream which means that it's not a\r\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\r\n     *\r\n     * Clients that implement Unified Plan, such as Firefox use recvonly\r\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\r\n     * to Plan B where there are only 3 channels: audio, video and data.\r\n     *\r\n     * @param {string} streamId The id of WebRTC MediaStream.\r\n     * @returns {boolean}\r\n     */\r\n    static isUserStreamById(streamId) {\r\n        return streamId && streamId !== 'mixedmslabel'\r\n            && streamId !== 'default';\r\n    }\r\n\r\n    /**\r\n     * Allows to receive list of available cameras/microphones.\r\n     * @param {function} callback Would receive array of devices as an\r\n     *      argument.\r\n     */\r\n    static enumerateDevices(callback) {\r\n        RTCUtils.enumerateDevices(callback);\r\n    }\r\n\r\n    /**\r\n     * A method to handle stopping of the stream.\r\n     * One point to handle the differences in various implementations.\r\n     * @param {MediaStream} mediaStream MediaStream object to stop.\r\n     */\r\n    static stopMediaStream(mediaStream) {\r\n        RTCUtils.stopMediaStream(mediaStream);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     * @returns {boolean}\r\n     */\r\n    static isDesktopSharingEnabled() {\r\n        return RTCUtils.isDesktopSharingEnabled();\r\n    }\r\n\r\n    /**\r\n     * Closes the currently opened bridge channel.\r\n     */\r\n    closeBridgeChannel() {\r\n        if (this._channel) {\r\n            this._channel.close();\r\n            this._channel = null;\r\n\r\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n                this._lastNChangeListener);\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     *\r\n     * @param {TraceablePeerConnection} tpc\r\n     * @param {number} ssrc\r\n     * @param {number} audioLevel\r\n     * @param {boolean} isLocal\r\n     */\r\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\r\n        const track = tpc.getTrackBySSRC(ssrc);\r\n\r\n        if (!track) {\r\n            return;\r\n        } else if (!track.isAudioTrack()) {\r\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\r\n\r\n            return;\r\n        } else if (track.isLocal() !== isLocal) {\r\n            logger.error(\r\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\r\n        }\r\n\r\n        track.setAudioLevel(audioLevel, tpc);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Sends message via the bridge channel.\r\n     * @param {string} to The id of the endpoint that should receive the\r\n     *      message. If \"\" the message will be sent to all participants.\r\n     * @param {object} payload The payload of the message.\r\n     * @throws NetworkError or InvalidStateError or Error if the operation\r\n     * fails or there is no data channel created.\r\n     */\r\n    sendChannelMessage(to, payload) {\r\n        if (this._channel) {\r\n            this._channel.sendMessage(to, payload);\r\n        } else {\r\n            throw new Error('Channel support is disabled!');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the local stats via the bridge channel.\r\n     * @param {Object} payload The payload of the message.\r\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\r\n     */\r\n    sendEndpointStatsMessage(payload) {\r\n        if (this._channel && this._channel.isOpen()) {\r\n            this._channel.sendEndpointStatsMessage(payload);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Selects a new value for \"lastN\". The requested amount of videos are going\r\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\r\n     * all available videos.\r\n     * @param {number} value the new value for lastN.\r\n     */\r\n    setLastN(value) {\r\n        if (this._lastN !== value) {\r\n            this._lastN = value;\r\n            if (this._channel && this._channel.isOpen()) {\r\n                this._channel.sendSetLastNMessage(value);\r\n            }\r\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates if the endpoint id is currently included in the last N.\r\n     * @param {string} id The endpoint id that we check for last N.\r\n     * @returns {boolean} true if the endpoint id is in the last N or if we\r\n     * don't have bridge channel support, otherwise we return false.\r\n     */\r\n    isInLastN(id) {\r\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\r\n            || this._lastNEndpoints.indexOf(id) > -1;\r\n    }\r\n\r\n    /**\r\n     * Indicates if the source name is currently included in the forwarded sources.\r\n     *\r\n     * @param {string} sourceName The source name that we check for forwarded sources.\r\n     * @returns {boolean} true if the source name is in the forwarded sources or if we don't have bridge channel\r\n     * support, otherwise we return false.\r\n     */\r\n    isInForwardedSources(sourceName) {\r\n        return !this._forwardedSources // forwardedSources not initialised yet.\r\n            || this._forwardedSources.indexOf(sourceName) > -1;\r\n    }\r\n\r\n    /**\r\n     * Updates the target audio output device for all remote audio tracks.\r\n     *\r\n     * @param {string} deviceId - The device id of the audio ouput device to\r\n     * use for all remote tracks.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _updateAudioOutputForAudioTracks(deviceId) {\r\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\r\n\r\n        for (const track of remoteAudioTracks) {\r\n            track.setAudioOutput(deviceId);\r\n        }\r\n    }\r\n}\r\n","/**\r\n * The errors for the JitsiTrack objects.\r\n */\r\n\r\nimport { consoleTransport } from \"jitsi-meet-logger/lib/Logger\";\r\n\r\n/**\r\n * An error which indicates that some of requested constraints in\r\n * getUserMedia call were not satisfied.\r\n */\r\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\r\n\r\n/**\r\n * A generic error which indicates an error occurred while selecting\r\n * a DesktopCapturerSource from the electron app.\r\n */\r\nexport const ELECTRON_DESKTOP_PICKER_ERROR\r\n    = 'gum.electron_desktop_picker_error';\r\n\r\n/**\r\n * An error which indicates a custom desktop picker could not be detected\r\n * for the electron app.\r\n */\r\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\r\n    = 'gum.electron_desktop_picker_not_found';\r\n\r\n/**\r\n * Generic getUserMedia error.\r\n */\r\nexport const GENERAL = 'gum.general';\r\n\r\n/**\r\n * An error which indicates that requested device was not found.\r\n */\r\nexport const NOT_FOUND = 'gum.not_found';\r\n\r\n/**\r\n * An error which indicates that user denied permission to share requested\r\n * device.\r\n */\r\nexport const PERMISSION_DENIED = 'gum.permission_denied';\r\n\r\n/**\r\n * Generic error for screensharing failure.\r\n */\r\nexport const SCREENSHARING_GENERIC_ERROR\r\n    = 'gum.screensharing_generic_error';\r\n\r\n/**\r\n * An error which indicates that user canceled screen sharing window\r\n * selection dialog.\r\n */\r\nexport const SCREENSHARING_USER_CANCELED\r\n    = 'gum.screensharing_user_canceled';\r\n\r\n/**\r\n * An error which indicates that track has been already disposed and cannot\r\n * be longer used.\r\n */\r\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\r\n\r\n/**\r\n * An error which indicates that track has no MediaStream associated.\r\n */\r\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\r\n\r\n/**\r\n * An error which indicates that requested video resolution is not supported\r\n * by a webcam.\r\n */\r\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\r\n\r\n/**\r\n     * Indicates that the timeout passed to the obtainAudioAndVideoPermissions has expired without GUM resolving.\r\n     */\r\nexport const TIMEOUT = 'gum.timeout';\r\n","/**\r\n * The media track was removed to the conference.\r\n */\r\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\r\n\r\n/**\r\n * Audio levels of a this track was changed.\r\n * The first argument is a number with audio level value in range [0, 1].\r\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\r\n * connection which measured the audio level (one audio track can be added\r\n * to multiple peer connection at the same time). This argument is optional for\r\n * local tracks for which we can measure audio level without the peer\r\n * connection (the value will be <tt>undefined</tt>).\r\n *\r\n * NOTE The second argument should be treated as library internal and can be\r\n * removed at any time.\r\n */\r\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\r\n\r\n/**\r\n * The audio output of the track was changed.\r\n */\r\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\r\n\r\n/**\r\n * A media track mute status was changed.\r\n */\r\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\r\n\r\n/**\r\n * The video type(\"camera\" or \"desktop\") of the track was changed.\r\n */\r\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\r\n\r\n/**\r\n * Indicates that the track is not receiving any data even though we expect it\r\n * to receive data (i.e. the stream is not stopped).\r\n */\r\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\r\n\r\n/**\r\n * Indicates that the local audio track is not receiving any audio input from\r\n * the microphone that is currently selected.\r\n */\r\nexport const NO_AUDIO_INPUT = 'track.no_audio_input';\r\n\r\nexport const TRACK_STREAMING_STATUS_CHANGED = 'track.streaming_status_changed';\r\n","/* global $ */\r\n\r\nimport clonedeep from 'lodash.clonedeep';\r\nimport transform from 'sdp-transform';\r\n\r\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\r\nimport browser from '../browser';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\n\r\nimport SDPUtil from './SDPUtil';\r\n\r\n/**\r\n *\r\n * @param sdp\r\n */\r\nexport default function SDP(sdp) {\r\n    const media = sdp.split('\\r\\nm=');\r\n\r\n    for (let i = 1, length = media.length; i < length; i++) {\r\n        let mediaI = `m=${media[i]}`;\r\n\r\n        if (i !== length - 1) {\r\n            mediaI += '\\r\\n';\r\n        }\r\n        media[i] = mediaI;\r\n    }\r\n    const session = `${media.shift()}\\r\\n`;\r\n\r\n    this.media = media;\r\n    this.raw = session + media.join('');\r\n    this.session = session;\r\n}\r\n\r\n/**\r\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\r\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\r\n * failure. The flag is used in the automated testing.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.failICE = false;\r\n\r\n/**\r\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.removeTcpCandidates = false;\r\n\r\n/**\r\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\r\n * @type {boolean}\r\n */\r\nSDP.prototype.removeUdpCandidates = false;\r\n\r\n/**\r\n * Adds a new m-line to the description so that a new local source can then be attached to the transceiver that gets\r\n * added after a reneogtiation cycle.\r\n *\r\n * @param {Mediatype} mediaType media type of the new source that is being added.\r\n */\r\nSDP.prototype.addMlineForNewLocalSource = function(mediaType) {\r\n    const mid = this.media.length;\r\n    const sdp = transform.parse(this.raw);\r\n    const mline = clonedeep(sdp.media.find(m => m.type === mediaType));\r\n\r\n    // Edit media direction, mid and remove the existing ssrc lines in the m-line.\r\n    mline.mid = mid;\r\n    mline.direction = MediaDirection.RECVONLY;\r\n\r\n    // Remove the ssrcs and source groups.\r\n    mline.msid = undefined;\r\n    mline.ssrcs = undefined;\r\n    mline.ssrcGroups = undefined;\r\n\r\n    sdp.media = sdp.media.concat(mline);\r\n\r\n    // We regenerate the BUNDLE group (since we added a new m-line)\r\n    sdp.groups.forEach(group => {\r\n        if (group.type === 'BUNDLE') {\r\n            const mids = group.mids.split(' ');\r\n\r\n            mids.push(mid);\r\n            group.mids = mids.join(' ');\r\n        }\r\n    });\r\n    this.raw = transform.write(sdp);\r\n};\r\n\r\n/**\r\n * Returns map of MediaChannel mapped per channel idx.\r\n */\r\nSDP.prototype.getMediaSsrcMap = function() {\r\n    const mediaSSRCs = {};\r\n\r\n    for (let mediaindex = 0; mediaindex < this.media.length; mediaindex++) {\r\n        const mid\r\n            = SDPUtil.parseMID(\r\n                SDPUtil.findLine(this.media[mediaindex], 'a=mid:'));\r\n        const media = {\r\n            mediaindex,\r\n            mid,\r\n            ssrcs: {},\r\n            ssrcGroups: []\r\n        };\r\n\r\n        mediaSSRCs[mediaindex] = media;\r\n\r\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc:').forEach(line => {\r\n            const linessrc = line.substring(7).split(' ')[0];\r\n\r\n            // allocate new ChannelSsrc\r\n\r\n            if (!media.ssrcs[linessrc]) {\r\n                media.ssrcs[linessrc] = {\r\n                    ssrc: linessrc,\r\n                    lines: []\r\n                };\r\n            }\r\n            media.ssrcs[linessrc].lines.push(line);\r\n        });\r\n        SDPUtil.findLines(this.media[mediaindex], 'a=ssrc-group:').forEach(line => {\r\n            const idx = line.indexOf(' ');\r\n            const semantics = line.substr(0, idx).substr(13);\r\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\r\n\r\n            if (ssrcs.length) {\r\n                media.ssrcGroups.push({\r\n                    semantics,\r\n                    ssrcs\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return mediaSSRCs;\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if this SDP contains given SSRC.\r\n * @param ssrc the ssrc to check.\r\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\r\n */\r\nSDP.prototype.containsSSRC = function(ssrc) {\r\n    // FIXME this code is really strange - improve it if you can\r\n    const medias = this.getMediaSsrcMap();\r\n    let result = false;\r\n\r\n    Object.keys(medias).forEach(mediaindex => {\r\n        if (result) {\r\n            return;\r\n        }\r\n        if (medias[mediaindex].ssrcs[ssrc]) {\r\n            result = true;\r\n        }\r\n    });\r\n\r\n    return result;\r\n};\r\n\r\n// add content's to a jingle element\r\nSDP.prototype.toJingle = function(elem, thecreator) {\r\n    // https://xmpp.org/extensions/xep-0338.html\r\n    SDPUtil.findLines(this.session, 'a=group:').forEach(line => {\r\n        const parts = line.split(' ');\r\n        const semantics = parts.shift().substr(8);\r\n\r\n        elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\r\n            semantics });\r\n        for (let j = 0; j < parts.length; j++) {\r\n            elem.c('content', { name: parts[j] }).up();\r\n        }\r\n        elem.up();\r\n    });\r\n\r\n    for (let i = 0; i < this.media.length; i++) {\r\n        const mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\r\n\r\n        if (!(mline.media === 'audio'\r\n              || mline.media === 'video'\r\n              || mline.media === 'application')) {\r\n            continue; // eslint-disable-line no-continue\r\n        }\r\n\r\n        let ssrc;\r\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\r\n\r\n        if (assrcline) {\r\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\r\n        } else {\r\n            ssrc = false;\r\n        }\r\n\r\n        elem.c('content', { creator: thecreator,\r\n            name: mline.media });\r\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\r\n\r\n        if (amidline) {\r\n            // prefer identifier from a=mid if present\r\n            const mid = SDPUtil.parseMID(amidline);\r\n\r\n            elem.attrs({ name: mid });\r\n        }\r\n\r\n        if (mline.media === 'audio' || mline.media === 'video') {\r\n            elem.c('description',\r\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\r\n                    media: mline.media });\r\n            if (ssrc) {\r\n                elem.attrs({ ssrc });\r\n            }\r\n            for (let j = 0; j < mline.fmt.length; j++) {\r\n                const rtpmap\r\n                    = SDPUtil.findLine(\r\n                        this.media[i],\r\n                        `a=rtpmap:${mline.fmt[j]}`);\r\n\r\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\r\n\r\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\r\n                // value=bar/>\r\n                const afmtpline\r\n                    = SDPUtil.findLine(\r\n                        this.media[i],\r\n                        `a=fmtp:${mline.fmt[j]}`);\r\n\r\n                if (afmtpline) {\r\n                    const fmtpParameters = SDPUtil.parseFmtp(afmtpline);\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    for (let k = 0; k < fmtpParameters.length; k++) {\r\n                        elem.c('parameter', fmtpParameters[k]).up();\r\n                    }\r\n                }\r\n\r\n                // XEP-0293 -- map a=rtcp-fb\r\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\r\n\r\n                elem.up();\r\n            }\r\n\r\n            if (ssrc) {\r\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\r\n\r\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\r\n                    const sourceName = SDPUtil.parseSourceNameLine(ssrcParameters);\r\n\r\n                    elem.c('source', {\r\n                        ssrc: availableSsrc,\r\n                        name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n\r\n                    const msid = SDPUtil.parseMSIDAttribute(ssrcParameters);\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    if (msid) {\r\n                        elem.c('parameter');\r\n                        elem.attrs({ name: 'msid' });\r\n                        elem.attrs({ value: msid });\r\n                        elem.up();\r\n                    }\r\n\r\n                    elem.up();\r\n                }\r\n\r\n                // XEP-0339 handle ssrc-group attributes\r\n                const ssrcGroupLines\r\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\r\n\r\n                ssrcGroupLines.forEach(line => {\r\n                    const idx = line.indexOf(' ');\r\n                    const semantics = line.substr(0, idx).substr(13);\r\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\r\n\r\n                    if (ssrcs.length) {\r\n                        elem.c('ssrc-group', { semantics,\r\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\r\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\r\n                        elem.up();\r\n                    }\r\n                });\r\n            }\r\n\r\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid:');\r\n\r\n            if (ridLines.length && browser.usesRidsForSimulcast()) {\r\n                // Map a line which looks like \"a=rid:2 send\" to just\r\n                // the rid (\"2\")\r\n                const rids = ridLines\r\n                    .map(ridLine => ridLine.split(':')[1])\r\n                    .map(ridInfo => ridInfo.split(' ')[0]);\r\n\r\n                rids.forEach(rid => {\r\n                    elem.c('source', {\r\n                        rid,\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n                    elem.up();\r\n                });\r\n                const unifiedSimulcast\r\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast:');\r\n\r\n                if (unifiedSimulcast) {\r\n                    elem.c('rid-group', {\r\n                        semantics: 'SIM',\r\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                    });\r\n                    rids.forEach(rid => {\r\n                        elem.c('source', { rid }).up();\r\n                    });\r\n                    elem.up();\r\n                }\r\n            }\r\n\r\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\r\n                elem.c('rtcp-mux').up();\r\n            }\r\n\r\n            // XEP-0293 -- map a=rtcp-fb:*\r\n            this.rtcpFbToJingle(i, elem, '*');\r\n\r\n            // XEP-0294\r\n            const extmapLines = SDPUtil.findLines(this.media[i], 'a=extmap:');\r\n\r\n            for (let j = 0; j < extmapLines.length; j++) {\r\n                const extmap = SDPUtil.parseExtmap(extmapLines[j]);\r\n\r\n                elem.c('rtp-hdrext', {\r\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\r\n                    uri: extmap.uri,\r\n                    id: extmap.value\r\n                });\r\n\r\n                // eslint-disable-next-line max-depth\r\n                if (extmap.hasOwnProperty('direction')) {\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    switch (extmap.direction) {\r\n                    case 'sendonly':\r\n                        elem.attrs({ senders: 'responder' });\r\n                        break;\r\n                    case 'recvonly':\r\n                        elem.attrs({ senders: 'initiator' });\r\n                        break;\r\n                    case 'sendrecv':\r\n                        elem.attrs({ senders: 'both' });\r\n                        break;\r\n                    case 'inactive':\r\n                        elem.attrs({ senders: 'none' });\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // TODO: handle params\r\n                elem.up();\r\n            }\r\n            elem.up(); // end of description\r\n        }\r\n\r\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\r\n        this.transportToJingle(i, elem);\r\n\r\n        const m = this.media[i];\r\n\r\n        if (SDPUtil.findLine(m, 'a=sendrecv', this.session)) {\r\n            elem.attrs({ senders: 'both' });\r\n        } else if (SDPUtil.findLine(m, 'a=sendonly', this.session)) {\r\n            elem.attrs({ senders: 'initiator' });\r\n        } else if (SDPUtil.findLine(m, 'a=recvonly', this.session)) {\r\n            elem.attrs({ senders: 'responder' });\r\n        } else if (SDPUtil.findLine(m, 'a=inactive', this.session)) {\r\n            elem.attrs({ senders: 'none' });\r\n        }\r\n\r\n        // Reject an m-line only when port is 0 and a=bundle-only is not present in the section.\r\n        // The port is automatically set to 0 when bundle-only is used.\r\n        if (mline.port === '0' && !SDPUtil.findLine(m, 'a=bundle-only', this.session)) {\r\n            // estos hack to reject an m-line\r\n            elem.attrs({ senders: 'rejected' });\r\n        }\r\n        elem.up(); // end of content\r\n    }\r\n    elem.up();\r\n\r\n    return elem;\r\n};\r\n\r\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\r\n    elem.c('transport');\r\n\r\n    // XEP-0343 DTLS/SCTP\r\n    const sctpport\r\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctp-port:', this.session);\r\n    const sctpmap\r\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', this.session);\r\n\r\n    if (sctpport) {\r\n        const sctpAttrs = SDPUtil.parseSCTPPort(sctpport);\r\n\r\n        elem.c('sctpmap', {\r\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\r\n            number: sctpAttrs, /* SCTP port */\r\n            protocol: 'webrtc-datachannel' /* protocol */\r\n        });\r\n\r\n        // The parser currently requires streams to be present\r\n        elem.attrs({ streams: 0 });\r\n        elem.up();\r\n    } else if (sctpmap) {\r\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\r\n\r\n        elem.c('sctpmap', {\r\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\r\n            number: sctpAttrs[0], /* SCTP port */\r\n            protocol: sctpAttrs[1] /* protocol */\r\n        });\r\n\r\n        // Optional stream count attribute\r\n        if (sctpAttrs.length > 2) {\r\n            elem.attrs({ streams: sctpAttrs[2] });\r\n        } else {\r\n            elem.attrs({ streams: 0 });\r\n        }\r\n        elem.up();\r\n    }\r\n\r\n    // XEP-0320\r\n    const fingerprints\r\n        = SDPUtil.findLines(\r\n            this.media[mediaindex],\r\n            'a=fingerprint:',\r\n            this.session);\r\n\r\n    fingerprints.forEach(line => {\r\n        const fingerprint = SDPUtil.parseFingerprint(line);\r\n\r\n        fingerprint.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\r\n        elem.c('fingerprint').t(fingerprint.fingerprint);\r\n        delete fingerprint.fingerprint;\r\n\r\n        const setupLine\r\n            = SDPUtil.findLine(\r\n                this.media[mediaindex],\r\n                'a=setup:',\r\n                this.session);\r\n\r\n        if (setupLine) {\r\n            fingerprint.setup = setupLine.substr(8);\r\n        }\r\n        elem.attrs(fingerprint);\r\n        elem.up(); // end of fingerprint\r\n    });\r\n    const iceParameters = SDPUtil.iceparams(this.media[mediaindex], this.session);\r\n\r\n    if (iceParameters) {\r\n        iceParameters.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n        elem.attrs(iceParameters);\r\n\r\n        // XEP-0176\r\n        const candidateLines\r\n            = SDPUtil.findLines(\r\n                this.media[mediaindex],\r\n                'a=candidate:',\r\n                this.session);\r\n\r\n        candidateLines.forEach(line => { // add any a=candidate lines\r\n            const candidate = SDPUtil.candidateToJingle(line);\r\n\r\n            if (this.failICE) {\r\n                candidate.ip = '1.1.1.1';\r\n            }\r\n            const protocol\r\n                = candidate && typeof candidate.protocol === 'string'\r\n                    ? candidate.protocol.toLowerCase()\r\n                    : '';\r\n\r\n            if ((this.removeTcpCandidates\r\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\r\n                || (this.removeUdpCandidates && protocol === 'udp')) {\r\n                return;\r\n            }\r\n            elem.c('candidate', candidate).up();\r\n        });\r\n    }\r\n    elem.up(); // end of transport\r\n};\r\n\r\n// XEP-0293\r\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\r\n    const lines\r\n        = SDPUtil.findLines(\r\n            this.media[mediaindex],\r\n            `a=rtcp-fb:${payloadtype}`);\r\n\r\n    lines.forEach(line => {\r\n        const feedback = SDPUtil.parseRTCPFB(line);\r\n\r\n        if (feedback.type === 'trr-int') {\r\n            elem.c('rtcp-fb-trr-int', {\r\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\r\n                value: feedback.params[0]\r\n            });\r\n            elem.up();\r\n        } else {\r\n            elem.c('rtcp-fb', {\r\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\r\n                type: feedback.type\r\n            });\r\n            if (feedback.params.length > 0) {\r\n                elem.attrs({ 'subtype': feedback.params[0] });\r\n            }\r\n            elem.up();\r\n        }\r\n    });\r\n};\r\n\r\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\r\n    let sdp = '';\r\n    const feedbackElementTrrInt\r\n        = elem.find(\r\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\r\n\r\n    if (feedbackElementTrrInt.length) {\r\n        sdp += 'a=rtcp-fb:* trr-int ';\r\n        if (feedbackElementTrrInt.attr('value')) {\r\n            sdp += feedbackElementTrrInt.attr('value');\r\n        } else {\r\n            sdp += '0';\r\n        }\r\n        sdp += '\\r\\n';\r\n    }\r\n\r\n    const feedbackElements = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\r\n\r\n    feedbackElements.each((_, fb) => {\r\n        sdp += `a=rtcp-fb:${payloadtype} ${fb.getAttribute('type')}`;\r\n        if (fb.hasAttribute('subtype')) {\r\n            sdp += ` ${fb.getAttribute('subtype')}`;\r\n        }\r\n        sdp += '\\r\\n';\r\n    });\r\n\r\n    return sdp;\r\n};\r\n\r\n// construct an SDP from a jingle stanza\r\nSDP.prototype.fromJingle = function(jingle) {\r\n    const sessionId = Date.now();\r\n\r\n    // Use a unique session id for every TPC.\r\n    this.raw = 'v=0\\r\\n'\r\n        + `o=- ${sessionId} 2 IN IP4 0.0.0.0\\r\\n`\r\n        + 's=-\\r\\n'\r\n        + 't=0 0\\r\\n';\r\n\r\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\r\n    // #section-8\r\n    const groups\r\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\r\n\r\n    if (groups.length) {\r\n        groups.each((idx, group) => {\r\n            const contents\r\n                = $(group)\r\n                    .find('>content')\r\n                    .map((_, content) => content.getAttribute('name'))\r\n                    .get();\r\n\r\n            if (contents.length > 0) {\r\n                this.raw\r\n                    += `a=group:${\r\n                        group.getAttribute('semantics')\r\n                            || group.getAttribute('type')} ${\r\n                        contents.join(' ')}\\r\\n`;\r\n            }\r\n        });\r\n    }\r\n\r\n    this.session = this.raw;\r\n    jingle.find('>content').each((_, content) => {\r\n        const m = this.jingle2media($(content));\r\n\r\n        this.media.push(m);\r\n    });\r\n\r\n    // reconstruct msid-semantic -- apparently not necessary\r\n    /*\r\n     var msid = SDPUtil.parseSSRC(this.raw);\r\n     if (msid.hasOwnProperty('mslabel')) {\r\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\r\n     }\r\n     */\r\n\r\n    this.raw = this.session + this.media.join('');\r\n};\r\n\r\n// translate a jingle content element into an an SDP media part\r\nSDP.prototype.jingle2media = function(content) {\r\n    const desc = content.find('>description');\r\n    const transport = content.find('>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\r\n    let sdp = '';\r\n    const sctp = transport.find(\r\n        '>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\r\n\r\n    const media = { media: desc.attr('media') };\r\n\r\n    media.port = '9';\r\n    if (content.attr('senders') === 'rejected') {\r\n        // estos hack to reject an m-line.\r\n        media.port = '0';\r\n    }\r\n    if (transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').length) {\r\n        media.proto = sctp.length ? 'UDP/DTLS/SCTP' : 'UDP/TLS/RTP/SAVPF';\r\n    } else {\r\n        media.proto = 'UDP/TLS/RTP/SAVPF';\r\n    }\r\n    if (sctp.length) {\r\n        sdp += `m=application ${media.port} UDP/DTLS/SCTP webrtc-datachannel\\r\\n`;\r\n        sdp += `a=sctp-port:${sctp.attr('number')}\\r\\n`;\r\n        sdp += 'a=max-message-size:262144\\r\\n';\r\n    } else {\r\n        media.fmt\r\n            = desc\r\n                .find('>payload-type')\r\n                .map((_, payloadType) => payloadType.getAttribute('id'))\r\n                .get();\r\n        sdp += `${SDPUtil.buildMLine(media)}\\r\\n`;\r\n    }\r\n\r\n    sdp += 'c=IN IP4 0.0.0.0\\r\\n';\r\n    if (!sctp.length) {\r\n        sdp += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\r\n    }\r\n\r\n    // XEP-0176 ICE parameters\r\n    if (transport.length) {\r\n        if (transport.attr('ufrag')) {\r\n            sdp += `${SDPUtil.buildICEUfrag(transport.attr('ufrag'))}\\r\\n`;\r\n        }\r\n        if (transport.attr('pwd')) {\r\n            sdp += `${SDPUtil.buildICEPwd(transport.attr('pwd'))}\\r\\n`;\r\n        }\r\n        transport.find('>fingerprint[xmlns=\"urn:xmpp:jingle:apps:dtls:0\"]').each((_, fingerprint) => {\r\n            sdp += `a=fingerprint:${fingerprint.getAttribute('hash')}`;\r\n            sdp += ` ${$(fingerprint).text()}`;\r\n            sdp += '\\r\\n';\r\n            if (fingerprint.hasAttribute('setup')) {\r\n                sdp += `a=setup:${fingerprint.getAttribute('setup')}\\r\\n`;\r\n            }\r\n        });\r\n    }\r\n\r\n    // XEP-0176 ICE candidates\r\n    transport.find('>candidate')\r\n        .each((_, candidate) => {\r\n            let protocol = candidate.getAttribute('protocol');\r\n\r\n            protocol\r\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\r\n\r\n            if ((this.removeTcpCandidates\r\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\r\n                || (this.removeUdpCandidates && protocol === 'udp')) {\r\n                return;\r\n            } else if (this.failICE) {\r\n                candidate.setAttribute('ip', '1.1.1.1');\r\n            }\r\n\r\n            sdp += SDPUtil.candidateFromJingle(candidate);\r\n        });\r\n\r\n    switch (content.attr('senders')) {\r\n    case 'initiator':\r\n        sdp += 'a=sendonly\\r\\n';\r\n        break;\r\n    case 'responder':\r\n        sdp += 'a=recvonly\\r\\n';\r\n        break;\r\n    case 'none':\r\n        sdp += 'a=inactive\\r\\n';\r\n        break;\r\n    case 'both':\r\n        sdp += 'a=sendrecv\\r\\n';\r\n        break;\r\n    }\r\n    sdp += `a=mid:${content.attr('name')}\\r\\n`;\r\n\r\n    // <description><rtcp-mux/></description>\r\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\r\n    // though\r\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\r\n    if (desc.find('>rtcp-mux').length) {\r\n        sdp += 'a=rtcp-mux\\r\\n';\r\n    }\r\n\r\n    desc.find('>payload-type').each((_, payloadType) => {\r\n        sdp += `${SDPUtil.buildRTPMap(payloadType)}\\r\\n`;\r\n        if ($(payloadType).find('>parameter').length) {\r\n            sdp += `a=fmtp:${payloadType.getAttribute('id')} `;\r\n            sdp\r\n                += $(payloadType)\r\n                    .find('>parameter')\r\n                    .map((__, parameter) => {\r\n                        const name = parameter.getAttribute('name');\r\n\r\n                        return (\r\n                            (name ? `${name}=` : '')\r\n                                + parameter.getAttribute('value'));\r\n                    })\r\n                    .get()\r\n                    .join('; ');\r\n            sdp += '\\r\\n';\r\n        }\r\n\r\n        // xep-0293\r\n        sdp += this.rtcpFbFromJingle($(payloadType), payloadType.getAttribute('id'));\r\n    });\r\n\r\n    // xep-0293\r\n    sdp += this.rtcpFbFromJingle(desc, '*');\r\n\r\n    // xep-0294\r\n    desc\r\n        .find('>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]')\r\n        .each((_, hdrExt) => {\r\n            sdp\r\n                += `a=extmap:${hdrExt.getAttribute('id')} ${\r\n                    hdrExt.getAttribute('uri')}\\r\\n`;\r\n        });\r\n\r\n    // XEP-0339 handle ssrc-group attributes\r\n    desc\r\n        .find('>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n        .each((_, ssrcGroup) => {\r\n            const semantics = ssrcGroup.getAttribute('semantics');\r\n            const ssrcs\r\n                = $(ssrcGroup)\r\n                    .find('>source')\r\n                    .map((__, source) => source.getAttribute('ssrc'))\r\n                    .get();\r\n\r\n            if (ssrcs.length) {\r\n                sdp += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\r\n            }\r\n        });\r\n\r\n    // XEP-0339 handle source attributes\r\n    let userSources = '';\r\n    let nonUserSources = '';\r\n\r\n    desc\r\n        .find('>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n        .each((_, source) => {\r\n            const ssrc = source.getAttribute('ssrc');\r\n            let isUserSource = true;\r\n            let sourceStr = '';\r\n\r\n            $(source)\r\n                .find('>parameter')\r\n                .each((__, parameter) => {\r\n                    const name = parameter.getAttribute('name');\r\n                    let value = parameter.getAttribute('value');\r\n\r\n                    value = SDPUtil.filterSpecialChars(value);\r\n                    sourceStr += `a=ssrc:${ssrc} ${name}`;\r\n\r\n                    if (value && value.length) {\r\n                        sourceStr += `:${value}`;\r\n                    }\r\n\r\n                    sourceStr += '\\r\\n';\r\n\r\n                    if (value?.includes('mixedmslabel')) {\r\n                        isUserSource = false;\r\n                    }\r\n                });\r\n\r\n            if (isUserSource) {\r\n                userSources += sourceStr;\r\n            } else {\r\n                nonUserSources += sourceStr;\r\n            }\r\n        });\r\n\r\n    // The sdp-interop package is relying the mixedmslabel m line to be the first one in order to set the direction\r\n    // to sendrecv.\r\n    sdp += nonUserSources + userSources;\r\n\r\n    return sdp;\r\n};\r\n","/**\r\n * Enumeration of the media direction types.\r\n */\r\n export const MediaDirection =  {\r\n    /**\r\n     * Media is send and receive is suspended.\r\n     */\r\n    INACTIVE : 'inactive',\r\n\r\n    /**\r\n     * Media is only received from remote peer.\r\n     */\r\n    RECVONLY : 'recvonly',\r\n\r\n    /**\r\n     * Media is only sent to the remote peer.\r\n     */\r\n    SENDONLY : 'sendonly',\r\n\r\n    /**\r\n     * Media is sent and received.\r\n     */\r\n    SENDRECV : 'sendrecv'\r\n};","var parser = require('./parser');\r\nvar writer = require('./writer');\r\n\r\nexports.write = writer;\r\nexports.parse = parser.parse;\r\nexports.parseFmtpConfig = parser.parseFmtpConfig;\r\nexports.parseParams = parser.parseParams;\r\nexports.parsePayloads = parser.parsePayloads;\r\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\r\nexports.parseImageAttributes = parser.parseImageAttributes;\r\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\r\n","/**\r\n * The errors for the conference.\r\n */\r\n\r\n/**\r\n * Indicates that client must be authenticated to create the conference.\r\n */\r\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\r\n\r\n/**\r\n * Indicates that chat error occurred.\r\n */\r\nexport const CHAT_ERROR = 'conference.chatError';\r\n\r\n/**\r\n * Indicates that conference has been destroyed.\r\n */\r\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\r\n\r\n/**\r\n * Indicates that max users limit has been reached.\r\n */\r\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\r\n\r\n/**\r\n * Indicates that a connection error occurred when trying to join a conference.\r\n */\r\nexport const CONNECTION_ERROR = 'conference.connectionError';\r\n\r\n/**\r\n * Indicates that a connection error is due to not allowed,\r\n * occurred when trying to join a conference.\r\n */\r\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\r\n\r\n/**\r\n * Indicates that a connection error is due to not allowed,\r\n * occurred when trying to join a conference, only approved members are allowed to join.\r\n */\r\nexport const MEMBERS_ONLY_ERROR = 'conference.connectionError.membersOnly';\r\n\r\n/**\r\n * Indicates that a connection error is due to denied access to the room,\r\n * occurred after joining a lobby room and access is denied by the room moderators.\r\n */\r\nexport const CONFERENCE_ACCESS_DENIED = 'conference.connectionError.accessDenied';\r\n\r\n/**\r\n * Indicates that focus error happened.\r\n */\r\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\r\n\r\n/**\r\n * Indicates that focus left the conference.\r\n */\r\nexport const FOCUS_LEFT = 'conference.focusLeft';\r\n\r\n/**\r\n * Indicates that graceful shutdown happened.\r\n */\r\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\r\n\r\n/**\r\n * Indicates that the media connection has failed.\r\n */\r\nexport const ICE_FAILED = 'conference.iceFailed';\r\n\r\n/**\r\n * Indicates that the versions of the server side components are incompatible\r\n * with the client side.\r\n */\r\nexport const INCOMPATIBLE_SERVER_VERSIONS\r\n    = 'conference.incompatible_server_versions';\r\n\r\n/**\r\n * Indicates that offer/answer had failed.\r\n */\r\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\r\n\r\n/**\r\n * Indicates that password cannot be set for this conference.\r\n */\r\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\r\n\r\n/**\r\n * Indicates that a password is required in order to join the conference.\r\n */\r\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\r\n\r\n/**\r\n * Indicates that reservation system returned error.\r\n */\r\nexport const RESERVATION_ERROR = 'conference.reservationError';\r\n\r\n/**\r\n * Indicates that there is no available videobridge.\r\n */\r\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\r\n","// Copyright Joyent, Inc. and other Node contributors.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n'use strict';\r\n\r\nvar R = typeof Reflect === 'object' ? Reflect : null\r\nvar ReflectApply = R && typeof R.apply === 'function'\r\n  ? R.apply\r\n  : function ReflectApply(target, receiver, args) {\r\n    return Function.prototype.apply.call(target, receiver, args);\r\n  }\r\n\r\nvar ReflectOwnKeys\r\nif (R && typeof R.ownKeys === 'function') {\r\n  ReflectOwnKeys = R.ownKeys\r\n} else if (Object.getOwnPropertySymbols) {\r\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\r\n    return Object.getOwnPropertyNames(target)\r\n      .concat(Object.getOwnPropertySymbols(target));\r\n  };\r\n} else {\r\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\r\n    return Object.getOwnPropertyNames(target);\r\n  };\r\n}\r\n\r\nfunction ProcessEmitWarning(warning) {\r\n  if (console && console.warn) console.warn(warning);\r\n}\r\n\r\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\r\n  return value !== value;\r\n}\r\n\r\nfunction EventEmitter() {\r\n  EventEmitter.init.call(this);\r\n}\r\nmodule.exports = EventEmitter;\r\nmodule.exports.once = once;\r\n\r\n// Backwards-compat with node 0.10.x\r\nEventEmitter.EventEmitter = EventEmitter;\r\n\r\nEventEmitter.prototype._events = undefined;\r\nEventEmitter.prototype._eventsCount = 0;\r\nEventEmitter.prototype._maxListeners = undefined;\r\n\r\n// By default EventEmitters will print a warning if more than 10 listeners are\r\n// added to it. This is a useful default which helps finding memory leaks.\r\nvar defaultMaxListeners = 10;\r\n\r\nfunction checkListener(listener) {\r\n  if (typeof listener !== 'function') {\r\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\r\n  }\r\n}\r\n\r\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\r\n  enumerable: true,\r\n  get: function() {\r\n    return defaultMaxListeners;\r\n  },\r\n  set: function(arg) {\r\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\r\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\r\n    }\r\n    defaultMaxListeners = arg;\r\n  }\r\n});\r\n\r\nEventEmitter.init = function() {\r\n\r\n  if (this._events === undefined ||\r\n      this._events === Object.getPrototypeOf(this)._events) {\r\n    this._events = Object.create(null);\r\n    this._eventsCount = 0;\r\n  }\r\n\r\n  this._maxListeners = this._maxListeners || undefined;\r\n};\r\n\r\n// Obviously not all Emitters should be limited to 10. This function allows\r\n// that to be increased. Set to zero for unlimited.\r\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\r\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\r\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\r\n  }\r\n  this._maxListeners = n;\r\n  return this;\r\n};\r\n\r\nfunction _getMaxListeners(that) {\r\n  if (that._maxListeners === undefined)\r\n    return EventEmitter.defaultMaxListeners;\r\n  return that._maxListeners;\r\n}\r\n\r\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\r\n  return _getMaxListeners(this);\r\n};\r\n\r\nEventEmitter.prototype.emit = function emit(type) {\r\n  var args = [];\r\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\r\n  var doError = (type === 'error');\r\n\r\n  var events = this._events;\r\n  if (events !== undefined)\r\n    doError = (doError && events.error === undefined);\r\n  else if (!doError)\r\n    return false;\r\n\r\n  // If there is no 'error' event listener then throw.\r\n  if (doError) {\r\n    var er;\r\n    if (args.length > 0)\r\n      er = args[0];\r\n    if (er instanceof Error) {\r\n      // Note: The comments on the `throw` lines are intentional, they show\r\n      // up in Node's output if this results in an unhandled exception.\r\n      throw er; // Unhandled 'error' event\r\n    }\r\n    // At least give some kind of context to the user\r\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\r\n    err.context = er;\r\n    throw err; // Unhandled 'error' event\r\n  }\r\n\r\n  var handler = events[type];\r\n\r\n  if (handler === undefined)\r\n    return false;\r\n\r\n  if (typeof handler === 'function') {\r\n    ReflectApply(handler, this, args);\r\n  } else {\r\n    var len = handler.length;\r\n    var listeners = arrayClone(handler, len);\r\n    for (var i = 0; i < len; ++i)\r\n      ReflectApply(listeners[i], this, args);\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nfunction _addListener(target, type, listener, prepend) {\r\n  var m;\r\n  var events;\r\n  var existing;\r\n\r\n  checkListener(listener);\r\n\r\n  events = target._events;\r\n  if (events === undefined) {\r\n    events = target._events = Object.create(null);\r\n    target._eventsCount = 0;\r\n  } else {\r\n    // To avoid recursion in the case that type === \"newListener\"! Before\r\n    // adding it to the listeners, first emit \"newListener\".\r\n    if (events.newListener !== undefined) {\r\n      target.emit('newListener', type,\r\n                  listener.listener ? listener.listener : listener);\r\n\r\n      // Re-assign `events` because a newListener handler could have caused the\r\n      // this._events to be assigned to a new object\r\n      events = target._events;\r\n    }\r\n    existing = events[type];\r\n  }\r\n\r\n  if (existing === undefined) {\r\n    // Optimize the case of one listener. Don't need the extra array object.\r\n    existing = events[type] = listener;\r\n    ++target._eventsCount;\r\n  } else {\r\n    if (typeof existing === 'function') {\r\n      // Adding the second element, need to change to array.\r\n      existing = events[type] =\r\n        prepend ? [listener, existing] : [existing, listener];\r\n      // If we've already got an array, just append.\r\n    } else if (prepend) {\r\n      existing.unshift(listener);\r\n    } else {\r\n      existing.push(listener);\r\n    }\r\n\r\n    // Check for listener leak\r\n    m = _getMaxListeners(target);\r\n    if (m > 0 && existing.length > m && !existing.warned) {\r\n      existing.warned = true;\r\n      // No error code for this since it is a Warning\r\n      // eslint-disable-next-line no-restricted-syntax\r\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\r\n                          existing.length + ' ' + String(type) + ' listeners ' +\r\n                          'added. Use emitter.setMaxListeners() to ' +\r\n                          'increase limit');\r\n      w.name = 'MaxListenersExceededWarning';\r\n      w.emitter = target;\r\n      w.type = type;\r\n      w.count = existing.length;\r\n      ProcessEmitWarning(w);\r\n    }\r\n  }\r\n\r\n  return target;\r\n}\r\n\r\nEventEmitter.prototype.addListener = function addListener(type, listener) {\r\n  return _addListener(this, type, listener, false);\r\n};\r\n\r\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\r\n\r\nEventEmitter.prototype.prependListener =\r\n    function prependListener(type, listener) {\r\n      return _addListener(this, type, listener, true);\r\n    };\r\n\r\nfunction onceWrapper() {\r\n  if (!this.fired) {\r\n    this.target.removeListener(this.type, this.wrapFn);\r\n    this.fired = true;\r\n    if (arguments.length === 0)\r\n      return this.listener.call(this.target);\r\n    return this.listener.apply(this.target, arguments);\r\n  }\r\n}\r\n\r\nfunction _onceWrap(target, type, listener) {\r\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\r\n  var wrapped = onceWrapper.bind(state);\r\n  wrapped.listener = listener;\r\n  state.wrapFn = wrapped;\r\n  return wrapped;\r\n}\r\n\r\nEventEmitter.prototype.once = function once(type, listener) {\r\n  checkListener(listener);\r\n  this.on(type, _onceWrap(this, type, listener));\r\n  return this;\r\n};\r\n\r\nEventEmitter.prototype.prependOnceListener =\r\n    function prependOnceListener(type, listener) {\r\n      checkListener(listener);\r\n      this.prependListener(type, _onceWrap(this, type, listener));\r\n      return this;\r\n    };\r\n\r\n// Emits a 'removeListener' event if and only if the listener was removed.\r\nEventEmitter.prototype.removeListener =\r\n    function removeListener(type, listener) {\r\n      var list, events, position, i, originalListener;\r\n\r\n      checkListener(listener);\r\n\r\n      events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      list = events[type];\r\n      if (list === undefined)\r\n        return this;\r\n\r\n      if (list === listener || list.listener === listener) {\r\n        if (--this._eventsCount === 0)\r\n          this._events = Object.create(null);\r\n        else {\r\n          delete events[type];\r\n          if (events.removeListener)\r\n            this.emit('removeListener', type, list.listener || listener);\r\n        }\r\n      } else if (typeof list !== 'function') {\r\n        position = -1;\r\n\r\n        for (i = list.length - 1; i >= 0; i--) {\r\n          if (list[i] === listener || list[i].listener === listener) {\r\n            originalListener = list[i].listener;\r\n            position = i;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (position < 0)\r\n          return this;\r\n\r\n        if (position === 0)\r\n          list.shift();\r\n        else {\r\n          spliceOne(list, position);\r\n        }\r\n\r\n        if (list.length === 1)\r\n          events[type] = list[0];\r\n\r\n        if (events.removeListener !== undefined)\r\n          this.emit('removeListener', type, originalListener || listener);\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\r\n\r\nEventEmitter.prototype.removeAllListeners =\r\n    function removeAllListeners(type) {\r\n      var listeners, events, i;\r\n\r\n      events = this._events;\r\n      if (events === undefined)\r\n        return this;\r\n\r\n      // not listening for removeListener, no need to emit\r\n      if (events.removeListener === undefined) {\r\n        if (arguments.length === 0) {\r\n          this._events = Object.create(null);\r\n          this._eventsCount = 0;\r\n        } else if (events[type] !== undefined) {\r\n          if (--this._eventsCount === 0)\r\n            this._events = Object.create(null);\r\n          else\r\n            delete events[type];\r\n        }\r\n        return this;\r\n      }\r\n\r\n      // emit removeListener for all listeners on all events\r\n      if (arguments.length === 0) {\r\n        var keys = Object.keys(events);\r\n        var key;\r\n        for (i = 0; i < keys.length; ++i) {\r\n          key = keys[i];\r\n          if (key === 'removeListener') continue;\r\n          this.removeAllListeners(key);\r\n        }\r\n        this.removeAllListeners('removeListener');\r\n        this._events = Object.create(null);\r\n        this._eventsCount = 0;\r\n        return this;\r\n      }\r\n\r\n      listeners = events[type];\r\n\r\n      if (typeof listeners === 'function') {\r\n        this.removeListener(type, listeners);\r\n      } else if (listeners !== undefined) {\r\n        // LIFO order\r\n        for (i = listeners.length - 1; i >= 0; i--) {\r\n          this.removeListener(type, listeners[i]);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\nfunction _listeners(target, type, unwrap) {\r\n  var events = target._events;\r\n\r\n  if (events === undefined)\r\n    return [];\r\n\r\n  var evlistener = events[type];\r\n  if (evlistener === undefined)\r\n    return [];\r\n\r\n  if (typeof evlistener === 'function')\r\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\r\n\r\n  return unwrap ?\r\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\r\n}\r\n\r\nEventEmitter.prototype.listeners = function listeners(type) {\r\n  return _listeners(this, type, true);\r\n};\r\n\r\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\r\n  return _listeners(this, type, false);\r\n};\r\n\r\nEventEmitter.listenerCount = function(emitter, type) {\r\n  if (typeof emitter.listenerCount === 'function') {\r\n    return emitter.listenerCount(type);\r\n  } else {\r\n    return listenerCount.call(emitter, type);\r\n  }\r\n};\r\n\r\nEventEmitter.prototype.listenerCount = listenerCount;\r\nfunction listenerCount(type) {\r\n  var events = this._events;\r\n\r\n  if (events !== undefined) {\r\n    var evlistener = events[type];\r\n\r\n    if (typeof evlistener === 'function') {\r\n      return 1;\r\n    } else if (evlistener !== undefined) {\r\n      return evlistener.length;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nEventEmitter.prototype.eventNames = function eventNames() {\r\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\r\n};\r\n\r\nfunction arrayClone(arr, n) {\r\n  var copy = new Array(n);\r\n  for (var i = 0; i < n; ++i)\r\n    copy[i] = arr[i];\r\n  return copy;\r\n}\r\n\r\nfunction spliceOne(list, index) {\r\n  for (; index + 1 < list.length; index++)\r\n    list[index] = list[index + 1];\r\n  list.pop();\r\n}\r\n\r\nfunction unwrapListeners(arr) {\r\n  var ret = new Array(arr.length);\r\n  for (var i = 0; i < ret.length; ++i) {\r\n    ret[i] = arr[i].listener || arr[i];\r\n  }\r\n  return ret;\r\n}\r\n\r\nfunction once(emitter, name) {\r\n  return new Promise(function (resolve, reject) {\r\n    function eventListener() {\r\n      if (errorListener !== undefined) {\r\n        emitter.removeListener('error', errorListener);\r\n      }\r\n      resolve([].slice.call(arguments));\r\n    };\r\n    var errorListener;\r\n\r\n    // Adding an error listener is not optional because\r\n    // if an error is thrown on an event emitter we cannot\r\n    // guarantee that the actual event we are waiting will\r\n    // be fired. The result could be a silent way to create\r\n    // memory or file descriptor leaks, which is something\r\n    // we should avoid.\r\n    if (name !== 'error') {\r\n      errorListener = function errorListener(err) {\r\n        emitter.removeListener(name, eventListener);\r\n        reject(err);\r\n      };\r\n\r\n      emitter.once('error', errorListener);\r\n    }\r\n\r\n    emitter.once(name, eventListener);\r\n  });\r\n}\r\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\r\n\r\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\r\n\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\r\n    = 'Video resolution is not supported: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_USER_CANCELED]\r\n    = 'User canceled screen sharing prompt';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR]\r\n    = 'Unknown error from screensharing';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\r\n    = 'Unkown error from desktop picker';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\r\n    = 'Failed to detect desktop picker';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\r\n    = 'Generic getUserMedia error';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\r\n    = 'User denied permission to use device(s): ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\r\n    = 'Requested device(s) was/were not found: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\r\n    = 'Constraint could not be satisfied: ';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\r\n    = 'Track has been already disposed';\r\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\r\n    = 'Track does not have an associated Media Stream';\r\n\r\n// FIXME: Using prototype inheritance because otherwise instanceof is not\r\n// working properly (see https://github.com/babel/babel/issues/3083)\r\n\r\n/**\r\n *\r\n * Represents an error that occurred to a JitsiTrack. Can represent various\r\n * types of errors. For error descriptions (@see JitsiTrackErrors).\r\n *\r\n * @extends Error\r\n *\r\n *\r\n * @constructor\r\n * @param {Object|string} error - error object or error name\r\n * @param {Object|string} (options) - getUserMedia constraints object or\r\n * error message\r\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\r\n * list of getUserMedia requested devices\r\n */\r\nfunction JitsiTrackError(error, options, devices) {\r\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\r\n        /**\r\n         * Additional information about original getUserMedia error\r\n         * and constraints.\r\n         * @type {{\r\n         *     error: Object,\r\n         *     constraints: Object,\r\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\r\n         * }}\r\n         */\r\n        this.gum = {\r\n            error,\r\n            constraints: options,\r\n            devices: devices && Array.isArray(devices)\r\n                ? devices.slice(0)\r\n                : undefined\r\n        };\r\n\r\n        switch (error.name) {\r\n        case 'NotAllowedError':\r\n        case 'PermissionDeniedError':\r\n        case 'SecurityError':\r\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\r\n            this.message\r\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                    + (this.gum.devices || []).join(', ');\r\n            break;\r\n        case 'DevicesNotFoundError':\r\n        case 'NotFoundError':\r\n            this.name = JitsiTrackErrors.NOT_FOUND;\r\n            this.message\r\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                    + (this.gum.devices || []).join(', ');\r\n            break;\r\n        case 'ConstraintNotSatisfiedError':\r\n        case 'OverconstrainedError': {\r\n            const constraintName = error.constraintName || error.constraint;\r\n\r\n            // we treat deviceId as unsupported resolution, as we want to\r\n            // retry and finally if everything fails to remove deviceId from\r\n            // mandatory constraints\r\n            if (options\r\n                    && options.video\r\n                    && (!devices || devices.indexOf('video') > -1)\r\n                    && (constraintName === 'minWidth'\r\n                        || constraintName === 'maxWidth'\r\n                        || constraintName === 'minHeight'\r\n                        || constraintName === 'maxHeight'\r\n                        || constraintName === 'width'\r\n                        || constraintName === 'height'\r\n                        || constraintName === 'deviceId')) {\r\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\r\n                this.message\r\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                        + getResolutionFromFailedConstraint(\r\n                            constraintName,\r\n                            options);\r\n            } else {\r\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\r\n                this.message\r\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\r\n                        + error.constraintName;\r\n            }\r\n            break;\r\n        }\r\n\r\n        default:\r\n            this.name = JitsiTrackErrors.GENERAL;\r\n            this.message\r\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\r\n            break;\r\n        }\r\n    } else if (typeof error === 'string') {\r\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\r\n            this.name = error;\r\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\r\n        } else {\r\n            // this is some generic error that do not fit any of our\r\n            // pre-defined errors, so don't give it any specific name, just\r\n            // store message\r\n            this.message = error;\r\n        }\r\n    } else {\r\n        throw new Error('Invalid arguments');\r\n    }\r\n\r\n    this.stack = error.stack || (new Error()).stack;\r\n}\r\n\r\nJitsiTrackError.prototype = Object.create(Error.prototype);\r\nJitsiTrackError.prototype.constructor = JitsiTrackError;\r\n\r\n/**\r\n * Gets failed resolution constraint from corresponding object.\r\n * @param {string} failedConstraintName\r\n * @param {Object} constraints\r\n * @returns {string|number}\r\n */\r\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\r\n    if (constraints && constraints.video && constraints.video.mandatory) {\r\n        switch (failedConstraintName) {\r\n        case 'width':\r\n            return constraints.video.mandatory.minWidth;\r\n        case 'height':\r\n            return constraints.video.mandatory.minHeight;\r\n        default:\r\n            return constraints.video.mandatory[failedConstraintName] || '';\r\n        }\r\n    }\r\n\r\n    return '';\r\n}\r\n\r\nexport default JitsiTrackError;\r\n","import EventEmitter from 'events';\r\n\r\n/**\r\n * The class implements basic event operations - add/remove listener.\r\n * NOTE: The purpose of the class is to be extended in order to add\r\n * this functionality to other classes.\r\n */\r\nexport default class Listenable {\r\n    /**\r\n     * Creates new instance.\r\n     * @param {EventEmitter} eventEmitter\r\n     * @constructor\r\n     */\r\n    constructor(eventEmitter = new EventEmitter()) {\r\n        this.eventEmitter = eventEmitter;\r\n\r\n        // aliases for addListener/removeListener\r\n        this.addEventListener = this.on = this.addListener;\r\n        this.removeEventListener = this.off = this.removeListener;\r\n    }\r\n\r\n    /**\r\n     * Adds new listener.\r\n     * @param {String} eventName the name of the event\r\n     * @param {Function} listener the listener.\r\n     * @returns {Function} - The unsubscribe function.\r\n     */\r\n    addListener(eventName, listener) {\r\n        this.eventEmitter.addListener(eventName, listener);\r\n\r\n        return () => this.removeEventListener(eventName, listener);\r\n    }\r\n\r\n    /**\r\n     * Removes listener.\r\n     * @param {String} eventName the name of the event that triggers the\r\n     * listener\r\n     * @param {Function} listener the listener.\r\n     */\r\n    removeListener(eventName, listener) {\r\n        this.eventEmitter.removeListener(eventName, listener);\r\n    }\r\n}\r\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\r\n// this values needs to be as they are becuse they are going to analytics,\r\n// callstats, etc.\r\n\r\nexport const CHROME = 'chrome';\r\n\r\nexport const OPERA = 'opera';\r\n\r\nexport const FIREFOX = 'firefox';\r\n\r\nexport const INTERNET_EXPLORER = 'iexplorer';\r\n\r\nexport const SAFARI = 'safari';\r\n\r\nexport const NWJS = 'nwjs';\r\n\r\nexport const ELECTRON = 'electron';\r\n\r\nexport const REACT_NATIVE = 'react-native';\r\n\r\nexport const UNKNOWN = 'unknown';\r\n","import Bowser from 'bowser';\r\n\r\nimport {\r\n    CHROME,\r\n    OPERA,\r\n    FIREFOX,\r\n    INTERNET_EXPLORER,\r\n    SAFARI,\r\n    NWJS,\r\n    ELECTRON,\r\n    REACT_NATIVE,\r\n    UNKNOWN\r\n} from './browsers';\r\n\r\n/**\r\n * Maps the names of the browsers from bowser to the internal names defined in\r\n * ./browsers.js\r\n */\r\nconst bowserNameToJitsiName = {\r\n    'Chrome': CHROME,\r\n    'Chromium': CHROME,\r\n    'Opera': OPERA,\r\n    'Firefox': FIREFOX,\r\n    'Internet Explorer': INTERNET_EXPLORER,\r\n    'Safari': SAFARI\r\n};\r\n\r\n/**\r\n * Detects a Chromium based environent.\r\n *\r\n * NOTE: Here we cannot check solely for \"Chrome\" in the UA, because Edge has\r\n * it too. We need to check explicitly for chromium based Edge first and then\r\n * detect other chromium based browsers.\r\n *\r\n * @returns {Object|undefined} - The name (CHROME) and version.\r\n */\r\nfunction _detectChromiumBased() {\r\n    const userAgent = navigator.userAgent;\r\n    const browserInfo = {\r\n        name: UNKNOWN,\r\n        version: undefined\r\n    };\r\n\r\n    if (userAgent.match(/Chrome/) && !userAgent.match(/Edge/)) {\r\n        // Edge is currenly supported only on desktop and android.\r\n        if (userAgent.match(/Edg(A?)/)) {\r\n            // Compare the underlying chromium version.\r\n            const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\r\n\r\n            if (Number.parseInt(version, 10) > 72) {\r\n                browserInfo.name = CHROME;\r\n                browserInfo.version = version;\r\n            }\r\n        } else {\r\n            browserInfo.name = CHROME;\r\n            browserInfo.version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\r\n        }\r\n    }\r\n\r\n    return browserInfo;\r\n}\r\n\r\n/**\r\n * Detects Electron environment.\r\n *\r\n * @returns {Object|undefined} - The name (ELECTRON) and version.\r\n */\r\nfunction _detectElectron() {\r\n    const userAgent = navigator.userAgent;\r\n\r\n    if (userAgent.match(/Electron/)) {\r\n        const version = userAgent.match(/Electron\\/([\\d.]+)/)[1];\r\n\r\n        return {\r\n            name: ELECTRON,\r\n            version\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Detects NWJS environment.\r\n *\r\n * @returns {Object|undefined} - The name (NWJS) and version.\r\n */\r\nfunction _detectNWJS() {\r\n    const userAgent = navigator.userAgent;\r\n\r\n    if (userAgent.match(/JitsiMeetNW/)) {\r\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\r\n\r\n        return {\r\n            name: NWJS,\r\n            version\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Detects React Native environment.\r\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\r\n */\r\nfunction _detectReactNative() {\r\n    const match\r\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\r\n    let version;\r\n\r\n    // If we're remote debugging a React Native app, it may be treated as\r\n    // Chrome. Check navigator.product as well and always return some version\r\n    // even if we can't get the real one.\r\n\r\n    if (match || navigator.product === 'ReactNative') {\r\n        let name;\r\n\r\n        if (match && match.length > 2) {\r\n            name = match[1];\r\n            version = match[2];\r\n        }\r\n        name || (name = 'react-native');\r\n        version || (version = 'unknown');\r\n\r\n        return {\r\n            name: REACT_NATIVE,\r\n            version\r\n        };\r\n    }\r\n}\r\n\r\n/**\r\n * Returns information about the current browser.\r\n * @param {Object} - The bowser instance.\r\n * @returns {Object} - The name and version of the browser.\r\n */\r\nfunction _detect(bowser) {\r\n    let browserInfo;\r\n    const detectors = [\r\n        _detectReactNative,\r\n        _detectElectron,\r\n        _detectNWJS\r\n    ];\r\n\r\n    // Try all browser detectors\r\n    for (let i = 0; i < detectors.length; i++) {\r\n        browserInfo = detectors[i]();\r\n        if (browserInfo) {\r\n            return browserInfo;\r\n        }\r\n    }\r\n\r\n    const name = bowser.getBrowserName();\r\n\r\n    if (name in bowserNameToJitsiName) {\r\n        return {\r\n            name: bowserNameToJitsiName[name],\r\n            version: bowser.getBrowserVersion()\r\n        };\r\n    }\r\n\r\n    // Detect other browsers with the Chrome engine, such as Vivaldi and Brave.\r\n    browserInfo = _detectChromiumBased();\r\n    if (browserInfo) {\r\n        return browserInfo;\r\n    }\r\n\r\n    return {\r\n        name: UNKNOWN,\r\n        version: undefined\r\n    };\r\n}\r\n\r\n/**\r\n * Implements browser detection.\r\n */\r\nexport default class BrowserDetection {\r\n    /**\r\n     * Creates new BrowserDetection instance.\r\n     *\r\n     * @param {Object} [browserInfo] - Information about the browser.\r\n     * @param {string} browserInfo.name - The name of the browser.\r\n     * @param {string} browserInfo.version - The version of the browser.\r\n     */\r\n    constructor(browserInfo) {\r\n        let name, version;\r\n\r\n        this._bowser = Bowser.getParser(navigator.userAgent);\r\n        if (typeof browserInfo === 'undefined') {\r\n            const detectedBrowserInfo = _detect(this._bowser);\r\n\r\n            name = detectedBrowserInfo.name;\r\n            version = detectedBrowserInfo.version;\r\n        } else if (browserInfo.name in bowserNameToJitsiName) {\r\n            name = bowserNameToJitsiName[browserInfo.name];\r\n            version = browserInfo.version;\r\n        } else {\r\n            name = UNKNOWN;\r\n            version = undefined;\r\n        }\r\n\r\n        this._name = name;\r\n        this._version = version;\r\n    }\r\n\r\n    /**\r\n     * Gets current browser name.\r\n     * @returns {string}\r\n     */\r\n    getName() {\r\n        return this._name;\r\n    }\r\n\r\n    /**\r\n     * Checks if current browser is Chrome.\r\n     * @returns {boolean}\r\n     */\r\n    isChrome() {\r\n        return this._name === CHROME;\r\n    }\r\n\r\n    /**\r\n     * Checks if current browser is Opera.\r\n     * @returns {boolean}\r\n     */\r\n    isOpera() {\r\n        return this._name === OPERA;\r\n    }\r\n\r\n    /**\r\n     * Checks if current browser is Firefox.\r\n     * @returns {boolean}\r\n     */\r\n    isFirefox() {\r\n        return this._name === FIREFOX;\r\n    }\r\n\r\n    /**\r\n     * Checks if current browser is Internet Explorer.\r\n     * @returns {boolean}\r\n     */\r\n    isIExplorer() {\r\n        return this._name === INTERNET_EXPLORER;\r\n    }\r\n\r\n    /**\r\n     * Checks if current browser is Safari.\r\n     * @returns {boolean}\r\n     */\r\n    isSafari() {\r\n        return this._name === SAFARI;\r\n    }\r\n\r\n    /**\r\n     * Checks if current environment is NWJS.\r\n     * @returns {boolean}\r\n     */\r\n    isNWJS() {\r\n        return this._name === NWJS;\r\n    }\r\n\r\n    /**\r\n     * Checks if current environment is Electron.\r\n     * @returns {boolean}\r\n     */\r\n    isElectron() {\r\n        return this._name === ELECTRON;\r\n    }\r\n\r\n    /**\r\n     * Checks if current environment is React Native.\r\n     * @returns {boolean}\r\n     */\r\n    isReactNative() {\r\n        return this._name === REACT_NATIVE;\r\n    }\r\n\r\n    /**\r\n     * Returns the version of the current browser.\r\n     * @returns {string}\r\n     */\r\n    getVersion() {\r\n        return this._version;\r\n    }\r\n\r\n    /**\r\n     * Check if the parsed browser matches the passed condition.\r\n     *\r\n     * @param {Object} checkTree - It's one or two layered object, which can include a\r\n     * platform or an OS on the first layer and should have browsers specs on the\r\n     * bottom layer.\r\n     * Eg. { chrome: '>71.1.0' }\r\n     *     { windows: { chrome: '<70.2' } }\r\n     * @returns {boolean | undefined} - Returns true if the browser satisfies the set\r\n     * conditions, false if not and undefined when the browser is not defined in the\r\n     * checktree object or when the current browser's version is unknown.\r\n     * @private\r\n     */\r\n    _checkCondition(checkTree) {\r\n        if (this._version) {\r\n            return this._bowser.satisfies(checkTree);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Compares the passed version with the current browser version.\r\n     *\r\n     * @param {*} version - The version to compare with. Anything different\r\n     * than string will be converted to string.\r\n     * @returns {boolean|undefined} - Returns true if the current version is\r\n     * greater than the passed version and false otherwise. Returns undefined if\r\n     * the current browser version is unknown.\r\n     */\r\n    isVersionGreaterThan(version) {\r\n        return this._checkCondition({ [this._name]: `>${version}` });\r\n    }\r\n\r\n    /**\r\n     * Compares the passed version with the current browser version.\r\n     *\r\n     * @param {*} version - The version to compare with. Anything different\r\n     * than string will be converted to string.\r\n     * @returns {boolean|undefined} - Returns true if the current version is\r\n     * lower than the passed version and false otherwise. Returns undefined if\r\n     * the current browser version is unknown.\r\n     */\r\n    isVersionLessThan(version) {\r\n        return this._checkCondition({ [this._name]: `<${version}` });\r\n    }\r\n\r\n    /**\r\n     * Compares the passed version with the current browser version.\r\n     *\r\n     * @param {*} version - The version to compare with. Anything different\r\n     * than string will be converted to string.\r\n     * @returns {boolean|undefined} - Returns true if the current version is\r\n     * equal to the passed version and false otherwise. Returns undefined if\r\n     * the current browser version is unknown.\r\n     * A loose-equality operator is used here so that it matches the sub-versions as well.\r\n     */\r\n    isVersionEqualTo(version) {\r\n        return this._checkCondition({ [this._name]: `~${version}` });\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\n/**\r\n * Dummy implementation of Storage interface.\r\n */\r\nclass DummyLocalStorage extends EventEmitter {\r\n\r\n    /**\r\n     * The object used for storage.\r\n     */\r\n    _storage = {};\r\n\r\n    /**\r\n     * Empties all keys out of the storage.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    clear() {\r\n        this._storage = {};\r\n    }\r\n\r\n    /**\r\n     * Returns the number of data items stored in the Storage object.\r\n     *\r\n     * @returns {number} - The number of data items stored in the Storage object.\r\n     */\r\n    get length() {\r\n        return Object.keys(this._storage).length;\r\n    }\r\n\r\n    /**\r\n     * Will return that key's value associated to the passed key name.\r\n     *\r\n     * @param {string} keyName - The key name.\r\n     * @returns {*} - The key value.\r\n     */\r\n    getItem(keyName) {\r\n        return this._storage[keyName];\r\n    }\r\n\r\n    /**\r\n     * When passed a key name and value, will add that key to the storage,\r\n     * or update that key's value if it already exists.\r\n     *\r\n     * @param {string} keyName - The key name.\r\n     * @param {*} keyValue - The key value.\r\n     * @returns {void}\r\n     */\r\n    setItem(keyName, keyValue) {\r\n        this._storage[keyName] = keyValue;\r\n    }\r\n\r\n    /**\r\n     * When passed a key name, will remove that key from the storage.\r\n     *\r\n     * @param {string} keyName - The key name.\r\n     * @returns {void}\r\n     */\r\n    removeItem(keyName) {\r\n        delete this._storage[keyName];\r\n    }\r\n\r\n    /**\r\n     * When passed a number n, this method will return the name of the nth key in the storage.\r\n     *\r\n     * @param {number} idx - The index of the key.\r\n     * @returns {string} - The nth key name.\r\n     */\r\n    key(n) {\r\n        const keys = Object.keys(this._storage);\r\n\r\n        if (keys.length <= n) {\r\n            return undefined;\r\n        }\r\n\r\n        return keys[n];\r\n    }\r\n\r\n    /**\r\n     * Serializes the content of the storage.\r\n     *\r\n     * @returns {string} - The serialized content.\r\n     */\r\n    serialize() {\r\n        return JSON.stringify(this._storage);\r\n    }\r\n}\r\n\r\n/**\r\n * Wrapper class for browser's local storage object.\r\n */\r\nclass JitsiLocalStorage extends EventEmitter {\r\n    /**\r\n     * @constructor\r\n     * @param {Storage} storage browser's local storage object.\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        try {\r\n            this._storage = window.localStorage;\r\n            this._localStorageDisabled = false;\r\n        } catch (ignore) {\r\n            // localStorage throws an exception.\r\n        }\r\n\r\n        if (!this._storage) { // Handles the case when window.localStorage is undefined or throws an exception.\r\n            console.warn('Local storage is disabled.');\r\n            this._storage = new DummyLocalStorage();\r\n            this._localStorageDisabled = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if window.localStorage is disabled and false otherwise.\r\n     *\r\n     * @returns {boolean} - True if window.localStorage is disabled and false otherwise.\r\n     */\r\n    isLocalStorageDisabled() {\r\n        return this._localStorageDisabled;\r\n    }\r\n\r\n    /**\r\n     * Empties all keys out of the storage.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    clear() {\r\n        this._storage.clear();\r\n        this.emit('changed');\r\n    }\r\n\r\n    /**\r\n     * Returns the number of data items stored in the Storage object.\r\n     *\r\n     * @returns {number} - The number of data items stored in the Storage object.\r\n     */\r\n    get length() {\r\n        return this._storage.length;\r\n    }\r\n\r\n    /**\r\n     * Returns that passed key's value.\r\n     * @param {string} keyName the name of the key you want to retrieve\r\n     * the value of.\r\n     * @returns {String|null} the value of the key. If the key does not exist,\r\n     * null is returned.\r\n     */\r\n    getItem(keyName) {\r\n        return this._storage.getItem(keyName);\r\n    }\r\n\r\n    /**\r\n     * Adds a key to the storage, or update key's value if it already exists.\r\n     * @param {string} keyName - the name of the key you want to create/update.\r\n     * @param {string} keyValue - the value you want to give the key you are\r\n     * creating/updating.\r\n     * @param {boolean} dontEmitChangedEvent - If true a changed event won't be emitted.\r\n     */\r\n    setItem(keyName, keyValue, dontEmitChangedEvent = false) {\r\n        this._storage.setItem(keyName, keyValue);\r\n\r\n        if (!dontEmitChangedEvent) {\r\n            this.emit('changed');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove a key from the storage.\r\n     * @param {string} keyName the name of the key you want to remove.\r\n     */\r\n    removeItem(keyName) {\r\n        this._storage.removeItem(keyName);\r\n        this.emit('changed');\r\n    }\r\n\r\n    /**\r\n     * Returns the name of the nth key in the list, or null if n is greater\r\n     * than or equal to the number of key/value pairs in the object.\r\n     *\r\n     * @param {number} i - The index of the key in the list.\r\n     * @returns {string}\r\n     */\r\n    key(i) {\r\n        return this._storage.key(i);\r\n    }\r\n\r\n    /**\r\n     * Serializes the content of the storage.\r\n     *\r\n     * @returns {string} - The serialized content.\r\n     */\r\n    serialize() {\r\n        if (this.isLocalStorageDisabled) {\r\n            return this._storage.serialize();\r\n        }\r\n\r\n        const length = this._storage.length;\r\n        const localStorageContent = {};\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            const key = this._storage.key(i);\r\n\r\n            localStorageContent[key] = this._storage.getItem(key);\r\n        }\r\n\r\n        return JSON.stringify(localStorageContent);\r\n    }\r\n}\r\n\r\nexport const jitsiLocalStorage = new JitsiLocalStorage();\r\n","/**\r\n * Event triggered by a audio detector indicating that its active state has changed from active to inactive or vice\r\n * versa.\r\n * @event\r\n * @type {boolean} - true when service has changed to active false otherwise.\r\n */\r\nexport const DETECTOR_STATE_CHANGE = 'detector_state_change';\r\n\r\n/** Event triggered by {@link NoAudioSignalDetector} when the local audio device associated with a JitsiConference\r\n * starts receiving audio levels with the value of 0 meaning no audio is being captured on that device, or when\r\n * it starts receiving audio levels !== 0 after being in a state of no audio.\r\n * @event\r\n * @type {boolean} - true when the current conference audio track has audio input false otherwise.\r\n */\r\nexport const AUDIO_INPUT_STATE_CHANGE = 'audio_input_state_changed';\r\n\r\n/** Event triggered by NoAudioSignalDetector when the local audio device associated with a JitsiConference goes silent\r\n * for a period of time, meaning that the device is either broken or hardware/software muted.\r\n * @event\r\n * @type {void}\r\n */\r\nexport const NO_AUDIO_INPUT = 'no_audio_input_detected';\r\n\r\n/**\r\n *  Event generated by {@link VADNoiseDetection} when the tracked device is considered noisy.\r\n *  @event\r\n *  @type {Object}\r\n */\r\nexport const VAD_NOISY_DEVICE = 'detection.vad_noise_device';\r\n\r\n/**\r\n * Event generated by VADReportingService when if finishes creating a VAD report for the monitored devices.\r\n * The generated objects are of type Array<Object>, one score for each monitored device.\r\n * @event VAD_REPORT_PUBLISHED\r\n * @type Array<Object> with the following structure:\r\n * @property {Date} timestamp - Timestamp at which the compute took place.\r\n * @property {number} avgVAD - Average VAD score over monitored period of time.\r\n * @property {string} deviceId - Associate local audio device ID.\r\n */\r\nexport const VAD_REPORT_PUBLISHED = 'vad-report-published';\r\n\r\n/**\r\n * Event generated by {@link TrackVADEmitter} when PCM sample VAD score is available.\r\n *\r\n * @event\r\n * @type {Object}\r\n * @property {Date}   timestamp - Exact time at which processed PCM sample was generated.\r\n * @property {number} score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n * @property {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\r\n * @property {string} deviceId - Device id of the associated track.\r\n */\r\nexport const VAD_SCORE_PUBLISHED = 'detection.vad_score_published';\r\n\r\n/**\r\n *  Event generated by {@link VADTalkMutedDetection} when a user is talking while the mic is muted.\r\n *\r\n *  @event\r\n *  @type {Object}\r\n */\r\nexport const VAD_TALK_WHILE_MUTED = 'detection.vad_talk_while_muted';\r\n","/**\r\n * Notifies about audio level in RTP statistics by SSRC.\r\n *\r\n * @param ssrc - The synchronization source identifier (SSRC) of the\r\n * endpoint/participant whose audio level is being reported.\r\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\r\n * RTP statistics.\r\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\r\n * local endpoint/participant; otherwise, <tt>false</tt>.\r\n */\r\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\r\n\r\n/**\r\n * An event fired just before the statistics module gets disposes and it's\r\n * the last chance to submit some logs that will end up in stats services like\r\n * CallStats (if enabled).\r\n */\r\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\r\n\r\n/**\r\n * An event carrying all statistics by ssrc.\r\n */\r\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\r\n\r\n/**\r\n * An event carrying connection statistics.\r\n *\r\n * @param {object} connectionStats - The connection statistics carried by the\r\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\r\n * <tt>resolution</tt>, and <tt>transport</tt>.\r\n */\r\nexport const CONNECTION_STATS = 'statistics.connectionstats';\r\n\r\n/**\r\n * An event carrying performance stats.\r\n */\r\nexport const LONG_TASKS_STATS = 'statistics.long_tasks_stats';\r\n","/**\r\n * Status that video SIP GW service is available.\r\n * @type {string}\r\n */\r\nexport const STATUS_AVAILABLE = 'available';\r\n\r\n/**\r\n * Status that video SIP GW service is not available.\r\n * @type {string}\r\n */\r\nexport const STATUS_UNDEFINED = 'undefined';\r\n\r\n/**\r\n * Status that video SIP GW service is available but there are no free nodes\r\n * at the moment to serve new requests.\r\n * @type {string}\r\n */\r\nexport const STATUS_BUSY = 'busy';\r\n\r\n/**\r\n * Video SIP GW session state, currently running.\r\n * @type {string}\r\n */\r\nexport const STATE_ON = 'on';\r\n\r\n/**\r\n * Video SIP GW session state, currently stopped and not running.\r\n * @type {string}\r\n */\r\nexport const STATE_OFF = 'off';\r\n\r\n/**\r\n * Video SIP GW session state, currently is starting.\r\n * @type {string}\r\n */\r\nexport const STATE_PENDING = 'pending';\r\n\r\n/**\r\n * Video SIP GW session state, has observed some issues and is retrying at the\r\n * moment.\r\n * @type {string}\r\n */\r\nexport const STATE_RETRYING = 'retrying';\r\n\r\n/**\r\n * Video SIP GW session state, tried to start but it failed.\r\n * @type {string}\r\n */\r\nexport const STATE_FAILED = 'failed';\r\n\r\n/**\r\n * Error on trying to create video SIP GW session in conference where\r\n * there is no room connection (hasn't joined or has left the room).\r\n * @type {string}\r\n */\r\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\r\n\r\n/**\r\n * Error on trying to create video SIP GW session with address for which\r\n * there is an already created session.\r\n * @type {string}\r\n */\r\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\r\n","/**\r\n * The events for the connection.\r\n */\r\n\r\n/**\r\n * Indicates that the connection has been disconnected. The event provides\r\n * the following parameters to its listeners:\r\n *\r\n * @param msg {string} a message associated with the disconnect such as the\r\n * last (known) error message\r\n */\r\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\r\n\r\n/**\r\n * Indicates that the connection has been established. The event provides\r\n * the following parameters to its listeners:\r\n *\r\n * @param id {string} the ID of the local endpoint/participant/peer (within\r\n * the context of the established connection)\r\n */\r\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\r\n\r\n/**\r\n * Indicates that the connection has been failed for some reason. The event\r\n * provides the following parameters to its listeners:\r\n *\r\n * @param errType {JitsiConnectionErrors} the type of error associated with\r\n * the failure\r\n * @param errReason {string} the error (message) associated with the failure\r\n * @param credentials {object} the credentials used to connect (if any)\r\n * @param errReasonDetails {object} an optional object with details about\r\n * the error, like shard moving, suspending. Used for analytics purposes.\r\n */\r\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\r\n\r\n/**\r\n * Indicates that the performed action cannot be executed because the\r\n * connection is not in the correct state(connected, disconnected, etc.)\r\n */\r\nexport const WRONG_STATE = 'connection.wrongState';\r\n\r\n/**\r\n * Indicates that the display name is required over this connection and need to be supplied when\r\n * joining the room.\r\n * There are cases like lobby room where display name is required.\r\n */\r\nexport const DISPLAY_NAME_REQUIRED = 'connection.display_name_required';\r\n","/* global module */\r\n/**\r\n * Enumeration of the codec mime types\r\n * @type {{H264: string, VP8: string, VP9: string}}\r\n */\r\nconst CodecMimeType = {\r\n    /**\r\n     * The h264 codec mime type\r\n     */\r\n    H264: 'h264',\r\n\r\n    /**\r\n     * The vp8 codec mime type.\r\n     */\r\n    VP8: 'vp8',\r\n\r\n    /**\r\n     * The vp9 codec mime type.\r\n     */\r\n    VP9: 'vp9'\r\n\r\n};\r\n\r\nmodule.exports = CodecMimeType;\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $msg, Strophe } from 'strophe.js';\r\nimport 'strophejs-plugin-disco';\r\n\r\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\r\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport browser from '../browser';\r\nimport { E2EEncryption } from '../e2ee/E2EEncryption';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nimport Caps from './Caps';\r\nimport XmppConnection from './XmppConnection';\r\nimport MucConnectionPlugin from './strophe.emuc';\r\nimport JingleConnectionPlugin from './strophe.jingle';\r\nimport initStropheLogger from './strophe.logger';\r\nimport RayoConnectionPlugin from './strophe.rayo';\r\nimport initStropheUtil from './strophe.util';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Creates XMPP connection.\r\n *\r\n * @param {Object} options\r\n * @param {string} [options.token] - JWT token used for authentication(JWT authentication module must be enabled in\r\n * Prosody).\r\n * @param {string} options.serviceUrl - The service URL for XMPP connection.\r\n * @param {string} options.enableWebsocketResume - True to enable stream resumption.\r\n * @param {number} [options.websocketKeepAlive] - See {@link XmppConnection} constructor.\r\n * @returns {XmppConnection}\r\n */\r\nfunction createConnection({ enableWebsocketResume, serviceUrl = '/http-bind', token, websocketKeepAlive }) {\r\n    // Append token as URL param\r\n    if (token) {\r\n        // eslint-disable-next-line no-param-reassign\r\n        serviceUrl += `${serviceUrl.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\r\n    }\r\n\r\n    return new XmppConnection({\r\n        enableWebsocketResume,\r\n        serviceUrl,\r\n        websocketKeepAlive\r\n    });\r\n}\r\n\r\n/**\r\n * Initializes Strophe plugins that need to work with Strophe.Connection directly rather than the lib-jitsi-meet's\r\n * {@link XmppConnection} wrapper.\r\n *\r\n * @returns {void}\r\n */\r\nfunction initStropheNativePlugins() {\r\n    initStropheUtil();\r\n    initStropheLogger();\r\n}\r\n\r\n// FIXME: remove once we have a default config template. -saghul\r\n/**\r\n * A list of ice servers to use by default for P2P.\r\n */\r\nexport const DEFAULT_STUN_SERVERS = [\r\n    { urls: 'stun:stun.l.google.com:19302' },\r\n    { urls: 'stun:stun1.l.google.com:19302' },\r\n    { urls: 'stun:stun2.l.google.com:19302' }\r\n];\r\n\r\n/**\r\n * The name of the field used to recognize a chat message as carrying a JSON\r\n * payload from another endpoint.\r\n * If the json-message of a chat message contains a valid JSON object, and\r\n * the JSON has this key, then it is a valid json-message to be sent.\r\n */\r\nexport const JITSI_MEET_MUC_TYPE = 'type';\r\n\r\n/**\r\n *\r\n */\r\nexport default class XMPP extends Listenable {\r\n    /**\r\n     * FIXME describe all options\r\n     * @param {Object} options\r\n     * @param {String} options.serviceUrl - URL passed to the XMPP client which will be used to establish XMPP\r\n     * connection with the server.\r\n     * @param {String} options.bosh - Deprecated, use {@code serviceUrl}.\r\n     * @param {boolean} options.enableWebsocketResume - Enables XEP-0198 stream management which will make the XMPP\r\n     * module try to resume the session in case the Websocket connection breaks.\r\n     * @param {number} [options.websocketKeepAlive] - The websocket keep alive interval. See {@link XmppConnection}\r\n     * constructor for more details.\r\n     * @param {Array<Object>} options.p2pStunServers see {@link JingleConnectionPlugin} for more details.\r\n     * @param token\r\n     */\r\n    constructor(options, token) {\r\n        super();\r\n        this.connection = null;\r\n        this.disconnectInProgress = false;\r\n        this.connectionTimes = {};\r\n        this.options = options;\r\n        this.token = token;\r\n        this.authenticatedUser = false;\r\n\r\n        initStropheNativePlugins();\r\n\r\n        this.connection = createConnection({\r\n            enableWebsocketResume: options.enableWebsocketResume,\r\n\r\n            // FIXME remove deprecated bosh option at some point\r\n            serviceUrl: options.serviceUrl || options.bosh,\r\n            token,\r\n            websocketKeepAlive: options.websocketKeepAlive\r\n        });\r\n\r\n        this._initStrophePlugins();\r\n\r\n        this.caps = new Caps(this.connection, this.options.clientNode);\r\n\r\n        // Initialize features advertised in disco-info\r\n        this.initFeaturesList();\r\n\r\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\r\n        // sounds like they would want that. A problem for them though may be if\r\n        // they wanted to utilize the connected connection in an unload handler\r\n        // of their own. However, it should be fairly easy for them to do that\r\n        // by registering their unload handler before us.\r\n        $(window).on('beforeunload unload', ev => {\r\n            this.disconnect(ev).catch(() => {\r\n                // ignore errors in order to not brake the unload.\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initializes the list of feature advertised through the disco-info\r\n     * mechanism.\r\n     */\r\n    initFeaturesList() {\r\n        // http://xmpp.org/extensions/xep-0167.html#support\r\n        // http://xmpp.org/extensions/xep-0176.html#support\r\n        this.caps.addFeature('urn:xmpp:jingle:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\r\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\r\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\r\n\r\n        // Disable RTX on Firefox because of https://bugzilla.mozilla.org/show_bug.cgi?id=1668028.\r\n        if (!(this.options.disableRtx || browser.isFirefox())) {\r\n            this.caps.addFeature('urn:ietf:rfc:4588');\r\n        }\r\n        if (this.options.enableOpusRed === true && browser.supportsAudioRed()) {\r\n            this.caps.addFeature('http://jitsi.org/opus-red');\r\n        }\r\n\r\n        // this is dealt with by SDP O/A so we don't need to announce this\r\n        // XEP-0293\r\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\r\n        // XEP-0294\r\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\r\n\r\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\r\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\r\n\r\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\r\n\r\n        // Enable Lipsync ?\r\n        if (browser.isChromiumBased() && this.options.enableLipSync === true) {\r\n            logger.info('Lip-sync enabled !');\r\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\r\n        }\r\n\r\n        if (this.connection.rayo) {\r\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\r\n        }\r\n\r\n        if (E2EEncryption.isSupported(this.options)) {\r\n            this.caps.addFeature('https://jitsi.org/meet/e2ee');\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getConnection() {\r\n        return this.connection;\r\n    }\r\n\r\n    /**\r\n     * Receive connection status changes and handles them.\r\n     *\r\n     * @param {Object} credentials\r\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\r\n     * connect method. For example, 'user@xmpp.com'.\r\n     * @param {string} credentials.password - The password passed to the connect\r\n     * method.\r\n     * @param {string} status - One of Strophe's connection status strings.\r\n     * @param {string} [msg] - The connection error message provided by Strophe.\r\n     */\r\n    connectionHandler(credentials = {}, status, msg) {\r\n        const now = window.performance.now();\r\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\r\n\r\n        this.connectionTimes[statusStr] = now;\r\n        logger.log(\r\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\r\n            now);\r\n\r\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\r\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\r\n            this.connection.jingle.getStunAndTurnCredentials();\r\n\r\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\r\n\r\n            // XmppConnection emits CONNECTED again on reconnect - a good opportunity to clear any \"last error\" flags\r\n            this._resetState();\r\n\r\n            // Schedule ping ?\r\n            const pingJid = this.connection.domain;\r\n\r\n            // FIXME no need to do it again on stream resume\r\n            this.caps.getFeaturesAndIdentities(pingJid)\r\n                .then(({ features, identities }) => {\r\n                    if (!features.has(Strophe.NS.PING)) {\r\n                        logger.error(\r\n                            `Ping NOT supported by ${pingJid} - please enable ping in your XMPP server config`);\r\n                    }\r\n\r\n                    // check for speakerstats\r\n                    identities.forEach(identity => {\r\n                        if (identity.type === 'speakerstats') {\r\n                            this.speakerStatsComponentAddress = identity.name;\r\n                        }\r\n\r\n                        if (identity.type === 'conference_duration') {\r\n                            this.conferenceDurationComponentAddress = identity.name;\r\n                        }\r\n\r\n                        if (identity.type === 'lobbyrooms') {\r\n                            this.lobbySupported = true;\r\n                            identity.name && this.caps.getFeaturesAndIdentities(identity.name, identity.type)\r\n                                .then(({ features: f }) => {\r\n                                    f.forEach(fr => {\r\n                                        if (fr.endsWith('#displayname_required')) {\r\n                                            this.eventEmitter.emit(\r\n                                                JitsiConnectionEvents.DISPLAY_NAME_REQUIRED);\r\n                                        }\r\n                                    });\r\n                                })\r\n                                .catch(e => logger.warn('Error getting features from lobby.', e && e.message));\r\n                        }\r\n                    });\r\n\r\n                    if (this.speakerStatsComponentAddress\r\n                        || this.conferenceDurationComponentAddress) {\r\n                        this.connection.addHandler(\r\n                            this._onPrivateMessage.bind(this), null,\r\n                            'message', null, null);\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    const errmsg = 'Feature discovery error';\r\n\r\n                    GlobalOnErrorHandler.callErrorHandler(\r\n                        new Error(`${errmsg}: ${error}`));\r\n                    logger.error(errmsg, error);\r\n                });\r\n\r\n            if (credentials.password) {\r\n                this.authenticatedUser = true;\r\n            }\r\n            if (this.connection && this.connection.connected\r\n                && Strophe.getResourceFromJid(this.connection.jid)) {\r\n                // .connected is true while connecting?\r\n                // this.connection.send($pres());\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\r\n                    Strophe.getResourceFromJid(this.connection.jid));\r\n            }\r\n        } else if (status === Strophe.Status.CONNFAIL) {\r\n            if (msg === 'x-strophe-bad-non-anon-jid') {\r\n                this.anonymousConnectionFailed = true;\r\n            } else {\r\n                this.connectionFailed = true;\r\n            }\r\n            this.lastErrorMsg = msg;\r\n            if (msg === 'giving-up') {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\r\n            }\r\n        } else if (status === Strophe.Status.ERROR) {\r\n            this.lastErrorMsg = msg;\r\n        } else if (status === Strophe.Status.DISCONNECTED) {\r\n            // Stop ping interval\r\n            this.connection.ping.stopInterval();\r\n            const wasIntentionalDisconnect = Boolean(this.disconnectInProgress);\r\n            const errMsg = msg || this.lastErrorMsg;\r\n\r\n            if (this.anonymousConnectionFailed) {\r\n                // prompt user for username and password\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\r\n            } else if (this.connectionFailed) {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_FAILED,\r\n                    JitsiConnectionErrors.OTHER_ERROR,\r\n                    errMsg,\r\n                    undefined, /* credentials */\r\n                    this._getConnectionFailedReasonDetails());\r\n            } else if (wasIntentionalDisconnect) {\r\n                this.eventEmitter.emit(\r\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\r\n            } else {\r\n                // XXX if Strophe drops the connection while not being asked to,\r\n                // it means that most likely some serious error has occurred.\r\n                // One currently known case is when a BOSH request fails for\r\n                // more than 4 times. The connection is dropped without\r\n                // supplying a reason(error message/event) through the API.\r\n                logger.error('XMPP connection dropped!');\r\n\r\n                // XXX if the last request error is within 5xx range it means it\r\n                // was a server failure\r\n                const lastErrorStatus = Strophe.getLastErrorStatus();\r\n\r\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConnectionEvents.CONNECTION_FAILED,\r\n                        JitsiConnectionErrors.SERVER_ERROR,\r\n                        errMsg || 'server-error',\r\n                        /* credentials */ undefined,\r\n                        this._getConnectionFailedReasonDetails());\r\n                } else {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConnectionEvents.CONNECTION_FAILED,\r\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\r\n                        errMsg || 'connection-dropped-error',\r\n                        /* credentials */ undefined,\r\n                        this._getConnectionFailedReasonDetails());\r\n                }\r\n            }\r\n        } else if (status === Strophe.Status.AUTHFAIL) {\r\n            // wrong password or username, prompt user\r\n            this.eventEmitter.emit(\r\n                JitsiConnectionEvents.CONNECTION_FAILED,\r\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\r\n                msg,\r\n                credentials);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     */\r\n    _connect(jid, password) {\r\n        // connection.connect() starts the connection process.\r\n        //\r\n        // As the connection process proceeds, the user supplied callback will\r\n        // be triggered multiple times with status updates. The callback should\r\n        // take two arguments - the status code and the error condition.\r\n        //\r\n        // The status code will be one of the values in the Strophe.Status\r\n        // constants. The error condition will be one of the conditions defined\r\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\r\n        //\r\n        // The Parameters wait, hold and route are optional and only relevant\r\n        // for BOSH connections. Please see XEP 124 for a more detailed\r\n        // explanation of the optional parameters.\r\n        //\r\n        // Connection status constants for use by the connection handler\r\n        // callback.\r\n        //\r\n        //  Status.ERROR - An error has occurred (websockets specific)\r\n        //  Status.CONNECTING - The connection is currently being made\r\n        //  Status.CONNFAIL - The connection attempt failed\r\n        //  Status.AUTHENTICATING - The connection is authenticating\r\n        //  Status.AUTHFAIL - The authentication attempt failed\r\n        //  Status.CONNECTED - The connection has succeeded\r\n        //  Status.DISCONNECTED - The connection has been terminated\r\n        //  Status.DISCONNECTING - The connection is currently being terminated\r\n        //  Status.ATTACHED - The connection has been attached\r\n\r\n        this._resetState();\r\n        this.connection.connect(\r\n            jid,\r\n            password,\r\n            this.connectionHandler.bind(this, {\r\n                jid,\r\n                password\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Attach to existing connection. Can be used for optimizations. For\r\n     * example: if the connection is created on the server we can attach to it\r\n     * and start using it.\r\n     *\r\n     * @param options {object} connecting options - rid, sid, jid and password.\r\n     */\r\n    attach(options) {\r\n        this._resetState();\r\n        const now = this.connectionTimes.attaching = window.performance.now();\r\n\r\n        logger.log('(TIME) Strophe Attaching:\\t', now);\r\n        this.connection.attach(options.jid, options.sid,\r\n            parseInt(options.rid, 10) + 1,\r\n            this.connectionHandler.bind(this, {\r\n                jid: options.jid,\r\n                password: options.password\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * Resets any state/flag before starting a new connection.\r\n     * @private\r\n     */\r\n    _resetState() {\r\n        this.anonymousConnectionFailed = false;\r\n        this.connectionFailed = false;\r\n        this.lastErrorMsg = undefined;\r\n        this.disconnectInProgress = undefined;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     */\r\n    connect(jid, password) {\r\n        if (!jid) {\r\n            const { anonymousdomain, domain } = this.options.hosts;\r\n            let configDomain = anonymousdomain || domain;\r\n\r\n            // Force authenticated domain if room is appended with '?login=true'\r\n            // or if we're joining with the token\r\n\r\n            // FIXME Do not rely on window.location because (1) React Native\r\n            // does not have a window.location by default and (2) here we cannot\r\n            // know for sure that query/search has not be stripped from\r\n            // window.location by the time the following executes.\r\n            const { location } = window;\r\n\r\n            if (anonymousdomain) {\r\n                const search = location && location.search;\r\n\r\n                if ((search && search.indexOf('login=true') !== -1)\r\n                        || this.token) {\r\n                    configDomain = domain;\r\n                }\r\n            }\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            jid = configDomain || (location && location.hostname);\r\n        }\r\n\r\n        return this._connect(jid, password);\r\n    }\r\n\r\n    /**\r\n     * Joins or creates a muc with the provided jid, created from the passed\r\n     * in room name and muc host and onCreateResource result.\r\n     *\r\n     * @param {string} roomName - The name of the muc to join.\r\n     * @param {Object} options - Configuration for how to join the muc.\r\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\r\n     * is to be added to the jid.\r\n     * @returns {Promise} Resolves with an instance of a strophe muc.\r\n     */\r\n    createRoom(roomName, options, onCreateResource) {\r\n        // There are cases (when using subdomain) where muc can hold an uppercase part\r\n        let roomjid = `${roomName}@${options.customDomain\r\n            ? options.customDomain : this.options.hosts.muc.toLowerCase()}/`;\r\n\r\n        const mucNickname = onCreateResource\r\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\r\n            : RandomUtil.randomHexString(8).toLowerCase();\r\n\r\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\r\n        roomjid += mucNickname;\r\n\r\n        return this.connection.emuc.createRoom(roomjid, null, options);\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the participant associated with the Strophe connection.\r\n     *\r\n     * @returns {string} The jid of the participant.\r\n     */\r\n    getJid() {\r\n        return this.connection.jid;\r\n    }\r\n\r\n    /**\r\n     * Returns the logs from strophe.jingle.\r\n     * @returns {Object}\r\n     */\r\n    getJingleLog() {\r\n        const jingle = this.connection.jingle;\r\n\r\n\r\n        return jingle ? jingle.getLog() : {};\r\n    }\r\n\r\n    /**\r\n     * Returns the logs from strophe.\r\n     */\r\n    getXmppLog() {\r\n        return (this.connection.logger || {}).log || null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    dial(...args) {\r\n        this.connection.rayo.dial(...args);\r\n    }\r\n\r\n    /**\r\n     * Pings the server.\r\n     * @param timeout how many ms before a timeout should occur.\r\n     * @returns {Promise} resolved on ping success and reject on an error or\r\n     * a timeout.\r\n     */\r\n    ping(timeout) {\r\n        return new Promise((resolve, reject) => {\r\n            this.connection.ping\r\n                    .ping(this.connection.domain, resolve, reject, timeout);\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getSessions() {\r\n        return this.connection.jingle.sessions;\r\n    }\r\n\r\n    /**\r\n     * Disconnects this from the XMPP server (if this is connected).\r\n     *\r\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\r\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\r\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\r\n     */\r\n    disconnect(ev) {\r\n        if (this.disconnectInProgress) {\r\n            return this.disconnectInProgress;\r\n        } else if (!this.connection) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this.disconnectInProgress = new Promise(resolve => {\r\n            const disconnectListener = (credentials, status) => {\r\n                if (status === Strophe.Status.DISCONNECTED) {\r\n                    resolve();\r\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\r\n                }\r\n            };\r\n\r\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\r\n        });\r\n\r\n        this._cleanupXmppConnection(ev);\r\n\r\n        return this.disconnectInProgress;\r\n    }\r\n\r\n    /**\r\n     * The method is supposed to gracefully close the XMPP connection and the main goal is to make sure that the current\r\n     * participant will be removed from the conference XMPP MUC, so that it doesn't leave a \"ghost\" participant behind.\r\n     *\r\n     * @param {Object} ev - Optionally, the event which triggered the necessity to disconnect from the XMPP server\r\n     * (e.g. beforeunload, unload).\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _cleanupXmppConnection(ev) {\r\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that means that there may not be enough time\r\n        // to send an unavailable presence or disconnect at all. Switching Strophe to synchronous sending is not much of\r\n        // an option because it may lead to a noticeable delay in navigating away from the current location. As\r\n        // a compromise, we will try to increase the chances of sending an unavailable presence and/or disconnecting\r\n        // within the short time span that we have upon unloading by invoking flush() on the connection. We flush() once\r\n        // before disconnect() in order to attempt to have its unavailable presence at the top of the send queue. We\r\n        // flush() once more after disconnect() in order to attempt to have its unavailable presence sent as soon as\r\n        // possible.\r\n        !this.connection.isUsingWebSocket && this.connection.flush();\r\n\r\n        if (!this.connection.isUsingWebSocket && ev !== null && typeof ev !== 'undefined') {\r\n            const evType = ev.type;\r\n\r\n            if (evType === 'beforeunload' || evType === 'unload') {\r\n                // XXX Whatever we said above, synchronous sending is the best (known) way to properly disconnect from\r\n                // the XMPP server. Consequently, it may be fine to have the source code and comment it in or out\r\n                // depending on whether we want to run with it for some time.\r\n                this.connection.options.sync = true;\r\n\r\n                // This is needed in some browsers where sync xhr sending is disabled by default on unload.\r\n                if (this.connection.sendUnavailableBeacon()) {\r\n\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        this.connection.disconnect();\r\n\r\n        if (this.connection.options.sync !== true) {\r\n            this.connection.flush();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    _initStrophePlugins() {\r\n        const iceConfig = {\r\n            jvb: { iceServers: [ ] },\r\n            p2p: { iceServers: [ ] }\r\n        };\r\n\r\n        const p2pStunServers = (this.options.p2p\r\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\r\n\r\n        if (Array.isArray(p2pStunServers)) {\r\n            logger.info('P2P STUN servers: ', p2pStunServers);\r\n            iceConfig.p2p.iceServers = p2pStunServers;\r\n        }\r\n\r\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\r\n            logger.info('P2P ICE transport policy: ',\r\n                this.options.p2p.iceTransportPolicy);\r\n\r\n            iceConfig.p2p.iceTransportPolicy\r\n                = this.options.p2p.iceTransportPolicy;\r\n        }\r\n\r\n        this.connection.addConnectionPlugin('emuc', new MucConnectionPlugin(this));\r\n        this.connection.addConnectionPlugin('jingle', new JingleConnectionPlugin(this, this.eventEmitter, iceConfig));\r\n        this.connection.addConnectionPlugin('rayo', new RayoConnectionPlugin());\r\n    }\r\n\r\n    /**\r\n     * Returns details about connection failure. Shard change or is it after\r\n     * suspend.\r\n     * @returns {object} contains details about a connection failure.\r\n     * @private\r\n     */\r\n    _getConnectionFailedReasonDetails() {\r\n        const details = {};\r\n\r\n        // check for moving between shard if information is available\r\n        if (this.options.deploymentInfo\r\n            && this.options.deploymentInfo.shard\r\n            && this.connection.lastResponseHeaders) {\r\n\r\n            // split headers by line\r\n            const headersArr = this.connection.lastResponseHeaders\r\n                .trim().split(/[\\r\\n]+/);\r\n            const headers = {};\r\n\r\n            headersArr.forEach(line => {\r\n                const parts = line.split(': ');\r\n                const header = parts.shift();\r\n                const value = parts.join(': ');\r\n\r\n                headers[header] = value;\r\n            });\r\n\r\n            /* eslint-disable camelcase */\r\n            details.shard_changed\r\n                = this.options.deploymentInfo.shard\r\n                    !== headers['x-jitsi-shard'];\r\n            /* eslint-enable camelcase */\r\n        }\r\n\r\n        /* eslint-disable camelcase */\r\n        // check for possible suspend\r\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\r\n        details.time_since_last_success = this.connection.getTimeSinceLastSuccess();\r\n        /* eslint-enable camelcase */\r\n\r\n        return details;\r\n    }\r\n\r\n    /**\r\n     * Notifies speaker stats component if available that we are the new\r\n     * dominant speaker in the conference.\r\n     * @param {String} roomJid - The room jid where the speaker event occurred.\r\n     */\r\n    sendDominantSpeakerEvent(roomJid) {\r\n        // no speaker stats component advertised\r\n        if (!this.speakerStatsComponentAddress || !roomJid) {\r\n            return;\r\n        }\r\n\r\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\r\n\r\n        msg.c('speakerstats', {\r\n            xmlns: 'http://jitsi.org/jitmeet',\r\n            room: roomJid })\r\n            .up();\r\n\r\n        this.connection.send(msg);\r\n    }\r\n\r\n    /**\r\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\r\n     * parsing it and checking if it has a field called 'type'.\r\n     *\r\n     * @param {string} jsonString check if this string is a valid json string\r\n     * and contains the special structure.\r\n     * @returns {boolean, object} if given object is a valid JSON string, return\r\n     * the json object. Otherwise, returns false.\r\n     */\r\n    tryParseJSONAndVerify(jsonString) {\r\n        try {\r\n            const json = JSON.parse(jsonString);\r\n\r\n            // Handle non-exception-throwing cases:\r\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\r\n            // hence the type-checking,\r\n            // but... JSON.parse(null) returns null, and\r\n            // typeof null === \"object\",\r\n            // so we must check for that, too.\r\n            // Thankfully, null is falsey, so this suffices:\r\n            if (json && typeof json === 'object') {\r\n                const type = json[JITSI_MEET_MUC_TYPE];\r\n\r\n                if (typeof type !== 'undefined') {\r\n                    return json;\r\n                }\r\n\r\n                logger.debug('parsing valid json but does not have correct '\r\n                    + 'structure', 'topic: ', type);\r\n            }\r\n        } catch (e) {\r\n            logger.error(e);\r\n\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * A private message is received, message that is not addressed to the muc.\r\n     * We expect private message coming from plugins component if it is\r\n     * enabled and running.\r\n     *\r\n     * @param {string} msg - The message.\r\n     */\r\n    _onPrivateMessage(msg) {\r\n        const from = msg.getAttribute('from');\r\n\r\n        if (!(from === this.speakerStatsComponentAddress\r\n            || from === this.conferenceDurationComponentAddress)) {\r\n            return true;\r\n        }\r\n\r\n        const jsonMessage = $(msg).find('>json-message')\r\n            .text();\r\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\r\n\r\n        if (parsedJson\r\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats'\r\n            && parsedJson.users) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\r\n        }\r\n\r\n        if (parsedJson\r\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'conference_duration'\r\n            && parsedJson.created_timestamp) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED, parsedJson.created_timestamp);\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","export const SignalingEvents = {\r\n    /**\r\n     * Event triggered when participant's muted status changes.\r\n     *\r\n     * @param {string} endpointId the track owner's identifier (MUC nickname)\r\n     * @param {MediaType} mediaType \"audio\" or \"video\"\r\n     * @param {boolean} isMuted the new muted state\r\n     */\r\n    PEER_MUTED_CHANGED : 'signaling.peerMuted',\r\n\r\n    /**\r\n     * Event triggered when participant's video type changes.\r\n     *\r\n     * @param {string} endpointId the video owner's ID (MUC nickname)\r\n     * @param {VideoType} videoType the new value\r\n     */\r\n    PEER_VIDEO_TYPE_CHANGED : 'signaling.peerVideoType',\r\n\r\n    /**\r\n     * Event triggered when source's muted status changes.\r\n     *\r\n     * @param {string} sourceName - The name of the source.\r\n     * @param {boolean} isMuted - The new muted state.\r\n     */\r\n    SOURCE_MUTED_CHANGED : 'signaling.sourceMuted',\r\n\r\n    /**\r\n     * Event triggered when source's video type changes.\r\n     *\r\n     * @param {string} source - The name of the source.\r\n     * @param {VideoType} videoType - The new value.\r\n     */\r\n    SOURCE_VIDEO_TYPE_CHANGED : 'signaling.sourceVideoType'\r\n}\r\n\r\n// exported for backward compatibility\r\nexport const PEER_MUTED_CHANGED = SignalingEvents.PEER_MUTED_CHANGED;\r\nexport const PEER_VIDEO_TYPE_CHANGED = SignalingEvents.PEER_VIDEO_TYPE_CHANGED;\r\nexport const SOURCE_MUTED_CHANGED = SignalingEvents.SOURCE_MUTED_CHANGED;\r\nexport const SOURCE_VIDEO_TYPE_CHANGED = SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED;","import { jitsiLocalStorage } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nimport UsernameGenerator from '../util/UsernameGenerator';\r\n\r\nlet _callStatsUserName;\r\n\r\nlet _machineId;\r\n\r\n/**\r\n *\r\n */\r\nexport default {\r\n\r\n    /**\r\n     * The storage used to store the settings.\r\n     */\r\n    _storage: jitsiLocalStorage,\r\n\r\n    /**\r\n     * Initializes the Settings class.\r\n     *\r\n     * @param {Storage|undefined} externalStorage - Object that implements the Storage interface. This object will be\r\n     * used for storing data instead of jitsiLocalStorage if specified.\r\n     */\r\n    init(externalStorage) {\r\n        this._storage = externalStorage || jitsiLocalStorage;\r\n    },\r\n\r\n    /**\r\n     * Returns fake username for callstats\r\n     * @returns {string} fake username for callstats\r\n     */\r\n    get callStatsUserName() {\r\n        if (!_callStatsUserName) {\r\n            _callStatsUserName = this._storage.getItem('callStatsUserName');\r\n            if (!_callStatsUserName) {\r\n                _callStatsUserName = generateCallStatsUserName();\r\n                this._storage.setItem('callStatsUserName', _callStatsUserName);\r\n            }\r\n        }\r\n\r\n        return _callStatsUserName;\r\n    },\r\n\r\n    /**\r\n     * Returns current machine id.\r\n     * @returns {string} machine id\r\n     */\r\n    get machineId() {\r\n        if (!_machineId) {\r\n            _machineId = this._storage.getItem('jitsiMeetId');\r\n            if (!_machineId) {\r\n                _machineId = generateJitsiMeetId();\r\n                this._storage.setItem('jitsiMeetId', _machineId);\r\n            }\r\n        }\r\n\r\n        return _machineId;\r\n    },\r\n\r\n    /**\r\n     * Returns current session id.\r\n     * @returns {string} current session id\r\n     */\r\n    get sessionId() {\r\n        // We may update sessionId in localStorage from another JitsiConference\r\n        // instance and that's why we should always re-read it.\r\n        return this._storage.getItem('sessionId');\r\n    },\r\n\r\n    /**\r\n     * Save current session id.\r\n     * @param {string} sessionId session id\r\n     */\r\n    set sessionId(sessionId) {\r\n        if (sessionId) {\r\n            this._storage.setItem('sessionId', sessionId);\r\n        } else {\r\n            this._storage.removeItem('sessionId');\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Generate fake username for callstats.\r\n * @returns {string} fake random username\r\n */\r\nfunction generateCallStatsUserName() {\r\n    const username = UsernameGenerator.generateUsername();\r\n\r\n    logger.log('generated callstats uid', username);\r\n\r\n    return username;\r\n}\r\n\r\n/**\r\n * Generate unique id.\r\n * @returns {string} random unique id\r\n */\r\nfunction generateJitsiMeetId() {\r\n    const jitsiMeetId = generateUniqueId();\r\n\r\n    logger.log('generated id', jitsiMeetId);\r\n\r\n    return jitsiMeetId;\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction generateUniqueId() {\r\n    return _p8() + _p8() + _p8() + _p8();\r\n}\r\n\r\n/**\r\n *\r\n */\r\nfunction _p8() {\r\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\r\n}\r\n","import * as transform from 'sdp-transform';\r\n\r\n/**\r\n * Parses the primary SSRC of given SSRC group.\r\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\r\n * @return {Number} the primary SSRC number\r\n */\r\nexport function parsePrimarySSRC(group) {\r\n    return parseInt(group.ssrcs.split(' ')[0], 10);\r\n}\r\n\r\n/**\r\n * Parses the secondary SSRC of given SSRC group.\r\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\r\n * @return {Number} the secondary SSRC number\r\n */\r\nexport function parseSecondarySSRC(group) {\r\n    return parseInt(group.ssrcs.split(' ')[1], 10);\r\n}\r\n\r\n/**\r\n * Tells how many distinct SSRCs are contained in given media line.\r\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\r\n * @return {number}\r\n */\r\nfunction _getSSRCCount(mLine) {\r\n    if (!mLine.ssrcs) {\r\n        return 0;\r\n    }\r\n\r\n    return mLine.ssrcs\r\n        .map(ssrcInfo => ssrcInfo.id)\r\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\r\n        .length;\r\n}\r\n\r\n/**\r\n * A wrapper around 'sdp-transform' media description object which provides\r\n * utility methods for common SDP/SSRC related operations.\r\n */\r\nclass MLineWrap {\r\n\r\n    /**\r\n     * Creates new <tt>MLineWrap</t>>\r\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\r\n     * lib.\r\n     */\r\n    constructor(mLine) {\r\n        if (!mLine) {\r\n            throw new Error('mLine is undefined');\r\n        }\r\n\r\n        this.mLine = mLine;\r\n    }\r\n\r\n    /**\r\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\r\n     * one will be preassigned.\r\n     *\r\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\r\n     * objects.\r\n     */\r\n    get ssrcs() {\r\n        if (!this.mLine.ssrcs) {\r\n            this.mLine.ssrcs = [];\r\n        }\r\n\r\n        return this.mLine.ssrcs;\r\n    }\r\n\r\n    /**\r\n     * Setter for the mLine's \"ssrcs\" array.\r\n     *\r\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\r\n     * objects.\r\n     */\r\n    set ssrcs(ssrcs) {\r\n        this.mLine.ssrcs = ssrcs;\r\n    }\r\n\r\n    /**\r\n     * Returns the direction of the underlying media description.\r\n     * @return {string} the media direction name as defined in the SDP.\r\n     */\r\n    get direction() {\r\n        return this.mLine.direction;\r\n    }\r\n\r\n    /**\r\n     * Modifies the direction of the underlying media description.\r\n     * @param {string} direction the new direction to be set\r\n     */\r\n    set direction(direction) {\r\n        this.mLine.direction = direction;\r\n    }\r\n\r\n    /**\r\n     * Exposes the SSRC group array of the underlying media description object.\r\n     * @return {Array.<Object>}\r\n     */\r\n    get ssrcGroups() {\r\n        if (!this.mLine.ssrcGroups) {\r\n            this.mLine.ssrcGroups = [];\r\n        }\r\n\r\n        return this.mLine.ssrcGroups;\r\n    }\r\n\r\n    /**\r\n     * Modifies the SSRC groups array of the underlying media description\r\n     * object.\r\n     * @param {Array.<Object>} ssrcGroups\r\n     */\r\n    set ssrcGroups(ssrcGroups) {\r\n        this.mLine.ssrcGroups = ssrcGroups;\r\n    }\r\n\r\n    /**\r\n     * Obtains value from SSRC attribute.\r\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\r\n     * found\r\n     * @param {string} attrName the name of the SSRC attribute to be found.\r\n     * @return {string|undefined} the value of SSRC attribute or\r\n     * <tt>undefined</tt> if no such attribute exists.\r\n     */\r\n    getSSRCAttrValue(ssrcNumber, attrName) {\r\n        const attribute = this.ssrcs.find(\r\n            ssrcObj => ssrcObj.id === ssrcNumber\r\n            && ssrcObj.attribute === attrName);\r\n\r\n\r\n        return attribute && attribute.value;\r\n    }\r\n\r\n    /**\r\n     * Removes all attributes for given SSRC number.\r\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\r\n     * removed.\r\n     */\r\n    removeSSRC(ssrcNum) {\r\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcs\r\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\r\n    }\r\n\r\n    /**\r\n     * Adds SSRC attribute\r\n     * @param {object} ssrcObj the SSRC attribute object as defined in\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    addSSRCAttribute(ssrcObj) {\r\n        this.ssrcs.push(ssrcObj);\r\n    }\r\n\r\n    /**\r\n     * Finds a SSRC group matching both semantics and SSRCs in order.\r\n     * @param {string} semantics the name of the semantics\r\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\r\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\r\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\r\n     * not found.\r\n     */\r\n    findGroup(semantics, ssrcs) {\r\n        return this.ssrcGroups.find(\r\n            group =>\r\n                group.semantics === semantics\r\n                    && (!ssrcs || ssrcs === group.ssrcs));\r\n    }\r\n\r\n    /**\r\n     * Finds all groups matching given semantic's name.\r\n     * @param {string} semantics the name of the semantics\r\n     * @return {Array.<object>} an array of SSRC group objects as defined by\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    findGroups(semantics) {\r\n        return this.ssrcGroups.filter(\r\n            group => group.semantics === semantics);\r\n    }\r\n\r\n    /**\r\n     * Finds all groups matching given semantic's name and group's primary SSRC.\r\n     * @param {string} semantics the name of the semantics\r\n     * @param {number} primarySSRC the primary SSRC number to be matched\r\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\r\n     */\r\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\r\n        return this.ssrcGroups.find(\r\n            group => group.semantics === semantics\r\n                && parsePrimarySSRC(group) === primarySSRC);\r\n    }\r\n\r\n    /**\r\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\r\n     * the first SSRC object with any 'msid' value.\r\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\r\n     * lib.\r\n     */\r\n    findSSRCByMSID(msid) {\r\n        return this.ssrcs.find(\r\n            ssrcObj => ssrcObj.attribute === 'msid'\r\n                && (msid === null || ssrcObj.value === msid));\r\n    }\r\n\r\n    /**\r\n     * Gets the SSRC count for the underlying media description.\r\n     * @return {number}\r\n     */\r\n    getSSRCCount() {\r\n        return _getSSRCCount(this.mLine);\r\n    }\r\n\r\n    /**\r\n     * Checks whether the underlying media description contains any SSRC groups.\r\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\r\n     * <tt>false</tt> otherwise.\r\n     */\r\n    containsAnySSRCGroups() {\r\n        return this.mLine.ssrcGroups !== undefined;\r\n    }\r\n\r\n    /**\r\n     * Finds the primary video SSRC.\r\n     * @returns {number|undefined} the primary video ssrc\r\n     * @throws Error if the underlying media description is not a video\r\n     */\r\n    getPrimaryVideoSsrc() {\r\n        const mediaType = this.mLine.type;\r\n\r\n        if (mediaType !== 'video') {\r\n            throw new Error(\r\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\r\n        }\r\n\r\n        const numSsrcs = _getSSRCCount(this.mLine);\r\n\r\n        if (numSsrcs === 1) {\r\n            // Not using \"ssrcs\" getter on purpose here\r\n            return this.mLine.ssrcs[0].id;\r\n        }\r\n\r\n        // Look for a SIM, FID, or FEC-FR group\r\n        if (this.mLine.ssrcGroups) {\r\n            const simGroup = this.findGroup('SIM');\r\n\r\n            if (simGroup) {\r\n                return parsePrimarySSRC(simGroup);\r\n            }\r\n            const fidGroup = this.findGroup('FID');\r\n\r\n            if (fidGroup) {\r\n                return parsePrimarySSRC(fidGroup);\r\n            }\r\n            const fecGroup = this.findGroup('FEC-FR');\r\n\r\n            if (fecGroup) {\r\n                return parsePrimarySSRC(fecGroup);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Obtains RTX SSRC from the underlying video description (the\r\n     * secondary SSRC of the first \"FID\" group found)\r\n     * @param {number} primarySsrc the video ssrc for which to find the\r\n     * corresponding rtx ssrc\r\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\r\n     * one)\r\n     */\r\n    getRtxSSRC(primarySsrc) {\r\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\r\n\r\n\r\n        return fidGroup && parseSecondarySSRC(fidGroup);\r\n    }\r\n\r\n    /**\r\n     * Obtains all SSRCs contained in the underlying media description.\r\n     * @return {Array.<number>} an array with all SSRC as numbers.\r\n     */\r\n    getSSRCs() {\r\n        return this.ssrcs\r\n            .map(ssrcInfo => ssrcInfo.id)\r\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\r\n    }\r\n\r\n    /**\r\n     * Obtains primary video SSRCs.\r\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\r\n     * @throws Error if the wrapped media description is not a video.\r\n     */\r\n    getPrimaryVideoSSRCs() {\r\n        const mediaType = this.mLine.type;\r\n\r\n        if (mediaType !== 'video') {\r\n            throw new Error(\r\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\r\n        }\r\n\r\n        const videoSSRCs = this.getSSRCs();\r\n\r\n        for (const ssrcGroupInfo of this.ssrcGroups) {\r\n            // Right now, FID and FEC-FR groups are the only ones we parse to\r\n            // disqualify streams.  If/when others arise we'll\r\n            // need to add support for them here\r\n            if (ssrcGroupInfo.semantics === 'FID'\r\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\r\n                // secondary streams should be filtered out\r\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\r\n\r\n                videoSSRCs.splice(\r\n                    videoSSRCs.indexOf(secondarySsrc), 1);\r\n            }\r\n        }\r\n\r\n        return videoSSRCs;\r\n    }\r\n\r\n    /**\r\n     * Dumps all SSRC groups of this media description to JSON.\r\n     */\r\n    dumpSSRCGroups() {\r\n        return JSON.stringify(this.mLine.ssrcGroups);\r\n    }\r\n\r\n    /**\r\n     * Removes all SSRC groups which contain given SSRC number at any position.\r\n     * @param {number} ssrc the SSRC for which all matching groups are to be\r\n     * removed.\r\n     */\r\n    removeGroupsWithSSRC(ssrc) {\r\n        if (!this.mLine.ssrcGroups) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\r\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\r\n    }\r\n\r\n    /**\r\n     * Removes groups that match given semantics.\r\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\r\n     */\r\n    removeGroupsBySemantics(semantics) {\r\n        if (!this.mLine.ssrcGroups) {\r\n            return;\r\n        }\r\n\r\n        this.mLine.ssrcGroups\r\n            = this.mLine.ssrcGroups\r\n                .filter(groupInfo => groupInfo.semantics !== semantics);\r\n    }\r\n\r\n    /**\r\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\r\n     * @param {number} oldSSRC the old SSRC number\r\n     * @param {number} newSSRC the new SSRC number\r\n     */\r\n    replaceSSRC(oldSSRC, newSSRC) {\r\n        if (this.mLine.ssrcs) {\r\n            this.mLine.ssrcs.forEach(ssrcInfo => {\r\n                if (ssrcInfo.id === oldSSRC) {\r\n                    ssrcInfo.id = newSSRC;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds given SSRC group to this media description.\r\n     * @param {object} group the SSRC group object as defined by\r\n     * the 'sdp-transform' lib.\r\n     */\r\n    addSSRCGroup(group) {\r\n        this.ssrcGroups.push(group);\r\n    }\r\n}\r\n\r\n/**\r\n * Utility class for SDP manipulation using the 'sdp-transform' library.\r\n *\r\n * Typical use usage scenario:\r\n *\r\n * const transformer = new SdpTransformWrap(rawSdp);\r\n * const videoMLine = transformer.selectMedia('video);\r\n * if (videoMLine) {\r\n *     videoMLiner.addSSRCAttribute({\r\n *         id: 2342343,\r\n *         attribute: \"cname\",\r\n *         value: \"someCname\"\r\n *     });\r\n *     rawSdp = transformer.toRawSdp();\r\n * }\r\n */\r\nexport class SdpTransformWrap {\r\n\r\n    /**\r\n     * Creates new instance and parses the raw SDP into objects using\r\n     * 'sdp-transform' lib.\r\n     * @param {string} rawSDP the SDP in raw text format.\r\n     */\r\n    constructor(rawSDP) {\r\n        this.parsedSDP = transform.parse(rawSDP);\r\n    }\r\n\r\n    /**\r\n     * Selects the first media SDP of given name.\r\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\r\n     * 'data'.\r\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\r\n     * line or <tt>null</tt> if not found. The object returned references\r\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\r\n     * (it's not a copy).\r\n     */\r\n    selectMedia(mediaType) {\r\n        const selectedMLines = this.parsedSDP.media\r\n            .filter(mLine => mLine.type === mediaType)\r\n            .map(mLine => new MLineWrap(mLine));\r\n\r\n        return selectedMLines ? selectedMLines : null;\r\n    }\r\n\r\n    /**\r\n     * Converts the currently stored SDP state in this instance to raw text SDP\r\n     * format.\r\n     * @return {string}\r\n     */\r\n    toRawSDP() {\r\n        return transform.write(this.parsedSDP);\r\n    }\r\n}\r\n","\r\n/**\r\n * The method will increase the given number by 1. If the given counter is equal\r\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\r\n * 1.\r\n * @param {number} number - An integer counter value to be incremented.\r\n * @return {number} the next counter value increased by 1 (see the description\r\n * above for exception).\r\n */\r\nexport function safeCounterIncrement(number) {\r\n    let nextValue = number;\r\n\r\n    if (number >= Number.MAX_SAFE_INTEGER) {\r\n        nextValue = 0;\r\n    }\r\n\r\n    return nextValue + 1;\r\n}\r\n\r\n/**\r\n * Calculates the average value of am Array of numbers.\r\n *\r\n * @param {Float32Array} valueArray - Array of numbers.\r\n * @returns {number} - Number array average.\r\n */\r\nexport function calculateAverage(valueArray) {\r\n    return valueArray.length > 0 ? valueArray.reduce((a, b) => a + b) / valueArray.length : 0;\r\n}\r\n\r\n/**\r\n * Calculates a unique hash for a given string similar to Java's\r\n * implementation of String.hashCode()\r\n *\r\n * @param {String} string - String whose hash has to be calculated.\r\n * @returns {number} - Unique hash code calculated.\r\n */\r\nexport function hashString(string) {\r\n    let hash = 0;\r\n\r\n    for (let i = 0; i < string.length; i++) {\r\n        hash += Math.pow(string.charCodeAt(i) * 31, string.length - i);\r\n\r\n        /* eslint-disable no-bitwise */\r\n        hash = hash & hash; // Convert to 32bit integer\r\n    }\r\n\r\n    return Math.abs(hash);\r\n}\r\n\r\n/**\r\n * Returns only the positive values from an array of numbers.\r\n *\r\n * @param {Float32Array} valueArray - Array of vad scores.\r\n * @returns {Array} - Array of positive numbers.\r\n */\r\nexport function filterPositiveValues(valueArray) {\r\n    return valueArray.filter(value => value >= 0);\r\n}\r\n\r\n/**\r\n * This class calculates a simple running average that continually changes\r\n * as more data points are collected and added.\r\n */\r\nexport class RunningAverage {\r\n    /**\r\n     * Creates an instance of the running average calculator.\r\n     */\r\n    constructor() {\r\n        this.average = 0;\r\n        this.n = 0;\r\n    }\r\n\r\n    /**\r\n     * Adds a new data point to the existing set of values and recomputes\r\n     * the running average.\r\n     * @param {number} value\r\n     * @returns {void}\r\n     */\r\n    addNext(value) {\r\n        if (typeof value !== 'number') {\r\n            return;\r\n        }\r\n        this.n += 1;\r\n        this.average = this.average + ((value - this.average) / this.n);\r\n    }\r\n\r\n    /**\r\n     * Obtains the average value for the current subset of values.\r\n     * @returns {number} - computed average.\r\n     */\r\n    getAverage() {\r\n        return this.average;\r\n    }\r\n}\r\n","/**\r\n * Indicates that the local connection statistics were updated.\r\n */\r\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\r\n\r\n/**\r\n * Indicates that the connection statistics for a particular remote participant\r\n * were updated.\r\n */\r\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\r\n","/**\r\n * The pending Jingle session state which means the session as defined in\r\n * XEP-0166(before 'session-invite/session-accept' took place).\r\n *\r\n * @type {string}\r\n */\r\nexport const PENDING = 'pending';\r\n\r\n/**\r\n * The active Jingle session state as defined in XEP-0166\r\n * (after 'session-invite'/'session-accept').\r\n *\r\n * @type {string}\r\n */\r\nexport const ACTIVE = 'active';\r\n\r\n/**\r\n * The ended Jingle session state as defined in XEP-0166\r\n * (after 'session-terminate').\r\n * @type {string}\r\n */\r\nexport const ENDED = 'ended';\r\n","/**\r\n * The know jingle actions that can be sent and should be acted upon by\r\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\r\n */\r\nexport const ACTIONS = {\r\n    ACCEPT: 'session-accept',\r\n    CONNECTION_ERROR: 'connection-error-encountered',\r\n    INITIATE: 'session-initiate',\r\n    TERMINATE: 'session-terminate',\r\n    TRANSPORT_INFO: 'transport-info',\r\n    UNAVAILABLE: 'unavailable'\r\n};\r\n","/* global callstats */\r\n\r\nimport browser from '../browser';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * We define enumeration of wrtcFuncNames as we need them before\r\n * callstats is initialized to queue events.\r\n * @const\r\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\r\n */\r\nconst wrtcFuncNames = {\r\n    createOffer: 'createOffer',\r\n    createAnswer: 'createAnswer',\r\n    setLocalDescription: 'setLocalDescription',\r\n    setRemoteDescription: 'setRemoteDescription',\r\n    addIceCandidate: 'addIceCandidate',\r\n    getUserMedia: 'getUserMedia',\r\n    iceConnectionFailure: 'iceConnectionFailure',\r\n    signalingError: 'signalingError',\r\n    applicationLog: 'applicationLog'\r\n};\r\n\r\n/**\r\n * We define enumeration of fabricEvent as we need them before\r\n * callstats is initialized to queue events.\r\n * @const\r\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\r\n */\r\nconst fabricEvent = {\r\n    fabricHold: 'fabricHold',\r\n    fabricResume: 'fabricResume',\r\n    audioMute: 'audioMute',\r\n    audioUnmute: 'audioUnmute',\r\n    videoPause: 'videoPause',\r\n    videoResume: 'videoResume',\r\n    fabricUsageEvent: 'fabricUsageEvent',\r\n    fabricStats: 'fabricStats',\r\n    fabricTerminated: 'fabricTerminated',\r\n    screenShareStart: 'screenShareStart',\r\n    screenShareStop: 'screenShareStop',\r\n    dominantSpeaker: 'dominantSpeaker',\r\n    activeDeviceList: 'activeDeviceList'\r\n};\r\n\r\n/**\r\n * The user id to report to callstats as destination.\r\n * @type {string}\r\n */\r\nconst DEFAULT_REMOTE_USER = 'jitsi';\r\n\r\n/**\r\n * Type of pending reports, can be event or an error.\r\n * @type {{ERROR: string, EVENT: string}}\r\n */\r\nconst reportType = {\r\n    ERROR: 'error',\r\n    EVENT: 'event',\r\n    MST_WITH_USERID: 'mstWithUserID'\r\n};\r\n\r\n/**\r\n * Set of currently existing {@link CallStats} instances.\r\n * @type {Set<CallStats>}\r\n */\r\nlet _fabrics;\r\n\r\n/**\r\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\r\n * reports one peer connection the the CallStats backend and is allocated with\r\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\r\n * reporting various events. A fabric is considered disposed when\r\n * {@link CallStats.sendTerminateEvent} is executed.\r\n *\r\n * Currently only one backend instance can be created ever and it's done using\r\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\r\n * explicitly shutdown the backend, but it's supposed to close it's connection\r\n * automatically, after all fabrics have been terminated.\r\n */\r\nexport default class CallStats {\r\n    /**\r\n     * A callback passed to {@link callstats.addNewFabric}.\r\n     * @param {string} error 'success' means ok\r\n     * @param {string} msg some more details\r\n     * @private\r\n     */\r\n    static _addNewFabricCallback(error, msg) {\r\n        if (CallStats.backend && error !== 'success') {\r\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback passed to {@link callstats.initialize} (backend initialization)\r\n     * @param {string} error 'success' means ok\r\n     * @param {String} msg\r\n     * @private\r\n     */\r\n    static _initCallback(error, msg) {\r\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\r\n\r\n        // there is no lib, nothing to report to\r\n        if (error !== 'success') {\r\n            return;\r\n        }\r\n\r\n        CallStats.backendInitialized = true;\r\n\r\n        // I hate that\r\n        let atLeastOneFabric = false;\r\n        let defaultInstance = null;\r\n\r\n        for (const callStatsInstance of CallStats.fabrics.values()) {\r\n            if (!callStatsInstance.hasFabric) {\r\n                logger.debug('addNewFabric - initCallback');\r\n                if (callStatsInstance._addNewFabric()) {\r\n                    atLeastOneFabric = true;\r\n                    if (!defaultInstance) {\r\n                        defaultInstance = callStatsInstance;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!atLeastOneFabric) {\r\n            return;\r\n        }\r\n\r\n        CallStats._emptyReportQueue(defaultInstance);\r\n    }\r\n\r\n    /**\r\n     * Empties report queue.\r\n     *\r\n     * @param {CallStats} csInstance - The callstats instance.\r\n     * @private\r\n     */\r\n    static _emptyReportQueue(csInstance) {\r\n        // There is no conference ID nor a PeerConnection available when some of\r\n        // the events are scheduled on the reportsQueue, so those will be\r\n        // reported on the first initialized fabric.\r\n        const defaultConfID = csInstance.confID;\r\n        const defaultPC = csInstance.peerconnection;\r\n\r\n        // notify callstats about failures if there were any\r\n        for (const report of CallStats.reportsQueue) {\r\n            if (report.type === reportType.ERROR) {\r\n                const errorData = report.data;\r\n\r\n                CallStats._reportError(\r\n                    csInstance,\r\n                    errorData.type,\r\n                    errorData.error,\r\n                    errorData.pc || defaultPC);\r\n            } else if (report.type === reportType.EVENT) {\r\n                // if we have and event to report and we failed to add\r\n                // fabric this event will not be reported anyway, returning\r\n                // an error\r\n                const eventData = report.data;\r\n\r\n                CallStats.backend.sendFabricEvent(\r\n                    report.pc || defaultPC,\r\n                    eventData.event,\r\n                    defaultConfID,\r\n                    eventData.eventData);\r\n            } else if (report.type === reportType.MST_WITH_USERID) {\r\n                const data = report.data;\r\n\r\n                CallStats.backend.associateMstWithUserID(\r\n                    report.pc || defaultPC,\r\n                    data.callStatsId,\r\n                    defaultConfID,\r\n                    data.ssrc,\r\n                    data.usageLabel,\r\n                    data.containerId\r\n                );\r\n            }\r\n        }\r\n        CallStats.reportsQueue.length = 0;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Reports an error to callstats.\r\n     *\r\n     * @param {CallStats} [cs]\r\n     * @param type the type of the error, which will be one of the wrtcFuncNames\r\n     * @param error the error\r\n     * @param pc the peerconnection\r\n     * @private\r\n     */\r\n    static _reportError(cs, type, error, pc) {\r\n        let _error = error;\r\n\r\n        if (!_error) {\r\n            logger.warn('No error is passed!');\r\n            _error = new Error('Unknown error');\r\n        }\r\n        if (CallStats.backendInitialized && cs) {\r\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                type: reportType.ERROR,\r\n                data: {\r\n                    error: _error,\r\n                    pc,\r\n                    type\r\n                }\r\n            });\r\n        }\r\n\r\n        // else just ignore it\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Reports an error to callstats.\r\n     *\r\n     * @param {CallStats} cs\r\n     * @param event the type of the event, which will be one of the fabricEvent\r\n     * @param eventData additional data to pass to event\r\n     * @private\r\n     */\r\n    static _reportEvent(cs, event, eventData) {\r\n        const pc = cs && cs.peerconnection;\r\n        const confID = cs && cs.confID;\r\n\r\n        if (CallStats.backendInitialized && cs) {\r\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                confID,\r\n                pc,\r\n                type: reportType.EVENT,\r\n                data: { event,\r\n                    eventData }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wraps some of the CallStats API method and logs their calls with\r\n     * arguments on the debug logging level. Also wraps some of the backend\r\n     * methods execution into try catch blocks to not crash the app in case\r\n     * there is a problem with the backend itself.\r\n     * @param {callstats} theBackend\r\n     * @private\r\n     */\r\n    static _traceAndCatchBackendCalls(theBackend) {\r\n        const tryCatchMethods = [\r\n            'associateMstWithUserID',\r\n            'sendFabricEvent',\r\n            'sendUserFeedback'\r\n\r\n            // 'reportError', - this one needs special handling - see code below\r\n        ];\r\n\r\n        for (const methodName of tryCatchMethods) {\r\n            const originalMethod = theBackend[methodName];\r\n\r\n            theBackend[methodName] = function(...theArguments) {\r\n                try {\r\n                    return originalMethod.apply(theBackend, theArguments);\r\n                } catch (e) {\r\n                    GlobalOnErrorHandler.callErrorHandler(e);\r\n                }\r\n            };\r\n        }\r\n        const debugMethods = [\r\n            'associateMstWithUserID',\r\n            'sendFabricEvent',\r\n            'sendUserFeedback'\r\n\r\n            // 'reportError', - this one needs special handling - see code below\r\n        ];\r\n\r\n        for (const methodName of debugMethods) {\r\n            const originalMethod = theBackend[methodName];\r\n\r\n            theBackend[methodName] = function(...theArguments) {\r\n                logger.debug(methodName, theArguments);\r\n                originalMethod.apply(theBackend, theArguments);\r\n            };\r\n        }\r\n        const originalReportError = theBackend.reportError;\r\n\r\n        /* eslint-disable max-params */\r\n        theBackend.reportError = function(pc, cs, type, ...args) {\r\n            // Logs from the logger are submitted on the applicationLog event\r\n            // \"type\". Logging the arguments on the logger will create endless\r\n            // loop, because it will put all the logs to the logger queue again.\r\n            if (type === wrtcFuncNames.applicationLog) {\r\n                // NOTE otherArguments are not logged to the console on purpose\r\n                // to not log the whole log batch\r\n                // FIXME check the current logging level (currently not exposed\r\n                // by the logger implementation)\r\n                // NOTE it is not safe to log whole objects on react-native as\r\n                // those contain too many circular references and may crash\r\n                // the app.\r\n                if (!browser.isReactNative()) {\r\n                    console && console.debug('reportError', pc, cs, type);\r\n                }\r\n            } else {\r\n                logger.debug('reportError', pc, cs, type, ...args);\r\n            }\r\n            try {\r\n                originalReportError.call(theBackend, pc, cs, type, ...args);\r\n            } catch (exception) {\r\n                if (type === wrtcFuncNames.applicationLog) {\r\n                    console && console.error('reportError', exception);\r\n                } else {\r\n                    GlobalOnErrorHandler.callErrorHandler(exception);\r\n                }\r\n            }\r\n        };\r\n\r\n        /* eslint-enable max-params */\r\n    }\r\n\r\n    /**\r\n     * Returns the Set with the currently existing {@link CallStats} instances.\r\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\r\n     * @type {Set<CallStats>}\r\n     */\r\n    static get fabrics() {\r\n        if (!_fabrics) {\r\n            _fabrics = new Set();\r\n        }\r\n\r\n        return _fabrics;\r\n    }\r\n\r\n    /**\r\n     * Initializes the CallStats backend. Should be called only if\r\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\r\n     * @param {object} options\r\n     * @param {String} options.callStatsID CallStats credentials - ID\r\n     * @param {String} options.callStatsSecret CallStats credentials - secret\r\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\r\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\r\n     * @param {string} options.userName the <tt>userName</tt> part of\r\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\r\n     *\r\n     */\r\n    static initBackend(options) {\r\n        if (CallStats.backend) {\r\n            throw new Error('CallStats backend has been initialized already!');\r\n        }\r\n        try {\r\n            const CallStatsBackend = callstats;\r\n\r\n            CallStats.backend = new CallStatsBackend();\r\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\r\n            CallStats.userID = {\r\n                aliasName: options.aliasName,\r\n                userName: options.userName\r\n            };\r\n            CallStats.callStatsID = options.callStatsID;\r\n            CallStats.callStatsSecret = options.callStatsSecret;\r\n\r\n            let configParams;\r\n\r\n            if (options.applicationName) {\r\n                configParams = {\r\n                    applicationVersion:\r\n                        `${options.applicationName} (${\r\n                            browser.getName()})`\r\n                };\r\n            }\r\n\r\n            if (options.confID) {\r\n                // we first check is there a tenant in the confID\r\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\r\n\r\n                // if there is no tenant, we will just set '/'\r\n                configParams.siteID = options.siteID || (match && match[1]) || '/';\r\n            }\r\n\r\n            // userID is generated or given by the origin server\r\n            CallStats.backend.initialize(\r\n                CallStats.callStatsID,\r\n                CallStats.callStatsSecret,\r\n                CallStats.userID,\r\n                CallStats._initCallback,\r\n                undefined,\r\n                configParams);\r\n\r\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\r\n\r\n            if (getWiFiStatsMethod) {\r\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\r\n\r\n                getWiFiStatsMethod().then(result => {\r\n                    if (result) {\r\n                        logger.info('Reported wifi addresses:'\r\n                            , JSON.parse(result).addresses);\r\n                    }\r\n                })\r\n                .catch(() => {});// eslint-disable-line no-empty-function\r\n            }\r\n\r\n            return true;\r\n        } catch (e) {\r\n            // The callstats.io API failed to initialize (e.g. because its\r\n            // download did not succeed in general or on time). Further attempts\r\n            // to utilize it cannot possibly succeed.\r\n            GlobalOnErrorHandler.callErrorHandler(e);\r\n            CallStats.backend = null;\r\n            logger.error(e);\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the CallStats backend has been created. It does not mean that\r\n     * it has been initialized, but only that the API instance has been\r\n     * allocated successfully.\r\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\r\n     * otherwise\r\n     */\r\n    static isBackendInitialized() {\r\n        return Boolean(CallStats.backend);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats about active device.\r\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\r\n     * their data\r\n     * @param {CallStats} cs callstats instance related to the event\r\n     */\r\n    static sendActiveDeviceListEvent(devicesData, cs) {\r\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that there is a log we want to report.\r\n     *\r\n     * @param {Error} e error to send or {String} message\r\n     * @param {CallStats} cs callstats instance related to the error (optional)\r\n     */\r\n    static sendApplicationLog(e, cs) {\r\n        try {\r\n            CallStats._reportError(\r\n                cs,\r\n                wrtcFuncNames.applicationLog,\r\n                e,\r\n                cs && cs.peerconnection);\r\n        } catch (error) {\r\n            // If sendApplicationLog fails it should not be printed to\r\n            // the logger, because it will try to push the logs again\r\n            // (through sendApplicationLog) and an endless loop is created.\r\n            if (console && (typeof console.error === 'function')) {\r\n                // FIXME send analytics event as well\r\n                console.error('sendApplicationLog failed', error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the given feedback through CallStats.\r\n     *\r\n     * @param {string} conferenceID the conference ID for which the feedback\r\n     * will be reported.\r\n     * @param overall an integer between 1 and 5 indicating the\r\n     * user feedback\r\n     * @param comment detailed feedback from the user.\r\n     */\r\n    static sendFeedback(conferenceID, overall, comment) {\r\n        return new Promise((resolve, reject) => {\r\n            if (CallStats.backend) {\r\n                CallStats.backend.sendUserFeedback(\r\n                    conferenceID,\r\n                    {\r\n                        userID: CallStats.userID,\r\n                        overall,\r\n                        comment\r\n                    },\r\n                    (status, message) => {\r\n                        if (status === 'success') {\r\n                            resolve(message);\r\n                        } else {\r\n                            reject(message);\r\n                        }\r\n                    });\r\n            } else {\r\n                const reason = 'Failed to submit feedback to CallStats - no backend';\r\n\r\n                logger.error(reason);\r\n                reject(reason);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that getUserMedia failed.\r\n     *\r\n     * @param {Error} e error to send\r\n     * @param {CallStats} cs callstats instance related to the error (optional)\r\n     */\r\n    static sendGetUserMediaFailed(e, cs) {\r\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for mute events\r\n     * @param mute {boolean} true for muted and false for not muted\r\n     * @param type {String} \"audio\"/\"video\"\r\n     * @param {CallStats} cs callstats instance related to the event\r\n     */\r\n    static sendMuteEvent(mute, type, cs) {\r\n        let event;\r\n\r\n        if (type === 'video') {\r\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\r\n        } else {\r\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\r\n        }\r\n\r\n        CallStats._reportEvent(cs, event);\r\n    }\r\n\r\n    /**\r\n     * Creates new CallStats instance that handles all callstats API calls for\r\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\r\n     * one CallStats fabric added with 'addFabric' API method for the\r\n     * {@link TraceablePeerConnection} instance passed in the constructor.\r\n     * @param {TraceablePeerConnection} tpc\r\n     * @param {Object} options\r\n     * @param {string} options.confID the conference ID that wil be used to\r\n     * report the session.\r\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\r\n     * which given <tt>tpc</tt> is connected.\r\n     */\r\n    constructor(tpc, options) {\r\n        this.confID = options.confID;\r\n        this.tpc = tpc;\r\n        this.peerconnection = tpc.peerconnection;\r\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\r\n        this.hasFabric = false;\r\n\r\n        CallStats.fabrics.add(this);\r\n\r\n        if (CallStats.backendInitialized) {\r\n            this._addNewFabric();\r\n\r\n            // if this is the first fabric let's try to empty the\r\n            // report queue. Reports all events that we recorded between\r\n            // backend initialization and receiving the first fabric\r\n            if (CallStats.fabrics.size === 1) {\r\n                CallStats._emptyReportQueue(this);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\r\n     * the peer connection associated with this instance.\r\n     * @return {boolean} true if the call was successful or false otherwise.\r\n     */\r\n    _addNewFabric() {\r\n        logger.info('addNewFabric', this.remoteUserID);\r\n        try {\r\n            const fabricAttributes = {\r\n                remoteEndpointType:\r\n                    this.tpc.isP2P\r\n                        ? CallStats.backend.endpointType.peer\r\n                        : CallStats.backend.endpointType.server\r\n            };\r\n            const ret\r\n                = CallStats.backend.addNewFabric(\r\n                    this.peerconnection,\r\n                    this.remoteUserID,\r\n                    CallStats.backend.fabricUsage.multiplex,\r\n                    this.confID,\r\n                    fabricAttributes,\r\n                    CallStats._addNewFabricCallback);\r\n\r\n            this.hasFabric = true;\r\n\r\n            const success = ret.status === 'success';\r\n\r\n            if (!success) {\r\n                logger.error('callstats fabric not initilized', ret.message);\r\n            }\r\n\r\n            return success;\r\n\r\n        } catch (error) {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Lets CallStats module know where is given SSRC rendered by providing\r\n     * renderer tag ID.\r\n     * If the lib is not initialized yet queue the call for later, when it's\r\n     * ready.\r\n     * @param {number} ssrc the SSRC of the stream\r\n     * @param {boolean} isLocal indicates whether this the stream is local\r\n     * @param {string|null} streamEndpointId if the stream is not local the it\r\n     * needs to contain the stream owner's ID\r\n     * @param {string} usageLabel meaningful usage label of this stream like\r\n     *        'microphone', 'camera' or 'screen'.\r\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\r\n     *        renders the stream.\r\n     */\r\n    associateStreamWithVideoTag(\r\n            ssrc,\r\n            isLocal,\r\n            streamEndpointId,\r\n            usageLabel,\r\n            containerId) {\r\n        if (!CallStats.backend) {\r\n            return;\r\n        }\r\n\r\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\r\n\r\n        if (CallStats.backendInitialized) {\r\n            CallStats.backend.associateMstWithUserID(\r\n                this.peerconnection,\r\n                callStatsId,\r\n                this.confID,\r\n                ssrc,\r\n                usageLabel,\r\n                containerId);\r\n        } else {\r\n            CallStats.reportsQueue.push({\r\n                type: reportType.MST_WITH_USERID,\r\n                pc: this.peerconnection,\r\n                data: {\r\n                    callStatsId,\r\n                    containerId,\r\n                    ssrc,\r\n                    usageLabel\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Notifies CallStats that we are the new dominant speaker in the\r\n     * conference.\r\n     */\r\n    sendDominantSpeakerEvent() {\r\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that the fabric for the underlying peerconnection was\r\n     * closed and no evens should be reported, after this call.\r\n     */\r\n    sendTerminateEvent() {\r\n        if (CallStats.backendInitialized) {\r\n            CallStats.backend.sendFabricEvent(\r\n                this.peerconnection,\r\n                CallStats.backend.fabricEvent.fabricTerminated,\r\n                this.confID);\r\n        }\r\n        CallStats.fabrics.delete(this);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for ice connection failed\r\n     */\r\n    sendIceConnectionFailedEvent() {\r\n        CallStats._reportError(\r\n            this,\r\n            wrtcFuncNames.iceConnectionFailure,\r\n            null,\r\n            this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to create offer.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendCreateOfferFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to create answer.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendCreateAnswerFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Sends either resume or hold event for the fabric associated with\r\n     * the underlying peerconnection.\r\n     * @param {boolean} isResume true to resume or false to hold\r\n     */\r\n    sendResumeOrHoldEvent(isResume) {\r\n        CallStats._reportEvent(\r\n            this,\r\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats for screen sharing events\r\n     * @param {boolean} start true for starting screen sharing and\r\n     * false for not stopping\r\n     * @param {string|null} ssrc - optional ssrc value, used only when\r\n     * starting screen sharing.\r\n     */\r\n    sendScreenSharingEvent(start, ssrc) {\r\n        let eventData;\r\n\r\n        if (ssrc) {\r\n            eventData = { ssrc };\r\n        }\r\n\r\n        CallStats._reportEvent(\r\n            this,\r\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\r\n            eventData);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to set local description.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendSetLocalDescFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to set remote description.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendSetRemoteDescFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\r\n    }\r\n\r\n    /**\r\n     * Notifies CallStats that peer connection failed to add ICE candidate.\r\n     *\r\n     * @param {Error} e error to send\r\n     */\r\n    sendAddIceCandidateFailed(e) {\r\n        CallStats._reportError(\r\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\r\n    }\r\n}\r\n\r\n/**\r\n * The CallStats API backend instance\r\n * @type {callstats}\r\n */\r\nCallStats.backend = null;\r\n\r\n// some errors/events may happen before CallStats init\r\n// in this case we accumulate them in this array\r\n// and send them to callstats on init\r\nCallStats.reportsQueue = [];\r\n\r\n/**\r\n * Whether the library was successfully initialized(the backend) using its\r\n * initialize method.\r\n * @type {boolean}\r\n */\r\nCallStats.backendInitialized = false;\r\n\r\n/**\r\n * Part of the CallStats credentials - application ID\r\n * @type {string}\r\n */\r\nCallStats.callStatsID = null;\r\n\r\n/**\r\n * Part of the CallStats credentials - application secret\r\n * @type {string}\r\n */\r\nCallStats.callStatsSecret = null;\r\n\r\n/**\r\n * Local CallStats user ID structure. Can be set only once when\r\n * {@link backend} is initialized, so it's static for the time being.\r\n * See CallStats API for more info:\r\n * https://www.callstats.io/api/#userid\r\n * @type {object}\r\n */\r\nCallStats.userID = null;\r\n","import Listenable from '../util/Listenable';\r\n\r\n/**\r\n * Creates ConnectionPlugin class that extends the passed class.\r\n * @param {Class} base the definition of the class that will be extended by\r\n * ConnectionPlugin\r\n */\r\nfunction getConnectionPluginDefinition(base = class {}) {\r\n    /**\r\n     * Base class for strophe connection plugins.\r\n     */\r\n    return class extends base {\r\n        /**\r\n         *\r\n         */\r\n        constructor(...args) {\r\n            super(...args);\r\n            this.connection = null;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param connection\r\n         */\r\n        init(connection) {\r\n            this.connection = connection;\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * ConnectionPlugin class.\r\n */\r\nexport default getConnectionPluginDefinition();\r\n\r\n/**\r\n * ConnectionPlugin class that extends Listenable.\r\n */\r\nexport const ConnectionPluginListenable\r\n    = getConnectionPluginDefinition(Listenable);\r\n","/**\r\n * Lodash (Custom Build) <https://lodash.com/>\r\n * Build: `lodash modularize exports=\"npm\" -o ./`\r\n * Copyright JS Foundation and other contributors <https://js.foundation/>\r\n * Released under MIT license <https://lodash.com/license>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n */\r\n\r\n/** Used as the size to enable large array optimizations. */\r\nvar LARGE_ARRAY_SIZE = 200;\r\n\r\n/** Used to stand-in for `undefined` hash values. */\r\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\r\n\r\n/** Used to compose bitmasks for value comparisons. */\r\nvar COMPARE_PARTIAL_FLAG = 1,\r\n    COMPARE_UNORDERED_FLAG = 2;\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n/** `Object#toString` result references. */\r\nvar argsTag = '[object Arguments]',\r\n    arrayTag = '[object Array]',\r\n    asyncTag = '[object AsyncFunction]',\r\n    boolTag = '[object Boolean]',\r\n    dateTag = '[object Date]',\r\n    errorTag = '[object Error]',\r\n    funcTag = '[object Function]',\r\n    genTag = '[object GeneratorFunction]',\r\n    mapTag = '[object Map]',\r\n    numberTag = '[object Number]',\r\n    nullTag = '[object Null]',\r\n    objectTag = '[object Object]',\r\n    promiseTag = '[object Promise]',\r\n    proxyTag = '[object Proxy]',\r\n    regexpTag = '[object RegExp]',\r\n    setTag = '[object Set]',\r\n    stringTag = '[object String]',\r\n    symbolTag = '[object Symbol]',\r\n    undefinedTag = '[object Undefined]',\r\n    weakMapTag = '[object WeakMap]';\r\n\r\nvar arrayBufferTag = '[object ArrayBuffer]',\r\n    dataViewTag = '[object DataView]',\r\n    float32Tag = '[object Float32Array]',\r\n    float64Tag = '[object Float64Array]',\r\n    int8Tag = '[object Int8Array]',\r\n    int16Tag = '[object Int16Array]',\r\n    int32Tag = '[object Int32Array]',\r\n    uint8Tag = '[object Uint8Array]',\r\n    uint8ClampedTag = '[object Uint8ClampedArray]',\r\n    uint16Tag = '[object Uint16Array]',\r\n    uint32Tag = '[object Uint32Array]';\r\n\r\n/**\r\n * Used to match `RegExp`\r\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\r\n */\r\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\r\n\r\n/** Used to detect host constructors (Safari). */\r\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\r\n\r\n/** Used to detect unsigned integer values. */\r\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n/** Used to identify `toStringTag` values of typed arrays. */\r\nvar typedArrayTags = {};\r\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\r\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\r\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\r\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\r\ntypedArrayTags[uint32Tag] = true;\r\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\r\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\r\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\r\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\r\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\r\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\r\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\r\ntypedArrayTags[weakMapTag] = false;\r\n\r\n/** Detect free variable `global` from Node.js. */\r\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\r\n\r\n/** Detect free variable `self`. */\r\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n\r\n/** Used as a reference to the global object. */\r\nvar root = freeGlobal || freeSelf || Function('return this')();\r\n\r\n/** Detect free variable `exports`. */\r\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\r\n\r\n/** Detect free variable `module`. */\r\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\r\n\r\n/** Detect the popular CommonJS extension `module.exports`. */\r\nvar moduleExports = freeModule && freeModule.exports === freeExports;\r\n\r\n/** Detect free variable `process` from Node.js. */\r\nvar freeProcess = moduleExports && freeGlobal.process;\r\n\r\n/** Used to access faster Node.js helpers. */\r\nvar nodeUtil = (function() {\r\n  try {\r\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\r\n  } catch (e) {}\r\n}());\r\n\r\n/* Node.js helper references. */\r\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\r\n\r\n/**\r\n * A specialized version of `_.filter` for arrays without support for\r\n * iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} predicate The function invoked per iteration.\r\n * @returns {Array} Returns the new filtered array.\r\n */\r\nfunction arrayFilter(array, predicate) {\r\n  var index = -1,\r\n      length = array == null ? 0 : array.length,\r\n      resIndex = 0,\r\n      result = [];\r\n\r\n  while (++index < length) {\r\n    var value = array[index];\r\n    if (predicate(value, index, array)) {\r\n      result[resIndex++] = value;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Appends the elements of `values` to `array`.\r\n *\r\n * @private\r\n * @param {Array} array The array to modify.\r\n * @param {Array} values The values to append.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction arrayPush(array, values) {\r\n  var index = -1,\r\n      length = values.length,\r\n      offset = array.length;\r\n\r\n  while (++index < length) {\r\n    array[offset + index] = values[index];\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * A specialized version of `_.some` for arrays without support for iteratee\r\n * shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} predicate The function invoked per iteration.\r\n * @returns {boolean} Returns `true` if any element passes the predicate check,\r\n *  else `false`.\r\n */\r\nfunction arraySome(array, predicate) {\r\n  var index = -1,\r\n      length = array == null ? 0 : array.length;\r\n\r\n  while (++index < length) {\r\n    if (predicate(array[index], index, array)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.times` without support for iteratee shorthands\r\n * or max array length checks.\r\n *\r\n * @private\r\n * @param {number} n The number of times to invoke `iteratee`.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns the array of results.\r\n */\r\nfunction baseTimes(n, iteratee) {\r\n  var index = -1,\r\n      result = Array(n);\r\n\r\n  while (++index < n) {\r\n    result[index] = iteratee(index);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.unary` without support for storing metadata.\r\n *\r\n * @private\r\n * @param {Function} func The function to cap arguments for.\r\n * @returns {Function} Returns the new capped function.\r\n */\r\nfunction baseUnary(func) {\r\n  return function(value) {\r\n    return func(value);\r\n  };\r\n}\r\n\r\n/**\r\n * Checks if a `cache` value for `key` exists.\r\n *\r\n * @private\r\n * @param {Object} cache The cache to query.\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction cacheHas(cache, key) {\r\n  return cache.has(key);\r\n}\r\n\r\n/**\r\n * Gets the value at `key` of `object`.\r\n *\r\n * @private\r\n * @param {Object} [object] The object to query.\r\n * @param {string} key The key of the property to get.\r\n * @returns {*} Returns the property value.\r\n */\r\nfunction getValue(object, key) {\r\n  return object == null ? undefined : object[key];\r\n}\r\n\r\n/**\r\n * Converts `map` to its key-value pairs.\r\n *\r\n * @private\r\n * @param {Object} map The map to convert.\r\n * @returns {Array} Returns the key-value pairs.\r\n */\r\nfunction mapToArray(map) {\r\n  var index = -1,\r\n      result = Array(map.size);\r\n\r\n  map.forEach(function(value, key) {\r\n    result[++index] = [key, value];\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a unary function that invokes `func` with its argument transformed.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {Function} transform The argument transform.\r\n * @returns {Function} Returns the new function.\r\n */\r\nfunction overArg(func, transform) {\r\n  return function(arg) {\r\n    return func(transform(arg));\r\n  };\r\n}\r\n\r\n/**\r\n * Converts `set` to an array of its values.\r\n *\r\n * @private\r\n * @param {Object} set The set to convert.\r\n * @returns {Array} Returns the values.\r\n */\r\nfunction setToArray(set) {\r\n  var index = -1,\r\n      result = Array(set.size);\r\n\r\n  set.forEach(function(value) {\r\n    result[++index] = value;\r\n  });\r\n  return result;\r\n}\r\n\r\n/** Used for built-in method references. */\r\nvar arrayProto = Array.prototype,\r\n    funcProto = Function.prototype,\r\n    objectProto = Object.prototype;\r\n\r\n/** Used to detect overreaching core-js shims. */\r\nvar coreJsData = root['__core-js_shared__'];\r\n\r\n/** Used to resolve the decompiled source of functions. */\r\nvar funcToString = funcProto.toString;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n\r\n/** Used to detect methods masquerading as native. */\r\nvar maskSrcKey = (function() {\r\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\r\n  return uid ? ('Symbol(src)_1.' + uid) : '';\r\n}());\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar nativeObjectToString = objectProto.toString;\r\n\r\n/** Used to detect if a method is native. */\r\nvar reIsNative = RegExp('^' +\r\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\r\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\r\n);\r\n\r\n/** Built-in value references. */\r\nvar Buffer = moduleExports ? root.Buffer : undefined,\r\n    Symbol = root.Symbol,\r\n    Uint8Array = root.Uint8Array,\r\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\r\n    splice = arrayProto.splice,\r\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\r\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\r\n    nativeKeys = overArg(Object.keys, Object);\r\n\r\n/* Built-in method references that are verified to be native. */\r\nvar DataView = getNative(root, 'DataView'),\r\n    Map = getNative(root, 'Map'),\r\n    Promise = getNative(root, 'Promise'),\r\n    Set = getNative(root, 'Set'),\r\n    WeakMap = getNative(root, 'WeakMap'),\r\n    nativeCreate = getNative(Object, 'create');\r\n\r\n/** Used to detect maps, sets, and weakmaps. */\r\nvar dataViewCtorString = toSource(DataView),\r\n    mapCtorString = toSource(Map),\r\n    promiseCtorString = toSource(Promise),\r\n    setCtorString = toSource(Set),\r\n    weakMapCtorString = toSource(WeakMap);\r\n\r\n/** Used to convert symbols to primitives and strings. */\r\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\r\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\r\n\r\n/**\r\n * Creates a hash object.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction Hash(entries) {\r\n  var index = -1,\r\n      length = entries == null ? 0 : entries.length;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the hash.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf Hash\r\n */\r\nfunction hashClear() {\r\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\r\n  this.size = 0;\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the hash.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf Hash\r\n * @param {Object} hash The hash to modify.\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction hashDelete(key) {\r\n  var result = this.has(key) && delete this.__data__[key];\r\n  this.size -= result ? 1 : 0;\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the hash value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf Hash\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction hashGet(key) {\r\n  var data = this.__data__;\r\n  if (nativeCreate) {\r\n    var result = data[key];\r\n    return result === HASH_UNDEFINED ? undefined : result;\r\n  }\r\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\r\n}\r\n\r\n/**\r\n * Checks if a hash value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf Hash\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction hashHas(key) {\r\n  var data = this.__data__;\r\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\r\n}\r\n\r\n/**\r\n * Sets the hash `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Hash\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the hash instance.\r\n */\r\nfunction hashSet(key, value) {\r\n  var data = this.__data__;\r\n  this.size += this.has(key) ? 0 : 1;\r\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\r\n  return this;\r\n}\r\n\r\n// Add methods to `Hash`.\r\nHash.prototype.clear = hashClear;\r\nHash.prototype['delete'] = hashDelete;\r\nHash.prototype.get = hashGet;\r\nHash.prototype.has = hashHas;\r\nHash.prototype.set = hashSet;\r\n\r\n/**\r\n * Creates an list cache object.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction ListCache(entries) {\r\n  var index = -1,\r\n      length = entries == null ? 0 : entries.length;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the list cache.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf ListCache\r\n */\r\nfunction listCacheClear() {\r\n  this.__data__ = [];\r\n  this.size = 0;\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the list cache.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction listCacheDelete(key) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  if (index < 0) {\r\n    return false;\r\n  }\r\n  var lastIndex = data.length - 1;\r\n  if (index == lastIndex) {\r\n    data.pop();\r\n  } else {\r\n    splice.call(data, index, 1);\r\n  }\r\n  --this.size;\r\n  return true;\r\n}\r\n\r\n/**\r\n * Gets the list cache value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction listCacheGet(key) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  return index < 0 ? undefined : data[index][1];\r\n}\r\n\r\n/**\r\n * Checks if a list cache value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf ListCache\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction listCacheHas(key) {\r\n  return assocIndexOf(this.__data__, key) > -1;\r\n}\r\n\r\n/**\r\n * Sets the list cache `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the list cache instance.\r\n */\r\nfunction listCacheSet(key, value) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  if (index < 0) {\r\n    ++this.size;\r\n    data.push([key, value]);\r\n  } else {\r\n    data[index][1] = value;\r\n  }\r\n  return this;\r\n}\r\n\r\n// Add methods to `ListCache`.\r\nListCache.prototype.clear = listCacheClear;\r\nListCache.prototype['delete'] = listCacheDelete;\r\nListCache.prototype.get = listCacheGet;\r\nListCache.prototype.has = listCacheHas;\r\nListCache.prototype.set = listCacheSet;\r\n\r\n/**\r\n * Creates a map cache object to store key-value pairs.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction MapCache(entries) {\r\n  var index = -1,\r\n      length = entries == null ? 0 : entries.length;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the map.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf MapCache\r\n */\r\nfunction mapCacheClear() {\r\n  this.size = 0;\r\n  this.__data__ = {\r\n    'hash': new Hash,\r\n    'map': new (Map || ListCache),\r\n    'string': new Hash\r\n  };\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the map.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction mapCacheDelete(key) {\r\n  var result = getMapData(this, key)['delete'](key);\r\n  this.size -= result ? 1 : 0;\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the map value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction mapCacheGet(key) {\r\n  return getMapData(this, key).get(key);\r\n}\r\n\r\n/**\r\n * Checks if a map value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf MapCache\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction mapCacheHas(key) {\r\n  return getMapData(this, key).has(key);\r\n}\r\n\r\n/**\r\n * Sets the map `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the map cache instance.\r\n */\r\nfunction mapCacheSet(key, value) {\r\n  var data = getMapData(this, key),\r\n      size = data.size;\r\n\r\n  data.set(key, value);\r\n  this.size += data.size == size ? 0 : 1;\r\n  return this;\r\n}\r\n\r\n// Add methods to `MapCache`.\r\nMapCache.prototype.clear = mapCacheClear;\r\nMapCache.prototype['delete'] = mapCacheDelete;\r\nMapCache.prototype.get = mapCacheGet;\r\nMapCache.prototype.has = mapCacheHas;\r\nMapCache.prototype.set = mapCacheSet;\r\n\r\n/**\r\n *\r\n * Creates an array cache object to store unique values.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [values] The values to cache.\r\n */\r\nfunction SetCache(values) {\r\n  var index = -1,\r\n      length = values == null ? 0 : values.length;\r\n\r\n  this.__data__ = new MapCache;\r\n  while (++index < length) {\r\n    this.add(values[index]);\r\n  }\r\n}\r\n\r\n/**\r\n * Adds `value` to the array cache.\r\n *\r\n * @private\r\n * @name add\r\n * @memberOf SetCache\r\n * @alias push\r\n * @param {*} value The value to cache.\r\n * @returns {Object} Returns the cache instance.\r\n */\r\nfunction setCacheAdd(value) {\r\n  this.__data__.set(value, HASH_UNDEFINED);\r\n  return this;\r\n}\r\n\r\n/**\r\n * Checks if `value` is in the array cache.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf SetCache\r\n * @param {*} value The value to search for.\r\n * @returns {number} Returns `true` if `value` is found, else `false`.\r\n */\r\nfunction setCacheHas(value) {\r\n  return this.__data__.has(value);\r\n}\r\n\r\n// Add methods to `SetCache`.\r\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\r\nSetCache.prototype.has = setCacheHas;\r\n\r\n/**\r\n * Creates a stack cache object to store key-value pairs.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction Stack(entries) {\r\n  var data = this.__data__ = new ListCache(entries);\r\n  this.size = data.size;\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the stack.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf Stack\r\n */\r\nfunction stackClear() {\r\n  this.__data__ = new ListCache;\r\n  this.size = 0;\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the stack.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction stackDelete(key) {\r\n  var data = this.__data__,\r\n      result = data['delete'](key);\r\n\r\n  this.size = data.size;\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the stack value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction stackGet(key) {\r\n  return this.__data__.get(key);\r\n}\r\n\r\n/**\r\n * Checks if a stack value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf Stack\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction stackHas(key) {\r\n  return this.__data__.has(key);\r\n}\r\n\r\n/**\r\n * Sets the stack `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the stack cache instance.\r\n */\r\nfunction stackSet(key, value) {\r\n  var data = this.__data__;\r\n  if (data instanceof ListCache) {\r\n    var pairs = data.__data__;\r\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\r\n      pairs.push([key, value]);\r\n      this.size = ++data.size;\r\n      return this;\r\n    }\r\n    data = this.__data__ = new MapCache(pairs);\r\n  }\r\n  data.set(key, value);\r\n  this.size = data.size;\r\n  return this;\r\n}\r\n\r\n// Add methods to `Stack`.\r\nStack.prototype.clear = stackClear;\r\nStack.prototype['delete'] = stackDelete;\r\nStack.prototype.get = stackGet;\r\nStack.prototype.has = stackHas;\r\nStack.prototype.set = stackSet;\r\n\r\n/**\r\n * Creates an array of the enumerable property names of the array-like `value`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @param {boolean} inherited Specify returning inherited property names.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction arrayLikeKeys(value, inherited) {\r\n  var isArr = isArray(value),\r\n      isArg = !isArr && isArguments(value),\r\n      isBuff = !isArr && !isArg && isBuffer(value),\r\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\r\n      skipIndexes = isArr || isArg || isBuff || isType,\r\n      result = skipIndexes ? baseTimes(value.length, String) : [],\r\n      length = result.length;\r\n\r\n  for (var key in value) {\r\n    if ((inherited || hasOwnProperty.call(value, key)) &&\r\n        !(skipIndexes && (\r\n           // Safari 9 has enumerable `arguments.length` in strict mode.\r\n           key == 'length' ||\r\n           // Node.js 0.10 has enumerable non-index properties on buffers.\r\n           (isBuff && (key == 'offset' || key == 'parent')) ||\r\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\r\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\r\n           // Skip index properties.\r\n           isIndex(key, length)\r\n        ))) {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the index at which the `key` is found in `array` of key-value pairs.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {*} key The key to search for.\r\n * @returns {number} Returns the index of the matched value, else `-1`.\r\n */\r\nfunction assocIndexOf(array, key) {\r\n  var length = array.length;\r\n  while (length--) {\r\n    if (eq(array[length][0], key)) {\r\n      return length;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n/**\r\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\r\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\r\n * symbols of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {Function} keysFunc The function to get the keys of `object`.\r\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\r\n * @returns {Array} Returns the array of property names and symbols.\r\n */\r\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\r\n  var result = keysFunc(object);\r\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\r\n}\r\n\r\n/**\r\n * The base implementation of `getTag` without fallbacks for buggy environments.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the `toStringTag`.\r\n */\r\nfunction baseGetTag(value) {\r\n  if (value == null) {\r\n    return value === undefined ? undefinedTag : nullTag;\r\n  }\r\n  return (symToStringTag && symToStringTag in Object(value))\r\n    ? getRawTag(value)\r\n    : objectToString(value);\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isArguments`.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n */\r\nfunction baseIsArguments(value) {\r\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isEqual` which supports partial comparisons\r\n * and tracks traversed objects.\r\n *\r\n * @private\r\n * @param {*} value The value to compare.\r\n * @param {*} other The other value to compare.\r\n * @param {boolean} bitmask The bitmask flags.\r\n *  1 - Unordered comparison\r\n *  2 - Partial comparison\r\n * @param {Function} [customizer] The function to customize comparisons.\r\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\r\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n */\r\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\r\n  if (value === other) {\r\n    return true;\r\n  }\r\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\r\n    return value !== value && other !== other;\r\n  }\r\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\r\n}\r\n\r\n/**\r\n * A specialized version of `baseIsEqual` for arrays and objects which performs\r\n * deep comparisons and tracks traversed objects enabling objects with circular\r\n * references to be compared.\r\n *\r\n * @private\r\n * @param {Object} object The object to compare.\r\n * @param {Object} other The other object to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\r\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n */\r\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\r\n  var objIsArr = isArray(object),\r\n      othIsArr = isArray(other),\r\n      objTag = objIsArr ? arrayTag : getTag(object),\r\n      othTag = othIsArr ? arrayTag : getTag(other);\r\n\r\n  objTag = objTag == argsTag ? objectTag : objTag;\r\n  othTag = othTag == argsTag ? objectTag : othTag;\r\n\r\n  var objIsObj = objTag == objectTag,\r\n      othIsObj = othTag == objectTag,\r\n      isSameTag = objTag == othTag;\r\n\r\n  if (isSameTag && isBuffer(object)) {\r\n    if (!isBuffer(other)) {\r\n      return false;\r\n    }\r\n    objIsArr = true;\r\n    objIsObj = false;\r\n  }\r\n  if (isSameTag && !objIsObj) {\r\n    stack || (stack = new Stack);\r\n    return (objIsArr || isTypedArray(object))\r\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\r\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\r\n  }\r\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\r\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\r\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\r\n\r\n    if (objIsWrapped || othIsWrapped) {\r\n      var objUnwrapped = objIsWrapped ? object.value() : object,\r\n          othUnwrapped = othIsWrapped ? other.value() : other;\r\n\r\n      stack || (stack = new Stack);\r\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\r\n    }\r\n  }\r\n  if (!isSameTag) {\r\n    return false;\r\n  }\r\n  stack || (stack = new Stack);\r\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isNative` without bad shim checks.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a native function,\r\n *  else `false`.\r\n */\r\nfunction baseIsNative(value) {\r\n  if (!isObject(value) || isMasked(value)) {\r\n    return false;\r\n  }\r\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\r\n  return pattern.test(toSource(value));\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n */\r\nfunction baseIsTypedArray(value) {\r\n  return isObjectLike(value) &&\r\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\r\n}\r\n\r\n/**\r\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction baseKeys(object) {\r\n  if (!isPrototype(object)) {\r\n    return nativeKeys(object);\r\n  }\r\n  var result = [];\r\n  for (var key in Object(object)) {\r\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * A specialized version of `baseIsEqualDeep` for arrays with support for\r\n * partial deep comparisons.\r\n *\r\n * @private\r\n * @param {Array} array The array to compare.\r\n * @param {Array} other The other array to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} stack Tracks traversed `array` and `other` objects.\r\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\r\n */\r\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\r\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\r\n      arrLength = array.length,\r\n      othLength = other.length;\r\n\r\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\r\n    return false;\r\n  }\r\n  // Assume cyclic values are equal.\r\n  var stacked = stack.get(array);\r\n  if (stacked && stack.get(other)) {\r\n    return stacked == other;\r\n  }\r\n  var index = -1,\r\n      result = true,\r\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\r\n\r\n  stack.set(array, other);\r\n  stack.set(other, array);\r\n\r\n  // Ignore non-index properties.\r\n  while (++index < arrLength) {\r\n    var arrValue = array[index],\r\n        othValue = other[index];\r\n\r\n    if (customizer) {\r\n      var compared = isPartial\r\n        ? customizer(othValue, arrValue, index, other, array, stack)\r\n        : customizer(arrValue, othValue, index, array, other, stack);\r\n    }\r\n    if (compared !== undefined) {\r\n      if (compared) {\r\n        continue;\r\n      }\r\n      result = false;\r\n      break;\r\n    }\r\n    // Recursively compare arrays (susceptible to call stack limits).\r\n    if (seen) {\r\n      if (!arraySome(other, function(othValue, othIndex) {\r\n            if (!cacheHas(seen, othIndex) &&\r\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\r\n              return seen.push(othIndex);\r\n            }\r\n          })) {\r\n        result = false;\r\n        break;\r\n      }\r\n    } else if (!(\r\n          arrValue === othValue ||\r\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\r\n        )) {\r\n      result = false;\r\n      break;\r\n    }\r\n  }\r\n  stack['delete'](array);\r\n  stack['delete'](other);\r\n  return result;\r\n}\r\n\r\n/**\r\n * A specialized version of `baseIsEqualDeep` for comparing objects of\r\n * the same `toStringTag`.\r\n *\r\n * **Note:** This function only supports comparing values with tags of\r\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\r\n *\r\n * @private\r\n * @param {Object} object The object to compare.\r\n * @param {Object} other The other object to compare.\r\n * @param {string} tag The `toStringTag` of the objects to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} stack Tracks traversed `object` and `other` objects.\r\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n */\r\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\r\n  switch (tag) {\r\n    case dataViewTag:\r\n      if ((object.byteLength != other.byteLength) ||\r\n          (object.byteOffset != other.byteOffset)) {\r\n        return false;\r\n      }\r\n      object = object.buffer;\r\n      other = other.buffer;\r\n\r\n    case arrayBufferTag:\r\n      if ((object.byteLength != other.byteLength) ||\r\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\r\n        return false;\r\n      }\r\n      return true;\r\n\r\n    case boolTag:\r\n    case dateTag:\r\n    case numberTag:\r\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\r\n      // Invalid dates are coerced to `NaN`.\r\n      return eq(+object, +other);\r\n\r\n    case errorTag:\r\n      return object.name == other.name && object.message == other.message;\r\n\r\n    case regexpTag:\r\n    case stringTag:\r\n      // Coerce regexes to strings and treat strings, primitives and objects,\r\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\r\n      // for more details.\r\n      return object == (other + '');\r\n\r\n    case mapTag:\r\n      var convert = mapToArray;\r\n\r\n    case setTag:\r\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\r\n      convert || (convert = setToArray);\r\n\r\n      if (object.size != other.size && !isPartial) {\r\n        return false;\r\n      }\r\n      // Assume cyclic values are equal.\r\n      var stacked = stack.get(object);\r\n      if (stacked) {\r\n        return stacked == other;\r\n      }\r\n      bitmask |= COMPARE_UNORDERED_FLAG;\r\n\r\n      // Recursively compare objects (susceptible to call stack limits).\r\n      stack.set(object, other);\r\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\r\n      stack['delete'](object);\r\n      return result;\r\n\r\n    case symbolTag:\r\n      if (symbolValueOf) {\r\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\r\n      }\r\n  }\r\n  return false;\r\n}\r\n\r\n/**\r\n * A specialized version of `baseIsEqualDeep` for objects with support for\r\n * partial deep comparisons.\r\n *\r\n * @private\r\n * @param {Object} object The object to compare.\r\n * @param {Object} other The other object to compare.\r\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\r\n * @param {Function} customizer The function to customize comparisons.\r\n * @param {Function} equalFunc The function to determine equivalents of values.\r\n * @param {Object} stack Tracks traversed `object` and `other` objects.\r\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\r\n */\r\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\r\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\r\n      objProps = getAllKeys(object),\r\n      objLength = objProps.length,\r\n      othProps = getAllKeys(other),\r\n      othLength = othProps.length;\r\n\r\n  if (objLength != othLength && !isPartial) {\r\n    return false;\r\n  }\r\n  var index = objLength;\r\n  while (index--) {\r\n    var key = objProps[index];\r\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\r\n      return false;\r\n    }\r\n  }\r\n  // Assume cyclic values are equal.\r\n  var stacked = stack.get(object);\r\n  if (stacked && stack.get(other)) {\r\n    return stacked == other;\r\n  }\r\n  var result = true;\r\n  stack.set(object, other);\r\n  stack.set(other, object);\r\n\r\n  var skipCtor = isPartial;\r\n  while (++index < objLength) {\r\n    key = objProps[index];\r\n    var objValue = object[key],\r\n        othValue = other[key];\r\n\r\n    if (customizer) {\r\n      var compared = isPartial\r\n        ? customizer(othValue, objValue, key, other, object, stack)\r\n        : customizer(objValue, othValue, key, object, other, stack);\r\n    }\r\n    // Recursively compare objects (susceptible to call stack limits).\r\n    if (!(compared === undefined\r\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\r\n          : compared\r\n        )) {\r\n      result = false;\r\n      break;\r\n    }\r\n    skipCtor || (skipCtor = key == 'constructor');\r\n  }\r\n  if (result && !skipCtor) {\r\n    var objCtor = object.constructor,\r\n        othCtor = other.constructor;\r\n\r\n    // Non `Object` object instances with different constructors are not equal.\r\n    if (objCtor != othCtor &&\r\n        ('constructor' in object && 'constructor' in other) &&\r\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\r\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\r\n      result = false;\r\n    }\r\n  }\r\n  stack['delete'](object);\r\n  stack['delete'](other);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates an array of own enumerable property names and symbols of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names and symbols.\r\n */\r\nfunction getAllKeys(object) {\r\n  return baseGetAllKeys(object, keys, getSymbols);\r\n}\r\n\r\n/**\r\n * Gets the data for `map`.\r\n *\r\n * @private\r\n * @param {Object} map The map to query.\r\n * @param {string} key The reference key.\r\n * @returns {*} Returns the map data.\r\n */\r\nfunction getMapData(map, key) {\r\n  var data = map.__data__;\r\n  return isKeyable(key)\r\n    ? data[typeof key == 'string' ? 'string' : 'hash']\r\n    : data.map;\r\n}\r\n\r\n/**\r\n * Gets the native function at `key` of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {string} key The key of the method to get.\r\n * @returns {*} Returns the function if it's native, else `undefined`.\r\n */\r\nfunction getNative(object, key) {\r\n  var value = getValue(object, key);\r\n  return baseIsNative(value) ? value : undefined;\r\n}\r\n\r\n/**\r\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the raw `toStringTag`.\r\n */\r\nfunction getRawTag(value) {\r\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\r\n      tag = value[symToStringTag];\r\n\r\n  try {\r\n    value[symToStringTag] = undefined;\r\n    var unmasked = true;\r\n  } catch (e) {}\r\n\r\n  var result = nativeObjectToString.call(value);\r\n  if (unmasked) {\r\n    if (isOwn) {\r\n      value[symToStringTag] = tag;\r\n    } else {\r\n      delete value[symToStringTag];\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates an array of the own enumerable symbols of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of symbols.\r\n */\r\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\r\n  if (object == null) {\r\n    return [];\r\n  }\r\n  object = Object(object);\r\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\r\n    return propertyIsEnumerable.call(object, symbol);\r\n  });\r\n};\r\n\r\n/**\r\n * Gets the `toStringTag` of `value`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the `toStringTag`.\r\n */\r\nvar getTag = baseGetTag;\r\n\r\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\r\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\r\n    (Map && getTag(new Map) != mapTag) ||\r\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\r\n    (Set && getTag(new Set) != setTag) ||\r\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\r\n  getTag = function(value) {\r\n    var result = baseGetTag(value),\r\n        Ctor = result == objectTag ? value.constructor : undefined,\r\n        ctorString = Ctor ? toSource(Ctor) : '';\r\n\r\n    if (ctorString) {\r\n      switch (ctorString) {\r\n        case dataViewCtorString: return dataViewTag;\r\n        case mapCtorString: return mapTag;\r\n        case promiseCtorString: return promiseTag;\r\n        case setCtorString: return setTag;\r\n        case weakMapCtorString: return weakMapTag;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Checks if `value` is a valid array-like index.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n */\r\nfunction isIndex(value, length) {\r\n  length = length == null ? MAX_SAFE_INTEGER : length;\r\n  return !!length &&\r\n    (typeof value == 'number' || reIsUint.test(value)) &&\r\n    (value > -1 && value % 1 == 0 && value < length);\r\n}\r\n\r\n/**\r\n * Checks if `value` is suitable for use as unique object key.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\r\n */\r\nfunction isKeyable(value) {\r\n  var type = typeof value;\r\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\r\n    ? (value !== '__proto__')\r\n    : (value === null);\r\n}\r\n\r\n/**\r\n * Checks if `func` has its source masked.\r\n *\r\n * @private\r\n * @param {Function} func The function to check.\r\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\r\n */\r\nfunction isMasked(func) {\r\n  return !!maskSrcKey && (maskSrcKey in func);\r\n}\r\n\r\n/**\r\n * Checks if `value` is likely a prototype object.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\r\n */\r\nfunction isPrototype(value) {\r\n  var Ctor = value && value.constructor,\r\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\r\n\r\n  return value === proto;\r\n}\r\n\r\n/**\r\n * Converts `value` to a string using `Object.prototype.toString`.\r\n *\r\n * @private\r\n * @param {*} value The value to convert.\r\n * @returns {string} Returns the converted string.\r\n */\r\nfunction objectToString(value) {\r\n  return nativeObjectToString.call(value);\r\n}\r\n\r\n/**\r\n * Converts `func` to its source code.\r\n *\r\n * @private\r\n * @param {Function} func The function to convert.\r\n * @returns {string} Returns the source code.\r\n */\r\nfunction toSource(func) {\r\n  if (func != null) {\r\n    try {\r\n      return funcToString.call(func);\r\n    } catch (e) {}\r\n    try {\r\n      return (func + '');\r\n    } catch (e) {}\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * Performs a\r\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * comparison between two values to determine if they are equivalent.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to compare.\r\n * @param {*} other The other value to compare.\r\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n * @example\r\n *\r\n * var object = { 'a': 1 };\r\n * var other = { 'a': 1 };\r\n *\r\n * _.eq(object, object);\r\n * // => true\r\n *\r\n * _.eq(object, other);\r\n * // => false\r\n *\r\n * _.eq('a', 'a');\r\n * // => true\r\n *\r\n * _.eq('a', Object('a'));\r\n * // => false\r\n *\r\n * _.eq(NaN, NaN);\r\n * // => true\r\n */\r\nfunction eq(value, other) {\r\n  return value === other || (value !== value && other !== other);\r\n}\r\n\r\n/**\r\n * Checks if `value` is likely an `arguments` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n *  else `false`.\r\n * @example\r\n *\r\n * _.isArguments(function() { return arguments; }());\r\n * // => true\r\n *\r\n * _.isArguments([1, 2, 3]);\r\n * // => false\r\n */\r\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\r\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\r\n    !propertyIsEnumerable.call(value, 'callee');\r\n};\r\n\r\n/**\r\n * Checks if `value` is classified as an `Array` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\r\n * @example\r\n *\r\n * _.isArray([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArray(document.body.children);\r\n * // => false\r\n *\r\n * _.isArray('abc');\r\n * // => false\r\n *\r\n * _.isArray(_.noop);\r\n * // => false\r\n */\r\nvar isArray = Array.isArray;\r\n\r\n/**\r\n * Checks if `value` is array-like. A value is considered array-like if it's\r\n * not a function and has a `value.length` that's an integer greater than or\r\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n * @example\r\n *\r\n * _.isArrayLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArrayLike(document.body.children);\r\n * // => true\r\n *\r\n * _.isArrayLike('abc');\r\n * // => true\r\n *\r\n * _.isArrayLike(_.noop);\r\n * // => false\r\n */\r\nfunction isArrayLike(value) {\r\n  return value != null && isLength(value.length) && !isFunction(value);\r\n}\r\n\r\n/**\r\n * Checks if `value` is a buffer.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.3.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\r\n * @example\r\n *\r\n * _.isBuffer(new Buffer(2));\r\n * // => true\r\n *\r\n * _.isBuffer(new Uint8Array(2));\r\n * // => false\r\n */\r\nvar isBuffer = nativeIsBuffer || stubFalse;\r\n\r\n/**\r\n * Performs a deep comparison between two values to determine if they are\r\n * equivalent.\r\n *\r\n * **Note:** This method supports comparing arrays, array buffers, booleans,\r\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\r\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\r\n * by their own, not inherited, enumerable properties. Functions and DOM\r\n * nodes are compared by strict equality, i.e. `===`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to compare.\r\n * @param {*} other The other value to compare.\r\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n * @example\r\n *\r\n * var object = { 'a': 1 };\r\n * var other = { 'a': 1 };\r\n *\r\n * _.isEqual(object, other);\r\n * // => true\r\n *\r\n * object === other;\r\n * // => false\r\n */\r\nfunction isEqual(value, other) {\r\n  return baseIsEqual(value, other);\r\n}\r\n\r\n/**\r\n * Checks if `value` is classified as a `Function` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n * @example\r\n *\r\n * _.isFunction(_);\r\n * // => true\r\n *\r\n * _.isFunction(/abc/);\r\n * // => false\r\n */\r\nfunction isFunction(value) {\r\n  if (!isObject(value)) {\r\n    return false;\r\n  }\r\n  // The use of `Object#toString` avoids issues with the `typeof` operator\r\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\r\n  var tag = baseGetTag(value);\r\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\r\n}\r\n\r\n/**\r\n * Checks if `value` is a valid array-like length.\r\n *\r\n * **Note:** This method is loosely based on\r\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\r\n * @example\r\n *\r\n * _.isLength(3);\r\n * // => true\r\n *\r\n * _.isLength(Number.MIN_VALUE);\r\n * // => false\r\n *\r\n * _.isLength(Infinity);\r\n * // => false\r\n *\r\n * _.isLength('3');\r\n * // => false\r\n */\r\nfunction isLength(value) {\r\n  return typeof value == 'number' &&\r\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\r\n}\r\n\r\n/**\r\n * Checks if `value` is the\r\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n * @example\r\n *\r\n * _.isObject({});\r\n * // => true\r\n *\r\n * _.isObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObject(_.noop);\r\n * // => true\r\n *\r\n * _.isObject(null);\r\n * // => false\r\n */\r\nfunction isObject(value) {\r\n  var type = typeof value;\r\n  return value != null && (type == 'object' || type == 'function');\r\n}\r\n\r\n/**\r\n * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n * and has a `typeof` result of \"object\".\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n * @example\r\n *\r\n * _.isObjectLike({});\r\n * // => true\r\n *\r\n * _.isObjectLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObjectLike(_.noop);\r\n * // => false\r\n *\r\n * _.isObjectLike(null);\r\n * // => false\r\n */\r\nfunction isObjectLike(value) {\r\n  return value != null && typeof value == 'object';\r\n}\r\n\r\n/**\r\n * Checks if `value` is classified as a typed array.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 3.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\r\n * @example\r\n *\r\n * _.isTypedArray(new Uint8Array);\r\n * // => true\r\n *\r\n * _.isTypedArray([]);\r\n * // => false\r\n */\r\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\r\n\r\n/**\r\n * Creates an array of the own enumerable property names of `object`.\r\n *\r\n * **Note:** Non-object values are coerced to objects. See the\r\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\r\n * for more details.\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category Object\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n * @example\r\n *\r\n * function Foo() {\r\n *   this.a = 1;\r\n *   this.b = 2;\r\n * }\r\n *\r\n * Foo.prototype.c = 3;\r\n *\r\n * _.keys(new Foo);\r\n * // => ['a', 'b'] (iteration order is not guaranteed)\r\n *\r\n * _.keys('hi');\r\n * // => ['0', '1']\r\n */\r\nfunction keys(object) {\r\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\r\n}\r\n\r\n/**\r\n * This method returns a new empty array.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.13.0\r\n * @category Util\r\n * @returns {Array} Returns the new empty array.\r\n * @example\r\n *\r\n * var arrays = _.times(2, _.stubArray);\r\n *\r\n * console.log(arrays);\r\n * // => [[], []]\r\n *\r\n * console.log(arrays[0] === arrays[1]);\r\n * // => false\r\n */\r\nfunction stubArray() {\r\n  return [];\r\n}\r\n\r\n/**\r\n * This method returns `false`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.13.0\r\n * @category Util\r\n * @returns {boolean} Returns `false`.\r\n * @example\r\n *\r\n * _.times(2, _.stubFalse);\r\n * // => [false, false]\r\n */\r\nfunction stubFalse() {\r\n  return false;\r\n}\r\n\r\nmodule.exports = isEqual;\r\n","/**\r\n * The possible camera facing modes. For now support only 'user' and\r\n * 'environment' because 'left' and 'right' are not used anywhere in our\r\n * projects at the time of this writing. For more information please refer to\r\n * https://w3c.github.io/mediacapture-main/getusermedia.html\r\n * #def-constraint-facingMode.\r\n *\r\n * @enum {string}\r\n */\r\nconst CameraFacingMode = {\r\n    /**\r\n     * The mode which specifies the environment-facing camera.\r\n     */\r\n    ENVIRONMENT: 'environment',\r\n\r\n    /**\r\n     * The mode which specifies the user-facing camera.\r\n     */\r\n    USER: 'user'\r\n};\r\n\r\nmodule.exports = CameraFacingMode;\r\n","/**\r\n * @const\r\n */\r\nconst ALPHANUM\r\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n/**\r\n * Hexadecimal digits.\r\n * @const\r\n */\r\nconst HEX_DIGITS = '0123456789abcdef';\r\n\r\n/**\r\n * Generates random int within the range [min, max]\r\n * @param min the minimum value for the generated number\r\n * @param max the maximum value for the generated number\r\n * @returns random int number\r\n */\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * Get random element from array or string.\r\n * @param {Array|string} arr source\r\n * @returns array element or string character\r\n */\r\nfunction randomElement(arr) {\r\n    return arr[randomInt(0, arr.length - 1)];\r\n}\r\n\r\n/**\r\n * Generate random alphanumeric string.\r\n * @param {number} length expected string length\r\n * @returns {string} random string of specified length\r\n */\r\nfunction randomAlphanumStr(length) {\r\n    let result = '';\r\n\r\n    for (let i = 0; i < length; i += 1) {\r\n        result += randomElement(ALPHANUM);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/**\r\n * Exported interface.\r\n */\r\nconst RandomUtil = {\r\n    /**\r\n     * Returns a random hex digit.\r\n     * @returns {*}\r\n     */\r\n    randomHexDigit() {\r\n        return randomElement(HEX_DIGITS);\r\n    },\r\n\r\n    /**\r\n     * Returns a random string of hex digits with length 'len'.\r\n     * @param len the length.\r\n     */\r\n    randomHexString(len) {\r\n        let ret = '';\r\n\r\n        while (len--) { // eslint-disable-line no-param-reassign\r\n            ret += this.randomHexDigit();\r\n        }\r\n\r\n        return ret;\r\n    },\r\n    randomElement,\r\n    randomAlphanumStr,\r\n    randomInt\r\n};\r\n\r\nmodule.exports = RandomUtil;\r\n","/**\r\n * lodash (Custom Build) <https://lodash.com/>\r\n * Build: `lodash modularize exports=\"npm\" -o ./`\r\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\r\n * Released under MIT license <https://lodash.com/license>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n */\r\n\r\n/** Used as the size to enable large array optimizations. */\r\nvar LARGE_ARRAY_SIZE = 200;\r\n\r\n/** Used to stand-in for `undefined` hash values. */\r\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar MAX_SAFE_INTEGER = 9007199254740991;\r\n\r\n/** `Object#toString` result references. */\r\nvar argsTag = '[object Arguments]',\r\n    arrayTag = '[object Array]',\r\n    boolTag = '[object Boolean]',\r\n    dateTag = '[object Date]',\r\n    errorTag = '[object Error]',\r\n    funcTag = '[object Function]',\r\n    genTag = '[object GeneratorFunction]',\r\n    mapTag = '[object Map]',\r\n    numberTag = '[object Number]',\r\n    objectTag = '[object Object]',\r\n    promiseTag = '[object Promise]',\r\n    regexpTag = '[object RegExp]',\r\n    setTag = '[object Set]',\r\n    stringTag = '[object String]',\r\n    symbolTag = '[object Symbol]',\r\n    weakMapTag = '[object WeakMap]';\r\n\r\nvar arrayBufferTag = '[object ArrayBuffer]',\r\n    dataViewTag = '[object DataView]',\r\n    float32Tag = '[object Float32Array]',\r\n    float64Tag = '[object Float64Array]',\r\n    int8Tag = '[object Int8Array]',\r\n    int16Tag = '[object Int16Array]',\r\n    int32Tag = '[object Int32Array]',\r\n    uint8Tag = '[object Uint8Array]',\r\n    uint8ClampedTag = '[object Uint8ClampedArray]',\r\n    uint16Tag = '[object Uint16Array]',\r\n    uint32Tag = '[object Uint32Array]';\r\n\r\n/**\r\n * Used to match `RegExp`\r\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\r\n */\r\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\r\n\r\n/** Used to match `RegExp` flags from their coerced string values. */\r\nvar reFlags = /\\w*$/;\r\n\r\n/** Used to detect host constructors (Safari). */\r\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\r\n\r\n/** Used to detect unsigned integer values. */\r\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n/** Used to identify `toStringTag` values supported by `_.clone`. */\r\nvar cloneableTags = {};\r\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\r\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\r\ncloneableTags[boolTag] = cloneableTags[dateTag] =\r\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\r\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\r\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\r\ncloneableTags[numberTag] = cloneableTags[objectTag] =\r\ncloneableTags[regexpTag] = cloneableTags[setTag] =\r\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\r\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\r\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\r\ncloneableTags[errorTag] = cloneableTags[funcTag] =\r\ncloneableTags[weakMapTag] = false;\r\n\r\n/** Detect free variable `global` from Node.js. */\r\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\r\n\r\n/** Detect free variable `self`. */\r\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n\r\n/** Used as a reference to the global object. */\r\nvar root = freeGlobal || freeSelf || Function('return this')();\r\n\r\n/** Detect free variable `exports`. */\r\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\r\n\r\n/** Detect free variable `module`. */\r\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\r\n\r\n/** Detect the popular CommonJS extension `module.exports`. */\r\nvar moduleExports = freeModule && freeModule.exports === freeExports;\r\n\r\n/**\r\n * Adds the key-value `pair` to `map`.\r\n *\r\n * @private\r\n * @param {Object} map The map to modify.\r\n * @param {Array} pair The key-value pair to add.\r\n * @returns {Object} Returns `map`.\r\n */\r\nfunction addMapEntry(map, pair) {\r\n  // Don't return `map.set` because it's not chainable in IE 11.\r\n  map.set(pair[0], pair[1]);\r\n  return map;\r\n}\r\n\r\n/**\r\n * Adds `value` to `set`.\r\n *\r\n * @private\r\n * @param {Object} set The set to modify.\r\n * @param {*} value The value to add.\r\n * @returns {Object} Returns `set`.\r\n */\r\nfunction addSetEntry(set, value) {\r\n  // Don't return `set.add` because it's not chainable in IE 11.\r\n  set.add(value);\r\n  return set;\r\n}\r\n\r\n/**\r\n * A specialized version of `_.forEach` for arrays without support for\r\n * iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction arrayEach(array, iteratee) {\r\n  var index = -1,\r\n      length = array ? array.length : 0;\r\n\r\n  while (++index < length) {\r\n    if (iteratee(array[index], index, array) === false) {\r\n      break;\r\n    }\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * Appends the elements of `values` to `array`.\r\n *\r\n * @private\r\n * @param {Array} array The array to modify.\r\n * @param {Array} values The values to append.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction arrayPush(array, values) {\r\n  var index = -1,\r\n      length = values.length,\r\n      offset = array.length;\r\n\r\n  while (++index < length) {\r\n    array[offset + index] = values[index];\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * A specialized version of `_.reduce` for arrays without support for\r\n * iteratee shorthands.\r\n *\r\n * @private\r\n * @param {Array} [array] The array to iterate over.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @param {*} [accumulator] The initial value.\r\n * @param {boolean} [initAccum] Specify using the first element of `array` as\r\n *  the initial value.\r\n * @returns {*} Returns the accumulated value.\r\n */\r\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\r\n  var index = -1,\r\n      length = array ? array.length : 0;\r\n\r\n  if (initAccum && length) {\r\n    accumulator = array[++index];\r\n  }\r\n  while (++index < length) {\r\n    accumulator = iteratee(accumulator, array[index], index, array);\r\n  }\r\n  return accumulator;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.times` without support for iteratee shorthands\r\n * or max array length checks.\r\n *\r\n * @private\r\n * @param {number} n The number of times to invoke `iteratee`.\r\n * @param {Function} iteratee The function invoked per iteration.\r\n * @returns {Array} Returns the array of results.\r\n */\r\nfunction baseTimes(n, iteratee) {\r\n  var index = -1,\r\n      result = Array(n);\r\n\r\n  while (++index < n) {\r\n    result[index] = iteratee(index);\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Gets the value at `key` of `object`.\r\n *\r\n * @private\r\n * @param {Object} [object] The object to query.\r\n * @param {string} key The key of the property to get.\r\n * @returns {*} Returns the property value.\r\n */\r\nfunction getValue(object, key) {\r\n  return object == null ? undefined : object[key];\r\n}\r\n\r\n/**\r\n * Checks if `value` is a host object in IE < 9.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\r\n */\r\nfunction isHostObject(value) {\r\n  // Many host objects are `Object` objects that can coerce to strings\r\n  // despite having improperly defined `toString` methods.\r\n  var result = false;\r\n  if (value != null && typeof value.toString != 'function') {\r\n    try {\r\n      result = !!(value + '');\r\n    } catch (e) {}\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Converts `map` to its key-value pairs.\r\n *\r\n * @private\r\n * @param {Object} map The map to convert.\r\n * @returns {Array} Returns the key-value pairs.\r\n */\r\nfunction mapToArray(map) {\r\n  var index = -1,\r\n      result = Array(map.size);\r\n\r\n  map.forEach(function(value, key) {\r\n    result[++index] = [key, value];\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a unary function that invokes `func` with its argument transformed.\r\n *\r\n * @private\r\n * @param {Function} func The function to wrap.\r\n * @param {Function} transform The argument transform.\r\n * @returns {Function} Returns the new function.\r\n */\r\nfunction overArg(func, transform) {\r\n  return function(arg) {\r\n    return func(transform(arg));\r\n  };\r\n}\r\n\r\n/**\r\n * Converts `set` to an array of its values.\r\n *\r\n * @private\r\n * @param {Object} set The set to convert.\r\n * @returns {Array} Returns the values.\r\n */\r\nfunction setToArray(set) {\r\n  var index = -1,\r\n      result = Array(set.size);\r\n\r\n  set.forEach(function(value) {\r\n    result[++index] = value;\r\n  });\r\n  return result;\r\n}\r\n\r\n/** Used for built-in method references. */\r\nvar arrayProto = Array.prototype,\r\n    funcProto = Function.prototype,\r\n    objectProto = Object.prototype;\r\n\r\n/** Used to detect overreaching core-js shims. */\r\nvar coreJsData = root['__core-js_shared__'];\r\n\r\n/** Used to detect methods masquerading as native. */\r\nvar maskSrcKey = (function() {\r\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\r\n  return uid ? ('Symbol(src)_1.' + uid) : '';\r\n}());\r\n\r\n/** Used to resolve the decompiled source of functions. */\r\nvar funcToString = funcProto.toString;\r\n\r\n/** Used to check objects for own properties. */\r\nvar hasOwnProperty = objectProto.hasOwnProperty;\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar objectToString = objectProto.toString;\r\n\r\n/** Used to detect if a method is native. */\r\nvar reIsNative = RegExp('^' +\r\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\r\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\r\n);\r\n\r\n/** Built-in value references. */\r\nvar Buffer = moduleExports ? root.Buffer : undefined,\r\n    Symbol = root.Symbol,\r\n    Uint8Array = root.Uint8Array,\r\n    getPrototype = overArg(Object.getPrototypeOf, Object),\r\n    objectCreate = Object.create,\r\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\r\n    splice = arrayProto.splice;\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\r\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\r\n    nativeKeys = overArg(Object.keys, Object);\r\n\r\n/* Built-in method references that are verified to be native. */\r\nvar DataView = getNative(root, 'DataView'),\r\n    Map = getNative(root, 'Map'),\r\n    Promise = getNative(root, 'Promise'),\r\n    Set = getNative(root, 'Set'),\r\n    WeakMap = getNative(root, 'WeakMap'),\r\n    nativeCreate = getNative(Object, 'create');\r\n\r\n/** Used to detect maps, sets, and weakmaps. */\r\nvar dataViewCtorString = toSource(DataView),\r\n    mapCtorString = toSource(Map),\r\n    promiseCtorString = toSource(Promise),\r\n    setCtorString = toSource(Set),\r\n    weakMapCtorString = toSource(WeakMap);\r\n\r\n/** Used to convert symbols to primitives and strings. */\r\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\r\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\r\n\r\n/**\r\n * Creates a hash object.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction Hash(entries) {\r\n  var index = -1,\r\n      length = entries ? entries.length : 0;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the hash.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf Hash\r\n */\r\nfunction hashClear() {\r\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the hash.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf Hash\r\n * @param {Object} hash The hash to modify.\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction hashDelete(key) {\r\n  return this.has(key) && delete this.__data__[key];\r\n}\r\n\r\n/**\r\n * Gets the hash value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf Hash\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction hashGet(key) {\r\n  var data = this.__data__;\r\n  if (nativeCreate) {\r\n    var result = data[key];\r\n    return result === HASH_UNDEFINED ? undefined : result;\r\n  }\r\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\r\n}\r\n\r\n/**\r\n * Checks if a hash value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf Hash\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction hashHas(key) {\r\n  var data = this.__data__;\r\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\r\n}\r\n\r\n/**\r\n * Sets the hash `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Hash\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the hash instance.\r\n */\r\nfunction hashSet(key, value) {\r\n  var data = this.__data__;\r\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\r\n  return this;\r\n}\r\n\r\n// Add methods to `Hash`.\r\nHash.prototype.clear = hashClear;\r\nHash.prototype['delete'] = hashDelete;\r\nHash.prototype.get = hashGet;\r\nHash.prototype.has = hashHas;\r\nHash.prototype.set = hashSet;\r\n\r\n/**\r\n * Creates an list cache object.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction ListCache(entries) {\r\n  var index = -1,\r\n      length = entries ? entries.length : 0;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the list cache.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf ListCache\r\n */\r\nfunction listCacheClear() {\r\n  this.__data__ = [];\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the list cache.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction listCacheDelete(key) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  if (index < 0) {\r\n    return false;\r\n  }\r\n  var lastIndex = data.length - 1;\r\n  if (index == lastIndex) {\r\n    data.pop();\r\n  } else {\r\n    splice.call(data, index, 1);\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Gets the list cache value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction listCacheGet(key) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  return index < 0 ? undefined : data[index][1];\r\n}\r\n\r\n/**\r\n * Checks if a list cache value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf ListCache\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction listCacheHas(key) {\r\n  return assocIndexOf(this.__data__, key) > -1;\r\n}\r\n\r\n/**\r\n * Sets the list cache `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf ListCache\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the list cache instance.\r\n */\r\nfunction listCacheSet(key, value) {\r\n  var data = this.__data__,\r\n      index = assocIndexOf(data, key);\r\n\r\n  if (index < 0) {\r\n    data.push([key, value]);\r\n  } else {\r\n    data[index][1] = value;\r\n  }\r\n  return this;\r\n}\r\n\r\n// Add methods to `ListCache`.\r\nListCache.prototype.clear = listCacheClear;\r\nListCache.prototype['delete'] = listCacheDelete;\r\nListCache.prototype.get = listCacheGet;\r\nListCache.prototype.has = listCacheHas;\r\nListCache.prototype.set = listCacheSet;\r\n\r\n/**\r\n * Creates a map cache object to store key-value pairs.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction MapCache(entries) {\r\n  var index = -1,\r\n      length = entries ? entries.length : 0;\r\n\r\n  this.clear();\r\n  while (++index < length) {\r\n    var entry = entries[index];\r\n    this.set(entry[0], entry[1]);\r\n  }\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the map.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf MapCache\r\n */\r\nfunction mapCacheClear() {\r\n  this.__data__ = {\r\n    'hash': new Hash,\r\n    'map': new (Map || ListCache),\r\n    'string': new Hash\r\n  };\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the map.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction mapCacheDelete(key) {\r\n  return getMapData(this, key)['delete'](key);\r\n}\r\n\r\n/**\r\n * Gets the map value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction mapCacheGet(key) {\r\n  return getMapData(this, key).get(key);\r\n}\r\n\r\n/**\r\n * Checks if a map value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf MapCache\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction mapCacheHas(key) {\r\n  return getMapData(this, key).has(key);\r\n}\r\n\r\n/**\r\n * Sets the map `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf MapCache\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the map cache instance.\r\n */\r\nfunction mapCacheSet(key, value) {\r\n  getMapData(this, key).set(key, value);\r\n  return this;\r\n}\r\n\r\n// Add methods to `MapCache`.\r\nMapCache.prototype.clear = mapCacheClear;\r\nMapCache.prototype['delete'] = mapCacheDelete;\r\nMapCache.prototype.get = mapCacheGet;\r\nMapCache.prototype.has = mapCacheHas;\r\nMapCache.prototype.set = mapCacheSet;\r\n\r\n/**\r\n * Creates a stack cache object to store key-value pairs.\r\n *\r\n * @private\r\n * @constructor\r\n * @param {Array} [entries] The key-value pairs to cache.\r\n */\r\nfunction Stack(entries) {\r\n  this.__data__ = new ListCache(entries);\r\n}\r\n\r\n/**\r\n * Removes all key-value entries from the stack.\r\n *\r\n * @private\r\n * @name clear\r\n * @memberOf Stack\r\n */\r\nfunction stackClear() {\r\n  this.__data__ = new ListCache;\r\n}\r\n\r\n/**\r\n * Removes `key` and its value from the stack.\r\n *\r\n * @private\r\n * @name delete\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to remove.\r\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\r\n */\r\nfunction stackDelete(key) {\r\n  return this.__data__['delete'](key);\r\n}\r\n\r\n/**\r\n * Gets the stack value for `key`.\r\n *\r\n * @private\r\n * @name get\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to get.\r\n * @returns {*} Returns the entry value.\r\n */\r\nfunction stackGet(key) {\r\n  return this.__data__.get(key);\r\n}\r\n\r\n/**\r\n * Checks if a stack value for `key` exists.\r\n *\r\n * @private\r\n * @name has\r\n * @memberOf Stack\r\n * @param {string} key The key of the entry to check.\r\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\r\n */\r\nfunction stackHas(key) {\r\n  return this.__data__.has(key);\r\n}\r\n\r\n/**\r\n * Sets the stack `key` to `value`.\r\n *\r\n * @private\r\n * @name set\r\n * @memberOf Stack\r\n * @param {string} key The key of the value to set.\r\n * @param {*} value The value to set.\r\n * @returns {Object} Returns the stack cache instance.\r\n */\r\nfunction stackSet(key, value) {\r\n  var cache = this.__data__;\r\n  if (cache instanceof ListCache) {\r\n    var pairs = cache.__data__;\r\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\r\n      pairs.push([key, value]);\r\n      return this;\r\n    }\r\n    cache = this.__data__ = new MapCache(pairs);\r\n  }\r\n  cache.set(key, value);\r\n  return this;\r\n}\r\n\r\n// Add methods to `Stack`.\r\nStack.prototype.clear = stackClear;\r\nStack.prototype['delete'] = stackDelete;\r\nStack.prototype.get = stackGet;\r\nStack.prototype.has = stackHas;\r\nStack.prototype.set = stackSet;\r\n\r\n/**\r\n * Creates an array of the enumerable property names of the array-like `value`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @param {boolean} inherited Specify returning inherited property names.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction arrayLikeKeys(value, inherited) {\r\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\r\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\r\n  var result = (isArray(value) || isArguments(value))\r\n    ? baseTimes(value.length, String)\r\n    : [];\r\n\r\n  var length = result.length,\r\n      skipIndexes = !!length;\r\n\r\n  for (var key in value) {\r\n    if ((inherited || hasOwnProperty.call(value, key)) &&\r\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\r\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * for equality comparisons.\r\n *\r\n * @private\r\n * @param {Object} object The object to modify.\r\n * @param {string} key The key of the property to assign.\r\n * @param {*} value The value to assign.\r\n */\r\nfunction assignValue(object, key, value) {\r\n  var objValue = object[key];\r\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\r\n      (value === undefined && !(key in object))) {\r\n    object[key] = value;\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the index at which the `key` is found in `array` of key-value pairs.\r\n *\r\n * @private\r\n * @param {Array} array The array to inspect.\r\n * @param {*} key The key to search for.\r\n * @returns {number} Returns the index of the matched value, else `-1`.\r\n */\r\nfunction assocIndexOf(array, key) {\r\n  var length = array.length;\r\n  while (length--) {\r\n    if (eq(array[length][0], key)) {\r\n      return length;\r\n    }\r\n  }\r\n  return -1;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.assign` without support for multiple sources\r\n * or `customizer` functions.\r\n *\r\n * @private\r\n * @param {Object} object The destination object.\r\n * @param {Object} source The source object.\r\n * @returns {Object} Returns `object`.\r\n */\r\nfunction baseAssign(object, source) {\r\n  return object && copyObject(source, keys(source), object);\r\n}\r\n\r\n/**\r\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\r\n * traversed objects.\r\n *\r\n * @private\r\n * @param {*} value The value to clone.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @param {boolean} [isFull] Specify a clone including symbols.\r\n * @param {Function} [customizer] The function to customize cloning.\r\n * @param {string} [key] The key of `value`.\r\n * @param {Object} [object] The parent object of `value`.\r\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\r\n * @returns {*} Returns the cloned value.\r\n */\r\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\r\n  var result;\r\n  if (customizer) {\r\n    result = object ? customizer(value, key, object, stack) : customizer(value);\r\n  }\r\n  if (result !== undefined) {\r\n    return result;\r\n  }\r\n  if (!isObject(value)) {\r\n    return value;\r\n  }\r\n  var isArr = isArray(value);\r\n  if (isArr) {\r\n    result = initCloneArray(value);\r\n    if (!isDeep) {\r\n      return copyArray(value, result);\r\n    }\r\n  } else {\r\n    var tag = getTag(value),\r\n        isFunc = tag == funcTag || tag == genTag;\r\n\r\n    if (isBuffer(value)) {\r\n      return cloneBuffer(value, isDeep);\r\n    }\r\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\r\n      if (isHostObject(value)) {\r\n        return object ? value : {};\r\n      }\r\n      result = initCloneObject(isFunc ? {} : value);\r\n      if (!isDeep) {\r\n        return copySymbols(value, baseAssign(result, value));\r\n      }\r\n    } else {\r\n      if (!cloneableTags[tag]) {\r\n        return object ? value : {};\r\n      }\r\n      result = initCloneByTag(value, tag, baseClone, isDeep);\r\n    }\r\n  }\r\n  // Check for circular references and return its corresponding clone.\r\n  stack || (stack = new Stack);\r\n  var stacked = stack.get(value);\r\n  if (stacked) {\r\n    return stacked;\r\n  }\r\n  stack.set(value, result);\r\n\r\n  if (!isArr) {\r\n    var props = isFull ? getAllKeys(value) : keys(value);\r\n  }\r\n  arrayEach(props || value, function(subValue, key) {\r\n    if (props) {\r\n      key = subValue;\r\n      subValue = value[key];\r\n    }\r\n    // Recursively populate clone (susceptible to call stack limits).\r\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\r\n  });\r\n  return result;\r\n}\r\n\r\n/**\r\n * The base implementation of `_.create` without support for assigning\r\n * properties to the created object.\r\n *\r\n * @private\r\n * @param {Object} prototype The object to inherit from.\r\n * @returns {Object} Returns the new object.\r\n */\r\nfunction baseCreate(proto) {\r\n  return isObject(proto) ? objectCreate(proto) : {};\r\n}\r\n\r\n/**\r\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\r\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\r\n * symbols of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {Function} keysFunc The function to get the keys of `object`.\r\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\r\n * @returns {Array} Returns the array of property names and symbols.\r\n */\r\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\r\n  var result = keysFunc(object);\r\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\r\n}\r\n\r\n/**\r\n * The base implementation of `getTag`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the `toStringTag`.\r\n */\r\nfunction baseGetTag(value) {\r\n  return objectToString.call(value);\r\n}\r\n\r\n/**\r\n * The base implementation of `_.isNative` without bad shim checks.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a native function,\r\n *  else `false`.\r\n */\r\nfunction baseIsNative(value) {\r\n  if (!isObject(value) || isMasked(value)) {\r\n    return false;\r\n  }\r\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\r\n  return pattern.test(toSource(value));\r\n}\r\n\r\n/**\r\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n */\r\nfunction baseKeys(object) {\r\n  if (!isPrototype(object)) {\r\n    return nativeKeys(object);\r\n  }\r\n  var result = [];\r\n  for (var key in Object(object)) {\r\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\r\n      result.push(key);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a clone of  `buffer`.\r\n *\r\n * @private\r\n * @param {Buffer} buffer The buffer to clone.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Buffer} Returns the cloned buffer.\r\n */\r\nfunction cloneBuffer(buffer, isDeep) {\r\n  if (isDeep) {\r\n    return buffer.slice();\r\n  }\r\n  var result = new buffer.constructor(buffer.length);\r\n  buffer.copy(result);\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a clone of `arrayBuffer`.\r\n *\r\n * @private\r\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\r\n * @returns {ArrayBuffer} Returns the cloned array buffer.\r\n */\r\nfunction cloneArrayBuffer(arrayBuffer) {\r\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\r\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a clone of `dataView`.\r\n *\r\n * @private\r\n * @param {Object} dataView The data view to clone.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the cloned data view.\r\n */\r\nfunction cloneDataView(dataView, isDeep) {\r\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\r\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\r\n}\r\n\r\n/**\r\n * Creates a clone of `map`.\r\n *\r\n * @private\r\n * @param {Object} map The map to clone.\r\n * @param {Function} cloneFunc The function to clone values.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the cloned map.\r\n */\r\nfunction cloneMap(map, isDeep, cloneFunc) {\r\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\r\n  return arrayReduce(array, addMapEntry, new map.constructor);\r\n}\r\n\r\n/**\r\n * Creates a clone of `regexp`.\r\n *\r\n * @private\r\n * @param {Object} regexp The regexp to clone.\r\n * @returns {Object} Returns the cloned regexp.\r\n */\r\nfunction cloneRegExp(regexp) {\r\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\r\n  result.lastIndex = regexp.lastIndex;\r\n  return result;\r\n}\r\n\r\n/**\r\n * Creates a clone of `set`.\r\n *\r\n * @private\r\n * @param {Object} set The set to clone.\r\n * @param {Function} cloneFunc The function to clone values.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the cloned set.\r\n */\r\nfunction cloneSet(set, isDeep, cloneFunc) {\r\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\r\n  return arrayReduce(array, addSetEntry, new set.constructor);\r\n}\r\n\r\n/**\r\n * Creates a clone of the `symbol` object.\r\n *\r\n * @private\r\n * @param {Object} symbol The symbol object to clone.\r\n * @returns {Object} Returns the cloned symbol object.\r\n */\r\nfunction cloneSymbol(symbol) {\r\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\r\n}\r\n\r\n/**\r\n * Creates a clone of `typedArray`.\r\n *\r\n * @private\r\n * @param {Object} typedArray The typed array to clone.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the cloned typed array.\r\n */\r\nfunction cloneTypedArray(typedArray, isDeep) {\r\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\r\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\r\n}\r\n\r\n/**\r\n * Copies the values of `source` to `array`.\r\n *\r\n * @private\r\n * @param {Array} source The array to copy values from.\r\n * @param {Array} [array=[]] The array to copy values to.\r\n * @returns {Array} Returns `array`.\r\n */\r\nfunction copyArray(source, array) {\r\n  var index = -1,\r\n      length = source.length;\r\n\r\n  array || (array = Array(length));\r\n  while (++index < length) {\r\n    array[index] = source[index];\r\n  }\r\n  return array;\r\n}\r\n\r\n/**\r\n * Copies properties of `source` to `object`.\r\n *\r\n * @private\r\n * @param {Object} source The object to copy properties from.\r\n * @param {Array} props The property identifiers to copy.\r\n * @param {Object} [object={}] The object to copy properties to.\r\n * @param {Function} [customizer] The function to customize copied values.\r\n * @returns {Object} Returns `object`.\r\n */\r\nfunction copyObject(source, props, object, customizer) {\r\n  object || (object = {});\r\n\r\n  var index = -1,\r\n      length = props.length;\r\n\r\n  while (++index < length) {\r\n    var key = props[index];\r\n\r\n    var newValue = customizer\r\n      ? customizer(object[key], source[key], key, object, source)\r\n      : undefined;\r\n\r\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\r\n  }\r\n  return object;\r\n}\r\n\r\n/**\r\n * Copies own symbol properties of `source` to `object`.\r\n *\r\n * @private\r\n * @param {Object} source The object to copy symbols from.\r\n * @param {Object} [object={}] The object to copy symbols to.\r\n * @returns {Object} Returns `object`.\r\n */\r\nfunction copySymbols(source, object) {\r\n  return copyObject(source, getSymbols(source), object);\r\n}\r\n\r\n/**\r\n * Creates an array of own enumerable property names and symbols of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names and symbols.\r\n */\r\nfunction getAllKeys(object) {\r\n  return baseGetAllKeys(object, keys, getSymbols);\r\n}\r\n\r\n/**\r\n * Gets the data for `map`.\r\n *\r\n * @private\r\n * @param {Object} map The map to query.\r\n * @param {string} key The reference key.\r\n * @returns {*} Returns the map data.\r\n */\r\nfunction getMapData(map, key) {\r\n  var data = map.__data__;\r\n  return isKeyable(key)\r\n    ? data[typeof key == 'string' ? 'string' : 'hash']\r\n    : data.map;\r\n}\r\n\r\n/**\r\n * Gets the native function at `key` of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @param {string} key The key of the method to get.\r\n * @returns {*} Returns the function if it's native, else `undefined`.\r\n */\r\nfunction getNative(object, key) {\r\n  var value = getValue(object, key);\r\n  return baseIsNative(value) ? value : undefined;\r\n}\r\n\r\n/**\r\n * Creates an array of the own enumerable symbol properties of `object`.\r\n *\r\n * @private\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of symbols.\r\n */\r\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\r\n\r\n/**\r\n * Gets the `toStringTag` of `value`.\r\n *\r\n * @private\r\n * @param {*} value The value to query.\r\n * @returns {string} Returns the `toStringTag`.\r\n */\r\nvar getTag = baseGetTag;\r\n\r\n// Fallback for data views, maps, sets, and weak maps in IE 11,\r\n// for data views in Edge < 14, and promises in Node.js.\r\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\r\n    (Map && getTag(new Map) != mapTag) ||\r\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\r\n    (Set && getTag(new Set) != setTag) ||\r\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\r\n  getTag = function(value) {\r\n    var result = objectToString.call(value),\r\n        Ctor = result == objectTag ? value.constructor : undefined,\r\n        ctorString = Ctor ? toSource(Ctor) : undefined;\r\n\r\n    if (ctorString) {\r\n      switch (ctorString) {\r\n        case dataViewCtorString: return dataViewTag;\r\n        case mapCtorString: return mapTag;\r\n        case promiseCtorString: return promiseTag;\r\n        case setCtorString: return setTag;\r\n        case weakMapCtorString: return weakMapTag;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n}\r\n\r\n/**\r\n * Initializes an array clone.\r\n *\r\n * @private\r\n * @param {Array} array The array to clone.\r\n * @returns {Array} Returns the initialized clone.\r\n */\r\nfunction initCloneArray(array) {\r\n  var length = array.length,\r\n      result = array.constructor(length);\r\n\r\n  // Add properties assigned by `RegExp#exec`.\r\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\r\n    result.index = array.index;\r\n    result.input = array.input;\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Initializes an object clone.\r\n *\r\n * @private\r\n * @param {Object} object The object to clone.\r\n * @returns {Object} Returns the initialized clone.\r\n */\r\nfunction initCloneObject(object) {\r\n  return (typeof object.constructor == 'function' && !isPrototype(object))\r\n    ? baseCreate(getPrototype(object))\r\n    : {};\r\n}\r\n\r\n/**\r\n * Initializes an object clone based on its `toStringTag`.\r\n *\r\n * **Note:** This function only supports cloning values with tags of\r\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\r\n *\r\n * @private\r\n * @param {Object} object The object to clone.\r\n * @param {string} tag The `toStringTag` of the object to clone.\r\n * @param {Function} cloneFunc The function to clone values.\r\n * @param {boolean} [isDeep] Specify a deep clone.\r\n * @returns {Object} Returns the initialized clone.\r\n */\r\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\r\n  var Ctor = object.constructor;\r\n  switch (tag) {\r\n    case arrayBufferTag:\r\n      return cloneArrayBuffer(object);\r\n\r\n    case boolTag:\r\n    case dateTag:\r\n      return new Ctor(+object);\r\n\r\n    case dataViewTag:\r\n      return cloneDataView(object, isDeep);\r\n\r\n    case float32Tag: case float64Tag:\r\n    case int8Tag: case int16Tag: case int32Tag:\r\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\r\n      return cloneTypedArray(object, isDeep);\r\n\r\n    case mapTag:\r\n      return cloneMap(object, isDeep, cloneFunc);\r\n\r\n    case numberTag:\r\n    case stringTag:\r\n      return new Ctor(object);\r\n\r\n    case regexpTag:\r\n      return cloneRegExp(object);\r\n\r\n    case setTag:\r\n      return cloneSet(object, isDeep, cloneFunc);\r\n\r\n    case symbolTag:\r\n      return cloneSymbol(object);\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if `value` is a valid array-like index.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\r\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\r\n */\r\nfunction isIndex(value, length) {\r\n  length = length == null ? MAX_SAFE_INTEGER : length;\r\n  return !!length &&\r\n    (typeof value == 'number' || reIsUint.test(value)) &&\r\n    (value > -1 && value % 1 == 0 && value < length);\r\n}\r\n\r\n/**\r\n * Checks if `value` is suitable for use as unique object key.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\r\n */\r\nfunction isKeyable(value) {\r\n  var type = typeof value;\r\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\r\n    ? (value !== '__proto__')\r\n    : (value === null);\r\n}\r\n\r\n/**\r\n * Checks if `func` has its source masked.\r\n *\r\n * @private\r\n * @param {Function} func The function to check.\r\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\r\n */\r\nfunction isMasked(func) {\r\n  return !!maskSrcKey && (maskSrcKey in func);\r\n}\r\n\r\n/**\r\n * Checks if `value` is likely a prototype object.\r\n *\r\n * @private\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\r\n */\r\nfunction isPrototype(value) {\r\n  var Ctor = value && value.constructor,\r\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\r\n\r\n  return value === proto;\r\n}\r\n\r\n/**\r\n * Converts `func` to its source code.\r\n *\r\n * @private\r\n * @param {Function} func The function to process.\r\n * @returns {string} Returns the source code.\r\n */\r\nfunction toSource(func) {\r\n  if (func != null) {\r\n    try {\r\n      return funcToString.call(func);\r\n    } catch (e) {}\r\n    try {\r\n      return (func + '');\r\n    } catch (e) {}\r\n  }\r\n  return '';\r\n}\r\n\r\n/**\r\n * This method is like `_.clone` except that it recursively clones `value`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 1.0.0\r\n * @category Lang\r\n * @param {*} value The value to recursively clone.\r\n * @returns {*} Returns the deep cloned value.\r\n * @see _.clone\r\n * @example\r\n *\r\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\r\n *\r\n * var deep = _.cloneDeep(objects);\r\n * console.log(deep[0] === objects[0]);\r\n * // => false\r\n */\r\nfunction cloneDeep(value) {\r\n  return baseClone(value, true, true);\r\n}\r\n\r\n/**\r\n * Performs a\r\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * comparison between two values to determine if they are equivalent.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to compare.\r\n * @param {*} other The other value to compare.\r\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\r\n * @example\r\n *\r\n * var object = { 'a': 1 };\r\n * var other = { 'a': 1 };\r\n *\r\n * _.eq(object, object);\r\n * // => true\r\n *\r\n * _.eq(object, other);\r\n * // => false\r\n *\r\n * _.eq('a', 'a');\r\n * // => true\r\n *\r\n * _.eq('a', Object('a'));\r\n * // => false\r\n *\r\n * _.eq(NaN, NaN);\r\n * // => true\r\n */\r\nfunction eq(value, other) {\r\n  return value === other || (value !== value && other !== other);\r\n}\r\n\r\n/**\r\n * Checks if `value` is likely an `arguments` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\r\n *  else `false`.\r\n * @example\r\n *\r\n * _.isArguments(function() { return arguments; }());\r\n * // => true\r\n *\r\n * _.isArguments([1, 2, 3]);\r\n * // => false\r\n */\r\nfunction isArguments(value) {\r\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\r\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\r\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\r\n}\r\n\r\n/**\r\n * Checks if `value` is classified as an `Array` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\r\n * @example\r\n *\r\n * _.isArray([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArray(document.body.children);\r\n * // => false\r\n *\r\n * _.isArray('abc');\r\n * // => false\r\n *\r\n * _.isArray(_.noop);\r\n * // => false\r\n */\r\nvar isArray = Array.isArray;\r\n\r\n/**\r\n * Checks if `value` is array-like. A value is considered array-like if it's\r\n * not a function and has a `value.length` that's an integer greater than or\r\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n * @example\r\n *\r\n * _.isArrayLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArrayLike(document.body.children);\r\n * // => true\r\n *\r\n * _.isArrayLike('abc');\r\n * // => true\r\n *\r\n * _.isArrayLike(_.noop);\r\n * // => false\r\n */\r\nfunction isArrayLike(value) {\r\n  return value != null && isLength(value.length) && !isFunction(value);\r\n}\r\n\r\n/**\r\n * This method is like `_.isArrayLike` except that it also checks if `value`\r\n * is an object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an array-like object,\r\n *  else `false`.\r\n * @example\r\n *\r\n * _.isArrayLikeObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isArrayLikeObject(document.body.children);\r\n * // => true\r\n *\r\n * _.isArrayLikeObject('abc');\r\n * // => false\r\n *\r\n * _.isArrayLikeObject(_.noop);\r\n * // => false\r\n */\r\nfunction isArrayLikeObject(value) {\r\n  return isObjectLike(value) && isArrayLike(value);\r\n}\r\n\r\n/**\r\n * Checks if `value` is a buffer.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.3.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\r\n * @example\r\n *\r\n * _.isBuffer(new Buffer(2));\r\n * // => true\r\n *\r\n * _.isBuffer(new Uint8Array(2));\r\n * // => false\r\n */\r\nvar isBuffer = nativeIsBuffer || stubFalse;\r\n\r\n/**\r\n * Checks if `value` is classified as a `Function` object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n * @example\r\n *\r\n * _.isFunction(_);\r\n * // => true\r\n *\r\n * _.isFunction(/abc/);\r\n * // => false\r\n */\r\nfunction isFunction(value) {\r\n  // The use of `Object#toString` avoids issues with the `typeof` operator\r\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\r\n  var tag = isObject(value) ? objectToString.call(value) : '';\r\n  return tag == funcTag || tag == genTag;\r\n}\r\n\r\n/**\r\n * Checks if `value` is a valid array-like length.\r\n *\r\n * **Note:** This method is loosely based on\r\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\r\n * @example\r\n *\r\n * _.isLength(3);\r\n * // => true\r\n *\r\n * _.isLength(Number.MIN_VALUE);\r\n * // => false\r\n *\r\n * _.isLength(Infinity);\r\n * // => false\r\n *\r\n * _.isLength('3');\r\n * // => false\r\n */\r\nfunction isLength(value) {\r\n  return typeof value == 'number' &&\r\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\r\n}\r\n\r\n/**\r\n * Checks if `value` is the\r\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n * @example\r\n *\r\n * _.isObject({});\r\n * // => true\r\n *\r\n * _.isObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObject(_.noop);\r\n * // => true\r\n *\r\n * _.isObject(null);\r\n * // => false\r\n */\r\nfunction isObject(value) {\r\n  var type = typeof value;\r\n  return !!value && (type == 'object' || type == 'function');\r\n}\r\n\r\n/**\r\n * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n * and has a `typeof` result of \"object\".\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n * @example\r\n *\r\n * _.isObjectLike({});\r\n * // => true\r\n *\r\n * _.isObjectLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObjectLike(_.noop);\r\n * // => false\r\n *\r\n * _.isObjectLike(null);\r\n * // => false\r\n */\r\nfunction isObjectLike(value) {\r\n  return !!value && typeof value == 'object';\r\n}\r\n\r\n/**\r\n * Creates an array of the own enumerable property names of `object`.\r\n *\r\n * **Note:** Non-object values are coerced to objects. See the\r\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\r\n * for more details.\r\n *\r\n * @static\r\n * @since 0.1.0\r\n * @memberOf _\r\n * @category Object\r\n * @param {Object} object The object to query.\r\n * @returns {Array} Returns the array of property names.\r\n * @example\r\n *\r\n * function Foo() {\r\n *   this.a = 1;\r\n *   this.b = 2;\r\n * }\r\n *\r\n * Foo.prototype.c = 3;\r\n *\r\n * _.keys(new Foo);\r\n * // => ['a', 'b'] (iteration order is not guaranteed)\r\n *\r\n * _.keys('hi');\r\n * // => ['0', '1']\r\n */\r\nfunction keys(object) {\r\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\r\n}\r\n\r\n/**\r\n * This method returns a new empty array.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.13.0\r\n * @category Util\r\n * @returns {Array} Returns the new empty array.\r\n * @example\r\n *\r\n * var arrays = _.times(2, _.stubArray);\r\n *\r\n * console.log(arrays);\r\n * // => [[], []]\r\n *\r\n * console.log(arrays[0] === arrays[1]);\r\n * // => false\r\n */\r\nfunction stubArray() {\r\n  return [];\r\n}\r\n\r\n/**\r\n * This method returns `false`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.13.0\r\n * @category Util\r\n * @returns {boolean} Returns `false`.\r\n * @example\r\n *\r\n * _.times(2, _.stubFalse);\r\n * // => [false, false]\r\n */\r\nfunction stubFalse() {\r\n  return false;\r\n}\r\n\r\nmodule.exports = cloneDeep;\r\n","const Resolutions = {\r\n    '1080': {\r\n        width: 1920,\r\n        height: 1080,\r\n        order: 8\r\n    },\r\n    'fullhd': {\r\n        width: 1920,\r\n        height: 1080,\r\n        order: 8\r\n    },\r\n    '720': {\r\n        width: 1280,\r\n        height: 720,\r\n        order: 7\r\n    },\r\n    'hd': {\r\n        width: 1280,\r\n        height: 720,\r\n        order: 7\r\n    },\r\n    '960': {\r\n        width: 960,\r\n        height: 720,\r\n        order: 6\r\n    },\r\n    '540': {\r\n        width: 960,\r\n        height: 540,\r\n        order: 5\r\n    },\r\n    'qhd': {\r\n        width: 960,\r\n        height: 540,\r\n        order: 5\r\n    },\r\n\r\n    // 16:9 resolution first.\r\n    '360': {\r\n        width: 640,\r\n        height: 360,\r\n        order: 4\r\n    },\r\n    '640': {\r\n        width: 640,\r\n        height: 480,\r\n        order: 3\r\n    },\r\n    'vga': {\r\n        width: 640,\r\n        height: 480,\r\n        order: 3\r\n    },\r\n\r\n    // 16:9 resolution first.\r\n    '180': {\r\n        width: 320,\r\n        height: 180,\r\n        order: 2\r\n    },\r\n    '320': {\r\n        width: 320,\r\n        height: 240,\r\n        order: 1\r\n    }\r\n};\r\n\r\nmodule.exports = Resolutions;\r\n","/**\r\n * The errors for the connection.\r\n */\r\n\r\n/**\r\n * Indicates that the connection was dropped with an error which was most likely\r\n * caused by some networking issues. The dropped term in this context means that\r\n * the connection was closed unexpectedly (not on user's request).\r\n *\r\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\r\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\r\n * could also happen when BOSH request is sent to the server with the session-id\r\n * that is not know to the server. But this should not happen in lib-jitsi-meet\r\n * case as long as the service is configured correctly (there is no bug).\r\n */\r\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\r\n\r\n/**\r\n * Not specified errors.\r\n */\r\nexport const OTHER_ERROR = 'connection.otherError';\r\n\r\n/**\r\n * Indicates that a password is required in order to join the conference.\r\n */\r\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\r\n\r\n/**\r\n * Indicates that the connection was dropped, because of too many 5xx HTTP\r\n * errors on BOSH requests.\r\n */\r\nexport const SERVER_ERROR = 'connection.serverError';\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $pres, Strophe } from 'strophe.js';\r\nimport 'strophejs-plugin-stream-management';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport ResumeTask from './ResumeTask';\r\nimport LastSuccessTracker from './StropheLastSuccess';\r\nimport PingConnectionPlugin from './strophe.ping';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The lib-jitsi-meet layer for {@link Strophe.Connection}.\r\n */\r\nexport default class XmppConnection extends Listenable {\r\n    /**\r\n     * The list of {@link XmppConnection} events.\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    static get Events() {\r\n        return {\r\n            CONN_STATUS_CHANGED: 'CONN_STATUS_CHANGED'\r\n        };\r\n    }\r\n\r\n    /**\r\n     * The list of Xmpp connection statuses.\r\n     *\r\n     * @returns {Strophe.Status}\r\n     */\r\n    static get Status() {\r\n        return Strophe.Status;\r\n    }\r\n\r\n    /**\r\n     * Initializes new connection instance.\r\n     *\r\n     * @param {Object} options\r\n     * @param {String} options.serviceUrl - The BOSH or WebSocket service URL.\r\n     * @param {String} [options.enableWebsocketResume=true] - True/false to control the stream resumption functionality.\r\n     * It will enable automatically by default if supported by the XMPP server.\r\n     * @param {Number} [options.websocketKeepAlive=240000] - The websocket keep alive interval. It's 4 minutes by\r\n     * default with jitter. Pass -1 to disable. The actual interval equation is:\r\n     * jitterDelay = (interval * 0.2) + (0.8 * interval * Math.random())\r\n     * The keep alive is HTTP GET request to the {@link options.serviceUrl}.\r\n     */\r\n    constructor({ enableWebsocketResume, websocketKeepAlive, serviceUrl }) {\r\n        super();\r\n        this._options = {\r\n            enableWebsocketResume: typeof enableWebsocketResume === 'undefined' ? true : enableWebsocketResume,\r\n            websocketKeepAlive: typeof websocketKeepAlive === 'undefined' ? 4 * 60 * 1000 : Number(websocketKeepAlive)\r\n        };\r\n\r\n        this._stropheConn = new Strophe.Connection(serviceUrl);\r\n        this._usesWebsocket = serviceUrl.startsWith('ws:') || serviceUrl.startsWith('wss:');\r\n\r\n        // The default maxRetries is 5, which is too long.\r\n        this._stropheConn.maxRetries = 3;\r\n\r\n        this._lastSuccessTracker = new LastSuccessTracker();\r\n        this._lastSuccessTracker.startTracking(this, this._stropheConn);\r\n\r\n        this._resumeTask = new ResumeTask(this._stropheConn);\r\n\r\n        /**\r\n         * @typedef DeferredSendIQ Object\r\n         * @property {Element} iq - The IQ to send.\r\n         * @property {function} resolve - The resolve method of the deferred Promise.\r\n         * @property {function} reject - The reject method of the deferred Promise.\r\n         * @property {number} timeout - The ID of the timeout task that needs to be cleared, before sending the IQ.\r\n         */\r\n        /**\r\n         * Deferred IQs to be sent upon reconnect.\r\n         * @type {Array<DeferredSendIQ>}\r\n         * @private\r\n         */\r\n        this._deferredIQs = [];\r\n\r\n        // Ping plugin is mandatory for the Websocket mode to work correctly. It's used to detect when the connection\r\n        // is broken (WebSocket/TCP connection not closed gracefully).\r\n        this.addConnectionPlugin(\r\n            'ping',\r\n            new PingConnectionPlugin({\r\n                onPingThresholdExceeded: () => this._onPingErrorThresholdExceeded()\r\n            }));\r\n    }\r\n\r\n    /**\r\n     * A getter for the connected state.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    get connected() {\r\n        const websocket = this._stropheConn && this._stropheConn._proto && this._stropheConn._proto.socket;\r\n\r\n        return (this._status === Strophe.Status.CONNECTED || this._status === Strophe.Status.ATTACHED)\r\n            && (!this.isUsingWebSocket || (websocket && websocket.readyState === WebSocket.OPEN));\r\n    }\r\n\r\n    /**\r\n     * Retrieves the feature discovery plugin instance.\r\n     *\r\n     * @returns {Strophe.Connection.disco}\r\n     */\r\n    get disco() {\r\n        return this._stropheConn.disco;\r\n    }\r\n\r\n    /**\r\n     * A getter for the disconnecting state.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    get disconnecting() {\r\n        return this._stropheConn.disconnecting === true;\r\n    }\r\n\r\n    /**\r\n     * A getter for the domain.\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    get domain() {\r\n        return this._stropheConn.domain;\r\n    }\r\n\r\n    /**\r\n     * Tells if Websocket is used as the transport for the current XMPP connection. Returns true for Websocket or false\r\n     * for BOSH.\r\n     * @returns {boolean}\r\n     */\r\n    get isUsingWebSocket() {\r\n        return this._usesWebsocket;\r\n    }\r\n\r\n    /**\r\n     * A getter for the JID.\r\n     *\r\n     * @returns {string|null}\r\n     */\r\n    get jid() {\r\n        return this._stropheConn.jid;\r\n    }\r\n\r\n    /**\r\n     * Returns headers for the last BOSH response received.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get lastResponseHeaders() {\r\n        return this._stropheConn._proto && this._stropheConn._proto.lastResponseHeaders;\r\n    }\r\n\r\n    /**\r\n     * A getter for the logger plugin instance.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    get logger() {\r\n        return this._stropheConn.logger;\r\n    }\r\n\r\n    /**\r\n     * A getter for the connection options.\r\n     *\r\n     * @returns {*}\r\n     */\r\n    get options() {\r\n        return this._stropheConn.options;\r\n    }\r\n\r\n    /**\r\n     * A getter for the service URL.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get service() {\r\n        return this._stropheConn.service;\r\n    }\r\n\r\n    /**\r\n     * Returns the current connection status.\r\n     *\r\n     * @returns {Strophe.Status}\r\n     */\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * Adds a connection plugin to this instance.\r\n     *\r\n     * @param {string} name - The name of the plugin or rather a key under which it will be stored on this connection\r\n     * instance.\r\n     * @param {ConnectionPluginListenable} plugin - The plugin to add.\r\n     */\r\n    addConnectionPlugin(name, plugin) {\r\n        this[name] = plugin;\r\n        plugin.init(this);\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.addHandler}\r\n     *\r\n     * @returns {void}\r\n     */\r\n    addHandler(...args) {\r\n        this._stropheConn.addHandler(...args);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Wraps {@link Strophe.Connection.attach} method in order to intercept the connection status updates.\r\n     * See {@link Strophe.Connection.attach} for the params description.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    attach(jid, sid, rid, callback, ...args) {\r\n        this._stropheConn.attach(jid, sid, rid, this._stropheConnectionCb.bind(this, callback), ...args);\r\n    }\r\n\r\n    /**\r\n     * Wraps Strophe.Connection.connect method in order to intercept the connection status updates.\r\n     * See {@link Strophe.Connection.connect} for the params description.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    connect(jid, pass, callback, ...args) {\r\n        this._stropheConn.connect(jid, pass, this._stropheConnectionCb.bind(this, callback), ...args);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Handles {@link Strophe.Status} updates for the current connection.\r\n     *\r\n     * @param {function} targetCallback - The callback passed by the {@link XmppConnection} consumer to one of\r\n     * the connect methods.\r\n     * @param {Strophe.Status} status - The new connection status.\r\n     * @param {*} args - The rest of the arguments passed by Strophe.\r\n     * @private\r\n     */\r\n    _stropheConnectionCb(targetCallback, status, ...args) {\r\n        this._status = status;\r\n\r\n        let blockCallback = false;\r\n\r\n        if (status === Strophe.Status.CONNECTED || status === Strophe.Status.ATTACHED) {\r\n            this._maybeEnableStreamResume();\r\n            this._maybeStartWSKeepAlive();\r\n            this._processDeferredIQs();\r\n            this._resumeTask.cancel();\r\n            this.ping.startInterval(this.domain);\r\n        } else if (status === Strophe.Status.DISCONNECTED) {\r\n            this.ping.stopInterval();\r\n\r\n            // FIXME add RECONNECTING state instead of blocking the DISCONNECTED update\r\n            blockCallback = this._tryResumingConnection();\r\n            if (!blockCallback) {\r\n                clearTimeout(this._wsKeepAlive);\r\n            }\r\n        }\r\n\r\n        if (!blockCallback) {\r\n            targetCallback(status, ...args);\r\n            this.eventEmitter.emit(XmppConnection.Events.CONN_STATUS_CHANGED, status);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the list of IQs and rejects deferred Promises with an error.\r\n     *\r\n     * @private\r\n     */\r\n    _clearDeferredIQs() {\r\n        for (const deferred of this._deferredIQs) {\r\n            deferred.reject(new Error('disconnect'));\r\n        }\r\n        this._deferredIQs = [];\r\n    }\r\n\r\n    /**\r\n     * The method is meant to be used for testing. It's a shortcut for closing the WebSocket.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    closeWebsocket() {\r\n        if (this._stropheConn && this._stropheConn._proto) {\r\n            this._stropheConn._proto._closeSocket();\r\n            this._stropheConn._proto._onClose(null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.disconnect}.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    disconnect(...args) {\r\n        this._resumeTask.cancel();\r\n        clearTimeout(this._wsKeepAlive);\r\n        this._clearDeferredIQs();\r\n        this._stropheConn.disconnect(...args);\r\n    }\r\n\r\n    /**\r\n     * See {@link Strophe.Connection.flush}.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    flush(...args) {\r\n        this._stropheConn.flush(...args);\r\n    }\r\n\r\n    /**\r\n     * See {@link LastRequestTracker.getTimeSinceLastSuccess}.\r\n     *\r\n     * @returns {number|null}\r\n     */\r\n    getTimeSinceLastSuccess() {\r\n        return this._lastSuccessTracker.getTimeSinceLastSuccess();\r\n    }\r\n\r\n    /**\r\n     * Requests a resume token from the server if enabled and all requirements are met.\r\n     *\r\n     * @private\r\n     */\r\n    _maybeEnableStreamResume() {\r\n        if (!this._options.enableWebsocketResume) {\r\n\r\n            return;\r\n        }\r\n\r\n        const { streamManagement } = this._stropheConn;\r\n\r\n        if (!this.isUsingWebSocket) {\r\n            logger.warn('Stream resume enabled, but WebSockets are not enabled');\r\n        } else if (!streamManagement) {\r\n            logger.warn('Stream resume enabled, but Strophe streamManagement plugin is not installed');\r\n        } else if (!streamManagement.isSupported()) {\r\n            logger.warn('Stream resume enabled, but XEP-0198 is not supported by the server');\r\n        } else if (!streamManagement.getResumeToken()) {\r\n            logger.info('Enabling XEP-0198 stream management');\r\n            streamManagement.enable(/* resume */ true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the Websocket keep alive if enabled.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _maybeStartWSKeepAlive() {\r\n        const { websocketKeepAlive } = this._options;\r\n\r\n        if (this._usesWebsocket && websocketKeepAlive > 0) {\r\n            this._wsKeepAlive || logger.info(`WebSocket keep alive interval: ${websocketKeepAlive}ms`);\r\n            clearTimeout(this._wsKeepAlive);\r\n\r\n            const intervalWithJitter\r\n                = /* base */ (websocketKeepAlive * 0.2) + /* jitter */ (Math.random() * 0.8 * websocketKeepAlive);\r\n\r\n            logger.debug(`Scheduling next WebSocket keep-alive in ${intervalWithJitter}ms`);\r\n\r\n            this._wsKeepAlive = setTimeout(() => {\r\n                const url = this.service.replace('wss://', 'https://').replace('ws://', 'http://');\r\n\r\n                fetch(url).catch(\r\n                    error => {\r\n                        logger.error(`Websocket Keep alive failed for url: ${url}`, { error });\r\n                    })\r\n                    .then(() => this._maybeStartWSKeepAlive());\r\n            }, intervalWithJitter);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Goes over the list of {@link DeferredSendIQ} tasks and sends them.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _processDeferredIQs() {\r\n        for (const deferred of this._deferredIQs) {\r\n            if (deferred.iq) {\r\n                clearTimeout(deferred.timeout);\r\n\r\n                const timeLeft = Date.now() - deferred.start;\r\n\r\n                this.sendIQ(\r\n                    deferred.iq,\r\n                    result => deferred.resolve(result),\r\n                    error => deferred.reject(error),\r\n                    timeLeft);\r\n            }\r\n        }\r\n\r\n        this._deferredIQs = [];\r\n    }\r\n\r\n    /**\r\n     * Send a stanza. This function is called to push data onto the send queue to go out over the wire.\r\n     *\r\n     * @param {Element|Strophe.Builder} stanza - The stanza to send.\r\n     * @returns {void}\r\n     */\r\n    send(stanza) {\r\n        if (!this.connected) {\r\n            throw new Error('Not connected');\r\n        }\r\n        this._stropheConn.send(stanza);\r\n    }\r\n\r\n    /**\r\n     * Helper function to send IQ stanzas.\r\n     *\r\n     * @param {Element} elem - The stanza to send.\r\n     * @param {Function} callback - The callback function for a successful request.\r\n     * @param {Function} errback - The callback function for a failed or timed out request.  On timeout, the stanza will\r\n     * be null.\r\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\r\n     * @returns {number} - The id used to send the IQ.\r\n     */\r\n    sendIQ(elem, callback, errback, timeout) {\r\n        if (!this.connected) {\r\n            errback('Not connected');\r\n\r\n            return;\r\n        }\r\n\r\n        return this._stropheConn.sendIQ(elem, callback, errback, timeout);\r\n    }\r\n\r\n    /**\r\n     * Sends an IQ immediately if connected or puts it on the send queue otherwise(in contrary to other send methods\r\n     * which would fail immediately if disconnected).\r\n     *\r\n     * @param {Element} iq - The IQ to send.\r\n     * @param {number} timeout - How long to wait for the response. The time when the connection is reconnecting is\r\n     * included, which means that the IQ may never be sent and still fail with a timeout.\r\n     */\r\n    sendIQ2(iq, { timeout }) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.connected) {\r\n                this.sendIQ(\r\n                    iq,\r\n                    result => resolve(result),\r\n                    error => reject(error),\r\n                    timeout);\r\n            } else {\r\n                const deferred = {\r\n                    iq,\r\n                    resolve,\r\n                    reject,\r\n                    start: Date.now(),\r\n                    timeout: setTimeout(() => {\r\n                        // clears the IQ on timeout and invalidates the deferred task\r\n                        deferred.iq = undefined;\r\n\r\n                        // Strophe calls with undefined on timeout\r\n                        reject(undefined);\r\n                    }, timeout)\r\n                };\r\n\r\n                this._deferredIQs.push(deferred);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called by the ping plugin when ping fails too many times.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _onPingErrorThresholdExceeded() {\r\n        if (this.isUsingWebSocket) {\r\n            logger.warn('Ping error threshold exceeded - killing the WebSocket');\r\n            this.closeWebsocket();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  Helper function to send presence stanzas. The main benefit is for sending presence stanzas for which you expect\r\n     *  a responding presence stanza with the same id (for example when leaving a chat room).\r\n     *\r\n     * @param {Element} elem - The stanza to send.\r\n     * @param {Function} callback - The callback function for a successful request.\r\n     * @param {Function} errback - The callback function for a failed or timed out request. On timeout, the stanza will\r\n     * be null.\r\n     * @param {number} timeout - The time specified in milliseconds for a timeout to occur.\r\n     * @returns {number} - The id used to send the presence.\r\n     */\r\n    sendPresence(elem, callback, errback, timeout) {\r\n        if (!this.connected) {\r\n            errback('Not connected');\r\n\r\n            return;\r\n        }\r\n        this._stropheConn.sendPresence(elem, callback, errback, timeout);\r\n    }\r\n\r\n    /**\r\n     * The method gracefully closes the BOSH connection by using 'navigator.sendBeacon'.\r\n     *\r\n     * @returns {boolean} - true if the beacon was sent.\r\n     */\r\n    sendUnavailableBeacon() {\r\n        if (!navigator.sendBeacon || this._stropheConn.disconnecting || !this._stropheConn.connected) {\r\n            return false;\r\n        }\r\n\r\n        this._stropheConn._changeConnectStatus(Strophe.Status.DISCONNECTING);\r\n        this._stropheConn.disconnecting = true;\r\n\r\n        const body = this._stropheConn._proto._buildBody()\r\n            .attrs({\r\n                type: 'terminate'\r\n            });\r\n        const pres = $pres({\r\n            xmlns: Strophe.NS.CLIENT,\r\n            type: 'unavailable'\r\n        });\r\n\r\n        body.cnode(pres.tree());\r\n\r\n        const res = navigator.sendBeacon(\r\n            this.service.indexOf('https://') === -1 ? `https:${this.service}` : this.service,\r\n            Strophe.serialize(body.tree()));\r\n\r\n        logger.info(`Successfully send unavailable beacon ${res}`);\r\n\r\n        this._stropheConn._proto._abortAllRequests();\r\n        this._stropheConn._doDisconnect();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tries to use stream management plugin to resume dropped XMPP connection. The streamManagement plugin clears\r\n     * the resume token if any connection error occurs which would put it in unrecoverable state, so as long as\r\n     * the token is present it means the connection can be resumed.\r\n     *\r\n     * @private\r\n     * @returns {boolean}\r\n     */\r\n    _tryResumingConnection() {\r\n        const { streamManagement } = this._stropheConn;\r\n        const resumeToken = streamManagement && streamManagement.getResumeToken();\r\n\r\n        if (resumeToken) {\r\n            this._resumeTask.schedule();\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n}\r\n","\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\r\nimport browser from '../browser';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\nlet gumFunction = null;\r\n\r\nexport const SS_DEFAULT_FRAME_RATE = 5;\r\n\r\n/**\r\n * Handles obtaining a stream from a screen capture on different browsers.\r\n */\r\nconst ScreenObtainer = {\r\n    /**\r\n     * If not <tt>null</tt> it means that the initialization process is still in\r\n     * progress. It is used to make desktop stream request wait and continue\r\n     * after it's done.\r\n     * {@type Promise|null}\r\n     */\r\n\r\n    obtainStream: null,\r\n\r\n    /**\r\n     * Initializes the function used to obtain a screen capture\r\n     * (this.obtainStream).\r\n     *\r\n     * @param {object} options\r\n     * @param {Function} gum GUM method\r\n     */\r\n    init(options = {}, gum) {\r\n        this.options = options;\r\n        gumFunction = gum;\r\n\r\n        this.obtainStream = this._createObtainStreamMethod();\r\n\r\n        if (!this.obtainStream) {\r\n            logger.info('Desktop sharing disabled');\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Returns a method which will be used to obtain the screen sharing stream\r\n     * (based on the browser type).\r\n     *\r\n     * @returns {Function}\r\n     * @private\r\n     */\r\n    _createObtainStreamMethod() {\r\n        if (browser.isNWJS()) {\r\n            return (_, onSuccess, onFailure) => {\r\n                window.JitsiMeetNW.obtainDesktopStream(\r\n                    onSuccess,\r\n                    (error, constraints) => {\r\n                        let jitsiError;\r\n\r\n                        // FIXME:\r\n                        // This is very very dirty fix for recognising that the\r\n                        // user have clicked the cancel button from the Desktop\r\n                        // sharing pick window. The proper solution would be to\r\n                        // detect this in the NWJS application by checking the\r\n                        // streamId === \"\". Even better solution would be to\r\n                        // stop calling GUM from the NWJS app and just pass the\r\n                        // streamId to lib-jitsi-meet. This way the desktop\r\n                        // sharing implementation for NWJS and chrome extension\r\n                        // will be the same and lib-jitsi-meet will be able to\r\n                        // control the constraints, check the streamId, etc.\r\n                        //\r\n                        // I cannot find documentation about \"InvalidStateError\"\r\n                        // but this is what we are receiving from GUM when the\r\n                        // streamId for the desktop sharing is \"\".\r\n\r\n                        if (error && error.name === 'InvalidStateError') {\r\n                            jitsiError = new JitsiTrackError(\r\n                                JitsiTrackErrors.SCREENSHARING_USER_CANCELED\r\n                            );\r\n                        } else {\r\n                            jitsiError = new JitsiTrackError(\r\n                                error, constraints, [ 'desktop' ]);\r\n                        }\r\n                        (typeof onFailure === 'function')\r\n                            && onFailure(jitsiError);\r\n                    });\r\n            };\r\n        } else if (browser.isElectron()) {\r\n            return this.obtainScreenOnElectron;\r\n        } else if (browser.isReactNative() && browser.supportsGetDisplayMedia()) {\r\n            return this.obtainScreenFromGetDisplayMediaRN;\r\n        } else if (browser.supportsGetDisplayMedia()) {\r\n            return this.obtainScreenFromGetDisplayMedia;\r\n        }\r\n        logger.log('Screen sharing not supported on ', browser.getName());\r\n\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * Gets the appropriate constraints for audio sharing.\r\n     *\r\n     * @returns {Object|boolean}\r\n     */\r\n    _getAudioConstraints() {\r\n        const { audioQuality } = this.options;\r\n        const audio = audioQuality?.stereo ? {\r\n            autoGainControl: false,\r\n            channelCount: 2,\r\n            echoCancellation: false,\r\n            noiseSuppression: false\r\n        } : true;\r\n\r\n        return audio;\r\n    },\r\n\r\n    /**\r\n     * Checks whether obtaining a screen capture is supported in the current\r\n     * environment.\r\n     * @returns {boolean}\r\n     */\r\n    isSupported() {\r\n        return this.obtainStream !== null;\r\n    },\r\n\r\n    /**\r\n     * Obtains a screen capture stream on Electron.\r\n     *\r\n     * @param {Object} [options] - Screen sharing options.\r\n     * @param {Array<string>} [options.desktopSharingSources] - Array with the\r\n     * sources that have to be displayed in the desktop picker window ('screen',\r\n     * 'window', etc.).\r\n     * @param onSuccess - Success callback.\r\n     * @param onFailure - Failure callback.\r\n     */\r\n    obtainScreenOnElectron(options = {}, onSuccess, onFailure) {\r\n        if (window.JitsiMeetScreenObtainer\r\n            && window.JitsiMeetScreenObtainer.openDesktopPicker) {\r\n            const { desktopSharingSources, gumOptions } = options;\r\n\r\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\r\n                {\r\n                    desktopSharingSources: desktopSharingSources || [ 'screen', 'window' ]\r\n                },\r\n                (streamId, streamType, screenShareAudio = false) =>\r\n                    onGetStreamResponse(\r\n                        {\r\n                            response: {\r\n                                streamId,\r\n                                streamType,\r\n                                screenShareAudio\r\n                            },\r\n                            gumOptions\r\n                        },\r\n                        onSuccess,\r\n                        onFailure\r\n                    ),\r\n                err => onFailure(new JitsiTrackError(\r\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\r\n                    err\r\n                ))\r\n            );\r\n        } else {\r\n            onFailure(new JitsiTrackError(\r\n                JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Obtains a screen capture stream using getDisplayMedia.\r\n     *\r\n     * @param callback - The success callback.\r\n     * @param errorCallback - The error callback.\r\n     */\r\n    obtainScreenFromGetDisplayMedia(callback, errorCallback) {\r\n        let getDisplayMedia;\r\n\r\n        if (navigator.getDisplayMedia) {\r\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\r\n        } else {\r\n            // eslint-disable-next-line max-len\r\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\r\n        }\r\n\r\n        const { desktopSharingFrameRate } = this.options;\r\n        const video = typeof desktopSharingFrameRate === 'object' ? { frameRate: desktopSharingFrameRate } : true;\r\n        const audio = this._getAudioConstraints();\r\n\r\n        // At the time of this writing 'min' constraint for fps is not supported by getDisplayMedia.\r\n        video.frameRate && delete video.frameRate.min;\r\n\r\n        const constraints = {\r\n            video,\r\n            audio,\r\n            cursor: 'always'\r\n        };\r\n\r\n        logger.info('Using getDisplayMedia for screen sharing', constraints);\r\n\r\n        getDisplayMedia(constraints)\r\n            .then(stream => {\r\n                callback({\r\n                    stream,\r\n                    sourceId: stream.id\r\n                });\r\n            })\r\n            .catch(error => {\r\n                const errorDetails = {\r\n                    errorName: error && error.name,\r\n                    errorMsg: error && error.message,\r\n                    errorStack: error && error.stack\r\n                };\r\n\r\n                logger.error('getDisplayMedia error', constraints, errorDetails);\r\n\r\n                if (errorDetails.errorMsg && errorDetails.errorMsg.indexOf('denied by system') !== -1) {\r\n                    // On Chrome this is the only thing different between error returned when user cancels\r\n                    // and when no permission was given on the OS level.\r\n                    errorCallback(new JitsiTrackError(JitsiTrackErrors.PERMISSION_DENIED));\r\n\r\n                    return;\r\n                }\r\n\r\n                errorCallback(new JitsiTrackError(JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\r\n            });\r\n    },\r\n    \r\n    /**\r\n     * Obtains a screen capture stream using getDisplayMedia.\r\n     *\r\n     * @param callback - The success callback.\r\n     * @param errorCallback - The error callback.\r\n     */\r\n    obtainScreenFromGetDisplayMediaRN(callback, errorCallback) {\r\n        logger.info('Using getDisplayMedia for screen sharing');\r\n\r\n        navigator.mediaDevices.getDisplayMedia({ video: true })\r\n            .then(stream => {\r\n                callback({\r\n                    stream,\r\n                    sourceId: stream.id });\r\n            })\r\n            .catch(() => {\r\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\r\n                    .SCREENSHARING_USER_CANCELED));\r\n            });\r\n    },\r\n\r\n    /**\r\n     * Sets the max frame rate to be used for a desktop track capture.\r\n     *\r\n     * @param {number} maxFps capture frame rate to be used for desktop tracks.\r\n     * @returns {void}\r\n     */\r\n    setDesktopSharingFrameRate(maxFps) {\r\n        logger.info(`Setting the desktop capture rate to ${maxFps}`);\r\n\r\n        this.options.desktopSharingFrameRate = {\r\n            min: SS_DEFAULT_FRAME_RATE,\r\n            max: maxFps\r\n        };\r\n    }\r\n};\r\n\r\n/**\r\n * Handles response from external application / extension and calls GUM to\r\n * receive the desktop streams or reports error.\r\n * @param {object} options\r\n * @param {object} options.response\r\n * @param {string} options.response.streamId - the streamId for the desktop\r\n * stream.\r\n * @param {bool}   options.response.screenShareAudio - Used by electron clients to\r\n * enable system audio screen sharing.\r\n * @param {string} options.response.error - error to be reported.\r\n * @param {object} options.gumOptions - options passed to GUM.\r\n * @param {Function} onSuccess - callback for success.\r\n * @param {Function} onFailure - callback for failure.\r\n * @param {object} gumOptions - options passed to GUM.\r\n */\r\nfunction onGetStreamResponse(\r\n        options = {\r\n            response: {},\r\n            gumOptions: {}\r\n        },\r\n        onSuccess,\r\n        onFailure) {\r\n    const { streamId, streamType, screenShareAudio, error } = options.response || {};\r\n\r\n    if (streamId) {\r\n        const gumOptions = {\r\n            desktopStream: streamId,\r\n            screenShareAudio,\r\n            ...options.gumOptions\r\n        };\r\n\r\n        gumFunction([ 'desktop' ], gumOptions)\r\n            .then(stream => onSuccess({\r\n                stream,\r\n                sourceId: streamId,\r\n                sourceType: streamType\r\n            }), onFailure);\r\n    } else {\r\n        // As noted in Chrome Desktop Capture API:\r\n        // If user didn't select any source (i.e. canceled the prompt)\r\n        // then the callback is called with an empty streamId.\r\n        if (streamId === '') {\r\n            onFailure(new JitsiTrackError(\r\n                JitsiTrackErrors.SCREENSHARING_USER_CANCELED));\r\n\r\n            return;\r\n        }\r\n\r\n        onFailure(new JitsiTrackError(\r\n            JitsiTrackErrors.SCREENSHARING_GENERIC_ERROR,\r\n            error));\r\n    }\r\n}\r\n\r\nexport default ScreenObtainer;\r\n","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || new Function(\"return this\")();\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","const currentExecutingScript = require('current-executing-script');\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Implements utility functions which facilitate the dealing with scripts such\r\n * as the download and execution of a JavaScript file.\r\n */\r\nconst ScriptUtil = {\r\n    /**\r\n     * Loads a script from a specific source.\r\n     *\r\n     * @param src the source from the which the script is to be (down)loaded\r\n     * @param async true to asynchronously load the script or false to\r\n     * synchronously load the script\r\n     * @param prepend true to schedule the loading of the script as soon as\r\n     * possible or false to schedule the loading of the script at the end of the\r\n     * scripts known at the time\r\n     * @param relativeURL whether we need load the library from url relative\r\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\r\n     * library from different location than the app that is using it\r\n     * @param loadCallback on load callback function\r\n     * @param errorCallback callback to be called on error loading the script\r\n     */\r\n    loadScript(\r\n            src,\r\n            async,\r\n            prepend,\r\n            relativeURL,\r\n            loadCallback,\r\n            errorCallback) {\r\n        const d = document;\r\n        const tagName = 'script';\r\n        const script = d.createElement(tagName);\r\n        const referenceNode = d.getElementsByTagName(tagName)[0];\r\n\r\n        script.async = async;\r\n\r\n        if (relativeURL) {\r\n            // finds the src url of the current loaded script\r\n            // and use it as base of the src supplied argument\r\n            const scriptEl = currentExecutingScript();\r\n\r\n            if (scriptEl) {\r\n                const scriptSrc = scriptEl.src;\r\n                const baseScriptSrc\r\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\r\n\r\n                if (scriptSrc && baseScriptSrc) {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    src = baseScriptSrc + src;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (loadCallback) {\r\n            script.onload = loadCallback;\r\n        }\r\n        if (errorCallback) {\r\n            script.onerror = errorCallback;\r\n        }\r\n\r\n        script.src = src;\r\n        if (prepend) {\r\n            referenceNode.parentNode.insertBefore(script, referenceNode);\r\n        } else {\r\n            referenceNode.parentNode.appendChild(script);\r\n        }\r\n    }\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\nmodule.exports = ScriptUtil;\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Default value of 500 milliseconds for\r\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\r\n *\r\n * @type {number}\r\n */\r\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\r\n\r\n/**\r\n * Default value of 2000 milliseconds for\r\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\r\n *\r\n * @type {number}\r\n */\r\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\r\n\r\n/**\r\n * The time to wait a track to be restored. Track which was out of lastN\r\n * should be inactive and when entering lastN it becomes restoring and when\r\n * data is received from bridge it will become active, but if no data is\r\n * received for some time we set status of that participant connection to\r\n * interrupted.\r\n * @type {number}\r\n */\r\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\r\n\r\n/**\r\n * Participant connection statuses.\r\n *\r\n * @type {{\r\n *      ACTIVE: string,\r\n *      INACTIVE: string,\r\n *      INTERRUPTED: string,\r\n *      RESTORING: string\r\n * }}\r\n */\r\nexport const ParticipantConnectionStatus = {\r\n    /**\r\n     * Status indicating that connection is currently active.\r\n     */\r\n    ACTIVE: 'active',\r\n\r\n    /**\r\n     * Status indicating that connection is currently inactive.\r\n     * Inactive means the connection was stopped on purpose from the bridge,\r\n     * like exiting lastN or adaptivity decided to drop video because of not\r\n     * enough bandwidth.\r\n     */\r\n    INACTIVE: 'inactive',\r\n\r\n    /**\r\n     * Status indicating that connection is currently interrupted.\r\n     */\r\n    INTERRUPTED: 'interrupted',\r\n\r\n    /**\r\n     * Status indicating that connection is currently restoring.\r\n     */\r\n    RESTORING: 'restoring'\r\n};\r\n\r\n/**\r\n * Class is responsible for emitting\r\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\r\n */\r\nexport default class ParticipantConnectionStatusHandler {\r\n    /* eslint-disable max-params*/\r\n    /**\r\n     * Calculates the new {@link ParticipantConnectionStatus} based on\r\n     * the values given for some specific remote user. It is assumed that\r\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\r\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\r\n     * data from the user for the last 15 seconds.\r\n     * @param {boolean} isInLastN indicates whether the user is in the last N\r\n     * set. When set to false it means that JVB is not sending any video for\r\n     * the user.\r\n     * @param {boolean} isRestoringTimedout if true it means that the user has\r\n     * been outside of last N too long to be considered\r\n     * {@link ParticipantConnectionStatus.RESTORING}.\r\n     * @param {boolean} isVideoMuted true if the user is video muted and we\r\n     * should not expect to receive any video.\r\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\r\n     * frozen detection then it will be set to true when the video track is\r\n     * frozen. If the current browser does not support frozen detection the it's\r\n     * always false.\r\n     * @return {ParticipantConnectionStatus} the new connection status for\r\n     * the user for whom the values above were provided.\r\n     * @private\r\n     */\r\n    static _getNewStateForJvbMode(\r\n            isConnectionActiveByJvb,\r\n            isInLastN,\r\n            isRestoringTimedout,\r\n            isVideoMuted,\r\n            isVideoTrackFrozen) {\r\n        if (!isConnectionActiveByJvb) {\r\n            // when there is a connection problem signaled from jvb\r\n            // it means no media was flowing for at least 15secs, so both audio\r\n            // and video are most likely interrupted\r\n            return ParticipantConnectionStatus.INTERRUPTED;\r\n        } else if (isVideoMuted) {\r\n            // If the connection is active according to JVB and the user is\r\n            // video muted there is no way for the connection to be inactive,\r\n            // because the detection logic below only makes sense for video.\r\n            return ParticipantConnectionStatus.ACTIVE;\r\n        }\r\n\r\n        // Logic when isVideoTrackFrozen is supported\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n            if (!isVideoTrackFrozen) {\r\n                // If the video is playing we're good\r\n                return ParticipantConnectionStatus.ACTIVE;\r\n            } else if (isInLastN) {\r\n                return isRestoringTimedout\r\n                    ? ParticipantConnectionStatus.INTERRUPTED\r\n                    : ParticipantConnectionStatus.RESTORING;\r\n            }\r\n\r\n            return ParticipantConnectionStatus.INACTIVE;\r\n        }\r\n\r\n        // Because this browser is incapable of detecting frozen video we must\r\n        // rely on the lastN value\r\n        return isInLastN\r\n            ? ParticipantConnectionStatus.ACTIVE\r\n            : ParticipantConnectionStatus.INACTIVE;\r\n    }\r\n\r\n    /* eslint-enable max-params*/\r\n\r\n    /**\r\n     * In P2P mode we don't care about any values coming from the JVB and\r\n     * the connection status can be only active or interrupted.\r\n     * @param {boolean} isVideoMuted the user if video muted\r\n     * @param {boolean} isVideoTrackFrozen true if the video track for\r\n     * the remote user is currently frozen. If the current browser does not\r\n     * support video frozen detection then it's always false.\r\n     * @return {ParticipantConnectionStatus}\r\n     * @private\r\n     */\r\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\r\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\r\n            // There's no way to detect problems in P2P when there's no video\r\n            // track frozen detection...\r\n            return ParticipantConnectionStatus.ACTIVE;\r\n        }\r\n\r\n        return isVideoMuted || !isVideoTrackFrozen\r\n            ? ParticipantConnectionStatus.ACTIVE\r\n            : ParticipantConnectionStatus.INTERRUPTED;\r\n    }\r\n\r\n    /**\r\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\r\n     *\r\n     * @constructor\r\n     * @param {RTC} rtc the RTC service instance\r\n     * @param {JitsiConference} conference parent conference instance\r\n     * @param {Object} options\r\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\r\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\r\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\r\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\r\n     */\r\n    constructor(rtc, conference, options) {\r\n        this.rtc = rtc;\r\n        this.conference = conference;\r\n\r\n        /**\r\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\r\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\r\n         * window.setTimeout.\r\n         * @type {Object.<string, number>}\r\n         */\r\n        this.trackTimers = {};\r\n\r\n        /**\r\n         * This map holds the endpoint connection status received from the JVB\r\n         * (as it might be different than the one stored in JitsiParticipant).\r\n         * Required for getting back in sync when remote video track is removed.\r\n         * @type {Object.<string, boolean>}\r\n         */\r\n        this.connStatusFromJvb = { };\r\n\r\n        /**\r\n         * If video track frozen detection through RTC mute event is supported,\r\n         * we wait some time until video track is considered frozen. But because\r\n         * when the user falls out of last N it is expected for the video to\r\n         * freeze this timeout must be significantly reduced in \"out of last N\"\r\n         * case.\r\n         *\r\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\r\n         * user is not in last N.\r\n         * @type {number}\r\n         */\r\n        this.outOfLastNTimeout\r\n            = typeof options.outOfLastNTimeout === 'number'\r\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\r\n\r\n        /**\r\n         * How long we're going to wait after the RTC video track muted event\r\n         * for the corresponding signalling mute event, before the connection\r\n         * interrupted is fired. The default value is\r\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\r\n         *\r\n         * @type {number} amount of time in milliseconds\r\n         */\r\n        this.rtcMuteTimeout\r\n            = typeof options.rtcMuteTimeout === 'number'\r\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\r\n\r\n        /**\r\n         * This map holds a timestamp indicating  when participant's video track\r\n         * was RTC muted (it is assumed that each participant can have only 1\r\n         * video track at a time). The purpose of storing the timestamp is to\r\n         * avoid the transition to disconnected status in case of legitimate\r\n         * video mute operation where the signalling video muted event can\r\n         * arrive shortly after RTC muted event.\r\n         *\r\n         * The key is participant's ID which is the same as endpoint id in\r\n         * the Colibri conference allocated on the JVB.\r\n         *\r\n         * The value is a timestamp measured in milliseconds obtained with\r\n         * <tt>Date.now()</tt>.\r\n         *\r\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\r\n         *       implemented in JitsiLocalTrack by extending the event to\r\n         *       the remote track and allowing to set different timeout for\r\n         *       local and remote tracks.\r\n         *\r\n         * @type {Object.<string, number>}\r\n         */\r\n        this.rtcMutedTimestamp = { };\r\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\r\n\r\n        /**\r\n         * This map holds the timestamps indicating when participant's video\r\n         * entered lastN set. Participants entering lastN will have connection\r\n         * status restoring and when we start receiving video will become\r\n         * active, but if video is not received for certain time\r\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\r\n         * will become interrupted.\r\n         *\r\n         * @type {Map<string, number>}\r\n         */\r\n        this.enteredLastNTimestamp = new Map();\r\n\r\n        /**\r\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\r\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\r\n         * scheduled using window.setTimeout.\r\n         *\r\n         * @type {Map<string, number>}\r\n         */\r\n        this.restoringTimers = new Map();\r\n\r\n        /**\r\n         * A map that holds the current connection status (along with all the internal events that happen\r\n         * while in that state).\r\n         *\r\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\r\n         */\r\n        this.connectionStatusMap = new Map();\r\n    }\r\n\r\n    /**\r\n     * Gets the video frozen timeout for given user.\r\n     * @param {string} id endpoint/participant ID\r\n     * @return {number} how long are we going to wait since RTC video muted\r\n     * even, before a video track is considered frozen.\r\n     * @private\r\n     */\r\n    _getVideoFrozenTimeout(id) {\r\n        return this.rtc.isInLastN(id)\r\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\r\n    }\r\n\r\n    /**\r\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\r\n     * listeners.\r\n     */\r\n    init() {\r\n\r\n        this._onEndpointConnStatusChanged\r\n            = this.onEndpointConnStatusChanged.bind(this);\r\n\r\n        this.rtc.addListener(\r\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n            this._onEndpointConnStatusChanged);\r\n\r\n        // Handles P2P status changes\r\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\r\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\r\n\r\n        // Used to send analytics events for the participant that left the call.\r\n        this._onUserLeft = this.onUserLeft.bind(this);\r\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\r\n        // events for video type tracks when they stop receiving data which is\r\n        // often a sign that remote user is having connectivity issues\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n\r\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\r\n            this.rtc.addListener(\r\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\r\n\r\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\r\n            this.rtc.addListener(\r\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\r\n\r\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\r\n            // event handlers\r\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\r\n            this.conference.on(\r\n                JitsiConferenceEvents.TRACK_ADDED,\r\n                this._onRemoteTrackAdded);\r\n\r\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\r\n            this.conference.on(\r\n                JitsiConferenceEvents.TRACK_REMOVED,\r\n                this._onRemoteTrackRemoved);\r\n\r\n            // Listened which will be bound to JitsiRemoteTrack to listen for\r\n            // signalling mute/unmute events.\r\n            this._onSignallingMuteChanged\r\n                = this.onSignallingMuteChanged.bind(this);\r\n\r\n            // Used to send an analytics event when the video type changes.\r\n            this._onTrackVideoTypeChanged\r\n                = this.onTrackVideoTypeChanged.bind(this);\r\n        }\r\n\r\n        this._onLastNChanged = this._onLastNChanged.bind(this);\r\n        this.conference.on(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            this._onLastNChanged);\r\n\r\n        this._onLastNValueChanged\r\n            = this.refreshConnectionStatusForAll.bind(this);\r\n        this.rtc.on(\r\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\r\n    }\r\n\r\n    /**\r\n     * Removes all event listeners and disposes of all resources held by this\r\n     * instance.\r\n     */\r\n    dispose() {\r\n\r\n        this.rtc.removeListener(\r\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n            this._onEndpointConnStatusChanged);\r\n\r\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\r\n            this.rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_MUTE,\r\n                this._onTrackRtcMuted);\r\n            this.rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_UNMUTE,\r\n                this._onTrackRtcUnmuted);\r\n\r\n            this.conference.off(\r\n                JitsiConferenceEvents.TRACK_ADDED,\r\n                this._onRemoteTrackAdded);\r\n            this.conference.off(\r\n                JitsiConferenceEvents.TRACK_REMOVED,\r\n                this._onRemoteTrackRemoved);\r\n        }\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\r\n            this._onLastNChanged);\r\n\r\n        this.rtc.removeListener(\r\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n        const participantIds = Object.keys(this.trackTimers);\r\n\r\n        for (const participantId of participantIds) {\r\n            this.clearTimeout(participantId);\r\n            this.clearRtcMutedTimestamp(participantId);\r\n        }\r\n\r\n        for (const id in this.connectionStatusMap) {\r\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\r\n                this.onUserLeft(id);\r\n            }\r\n        }\r\n\r\n        // Clear RTC connection status cache\r\n        this.connStatusFromJvb = {};\r\n    }\r\n\r\n    /**\r\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\r\n     * notification over the data channel from the bridge about endpoint's\r\n     * connection status update.\r\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\r\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\r\n     */\r\n    onEndpointConnStatusChanged(endpointId, isActive) {\r\n\r\n        logger.debug(\r\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\r\n                endpointId}: ${isActive}`);\r\n\r\n        // Filter out events for the local JID for now\r\n        if (endpointId !== this.conference.myUserId()) {\r\n            // Store the status received over the data channels\r\n            this.connStatusFromJvb[endpointId] = isActive;\r\n            this.figureOutConnectionStatus(endpointId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Changes connection status.\r\n     * @param {JitsiParticipant} participant\r\n     * @param newStatus\r\n     */\r\n    _changeConnectionStatus(participant, newStatus) {\r\n        if (participant.getConnectionStatus() !== newStatus) {\r\n\r\n            const endpointId = participant.getId();\r\n\r\n            participant._setConnectionStatus(newStatus);\r\n\r\n            logger.debug(\r\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\r\n                    newStatus}`);\r\n\r\n            // Log the event on CallStats\r\n            Statistics.sendLog(\r\n                JSON.stringify({\r\n                    id: 'peer.conn.status',\r\n                    participant: endpointId,\r\n                    status: newStatus\r\n                }));\r\n\r\n\r\n            this.conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\r\n                endpointId, newStatus);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the postponed \"connection interrupted\" event which was previously\r\n     * scheduled as a timeout on RTC 'onmute' event.\r\n     *\r\n     * @param {string} participantId - The participant for which the \"connection\r\n     * interrupted\" timeout was scheduled.\r\n     */\r\n    clearTimeout(participantId) {\r\n        if (this.trackTimers[participantId]) {\r\n            window.clearTimeout(this.trackTimers[participantId]);\r\n            this.trackTimers[participantId] = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the timestamp of the RTC muted event for participant's video track\r\n     * @param {string} participantId the id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     */\r\n    clearRtcMutedTimestamp(participantId) {\r\n        this.rtcMutedTimestamp[participantId] = null;\r\n    }\r\n\r\n    /**\r\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\r\n     * a new one is added to the conference.\r\n     *\r\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\r\n     * the conference.\r\n     */\r\n    onRemoteTrackAdded(remoteTrack) {\r\n        if (!remoteTrack.isLocal()\r\n                && remoteTrack.getType() === MediaType.VIDEO) {\r\n\r\n            logger.debug(\r\n                `Detector on remote track added for: ${\r\n                    remoteTrack.getParticipantId()}`);\r\n\r\n            remoteTrack.on(\r\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n                this._onSignallingMuteChanged);\r\n            remoteTrack.on(\r\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\r\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes all event listeners bound to the remote video track and clears\r\n     * any related timeouts.\r\n     *\r\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\r\n     * removed from the conference.\r\n     */\r\n    onRemoteTrackRemoved(remoteTrack) {\r\n        if (!remoteTrack.isLocal()\r\n                && remoteTrack.getType() === MediaType.VIDEO) {\r\n\r\n            const endpointId = remoteTrack.getParticipantId();\r\n\r\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\r\n\r\n            remoteTrack.off(\r\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n                this._onSignallingMuteChanged);\r\n\r\n            this.clearTimeout(endpointId);\r\n            this.clearRtcMutedTimestamp(endpointId);\r\n\r\n            this.figureOutConnectionStatus(endpointId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if given participant's video is considered frozen.\r\n     * @param {JitsiParticipant} participant - The participant.\r\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\r\n     * participant or <tt>false</tt> when it's either not considered frozen\r\n     * (yet) or if freeze detection is not supported by the current browser.\r\n     *\r\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\r\n     *       implemented in JitsiLocalTrack by extending the event to\r\n     *       the remote track and allowing to set different timeout for\r\n     *       local and remote tracks.\r\n     *\r\n     */\r\n    isVideoTrackFrozen(participant) {\r\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\r\n            return false;\r\n        }\r\n\r\n        const id = participant.getId();\r\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\r\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\r\n        const timeout = this._getVideoFrozenTimeout(id);\r\n\r\n        return hasAnyVideoRTCMuted\r\n            && typeof rtcMutedTimestamp === 'number'\r\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\r\n    }\r\n\r\n    /**\r\n     * Goes over every participant and updates connectivity status.\r\n     * Should be called when a parameter which affects all of the participants\r\n     * is changed (P2P for example).\r\n     */\r\n    refreshConnectionStatusForAll() {\r\n        const participants = this.conference.getParticipants();\r\n\r\n        for (const participant of participants) {\r\n            this.figureOutConnectionStatus(participant.getId());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Figures out (and updates) the current connectivity status for\r\n     * the participant identified by the given id.\r\n     *\r\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\r\n     */\r\n    figureOutConnectionStatus(id) {\r\n        const participant = this.conference.getParticipantById(id);\r\n\r\n        if (!participant) {\r\n            // Probably the participant is no longer in the conference\r\n            // (at the time of writing this code, participant is\r\n            // detached from the conference and TRACK_REMOVED events are\r\n            // fired),\r\n            // so we don't care, but let's print a log message for debugging purposes.\r\n            logger.debug(`figure out conn status - no participant for: ${id}`);\r\n\r\n            return;\r\n        }\r\n\r\n        const inP2PMode = this.conference.isP2PActive();\r\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\r\n        const audioOnlyMode = this.rtc.getLastN() === 0;\r\n\r\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\r\n        // any detection based on video playback or the last N.\r\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\r\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\r\n        const isInLastN = this.rtc.isInLastN(id);\r\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\r\n\r\n        if (typeof isConnActiveByJvb !== 'boolean') {\r\n            // If no status was received from the JVB it means that it's active\r\n            // (the bridge does not send notification unless there is a problem)\r\n            logger.debug('Assuming connection active by JVB - no notification');\r\n            isConnActiveByJvb = true;\r\n        }\r\n\r\n        const newState\r\n            = inP2PMode\r\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\r\n                    isVideoMuted,\r\n                    isVideoTrackFrozen)\r\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\r\n                    isConnActiveByJvb,\r\n                    isInLastN,\r\n                    isRestoringTimedOut,\r\n                    isVideoMuted,\r\n                    isVideoTrackFrozen);\r\n\r\n        // if the new state is not restoring clear timers and timestamps\r\n        // that we use to track the restoring state\r\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\r\n            this._clearRestoringTimer(id);\r\n        }\r\n\r\n        logger.debug(\r\n            `Figure out conn status for ${id}, is video muted: ${\r\n                isVideoMuted} is active(jvb): ${\r\n                isConnActiveByJvb} video track frozen: ${\r\n                isVideoTrackFrozen} p2p mode: ${\r\n                inP2PMode} is in last N: ${\r\n                isInLastN} currentStatus => newStatus: ${\r\n                participant.getConnectionStatus()} => ${newState}`);\r\n\r\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\r\n\r\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\r\n        // since the last time this code block run).\r\n        if (!('p2p' in oldConnectionStatus)\r\n            || !('connectionStatus' in oldConnectionStatus)\r\n            || oldConnectionStatus.p2p !== inP2PMode\r\n            || oldConnectionStatus.connectionStatus !== newState) {\r\n\r\n            const nowMs = Date.now();\r\n\r\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\r\n\r\n            this.connectionStatusMap[id] = {\r\n                ...oldConnectionStatus,\r\n                connectionStatus: newState,\r\n                p2p: inP2PMode,\r\n                startedMs: nowMs\r\n            };\r\n\r\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\r\n            // video type is not in oldConnectionStatus.\r\n            if (!('videoType' in this.connectionStatusMap[id])) {\r\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n\r\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\r\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\r\n                }\r\n            }\r\n        }\r\n        this._changeConnectionStatus(participant, newState);\r\n    }\r\n\r\n    /**\r\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\r\n     * in the INTERRUPTED state) and sends a participant connection status event.\r\n     * @param {string} id - The jid of the participant.\r\n     * @param {Number} nowMs - The current time (in millis).\r\n     * @returns {void}\r\n     */\r\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\r\n        const participantConnectionStatus = this.connectionStatusMap[id];\r\n\r\n        if (participantConnectionStatus\r\n            && 'startedMs' in participantConnectionStatus\r\n            && 'videoType' in participantConnectionStatus\r\n            && 'connectionStatus' in participantConnectionStatus\r\n            && 'p2p' in participantConnectionStatus) {\r\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\r\n            Statistics.sendAnalytics(\r\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * On change in Last N set check all leaving and entering participants to\r\n     * change their corresponding statuses.\r\n     *\r\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\r\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\r\n     * @private\r\n     */\r\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\r\n        const now = Date.now();\r\n\r\n        logger.debug(\r\n            'leaving/entering lastN', leavingLastN, enteringLastN, now);\r\n\r\n        for (const id of leavingLastN) {\r\n            this.enteredLastNTimestamp.delete(id);\r\n            this._clearRestoringTimer(id);\r\n            this.figureOutConnectionStatus(id);\r\n        }\r\n        for (const id of enteringLastN) {\r\n            // store the timestamp this id is entering lastN\r\n            this.enteredLastNTimestamp.set(id, now);\r\n            this.figureOutConnectionStatus(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clears the restoring timer for participant's video track and the\r\n     * timestamp for entering lastN.\r\n     *\r\n     * @param {string} participantId - The id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     */\r\n    _clearRestoringTimer(participantId) {\r\n        const rTimer = this.restoringTimers.get(participantId);\r\n\r\n        if (rTimer) {\r\n            clearTimeout(rTimer);\r\n            this.restoringTimers.delete(participantId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks whether a track had stayed enough in restoring state, compares\r\n     * current time and the time the track entered in lastN. If it hasn't\r\n     * timedout and there is no timer added, add new timer in order to give it\r\n     * more time to become active or mark it as interrupted on next check.\r\n     *\r\n     * @param {string} participantId - The id of the conference participant which\r\n     * is the same as the Colibri endpoint ID of the video channel allocated for\r\n     * the user on the videobridge.\r\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\r\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\r\n     * set its status to interrupted.\r\n     * @private\r\n     */\r\n    _isRestoringTimedout(participantId) {\r\n        const enteredLastNTimestamp\r\n            = this.enteredLastNTimestamp.get(participantId);\r\n\r\n        if (enteredLastNTimestamp\r\n            && (Date.now() - enteredLastNTimestamp)\r\n                >= DEFAULT_RESTORING_TIMEOUT) {\r\n            return true;\r\n        }\r\n\r\n        // still haven't reached timeout, if there is no timer scheduled,\r\n        // schedule one so we can track the restoring state and change it after\r\n        // reaching the timeout\r\n        const rTimer = this.restoringTimers.get(participantId);\r\n\r\n        if (!rTimer) {\r\n            this.restoringTimers.set(participantId, setTimeout(\r\n                () => this.figureOutConnectionStatus(participantId),\r\n                DEFAULT_RESTORING_TIMEOUT));\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sends a last/final participant connection status event for the participant that left the conference.\r\n     * @param {string} id - The id of the participant that left the conference.\r\n     * @returns {void}\r\n     */\r\n    onUserLeft(id) {\r\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\r\n        delete this.connectionStatusMap[id];\r\n    }\r\n\r\n    /**\r\n     * Handles RTC 'onmute' event for the video track.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\r\n     * will be processed.\r\n     */\r\n    onTrackRtcMuted(track) {\r\n        const participantId = track.getParticipantId();\r\n        const participant = this.conference.getParticipantById(participantId);\r\n\r\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\r\n        if (!participant) {\r\n            logger.error(`No participant for id: ${participantId}`);\r\n\r\n            return;\r\n        }\r\n        this.rtcMutedTimestamp[participantId] = Date.now();\r\n        if (!participant.isVideoMuted()) {\r\n            // If the user is not muted according to the signalling we'll give\r\n            // it some time, before the connection interrupted event is\r\n            // triggered.\r\n            this.clearTimeout(participantId);\r\n\r\n            // The timeout is reduced when user is not in the last N\r\n            const timeout = this._getVideoFrozenTimeout(participantId);\r\n\r\n            this.trackTimers[participantId] = window.setTimeout(() => {\r\n                logger.debug(\r\n                    `Set RTC mute timeout for: ${participantId}\\\r\n                     of ${timeout} ms`);\r\n                this.clearTimeout(participantId);\r\n                this.figureOutConnectionStatus(participantId);\r\n            }, timeout);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles RTC 'onunmute' event for the video track.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\r\n     * event will be processed.\r\n     */\r\n    onTrackRtcUnmuted(track) {\r\n        const participantId = track.getParticipantId();\r\n\r\n        logger.debug(\r\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\r\n\r\n        this.clearTimeout(participantId);\r\n        this.clearRtcMutedTimestamp(participantId);\r\n\r\n        this.figureOutConnectionStatus(participantId);\r\n    }\r\n\r\n    /**\r\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\r\n     *\r\n     * @param {JitsiRemoteTrack} track - The remote video track for which\r\n     * the signalling mute/unmute event will be processed.\r\n     */\r\n    onSignallingMuteChanged(track) {\r\n        const participantId = track.getParticipantId();\r\n\r\n        logger.debug(\r\n            `Detector on track signalling mute changed: ${participantId}`,\r\n            track.isMuted());\r\n\r\n        this.figureOutConnectionStatus(participantId);\r\n    }\r\n\r\n    /**\r\n     * Sends a participant connection status event as a result of the video type\r\n     * changing.\r\n     * @param {JitsiRemoteTrack} track - The track.\r\n     * @param {VideoType} type - The video type.\r\n     * @returns {void}\r\n     */\r\n    onTrackVideoTypeChanged(track, type) {\r\n        const id = track.getParticipantId();\r\n        const nowMs = Date.now();\r\n\r\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\r\n\r\n        this.connectionStatusMap[id] = {\r\n            ...this.connectionStatusMap[id] || {},\r\n            videoType: type,\r\n            startedMs: nowMs\r\n        };\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nexport const NETWORK_INFO_EVENT = 'NETWORK_INFO_CHANGED';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Module provides information about the current status of the internet\r\n * connection. Lib-jitsi-meet doesn't have any logic for detecting internet\r\n * online/offline, but rather it relies on the information supplied by the app\r\n * that uses it. By default the online state is assumed and the lib acts as if\r\n * it was connected. See {@link JitsiMeetJS.setNetworkInfo}.\r\n */\r\nexport class NetworkInfo extends Listenable {\r\n    /**\r\n     * Creates new {@link NetworkInfo} instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n        this._current = {\r\n            isOnline: true\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Updates the network info state.\r\n     * @param {boolean} isOnline - {@code true} if internet is online or {@code false} otherwise.\r\n     */\r\n    updateNetworkInfo({ isOnline }) {\r\n        logger.debug('updateNetworkInfo', { isOnline });\r\n        this._current = {\r\n            isOnline: isOnline === true\r\n        };\r\n        this.eventEmitter.emit(NETWORK_INFO_EVENT, this._current);\r\n    }\r\n\r\n    /**\r\n     * Returns the online/offline internet status. By default the value is {@code true} and changes only if\r\n     * the lib's user wires the state through {@link JitsiMeetJS.setNetworkInfo} like the jitsi-meet does. Because of\r\n     * that any logic should still assume that the internet may be offline and should handle the failure gracefully.\r\n     * It's only a good hint in the other way around: to pause internet operations until it comes back online.\r\n     * @returns {boolean}\r\n     */\r\n    isOnline() {\r\n        return this._current.isOnline === true;\r\n    }\r\n}\r\n\r\nconst networkInfo = new NetworkInfo();\r\n\r\nexport default networkInfo;\r\n","/* eslint-env node */\r\n'use strict';\r\n\r\n// SDP helpers.\r\nvar SDPUtils = {};\r\n\r\n// Generate an alphanumeric identifier for cname or mids.\r\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\r\nSDPUtils.generateIdentifier = function() {\r\n  return Math.random().toString(36).substr(2, 10);\r\n};\r\n\r\n// The RTCP CNAME used by all peerconnections from the same JS.\r\nSDPUtils.localCName = SDPUtils.generateIdentifier();\r\n\r\n// Splits SDP into lines, dealing with both CRLF and LF.\r\nSDPUtils.splitLines = function(blob) {\r\n  return blob.trim().split('\\n').map(function(line) {\r\n    return line.trim();\r\n  });\r\n};\r\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\r\nSDPUtils.splitSections = function(blob) {\r\n  var parts = blob.split('\\nm=');\r\n  return parts.map(function(part, index) {\r\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\r\n  });\r\n};\r\n\r\n// returns the session description.\r\nSDPUtils.getDescription = function(blob) {\r\n  var sections = SDPUtils.splitSections(blob);\r\n  return sections && sections[0];\r\n};\r\n\r\n// returns the individual media sections.\r\nSDPUtils.getMediaSections = function(blob) {\r\n  var sections = SDPUtils.splitSections(blob);\r\n  sections.shift();\r\n  return sections;\r\n};\r\n\r\n// Returns lines that start with a certain prefix.\r\nSDPUtils.matchPrefix = function(blob, prefix) {\r\n  return SDPUtils.splitLines(blob).filter(function(line) {\r\n    return line.indexOf(prefix) === 0;\r\n  });\r\n};\r\n\r\n// Parses an ICE candidate line. Sample input:\r\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\r\n// rport 55996\"\r\nSDPUtils.parseCandidate = function(line) {\r\n  var parts;\r\n  // Parse both variants.\r\n  if (line.indexOf('a=candidate:') === 0) {\r\n    parts = line.substring(12).split(' ');\r\n  } else {\r\n    parts = line.substring(10).split(' ');\r\n  }\r\n\r\n  var candidate = {\r\n    foundation: parts[0],\r\n    component: parseInt(parts[1], 10),\r\n    protocol: parts[2].toLowerCase(),\r\n    priority: parseInt(parts[3], 10),\r\n    ip: parts[4],\r\n    address: parts[4], // address is an alias for ip.\r\n    port: parseInt(parts[5], 10),\r\n    // skip parts[6] == 'typ'\r\n    type: parts[7]\r\n  };\r\n\r\n  for (var i = 8; i < parts.length; i += 2) {\r\n    switch (parts[i]) {\r\n      case 'raddr':\r\n        candidate.relatedAddress = parts[i + 1];\r\n        break;\r\n      case 'rport':\r\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\r\n        break;\r\n      case 'tcptype':\r\n        candidate.tcpType = parts[i + 1];\r\n        break;\r\n      case 'ufrag':\r\n        candidate.ufrag = parts[i + 1]; // for backward compability.\r\n        candidate.usernameFragment = parts[i + 1];\r\n        break;\r\n      default: // extension handling, in particular ufrag\r\n        candidate[parts[i]] = parts[i + 1];\r\n        break;\r\n    }\r\n  }\r\n  return candidate;\r\n};\r\n\r\n// Translates a candidate object into SDP candidate attribute.\r\nSDPUtils.writeCandidate = function(candidate) {\r\n  var sdp = [];\r\n  sdp.push(candidate.foundation);\r\n  sdp.push(candidate.component);\r\n  sdp.push(candidate.protocol.toUpperCase());\r\n  sdp.push(candidate.priority);\r\n  sdp.push(candidate.address || candidate.ip);\r\n  sdp.push(candidate.port);\r\n\r\n  var type = candidate.type;\r\n  sdp.push('typ');\r\n  sdp.push(type);\r\n  if (type !== 'host' && candidate.relatedAddress &&\r\n      candidate.relatedPort) {\r\n    sdp.push('raddr');\r\n    sdp.push(candidate.relatedAddress);\r\n    sdp.push('rport');\r\n    sdp.push(candidate.relatedPort);\r\n  }\r\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\r\n    sdp.push('tcptype');\r\n    sdp.push(candidate.tcpType);\r\n  }\r\n  if (candidate.usernameFragment || candidate.ufrag) {\r\n    sdp.push('ufrag');\r\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\r\n  }\r\n  return 'candidate:' + sdp.join(' ');\r\n};\r\n\r\n// Parses an ice-options line, returns an array of option tags.\r\n// a=ice-options:foo bar\r\nSDPUtils.parseIceOptions = function(line) {\r\n  return line.substr(14).split(' ');\r\n};\r\n\r\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\r\n// a=rtpmap:111 opus/48000/2\r\nSDPUtils.parseRtpMap = function(line) {\r\n  var parts = line.substr(9).split(' ');\r\n  var parsed = {\r\n    payloadType: parseInt(parts.shift(), 10) // was: id\r\n  };\r\n\r\n  parts = parts[0].split('/');\r\n\r\n  parsed.name = parts[0];\r\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\r\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\r\n  // legacy alias, got renamed back to channels in ORTC.\r\n  parsed.numChannels = parsed.channels;\r\n  return parsed;\r\n};\r\n\r\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\r\n// RTCRtpCodecParameters.\r\nSDPUtils.writeRtpMap = function(codec) {\r\n  var pt = codec.payloadType;\r\n  if (codec.preferredPayloadType !== undefined) {\r\n    pt = codec.preferredPayloadType;\r\n  }\r\n  var channels = codec.channels || codec.numChannels || 1;\r\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\r\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\r\n};\r\n\r\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\r\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\r\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\r\nSDPUtils.parseExtmap = function(line) {\r\n  var parts = line.substr(9).split(' ');\r\n  return {\r\n    id: parseInt(parts[0], 10),\r\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\r\n    uri: parts[1]\r\n  };\r\n};\r\n\r\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\r\n// RTCRtpHeaderExtension.\r\nSDPUtils.writeExtmap = function(headerExtension) {\r\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\r\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\r\n        ? '/' + headerExtension.direction\r\n        : '') +\r\n      ' ' + headerExtension.uri + '\\r\\n';\r\n};\r\n\r\n// Parses an ftmp line, returns dictionary. Sample input:\r\n// a=fmtp:96 vbr=on;cng=on\r\n// Also deals with vbr=on; cng=on\r\nSDPUtils.parseFmtp = function(line) {\r\n  var parsed = {};\r\n  var kv;\r\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\r\n  for (var j = 0; j < parts.length; j++) {\r\n    kv = parts[j].trim().split('=');\r\n    parsed[kv[0].trim()] = kv[1];\r\n  }\r\n  return parsed;\r\n};\r\n\r\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\r\nSDPUtils.writeFmtp = function(codec) {\r\n  var line = '';\r\n  var pt = codec.payloadType;\r\n  if (codec.preferredPayloadType !== undefined) {\r\n    pt = codec.preferredPayloadType;\r\n  }\r\n  if (codec.parameters && Object.keys(codec.parameters).length) {\r\n    var params = [];\r\n    Object.keys(codec.parameters).forEach(function(param) {\r\n      if (codec.parameters[param]) {\r\n        params.push(param + '=' + codec.parameters[param]);\r\n      } else {\r\n        params.push(param);\r\n      }\r\n    });\r\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\r\n  }\r\n  return line;\r\n};\r\n\r\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\r\n// a=rtcp-fb:98 nack rpsi\r\nSDPUtils.parseRtcpFb = function(line) {\r\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\r\n  return {\r\n    type: parts.shift(),\r\n    parameter: parts.join(' ')\r\n  };\r\n};\r\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\r\nSDPUtils.writeRtcpFb = function(codec) {\r\n  var lines = '';\r\n  var pt = codec.payloadType;\r\n  if (codec.preferredPayloadType !== undefined) {\r\n    pt = codec.preferredPayloadType;\r\n  }\r\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\r\n    // FIXME: special handling for trr-int?\r\n    codec.rtcpFeedback.forEach(function(fb) {\r\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\r\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\r\n          '\\r\\n';\r\n    });\r\n  }\r\n  return lines;\r\n};\r\n\r\n// Parses an RFC 5576 ssrc media attribute. Sample input:\r\n// a=ssrc:3735928559 cname:something\r\nSDPUtils.parseSsrcMedia = function(line) {\r\n  var sp = line.indexOf(' ');\r\n  var parts = {\r\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\r\n  };\r\n  var colon = line.indexOf(':', sp);\r\n  if (colon > -1) {\r\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\r\n    parts.value = line.substr(colon + 1);\r\n  } else {\r\n    parts.attribute = line.substr(sp + 1);\r\n  }\r\n  return parts;\r\n};\r\n\r\nSDPUtils.parseSsrcGroup = function(line) {\r\n  var parts = line.substr(13).split(' ');\r\n  return {\r\n    semantics: parts.shift(),\r\n    ssrcs: parts.map(function(ssrc) {\r\n      return parseInt(ssrc, 10);\r\n    })\r\n  };\r\n};\r\n\r\n// Extracts the MID (RFC 5888) from a media section.\r\n// returns the MID or undefined if no mid line was found.\r\nSDPUtils.getMid = function(mediaSection) {\r\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\r\n  if (mid) {\r\n    return mid.substr(6);\r\n  }\r\n};\r\n\r\nSDPUtils.parseFingerprint = function(line) {\r\n  var parts = line.substr(14).split(' ');\r\n  return {\r\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\r\n    value: parts[1]\r\n  };\r\n};\r\n\r\n// Extracts DTLS parameters from SDP media section or sessionpart.\r\n// FIXME: for consistency with other functions this should only\r\n//   get the fingerprint line as input. See also getIceParameters.\r\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\r\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=fingerprint:');\r\n  // Note: a=setup line is ignored since we use the 'auto' role.\r\n  // Note2: 'algorithm' is not case sensitive except in Edge.\r\n  return {\r\n    role: 'auto',\r\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\r\n  };\r\n};\r\n\r\n// Serializes DTLS parameters to SDP.\r\nSDPUtils.writeDtlsParameters = function(params, setupType) {\r\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\r\n  params.fingerprints.forEach(function(fp) {\r\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\r\n  });\r\n  return sdp;\r\n};\r\n\r\n// Parses a=crypto lines into\r\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\r\nSDPUtils.parseCryptoLine = function(line) {\r\n  var parts = line.substr(9).split(' ');\r\n  return {\r\n    tag: parseInt(parts[0], 10),\r\n    cryptoSuite: parts[1],\r\n    keyParams: parts[2],\r\n    sessionParams: parts.slice(3),\r\n  };\r\n};\r\n\r\nSDPUtils.writeCryptoLine = function(parameters) {\r\n  return 'a=crypto:' + parameters.tag + ' ' +\r\n    parameters.cryptoSuite + ' ' +\r\n    (typeof parameters.keyParams === 'object'\r\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\r\n      : parameters.keyParams) +\r\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\r\n    '\\r\\n';\r\n};\r\n\r\n// Parses the crypto key parameters into\r\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\r\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\r\n  if (keyParams.indexOf('inline:') !== 0) {\r\n    return null;\r\n  }\r\n  var parts = keyParams.substr(7).split('|');\r\n  return {\r\n    keyMethod: 'inline',\r\n    keySalt: parts[0],\r\n    lifeTime: parts[1],\r\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\r\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\r\n  };\r\n};\r\n\r\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\r\n  return keyParams.keyMethod + ':'\r\n    + keyParams.keySalt +\r\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\r\n    (keyParams.mkiValue && keyParams.mkiLength\r\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\r\n      : '');\r\n};\r\n\r\n// Extracts all SDES paramters.\r\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\r\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=crypto:');\r\n  return lines.map(SDPUtils.parseCryptoLine);\r\n};\r\n\r\n// Parses ICE information from SDP media section or sessionpart.\r\n// FIXME: for consistency with other functions this should only\r\n//   get the ice-ufrag and ice-pwd lines as input.\r\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\r\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=ice-ufrag:')[0];\r\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\r\n    'a=ice-pwd:')[0];\r\n  if (!(ufrag && pwd)) {\r\n    return null;\r\n  }\r\n  return {\r\n    usernameFragment: ufrag.substr(12),\r\n    password: pwd.substr(10),\r\n  };\r\n};\r\n\r\n// Serializes ICE parameters to SDP.\r\nSDPUtils.writeIceParameters = function(params) {\r\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\r\n      'a=ice-pwd:' + params.password + '\\r\\n';\r\n};\r\n\r\n// Parses the SDP media section and returns RTCRtpParameters.\r\nSDPUtils.parseRtpParameters = function(mediaSection) {\r\n  var description = {\r\n    codecs: [],\r\n    headerExtensions: [],\r\n    fecMechanisms: [],\r\n    rtcp: []\r\n  };\r\n  var lines = SDPUtils.splitLines(mediaSection);\r\n  var mline = lines[0].split(' ');\r\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\r\n    var pt = mline[i];\r\n    var rtpmapline = SDPUtils.matchPrefix(\r\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\r\n    if (rtpmapline) {\r\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\r\n      var fmtps = SDPUtils.matchPrefix(\r\n        mediaSection, 'a=fmtp:' + pt + ' ');\r\n      // Only the first a=fmtp:<pt> is considered.\r\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\r\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\r\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\r\n        .map(SDPUtils.parseRtcpFb);\r\n      description.codecs.push(codec);\r\n      // parse FEC mechanisms from rtpmap lines.\r\n      switch (codec.name.toUpperCase()) {\r\n        case 'RED':\r\n        case 'ULPFEC':\r\n          description.fecMechanisms.push(codec.name.toUpperCase());\r\n          break;\r\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\r\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\r\n  });\r\n  // FIXME: parse rtcp.\r\n  return description;\r\n};\r\n\r\n// Generates parts of the SDP media section describing the capabilities /\r\n// parameters.\r\nSDPUtils.writeRtpDescription = function(kind, caps) {\r\n  var sdp = '';\r\n\r\n  // Build the mline.\r\n  sdp += 'm=' + kind + ' ';\r\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\r\n  sdp += ' UDP/TLS/RTP/SAVPF ';\r\n  sdp += caps.codecs.map(function(codec) {\r\n    if (codec.preferredPayloadType !== undefined) {\r\n      return codec.preferredPayloadType;\r\n    }\r\n    return codec.payloadType;\r\n  }).join(' ') + '\\r\\n';\r\n\r\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\r\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\r\n\r\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\r\n  caps.codecs.forEach(function(codec) {\r\n    sdp += SDPUtils.writeRtpMap(codec);\r\n    sdp += SDPUtils.writeFmtp(codec);\r\n    sdp += SDPUtils.writeRtcpFb(codec);\r\n  });\r\n  var maxptime = 0;\r\n  caps.codecs.forEach(function(codec) {\r\n    if (codec.maxptime > maxptime) {\r\n      maxptime = codec.maxptime;\r\n    }\r\n  });\r\n  if (maxptime > 0) {\r\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\r\n  }\r\n  sdp += 'a=rtcp-mux\\r\\n';\r\n\r\n  if (caps.headerExtensions) {\r\n    caps.headerExtensions.forEach(function(extension) {\r\n      sdp += SDPUtils.writeExtmap(extension);\r\n    });\r\n  }\r\n  // FIXME: write fecMechanisms.\r\n  return sdp;\r\n};\r\n\r\n// Parses the SDP media section and returns an array of\r\n// RTCRtpEncodingParameters.\r\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\r\n  var encodingParameters = [];\r\n  var description = SDPUtils.parseRtpParameters(mediaSection);\r\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\r\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\r\n\r\n  // filter a=ssrc:... cname:, ignore PlanB-msid\r\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\r\n    .map(function(line) {\r\n      return SDPUtils.parseSsrcMedia(line);\r\n    })\r\n    .filter(function(parts) {\r\n      return parts.attribute === 'cname';\r\n    });\r\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\r\n  var secondarySsrc;\r\n\r\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\r\n    .map(function(line) {\r\n      var parts = line.substr(17).split(' ');\r\n      return parts.map(function(part) {\r\n        return parseInt(part, 10);\r\n      });\r\n    });\r\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\r\n    secondarySsrc = flows[0][1];\r\n  }\r\n\r\n  description.codecs.forEach(function(codec) {\r\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\r\n      var encParam = {\r\n        ssrc: primarySsrc,\r\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\r\n      };\r\n      if (primarySsrc && secondarySsrc) {\r\n        encParam.rtx = {ssrc: secondarySsrc};\r\n      }\r\n      encodingParameters.push(encParam);\r\n      if (hasRed) {\r\n        encParam = JSON.parse(JSON.stringify(encParam));\r\n        encParam.fec = {\r\n          ssrc: primarySsrc,\r\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\r\n        };\r\n        encodingParameters.push(encParam);\r\n      }\r\n    }\r\n  });\r\n  if (encodingParameters.length === 0 && primarySsrc) {\r\n    encodingParameters.push({\r\n      ssrc: primarySsrc\r\n    });\r\n  }\r\n\r\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\r\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\r\n  if (bandwidth.length) {\r\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\r\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\r\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\r\n      // use formula from JSEP to convert b=AS to TIAS value.\r\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\r\n          - (50 * 40 * 8);\r\n    } else {\r\n      bandwidth = undefined;\r\n    }\r\n    encodingParameters.forEach(function(params) {\r\n      params.maxBitrate = bandwidth;\r\n    });\r\n  }\r\n  return encodingParameters;\r\n};\r\n\r\n// parses http://draft.ortc.org/#rtcrtcpparameters*\r\nSDPUtils.parseRtcpParameters = function(mediaSection) {\r\n  var rtcpParameters = {};\r\n\r\n  // Gets the first SSRC. Note tha with RTX there might be multiple\r\n  // SSRCs.\r\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\r\n    .map(function(line) {\r\n      return SDPUtils.parseSsrcMedia(line);\r\n    })\r\n    .filter(function(obj) {\r\n      return obj.attribute === 'cname';\r\n    })[0];\r\n  if (remoteSsrc) {\r\n    rtcpParameters.cname = remoteSsrc.value;\r\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\r\n  }\r\n\r\n  // Edge uses the compound attribute instead of reducedSize\r\n  // compound is !reducedSize\r\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\r\n  rtcpParameters.reducedSize = rsize.length > 0;\r\n  rtcpParameters.compound = rsize.length === 0;\r\n\r\n  // parses the rtcp-mux attrіbute.\r\n  // Note that Edge does not support unmuxed RTCP.\r\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\r\n  rtcpParameters.mux = mux.length > 0;\r\n\r\n  return rtcpParameters;\r\n};\r\n\r\n// parses either a=msid: or a=ssrc:... msid lines and returns\r\n// the id of the MediaStream and MediaStreamTrack.\r\nSDPUtils.parseMsid = function(mediaSection) {\r\n  var parts;\r\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\r\n  if (spec.length === 1) {\r\n    parts = spec[0].substr(7).split(' ');\r\n    return {stream: parts[0], track: parts[1]};\r\n  }\r\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\r\n    .map(function(line) {\r\n      return SDPUtils.parseSsrcMedia(line);\r\n    })\r\n    .filter(function(msidParts) {\r\n      return msidParts.attribute === 'msid';\r\n    });\r\n  if (planB.length > 0) {\r\n    parts = planB[0].value.split(' ');\r\n    return {stream: parts[0], track: parts[1]};\r\n  }\r\n};\r\n\r\n// SCTP\r\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\r\n// to draft-ietf-mmusic-sctp-sdp-05\r\nSDPUtils.parseSctpDescription = function(mediaSection) {\r\n  var mline = SDPUtils.parseMLine(mediaSection);\r\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\r\n  var maxMessageSize;\r\n  if (maxSizeLine.length > 0) {\r\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\r\n  }\r\n  if (isNaN(maxMessageSize)) {\r\n    maxMessageSize = 65536;\r\n  }\r\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\r\n  if (sctpPort.length > 0) {\r\n    return {\r\n      port: parseInt(sctpPort[0].substr(12), 10),\r\n      protocol: mline.fmt,\r\n      maxMessageSize: maxMessageSize\r\n    };\r\n  }\r\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\r\n  if (sctpMapLines.length > 0) {\r\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]\r\n      .substr(10)\r\n      .split(' ');\r\n    return {\r\n      port: parseInt(parts[0], 10),\r\n      protocol: parts[1],\r\n      maxMessageSize: maxMessageSize\r\n    };\r\n  }\r\n};\r\n\r\n// SCTP\r\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\r\n// support by now receiving in this format, unless we originally parsed\r\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\r\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\r\nSDPUtils.writeSctpDescription = function(media, sctp) {\r\n  var output = [];\r\n  if (media.protocol !== 'DTLS/SCTP') {\r\n    output = [\r\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\r\n      'c=IN IP4 0.0.0.0\\r\\n',\r\n      'a=sctp-port:' + sctp.port + '\\r\\n'\r\n    ];\r\n  } else {\r\n    output = [\r\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\r\n      'c=IN IP4 0.0.0.0\\r\\n',\r\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'\r\n    ];\r\n  }\r\n  if (sctp.maxMessageSize !== undefined) {\r\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\r\n  }\r\n  return output.join('');\r\n};\r\n\r\n// Generate a session ID for SDP.\r\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\r\n// recommends using a cryptographically random +ve 64-bit value\r\n// but right now this should be acceptable and within the right range\r\nSDPUtils.generateSessionId = function() {\r\n  return Math.random().toString().substr(2, 21);\r\n};\r\n\r\n// Write boilder plate for start of SDP\r\n// sessId argument is optional - if not supplied it will\r\n// be generated randomly\r\n// sessVersion is optional and defaults to 2\r\n// sessUser is optional and defaults to 'thisisadapterortc'\r\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\r\n  var sessionId;\r\n  var version = sessVer !== undefined ? sessVer : 2;\r\n  if (sessId) {\r\n    sessionId = sessId;\r\n  } else {\r\n    sessionId = SDPUtils.generateSessionId();\r\n  }\r\n  var user = sessUser || 'thisisadapterortc';\r\n  // FIXME: sess-id should be an NTP timestamp.\r\n  return 'v=0\\r\\n' +\r\n      'o=' + user + ' ' + sessionId + ' ' + version +\r\n        ' IN IP4 127.0.0.1\\r\\n' +\r\n      's=-\\r\\n' +\r\n      't=0 0\\r\\n';\r\n};\r\n\r\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\r\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\r\n\r\n  // Map ICE parameters (ufrag, pwd) to SDP.\r\n  sdp += SDPUtils.writeIceParameters(\r\n    transceiver.iceGatherer.getLocalParameters());\r\n\r\n  // Map DTLS parameters to SDP.\r\n  sdp += SDPUtils.writeDtlsParameters(\r\n    transceiver.dtlsTransport.getLocalParameters(),\r\n    type === 'offer' ? 'actpass' : 'active');\r\n\r\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\r\n\r\n  if (transceiver.direction) {\r\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\r\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\r\n    sdp += 'a=sendrecv\\r\\n';\r\n  } else if (transceiver.rtpSender) {\r\n    sdp += 'a=sendonly\\r\\n';\r\n  } else if (transceiver.rtpReceiver) {\r\n    sdp += 'a=recvonly\\r\\n';\r\n  } else {\r\n    sdp += 'a=inactive\\r\\n';\r\n  }\r\n\r\n  if (transceiver.rtpSender) {\r\n    // spec.\r\n    var msid = 'msid:' + stream.id + ' ' +\r\n        transceiver.rtpSender.track.id + '\\r\\n';\r\n    sdp += 'a=' + msid;\r\n\r\n    // for Chrome.\r\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\r\n        ' ' + msid;\r\n    if (transceiver.sendEncodingParameters[0].rtx) {\r\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n          ' ' + msid;\r\n      sdp += 'a=ssrc-group:FID ' +\r\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\r\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n          '\\r\\n';\r\n    }\r\n  }\r\n  // FIXME: this should be written by writeRtpDescription.\r\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\r\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\r\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\r\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\r\n  }\r\n  return sdp;\r\n};\r\n\r\n// Gets the direction from the mediaSection or the sessionpart.\r\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\r\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\r\n  var lines = SDPUtils.splitLines(mediaSection);\r\n  for (var i = 0; i < lines.length; i++) {\r\n    switch (lines[i]) {\r\n      case 'a=sendrecv':\r\n      case 'a=sendonly':\r\n      case 'a=recvonly':\r\n      case 'a=inactive':\r\n        return lines[i].substr(2);\r\n      default:\r\n        // FIXME: What should happen here?\r\n    }\r\n  }\r\n  if (sessionpart) {\r\n    return SDPUtils.getDirection(sessionpart);\r\n  }\r\n  return 'sendrecv';\r\n};\r\n\r\nSDPUtils.getKind = function(mediaSection) {\r\n  var lines = SDPUtils.splitLines(mediaSection);\r\n  var mline = lines[0].split(' ');\r\n  return mline[0].substr(2);\r\n};\r\n\r\nSDPUtils.isRejected = function(mediaSection) {\r\n  return mediaSection.split(' ', 2)[1] === '0';\r\n};\r\n\r\nSDPUtils.parseMLine = function(mediaSection) {\r\n  var lines = SDPUtils.splitLines(mediaSection);\r\n  var parts = lines[0].substr(2).split(' ');\r\n  return {\r\n    kind: parts[0],\r\n    port: parseInt(parts[1], 10),\r\n    protocol: parts[2],\r\n    fmt: parts.slice(3).join(' ')\r\n  };\r\n};\r\n\r\nSDPUtils.parseOLine = function(mediaSection) {\r\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\r\n  var parts = line.substr(2).split(' ');\r\n  return {\r\n    username: parts[0],\r\n    sessionId: parts[1],\r\n    sessionVersion: parseInt(parts[2], 10),\r\n    netType: parts[3],\r\n    addressType: parts[4],\r\n    address: parts[5]\r\n  };\r\n};\r\n\r\n// a very naive interpretation of a valid SDP.\r\nSDPUtils.isValidSDP = function(blob) {\r\n  if (typeof blob !== 'string' || blob.length === 0) {\r\n    return false;\r\n  }\r\n  var lines = SDPUtils.splitLines(blob);\r\n  for (var i = 0; i < lines.length; i++) {\r\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\r\n      return false;\r\n    }\r\n    // TODO: check the modifier a bit more.\r\n  }\r\n  return true;\r\n};\r\n\r\n// Expose public methods.\r\nif (typeof module === 'object') {\r\n  module.exports = SDPUtils;\r\n}\r\n","\r\nimport Listenable from '../../modules/util/Listenable';\r\n\r\n/**\r\n * An object that carries the info about specific media type advertised by\r\n * participant in the signaling channel.\r\n * @typedef {Object} PeerMediaInfo\r\n * @property {boolean} muted indicates if the media is currently muted\r\n * @property {VideoType|undefined} videoType the type of the video if applicable\r\n */\r\n\r\n/**\r\n * Interface used to expose the information carried over the signaling channel\r\n * which is not available to the RTC module in the media SDP.\r\n *\r\n * @interface SignalingLayer\r\n */\r\nexport default class SignalingLayer extends Listenable {\r\n\r\n    /**\r\n     * Obtains the endpoint ID for given SSRC.\r\n     * @param {number} ssrc the SSRC number.\r\n     * @return {string|null} the endpoint ID for given media SSRC.\r\n     */\r\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n    /**\r\n     * Obtains the info about given media advertised in the MUC presence of\r\n     * the participant identified by the given MUC JID.\r\n     * @param {string} owner the MUC jid of the participant for whom\r\n     * {@link PeerMediaInfo} will be obtained.\r\n     * @param {MediaType} mediaType the type of the media for which presence\r\n     * info will be obtained.\r\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\r\n     * info or <tt>null</tt> either if there is no presence available for given\r\n     * JID or if the media type given is invalid.\r\n     */\r\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\r\n        throw new Error('not implemented');\r\n    }\r\n\r\n    getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\r\n        const firstLetterOfMediaType = mediaType.substring(0, 1);\r\n    \r\n        return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\r\n    }\r\n}\r\n\r\nexport function getSourceNameForJitsiTrack(endpointId, mediaType, trackIdx) {\r\n    const firstLetterOfMediaType = mediaType.substring(0, 1);\r\n\r\n    return `${endpointId}-${firstLetterOfMediaType}${trackIdx}`;\r\n}\r\n\r\nexport function getMediaTypeFromSourceName(sourceName) {\r\n    const firstLetterOfMediaTypeIdx = sourceName.indexOf('-') + 1;\r\n\r\n    if (firstLetterOfMediaTypeIdx <= 0) {\r\n        throw new Error(`Invalid source name: ${sourceName}`);\r\n    }\r\n\r\n    const firstLetterOfMediaType = sourceName.substr(firstLetterOfMediaTypeIdx, 1);\r\n\r\n    for (const type of Object.values(MediaType)) {\r\n        if (type.substr(0, 1) === firstLetterOfMediaType) {\r\n            return type;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Invalid source name: ${sourceName}`);\r\n}\r\n","/**\r\n * A collection of utility functions for taking in XML and parsing it to return\r\n * certain values.\r\n */\r\nexport default {\r\n    /**\r\n     * Parses the presence update of the focus and returns an object with the\r\n     * statuses related to recording.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {Object} The current presence values related to recording.\r\n     */\r\n    getFocusRecordingUpdate(presence) {\r\n        const jibriStatus = presence\r\n            && presence.getElementsByTagName('jibri-recording-status')[0];\r\n\r\n        if (!jibriStatus) {\r\n            return;\r\n        }\r\n\r\n        return {\r\n            error: jibriStatus.getAttribute('failure_reason'),\r\n            initiator: jibriStatus.getAttribute('initiator'),\r\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\r\n            sessionID: jibriStatus.getAttribute('session_id'),\r\n            status: jibriStatus.getAttribute('status')\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Parses the presence update from a hidden domain participant and returns\r\n     * an object with the statuses related to recording.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {Object} The current presence values related to recording.\r\n     */\r\n    getHiddenDomainUpdate(presence) {\r\n        const liveStreamViewURLContainer\r\n            = presence.getElementsByTagName('live-stream-view-url')[0];\r\n        const liveStreamViewURL = liveStreamViewURLContainer\r\n            && liveStreamViewURLContainer.textContent;\r\n        const modeContainer\r\n            = presence.getElementsByTagName('mode')[0];\r\n        const mode = modeContainer\r\n            && modeContainer.textContent\r\n            && modeContainer.textContent.toLowerCase();\r\n        const sessionIDContainer\r\n            = presence.getElementsByTagName('session_id')[0];\r\n        const sessionID\r\n            = sessionIDContainer && sessionIDContainer.textContent;\r\n\r\n        return {\r\n            liveStreamViewURL,\r\n            mode,\r\n            sessionID\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Returns the recording session ID from a successful IQ.\r\n     *\r\n     * @param {Node} response - The response from the IQ.\r\n     * @returns {string} The session ID of the recording session.\r\n     */\r\n    getSessionIdFromIq(response) {\r\n        const jibri = response && response.getElementsByTagName('jibri')[0];\r\n\r\n        return jibri && jibri.getAttribute('session_id');\r\n    },\r\n\r\n    /**\r\n     * Returns the recording session ID from a presence, if it exists.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {string|undefined} The session ID of the recording session.\r\n     */\r\n    getSessionId(presence) {\r\n        const sessionIdContainer\r\n            = presence.getElementsByTagName('session_id')[0];\r\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\r\n\r\n        return sessionId;\r\n    },\r\n\r\n    /**\r\n     * Returns whether or not a presence is from the focus.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {boolean} True if the presence is from the focus.\r\n     */\r\n    isFromFocus(presence) {\r\n        return presence.getAttribute('from').includes('focus');\r\n    }\r\n};\r\n","/* global __filename, Olm */\r\n\r\nimport base64js from 'base64-js';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport Deferred from '../util/Deferred';\r\nimport Listenable from '../util/Listenable';\r\nimport { JITSI_MEET_MUC_TYPE } from '../xmpp/xmpp';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nconst REQ_TIMEOUT = 5 * 1000;\r\nconst OLM_MESSAGE_TYPE = 'olm';\r\nconst OLM_MESSAGE_TYPES = {\r\n    ERROR: 'error',\r\n    KEY_INFO: 'key-info',\r\n    KEY_INFO_ACK: 'key-info-ack',\r\n    SESSION_ACK: 'session-ack',\r\n    SESSION_INIT: 'session-init'\r\n};\r\n\r\nconst kOlmData = Symbol('OlmData');\r\n\r\nconst OlmAdapterEvents = {\r\n    OLM_ID_KEY_READY: 'olm.id_key_ready',\r\n    PARTICIPANT_E2EE_CHANNEL_READY: 'olm.participant_e2ee_channel_ready',\r\n    PARTICIPANT_KEY_UPDATED: 'olm.partitipant_key_updated'\r\n};\r\n\r\n/**\r\n * This class implements an End-to-End Encrypted communication channel between every two peers\r\n * in the conference. This channel uses libolm to achieve E2EE.\r\n *\r\n * The created channel is then used to exchange the secret key that each participant will use\r\n * to encrypt the actual media (see {@link E2EEContext}).\r\n *\r\n * A simple JSON message based protocol is implemented, which follows a request - response model:\r\n * - session-init: Initiates an olm session establishment procedure. This message will be sent\r\n *                 by the participant who just joined, to everyone else.\r\n * - session-ack: Completes the olm session etablishment. This messsage may contain ancilliary\r\n *                encrypted data, more specifically the sender's current key.\r\n * - key-info: Includes the sender's most up to date key information.\r\n * - key-info-ack: Acknowledges the reception of a key-info request. In addition, it may contain\r\n *                 the sender's key information, if available.\r\n * - error: Indicates a request processing error has occurred.\r\n *\r\n * These requessts and responses are transport independent. Currently they are sent using XMPP\r\n * MUC private messages.\r\n */\r\nexport class OlmAdapter extends Listenable {\r\n    /**\r\n     * Creates an adapter instance for the given conference.\r\n     */\r\n    constructor(conference) {\r\n        super();\r\n\r\n        this._conf = conference;\r\n        this._init = new Deferred();\r\n        this._key = undefined;\r\n        this._keyIndex = -1;\r\n        this._reqs = new Map();\r\n\r\n        if (OlmAdapter.isSupported()) {\r\n            this._bootstrapOlm();\r\n\r\n            this._conf.on(JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED, this._onEndpointMessageReceived.bind(this));\r\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_JOINED, this._onConferenceJoined.bind(this));\r\n            this._conf.on(JitsiConferenceEvents.CONFERENCE_LEFT, this._onConferenceLeft.bind(this));\r\n            this._conf.on(JitsiConferenceEvents.USER_LEFT, this._onParticipantLeft.bind(this));\r\n        } else {\r\n            this._init.reject(new Error('Olm not supported'));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Indicates if olm is supported on the current platform.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    static isSupported() {\r\n        return typeof window.Olm !== 'undefined';\r\n    }\r\n\r\n    /**\r\n     * Updates the current participant key and distributes it to all participants in the conference\r\n     * by sending a key-info message.\r\n     *\r\n     * @param {Uint8Array|boolean} key - The new key.\r\n     * @returns {number}\r\n     */\r\n    async updateCurrentKey(key) {\r\n        this._key = key;\r\n\r\n        return this._keyIndex;\r\n    }\r\n\r\n    /**\r\n     * Updates the current participant key and distributes it to all participants in the conference\r\n     * by sending a key-info message.\r\n     *\r\n     * @param {Uint8Array|boolean} key - The new key.\r\n     * @retrns {Promise<Number>}\r\n     */\r\n    async updateKey(key) {\r\n        // Store it locally for new sessions.\r\n        this._key = key;\r\n        this._keyIndex++;\r\n\r\n        // Broadcast it.\r\n        const promises = [];\r\n\r\n        for (const participant of this._conf.getParticipants()) {\r\n            const pId = participant.getId();\r\n            const olmData = this._getParticipantOlmData(participant);\r\n\r\n            // TODO: skip those who don't support E2EE.\r\n\r\n            if (!olmData.session) {\r\n                logger.warn(`Tried to send key to participant ${pId} but we have no session`);\r\n\r\n                // eslint-disable-next-line no-continue\r\n                continue;\r\n            }\r\n\r\n            const uuid = uuidv4();\r\n            const data = {\r\n                [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                olm: {\r\n                    type: OLM_MESSAGE_TYPES.KEY_INFO,\r\n                    data: {\r\n                        ciphertext: this._encryptKeyInfo(olmData.session),\r\n                        uuid\r\n                    }\r\n                }\r\n            };\r\n            const d = new Deferred();\r\n\r\n            d.setRejectTimeout(REQ_TIMEOUT);\r\n            d.catch(() => {\r\n                this._reqs.delete(uuid);\r\n            });\r\n            this._reqs.set(uuid, d);\r\n            promises.push(d);\r\n\r\n            this._sendMessage(data, pId);\r\n        }\r\n\r\n        await Promise.allSettled(promises);\r\n\r\n        // TODO: retry failed ones?\r\n\r\n        return this._keyIndex;\r\n    }\r\n\r\n    /**\r\n     * Internal helper to bootstrap the olm library.\r\n     *\r\n     * @returns {Promise<void>}\r\n     * @private\r\n     */\r\n    async _bootstrapOlm() {\r\n        logger.debug('Initializing Olm...');\r\n\r\n        try {\r\n            await Olm.init();\r\n\r\n            this._olmAccount = new Olm.Account();\r\n            this._olmAccount.create();\r\n\r\n            const idKeys = JSON.parse(this._olmAccount.identity_keys());\r\n\r\n            this._idKey = idKeys.curve25519;\r\n\r\n            logger.debug('Olm initialized!');\r\n            this._init.resolve();\r\n            this.eventEmitter.emit(OlmAdapterEvents.OLM_ID_KEY_READY, this._idKey);\r\n        } catch (e) {\r\n            logger.error('Failed to initialize Olm', e);\r\n            this._init.reject(e);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Internal helper for encrypting the current key information for a given participant.\r\n     *\r\n     * @param {Olm.Session} session - Participant's session.\r\n     * @returns {string} - The encrypted text with the key information.\r\n     * @private\r\n     */\r\n    _encryptKeyInfo(session) {\r\n        const keyInfo = {};\r\n\r\n        if (this._key !== undefined) {\r\n            keyInfo.key = this._key ? base64js.fromByteArray(this._key) : false;\r\n            keyInfo.keyIndex = this._keyIndex;\r\n        }\r\n\r\n        return session.encrypt(JSON.stringify(keyInfo));\r\n    }\r\n\r\n    /**\r\n     * Internal helper for getting the olm related data associated with a participant.\r\n     *\r\n     * @param {JitsiParticipant} participant - Participant whose data wants to be extracted.\r\n     * @returns {Object}\r\n     * @private\r\n     */\r\n    _getParticipantOlmData(participant) {\r\n        participant[kOlmData] = participant[kOlmData] || {};\r\n\r\n        return participant[kOlmData];\r\n    }\r\n\r\n    /**\r\n     * Handles the conference joined event. Upon joining a conference, the participant\r\n     * who just joined will start new olm sessions with every other participant.\r\n     *\r\n     * @private\r\n     */\r\n    async _onConferenceJoined() {\r\n        logger.debug('Conference joined');\r\n\r\n        await this._init;\r\n\r\n        const promises = [];\r\n\r\n        // Establish a 1-to-1 Olm session with every participant in the conference.\r\n        // We are forcing the last user to join the conference to start the exchange\r\n        // so we can send some pre-established secrets in the ACK.\r\n        for (const participant of this._conf.getParticipants()) {\r\n            promises.push(this._sendSessionInit(participant));\r\n        }\r\n\r\n        await Promise.allSettled(promises);\r\n\r\n        // TODO: retry failed ones.\r\n        // TODO: skip participants which don't support E2EE.\r\n    }\r\n\r\n    /**\r\n     * Handles leaving the conference, cleaning up olm sessions.\r\n     *\r\n     * @private\r\n     */\r\n    async _onConferenceLeft() {\r\n        logger.debug('Conference left');\r\n\r\n        await this._init;\r\n\r\n        for (const participant of this._conf.getParticipants()) {\r\n            this._onParticipantLeft(participant.getId(), participant);\r\n        }\r\n\r\n        if (this._olmAccount) {\r\n            this._olmAccount.free();\r\n            this._olmAccount = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Main message handler. Handles 1-to-1 messages received from other participants\r\n     * and send the appropriate replies.\r\n     *\r\n     * @private\r\n     */\r\n    async _onEndpointMessageReceived(participant, payload) {\r\n        if (payload[JITSI_MEET_MUC_TYPE] !== OLM_MESSAGE_TYPE) {\r\n            return;\r\n        }\r\n\r\n        if (!payload.olm) {\r\n            logger.warn('Incorrectly formatted message');\r\n\r\n            return;\r\n        }\r\n\r\n        await this._init;\r\n\r\n        const msg = payload.olm;\r\n        const pId = participant.getId();\r\n        const olmData = this._getParticipantOlmData(participant);\r\n\r\n        switch (msg.type) {\r\n        case OLM_MESSAGE_TYPES.SESSION_INIT: {\r\n            if (olmData.session) {\r\n                logger.warn(`Participant ${pId} already has a session`);\r\n\r\n                this._sendError(participant, 'Session already established');\r\n            } else {\r\n                // Create a session for communicating with this participant.\r\n\r\n                const session = new Olm.Session();\r\n\r\n                session.create_outbound(this._olmAccount, msg.data.idKey, msg.data.otKey);\r\n                olmData.session = session;\r\n\r\n                // Send ACK\r\n                const ack = {\r\n                    [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                    olm: {\r\n                        type: OLM_MESSAGE_TYPES.SESSION_ACK,\r\n                        data: {\r\n                            ciphertext: this._encryptKeyInfo(session),\r\n                            uuid: msg.data.uuid\r\n                        }\r\n                    }\r\n                };\r\n\r\n                this._sendMessage(ack, pId);\r\n\r\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\r\n            }\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.SESSION_ACK: {\r\n            if (olmData.session) {\r\n                logger.warn(`Participant ${pId} already has a session`);\r\n\r\n                this._sendError(participant, 'No session found');\r\n            } else if (msg.data.uuid === olmData.pendingSessionUuid) {\r\n                const { ciphertext } = msg.data;\r\n                const d = this._reqs.get(msg.data.uuid);\r\n                const session = new Olm.Session();\r\n\r\n                session.create_inbound(this._olmAccount, ciphertext.body);\r\n\r\n                // Remove OT keys that have been used to setup this session.\r\n                this._olmAccount.remove_one_time_keys(session);\r\n\r\n                // Decrypt first message.\r\n                const data = session.decrypt(ciphertext.type, ciphertext.body);\r\n\r\n                olmData.session = session;\r\n                olmData.pendingSessionUuid = undefined;\r\n\r\n                this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_E2EE_CHANNEL_READY, pId);\r\n\r\n                this._reqs.delete(msg.data.uuid);\r\n                d.resolve();\r\n\r\n                const json = safeJsonParse(data);\r\n\r\n                if (json.key) {\r\n                    const key = base64js.toByteArray(json.key);\r\n                    const keyIndex = json.keyIndex;\r\n\r\n                    olmData.lastKey = key;\r\n                    this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\r\n                }\r\n            } else {\r\n                logger.warn('Received ACK with the wrong UUID');\r\n\r\n                this._sendError(participant, 'Invalid UUID');\r\n            }\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.ERROR: {\r\n            logger.error(msg.data.error);\r\n\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.KEY_INFO: {\r\n            if (olmData.session) {\r\n                const { ciphertext } = msg.data;\r\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\r\n                const json = safeJsonParse(data);\r\n\r\n                if (json.key !== undefined && json.keyIndex !== undefined) {\r\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\r\n                    const keyIndex = json.keyIndex;\r\n\r\n                    if (!isEqual(olmData.lastKey, key)) {\r\n                        olmData.lastKey = key;\r\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\r\n                    }\r\n\r\n                    // Send ACK.\r\n                    const ack = {\r\n                        [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n                        olm: {\r\n                            type: OLM_MESSAGE_TYPES.KEY_INFO_ACK,\r\n                            data: {\r\n                                ciphertext: this._encryptKeyInfo(olmData.session),\r\n                                uuid: msg.data.uuid\r\n                            }\r\n                        }\r\n                    };\r\n\r\n                    this._sendMessage(ack, pId);\r\n                }\r\n            } else {\r\n                logger.debug(`Received key info message from ${pId} but we have no session for them!`);\r\n\r\n                this._sendError(participant, 'No session found while processing key-info');\r\n            }\r\n            break;\r\n        }\r\n        case OLM_MESSAGE_TYPES.KEY_INFO_ACK: {\r\n            if (olmData.session) {\r\n                const { ciphertext } = msg.data;\r\n                const data = olmData.session.decrypt(ciphertext.type, ciphertext.body);\r\n                const json = safeJsonParse(data);\r\n\r\n                if (json.key !== undefined && json.keyIndex !== undefined) {\r\n                    const key = json.key ? base64js.toByteArray(json.key) : false;\r\n                    const keyIndex = json.keyIndex;\r\n\r\n                    if (!isEqual(olmData.lastKey, key)) {\r\n                        olmData.lastKey = key;\r\n                        this.eventEmitter.emit(OlmAdapterEvents.PARTICIPANT_KEY_UPDATED, pId, key, keyIndex);\r\n                    }\r\n                }\r\n\r\n                const d = this._reqs.get(msg.data.uuid);\r\n\r\n                this._reqs.delete(msg.data.uuid);\r\n                d.resolve();\r\n            } else {\r\n                logger.debug(`Received key info ack message from ${pId} but we have no session for them!`);\r\n\r\n                this._sendError(participant, 'No session found while processing key-info-ack');\r\n            }\r\n            break;\r\n        }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Handles a participant leaving. When a participant leaves their olm session is destroyed.\r\n     *\r\n     * @private\r\n     */\r\n    _onParticipantLeft(id, participant) {\r\n        logger.debug(`Participant ${id} left`);\r\n\r\n        const olmData = this._getParticipantOlmData(participant);\r\n\r\n        if (olmData.session) {\r\n            olmData.session.free();\r\n            olmData.session = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Builds and sends an error message to the target participant.\r\n     *\r\n     * @param {JitsiParticipant} participant - The target participant.\r\n     * @param {string} error - The error message.\r\n     * @returns {void}\r\n     */\r\n    _sendError(participant, error) {\r\n        const pId = participant.getId();\r\n        const err = {\r\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n            olm: {\r\n                type: OLM_MESSAGE_TYPES.ERROR,\r\n                data: {\r\n                    error\r\n                }\r\n            }\r\n        };\r\n\r\n        this._sendMessage(err, pId);\r\n    }\r\n\r\n    /**\r\n     * Internal helper to send the given object to the given participant ID.\r\n     * This function merely exists so the transport can be easily swapped.\r\n     * Currently messages are transmitted via XMPP MUC private messages.\r\n     *\r\n     * @param {object} data - The data that will be sent to the target participant.\r\n     * @param {string} participantId - ID of the target participant.\r\n     */\r\n    _sendMessage(data, participantId) {\r\n        this._conf.sendMessage(data, participantId);\r\n    }\r\n\r\n    /**\r\n     * Builds and sends the session-init request to the target participant.\r\n     *\r\n     * @param {JitsiParticipant} participant - Participant to whom we'll send the request.\r\n     * @returns {Promise} - The promise will be resolved when the session-ack is received.\r\n     * @private\r\n     */\r\n    _sendSessionInit(participant) {\r\n        const pId = participant.getId();\r\n        const olmData = this._getParticipantOlmData(participant);\r\n\r\n        if (olmData.session) {\r\n            logger.warn(`Tried to send session-init to ${pId} but we already have a session`);\r\n\r\n            return Promise.reject();\r\n        }\r\n\r\n        if (olmData.pendingSessionUuid !== undefined) {\r\n            logger.warn(`Tried to send session-init to ${pId} but we already have a pending session`);\r\n\r\n            return Promise.reject();\r\n        }\r\n\r\n        // Generate a One Time Key.\r\n        this._olmAccount.generate_one_time_keys(1);\r\n\r\n        const otKeys = JSON.parse(this._olmAccount.one_time_keys());\r\n        const otKey = Object.values(otKeys.curve25519)[0];\r\n\r\n        if (!otKey) {\r\n            return Promise.reject(new Error('No one-time-keys generated'));\r\n        }\r\n\r\n        // Mark the OT keys (one really) as published so they are not reused.\r\n        this._olmAccount.mark_keys_as_published();\r\n\r\n        const uuid = uuidv4();\r\n        const init = {\r\n            [JITSI_MEET_MUC_TYPE]: OLM_MESSAGE_TYPE,\r\n            olm: {\r\n                type: OLM_MESSAGE_TYPES.SESSION_INIT,\r\n                data: {\r\n                    idKey: this._idKey,\r\n                    otKey,\r\n                    uuid\r\n                }\r\n            }\r\n        };\r\n\r\n        const d = new Deferred();\r\n\r\n        d.setRejectTimeout(REQ_TIMEOUT);\r\n        d.catch(() => {\r\n            this._reqs.delete(uuid);\r\n            olmData.pendingSessionUuid = undefined;\r\n        });\r\n        this._reqs.set(uuid, d);\r\n\r\n        this._sendMessage(init, pId);\r\n\r\n        // Store the UUID for matching with the ACK.\r\n        olmData.pendingSessionUuid = uuid;\r\n\r\n        return d;\r\n    }\r\n}\r\n\r\nOlmAdapter.events = OlmAdapterEvents;\r\n\r\n/**\r\n * Helper to ensure JSON parsing always returns an object.\r\n *\r\n * @param {string} data - The data that needs to be parsed.\r\n * @returns {object} - Parsed data or empty object in case of failure.\r\n */\r\nfunction safeJsonParse(data) {\r\n    try {\r\n        return JSON.parse(data);\r\n    } catch (e) {\r\n        return {};\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport debounce from 'lodash.debounce';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport browser from '../browser';\r\n\r\nimport E2EEContext from './E2EEContext';\r\nimport { OlmAdapter } from './OlmAdapter';\r\nimport { importKey, ratchet } from './crypto-utils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Period which we'll wait before updating / rotating our keys when a participant\r\n// joins or leaves.\r\nconst DEBOUNCE_PERIOD = 5000;\r\n\r\n/**\r\n * This module integrates {@link E2EEContext} with {@link JitsiConference} in order to enable E2E encryption.\r\n */\r\nexport class E2EEncryption {\r\n    /**\r\n     * A constructor.\r\n     * @param {JitsiConference} conference - The conference instance for which E2E encryption is to be enabled.\r\n     */\r\n    constructor(conference) {\r\n        this.conference = conference;\r\n\r\n        this._conferenceJoined = false;\r\n        this._enabled = false;\r\n        this._initialized = false;\r\n        this._key = undefined;\r\n\r\n        this._e2eeCtx = new E2EEContext();\r\n        this._olmAdapter = new OlmAdapter(conference);\r\n\r\n        // Debounce key rotation / ratcheting to avoid a storm of messages.\r\n        this._ratchetKey = debounce(this._ratchetKeyImpl, DEBOUNCE_PERIOD);\r\n        this._rotateKey = debounce(this._rotateKeyImpl, DEBOUNCE_PERIOD);\r\n\r\n        // Participant join / leave operations. Used for key advancement / rotation.\r\n        //\r\n\r\n        this.conference.on(\r\n            JitsiConferenceEvents.CONFERENCE_JOINED,\r\n            () => {\r\n                this._conferenceJoined = true;\r\n            });\r\n        this.conference.on(\r\n            JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\r\n            this._onParticipantPropertyChanged.bind(this));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this._onParticipantJoined.bind(this));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this._onParticipantLeft.bind(this));\r\n\r\n        // Conference media events in order to attach the encryptor / decryptor.\r\n        // FIXME add events to TraceablePeerConnection which will allow to see when there's new receiver or sender\r\n        // added instead of shenanigans around conference track events and track muted.\r\n        //\r\n\r\n        this.conference.on(\r\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n            this._onMediaSessionStarted.bind(this));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.TRACK_ADDED,\r\n            track => track.isLocal() && this._onLocalTrackAdded(track));\r\n        this.conference.rtc.on(\r\n            RTCEvents.REMOTE_TRACK_ADDED,\r\n            (track, tpc) => this._setupReceiverE2EEForTrack(tpc, track));\r\n        this.conference.on(\r\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\r\n            this._trackMuteChanged.bind(this));\r\n\r\n        // Olm signalling events.\r\n        this._olmAdapter.on(\r\n            OlmAdapter.events.OLM_ID_KEY_READY,\r\n            this._onOlmIdKeyReady.bind(this));\r\n        this._olmAdapter.on(\r\n            OlmAdapter.events.PARTICIPANT_E2EE_CHANNEL_READY,\r\n            this._onParticipantE2EEChannelReady.bind(this));\r\n        this._olmAdapter.on(\r\n            OlmAdapter.events.PARTICIPANT_KEY_UPDATED,\r\n            this._onParticipantKeyUpdated.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Indicates if E2EE is supported in the current platform.\r\n     *\r\n     * @param {object} config - Global configuration.\r\n     * @returns {boolean}\r\n     */\r\n    static isSupported(config) {\r\n        return browser.supportsInsertableStreams()\r\n            && OlmAdapter.isSupported()\r\n            && !(config.testing && config.testing.disableE2EE);\r\n    }\r\n\r\n    /**\r\n     * Indicates whether E2EE is currently enabled or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isEnabled() {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * Enables / disables End-To-End encryption.\r\n     *\r\n     * @param {boolean} enabled - whether E2EE should be enabled or not.\r\n     * @returns {void}\r\n     */\r\n    setEnabled(enabled) {\r\n        if (enabled === this._enabled) {\r\n            return;\r\n        }\r\n\r\n        this._enabled = enabled;\r\n\r\n        if (!this._initialized && enabled) {\r\n            // Need to re-create the peerconnections in order to apply the insertable streams constraint.\r\n            // TODO: this was necessary due to some audio issues when indertable streams are used\r\n            // even though encryption is not performed. This should be fixed in the browser eventually.\r\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1103280\r\n            this.conference._restartMediaSessions();\r\n\r\n            this._initialized = true;\r\n        }\r\n\r\n        // Generate a random key in case we are enabling.\r\n        this._key = enabled ? this._generateKey() : false;\r\n\r\n        // Send it to others using the E2EE olm channel.\r\n        this._olmAdapter.updateKey(this._key).then(index => {\r\n            // Set our key so we begin encrypting.\r\n            this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates a new 256 bit random key.\r\n     *\r\n     * @returns {Uint8Array}\r\n     * @private\r\n     */\r\n    _generateKey() {\r\n        return window.crypto.getRandomValues(new Uint8Array(32));\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE on the new track that has been added to the conference, apply it on all the open peerconnections.\r\n     * @param {JitsiLocalTrack} track - the new track that's being added to the conference.\r\n     * @private\r\n     */\r\n    _onLocalTrackAdded(track) {\r\n        for (const session of this.conference._getMediaSessions()) {\r\n            this._setupSenderE2EEForTrack(session, track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setups E2E encryption for the new session.\r\n     * @param {JingleSessionPC} session - the new media session.\r\n     * @private\r\n     */\r\n    _onMediaSessionStarted(session) {\r\n        const localTracks = this.conference.getLocalTracks();\r\n\r\n        for (const track of localTracks) {\r\n            this._setupSenderE2EEForTrack(session, track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Publushes our own Olmn id key in presence.\r\n     * @private\r\n     */\r\n    _onOlmIdKeyReady(idKey) {\r\n        logger.debug(`Olm id key ready: ${idKey}`);\r\n\r\n        // Publish it in presence.\r\n        this.conference.setLocalParticipantProperty('e2ee.idKey', idKey);\r\n    }\r\n\r\n    /**\r\n     * Advances (using ratcheting) the current key when a new participant joins the conference.\r\n     * @private\r\n     */\r\n    _onParticipantJoined(id) {\r\n        logger.debug(`Participant ${id} joined`);\r\n\r\n        if (this._conferenceJoined && this._enabled) {\r\n            this._ratchetKey();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rotates the current key when a participant leaves the conference.\r\n     * @private\r\n     */\r\n    _onParticipantLeft(id) {\r\n        logger.debug(`Participant ${id} left`);\r\n\r\n        this._e2eeCtx.cleanup(id);\r\n\r\n        if (this._enabled) {\r\n            this._rotateKey();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Event posted when the E2EE signalling channel has been established with the given participant.\r\n     * @private\r\n     */\r\n    _onParticipantE2EEChannelReady(id) {\r\n        logger.debug(`E2EE channel with participant ${id} is ready`);\r\n    }\r\n\r\n    /**\r\n     * Handles an update in a participant's key.\r\n     *\r\n     * @param {string} id - The participant ID.\r\n     * @param {Uint8Array | boolean} key - The new key for the participant.\r\n     * @param {Number} index - The new key's index.\r\n     * @private\r\n     */\r\n    _onParticipantKeyUpdated(id, key, index) {\r\n        logger.debug(`Participant ${id} updated their key`);\r\n\r\n        this._e2eeCtx.setKey(id, key, index);\r\n    }\r\n\r\n    /**\r\n     * Handles an update in a participant's presence property.\r\n     *\r\n     * @param {JitsiParticipant} participant - The participant.\r\n     * @param {string} name - The name of the property that changed.\r\n     * @param {*} oldValue - The property's previous value.\r\n     * @param {*} newValue - The property's new value.\r\n     * @private\r\n     */\r\n    _onParticipantPropertyChanged(participant, name, oldValue, newValue) {\r\n        switch (name) {\r\n        case 'e2ee.idKey':\r\n            logger.debug(`Participant ${participant.getId()} updated their id key: ${newValue}`);\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Advances the current key by using ratcheting.\r\n     *\r\n     * @private\r\n     */\r\n    async _ratchetKeyImpl() {\r\n        logger.debug('Ratchetting key');\r\n\r\n        const material = await importKey(this._key);\r\n        const newKey = await ratchet(material);\r\n\r\n        this._key = new Uint8Array(newKey);\r\n\r\n        const index = await this._olmAdapter.updateCurrentKey(this._key);\r\n\r\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\r\n    }\r\n\r\n    /**\r\n     * Rotates the local key. Rotating the key implies creating a new one, then distributing it\r\n     * to all participants and once they all received it, start using it.\r\n     *\r\n     * @private\r\n     */\r\n    async _rotateKeyImpl() {\r\n        logger.debug('Rotating key');\r\n\r\n        this._key = this._generateKey();\r\n        const index = await this._olmAdapter.updateKey(this._key);\r\n\r\n        this._e2eeCtx.setKey(this.conference.myUserId(), this._key, index);\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE for the receiving side.\r\n     *\r\n     * @private\r\n     */\r\n    _setupReceiverE2EEForTrack(tpc, track) {\r\n        if (!this._enabled) {\r\n            return;\r\n        }\r\n\r\n        const receiver = tpc.findReceiverForTrack(track.track);\r\n\r\n        if (receiver) {\r\n            this._e2eeCtx.handleReceiver(receiver, track.getType(), track.getParticipantId());\r\n        } else {\r\n            logger.warn(`Could not handle E2EE for ${track}: receiver not found in: ${tpc}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE for the sending side.\r\n     *\r\n     * @param {JingleSessionPC} session - the session which sends the media produced by the track.\r\n     * @param {JitsiLocalTrack} track - the local track for which e2e encoder will be configured.\r\n     * @private\r\n     */\r\n    _setupSenderE2EEForTrack(session, track) {\r\n        if (!this._enabled) {\r\n            return;\r\n        }\r\n\r\n        const pc = session.peerconnection;\r\n        const sender = pc && pc.findSenderForTrack(track.track);\r\n\r\n        if (sender) {\r\n            this._e2eeCtx.handleSender(sender, track.getType(), track.getParticipantId());\r\n        } else {\r\n            logger.warn(`Could not handle E2EE for ${track}: sender not found in ${pc}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup E2EE on the sender that is created for the unmuted local video track.\r\n     * @param {JitsiLocalTrack} track - the track for which muted status has changed.\r\n     * @private\r\n     */\r\n    _trackMuteChanged(track) {\r\n        if (browser.doesVideoMuteByStreamRemove() && track.isLocal() && track.isVideoTrack() && !track.isMuted()) {\r\n            for (const session of this.conference._getMediaSessions()) {\r\n                this._setupSenderE2EEForTrack(session, track);\r\n            }\r\n        }\r\n    }\r\n}\r\n","/* global __filename, $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\r\nimport { MediaType } from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport {\r\n    ICE_DURATION,\r\n    ICE_STATE_CHANGED\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport AsyncQueue from '../util/AsyncQueue';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport { integerHash } from '../util/StringUtils';\r\n\r\nimport browser from './../browser';\r\nimport JingleSession from './JingleSession';\r\nimport * as JingleSessionState from './JingleSessionState';\r\nimport MediaSessionEvents from './MediaSessionEvents';\r\nimport SDP from './SDP';\r\nimport SDPDiffer from './SDPDiffer';\r\nimport SDPUtil from './SDPUtil';\r\nimport XmppConnection from './XmppConnection';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Constant tells how long we're going to wait for IQ response, before timeout\r\n * error is  triggered.\r\n * @type {number}\r\n */\r\nconst IQ_TIMEOUT = 10000;\r\n\r\n/*\r\n * The default number of samples (per stat) to keep when webrtc stats gathering\r\n * is enabled in TraceablePeerConnection.\r\n */\r\nconst DEFAULT_MAX_STATS = 300;\r\n\r\nfunction getEndpointId(jidOrEndpointId) {\r\n    return Strophe.getResourceFromJid(jidOrEndpointId) || jidOrEndpointId;\r\n}\r\n\r\n\r\n/**\r\n * @typedef {Object} JingleSessionPCOptions\r\n * @property {Object} abTesting - A/B testing related options (ask George).\r\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\r\n * video test ?(ask George).\r\n * @property {boolean} disableH264 - Described in the config.js[1].\r\n * @property {boolean} disableRtx - Described in the config.js[1].\r\n * @property {boolean} disableSimulcast - Described in the config.js[1].\r\n * @property {boolean} enableInsertableStreams - Set to true when the insertable streams constraints is to be enabled\r\n * on the PeerConnection.\r\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\r\n * @property {boolean} failICE - it's an option used in the tests. Set to\r\n * <tt>true</tt> to block any real candidates and make the ICE fail.\r\n * @property {boolean} gatherStats - Described in the config.js[1].\r\n * @property {object} p2p - Peer to peer related options (FIXME those could be\r\n * fetched from config.p2p on the upper level).\r\n * @property {boolean} p2p.disableH264 - Described in the config.js[1].\r\n * @property {boolean} p2p.preferH264 - Described in the config.js[1].\r\n * @property {boolean} preferH264 - Described in the config.js[1].\r\n * @property {Object} testing - Testing and/or experimental options.\r\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\r\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\r\n *\r\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\r\n */\r\n/**\r\n *\r\n */\r\nexport default class JingleSessionPC extends JingleSession {\r\n    /**\r\n     * Parses 'senders' attribute of the video content.\r\n     * @param {jQuery} jingleContents\r\n     * @return {string|null} one of the values of content \"senders\" attribute\r\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\r\n     * invalid then <tt>null</tt> will be returned.\r\n     * @private\r\n     */\r\n    static parseVideoSenders(jingleContents) {\r\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\r\n\r\n        if (videoContents.length) {\r\n            const senders = videoContents[0].getAttribute('senders');\r\n\r\n            if (senders === 'both'\r\n                || senders === 'initiator'\r\n                || senders === 'responder'\r\n                || senders === 'none') {\r\n                return senders;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parses the video max frame height value out of the 'content-modify' IQ.\r\n     *\r\n     * @param {jQuery} jingleContents - A jQuery selector pointing to the '>jingle' element.\r\n     * @returns {Number|null}\r\n     */\r\n    static parseMaxFrameHeight(jingleContents) {\r\n        const maxFrameHeightSel = jingleContents.find('>content[name=\"video\"]>max-frame-height');\r\n\r\n        return maxFrameHeightSel.length ? Number(maxFrameHeightSel.text()) : null;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>JingleSessionPC</tt>\r\n     * @param {string} sid the Jingle Session ID - random string which\r\n     * identifies the session\r\n     * @param {string} localJid our JID\r\n     * @param {string} remoteJid remote peer JID\r\n     * @param {XmppConnection} connection - The XMPP connection instance.\r\n     * @param mediaConstraints the media constraints object passed to\r\n     * createOffer/Answer, as defined by the WebRTC standard\r\n     * @param iceConfig the ICE servers config object as defined by the WebRTC\r\n     * standard.\r\n     * @param {boolean} isP2P indicates whether this instance is\r\n     * meant to be used in a direct, peer to peer connection or <tt>false</tt>\r\n     * if it's a JVB connection.\r\n     * @param {boolean} isInitiator indicates if it will be the side which\r\n     * initiates the session.\r\n     * @constructor\r\n     *\r\n     * @implements {SignalingLayer}\r\n     */\r\n    constructor(\r\n            sid,\r\n            localJid,\r\n            remoteJid,\r\n            connection,\r\n            mediaConstraints,\r\n            iceConfig,\r\n            isP2P,\r\n            isInitiator) {\r\n        super(\r\n            sid,\r\n            localJid,\r\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\r\n\r\n        /**\r\n         * The bridge session's identifier. One Jingle session can during\r\n         * it's lifetime participate in multiple bridge sessions managed by\r\n         * Jicofo. A new bridge session is started whenever Jicofo sends\r\n         * 'session-initiate' or 'transport-replace'.\r\n         *\r\n         * @type {?string}\r\n         * @private\r\n         */\r\n        this._bridgeSessionId = null;\r\n\r\n        /**\r\n         * The oldest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\r\n         * used to update Jicofo once the XMPP connection goes back online.\r\n         * @type {SDP|undefined}\r\n         * @private\r\n         */\r\n        this._cachedOldLocalSdp = undefined;\r\n\r\n        /**\r\n         * The latest SDP passed to {@link notifyMySSRCUpdate} while the XMPP connection was offline that will be\r\n         * used to update Jicofo once the XMPP connection goes back online.\r\n         * @type {SDP|undefined}\r\n         * @private\r\n         */\r\n        this._cachedNewLocalSdp = undefined;\r\n\r\n        /**\r\n         * Stores result of {@link window.performance.now()} at the time when\r\n         * ICE enters 'checking' state.\r\n         * @type {number|null} null if no value has been stored yet\r\n         * @private\r\n         */\r\n        this._iceCheckingStartedTimestamp = null;\r\n\r\n        /**\r\n         * Stores result of {@link window.performance.now()} at the time when\r\n         * first ICE candidate is spawned by the peerconnection to mark when\r\n         * ICE gathering started. That's, because ICE gathering state changed\r\n         * events are not supported by most of the browsers, so we try something\r\n         * that will work everywhere. It may not be as accurate, but given that\r\n         * 'host' candidate usually comes first, the delay should be minimal.\r\n         * @type {number|null} null if no value has been stored yet\r\n         * @private\r\n         */\r\n        this._gatheringStartedTimestamp = null;\r\n\r\n        /**\r\n         * Local preference for the receive video max frame height.\r\n         *\r\n         * @type {Number|undefined}\r\n         */\r\n        this.localRecvMaxFrameHeight = undefined;\r\n\r\n        /**\r\n         * Indicates whether or not this session is willing to send/receive\r\n         * video media. When set to <tt>false</tt> the underlying peer\r\n         * connection will disable local video transfer and the remote peer will\r\n         * be will be asked to stop sending video via 'content-modify' IQ\r\n         * (the senders attribute of video contents will be adjusted\r\n         * accordingly). Note that this notification is sent only in P2P\r\n         * session, because Jicofo does not support it yet. Obviously when\r\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\r\n         * notification will be sent to resume video transfer on the remote\r\n         * side.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._localVideoActive = true;\r\n\r\n        /**\r\n         * Indicates whether or not the remote peer has video transfer active.\r\n         * When set to <tt>true</tt> it means that remote peer is neither\r\n         * sending nor willing to receive video. In such case we'll ask\r\n         * our peerconnection to stop sending video by calling\r\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\r\n         * <tt>false</tt>.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._remoteVideoActive = true;\r\n\r\n        /**\r\n         * Marks that ICE gathering duration has been reported already. That\r\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\r\n         * conference migration/ICE restart).\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._gatheringReported = false;\r\n\r\n        this.lasticecandidate = false;\r\n        this.closed = false;\r\n\r\n        /**\r\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\r\n         * a peer to peer type of session.\r\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\r\n         * session or <tt>false</tt> if it's a JVB session\r\n         */\r\n        this.isP2P = isP2P;\r\n\r\n        /**\r\n         * Remote preference for the receive video max frame height.\r\n         *\r\n         * @type {Number|undefined}\r\n         */\r\n        this.remoteRecvMaxFrameHeight = undefined;\r\n\r\n        /**\r\n         * The queue used to serialize operations done on the peerconnection.\r\n         *\r\n         * @type {AsyncQueue}\r\n         */\r\n        this.modificationQueue = new AsyncQueue();\r\n\r\n        /**\r\n         * Flag used to guarantee that the connection established event is\r\n         * triggered just once.\r\n         * @type {boolean}\r\n         */\r\n        this.wasConnected = false;\r\n\r\n        /**\r\n         * Keeps track of how long (in ms) it took from ICE start to ICE\r\n         * connect.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.establishmentDuration = undefined;\r\n\r\n        this._xmppListeners = [];\r\n        this._xmppListeners.push(\r\n            connection.addEventListener(\r\n                XmppConnection.Events.CONN_STATUS_CHANGED,\r\n                this.onXmppStatusChanged.bind(this))\r\n        );\r\n\r\n        this._removeSenderVideoConstraintsChangeListener = undefined;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Checks whether or not this session instance is still operational.\r\n     * @private\r\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\r\n     */\r\n    _assertNotEnded() {\r\n        return this.state !== JingleSessionState.ENDED;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     * @param {JingleSessionPCOptions} options  - a set of config options.\r\n     */\r\n    doInitialize(options) {\r\n        this.failICE = Boolean(options.failICE);\r\n        this.lasticecandidate = false;\r\n        this.options = options;\r\n\r\n        /**\r\n         * {@code true} if reconnect is in progress.\r\n         * @type {boolean}\r\n         */\r\n        this.isReconnect = false;\r\n\r\n        /**\r\n         * Set to {@code true} if the connection was ever stable\r\n         * @type {boolean}\r\n         */\r\n        this.wasstable = false;\r\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\r\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\r\n\r\n        const pcOptions = { disableRtx: options.disableRtx };\r\n\r\n        if (options.gatherStats) {\r\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\r\n        }\r\n        pcOptions.capScreenshareBitrate = false;\r\n        pcOptions.enableInsertableStreams = options.enableInsertableStreams;\r\n        pcOptions.videoQuality = options.videoQuality;\r\n\r\n        // codec preference options for jvb connection.\r\n        if (pcOptions.videoQuality) {\r\n            pcOptions.disabledCodec = pcOptions.videoQuality.disabledCodec;\r\n            pcOptions.preferredCodec = pcOptions.videoQuality.preferredCodec;\r\n        }\r\n\r\n        if (this.isP2P) {\r\n            // simulcast needs to be disabled for P2P (121) calls\r\n            pcOptions.disableSimulcast = true;\r\n            pcOptions.disableH264 = options.p2p && options.p2p.disableH264;\r\n            pcOptions.preferH264 = options.p2p && options.p2p.preferH264;\r\n\r\n            // codec preference options for p2p.\r\n            if (options.p2p) {\r\n                // Do not negotiate H246 codec when insertable streams is used because of issues like this -\r\n                // https://bugs.chromium.org/p/webrtc/issues/detail?id=11886\r\n                pcOptions.disabledCodec = options.enableInsertableStreams\r\n                    ? CodecMimeType.H264\r\n                    : options.p2p.disabledCodec;\r\n                pcOptions.preferredCodec = options.p2p.preferredCodec;\r\n            }\r\n\r\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\r\n\r\n            if (typeof abtestSuspendVideo !== 'undefined') {\r\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\r\n            }\r\n        } else {\r\n            // H264 does not support simulcast, so it needs to be disabled.\r\n            pcOptions.disableSimulcast\r\n                = options.disableSimulcast\r\n                    || (options.preferH264 && !options.disableH264);\r\n            pcOptions.preferH264 = options.preferH264;\r\n\r\n            // disable simulcast for screenshare and set the max bitrate to\r\n            // 500Kbps if the testing flag is present in config.js.\r\n            if (options.testing\r\n                && options.testing.capScreenshareBitrate\r\n                && typeof options.testing.capScreenshareBitrate === 'number') {\r\n                pcOptions.capScreenshareBitrate\r\n                    = Math.random()\r\n                    < options.testing.capScreenshareBitrate;\r\n\r\n                // add the capScreenshareBitrate to the permanent properties so\r\n                // that it's included with every event that we send to the\r\n                // analytics backend.\r\n                Statistics.analytics.addPermanentProperties({ capScreenshareBitrate: pcOptions.capScreenshareBitrate });\r\n            }\r\n        }\r\n\r\n        if (options.startSilent) {\r\n            pcOptions.startSilent = true;\r\n        }\r\n\r\n        this.peerconnection\r\n            = this.rtc.createPeerConnection(\r\n                    this._signalingLayer,\r\n                    this.iceConfig,\r\n                    this.isP2P,\r\n                    pcOptions);\r\n\r\n        this.peerconnection.onicecandidate = ev => {\r\n            if (!ev) {\r\n                // There was an incomplete check for ev before which left\r\n                // the last line of the function unprotected from a potential\r\n                // throw of an exception. Consequently, it may be argued that\r\n                // the check is unnecessary. Anyway, I'm leaving it and making\r\n                // the check complete.\r\n                return;\r\n            }\r\n\r\n            // XXX this is broken, candidate is not parsed.\r\n            const candidate = ev.candidate;\r\n            const now = window.performance.now();\r\n\r\n            if (candidate) {\r\n                if (this._gatheringStartedTimestamp === null) {\r\n                    this._gatheringStartedTimestamp = now;\r\n                }\r\n\r\n                // Discard candidates of disabled protocols.\r\n                let protocol = candidate.protocol;\r\n\r\n                if (typeof protocol === 'string') {\r\n                    protocol = protocol.toLowerCase();\r\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\r\n                        if (this.webrtcIceTcpDisable) {\r\n                            return;\r\n                        }\r\n                    } else if (protocol === 'udp') {\r\n                        if (this.webrtcIceUdpDisable) {\r\n                            return;\r\n                        }\r\n                    }\r\n                }\r\n            } else if (!this._gatheringReported) {\r\n                // End of gathering\r\n                Statistics.sendAnalytics(\r\n                    ICE_DURATION,\r\n                    {\r\n                        phase: 'gathering',\r\n                        value: now - this._gatheringStartedTimestamp,\r\n                        p2p: this.isP2P,\r\n                        initiator: this.isInitiator\r\n                    });\r\n                this._gatheringReported = true;\r\n            }\r\n            this.sendIceCandidate(candidate);\r\n        };\r\n\r\n        // Note there is a change in the spec about closed:\r\n        // This value moved into the RTCPeerConnectionState enum in\r\n        // the May 13, 2016 draft of the specification, as it reflects the state\r\n        // of the RTCPeerConnection, not the signaling connection. You now\r\n        // detect a closed connection by checking for connectionState to be\r\n        // \"closed\" instead.\r\n        // I suppose at some point this will be moved to onconnectionstatechange\r\n        this.peerconnection.onsignalingstatechange = () => {\r\n            if (this.peerconnection.signalingState === 'stable') {\r\n                this.wasstable = true;\r\n            } else if (this.peerconnection.signalingState === 'closed'\r\n                || this.peerconnection.connectionState === 'closed') {\r\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * The oniceconnectionstatechange event handler contains the code to\r\n         * execute when the iceconnectionstatechange event, of type Event,\r\n         * is received by this RTCPeerConnection. Such an event is sent when\r\n         * the value of RTCPeerConnection.iceConnectionState changes.\r\n         */\r\n        this.peerconnection.oniceconnectionstatechange = () => {\r\n            const now = window.performance.now();\r\n\r\n            if (!this.isP2P) {\r\n                this.room.connectionTimes[\r\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\r\n                    = now;\r\n            }\r\n            logger.log(\r\n                `(TIME) ICE ${this.peerconnection.iceConnectionState}`\r\n                    + ` P2P? ${this.isP2P}:\\t`,\r\n                now);\r\n\r\n            Statistics.sendAnalytics(\r\n                ICE_STATE_CHANGED,\r\n                {\r\n                    p2p: this.isP2P,\r\n                    state: this.peerconnection.iceConnectionState,\r\n                    'signaling_state': this.peerconnection.signalingState,\r\n                    reconnect: this.isReconnect,\r\n                    value: now\r\n                });\r\n\r\n            this.room.eventEmitter.emit(\r\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\r\n                this,\r\n                this.peerconnection.iceConnectionState);\r\n            switch (this.peerconnection.iceConnectionState) {\r\n            case 'checking':\r\n                this._iceCheckingStartedTimestamp = now;\r\n                break;\r\n            case 'connected':\r\n                // Informs interested parties that the connection has been\r\n                // restored.\r\n                if (this.peerconnection.signalingState === 'stable') {\r\n                    if (this.isReconnect) {\r\n                        this.room.eventEmitter.emit(\r\n                            XMPPEvents.CONNECTION_RESTORED, this);\r\n                    }\r\n                }\r\n\r\n                if (!this.wasConnected && this.wasstable) {\r\n\r\n                    Statistics.sendAnalytics(\r\n                        ICE_DURATION,\r\n                        {\r\n                            phase: 'checking',\r\n                            value: now - this._iceCheckingStartedTimestamp,\r\n                            p2p: this.isP2P,\r\n                            initiator: this.isInitiator\r\n                        });\r\n\r\n                    // Switch between ICE gathering and ICE checking whichever\r\n                    // started first (scenarios are different for initiator\r\n                    // vs responder)\r\n                    const iceStarted\r\n                        = Math.min(\r\n                            this._iceCheckingStartedTimestamp,\r\n                            this._gatheringStartedTimestamp);\r\n\r\n                    this.establishmentDuration = now - iceStarted;\r\n\r\n                    Statistics.sendAnalytics(\r\n                        ICE_DURATION,\r\n                        {\r\n                            phase: 'establishment',\r\n                            value: this.establishmentDuration,\r\n                            p2p: this.isP2P,\r\n                            initiator: this.isInitiator\r\n                        });\r\n\r\n                    this.wasConnected = true;\r\n                    this.room.eventEmitter.emit(\r\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\r\n                }\r\n                this.isReconnect = false;\r\n                break;\r\n            case 'disconnected':\r\n                this.isReconnect = true;\r\n\r\n                // Informs interested parties that the connection has been\r\n                // interrupted.\r\n                if (this.wasstable) {\r\n                    this.room.eventEmitter.emit(\r\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\r\n                }\r\n                break;\r\n            case 'failed':\r\n                this.room.eventEmitter.emit(\r\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\r\n                break;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * The negotiationneeded event is fired whenever we shake the media on the\r\n         * RTCPeerConnection object.\r\n         */\r\n        this.peerconnection.onnegotiationneeded = () => {\r\n            const state = this.peerconnection.signalingState;\r\n            const remoteDescription = this.peerconnection.remoteDescription;\r\n\r\n            if (browser.usesUnifiedPlan() && state === 'stable'\r\n                && remoteDescription && typeof remoteDescription.sdp === 'string') {\r\n                logger.debug(`onnegotiationneeded fired on ${this.peerconnection} in state: ${state}`);\r\n                const workFunction = finishedCallback => {\r\n                    const oldSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                    this._renegotiate()\r\n                        .then(() => {\r\n                            const newSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                            this.notifyMySSRCUpdate(oldSdp, newSdp);\r\n                            finishedCallback();\r\n                        },\r\n                        finishedCallback /* will be called with en error */);\r\n                };\r\n\r\n                this.modificationQueue.push(\r\n                    workFunction,\r\n                    error => {\r\n                        if (error) {\r\n                            logger.error('onnegotiationneeded error', error);\r\n                        } else {\r\n                            logger.debug('onnegotiationneeded executed - OK');\r\n                        }\r\n                    });\r\n            }\r\n        };\r\n\r\n        if (!this.isP2P && options.enableLayerSuspension) {\r\n            // If this is the bridge session, we'll listen for\r\n            // SENDER_VIDEO_CONSTRAINTS_CHANGED events and notify the peer connection\r\n            this._removeSenderVideoConstraintsChangeListener = this.rtc.addListener(\r\n                RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, () => {\r\n                    this.eventEmitter.emit(\r\n                        MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remote preference for receive video max frame height.\r\n     *\r\n     * @returns {Number|undefined}\r\n     */\r\n    getRemoteRecvMaxFrameHeight() {\r\n        if (this.isP2P) {\r\n            return this.remoteRecvMaxFrameHeight;\r\n        }\r\n\r\n        return this.options.enableLayerSuspension ? this.rtc.getSenderVideoConstraints().idealHeight : undefined;\r\n    }\r\n\r\n    /**\r\n     * Sends given candidate in Jingle 'transport-info' message.\r\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\r\n     * @private\r\n     */\r\n    sendIceCandidate(candidate) {\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n        if (candidate && candidate.candidate.length && !this.lasticecandidate) {\r\n            const ice\r\n                = SDPUtil.iceparams(\r\n                    localSDP.media[candidate.sdpMLineIndex], localSDP.session);\r\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\r\n\r\n            if (!(ice && jcand)) {\r\n                const errorMesssage = 'failed to get ice && jcand';\r\n\r\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\r\n                logger.error(errorMesssage);\r\n\r\n                return;\r\n            }\r\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n\r\n            if (this.usedrip) {\r\n                if (this.dripContainer.length === 0) {\r\n                    // start 20ms callout\r\n                    setTimeout(() => {\r\n                        if (this.dripContainer.length === 0) {\r\n                            return;\r\n                        }\r\n                        this.sendIceCandidates(this.dripContainer);\r\n                        this.dripContainer = [];\r\n                    }, 20);\r\n                }\r\n                this.dripContainer.push(candidate);\r\n            } else {\r\n                this.sendIceCandidates([ candidate ]);\r\n            }\r\n        } else {\r\n            logger.log('sendIceCandidate: last candidate.');\r\n\r\n            // FIXME: remember to re-think in ICE-restart\r\n            this.lasticecandidate = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends given candidates in Jingle 'transport-info' message.\r\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\r\n     * candidate instances\r\n     * @private\r\n     */\r\n    sendIceCandidates(candidates) {\r\n        if (!this._assertNotEnded('sendIceCandidates')) {\r\n\r\n            return;\r\n        }\r\n\r\n        logger.log('sendIceCandidates', candidates);\r\n        const cand = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-info',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid });\r\n\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\r\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\r\n            const mline\r\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\r\n\r\n            if (cands.length > 0) {\r\n                const ice\r\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\r\n\r\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\r\n                cand.c('content', {\r\n                    creator: this.initiatorJid === this.localJid\r\n                        ? 'initiator' : 'responder',\r\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\r\n                }).c('transport', ice);\r\n                for (let i = 0; i < cands.length; i++) {\r\n                    const candidate\r\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\r\n\r\n                    // Mangle ICE candidate if 'failICE' test option is enabled\r\n\r\n                    if (this.failICE) {\r\n                        candidate.ip = '1.1.1.1';\r\n                    }\r\n                    cand.c('candidate', candidate).up();\r\n                }\r\n\r\n                // add fingerprint\r\n                const fingerprintLine\r\n                    = SDPUtil.findLine(\r\n                        localSDP.media[mid],\r\n                        'a=fingerprint:', localSDP.session);\r\n\r\n                if (fingerprintLine) {\r\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\r\n\r\n                    tmp.required = true;\r\n                    cand.c(\r\n                        'fingerprint',\r\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\r\n                        .t(tmp.fingerprint);\r\n                    delete tmp.fingerprint;\r\n                    cand.attrs(tmp);\r\n                    cand.up();\r\n                }\r\n                cand.up(); // transport\r\n                cand.up(); // content\r\n            }\r\n        }\r\n\r\n        // might merge last-candidate notification into this, but it is called\r\n        // a lot later. See webrtc issue #2340\r\n        // logger.log('was this the last candidate', this.lasticecandidate);\r\n        this.connection.sendIQ(\r\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\r\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\r\n     * that the ICE connection has entered the failed state. It can then\r\n     * choose to re-create JVB channels and send 'transport-replace' to\r\n     * retry the connection.\r\n     */\r\n    sendIceFailedNotification() {\r\n        const sessionInfo\r\n            = $iq({\r\n                to: this.remoteJid,\r\n                type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'session-info',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid })\r\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\r\n            .t('failed')\r\n            .up();\r\n\r\n        this._bridgeSessionId\r\n            && sessionInfo.c(\r\n                'bridge-session', {\r\n                    xmlns: 'http://jitsi.org/protocol/focus',\r\n                    id: this._bridgeSessionId\r\n                });\r\n\r\n        this.connection.sendIQ2(\r\n            sessionInfo, {\r\n                /*\r\n                 * This message will be often sent when there are connectivity\r\n                 * issues, so make it slightly longer than Prosody's default BOSH\r\n                 * inactivity timeout of 60 seconds.\r\n                 */\r\n                timeout: 65\r\n            })\r\n            .catch(this.newJingleErrorHandler(sessionInfo));\r\n    }\r\n\r\n    /**\r\n     * {@inheritDoc}\r\n     */\r\n    addIceCandidates(elem) {\r\n        if (this.peerconnection.signalingState === 'closed') {\r\n            logger.warn('Ignored add ICE candidate when in closed state');\r\n\r\n            return;\r\n        }\r\n\r\n        const iceCandidates = [];\r\n\r\n        elem.find('>content>transport>candidate')\r\n            .each((idx, candidate) => {\r\n                let line = SDPUtil.candidateFromJingle(candidate);\r\n\r\n                line = line.replace('\\r\\n', '').replace('a=', '');\r\n\r\n                // FIXME this code does not care to handle\r\n                // non-bundle transport\r\n                const rtcCandidate = new RTCIceCandidate({\r\n                    sdpMLineIndex: 0,\r\n\r\n                    // FF comes up with more complex names like audio-23423,\r\n                    // Given that it works on both Chrome and FF without\r\n                    // providing it, let's leave it like this for the time\r\n                    // being...\r\n                    // sdpMid: 'audio',\r\n                    sdpMid: '',\r\n                    candidate: line\r\n                });\r\n\r\n                iceCandidates.push(rtcCandidate);\r\n            });\r\n\r\n        if (!iceCandidates.length) {\r\n            logger.error(\r\n                'No ICE candidates to add ?', elem[0] && elem[0].outerHTML);\r\n\r\n            return;\r\n        }\r\n\r\n        // We want to have this task queued, so that we know it is executed,\r\n        // after the initial sRD/sLD offer/answer cycle was done (based on\r\n        // the assumption that candidates are spawned after the offer/answer\r\n        // and XMPP preserves order).\r\n        const workFunction = finishedCallback => {\r\n            for (const iceCandidate of iceCandidates) {\r\n                this.peerconnection.addIceCandidate(iceCandidate)\r\n                    .then(\r\n                        () => logger.debug('addIceCandidate ok!'),\r\n                        err => logger.error('addIceCandidate failed!', err));\r\n            }\r\n\r\n            finishedCallback();\r\n        };\r\n\r\n        logger.debug(\r\n            `Queued add (${iceCandidates.length}) ICE candidates task...`);\r\n        this.modificationQueue.push(workFunction);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param contents\r\n     */\r\n    readSsrcInfo(contents) {\r\n        const ssrcs = $(contents).find('>description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n        ssrcs.each((i, ssrcElement) => {\r\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\r\n\r\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                if (ssrcElement.hasAttribute('name')) {\r\n                    const sourceName = ssrcElement.getAttribute('name');\r\n\r\n                    this._signalingLayer.setTrackSourceName(ssrc, sourceName);\r\n                }\r\n            }\r\n\r\n            if (this.isP2P) {\r\n                // In P2P all SSRCs are owner by the remote peer\r\n                this._signalingLayer.setSSRCOwner(ssrc, Strophe.getResourceFromJid(this.remoteJid));\r\n            } else {\r\n                $(ssrcElement)\r\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\r\n                    .each((i3, ssrcInfoElement) => {\r\n                        const owner = ssrcInfoElement.getAttribute('owner');\r\n\r\n                        if (owner?.length) {\r\n                            if (isNaN(ssrc) || ssrc < 0) {\r\n                                logger.warn(`${this} Invalid SSRC ${ssrc} value received for ${owner}`);\r\n                            } else {\r\n                                this._signalingLayer.setSSRCOwner(ssrc, getEndpointId(owner));\r\n                            }\r\n                        }\r\n                    });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\r\n     * the recvonly video stream.\r\n     * @deprecated\r\n     */\r\n    generateRecvonlySsrc() {\r\n        if (this.peerconnection) {\r\n            this.peerconnection.generateRecvonlySsrc();\r\n        } else {\r\n            logger.error(\r\n                'Unable to generate recvonly SSRC - no peerconnection');\r\n        }\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Accepts incoming Jingle 'session-initiate' and should send\r\n     * 'session-accept' in result.\r\n     * @param jingleOffer jQuery selector pointing to the jingle element of\r\n     * the offer IQ\r\n     * @param success callback called when we accept incoming session\r\n     * successfully and receive RESULT packet to 'session-accept' sent.\r\n     * @param failure function(error) called if for any reason we fail to accept\r\n     * the incoming offer. 'error' argument can be used to log some details\r\n     * about the error.\r\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\r\n     * the local tracks that will be added, before the offer/answer cycle\r\n     * executes. We allow the localTracks to optionally be passed in so that\r\n     * the addition of the local tracks and the processing of the initial offer\r\n     * can all be done atomically. We want to make sure that any other\r\n     * operations which originate in the XMPP Jingle messages related with\r\n     * this session to be executed with an assumption that the initial\r\n     * offer/answer cycle has been executed already.\r\n     */\r\n    acceptOffer(jingleOffer, success, failure, localTracks) {\r\n        this.setOfferAnswerCycle(\r\n            jingleOffer,\r\n            () => {\r\n                // FIXME we may not care about RESULT packet for session-accept\r\n                // then we should either call 'success' here immediately or\r\n                // modify sendSessionAccept method to do that\r\n                this.sendSessionAccept(() => {\r\n                    success();\r\n                },\r\n                error => {\r\n                    failure(error);\r\n                });\r\n            },\r\n            failure,\r\n            localTracks);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\r\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\r\n     * added, before the offer/answer cycle executes (for the local track\r\n     * addition to be an atomic operation together with the offer/answer).\r\n     */\r\n    invite(localTracks = []) {\r\n        if (!this.isInitiator) {\r\n            throw new Error('Trying to invite from the responder session');\r\n        }\r\n        const workFunction = finishedCallback => {\r\n            const addTracks = [];\r\n            const audioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\r\n            const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\r\n            let tracks = localTracks;\r\n\r\n            // Add only 1 video track at a time. Adding 2 or more video tracks to the peerconnection at the same time\r\n            // makes the browser go into a renegotiation loop by firing 'negotiationneeded' event after every\r\n            // renegotiation.\r\n            if (FeatureFlags.isMultiStreamSupportEnabled() && videoTracks.length > 1) {\r\n                tracks = [ ...audioTracks, videoTracks[0] ];\r\n            }\r\n            for (const track of tracks) {\r\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\r\n            }\r\n            videoTracks.length && videoTracks.splice(0, 1);\r\n\r\n            Promise.all(addTracks)\r\n                .then(() => this.peerconnection.createOffer(this.mediaConstraints))\r\n                .then(offerSdp => this.peerconnection.setLocalDescription(offerSdp))\r\n                .then(() => {\r\n                    // NOTE that the offer is obtained from the localDescription getter as it needs to go though\r\n                    // the transformation chain.\r\n                    this.sendSessionInitiate(this.peerconnection.localDescription.sdp);\r\n                })\r\n                .then(() => {\r\n                    if (videoTracks.length) {\r\n                        return this.addTracks(videoTracks);\r\n                    }\r\n\r\n                    return Promise.resolve();\r\n                })\r\n                .then(() => finishedCallback(), error => finishedCallback(error));\r\n        };\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error('invite error', error);\r\n                } else {\r\n                    logger.debug('invite executed - OK');\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sends 'session-initiate' to the remote peer.\r\n     *\r\n     * NOTE this method is synchronous and we're not waiting for the RESULT\r\n     * response which would delay the startup process.\r\n     *\r\n     * @param {string} offerSdp  - The local session description which will be\r\n     * used to generate an offer.\r\n     * @private\r\n     */\r\n    sendSessionInitiate(offerSdp) {\r\n        let init = $iq({\r\n            to: this.remoteJid,\r\n            type: 'set'\r\n        }).c('jingle', {\r\n            xmlns: 'urn:xmpp:jingle:1',\r\n            action: 'session-initiate',\r\n            initiator: this.initiatorJid,\r\n            sid: this.sid\r\n        });\r\n\r\n        new SDP(offerSdp).toJingle(\r\n            init,\r\n            this.isInitiator ? 'initiator' : 'responder');\r\n        init = init.tree();\r\n        logger.info('Session-initiate: ', init);\r\n        this.connection.sendIQ(init,\r\n            () => {\r\n                logger.info('Got RESULT for \"session-initiate\"');\r\n            },\r\n            error => {\r\n                logger.error('\"session-initiate\" error', error);\r\n            },\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sets the answer received from the remote peer.\r\n     * @param jingleAnswer\r\n     */\r\n    setAnswer(jingleAnswer) {\r\n        if (!this.isInitiator) {\r\n            throw new Error('Trying to set an answer on the responder session');\r\n        }\r\n        this.setOfferAnswerCycle(\r\n            jingleAnswer,\r\n            () => {\r\n                logger.info(`${this} setAnswer - succeeded`);\r\n                if (this.usesUnifiedPlan && browser.isChromiumBased()) {\r\n                    const workFunction = finishedCallback => {\r\n                        // This hack is needed for Chrome to create a decoder for the ssrcs in the remote SDP when\r\n                        // the local endpoint is the offerer and starts muted.\r\n                        const remoteSdp = this.peerconnection.remoteDescription.sdp;\r\n                        const remoteDescription = new RTCSessionDescription({\r\n                            type: 'offer',\r\n                            sdp: remoteSdp\r\n                        });\r\n\r\n                        return this._responderRenegotiate(remoteDescription)\r\n                        .then(() => finishedCallback(), error => finishedCallback(error));\r\n                    };\r\n\r\n                    logger.debug(`${this} Queued responderRenegotiate task`);\r\n                    this.modificationQueue.push(\r\n                        workFunction,\r\n                        error => {\r\n                            if (error) {\r\n                                logger.error(`${this} failed to renegotiate a decoder for muted endpoint ${error}`);\r\n                            } else {\r\n                                logger.debug(`${this} renegotiate a decoder for muted endpoint`);\r\n                            }\r\n                        });\r\n                }\r\n            },\r\n            error => {\r\n                logger.error('setAnswer failed: ', error);\r\n            });\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\r\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\r\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\r\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\r\n     *        of the offer (or answer) IQ\r\n     * @param success callback called when sRD/sLD cycle finishes successfully.\r\n     * @param failure callback called with an error object as an argument if we\r\n     *        fail at any point during setRD, createAnswer, setLD.\r\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\r\n     * the local tracks that will be added, before the offer/answer cycle\r\n     * executes (for the local track addition to be an atomic operation together\r\n     * with the offer/answer).\r\n     */\r\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks = []) {\r\n        const workFunction = finishedCallback => {\r\n            const addTracks = [];\r\n            const audioTracks = localTracks.filter(track => track.getType() === MediaType.AUDIO);\r\n            const videoTracks = localTracks.filter(track => track.getType() === MediaType.VIDEO);\r\n            let tracks = localTracks;\r\n\r\n            // Add only 1 video track at a time. Adding 2 or more video tracks to the peerconnection at the same time\r\n            // makes the browser go into a renegotiation loop by firing 'negotiationneeded' event after every\r\n            // renegotiation.\r\n            if (FeatureFlags.isMultiStreamSupportEnabled() && videoTracks.length > 1) {\r\n                tracks = [ ...audioTracks, videoTracks[0] ];\r\n            }\r\n            for (const track of tracks) {\r\n                addTracks.push(this.peerconnection.addTrack(track, this.isInitiator));\r\n            }\r\n            videoTracks.length && videoTracks.splice(0, 1);\r\n            const newRemoteSdp = this._processNewJingleOfferIq(jingleOfferAnswerIq);\r\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\r\n\r\n            const bridgeSession\r\n                = $(jingleOfferAnswerIq)\r\n                    .find('>bridge-session['\r\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\r\n            const bridgeSessionId = bridgeSession.attr('id');\r\n\r\n            if (bridgeSessionId !== this._bridgeSessionId) {\r\n                this._bridgeSessionId = bridgeSessionId;\r\n            }\r\n\r\n            Promise.all(addTracks)\r\n                .then(() => this._renegotiate(newRemoteSdp.raw))\r\n                .then(() => {\r\n                    if (videoTracks.length) {\r\n                        return this.addTracks(videoTracks);\r\n                    }\r\n\r\n                    return Promise.resolve();\r\n                })\r\n                .then(() => {\r\n                    if (this.state === JingleSessionState.PENDING) {\r\n                        this.state = JingleSessionState.ACTIVE;\r\n\r\n                        // #1 Sync up video transfer active/inactive only after\r\n                        // the initial O/A cycle. We want to adjust the video\r\n                        // media direction only in the local SDP and the Jingle\r\n                        // contents direction included in the initial\r\n                        // offer/answer is mapped to the remote SDP. Jingle\r\n                        // 'content-modify' IQ is processed in a way that it\r\n                        // will only modify local SDP when remote peer is no\r\n                        // longer interested in receiving video content.\r\n                        // Changing media direction in the remote SDP will mess\r\n                        // up our SDP translation chain (simulcast, video mute,\r\n                        // RTX etc.)\r\n                        //\r\n                        // #2 Sends the max frame height if it was set, before the session-initiate/accept\r\n                        if (this.isP2P\r\n                            && (!this._localVideoActive || this.localRecvMaxFrameHeight)) {\r\n                            this.sendContentModify();\r\n                        }\r\n                    }\r\n\r\n                    // Old local SDP will be available when we're setting answer\r\n                    // for the first time, but not when offer and it's fine\r\n                    // since we're generating an answer now it will contain all\r\n                    // our SSRCs\r\n                    if (oldLocalSdp) {\r\n                        const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSdp);\r\n                    }\r\n                })\r\n                .then(() => finishedCallback(), error => finishedCallback(error));\r\n        };\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error(`${this} setOfferAnswerCycle task failed: ${error}`);\r\n                    failure(error);\r\n                } else {\r\n                    logger.debug(`${this} setOfferAnswerCycle task done`);\r\n                    success();\r\n                }\r\n            });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Although it states \"replace transport\" it does accept full Jingle offer\r\n     * which should contain new ICE transport details.\r\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\r\n     *        transport info.\r\n     * @param success callback called when we succeed to accept new offer.\r\n     * @param failure function(error) called when we fail to accept new offer.\r\n     */\r\n    replaceTransport(jingleOfferElem, success, failure) {\r\n        if (this.options.enableForcedReload) {\r\n            const sdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n            this.sendTransportAccept(sdp, success, failure);\r\n            this.room.eventEmitter.emit(XMPPEvents.CONNECTION_RESTARTED, this);\r\n\r\n            return;\r\n        }\r\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\r\n\r\n        // We need to first reject the 'data' section to have the SCTP stack\r\n        // cleaned up to signal the known data channel is now invalid. After\r\n        // that the original offer is set to have the SCTP connection\r\n        // established with the new bridge.\r\n        const originalOffer = jingleOfferElem.clone();\r\n\r\n        jingleOfferElem\r\n            .find('>content[name=\\'data\\']')\r\n            .attr('senders', 'rejected');\r\n\r\n        // Remove all remote sources in order to reset the client's state\r\n        // for the remote MediaStreams. When a conference is moved to\r\n        // another bridge it will start streaming with a sequence number\r\n        // that is not in sync with the most recently seen by the client.\r\n        // The symptoms include frozen or black video and lots of \"failed to\r\n        // unprotect SRTP packets\" in Chrome logs.\r\n        jingleOfferElem\r\n            .find('>content>description>source')\r\n            .remove();\r\n        jingleOfferElem\r\n            .find('>content>description>ssrc-group')\r\n            .remove();\r\n\r\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\r\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\r\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\r\n        // fingerprint has changed by setting an all zeros key.\r\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\r\n\r\n        newFingerprint.attr('hash', 'sha-1');\r\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\r\n\r\n        // First set an offer with a rejected 'data' section\r\n        this.setOfferAnswerCycle(\r\n            jingleOfferElem,\r\n            () => {\r\n                // Now set the original offer(with the 'data' section)\r\n                this.setOfferAnswerCycle(\r\n                    originalOffer,\r\n                    () => {\r\n                        const localSDP\r\n                            = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.sendTransportAccept(localSDP, success, failure);\r\n\r\n                        this.room.eventEmitter.emit(\r\n                            XMPPEvents.ICE_RESTART_SUCCESS,\r\n                            this,\r\n                            originalOffer);\r\n                    },\r\n                    failure);\r\n            },\r\n            failure\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'session-accept' message.\r\n     * @param {function()} success callback called when we receive 'RESULT'\r\n     *        packet for the 'session-accept'\r\n     * @param {function(error)} failure called when we receive an error response\r\n     *        or when the request has timed out.\r\n     * @private\r\n     */\r\n    sendSessionAccept(success, failure) {\r\n        // NOTE: since we're just reading from it, we don't need to be within\r\n        //  the modification queue to access the local description\r\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n        let accept = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'session-accept',\r\n                initiator: this.initiatorJid,\r\n                responder: this.responderJid,\r\n                sid: this.sid });\r\n\r\n        if (this.webrtcIceTcpDisable) {\r\n            localSDP.removeTcpCandidates = true;\r\n        }\r\n        if (this.webrtcIceUdpDisable) {\r\n            localSDP.removeUdpCandidates = true;\r\n        }\r\n        if (this.failICE) {\r\n            localSDP.failICE = true;\r\n        }\r\n        localSDP.toJingle(\r\n            accept,\r\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder',\r\n            null);\r\n\r\n        // Calling tree() to print something useful\r\n        accept = accept.tree();\r\n        logger.info('Sending session-accept', accept);\r\n        this.connection.sendIQ(accept,\r\n            success,\r\n            this.newJingleErrorHandler(accept, error => {\r\n                failure(error);\r\n\r\n                // 'session-accept' is a critical timeout and we'll\r\n                // have to restart\r\n                this.room.eventEmitter.emit(\r\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\r\n            }),\r\n            IQ_TIMEOUT);\r\n\r\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\r\n        // fingerprint and setup) ASAP in order to start the connection\r\n        // establishment.\r\n        //\r\n        // FIXME Flushing the connection at this point triggers an issue with\r\n        // BOSH request handling in Prosody on slow connections.\r\n        //\r\n        // The problem is that this request will be quite large and it may take\r\n        // time before it reaches Prosody. In the meantime Strophe may decide\r\n        // to send the next one. And it was observed that a small request with\r\n        // 'transport-info' usually follows this one. It does reach Prosody\r\n        // before the previous one was completely received. 'rid' on the server\r\n        // is increased and Prosody ignores the request with 'session-accept'.\r\n        // It will never reach Jicofo and everything in the request table is\r\n        // lost. Removing the flush does not guarantee it will never happen, but\r\n        // makes it much less likely('transport-info' is bundled with\r\n        // 'session-accept' and any immediate requests).\r\n        //\r\n        // this.connection.flush();\r\n    }\r\n\r\n    /**\r\n     * Will send 'content-modify' IQ in order to ask the remote peer to\r\n     * either stop or resume sending video media or to adjust sender's video constraints.\r\n     * @private\r\n     */\r\n    sendContentModify() {\r\n        const maxFrameHeight = this.localRecvMaxFrameHeight;\r\n        const senders = this._localVideoActive ? 'both' : 'none';\r\n\r\n        let sessionModify\r\n            = $iq({\r\n                to: this.remoteJid,\r\n                type: 'set'\r\n            })\r\n                .c('jingle', {\r\n                    xmlns: 'urn:xmpp:jingle:1',\r\n                    action: 'content-modify',\r\n                    initiator: this.initiatorJid,\r\n                    sid: this.sid\r\n                })\r\n                .c('content', {\r\n                    name: 'video',\r\n                    senders\r\n                });\r\n\r\n        if (typeof maxFrameHeight !== 'undefined') {\r\n            sessionModify = sessionModify\r\n                .c('max-frame-height', { xmlns: 'http://jitsi.org/jitmeet/video' })\r\n                .t(maxFrameHeight);\r\n        }\r\n\r\n        logger.info(`${this} sending content-modify, video senders: ${senders}, max frame height: ${maxFrameHeight}`);\r\n\r\n        this.connection.sendIQ(\r\n            sessionModify,\r\n            null,\r\n            this.newJingleErrorHandler(sessionModify),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Adjust the preference for max video frame height that the local party is willing to receive. Signals\r\n     * the remote party.\r\n     *\r\n     * @param {Number} maxFrameHeight - the new value to set.\r\n     */\r\n    setReceiverVideoConstraint(maxFrameHeight) {\r\n        logger.info(`${this} setReceiverVideoConstraint - max frame height: ${maxFrameHeight}`);\r\n\r\n        this.localRecvMaxFrameHeight = maxFrameHeight;\r\n\r\n        if (this.isP2P) {\r\n            // Tell the remote peer about our receive constraint. If Jingle session is not yet active the state will\r\n            // be synced after offer/answer.\r\n            if (this.state === JingleSessionState.ACTIVE) {\r\n                this.sendContentModify();\r\n            }\r\n        } else {\r\n            this.rtc.setReceiverVideoConstraint(maxFrameHeight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'transport-accept' message which is a response to\r\n     * 'transport-replace'.\r\n     * @param localSDP the 'SDP' object with local session description\r\n     * @param success callback called when we receive 'RESULT' packet for\r\n     *        'transport-replace'\r\n     * @param failure function(error) called when we receive an error response\r\n     *        or when the request has timed out.\r\n     * @private\r\n     */\r\n    sendTransportAccept(localSDP, success, failure) {\r\n        let transportAccept = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-accept',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            });\r\n\r\n        localSDP.media.forEach((medialines, idx) => {\r\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\r\n\r\n            transportAccept.c('content',\r\n                {\r\n                    creator:\r\n                        this.initiatorJid === this.localJid\r\n                            ? 'initiator'\r\n                            : 'responder',\r\n                    name: mline.media\r\n                }\r\n            );\r\n            localSDP.transportToJingle(idx, transportAccept);\r\n            transportAccept.up();\r\n        });\r\n\r\n        // Calling tree() to print something useful to the logger\r\n        transportAccept = transportAccept.tree();\r\n        logger.info('Sending transport-accept: ', transportAccept);\r\n\r\n        this.connection.sendIQ(transportAccept,\r\n            success,\r\n            this.newJingleErrorHandler(transportAccept, failure),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sends Jingle 'transport-reject' message which is a response to\r\n     * 'transport-replace'.\r\n     * @param success callback called when we receive 'RESULT' packet for\r\n     *        'transport-replace'\r\n     * @param failure function(error) called when we receive an error response\r\n     *        or when the request has timed out.\r\n     *\r\n     * FIXME method should be marked as private, but there's some spaghetti that\r\n     *       needs to be fixed prior doing that\r\n     */\r\n    sendTransportReject(success, failure) {\r\n        // Send 'transport-reject', so that the focus will\r\n        // know that we've failed\r\n        let transportReject = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'transport-reject',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            });\r\n\r\n        transportReject = transportReject.tree();\r\n        logger.info('Sending \\'transport-reject', transportReject);\r\n\r\n        this.connection.sendIQ(transportReject,\r\n            success,\r\n            this.newJingleErrorHandler(transportReject, failure),\r\n            IQ_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Sets the maximum bitrates on the local video track. Bitrate values from\r\n     * videoQuality settings in config.js will be used for configuring the sender.\r\n     * @returns {Promise<void>} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n    setSenderMaxBitrates() {\r\n        if (this._assertNotEnded()) {\r\n            return this.peerconnection.setMaxBitRate();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Sets the resolution constraint on the local camera track.\r\n     * @param {number} maxFrameHeight - The user preferred max frame height.\r\n     * @returns {Promise} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n     setSenderVideoConstraint(maxFrameHeight, sourceName = null) {\r\n        if (this._assertNotEnded()) {\r\n            logger.info(`${this} setSenderVideoConstraint: ${maxFrameHeight}, sourceName: ${sourceName}`);\r\n\r\n            const jitsiLocalTrack = sourceName\r\n                ? this.rtc.getLocalVideoTracks().find(track => track.getSourceName() === sourceName)\r\n                : this.rtc.getLocalVideoTrack();\r\n\r\n            return this.peerconnection.setSenderVideoConstraints(maxFrameHeight, jitsiLocalTrack);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Sets the degradation preference on the video sender. This setting determines if\r\n     * resolution or framerate will be preferred when bandwidth or cpu is constrained.\r\n     * @returns {Promise<void>} promise that will be resolved when the operation is\r\n     * successful and rejected otherwise.\r\n     */\r\n    setSenderVideoDegradationPreference() {\r\n        if (this._assertNotEnded()) {\r\n            return this.peerconnection.setSenderVideoDegradationPreference();\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    terminate(success, failure, options) {\r\n        if (this.state === JingleSessionState.ENDED) {\r\n            return;\r\n        }\r\n\r\n        if (!options || Boolean(options.sendSessionTerminate)) {\r\n            let sessionTerminate\r\n                = $iq({\r\n                    to: this.remoteJid,\r\n                    type: 'set'\r\n                })\r\n                    .c('jingle', {\r\n                        xmlns: 'urn:xmpp:jingle:1',\r\n                        action: 'session-terminate',\r\n                        initiator: this.initiatorJid,\r\n                        sid: this.sid\r\n                    })\r\n                    .c('reason')\r\n                    .c((options && options.reason) || 'success')\r\n                    .up();\r\n\r\n            if (options && options.reasonDescription) {\r\n                sessionTerminate\r\n                    .c('text')\r\n                    .t(options.reasonDescription)\r\n                    .up()\r\n                    .up();\r\n            } else {\r\n                sessionTerminate.up();\r\n            }\r\n\r\n            this._bridgeSessionId\r\n                && sessionTerminate.c(\r\n                    'bridge-session', {\r\n                        xmlns: 'http://jitsi.org/protocol/focus',\r\n                        id: this._bridgeSessionId,\r\n                        restart: options && options.requestRestart === true\r\n                    }).up();\r\n\r\n            // Calling tree() to print something useful\r\n            sessionTerminate = sessionTerminate.tree();\r\n            logger.info('Sending session-terminate', sessionTerminate);\r\n            this.connection.sendIQ(\r\n                sessionTerminate,\r\n                success,\r\n                this.newJingleErrorHandler(sessionTerminate, failure),\r\n                IQ_TIMEOUT);\r\n        } else {\r\n            logger.info(`Skipped sending session-terminate for ${this}`);\r\n        }\r\n\r\n        // this should result in 'onTerminated' being called by strope.jingle.js\r\n        this.connection.jingle.terminate(this.sid);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param reasonCondition\r\n     * @param reasonText\r\n     */\r\n    onTerminated(reasonCondition, reasonText) {\r\n        // Do something with reason and reasonCondition when we start to care\r\n        // this.reasonCondition = reasonCondition;\r\n        // this.reasonText = reasonText;\r\n        logger.info(`Session terminated ${this}`, reasonCondition, reasonText);\r\n\r\n        this._xmppListeners.forEach(removeListener => removeListener());\r\n        this._xmppListeners = [];\r\n\r\n        if (this._removeSenderVideoConstraintsChangeListener) {\r\n            this._removeSenderVideoConstraintsChangeListener();\r\n        }\r\n\r\n        this.close();\r\n    }\r\n\r\n    /**\r\n     * Handles XMPP connection state changes.\r\n     *\r\n     * @param {XmppConnection.Status} status - The new status.\r\n     */\r\n    onXmppStatusChanged(status) {\r\n        if (status === XmppConnection.Status.CONNECTED && this._cachedOldLocalSdp) {\r\n            logger.info('Sending SSRC update on reconnect');\r\n            this.notifyMySSRCUpdate(\r\n                this._cachedOldLocalSdp,\r\n                this._cachedNewLocalSdp);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse the information from the xml sourceAddElem and translate it\r\n     *  into sdp lines\r\n     * @param {jquery xml element} sourceAddElem the source-add\r\n     *  element from jingle\r\n     * @param {SDP object} currentRemoteSdp the current remote\r\n     *  sdp (as of this new source-add)\r\n     * @returns {list} a list of SDP line strings that should\r\n     *  be added to the remote SDP\r\n     */\r\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\r\n        const addSsrcInfo = [];\r\n        const self = this;\r\n\r\n        $(sourceAddElem).each((i1, content) => {\r\n            const name = $(content).attr('name');\r\n            let lines = '';\r\n\r\n            $(content)\r\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n                .each(function() {\r\n                    // eslint-disable-next-line no-invalid-this\r\n                    const semantics = this.getAttribute('semantics');\r\n                    const ssrcs\r\n                        = $(this) // eslint-disable-line no-invalid-this\r\n                            .find('>source')\r\n                            .map(function() {\r\n                                // eslint-disable-next-line no-invalid-this\r\n                                return this.getAttribute('ssrc');\r\n                            })\r\n                            .get();\r\n\r\n                    if (ssrcs.length) {\r\n                        lines += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\r\n                    }\r\n                });\r\n\r\n            // handles both >source and >description>source\r\n            const tmp\r\n                = $(content).find(\r\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n            /* eslint-disable no-invalid-this */\r\n            tmp.each(function() {\r\n                const ssrc = $(this).attr('ssrc');\r\n\r\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\r\n\r\n                    // Do not print the warning for unified plan p2p case since ssrcs are never removed from the SDP.\r\n                    !(self.usesUnifiedPlan && self.isP2P)\r\n                        && logger.warn(`${self} Source-add request for existing SSRC: ${ssrc}`);\r\n\r\n                    return;\r\n                }\r\n\r\n                // eslint-disable-next-line newline-per-chained-call\r\n                $(this).find('>parameter').each(function() {\r\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\r\n                    if ($(this).attr('value') && $(this).attr('value').length) {\r\n                        lines += `:${$(this).attr('value')}`;\r\n                    }\r\n                    lines += '\\r\\n';\r\n                });\r\n            });\r\n\r\n            let midFound = false;\r\n\r\n            /* eslint-enable no-invalid-this */\r\n            currentRemoteSdp.media.forEach((media, i2) => {\r\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\r\n                    return;\r\n                }\r\n                if (!addSsrcInfo[i2]) {\r\n                    addSsrcInfo[i2] = '';\r\n                }\r\n                addSsrcInfo[i2] += lines;\r\n                midFound = true;\r\n            });\r\n\r\n            // In p2p unified mode with multi-stream enabled, the new sources will have content name that doesn't exist\r\n            // in the current remote description. Add a new m-line for this newly signaled source.\r\n            if (!midFound && this.isP2P && FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                addSsrcInfo[name] = lines;\r\n            }\r\n        });\r\n\r\n        return addSsrcInfo;\r\n    }\r\n\r\n    /**\r\n     * Handles a Jingle source-add message for this Jingle session.\r\n     * @param elem An array of Jingle \"content\" elements.\r\n     */\r\n    addRemoteStream(elem) {\r\n        this._addOrRemoveRemoteStream(true /* add */, elem);\r\n    }\r\n\r\n    /**\r\n     * Handles a Jingle source-remove message for this Jingle session.\r\n     * @param elem An array of Jingle \"content\" elements.\r\n     */\r\n    removeRemoteStream(elem) {\r\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\r\n    }\r\n\r\n    /**\r\n     * Handles the deletion of SSRCs associated with a remote user from the remote description when the user leaves.\r\n     *\r\n     * @param {string} id Endpoint id of the participant that has left the call.\r\n     * @returns {void}\r\n     */\r\n     removeRemoteStreamsOnLeave(id) {\r\n        const workFunction = finishCallback => {\r\n            const removeSsrcInfo = this.peerconnection.getRemoteSourceInfoByParticipant(id);\r\n\r\n            if (removeSsrcInfo.length) {\r\n                const oldLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n                const newRemoteSdp = this._processRemoteRemoveSource(removeSsrcInfo);\r\n\r\n                this._renegotiate(newRemoteSdp.raw)\r\n                    .then(() => {\r\n                        const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                        this.notifyMySSRCUpdate(oldLocalSdp, newLocalSDP);\r\n                        finishCallback();\r\n                    })\r\n                    .catch(err => finishCallback(err));\r\n            } else {\r\n                finishCallback();\r\n            }\r\n        };\r\n\r\n        logger.debug(`${this} Queued removeRemoteStreamsOnLeave task for participant ${id}`);\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error(`${this} removeRemoteStreamsOnLeave error:`, error);\r\n                } else {\r\n                    logger.info(`${this} removeRemoteStreamsOnLeave done!`);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\r\n     * Jingle session.\r\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\r\n     * otherwise.\r\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\r\n     * @private\r\n     */\r\n    _addOrRemoveRemoteStream(isAdd, elem) {\r\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\r\n\r\n        if (isAdd) {\r\n            this.readSsrcInfo(elem);\r\n        }\r\n\r\n        const workFunction = finishedCallback => {\r\n            if (!this.peerconnection.localDescription\r\n                || !this.peerconnection.localDescription.sdp) {\r\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\r\n\r\n                logger.error(errMsg);\r\n                finishedCallback(errMsg);\r\n\r\n                return;\r\n            }\r\n\r\n            logger.log(`Processing ${logPrefix}`);\r\n            logger.log(\r\n                'ICE connection state: ',\r\n                this.peerconnection.iceConnectionState);\r\n\r\n            const oldLocalSdp\r\n                = new SDP(this.peerconnection.localDescription.sdp);\r\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\r\n            const addOrRemoveSsrcInfo\r\n                = isAdd\r\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\r\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\r\n            const newRemoteSdp\r\n                = isAdd\r\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\r\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\r\n\r\n            // Add a workaround for a bug in Chrome (unified plan) for p2p connection. When the media direction on\r\n            // the transceiver goes from \"inactive\" (both users join muted) to \"recvonly\" (peer unmutes), the browser\r\n            // doesn't seem to create a decoder if the signaling state changes from \"have-local-offer\" to \"stable\".\r\n            // Therefore, initiate a responder renegotiate even if the endpoint is the offerer to workaround this issue.\r\n            // TODO - open a chrome bug and update the comments.\r\n            const remoteDescription = new RTCSessionDescription({\r\n                type: 'offer',\r\n                sdp: newRemoteSdp.raw\r\n            });\r\n            const promise = isAdd && this.usesUnifiedPlan && this.isP2P && browser.isChromiumBased()\r\n                ? this._responderRenegotiate(remoteDescription)\r\n                : this._renegotiate(newRemoteSdp.raw);\r\n\r\n            promise.then(() => {\r\n                const newLocalSdp = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                    logger.log(\r\n                        `${logPrefix} - OK, SDPs: `, oldLocalSdp, newLocalSdp);\r\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\r\n                    finishedCallback();\r\n                }, error => {\r\n                    logger.error(`${logPrefix} failed:`, error);\r\n                    finishedCallback(error);\r\n                });\r\n        };\r\n\r\n        // Queue and execute\r\n        this.modificationQueue.push(workFunction);\r\n    }\r\n\r\n    /**\r\n     * Takes in a jingle offer iq, returns the new sdp offer\r\n     * @param {jquery xml element} offerIq the incoming offer\r\n     * @returns {SDP object} the jingle offer translated to SDP\r\n     */\r\n    _processNewJingleOfferIq(offerIq) {\r\n        const remoteSdp = new SDP('');\r\n\r\n        if (this.webrtcIceTcpDisable) {\r\n            remoteSdp.removeTcpCandidates = true;\r\n        }\r\n        if (this.webrtcIceUdpDisable) {\r\n            remoteSdp.removeUdpCandidates = true;\r\n        }\r\n        if (this.failICE) {\r\n            remoteSdp.failICE = true;\r\n        }\r\n\r\n        remoteSdp.fromJingle(offerIq);\r\n        this.readSsrcInfo($(offerIq).find('>content'));\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Remove the given ssrc lines from the current remote sdp\r\n     * @param {list} removeSsrcInfo a list of SDP line strings that\r\n     *  should be removed from the remote SDP\r\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\r\n     *  in removeSsrcInfo\r\n     */\r\n    _processRemoteRemoveSource(removeSsrcInfo) {\r\n        const remoteSdp = this.usesUnifiedPlan\r\n            ? new SDP(this.peerconnection.peerconnection.remoteDescription.sdp)\r\n            : new SDP(this.peerconnection.remoteDescription.sdp);\r\n\r\n        removeSsrcInfo.forEach((lines, idx) => {\r\n            // eslint-disable-next-line no-param-reassign\r\n            lines = lines.split('\\r\\n');\r\n            lines.pop(); // remove empty last element;\r\n            if (this.usesUnifiedPlan) {\r\n                let mid;\r\n\r\n                lines.forEach(line => {\r\n                    mid = remoteSdp.media.findIndex(mLine => mLine.includes(line));\r\n\r\n                    if (mid > -1) {\r\n                        remoteSdp.media[mid] = remoteSdp.media[mid].replace(`${line}\\r\\n`, '');\r\n                        if (this.isP2P) {\r\n                            const mediaType = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0])?.media;\r\n                            const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, false);\r\n\r\n                            [ MediaDirection.SENDRECV, MediaDirection.SENDONLY ].forEach(direction => {\r\n                                remoteSdp.media[mid] = remoteSdp.media[mid]\r\n                                    .replace(`a=${direction}`, `a=${desiredDirection}`);\r\n                            });\r\n                        } else {\r\n                            // Jvb connections will have direction set to 'sendonly' for the remote sources.\r\n                            remoteSdp.media[mid] = remoteSdp.media[mid]\r\n                                .replace(`a=${MediaDirection.SENDONLY}`, `a=${MediaDirection.INACTIVE}`);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // Reject the m-line so that the browser removes the associated transceiver from the list of available\r\n                // transceivers. This will prevent the client from trying to re-use these inactive transceivers when\r\n                // additional video sources are added to the peerconnection.\r\n                if (mid > -1 && !this.isP2P && FeatureFlags.isMultiStreamSupportEnabled()) {\r\n                    const { media, port } = SDPUtil.parseMLine(remoteSdp.media[mid].split('\\r\\n')[0]);\r\n\r\n                    remoteSdp.media[mid] = remoteSdp.media[mid].replace(`m=${media} ${port}`, `m=${media} 0`);\r\n                }\r\n            } else {\r\n                lines.forEach(line => {\r\n                    remoteSdp.media[idx] = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\r\n                });\r\n            }\r\n        });\r\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Add the given ssrc lines to the current remote sdp\r\n     * @param {list} addSsrcInfo a list of SDP line strings that\r\n     *  should be added to the remote SDP\r\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\r\n     *  in removeSsrcInfo\r\n     */\r\n    _processRemoteAddSource(addSsrcInfo) {\r\n        let remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\r\n\r\n        // Add a new m-line in the remote description if the source info for a secondary video source is recceived from\r\n        // the remote p2p peer when multi-stream support is enabled.\r\n        if (addSsrcInfo.length > remoteSdp.media.length\r\n            && FeatureFlags.isSourceNameSignalingEnabled()\r\n            && this.isP2P\r\n            && this.usesUnifiedPlan) {\r\n            remoteSdp.addMlineForNewLocalSource(MediaType.VIDEO);\r\n            remoteSdp = new SDP(remoteSdp.raw);\r\n        }\r\n        addSsrcInfo.forEach((lines, idx) => {\r\n            remoteSdp.media[idx] += lines;\r\n\r\n            // Make sure to change the direction to 'sendrecv/sendonly' only for p2p connections. For jvb connections,\r\n            // a new m-line is added for the new remote sources.\r\n            if (this.isP2P && this.usesUnifiedPlan) {\r\n                const mediaType = SDPUtil.parseMLine(remoteSdp.media[idx].split('\\r\\n')[0])?.media;\r\n                const desiredDirection = this.peerconnection.getDesiredMediaDirection(mediaType, true);\r\n\r\n                [ MediaDirection.RECVONLY, MediaDirection.INACTIVE ].forEach(direction => {\r\n                    remoteSdp.media[idx] = remoteSdp.media[idx]\r\n                        .replace(`a=${direction}`, `a=${desiredDirection}`);\r\n                });\r\n            }\r\n        });\r\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\r\n\r\n        return remoteSdp;\r\n    }\r\n\r\n    /**\r\n     * Do a new o/a flow using the existing remote description\r\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\r\n     *  to use.  If not provided, the remote sdp from the\r\n     *  peerconnection will be used\r\n     * @returns {Promise} promise which resolves when the\r\n     *  o/a flow is complete with no arguments or\r\n     *  rejects with an error {string}\r\n     */\r\n    _renegotiate(optionalRemoteSdp) {\r\n        if (this.peerconnection.signalingState === 'closed') {\r\n            const error = new Error('Attempted to renegotiate in state closed');\r\n\r\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        const remoteSdp\r\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\r\n\r\n        if (!remoteSdp) {\r\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\r\n\r\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n\r\n        const remoteDescription = new RTCSessionDescription({\r\n            type: this.isInitiator ? 'answer' : 'offer',\r\n            sdp: remoteSdp\r\n        });\r\n\r\n        if (this.isInitiator) {\r\n            return this._initiatorRenegotiate(remoteDescription);\r\n        }\r\n\r\n        return this._responderRenegotiate(remoteDescription);\r\n    }\r\n\r\n    /**\r\n     * Renegotiate cycle implementation for the responder case.\r\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\r\n     * which will be used as remote description in the cycle.\r\n     * @private\r\n     */\r\n    _responderRenegotiate(remoteDescription) {\r\n        logger.debug('Renegotiate: setting remote description');\r\n\r\n        return this.peerconnection.setRemoteDescription(remoteDescription)\r\n            .then(() => {\r\n                logger.debug('Renegotiate: creating answer');\r\n\r\n                return this.peerconnection.createAnswer(this.mediaConstraints)\r\n                    .then(answer => {\r\n                        logger.debug('Renegotiate: setting local description');\r\n\r\n                        return this.peerconnection.setLocalDescription(answer);\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Renegotiate cycle implementation for the initiator's case.\r\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\r\n     * which will be used as remote description in the cycle.\r\n     * @private\r\n     */\r\n    _initiatorRenegotiate(remoteDescription) {\r\n        logger.debug('Renegotiate: creating offer');\r\n\r\n        return this.peerconnection.createOffer(this.mediaConstraints)\r\n            .then(offer => {\r\n                logger.debug('Renegotiate: setting local description');\r\n\r\n                return this.peerconnection.setLocalDescription(offer)\r\n                    .then(() => {\r\n                        logger.debug(\r\n                            'Renegotiate: setting remote description');\r\n\r\n                        // eslint-disable-next-line max-len\r\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\r\n                    });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Adds a new track to the peerconnection. This method needs to be called only when a secondary JitsiLocalTrack is\r\n     * being added to the peerconnection for the first time.\r\n     *\r\n     * @param {Array<JitsiLocalTrack>} localTracks - Tracks to be added to the peer connection.\r\n     * @returns {Promise<void>} that resolves when the track is successfully added to the peerconnection, rejected\r\n     * otherwise.\r\n     */\r\n    addTracks(localTracks = null) {\r\n        if (!FeatureFlags.isMultiStreamSupportEnabled()\r\n            || !localTracks?.length\r\n            || localTracks.find(track => track.getType() !== MediaType.VIDEO)) {\r\n            return Promise.reject(new Error('Multiple tracks of the given media type are not supported'));\r\n        }\r\n\r\n        const replaceTracks = [];\r\n        const workFunction = finishedCallback => {\r\n            const oldLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n            const remoteSdp = new SDP(this.peerconnection.peerconnection.remoteDescription.sdp);\r\n\r\n            // Add transceivers by adding a new mline in the remote description for each track.\r\n            for (const track of localTracks) {\r\n                remoteSdp.addMlineForNewLocalSource(track.getType());\r\n            }\r\n\r\n            const remoteDescription = new RTCSessionDescription({\r\n                type: 'offer',\r\n                sdp: remoteSdp.raw\r\n            });\r\n\r\n            // Always initiate a responder renegotiate since the new m-line is added to remote SDP.\r\n            this._responderRenegotiate(remoteDescription)\r\n                .then(() => {\r\n                    // Replace the tracks on the newly generated transceivers.\r\n                    for (const track of localTracks) {\r\n                        replaceTracks.push(this.peerconnection.replaceTrack(null, track));\r\n                    }\r\n\r\n                    return Promise.all(replaceTracks);\r\n                })\r\n\r\n                // Trigger a renegotiation here since renegotiations are suppressed at TPC.replaceTrack for screenshare\r\n                // tracks. This is done here so that presence for screenshare tracks is sent before signaling.\r\n                .then(() => this._renegotiate())\r\n                .then(() => {\r\n                    const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                    // Signal the new sources to the peer.\r\n                    this.notifyMySSRCUpdate(oldLocalSDP, newLocalSDP);\r\n                    finishedCallback();\r\n                })\r\n                .catch(error => finishedCallback(error));\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            logger.debug(`${this} Queued renegotiation after addTrack`);\r\n\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        logger.error(`${this} renegotiation after addTrack error`, error);\r\n                        reject(error);\r\n                    } else {\r\n                        logger.debug(`${this} renegotiation after addTrack executed - OK`);\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\r\n     * offer/answer cycle after both operations are done. Either\r\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\r\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\r\n     * <tt>oldTrack</tt>\r\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\r\n     * replaced\r\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\r\n     * @returns {Promise} which resolves once the replacement is complete\r\n     *  with no arguments or rejects with an error {string}\r\n     */\r\n    replaceTrack(oldTrack, newTrack) {\r\n        const workFunction = finishedCallback => {\r\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\r\n\r\n            if (browser.usesPlanB()) {\r\n                // NOTE the code below assumes that no more than 1 video track\r\n                // can be added to the peer connection.\r\n                // Transition from camera to desktop share\r\n                // or transition from one camera source to another.\r\n                if (this.peerconnection.options.capScreenshareBitrate\r\n                    && oldTrack && newTrack && newTrack?.isVideoTrack()) {\r\n                    // Clearing current primary SSRC will make\r\n                    // the SdpConsistency generate a new one which will result\r\n                    // with:\r\n                    // 1. source-remove for the old video stream.\r\n                    // 2. source-add for the new video stream.\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n                }\r\n\r\n                // Transition from no video to video (unmute).\r\n                if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\r\n                    // Clearing current primary SSRC will make\r\n                    // the SdpConsistency generate a new one which will result\r\n                    // with:\r\n                    // 1. source-remove for the recvonly\r\n                    // 2. source-add for the new video stream\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n\r\n                // Transition from video to no video\r\n                } else if (oldTrack && oldTrack?.isVideoTrack() && !newTrack) {\r\n                    // Clearing current primary SSRC and generating the recvonly\r\n                    // will result in:\r\n                    // 1. source-remove for the old video stream\r\n                    // 2. source-add for the recvonly stream\r\n                    this.peerconnection.clearRecvonlySsrc();\r\n                    this.peerconnection.generateRecvonlySsrc();\r\n                }\r\n            }\r\n\r\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\r\n                .then(shouldRenegotiate => {\r\n                    let promise = Promise.resolve();\r\n\r\n                    if (shouldRenegotiate\r\n                        && (oldTrack || newTrack)\r\n                        && this.state === JingleSessionState.ACTIVE) {\r\n                        promise = this._renegotiate().then(() => {\r\n                            const newLocalSDP = new SDP(this.peerconnection.localDescription.sdp);\r\n\r\n                            this.notifyMySSRCUpdate(new SDP(oldLocalSdp), newLocalSDP);\r\n                        });\r\n                    }\r\n\r\n                    return promise.then(() => {\r\n                        if (newTrack && newTrack.isVideoTrack()) {\r\n                            // FIXME set all sender parameters in one go?\r\n                            // Set the degradation preference on the new video sender.\r\n                            return this.peerconnection.setSenderVideoDegradationPreference()\r\n\r\n                                // Apply the cached video constraints on the new video sender.\r\n                                .then(() => this.peerconnection.setSenderVideoConstraint())\r\n                                .then(() => this.peerconnection.setMaxBitRate());\r\n                        }\r\n                    });\r\n                })\r\n                .then(() => finishedCallback(), error => finishedCallback(error));\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        logger.error('Replace track error:', error);\r\n                        reject(error);\r\n                    } else {\r\n                        logger.info('Replace track done!');\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Parse the information from the xml sourceRemoveElem and translate it\r\n     *  into sdp lines\r\n     * @param {jquery xml element} sourceRemoveElem the source-remove\r\n     *  element from jingle\r\n     * @param {SDP object} currentRemoteSdp the current remote\r\n     *  sdp (as of this new source-remove)\r\n     * @returns {list} a list of SDP line strings that should\r\n     *  be removed from the remote SDP\r\n     */\r\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\r\n        const removeSsrcInfo = [];\r\n\r\n        $(sourceRemoveElem).each((i1, content) => {\r\n            const name = $(content).attr('name');\r\n            let lines = '';\r\n\r\n            $(content)\r\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\r\n                .each(function() {\r\n                    /* eslint-disable no-invalid-this */\r\n                    const semantics = this.getAttribute('semantics');\r\n                    const ssrcs\r\n                        = $(this)\r\n                            .find('>source')\r\n                            .map(function() {\r\n                                return this.getAttribute('ssrc');\r\n                            })\r\n                            .get();\r\n\r\n                    if (ssrcs.length) {\r\n                        lines\r\n                            += `a=ssrc-group:${semantics} ${\r\n                                ssrcs.join(' ')}\\r\\n`;\r\n                    }\r\n\r\n                    /* eslint-enable no-invalid-this */\r\n                });\r\n            const ssrcs = [];\r\n\r\n            // handles both >source and >description>source versions\r\n            const tmp\r\n                = $(content).find(\r\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\r\n\r\n            tmp.each(function() {\r\n                // eslint-disable-next-line no-invalid-this\r\n                const ssrc = $(this).attr('ssrc');\r\n\r\n                ssrcs.push(ssrc);\r\n            });\r\n            currentRemoteSdp.media.forEach((media, i2) => {\r\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\r\n                    return;\r\n                }\r\n                if (!removeSsrcInfo[i2]) {\r\n                    removeSsrcInfo[i2] = '';\r\n                }\r\n                ssrcs.forEach(ssrc => {\r\n                    const ssrcLines\r\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\r\n\r\n                    if (ssrcLines.length) {\r\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\r\n                    }\r\n                });\r\n                removeSsrcInfo[i2] += lines;\r\n            });\r\n        });\r\n\r\n        return removeSsrcInfo;\r\n    }\r\n\r\n    /**\r\n     * Will print an error if there is any difference, between the SSRCs given\r\n     * in the <tt>oldSDP</tt> and the ones currently described in\r\n     * the peerconnection's local description.\r\n     * @param {string} operationName the operation's name which will be printed\r\n     * in the error message.\r\n     * @param {SDP} oldSDP the old local SDP which will be compared with\r\n     * the current one.\r\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\r\n     * otherwise.\r\n     * @private\r\n     */\r\n    _verifyNoSSRCChanged(operationName, oldSDP) {\r\n        const currentLocalSDP\r\n            = new SDP(this.peerconnection.localDescription.sdp);\r\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\r\n        const addedMedia = sdpDiff.getNewMedia();\r\n\r\n        if (Object.keys(addedMedia).length) {\r\n            logger.error(\r\n                `${this} - some SSRC were added on ${operationName}`,\r\n                addedMedia);\r\n\r\n            return false;\r\n        }\r\n\r\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\r\n        const removedMedia = sdpDiff.getNewMedia();\r\n\r\n        if (Object.keys(removedMedia).length) {\r\n            logger.error(\r\n                `${this} - some SSRCs were removed on ${operationName}`,\r\n                removedMedia);\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Adds local track back to this session, as part of the unmute operation.\r\n     * @param {JitsiLocalTrack} track\r\n     * @return {Promise} a promise that will resolve once the local track is\r\n     * added back to this session and renegotiation succeeds. Will be rejected\r\n     * with a <tt>string</tt> that provides some error details in case something\r\n     * goes wrong.\r\n     */\r\n    addTrackAsUnmute(track) {\r\n        return this._addRemoveTrackAsMuteUnmute(\r\n            false /* add as unmute */, track)\r\n            .then(() => {\r\n                // Apply the video constraints, max bitrates and degradation preference on\r\n                // the video sender if needed.\r\n                if (track.isVideoTrack() && browser.doesVideoMuteByStreamRemove()) {\r\n                    return this.setSenderMaxBitrates()\r\n                        .then(() => this.setSenderVideoDegradationPreference())\r\n                        .then(() => this.setSenderVideoConstraint());\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Remove local track as part of the mute operation.\r\n     * @param {JitsiLocalTrack} track the local track to be removed\r\n     * @return {Promise} a promise which will be resolved once the local track\r\n     * is removed from this session and the renegotiation is performed.\r\n     * The promise will be rejected with a <tt>string</tt> that the describes\r\n     * the error if anything goes wrong.\r\n     */\r\n    removeTrackAsMute(track) {\r\n        return this._addRemoveTrackAsMuteUnmute(\r\n            true /* remove as mute */, track);\r\n    }\r\n\r\n    /**\r\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\r\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\r\n     * <tt>false</tt> for \"add as unmute\".\r\n     * @param {JitsiLocalTrack} track the track that will be added/removed\r\n     * @private\r\n     */\r\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\r\n        if (!track) {\r\n            return Promise.reject('invalid \"track\" argument value');\r\n        }\r\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\r\n        const workFunction = finishedCallback => {\r\n            const tpc = this.peerconnection;\r\n\r\n            if (!tpc) {\r\n                finishedCallback(\r\n                    `Error:  tried ${operationName} track with no active peer`\r\n                        + 'connection');\r\n\r\n                return;\r\n            }\r\n            const oldLocalSDP = tpc.localDescription.sdp;\r\n            const operationPromise\r\n                = isMute\r\n                    ? tpc.removeTrackMute(track)\r\n                    : tpc.addTrackUnmute(track);\r\n\r\n            operationPromise\r\n                .then(shouldRenegotiate => {\r\n                    if (shouldRenegotiate && oldLocalSDP && tpc.remoteDescription.sdp) {\r\n                        this._renegotiate()\r\n                            .then(() => {\r\n                                // The results are ignored, as this check failure is not enough to fail the whole\r\n                                // operation. It will log an error inside for plan-b.\r\n                                !this.usesUnifiedPlan && this._verifyNoSSRCChanged(operationName, new SDP(oldLocalSDP));\r\n                                const newLocalSdp = tpc.localDescription.sdp;\r\n\r\n                                // Signal the ssrc if an unmute operation results in a new ssrc being generated.\r\n                                this.notifyMySSRCUpdate(new SDP(oldLocalSDP), new SDP(newLocalSdp));\r\n                                finishedCallback();\r\n                            });\r\n                    } else {\r\n                        finishedCallback();\r\n                    }\r\n                },\r\n                finishedCallback /* will be called with an error */);\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Resumes or suspends media transfer over the underlying peer connection.\r\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\r\n     * transfer or <tt>false</tt> to suspend audio media transmission.\r\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\r\n     * transfer or <tt>false</tt> to suspend video media transmission.\r\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\r\n     * the operation is done. It will be rejected with an error description as\r\n     * a string in case anything goes wrong.\r\n     */\r\n    setMediaTransferActive(audioActive, videoActive) {\r\n        if (!this.peerconnection) {\r\n            return Promise.reject(\r\n                'Can not modify transfer active state,'\r\n                    + ' before \"initialize\" is called');\r\n        }\r\n\r\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\r\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\r\n\r\n        logger.info(`Queued make ${logVideoStr}, ${logAudioStr} task...`);\r\n\r\n        const workFunction = finishedCallback => {\r\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\r\n\r\n            // Because the value is modified on the queue it's impossible to\r\n            // check it's final value reliably prior to submitting the task.\r\n            // The rule here is that the last submitted state counts.\r\n            // Check the values here to avoid unnecessary renegotiation cycle.\r\n            const audioActiveChanged\r\n                = this.peerconnection.setAudioTransferActive(audioActive);\r\n\r\n            if (this._localVideoActive !== videoActive) {\r\n                this._localVideoActive = videoActive;\r\n\r\n                // Do only for P2P - Jicofo will reply with 'bad-request'\r\n                // We don't want to send 'content-modify', before the initial\r\n                // O/A (state === JingleSessionState.ACTIVE), because that will\r\n                // mess up video media direction in the remote SDP.\r\n                // 'content-modify' when processed only affects the media\r\n                // direction in the local SDP. We're doing that, because setting\r\n                // 'inactive' on video media in remote SDP will mess up our SDP\r\n                // translation chain (simulcast, RTX, video mute etc.).\r\n                if (this.isP2P && isSessionActive) {\r\n                    this.sendContentModify();\r\n                }\r\n            }\r\n\r\n            const pcVideoActiveChanged\r\n                = this.peerconnection.setVideoTransferActive(\r\n                    this._localVideoActive && this._remoteVideoActive);\r\n\r\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\r\n            // direction\r\n            if (isSessionActive\r\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\r\n                this._renegotiate()\r\n                    .then(\r\n                        finishedCallback,\r\n                        finishedCallback /* will be called with an error */);\r\n            } else {\r\n                finishedCallback();\r\n            }\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.modificationQueue.push(\r\n                workFunction,\r\n                error => {\r\n                    if (error) {\r\n                        reject(error);\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Will put and execute on the queue a session modify task. Currently it\r\n     * only checks the senders attribute of the video content in order to figure\r\n     * out if the remote peer has video in the inactive state (stored locally\r\n     * in {@link _remoteVideoActive} - see field description for more info).\r\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\r\n     * element of the session modify IQ.\r\n     * @see {@link _remoteVideoActive}\r\n     * @see {@link _localVideoActive}\r\n     */\r\n    modifyContents(jingleContents) {\r\n        const newVideoSenders\r\n            = JingleSessionPC.parseVideoSenders(jingleContents);\r\n        const newMaxFrameHeight\r\n            = JingleSessionPC.parseMaxFrameHeight(jingleContents);\r\n\r\n        // frame height is optional in our content-modify protocol\r\n        if (newMaxFrameHeight) {\r\n            logger.info(`${this} received remote max frame height: ${newMaxFrameHeight}`);\r\n            this.remoteRecvMaxFrameHeight = newMaxFrameHeight;\r\n            this.eventEmitter.emit(\r\n                MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED, this);\r\n        }\r\n\r\n        if (newVideoSenders === null) {\r\n            logger.error(\r\n                `${this} - failed to parse video \"senders\" attribute in`\r\n                    + '\"content-modify\" action');\r\n\r\n            return;\r\n        }\r\n\r\n        const workFunction = finishedCallback => {\r\n            if (this._assertNotEnded('content-modify')\r\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\r\n                // Will do the sRD/sLD cycle to update SDPs and adjust\r\n                // the media direction\r\n                this._renegotiate()\r\n                    .then(finishedCallback, finishedCallback /* (error) */);\r\n            } else {\r\n                finishedCallback();\r\n            }\r\n        };\r\n\r\n        logger.debug(\r\n            `${this} queued \"content-modify\" task`\r\n                + `(video senders=\"${newVideoSenders}\")`);\r\n\r\n        this.modificationQueue.push(\r\n            workFunction,\r\n            error => {\r\n                if (error) {\r\n                    logger.error('\"content-modify\" failed', error);\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\r\n     * to apply it for {@link _remoteVideoActive}.\r\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\r\n     * Jingle video content element advertised by remote peer.\r\n     * @return {boolean} <tt>true</tt> if the change affected state of\r\n     * the underlying peerconnection and renegotiation is required for\r\n     * the changes to take effect.\r\n     * @private\r\n     */\r\n    _modifyRemoteVideoActive(remoteVideoSenders) {\r\n        const isRemoteVideoActive\r\n            = remoteVideoSenders === 'both'\r\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\r\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\r\n\r\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\r\n            logger.debug(\r\n                `${this} new remote video active: ${isRemoteVideoActive}`);\r\n            this._remoteVideoActive = isRemoteVideoActive;\r\n        }\r\n\r\n        return this.peerconnection.setVideoTransferActive(\r\n            this._localVideoActive && this._remoteVideoActive);\r\n    }\r\n\r\n    /**\r\n     * Figures out added/removed ssrcs and send update IQs.\r\n     * @param oldSDP SDP object for old description.\r\n     * @param newSDP SDP object for new description.\r\n     */\r\n    notifyMySSRCUpdate(oldSDP, newSDP) {\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.14\r\n        let isScreenShare = false;\r\n        const localTracks = this.peerconnection.localTracks;\r\n        localTracks.forEach(localTrack => {\r\n            if (\"video\" === localTrack.type && \"desktop\" === localTrack.videoType) {\r\n                isScreenShare = true;\r\n            }\r\n        });\r\n\r\n        if (this.state !== JingleSessionState.ACTIVE) {\r\n            logger.warn(`Skipping SSRC update in '${this.state} ' state.`);\r\n\r\n            return;\r\n        }\r\n\r\n        if (!this.connection.connected) {\r\n            // The goal is to compare the oldest SDP with the latest one upon reconnect\r\n            if (!this._cachedOldLocalSdp) {\r\n                this._cachedOldLocalSdp = oldSDP;\r\n            }\r\n            this._cachedNewLocalSdp = newSDP;\r\n            logger.warn('Not sending SSRC update while the signaling is disconnected');\r\n\r\n            return;\r\n        }\r\n\r\n        this._cachedOldLocalSdp = undefined;\r\n        this._cachedNewLocalSdp = undefined;\r\n\r\n        const getSignaledSourceInfo = sdpDiffer => {\r\n            const newMedia = sdpDiffer.getNewMedia(isScreenShare);\r\n            let ssrcs = [];\r\n            let mediaType = null;\r\n\r\n            // It is assumed that sources are signaled one at a time.\r\n            Object.keys(newMedia).forEach(mediaIndex => {\r\n                const signaledSsrcs = Object.keys(newMedia[mediaIndex].ssrcs);\r\n\r\n                mediaType = newMedia[mediaIndex].mid;\r\n                if (signaledSsrcs?.length) {\r\n                    ssrcs = ssrcs.concat(signaledSsrcs);\r\n                }\r\n            });\r\n\r\n            return {\r\n                mediaType,\r\n                ssrcs\r\n            };\r\n        };\r\n\r\n        // send source-remove IQ.\r\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\r\n        const remove = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'source-remove',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            }\r\n            );\r\n\r\n        sdpDiffer.toJingle(remove);\r\n\r\n        // context a common object for one run of ssrc update (source-add and source-remove) so we can match them if we\r\n        // need to\r\n        const ctx = {};\r\n        const removedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\r\n\r\n        if (removedSsrcInfo.ssrcs.length) {\r\n            // Log only the SSRCs instead of the full IQ.\r\n            logger.info(`${this} Sending source-remove for ${removedSsrcInfo.mediaType}`\r\n                + ` ssrcs=${removedSsrcInfo.ssrcs}`);\r\n            this.connection.sendIQ(\r\n                remove,\r\n                () => {\r\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE, this, ctx);\r\n                },\r\n                this.newJingleErrorHandler(remove, error => {\r\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_REMOVE_ERROR, this, error, ctx);\r\n                }),\r\n                IQ_TIMEOUT);\r\n        }\r\n\r\n        // send source-add IQ.\r\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\r\n        const add = $iq({ to: this.remoteJid,\r\n            type: 'set' })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: 'source-add',\r\n                initiator: this.initiatorJid,\r\n                sid: this.sid\r\n            }\r\n            );\r\n\r\n        sdpDiffer.toJingle(add);\r\n        const addedSsrcInfo = getSignaledSourceInfo(sdpDiffer);\r\n\r\n        if (addedSsrcInfo.ssrcs.length) {\r\n            // Log only the SSRCs instead of the full IQ.\r\n            logger.info(`${this} Sending source-add for ${addedSsrcInfo.mediaType} ssrcs=${addedSsrcInfo.ssrcs}`);\r\n            this.connection.sendIQ(\r\n                add,\r\n                () => {\r\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD, this, ctx);\r\n                },\r\n                this.newJingleErrorHandler(add, error => {\r\n                    this.room.eventEmitter.emit(XMPPEvents.SOURCE_ADD_ERROR, this, error, addedSsrcInfo.mediaType, ctx);\r\n                }),\r\n                IQ_TIMEOUT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method returns function(errorResponse) which is a callback to be passed\r\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\r\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\r\n     * structure is as follows:\r\n     * {\r\n     *  code: {XMPP error response code}\r\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\r\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\r\n     *  source: {request.tree() that provides original request}\r\n     *  session: {this JingleSessionPC.toString()}\r\n     * }\r\n     * @param request Strophe IQ instance which is the request to be dumped into\r\n     *        the error structure\r\n     * @param failureCb function(error) called when error response was returned\r\n     *        or when a timeout has occurred.\r\n     * @returns {function(this:JingleSessionPC)}\r\n     */\r\n    newJingleErrorHandler(request, failureCb) {\r\n        return errResponse => {\r\n\r\n            const error = {};\r\n\r\n            // Get XMPP error code and condition(reason)\r\n            const errorElSel = $(errResponse).find('error');\r\n\r\n            if (errorElSel.length) {\r\n                error.code = errorElSel.attr('code');\r\n                const errorReasonSel = $(errResponse).find('error :first');\r\n\r\n                if (errorReasonSel.length) {\r\n                    error.reason = errorReasonSel[0].tagName;\r\n                }\r\n\r\n                const errorMsgSel = errorElSel.find('>text');\r\n\r\n                if (errorMsgSel.length) {\r\n                    error.msg = errorMsgSel.text();\r\n                }\r\n            }\r\n\r\n            if (!errResponse) {\r\n                error.reason = 'timeout';\r\n            }\r\n\r\n            error.session = this.toString();\r\n\r\n            if (failureCb) {\r\n                failureCb(error);\r\n            } else if (this.state === JingleSessionState.ENDED\r\n                        && error.reason === 'item-not-found') {\r\n                // When remote peer decides to terminate the session, but it\r\n                // still have few messages on the queue for processing,\r\n                // it will first send us 'session-terminate' (we enter ENDED)\r\n                // and then follow with 'item-not-found' for the queued requests\r\n                // We don't want to have that logged on error level.\r\n                logger.debug(`Jingle error: ${JSON.stringify(error)}`);\r\n            } else {\r\n                GlobalOnErrorHandler.callErrorHandler(\r\n                    new Error(\r\n                        `Jingle error: ${JSON.stringify(error)}`));\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the ice connection state for the peer connection.\r\n     * @returns the ice connection state for the peer connection.\r\n     */\r\n    getIceConnectionState() {\r\n        return this.peerconnection.getConnectionState();\r\n    }\r\n\r\n    /**\r\n     * Closes the peerconnection.\r\n     */\r\n    close() {\r\n        this.state = JingleSessionState.ENDED;\r\n        this.establishmentDuration = undefined;\r\n\r\n        if (this.peerconnection) {\r\n            this.peerconnection.onicecandidate = null;\r\n            this.peerconnection.oniceconnectionstatechange = null;\r\n            this.peerconnection.onnegotiationneeded = null;\r\n            this.peerconnection.onsignalingstatechange = null;\r\n        }\r\n\r\n        // Remove any pending tasks from the queue\r\n        this.modificationQueue.clear();\r\n\r\n        this.modificationQueue.push(finishCallback => {\r\n            // do not try to close if already closed.\r\n            this.peerconnection && this.peerconnection.close();\r\n            finishCallback();\r\n        });\r\n\r\n        // No more tasks can go in after the close task\r\n        this.modificationQueue.shutdown();\r\n    }\r\n\r\n    /**\r\n     * Converts to string with minor summary.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `JingleSessionPC[p2p=${this.isP2P},`\r\n                    + `initiator=${this.isInitiator},sid=${this.sid}]`;\r\n    }\r\n\r\n    /**\r\n     * If the A/B test for suspend video is disabled according to the room's\r\n     * configuration, returns undefined. Otherwise returns a boolean which\r\n     * indicates whether the suspend video option should be enabled or disabled.\r\n     * @param {JingleSessionPCOptions} options - The config options.\r\n     */\r\n    _abtestSuspendVideoEnabled({ abTesting }) {\r\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\r\n            return;\r\n        }\r\n\r\n        // We want the two participants in a P2P call to agree on the value of\r\n        // the \"suspend\" option. We use the JID of the initiator, because it is\r\n        // both randomly selected and agreed upon by both participants.\r\n        const jid = this._getInitiatorJid();\r\n\r\n        return integerHash(jid) % 2 === 0;\r\n    }\r\n}\r\n","export default {\r\n    /**\r\n     * Event triggered when the remote party signals it's receive video max frame height.\r\n     */\r\n    REMOTE_VIDEO_CONSTRAINTS_CHANGED: 'media_session.REMOTE_VIDEO_CONSTRAINTS_CHANGED'\r\n};\r\n","/**\r\n * The events for the media devices.\r\n */\r\n\r\n/**\r\n * Indicates that the list of available media devices has been changed. The\r\n * event provides the following parameters to its listeners:\r\n *\r\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\r\n *  MediaDeviceInfo-like objects that are currently connected.\r\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\r\n */\r\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\r\n\r\n/**\r\n * Indicates that the environment is currently showing permission prompt to\r\n * access camera and/or microphone. The event provides the following\r\n * parameters to its listeners:\r\n *\r\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\r\n *  |'react-native'|'android'} environmentType - type of browser or\r\n *  other execution environment.\r\n */\r\nexport const PERMISSION_PROMPT_IS_SHOWN\r\n    = 'mediaDevices.permissionPromptIsShown';\r\n","'use strict'\r\n\r\nexports.byteLength = byteLength\r\nexports.toByteArray = toByteArray\r\nexports.fromByteArray = fromByteArray\r\n\r\nvar lookup = []\r\nvar revLookup = []\r\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\r\n\r\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\r\nfor (var i = 0, len = code.length; i < len; ++i) {\r\n  lookup[i] = code[i]\r\n  revLookup[code.charCodeAt(i)] = i\r\n}\r\n\r\n// Support decoding URL-safe base64 strings, as Node.js does.\r\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\r\nrevLookup['-'.charCodeAt(0)] = 62\r\nrevLookup['_'.charCodeAt(0)] = 63\r\n\r\nfunction getLens (b64) {\r\n  var len = b64.length\r\n\r\n  if (len % 4 > 0) {\r\n    throw new Error('Invalid string. Length must be a multiple of 4')\r\n  }\r\n\r\n  // Trim off extra bytes after placeholder bytes are found\r\n  // See: https://github.com/beatgammit/base64-js/issues/42\r\n  var validLen = b64.indexOf('=')\r\n  if (validLen === -1) validLen = len\r\n\r\n  var placeHoldersLen = validLen === len\r\n    ? 0\r\n    : 4 - (validLen % 4)\r\n\r\n  return [validLen, placeHoldersLen]\r\n}\r\n\r\n// base64 is 4/3 + up to two characters of the original data\r\nfunction byteLength (b64) {\r\n  var lens = getLens(b64)\r\n  var validLen = lens[0]\r\n  var placeHoldersLen = lens[1]\r\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\r\n}\r\n\r\nfunction _byteLength (b64, validLen, placeHoldersLen) {\r\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\r\n}\r\n\r\nfunction toByteArray (b64) {\r\n  var tmp\r\n  var lens = getLens(b64)\r\n  var validLen = lens[0]\r\n  var placeHoldersLen = lens[1]\r\n\r\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\r\n\r\n  var curByte = 0\r\n\r\n  // if there are placeholders, only get up to the last complete 4 chars\r\n  var len = placeHoldersLen > 0\r\n    ? validLen - 4\r\n    : validLen\r\n\r\n  var i\r\n  for (i = 0; i < len; i += 4) {\r\n    tmp =\r\n      (revLookup[b64.charCodeAt(i)] << 18) |\r\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\r\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\r\n      revLookup[b64.charCodeAt(i + 3)]\r\n    arr[curByte++] = (tmp >> 16) & 0xFF\r\n    arr[curByte++] = (tmp >> 8) & 0xFF\r\n    arr[curByte++] = tmp & 0xFF\r\n  }\r\n\r\n  if (placeHoldersLen === 2) {\r\n    tmp =\r\n      (revLookup[b64.charCodeAt(i)] << 2) |\r\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\r\n    arr[curByte++] = tmp & 0xFF\r\n  }\r\n\r\n  if (placeHoldersLen === 1) {\r\n    tmp =\r\n      (revLookup[b64.charCodeAt(i)] << 10) |\r\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\r\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\r\n    arr[curByte++] = (tmp >> 8) & 0xFF\r\n    arr[curByte++] = tmp & 0xFF\r\n  }\r\n\r\n  return arr\r\n}\r\n\r\nfunction tripletToBase64 (num) {\r\n  return lookup[num >> 18 & 0x3F] +\r\n    lookup[num >> 12 & 0x3F] +\r\n    lookup[num >> 6 & 0x3F] +\r\n    lookup[num & 0x3F]\r\n}\r\n\r\nfunction encodeChunk (uint8, start, end) {\r\n  var tmp\r\n  var output = []\r\n  for (var i = start; i < end; i += 3) {\r\n    tmp =\r\n      ((uint8[i] << 16) & 0xFF0000) +\r\n      ((uint8[i + 1] << 8) & 0xFF00) +\r\n      (uint8[i + 2] & 0xFF)\r\n    output.push(tripletToBase64(tmp))\r\n  }\r\n  return output.join('')\r\n}\r\n\r\nfunction fromByteArray (uint8) {\r\n  var tmp\r\n  var len = uint8.length\r\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\r\n  var parts = []\r\n  var maxChunkLength = 16383 // must be multiple of 3\r\n\r\n  // go through the array every three bytes, we'll deal with trailing stuff later\r\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\r\n    parts.push(encodeChunk(\r\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\r\n    ))\r\n  }\r\n\r\n  // pad the end with zeros, but make sure to not forget the extra bytes\r\n  if (extraBytes === 1) {\r\n    tmp = uint8[len - 1]\r\n    parts.push(\r\n      lookup[tmp >> 2] +\r\n      lookup[(tmp << 4) & 0x3F] +\r\n      '=='\r\n    )\r\n  } else if (extraBytes === 2) {\r\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\r\n    parts.push(\r\n      lookup[tmp >> 10] +\r\n      lookup[(tmp >> 4) & 0x3F] +\r\n      lookup[(tmp << 2) & 0x3F] +\r\n      '='\r\n    )\r\n  }\r\n\r\n  return parts.join('')\r\n}\r\n","import FeatureFlags from '../flags/FeatureFlags';\r\n\r\nimport SDPUtil from './SDPUtil';\r\n\r\n// this could be useful in Array.prototype.\r\n/**\r\n *\r\n * @param array1\r\n * @param array2\r\n */\r\nfunction arrayEquals(array1, array2) {\r\n    // if the other array is a falsy value, return\r\n    if (!array2) {\r\n        return false;\r\n    }\r\n\r\n    // compare lengths - can save a lot of time\r\n    if (array1.length !== array2.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0, l = array1.length; i < l; i++) {\r\n        // Check if we have nested arrays\r\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\r\n            // recurse into the nested arrays\r\n            if (!array1[i].equals(array2[i])) {\r\n                return false;\r\n            }\r\n        } else if (array1[i] !== array2[i]) {\r\n            // Warning - two different object instances will never be\r\n            // equal: {x:20} != {x:20}\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n *\r\n * @param mySDP\r\n * @param otherSDP\r\n */\r\nexport default function SDPDiffer(mySDP, otherSDP) {\r\n    this.mySDP = mySDP;\r\n    this.otherSDP = otherSDP;\r\n    if (!mySDP) {\r\n        throw new Error('\"mySDP\" is undefined!');\r\n    } else if (!otherSDP) {\r\n        throw new Error('\"otherSDP\" is undefined!');\r\n    }\r\n}\r\n\r\n/**\r\n * Returns map of MediaChannel that contains media contained in\r\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\r\n */\r\nSDPDiffer.prototype.getNewMedia = function(isScreenShare = false) {\r\n\r\n    const myMedias = this.mySDP.getMediaSsrcMap();\r\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\r\n    const newMedia = {};\r\n\r\n    if (isScreenShare) return othersMedias;\r\n\r\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\r\n        const myMedia = myMedias[othersMediaIdx];\r\n        const othersMedia = othersMedias[othersMediaIdx];\r\n\r\n        if (!myMedia && othersMedia) {\r\n            // Add whole channel\r\n            newMedia[othersMediaIdx] = othersMedia;\r\n\r\n            return;\r\n        }\r\n\r\n        // Look for new ssrcs across the channel\r\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\r\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\r\n                // Allocate channel if we've found ssrc that doesn't exist in\r\n                // our channel\r\n                if (!newMedia[othersMediaIdx]) {\r\n                    newMedia[othersMediaIdx] = {\r\n                        mediaindex: othersMedia.mediaindex,\r\n                        mid: othersMedia.mid,\r\n                        ssrcs: {},\r\n                        ssrcGroups: []\r\n                    };\r\n                }\r\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\r\n            } else if (othersMedia.ssrcs[ssrc].lines\r\n                        && myMedia.ssrcs[ssrc].lines) {\r\n                // we want to detect just changes in adding/removing msid\r\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\r\n                    line => line.indexOf('msid') !== -1) !== undefined;\r\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\r\n                    line => line.indexOf('msid') !== -1) !== undefined;\r\n\r\n                if (myContainMsid !== newContainMsid) {\r\n                    if (!newMedia[othersMediaIdx]) {\r\n                        newMedia[othersMediaIdx] = {\r\n                            mediaindex: othersMedia.mediaindex,\r\n                            mid: othersMedia.mid,\r\n                            ssrcs: {},\r\n                            ssrcGroups: []\r\n                        };\r\n                    }\r\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\r\n                        = othersMedia.ssrcs[ssrc];\r\n                }\r\n            }\r\n        });\r\n\r\n        // Look for new ssrc groups across the channels\r\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\r\n\r\n            // try to match the other ssrc-group with an ssrc-group of ours\r\n            let matched = false;\r\n\r\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\r\n                const mySsrcGroup = myMedia.ssrcGroups[i];\r\n\r\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\r\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\r\n\r\n                    matched = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!matched) {\r\n                // Allocate channel if we've found an ssrc-group that doesn't\r\n                // exist in our channel\r\n\r\n                if (!newMedia[othersMediaIdx]) {\r\n                    newMedia[othersMediaIdx] = {\r\n                        mediaindex: othersMedia.mediaindex,\r\n                        mid: othersMedia.mid,\r\n                        ssrcs: {},\r\n                        ssrcGroups: []\r\n                    };\r\n                }\r\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\r\n            }\r\n        });\r\n    });\r\n\r\n    return newMedia;\r\n};\r\n\r\n/**\r\n * TODO: document!\r\n */\r\nSDPDiffer.prototype.toJingle = function(modify) {\r\n    const sdpMediaSsrcs = this.getNewMedia();\r\n\r\n    let modified = false;\r\n\r\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\r\n        modified = true;\r\n        const media = sdpMediaSsrcs[mediaindex];\r\n\r\n        modify.c('content', { name: media.mid });\r\n\r\n        modify.c('description',\r\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\r\n                media: media.mid });\r\n\r\n        // FIXME: not completely sure this operates on blocks and / or handles\r\n        // different ssrcs correctly\r\n        // generate sources from lines\r\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\r\n            const mediaSsrc = media.ssrcs[ssrcNum];\r\n            const ssrcLines = mediaSsrc.lines;\r\n            const sourceName = SDPUtil.parseSourceNameLine(ssrcLines);\r\n\r\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\r\n            modify.attrs({\r\n                name: FeatureFlags.isSourceNameSignalingEnabled() ? sourceName : undefined,\r\n                ssrc: mediaSsrc.ssrc\r\n            });\r\n\r\n            // Only MSID attribute is sent\r\n            const msid = SDPUtil.parseMSIDAttribute(ssrcLines);\r\n\r\n            if (msid) {\r\n                modify.c('parameter');\r\n                modify.attrs({ name: 'msid' });\r\n                modify.attrs({ value: msid });\r\n                modify.up();\r\n            }\r\n\r\n            modify.up(); // end of source\r\n        });\r\n\r\n        // generate source groups from lines\r\n        media.ssrcGroups.forEach(ssrcGroup => {\r\n            if (ssrcGroup.ssrcs.length) {\r\n\r\n                modify.c('ssrc-group', {\r\n                    semantics: ssrcGroup.semantics,\r\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\r\n                });\r\n\r\n                ssrcGroup.ssrcs.forEach(ssrc => {\r\n                    modify.c('source', { ssrc })\r\n                        .up(); // end of source\r\n                });\r\n                modify.up(); // end of ssrc-group\r\n            }\r\n        });\r\n\r\n        modify.up(); // end of description\r\n        modify.up(); // end of content\r\n    });\r\n\r\n    return modified;\r\n};\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport transform from 'sdp-transform';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport { VideoType } from '../../service/RTC/VideoType';\r\nimport browser from '../browser';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\n\r\nconst logger = getLogger(__filename);\r\nconst DESKTOP_SHARE_RATE = 500000;\r\nconst LD_BITRATE = 200000;\r\nconst SD_BITRATE = 700000;\r\nconst SIM_LAYER_1_RID = '1';\r\nconst SIM_LAYER_2_RID = '2';\r\nconst SIM_LAYER_3_RID = '3';\r\n\r\nexport const HD_BITRATE = 2500000;\r\nexport const HD_SCALE_FACTOR = 1;\r\nexport const LD_SCALE_FACTOR = 4;\r\nexport const SD_SCALE_FACTOR = 2;\r\nexport const SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\r\n\r\n/**\r\n * Handles track related operations on TraceablePeerConnection when browser is\r\n * running in unified plan mode.\r\n */\r\nexport class TPCUtils {\r\n    /**\r\n     * Creates a new instance for a given TraceablePeerConnection\r\n     *\r\n     * @param peerconnection - the tpc instance for which we have utility functions.\r\n     * @param videoBitrates - the bitrates to be configured on the video senders for\r\n     * different resolutions both in unicast and simulcast mode.\r\n     */\r\n    constructor(peerconnection, videoBitrates) {\r\n        this.pc = peerconnection;\r\n        this.videoBitrates = videoBitrates;\r\n\r\n        /**\r\n         * The startup configuration for the stream encodings that are applicable to\r\n         * the video stream when a new sender is created on the peerconnection. The initial\r\n         * config takes into account the differences in browser's simulcast implementation.\r\n         *\r\n         * Encoding parameters:\r\n         * active - determine the on/off state of a particular encoding.\r\n         * maxBitrate - max. bitrate value to be applied to that particular encoding\r\n         *  based on the encoding's resolution and config.js videoQuality settings if applicable.\r\n         * rid - Rtp Stream ID that is configured for a particular simulcast stream.\r\n         * scaleResolutionDownBy - the factor by which the encoding is scaled down from the\r\n         *  original resolution of the captured video.\r\n         */\r\n        this.localStreamEncodingsConfig = [\r\n            {\r\n                active: true,\r\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.high : this.videoBitrates.low,\r\n                rid: SIM_LAYER_1_RID,\r\n                scaleResolutionDownBy: browser.isFirefox() ? 1.0 : 4.0\r\n            },\r\n            {\r\n                active: true,\r\n                maxBitrate: this.videoBitrates.standard,\r\n                rid: SIM_LAYER_2_RID,\r\n                scaleResolutionDownBy: 2.0\r\n            },\r\n            {\r\n                active: true,\r\n                maxBitrate: browser.isFirefox() ? this.videoBitrates.low : this.videoBitrates.high,\r\n                rid: SIM_LAYER_3_RID,\r\n                scaleResolutionDownBy: browser.isFirefox() ? 4.0 : 1.0\r\n            }\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Obtains stream encodings that need to be configured on the given track based\r\n     * on the track media type and the simulcast setting.\r\n     * @param {JitsiLocalTrack} localTrack\r\n     */\r\n    _getStreamEncodings(localTrack) {\r\n        if (this.pc.isSimulcastOn() && localTrack.isVideoTrack()) {\r\n            return this.localStreamEncodingsConfig;\r\n        }\r\n\r\n        return localTrack.isVideoTrack()\r\n            ? [ {\r\n                active: true,\r\n                maxBitrate: this.videoBitrates.high\r\n            } ]\r\n            : [ { active: true } ];\r\n    }\r\n\r\n    /**\r\n     * Ensures that the ssrcs associated with a FID ssrc-group appear in the correct order, i.e.,\r\n     * the primary ssrc first and the secondary rtx ssrc later. This is important for unified\r\n     * plan since we have only one FID group per media description.\r\n     * @param {Object} description the webRTC session description instance for the remote\r\n     * description.\r\n     * @private\r\n     */\r\n    ensureCorrectOrderOfSsrcs(description) {\r\n        const parsedSdp = transform.parse(description.sdp);\r\n\r\n        parsedSdp.media.forEach(mLine => {\r\n            if (mLine.type === 'audio') {\r\n                return;\r\n            }\r\n            if (!mLine.ssrcGroups || !mLine.ssrcGroups.length) {\r\n                return;\r\n            }\r\n            let reorderedSsrcs = [];\r\n\r\n            const ssrcs = new Set();\r\n\r\n            mLine.ssrcGroups.map(group =>\r\n                group.ssrcs\r\n                    .split(' ')\r\n                    .filter(Boolean)\r\n                    .forEach(ssrc => ssrcs.add(ssrc))\r\n            );\r\n\r\n            ssrcs.forEach(ssrc => {\r\n                const sources = mLine.ssrcs.filter(source => source.id.toString() === ssrc);\r\n\r\n                reorderedSsrcs = reorderedSsrcs.concat(sources);\r\n            });\r\n            mLine.ssrcs = reorderedSsrcs;\r\n        });\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: transform.write(parsedSdp)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns the transceiver associated with a given RTCRtpSender/RTCRtpReceiver.\r\n     *\r\n     * @param {string} mediaType - type of track associated with the transceiver 'audio' or 'video'.\r\n     * @param {JitsiLocalTrack} localTrack - local track to be used for lookup.\r\n     * @returns {RTCRtpTransceiver}\r\n     */\r\n    findTransceiver(mediaType, localTrack = null) {\r\n        const transceiver = localTrack?.track && localTrack.getOriginalStream()\r\n            ? this.pc.peerconnection.getTransceivers().find(t => t.sender?.track?.id === localTrack.getTrackId())\r\n            : this.pc.peerconnection.getTransceivers().find(t => t.receiver?.track?.kind === mediaType);\r\n\r\n        return transceiver;\r\n    }\r\n\r\n    /**\r\n     * Takes in a *unified plan* offer and inserts the appropriate\r\n     * parameters for adding simulcast receive support.\r\n     * @param {Object} desc - A session description object\r\n     * @param {String} desc.type - the type (offer/answer)\r\n     * @param {String} desc.sdp - the sdp content\r\n     *\r\n     * @return {Object} A session description (same format as above) object\r\n     * with its sdp field modified to advertise simulcast receive support\r\n     */\r\n    insertUnifiedPlanSimulcastReceive(desc) {\r\n        // a=simulcast line is not needed on browsers where\r\n        // we munge SDP for turning on simulcast. Remove this check\r\n        // when we move to RID/MID based simulcast on all browsers.\r\n        if (browser.usesSdpMungingForSimulcast()) {\r\n            return desc;\r\n        }\r\n        const sdp = transform.parse(desc.sdp);\r\n        const idx = sdp.media.findIndex(mline => mline.type === 'video');\r\n\r\n        if (sdp.media[idx].rids && (sdp.media[idx].simulcast_03 || sdp.media[idx].simulcast)) {\r\n            // Make sure we don't have the simulcast recv line on video descriptions other than the\r\n            // the first video description.\r\n            sdp.media.forEach((mline, i) => {\r\n                if (mline.type === 'video' && i !== idx) {\r\n                    sdp.media[i].rids = undefined;\r\n                    sdp.media[i].simulcast = undefined;\r\n\r\n                    // eslint-disable-next-line camelcase\r\n                    sdp.media[i].simulcast_03 = undefined;\r\n                }\r\n            });\r\n\r\n            return new RTCSessionDescription({\r\n                type: desc.type,\r\n                sdp: transform.write(sdp)\r\n            });\r\n        }\r\n\r\n        // In order of highest to lowest spatial quality\r\n        sdp.media[idx].rids = [\r\n            {\r\n                id: SIM_LAYER_1_RID,\r\n                direction: 'recv'\r\n            },\r\n            {\r\n                id: SIM_LAYER_2_RID,\r\n                direction: 'recv'\r\n            },\r\n            {\r\n                id: SIM_LAYER_3_RID,\r\n                direction: 'recv'\r\n            }\r\n        ];\r\n\r\n        // Firefox 72 has stopped parsing the legacy rid= parameters in simulcast attributes.\r\n        // eslint-disable-next-line max-len\r\n        // https://www.fxsitecompat.dev/en-CA/docs/2019/pt-and-rid-in-webrtc-simulcast-attributes-are-no-longer-supported/\r\n        const simulcastLine = browser.isFirefox() && browser.isVersionGreaterThan(71)\r\n            ? `recv ${SIM_LAYER_RIDS.join(';')}`\r\n            : `recv rid=${SIM_LAYER_RIDS.join(';')}`;\r\n\r\n        // eslint-disable-next-line camelcase\r\n        sdp.media[idx].simulcast_03 = {\r\n            value: simulcastLine\r\n        };\r\n\r\n        return new RTCSessionDescription({\r\n            type: desc.type,\r\n            sdp: transform.write(sdp)\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Adds {@link JitsiLocalTrack} to the WebRTC peerconnection for the first time.\r\n    * @param {JitsiLocalTrack} track - track to be added to the peerconnection.\r\n    * @param {boolean} isInitiator - boolean that indicates if the endpoint is offerer\r\n    * in a p2p connection.\r\n    * @returns {void}\r\n    */\r\n    addTrack(localTrack, isInitiator) {\r\n        const track = localTrack.getTrack();\r\n\r\n        if (isInitiator) {\r\n            const streams = [];\r\n\r\n            if (localTrack.getOriginalStream()) {\r\n                streams.push(localTrack.getOriginalStream());\r\n            }\r\n\r\n            // Use pc.addTransceiver() for the initiator case when local tracks are getting added\r\n            // to the peerconnection before a session-initiate is sent over to the peer.\r\n            const transceiverInit = {\r\n                direction: 'sendrecv',\r\n                streams,\r\n                sendEncodings: []\r\n            };\r\n\r\n            if (!browser.isFirefox()) {\r\n                transceiverInit.sendEncodings = this._getStreamEncodings(localTrack);\r\n            }\r\n            this.pc.peerconnection.addTransceiver(track, transceiverInit);\r\n        } else {\r\n            // Use pc.addTrack() for responder case so that we can re-use the m-lines that were created\r\n            // when setRemoteDescription was called. pc.addTrack() automatically  attaches to any existing\r\n            // unused \"recv-only\" transceiver.\r\n            this.pc.peerconnection.addTrack(track);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a track on the RTCRtpSender as part of the unmute operation.\r\n     * @param {JitsiLocalTrack} localTrack - track to be unmuted.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    addTrackUnmute(localTrack) {\r\n        const mediaType = localTrack.getType();\r\n        const track = localTrack.getTrack();\r\n\r\n        // The assumption here is that the first transceiver of the specified\r\n        // media type is that of the local track.\r\n        const transceiver = this.pc.peerconnection.getTransceivers()\r\n            .find(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\r\n\r\n        if (!transceiver) {\r\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\r\n        }\r\n        logger.debug(`Adding ${localTrack} on ${this.pc}`);\r\n\r\n        // If the client starts with audio/video muted setting, the transceiver direction\r\n        // will be set to 'recvonly'. Use addStream here so that a MSID is generated for the stream.\r\n        if (transceiver.direction === 'recvonly') {\r\n            const stream = localTrack.getOriginalStream();\r\n\r\n            if (stream) {\r\n                this.pc.peerconnection.addStream(localTrack.getOriginalStream());\r\n\r\n                return this.setEncodings(localTrack).then(() => {\r\n                    this.pc.localTracks.set(localTrack.rtcId, localTrack);\r\n                    transceiver.direction = 'sendrecv';\r\n                });\r\n            }\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return transceiver.sender.replaceTrack(track);\r\n    }\r\n\r\n    /**\r\n     * Obtains the current local video track's height constraints based on the\r\n     * initial stream encodings configuration on the sender and the resolution\r\n     * of the current local track added to the peerconnection.\r\n     * @param {MediaStreamTrack} localTrack local video track\r\n     * @returns {Array[number]} an array containing the resolution heights of\r\n     * simulcast streams configured on the video sender.\r\n     */\r\n    getLocalStreamHeightConstraints(localTrack) {\r\n        // React-native hasn't implemented MediaStreamTrack getSettings yet.\r\n        if (browser.isReactNative()) {\r\n            return null;\r\n        }\r\n\r\n        const localVideoHeightConstraints = [];\r\n        const height = localTrack.getSettings().height;\r\n\r\n        for (const encoding of this.localStreamEncodingsConfig) {\r\n            localVideoHeightConstraints.push(height / encoding.scaleResolutionDownBy);\r\n        }\r\n\r\n        return localVideoHeightConstraints;\r\n    }\r\n\r\n    /**\r\n     * Removes the track from the RTCRtpSender as part of the mute operation.\r\n     * @param {JitsiLocalTrack} localTrack - track to be removed.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    removeTrackMute(localTrack) {\r\n        const mediaType = localTrack.getType();\r\n        const transceiver = this.pc.peerconnection.getTransceivers()\r\n            .find(t => t.sender && t.sender.track && t.sender.track.id === localTrack.getTrackId());\r\n\r\n        if (!transceiver) {\r\n            return Promise.reject(new Error(`RTCRtpTransceiver for ${mediaType} not found`));\r\n        }\r\n\r\n        logger.debug(`Removing ${localTrack} on ${this.pc}`);\r\n\r\n        return transceiver.sender.replaceTrack(null);\r\n    }\r\n\r\n    /**\r\n     * Returns the calculated active state of the simulcast encodings based on the frame height requested for the send\r\n     * stream. All the encodings that have a resolution lower than the frame height requested will be enabled.\r\n     *\r\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\r\n     * @param {number} newHeight The resolution requested for the video track.\r\n     * @returns {Array<boolean>}\r\n     */\r\n     calculateEncodingsActiveState(localVideoTrack, newHeight) {\r\n        const localTrack = localVideoTrack.getTrack();\r\n        const { height } = localTrack.getSettings();\r\n        const encodingsState = this.localStreamEncodingsConfig\r\n        .map(encoding => height / encoding.scaleResolutionDownBy)\r\n        .map((frameHeight, idx) => {\r\n            let active = localVideoTrack.getVideoType() === VideoType.CAMERA\r\n\r\n                // Keep the LD stream enabled even when the LD stream's resolution is higher than of the requested\r\n                // resolution. This can happen when camera is captured at resolutions higher than 720p but the\r\n                // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\r\n                // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\r\n                ? newHeight > 0 && this.localStreamEncodingsConfig[idx]?.scaleResolutionDownBy === LD_SCALE_FACTOR\r\n                    ? true\r\n                    : frameHeight <= newHeight\r\n\r\n                // Keep all the encodings for desktop track active.\r\n                : true;\r\n\r\n            // Disable the lower spatial layers for screensharing in Unified plan when low fps screensharing is in\r\n            // progress. Sending all three streams often results in the browser suspending the high resolution in low\r\n            // b/w and cpu cases, especially on the low end machines. Suspending the low resolution streams ensures\r\n            // that the highest resolution stream is available always. Safari is an exception here since it does not\r\n            // send the desktop stream at all if only the high resolution stream is enabled.\r\n            if (this.pc.isSharingLowFpsScreen()\r\n                && localVideoTrack.getVideoType() === VideoType.DESKTOP\r\n                && browser.usesUnifiedPlan()\r\n                && !browser.isWebKitBased()\r\n                && this.localStreamEncodingsConfig[idx].scaleResolutionDownBy !== HD_SCALE_FACTOR) {\r\n                active = false;\r\n            }\r\n\r\n            return active;\r\n        });\r\n\r\n        return encodingsState;\r\n    }\r\n\r\n    /**\r\n     * Returns the calculates max bitrates that need to be configured on the simulcast encodings based on the video\r\n     * type and other considerations associated with screenshare.\r\n     *\r\n     * @param {JitsiLocalTrack} localVideoTrack The local video track.\r\n     * @returns {Array<number>}\r\n     */\r\n    calculateEncodingsBitrates(localVideoTrack) {\r\n        const videoType = localVideoTrack.getVideoType();\r\n        const desktopShareBitrate = this.pc.options?.videoQuality?.desktopBitrate || DESKTOP_SHARE_RATE;\r\n        const presenterEnabled = localVideoTrack._originalStream\r\n            && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\r\n\r\n        const encodingsBitrates = this.localStreamEncodingsConfig\r\n        .map(encoding => {\r\n            const bitrate = this.pc.isSharingLowFpsScreen() && !browser.isWebKitBased()\r\n\r\n                // For low fps screensharing, set a max bitrate of 500 Kbps when presenter is not turned on, 2500 Kbps\r\n                // otherwise.\r\n                ? presenterEnabled ? HD_BITRATE : desktopShareBitrate\r\n\r\n                // For high fps screenshare, 'maxBitrate' setting must be cleared on Chrome in plan-b, because\r\n                // if simulcast is enabled for screen and maxBitrates are set then Chrome will not send the\r\n                // desktop stream.\r\n                : videoType === VideoType.DESKTOP && browser.isChromiumBased() && !browser.usesUnifiedPlan()\r\n                    ? undefined\r\n                    : encoding.maxBitrate;\r\n\r\n            return bitrate;\r\n        });\r\n\r\n        return encodingsBitrates;\r\n    }\r\n\r\n    /**\r\n     * Replaces the existing track on a RTCRtpSender with the given track.\r\n     * @param {JitsiLocalTrack} oldTrack - existing track on the sender that needs to be removed.\r\n     * @param {JitsiLocalTrack} newTrack - new track that needs to be added to the sender.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    replaceTrack(oldTrack, newTrack) {\r\n        const mediaType = newTrack?.getType() ? newTrack?.getType() : oldTrack?.getType();\r\n        const track = newTrack?.getTrack() ? newTrack?.getTrack() : null;\r\n        const isNewLocalSource = FeatureFlags.isMultiStreamSupportEnabled()\r\n            && this.pc.getLocalTracks(mediaType)?.length\r\n            && !oldTrack\r\n            && newTrack\r\n            && !newTrack.conference;\r\n        let transceiver;\r\n\r\n        // If old track exists, replace the track on the corresponding sender.\r\n        if (oldTrack && !oldTrack.isMuted()) {\r\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.sender.track === oldTrack.getTrack());\r\n\r\n        // Find the first recvonly transceiver when more than one track of the same media type is being added to the pc.\r\n        // As part of the track addition, a new m-line was added to the remote description with direction set to\r\n        // recvonly.\r\n        } else if (isNewLocalSource) {\r\n            transceiver = this.pc.peerconnection.getTransceivers().find(\r\n                t => t.receiver.track.kind === mediaType\r\n                && t.direction === MediaDirection.RECVONLY\r\n                && t.currentDirection === MediaDirection.INACTIVE);\r\n\r\n        // For mute/unmute operations, find the transceiver based on the track index in the source name if present,\r\n        // otherwise it is assumed to be the first local track that was added to the peerconnection.\r\n        } else {\r\n            transceiver = this.pc.peerconnection.getTransceivers().find(t => t.receiver.track.kind === mediaType);\r\n            const sourceName = newTrack?.getSourceName() ? newTrack?.getSourceName() : oldTrack?.getSourceName();\r\n\r\n            if (sourceName) {\r\n                const trackIndex = Number(sourceName.split('-')[1].substring(1));\r\n\r\n                if (trackIndex) {\r\n                    transceiver = this.pc.peerconnection.getTransceivers()\r\n                        .filter(t => t.receiver.track.kind === mediaType\r\n                            && t.direction !== MediaDirection.RECVONLY)[trackIndex];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!transceiver) {\r\n            return Promise.reject(new Error('replace track failed'));\r\n        }\r\n        logger.debug(`${this.pc} Replacing ${oldTrack} with ${newTrack}`);\r\n\r\n        return transceiver.sender.replaceTrack(track)\r\n            .then(() => Promise.resolve(transceiver));\r\n    }\r\n\r\n    /**\r\n    * Enables/disables audio transmission on the peer connection. When\r\n    * disabled the audio transceiver direction will be set to 'inactive'\r\n    * which means that no data will be sent nor accepted, but\r\n    * the connection should be kept alive.\r\n    * @param {boolean} active - true to enable audio media transmission or\r\n    * false to disable.\r\n    * @returns {void}\r\n    */\r\n    setAudioTransferActive(active) {\r\n        this.setMediaTransferActive(MediaType.AUDIO, active);\r\n    }\r\n\r\n    /**\r\n     * Set the simulcast stream encoding properties on the RTCRtpSender.\r\n     * @param {JitsiLocalTrack} track - the current track in use for which\r\n     * the encodings are to be set.\r\n     * @returns {Promise<void>} - resolved when done.\r\n     */\r\n    setEncodings(track) {\r\n        const mediaType = track.getType();\r\n        const transceiver = this.findTransceiver(mediaType, track);\r\n        const parameters = transceiver?.sender?.getParameters();\r\n\r\n        // Resolve if the encodings are not available yet. This happens immediately after the track is added to the\r\n        // peerconnection on chrome in unified-plan. It is ok to ignore and not report the error here since the\r\n        // action that triggers 'addTrack' (like unmute) will also configure the encodings and set bitrates after that.\r\n        if (!parameters?.encodings?.length) {\r\n            return Promise.resolve();\r\n        }\r\n        parameters.encodings = this._getStreamEncodings(track);\r\n\r\n        return transceiver.sender.setParameters(parameters);\r\n    }\r\n\r\n    /**\r\n     * Enables/disables media transmission on the peerconnection by changing the direction\r\n     * on the transceiver for the specified media type.\r\n     * @param {String} mediaType - 'audio' or 'video'\r\n     * @param {boolean} active - true to enable media transmission or false\r\n     * to disable.\r\n     * @returns {void}\r\n     */\r\n    setMediaTransferActive(mediaType, active) {\r\n        const transceivers = this.pc.peerconnection.getTransceivers()\r\n            .filter(t => t.receiver && t.receiver.track && t.receiver.track.kind === mediaType);\r\n        const localTracks = this.pc.getLocalTracks(mediaType);\r\n\r\n        logger.info(`${active ? 'Enabling' : 'Suspending'} ${mediaType} media transfer on ${this.pc}`);\r\n        transceivers.forEach((transceiver, idx) => {\r\n            if (active) {\r\n                // The first transceiver is for the local track and only this one can be set to 'sendrecv'\r\n                if (idx < localTracks.length) {\r\n                    transceiver.direction = 'sendrecv';\r\n                } else {\r\n                    transceiver.direction = 'recvonly';\r\n                }\r\n            } else {\r\n                transceiver.direction = 'inactive';\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n    * Enables/disables video media transmission on the peer connection. When\r\n    * disabled the SDP video media direction in the local SDP will be adjusted to\r\n    * 'inactive' which means that no data will be sent nor accepted, but\r\n    * the connection should be kept alive.\r\n    * @param {boolean} active - true to enable video media transmission or\r\n    * false to disable.\r\n    * @returns {void}\r\n    */\r\n    setVideoTransferActive(active) {\r\n        this.setMediaTransferActive(MediaType.VIDEO, active);\r\n    }\r\n\r\n    /**\r\n     * Ensures that the resolution of the stream encodings are consistent with the values\r\n     * that were configured on the RTCRtpSender when the source was added to the peerconnection.\r\n     * This should prevent us from overriding the default values if the browser returns\r\n     * erroneous values when RTCRtpSender.getParameters is used for getting the encodings info.\r\n     * @param {Object} parameters - the RTCRtpEncodingParameters obtained from the browser.\r\n     * @returns {void}\r\n     */\r\n    updateEncodingsResolution(parameters) {\r\n        if (!(browser.isWebKitBased() && parameters.encodings && Array.isArray(parameters.encodings))) {\r\n            return;\r\n        }\r\n        const allEqualEncodings\r\n            = encodings => encodings.every(encoding => typeof encoding.scaleResolutionDownBy !== 'undefined'\r\n                && encoding.scaleResolutionDownBy === encodings[0].scaleResolutionDownBy);\r\n\r\n        // Implement the workaround only when all the encodings report the same resolution.\r\n        if (allEqualEncodings(parameters.encodings)) {\r\n            parameters.encodings.forEach((encoding, idx) => {\r\n                encoding.scaleResolutionDownBy = this.localStreamEncodingsConfig[idx].scaleResolutionDownBy;\r\n            });\r\n        }\r\n    }\r\n}\r\n","// shim for using process in browser\r\nvar process = module.exports = {};\r\n\r\n// cached from whatever global is present so that test runners that stub it\r\n// don't break things.  But we need to wrap it in a try catch in case it is\r\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\r\n// function because try/catches deoptimize in certain engines.\r\n\r\nvar cachedSetTimeout;\r\nvar cachedClearTimeout;\r\n\r\nfunction defaultSetTimout() {\r\n    throw new Error('setTimeout has not been defined');\r\n}\r\nfunction defaultClearTimeout () {\r\n    throw new Error('clearTimeout has not been defined');\r\n}\r\n(function () {\r\n    try {\r\n        if (typeof setTimeout === 'function') {\r\n            cachedSetTimeout = setTimeout;\r\n        } else {\r\n            cachedSetTimeout = defaultSetTimout;\r\n        }\r\n    } catch (e) {\r\n        cachedSetTimeout = defaultSetTimout;\r\n    }\r\n    try {\r\n        if (typeof clearTimeout === 'function') {\r\n            cachedClearTimeout = clearTimeout;\r\n        } else {\r\n            cachedClearTimeout = defaultClearTimeout;\r\n        }\r\n    } catch (e) {\r\n        cachedClearTimeout = defaultClearTimeout;\r\n    }\r\n} ())\r\nfunction runTimeout(fun) {\r\n    if (cachedSetTimeout === setTimeout) {\r\n        //normal enviroments in sane situations\r\n        return setTimeout(fun, 0);\r\n    }\r\n    // if setTimeout wasn't available but was latter defined\r\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\r\n        cachedSetTimeout = setTimeout;\r\n        return setTimeout(fun, 0);\r\n    }\r\n    try {\r\n        // when when somebody has screwed with setTimeout but no I.E. maddness\r\n        return cachedSetTimeout(fun, 0);\r\n    } catch(e){\r\n        try {\r\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\r\n            return cachedSetTimeout.call(null, fun, 0);\r\n        } catch(e){\r\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\r\n            return cachedSetTimeout.call(this, fun, 0);\r\n        }\r\n    }\r\n\r\n\r\n}\r\nfunction runClearTimeout(marker) {\r\n    if (cachedClearTimeout === clearTimeout) {\r\n        //normal enviroments in sane situations\r\n        return clearTimeout(marker);\r\n    }\r\n    // if clearTimeout wasn't available but was latter defined\r\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\r\n        cachedClearTimeout = clearTimeout;\r\n        return clearTimeout(marker);\r\n    }\r\n    try {\r\n        // when when somebody has screwed with setTimeout but no I.E. maddness\r\n        return cachedClearTimeout(marker);\r\n    } catch (e){\r\n        try {\r\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\r\n            return cachedClearTimeout.call(null, marker);\r\n        } catch (e){\r\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\r\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\r\n            return cachedClearTimeout.call(this, marker);\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\nvar queue = [];\r\nvar draining = false;\r\nvar currentQueue;\r\nvar queueIndex = -1;\r\n\r\nfunction cleanUpNextTick() {\r\n    if (!draining || !currentQueue) {\r\n        return;\r\n    }\r\n    draining = false;\r\n    if (currentQueue.length) {\r\n        queue = currentQueue.concat(queue);\r\n    } else {\r\n        queueIndex = -1;\r\n    }\r\n    if (queue.length) {\r\n        drainQueue();\r\n    }\r\n}\r\n\r\nfunction drainQueue() {\r\n    if (draining) {\r\n        return;\r\n    }\r\n    var timeout = runTimeout(cleanUpNextTick);\r\n    draining = true;\r\n\r\n    var len = queue.length;\r\n    while(len) {\r\n        currentQueue = queue;\r\n        queue = [];\r\n        while (++queueIndex < len) {\r\n            if (currentQueue) {\r\n                currentQueue[queueIndex].run();\r\n            }\r\n        }\r\n        queueIndex = -1;\r\n        len = queue.length;\r\n    }\r\n    currentQueue = null;\r\n    draining = false;\r\n    runClearTimeout(timeout);\r\n}\r\n\r\nprocess.nextTick = function (fun) {\r\n    var args = new Array(arguments.length - 1);\r\n    if (arguments.length > 1) {\r\n        for (var i = 1; i < arguments.length; i++) {\r\n            args[i - 1] = arguments[i];\r\n        }\r\n    }\r\n    queue.push(new Item(fun, args));\r\n    if (queue.length === 1 && !draining) {\r\n        runTimeout(drainQueue);\r\n    }\r\n};\r\n\r\n// v8 likes predictible objects\r\nfunction Item(fun, array) {\r\n    this.fun = fun;\r\n    this.array = array;\r\n}\r\nItem.prototype.run = function () {\r\n    this.fun.apply(null, this.array);\r\n};\r\nprocess.title = 'browser';\r\nprocess.browser = true;\r\nprocess.env = {};\r\nprocess.argv = [];\r\nprocess.version = ''; // empty string to avoid regexp issues\r\nprocess.versions = {};\r\n\r\nfunction noop() {}\r\n\r\nprocess.on = noop;\r\nprocess.addListener = noop;\r\nprocess.once = noop;\r\nprocess.off = noop;\r\nprocess.removeListener = noop;\r\nprocess.removeAllListeners = noop;\r\nprocess.emit = noop;\r\nprocess.prependListener = noop;\r\nprocess.prependOnceListener = noop;\r\n\r\nprocess.listeners = function (name) { return [] }\r\n\r\nprocess.binding = function (name) {\r\n    throw new Error('process.binding is not supported');\r\n};\r\n\r\nprocess.cwd = function () { return '/' };\r\nprocess.chdir = function (dir) {\r\n    throw new Error('process.chdir is not supported');\r\n};\r\nprocess.umask = function() { return 0; };\r\n","/**\r\n * Provides statistics for the local stream.\r\n */\r\n\r\n/**\r\n * Size of the webaudio analyzer buffer.\r\n * @type {number}\r\n */\r\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\r\n\r\n/**\r\n * Value of the webaudio analyzer smoothing time parameter.\r\n * @type {number}\r\n */\r\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\r\n\r\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\r\n\r\nlet context = null;\r\n\r\nif (window.AudioContext) {\r\n    context = new AudioContext();\r\n\r\n    // XXX Not all browsers define a suspend method on AudioContext. As the\r\n    // invocation is at the (ES6 module) global execution level, it breaks the\r\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\r\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\r\n    // example, Google Chrome 40 on Android does not define the method but we\r\n    // still want to be able to load the lib-jitsi-meet library there and\r\n    // display a page which notifies the user that the Web app is not supported\r\n    // there.\r\n    context.suspend && context.suspend();\r\n}\r\n\r\n/**\r\n * Converts time domain data array to audio level.\r\n * @param samples the time domain data array.\r\n * @returns {number} the audio level\r\n */\r\nfunction timeDomainDataToAudioLevel(samples) {\r\n\r\n    let maxVolume = 0;\r\n\r\n    const length = samples.length;\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        if (maxVolume < samples[i]) {\r\n            maxVolume = samples[i];\r\n        }\r\n    }\r\n\r\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\r\n}\r\n\r\n/**\r\n * Animates audio level change\r\n * @param newLevel the new audio level\r\n * @param lastLevel the last audio level\r\n * @returns {Number} the audio level to be set\r\n */\r\nfunction animateLevel(newLevel, lastLevel) {\r\n    let value = 0;\r\n    const diff = lastLevel - newLevel;\r\n\r\n    if (diff > 0.2) {\r\n        value = lastLevel - 0.2;\r\n    } else if (diff < -0.4) {\r\n        value = lastLevel + 0.4;\r\n    } else {\r\n        value = newLevel;\r\n    }\r\n\r\n    return parseFloat(value.toFixed(3));\r\n}\r\n\r\n\r\n/**\r\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\r\n *\r\n * @param stream the local stream\r\n * @param interval stats refresh interval given in ms.\r\n * @param callback function that receives the audio levels.\r\n * @constructor\r\n */\r\nexport default function LocalStatsCollector(stream, interval, callback) {\r\n    this.stream = stream;\r\n    this.intervalId = null;\r\n    this.intervalMilis = interval;\r\n    this.audioLevel = 0;\r\n    this.callback = callback;\r\n}\r\n\r\n/**\r\n * Starts the collecting the statistics.\r\n */\r\nLocalStatsCollector.prototype.start = function() {\r\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\r\n        return;\r\n    }\r\n    context.resume();\r\n    const analyser = context.createAnalyser();\r\n\r\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\r\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\r\n\r\n    const source = context.createMediaStreamSource(this.stream);\r\n\r\n    source.connect(analyser);\r\n\r\n    this.intervalId = setInterval(\r\n        () => {\r\n            const array = new Uint8Array(analyser.frequencyBinCount);\r\n\r\n            analyser.getByteTimeDomainData(array);\r\n            const audioLevel = timeDomainDataToAudioLevel(array);\r\n\r\n            // Set the audio levels always as NoAudioSignalDetection now\r\n            // uses audio levels from LocalStatsCollector and waits for\r\n            // atleast 4 secs for a no audio signal before displaying the\r\n            // notification on the UI.\r\n            this.audioLevel = animateLevel(audioLevel, this.audioLevel);\r\n            this.callback(this.audioLevel);\r\n        },\r\n        this.intervalMilis\r\n    );\r\n};\r\n\r\n/**\r\n * Stops collecting the statistics.\r\n */\r\nLocalStatsCollector.prototype.stop = function() {\r\n    if (this.intervalId) {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Checks if the environment has the necessary conditions to support\r\n * collecting stats from local streams.\r\n *\r\n * @returns {boolean}\r\n */\r\nLocalStatsCollector.isLocalStatsSupported = function() {\r\n    return Boolean(context);\r\n};\r\n","export const CALLSTATS_SCRIPT_URL = 'https://api.callstats.io/static/callstats-ws.min.js';\r\n","/* global $ */\r\n\r\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Listenable from '../util/Listenable';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * The property\r\n */\r\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\r\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\r\nconst HASH = 'sha-1';\r\n\r\nexport const ERROR_FEATURE_VERSION_MISMATCH = 'Feature version mismatch';\r\n\r\n/**\r\n *\r\n * @param a\r\n * @param b\r\n */\r\nfunction compareIdentities(a, b) {\r\n    let res = 0;\r\n\r\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\r\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\r\n    );\r\n\r\n    return res;\r\n}\r\n\r\n/**\r\n * Produces a sha-1 from provided identity and features values.\r\n *\r\n * @param {Array<Object>} identities - The identity objects.\r\n * @param {Array<string>} features - The features.\r\n * @returns {string}\r\n */\r\nfunction generateSha(identities, features) {\r\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\r\n        (accumulatedValue, identity) => `${\r\n            IDENTITY_PROPERTIES.reduce(\r\n                (tmp, key, idx) =>\r\n                    tmp\r\n                        + (idx === 0 ? '' : '/')\r\n                        + (identity[key] ? identity[key] : ''),\r\n                '')\r\n        }<`, '');\r\n    const sortedFeatures = features.sort().reduce(\r\n        (tmp, feature) => `${tmp + feature}<`, '');\r\n\r\n    return b64_sha1(sortedIdentities + sortedFeatures);\r\n}\r\n\r\n/**\r\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\r\n */\r\nexport default class Caps extends Listenable {\r\n    /**\r\n     * Constructs new Caps instance.\r\n     * @param {Strophe.Connection} connection the strophe connection object\r\n     * @param {String} node the value of the node attribute of the \"c\" xml node\r\n     * that will be sent to the other participants\r\n     */\r\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\r\n        super();\r\n        this.node = node;\r\n        this.disco = connection.disco;\r\n        if (!this.disco) {\r\n            throw new Error(\r\n                'Missing strophe-plugins '\r\n                + '(disco plugin is required)!');\r\n        }\r\n\r\n        this.versionToCapabilities = Object.create(null);\r\n        this.jidToVersion = Object.create(null);\r\n        this.version = '';\r\n        this.rooms = new Set();\r\n\r\n        const emuc = connection.emuc;\r\n\r\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\r\n            room => this._addChatRoom(room));\r\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\r\n            room => this._removeChatRoom(room));\r\n        Object.keys(emuc.rooms).forEach(jid => {\r\n            this._addChatRoom(emuc.rooms[jid]);\r\n        });\r\n\r\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\r\n        this.disco.addFeature(Strophe.NS.CAPS);\r\n        connection.addHandler(this._handleCaps.bind(this), Strophe.NS.CAPS);\r\n\r\n        this._onMucMemberLeft = this._removeJidToVersionEntry.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Adds new feature to the list of supported features for the local\r\n     * participant\r\n     * @param {String} feature the name of the feature.\r\n     * @param {boolean} submit if true - new presence with updated \"c\" node\r\n     * will be sent.\r\n     */\r\n    addFeature(feature, submit = false) {\r\n        this.disco.addFeature(feature);\r\n        this._generateVersion();\r\n        if (submit) {\r\n            this.submit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a feature from the list of supported features for the local\r\n     * participant\r\n     * @param {String} feature the name of the feature.\r\n     * @param {boolean} submit if true - new presence with updated \"c\" node\r\n     * will be sent.\r\n     */\r\n    removeFeature(feature, submit = false) {\r\n        this.disco.removeFeature(feature);\r\n        this._generateVersion();\r\n        if (submit) {\r\n            this.submit();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends new presence stanza for every room from the list of rooms.\r\n     */\r\n    submit() {\r\n        this.rooms.forEach(room => room.sendPresence());\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for a participant.\r\n     * @param {String} jid the jid of the participant\r\n     * @param {int} timeout the timeout in ms for reply from the participant.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeatures(jid, timeout = 5000) {\r\n        const user\r\n            = jid in this.jidToVersion ? this.jidToVersion[jid] : null;\r\n\r\n        if (!user || !(user.version in this.versionToCapabilities)) {\r\n            const node = user ? `${user.node}#${user.version}` : null;\r\n\r\n            return this._getDiscoInfo(jid, node, timeout)\r\n                .then(({ features, identities }) => {\r\n                    if (user) {\r\n                        const sha = generateSha(\r\n                            Array.from(identities),\r\n                            Array.from(features)\r\n                        );\r\n                        const receivedNode = `${user.node}#${sha}`;\r\n\r\n                        if (receivedNode === node) {\r\n                            this.versionToCapabilities[receivedNode] = features;\r\n\r\n                            return features;\r\n                        }\r\n\r\n                        // Check once if it has been cached asynchronously.\r\n                        if (this.versionToCapabilities[receivedNode]) {\r\n                            return this.versionToCapabilities[receivedNode];\r\n                        }\r\n\r\n                        logger.error(`Expected node ${node} but received ${\r\n                            receivedNode}`);\r\n\r\n                        return Promise.reject(ERROR_FEATURE_VERSION_MISMATCH);\r\n                    }\r\n\r\n                    return features;\r\n                });\r\n        }\r\n\r\n        return Promise.resolve(this.versionToCapabilities[user.version]);\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for a host.\r\n     * @param {String} jid the jid of the host\r\n     * @param {int} timeout the timeout in ms for reply from the host.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeaturesAndIdentities(jid, node, timeout = 5000) {\r\n        return this._getDiscoInfo(jid, node, timeout);\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features and identities for a host.\r\n     * @param {String} jid the jid of the host\r\n     * @param {String|null} node the node to query\r\n     * @param {int} timeout the timeout in ms for reply from the host.\r\n     * @returns {Promise<Object>}\r\n     * @private\r\n     */\r\n    _getDiscoInfo(jid, node, timeout) {\r\n        return new Promise((resolve, reject) =>\r\n            this.disco.info(jid, node, response => {\r\n                const features = new Set();\r\n                const identities = new Set();\r\n\r\n                $(response)\r\n                    .find('>query>feature')\r\n                    .each(\r\n                        (_, el) => features.add(el.getAttribute('var')));\r\n                $(response)\r\n                    .find('>query>identity')\r\n                    .each(\r\n                        (_, el) => identities.add({\r\n                            type: el.getAttribute('type'),\r\n                            name: el.getAttribute('name'),\r\n                            category: el.getAttribute('category')\r\n                        }));\r\n                resolve({\r\n                    features,\r\n                    identities });\r\n            }, reject, timeout)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\r\n     * and adds \"c\" element to the presences of the room.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _addChatRoom(room) {\r\n        this.rooms.add(room);\r\n        room.addListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\r\n        this._fixChatRoomPresenceMap(room);\r\n    }\r\n\r\n    /**\r\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\r\n     * added from the Caps class.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _removeChatRoom(room) {\r\n        this.rooms.delete(room);\r\n        room.removeListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\r\n    }\r\n\r\n    /**\r\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\r\n     * @param {ChatRoom} room the room.\r\n     */\r\n    _fixChatRoomPresenceMap(room) {\r\n        room.addToPresence('c', {\r\n            attributes: {\r\n                xmlns: Strophe.NS.CAPS,\r\n                hash: HASH,\r\n                node: this.node,\r\n                ver: this.version\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles this.version changes.\r\n     */\r\n    _notifyVersionChanged() {\r\n        // update the version for all rooms\r\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\r\n    }\r\n\r\n    /**\r\n     * Generates the value for the \"ver\" attribute.\r\n     */\r\n    _generateVersion() {\r\n        this.version\r\n            = generateSha(this.disco._identities, this.disco._features);\r\n\r\n        this._notifyVersionChanged();\r\n    }\r\n\r\n    /**\r\n     * Parses the \"c\" xml node from presence.\r\n     * @param {DOMElement} stanza the presence packet\r\n     */\r\n    _handleCaps(stanza) {\r\n        const from = stanza.getAttribute('from');\r\n        const caps = stanza.querySelector('c');\r\n        const version = caps.getAttribute('ver');\r\n        const node = caps.getAttribute('node');\r\n        const oldVersion = this.jidToVersion[from];\r\n\r\n        this.jidToVersion[from] = { version,\r\n            node };\r\n        if (oldVersion && oldVersion.version !== version) {\r\n            this.eventEmitter.emit(XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\r\n                from);\r\n        }\r\n\r\n        // return true to not remove the handler from Strophe\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Removes entry from this.jidToVersion map.\r\n     * @param {String} jid the jid to be removed.\r\n     */\r\n    _removeJidToVersionEntry(jid) {\r\n        if (jid in this.jidToVersion) {\r\n            delete this.jidToVersion[jid];\r\n        }\r\n    }\r\n}\r\n","/* global $, __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport { VideoType } from '../../service/RTC/VideoType';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport Lobby from './Lobby';\r\nimport XmppConnection from './XmppConnection';\r\nimport Moderator from './moderator';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nexport const parser = {\r\n    packet2JSON(xmlElement, nodes) {\r\n        for (const child of Array.from(xmlElement.children)) {\r\n            const node = {\r\n                attributes: {},\r\n                children: [],\r\n                tagName: child.tagName\r\n            };\r\n\r\n            for (const attr of Array.from(child.attributes)) {\r\n                node.attributes[attr.name] = attr.value;\r\n            }\r\n            const text = Strophe.getText(child);\r\n\r\n            if (text) {\r\n                // Using Strophe.getText will do work for traversing all direct\r\n                // child text nodes but returns an escaped value, which is not\r\n                // desirable at this point.\r\n                node.value = Strophe.xmlunescape(text);\r\n            }\r\n            nodes.push(node);\r\n            this.packet2JSON(child, node.children);\r\n        }\r\n    },\r\n    json2packet(nodes, packet) {\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            if (node) {\r\n                packet.c(node.tagName, node.attributes);\r\n                if (node.value) {\r\n                    packet.t(node.value);\r\n                }\r\n                if (node.children) {\r\n                    this.json2packet(node.children, packet);\r\n                }\r\n                packet.up();\r\n            }\r\n        }\r\n\r\n        // packet.up();\r\n    }\r\n};\r\n\r\n/**\r\n * Returns array of JS objects from the presence JSON associated with the passed\r\n / nodeName\r\n * @param pres the presence JSON\r\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\r\n */\r\nexport function filterNodeFromPresenceJSON(pres, nodeName) {\r\n    const res = [];\r\n\r\n    for (let i = 0; i < pres.length; i++) {\r\n        if (pres[i].tagName === nodeName) {\r\n            res.push(pres[i]);\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\r\n// of chaining function calls, allow long function call chains.\r\n/* eslint-disable newline-per-chained-call */\r\n\r\n/**\r\n * Array of affiliations that are allowed in members only room.\r\n * @type {string[]}\r\n */\r\nconst MEMBERS_AFFILIATIONS = [ 'owner', 'admin', 'member' ];\r\n\r\n/**\r\n *\r\n */\r\nexport default class ChatRoom extends Listenable {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param {XmppConnection} connection - The XMPP connection instance.\r\n     * @param jid\r\n     * @param password\r\n     * @param XMPP\r\n     * @param options\r\n     * @param {boolean} options.disableFocus - when set to {@code false} will\r\n     * not invite Jicofo into the room.\r\n     * @param {boolean} options.disableDiscoInfo - when set to {@code false} will skip disco info.\r\n     * This is intended to be used only for lobby rooms.\r\n     * @param {boolean} options.enableLobby - when set to {@code false} will skip creating lobby room.\r\n     */\r\n    constructor(connection, jid, password, XMPP, options) {\r\n        super();\r\n        this.xmpp = XMPP;\r\n        this.connection = connection;\r\n        this.roomjid = Strophe.getBareJidFromJid(jid);\r\n        this.myroomjid = jid;\r\n        this.password = password;\r\n        logger.info(`Joined MUC as ${this.myroomjid}`);\r\n        this.members = {};\r\n        this.presMap = {};\r\n        this.presHandlers = {};\r\n        this._removeConnListeners = [];\r\n        this.joined = false;\r\n        this.role = null;\r\n        this.focusMucJid = null;\r\n        this.noBridgeAvailable = false;\r\n        this.options = options || {};\r\n        this.moderator\r\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\r\n                connection: this.xmpp.options,\r\n                conference: this.options\r\n            });\r\n        if (typeof this.options.enableLobby === 'undefined' || this.options.enableLobby) {\r\n            this.lobby = new Lobby(this);\r\n        }\r\n        this.initPresenceMap(options);\r\n        this.lastPresences = {};\r\n        this.phoneNumber = null;\r\n        this.phonePin = null;\r\n        this.connectionTimes = {};\r\n        this.participantPropertyListener = null;\r\n\r\n        this.locked = false;\r\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     */\r\n    initPresenceMap(options = {}) {\r\n        this.presMap.to = this.myroomjid;\r\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\r\n        this.presMap.nodes = [];\r\n\r\n        if (options.statsId) {\r\n            this.presMap.nodes.push({\r\n                'tagName': 'stats-id',\r\n                'value': options.statsId\r\n            });\r\n        }\r\n\r\n        // We need to broadcast 'videomuted' status from the beginning, cause\r\n        // Jicofo makes decisions based on that. Initialize it with 'false'\r\n        // here.\r\n        this.addVideoInfoToPresence(false);\r\n\r\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\r\n            this.presMap.nodes.push({\r\n                'tagName': 'region',\r\n                'attributes': {\r\n                    id: options.deploymentInfo.userRegion,\r\n                    xmlns: 'http://jitsi.org/jitsi-meet'\r\n                }\r\n            });\r\n        }\r\n\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    getLastPresence(mucNick) {\r\n        return this.lastPresences[`${this.roomjid}/${mucNick}`];\r\n    }\r\n\r\n    /**\r\n     * Joins the chat room.\r\n     * @param {string} password - Password to unlock room on joining.\r\n     * @param {Object} customJoinPresenceExtensions - Key values object to be used\r\n     * for the initial presence, they key will be an xmpp node and its text is the value,\r\n     * and those will be added to the initial <x xmlns='http://jabber.org/protocol/muc'/>\r\n     * @returns {Promise} - resolved when join completes. At the time of this\r\n     * writing it's never rejected.\r\n     */\r\n    join(password, customJoinPresenceExtensions) {\r\n        this.password = password;\r\n\r\n        return new Promise(resolve => {\r\n            this.options.disableFocus\r\n                && logger.info(`Conference focus disabled for ${this.roomjid}`);\r\n\r\n            const preJoin\r\n                = this.options.disableFocus\r\n                    ? Promise.resolve()\r\n                    : this.moderator.allocateConferenceFocus();\r\n\r\n            preJoin.then(() => {\r\n                this.sendPresence(true, customJoinPresenceExtensions);\r\n                this._removeConnListeners.push(\r\n                    this.connection.addEventListener(\r\n                        XmppConnection.Events.CONN_STATUS_CHANGED,\r\n                        this.onConnStatusChanged.bind(this))\r\n                );\r\n                resolve();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param fromJoin - Whether this is initial presence to join the room.\r\n     * @param customJoinPresenceExtensions - Object of key values to be added to the initial presence only.\r\n     */\r\n    sendPresence(fromJoin, customJoinPresenceExtensions) {\r\n        const to = this.presMap.to;\r\n\r\n        if (!this.connection || !this.connection.connected || !to || (!this.joined && !fromJoin)) {\r\n            // Too early to send presence - not initialized\r\n            return;\r\n        }\r\n\r\n        const pres = $pres({ to });\r\n\r\n        // xep-0045 defines: \"including in the initial presence stanza an empty\r\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\r\n        // namespace\" and subsequent presences should not include that or it can\r\n        // be considered as joining, and server can send us the message history\r\n        // for the room on every presence\r\n        if (fromJoin) {\r\n            pres.c('x', { xmlns: this.presMap.xns });\r\n\r\n            if (this.password) {\r\n                pres.c('password').t(this.password).up();\r\n            }\r\n            if (customJoinPresenceExtensions) {\r\n                Object.keys(customJoinPresenceExtensions).forEach(key => {\r\n                    pres.c(key).t(customJoinPresenceExtensions[key]).up();\r\n                });\r\n            }\r\n            pres.up();\r\n        }\r\n\r\n        parser.json2packet(this.presMap.nodes, pres);\r\n\r\n        // we store time we last synced presence state\r\n        this.presenceSyncTime = Date.now();\r\n\r\n        this.connection.send(pres);\r\n        if (fromJoin) {\r\n            // XXX We're pressed for time here because we're beginning a complex\r\n            // and/or lengthy conference-establishment process which supposedly\r\n            // involves multiple RTTs. We don't have the time to wait for\r\n            // Strophe to decide to send our IQ.\r\n            this.connection.flush();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the presence unavailable, signaling the server\r\n     * we want to leave the room.\r\n     */\r\n    doLeave() {\r\n        logger.log('do leave', this.myroomjid);\r\n        const pres = $pres({ to: this.myroomjid,\r\n            type: 'unavailable' });\r\n\r\n        this.presMap.length = 0;\r\n\r\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\r\n        // means that there may not be enough time to send the unavailable\r\n        // presence. Switching Strophe to synchronous sending is not much of an\r\n        // option because it may lead to a noticeable delay in navigating away\r\n        // from the current location. As a compromise, we will try to increase\r\n        // the chances of sending the unavailable presence within the short time\r\n        // span that we have upon unloading by invoking flush() on the\r\n        // connection. We flush() once before sending/queuing the unavailable\r\n        // presence in order to attemtp to have the unavailable presence at the\r\n        // top of the send queue. We flush() once more after sending/queuing the\r\n        // unavailable presence in order to attempt to have it sent as soon as\r\n        // possible.\r\n        // FIXME do not use Strophe.Connection in the ChatRoom directly\r\n        !this.connection.isUsingWebSocket && this.connection.flush();\r\n        this.connection.send(pres);\r\n        this.connection.flush();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    discoRoomInfo() {\r\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\r\n\r\n        const getInfo\r\n            = $iq({\r\n                type: 'get',\r\n                to: this.roomjid\r\n            })\r\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\r\n\r\n        this.connection.sendIQ(getInfo, result => {\r\n            const locked\r\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\r\n                    .length\r\n                    === 1;\r\n\r\n            if (locked !== this.locked) {\r\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\r\n                this.locked = locked;\r\n            }\r\n\r\n            const meetingIdValEl\r\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_meetingId\"]>value');\r\n\r\n            if (meetingIdValEl.length) {\r\n                this.setMeetingId(meetingIdValEl.text());\r\n            } else {\r\n                logger.warn('No meeting ID from backend');\r\n            }\r\n\r\n            const membersOnly = $(result).find('>query>feature[var=\"muc_membersonly\"]').length === 1;\r\n\r\n            const lobbyRoomField\r\n                = $(result).find('>query>x[type=\"result\"]>field[var=\"muc#roominfo_lobbyroom\"]>value');\r\n\r\n            if (this.lobby) {\r\n                this.lobby.setLobbyRoomJid(lobbyRoomField && lobbyRoomField.length ? lobbyRoomField.text() : undefined);\r\n            }\r\n\r\n            if (membersOnly !== this.membersOnlyEnabled) {\r\n                this.membersOnlyEnabled = membersOnly;\r\n                this.eventEmitter.emit(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED, membersOnly);\r\n            }\r\n\r\n        }, error => {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n            logger.error('Error getting room info: ', error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the meeting unique Id (received from the backend).\r\n     *\r\n     * @param {string} meetingId - The new meetings id.\r\n     * @returns {void}\r\n     */\r\n    setMeetingId(meetingId) {\r\n        if (this.meetingId !== meetingId) {\r\n            if (this.meetingId) {\r\n                logger.warn(`Meeting Id changed from:${this.meetingId} to:${meetingId}`);\r\n            }\r\n            this.meetingId = meetingId;\r\n            this.eventEmitter.emit(XMPPEvents.MEETING_ID_SET, meetingId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    createNonAnonymousRoom() {\r\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\r\n\r\n        if (this.options.disableDiscoInfo) {\r\n            return;\r\n        }\r\n\r\n        const getForm = $iq({ type: 'get',\r\n            to: this.roomjid })\r\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\r\n            .c('x', { xmlns: 'jabber:x:data',\r\n                type: 'submit' });\r\n\r\n        this.connection.sendIQ(getForm, form => {\r\n            if (!$(form).find(\r\n                    '>query>x[xmlns=\"jabber:x:data\"]'\r\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\r\n                const errmsg = 'non-anonymous rooms not supported';\r\n\r\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n                logger.error(errmsg);\r\n\r\n                return;\r\n            }\r\n\r\n            const formSubmit = $iq({ to: this.roomjid,\r\n                type: 'set' })\r\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\r\n\r\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\r\n                type: 'submit' });\r\n\r\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\r\n                .c('value')\r\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\r\n\r\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\r\n                .c('value').t('anyone').up().up();\r\n\r\n            this.connection.sendIQ(formSubmit);\r\n\r\n        }, error => {\r\n            GlobalOnErrorHandler.callErrorHandler(error);\r\n            logger.error('Error getting room configuration form: ', error);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles Xmpp Connection status updates.\r\n     *\r\n     * @param {Strophe.Status} status - The Strophe connection status.\r\n     */\r\n    onConnStatusChanged(status) {\r\n        // Send cached presence when the XMPP connection is re-established.\r\n        if (status === XmppConnection.Status.CONNECTED) {\r\n            this.sendPresence();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresence(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const member = {};\r\n        const statusEl = pres.getElementsByTagName('status')[0];\r\n\r\n        if (statusEl) {\r\n            member.status = statusEl.textContent || '';\r\n        }\r\n        let hasStatusUpdate = false;\r\n        let hasVersionUpdate = false;\r\n        const xElement\r\n            = pres.getElementsByTagNameNS(\r\n                'http://jabber.org/protocol/muc#user', 'x')[0];\r\n        const mucUserItem\r\n            = xElement && xElement.getElementsByTagName('item')[0];\r\n\r\n        member.affiliation\r\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\r\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\r\n\r\n        // Focus recognition\r\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\r\n\r\n        member.jid = jid;\r\n        member.isFocus\r\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\r\n        member.isHiddenDomain\r\n            = jid && jid.indexOf('@') > 0\r\n                && this.options.hiddenDomain\r\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\r\n\r\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\r\n            fromHiddenDomain: member.isHiddenDomain,\r\n            presence: pres\r\n        });\r\n\r\n        const xEl = pres.querySelector('x');\r\n\r\n        if (xEl) {\r\n            xEl.remove();\r\n        }\r\n\r\n        const nodes = [];\r\n\r\n        parser.packet2JSON(pres, nodes);\r\n        this.lastPresences[from] = nodes;\r\n\r\n        // process nodes to extract data needed for MUC_JOINED and\r\n        // MUC_MEMBER_JOINED events\r\n        const extractIdentityInformation = node => {\r\n            const identity = {};\r\n            const userInfo = node.children.find(c => c.tagName === 'user');\r\n\r\n            if (userInfo) {\r\n                identity.user = {};\r\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\r\n                    const child\r\n                        = userInfo.children.find(c => c.tagName === tag);\r\n\r\n                    if (child) {\r\n                        identity.user[tag] = child.value;\r\n                    }\r\n                }\r\n            }\r\n            const groupInfo = node.children.find(c => c.tagName === 'group');\r\n\r\n            if (groupInfo) {\r\n                identity.group = groupInfo.value;\r\n            }\r\n\r\n            return identity;\r\n        };\r\n\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            switch (node.tagName) {\r\n            case 'bot': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n                const { type } = attributes;\r\n\r\n                member.botType = type;\r\n                break;\r\n            }\r\n            case 'nick':\r\n                member.nick = node.value;\r\n                break;\r\n            case 'userId':\r\n                member.id = node.value;\r\n                break;\r\n            case 'stats-id':\r\n                member.statsID = node.value;\r\n                break;\r\n            case 'identity':\r\n                member.identity = extractIdentityInformation(node);\r\n                break;\r\n            case 'features': {\r\n                member.features = this._extractFeatures(node);\r\n                break;\r\n            }\r\n            case 'stat': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n                const { name } = attributes;\r\n\r\n                if (name === 'version') {\r\n                    member.version = attributes.value;\r\n                }\r\n                break;\r\n            }\r\n            }\r\n        }\r\n\r\n        if (from === this.myroomjid) {\r\n            const newRole\r\n                = member.affiliation === 'owner' ? member.role : 'none';\r\n\r\n            if (this.role !== newRole) {\r\n                this.role = newRole;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\r\n                    this.role);\r\n            }\r\n            if (!this.joined) {\r\n                this.joined = true;\r\n                const now = this.connectionTimes['muc.joined']\r\n                    = window.performance.now();\r\n\r\n                logger.log('(TIME) MUC joined:\\t', now);\r\n\r\n                // set correct initial state of locked\r\n                if (this.password) {\r\n                    this.locked = true;\r\n                }\r\n\r\n                // Re-send presence in case any presence updates were added,\r\n                // but blocked from sending, during the join process.\r\n                // send the presence only if there was a modification after we had synced it\r\n                if (this.presenceUpdateTime >= this.presenceSyncTime) {\r\n                    this.sendPresence();\r\n                }\r\n\r\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\r\n\r\n                // Now let's check the disco-info to retrieve the\r\n                // meeting Id if any\r\n                !this.options.disableDiscoInfo && this.discoRoomInfo();\r\n            }\r\n        } else if (jid === undefined) {\r\n            logger.info('Ignoring member with undefined JID');\r\n        } else if (this.members[from] === undefined) {\r\n            // new participant\r\n            this.members[from] = member;\r\n            logger.log('entered', from, member);\r\n            hasStatusUpdate = member.status !== undefined;\r\n            hasVersionUpdate = member.version !== undefined;\r\n            if (member.isFocus) {\r\n                this._initFocus(from, member.features);\r\n            } else {\r\n                // identity is being added to member joined, so external\r\n                // services can be notified for that (currently identity is\r\n                // not used inside library)\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_MEMBER_JOINED,\r\n                    from,\r\n                    member.nick,\r\n                    member.role,\r\n                    member.isHiddenDomain,\r\n                    member.statsID,\r\n                    member.status,\r\n                    member.identity,\r\n                    member.botType,\r\n                    member.jid,\r\n                    member.features);\r\n\r\n                // we are reporting the status with the join\r\n                // so we do not want a second event about status update\r\n                hasStatusUpdate = false;\r\n            }\r\n        } else {\r\n            // Presence update for existing participant\r\n            // Watch role change:\r\n            const memberOfThis = this.members[from];\r\n\r\n            if (memberOfThis.role !== member.role) {\r\n                memberOfThis.role = member.role;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\r\n            }\r\n\r\n            // affiliation changed\r\n            if (memberOfThis.affiliation !== member.affiliation) {\r\n                memberOfThis.affiliation = member.affiliation;\r\n            }\r\n\r\n            // fire event that botType had changed\r\n            if (memberOfThis.botType !== member.botType) {\r\n                memberOfThis.botType = member.botType;\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\r\n                    from,\r\n                    member.botType);\r\n            }\r\n\r\n            if (member.isFocus) {\r\n                // From time to time first few presences of the focus are not\r\n                // containing it's jid. That way we can mark later the focus\r\n                // member instead of not marking it at all and not starting the\r\n                // conference.\r\n                // FIXME: Maybe there is a better way to handle this issue. It\r\n                // seems there is some period of time in prosody that the\r\n                // configuration form is received but not applied. And if any\r\n                // participant joins during that period of time the first\r\n                // presence from the focus won't contain\r\n                // <item jid=\"focus...\" />.\r\n                memberOfThis.isFocus = true;\r\n                this._initFocus(from, member.features);\r\n            }\r\n\r\n            // store the new display name\r\n            if (member.displayName) {\r\n                memberOfThis.displayName = member.displayName;\r\n            }\r\n\r\n            // update stored status message to be able to detect changes\r\n            if (memberOfThis.status !== member.status) {\r\n                hasStatusUpdate = true;\r\n                memberOfThis.status = member.status;\r\n            }\r\n\r\n            if (memberOfThis.version !== member.version) {\r\n                hasVersionUpdate = true;\r\n                memberOfThis.version = member.version;\r\n            }\r\n\r\n            if (!isEqual(memberOfThis.features, member.features)) {\r\n                memberOfThis.features = member.features;\r\n                this.eventEmitter.emit(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, from, member.features);\r\n            }\r\n        }\r\n\r\n        // after we had fired member or room joined events, lets fire events\r\n        // for the rest info we got in presence\r\n        for (let i = 0; i < nodes.length; i++) {\r\n            const node = nodes[i];\r\n\r\n            switch (node.tagName) {\r\n            case 'nick':\r\n                if (!member.isFocus) {\r\n                    const displayName\r\n                        = this.xmpp.options.displayJids\r\n                            ? Strophe.getResourceFromJid(from)\r\n                            : member.nick;\r\n\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\r\n                        from,\r\n                        displayName);\r\n                }\r\n                break;\r\n            case 'bridgeNotAvailable':\r\n                if (member.isFocus && !this.noBridgeAvailable) {\r\n                    this.noBridgeAvailable = true;\r\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\r\n                }\r\n                break;\r\n            case 'conference-properties':\r\n                if (member.isFocus) {\r\n                    const properties = {};\r\n\r\n                    for (let j = 0; j < node.children.length; j++) {\r\n                        const { attributes } = node.children[j];\r\n\r\n                        if (attributes && attributes.key) {\r\n                            properties[attributes.key] = attributes.value;\r\n                        }\r\n                    }\r\n\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\r\n                }\r\n                break;\r\n            case 'transcription-status': {\r\n                const { attributes } = node;\r\n\r\n                if (!attributes) {\r\n                    break;\r\n                }\r\n\r\n                const { status } = attributes;\r\n\r\n                if (status && status !== this.transcriptionStatus) {\r\n                    this.transcriptionStatus = status;\r\n                    this.eventEmitter.emit(\r\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\r\n                        status\r\n                    );\r\n                }\r\n\r\n\r\n                break;\r\n            }\r\n            case 'call-control': {\r\n                const att = node.attributes;\r\n\r\n                if (!att) {\r\n                    break;\r\n                }\r\n                this.phoneNumber = att.phone || null;\r\n                this.phonePin = att.pin || null;\r\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\r\n                break;\r\n            }\r\n            default:\r\n                this.processNode(node, from);\r\n            }\r\n        }\r\n\r\n        // Trigger status message update if necessary\r\n        if (hasStatusUpdate) {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.PRESENCE_STATUS,\r\n                from,\r\n                member.status);\r\n        }\r\n\r\n        if (hasVersionUpdate) {\r\n            logger.info(`Received version for ${jid}: ${member.version}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extracts the features from the presence.\r\n     * @param node the node to process.\r\n     * @return features the Set of features where extracted data is added.\r\n     * @private\r\n     */\r\n    _extractFeatures(node) {\r\n        const features = new Set();\r\n\r\n        for (let j = 0; j < node.children.length; j++) {\r\n            const { attributes } = node.children[j];\r\n\r\n            if (attributes && attributes.var) {\r\n                features.add(attributes.var);\r\n            }\r\n        }\r\n\r\n        return features;\r\n    }\r\n\r\n    /**\r\n     * Initialize some properties when the focus participant is verified.\r\n     * @param from jid of the focus\r\n     * @param mucJid the jid of the focus in the muc\r\n     */\r\n    _initFocus(from, features) {\r\n        this.focusMucJid = from;\r\n        this.focusFeatures = features;\r\n    }\r\n\r\n    /**\r\n     * Sets the special listener to be used for \"command\"s whose name starts\r\n     * with \"jitsi_participant_\".\r\n     */\r\n    setParticipantPropertyListener(listener) {\r\n        this.participantPropertyListener = listener;\r\n    }\r\n\r\n    /**\r\n     * Checks if Jicofo supports restarting Jingle session after 'session-terminate'.\r\n     * @returns {boolean}\r\n     */\r\n    supportsRestartByTerminate() {\r\n        return this.focusFeatures\r\n            ? this.focusFeatures.has('https://jitsi.org/meet/jicofo/terminate-restart')\r\n            : false;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param node\r\n     * @param from\r\n     */\r\n    processNode(node, from) {\r\n        // make sure we catch all errors coming from any handler\r\n        // otherwise we can remove the presence handler from strophe\r\n        try {\r\n            let tagHandlers = this.presHandlers[node.tagName];\r\n\r\n            if (node.tagName.startsWith('jitsi_participant_')) {\r\n                tagHandlers = [ this.participantPropertyListener ];\r\n            }\r\n\r\n            if (tagHandlers) {\r\n                tagHandlers.forEach(handler => {\r\n                    handler(node, Strophe.getResourceFromJid(from), from);\r\n                });\r\n            }\r\n        } catch (e) {\r\n            GlobalOnErrorHandler.callErrorHandler(e);\r\n            logger.error(`Error processing:${node.tagName} node.`, e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Send text message to the other participants in the conference\r\n     * @param message\r\n     * @param elementName\r\n     * @param nickname\r\n     */\r\n    sendMessage(message, elementName, nickname) {\r\n        const msg = $msg({ to: this.roomjid,\r\n            type: 'groupchat' });\r\n\r\n        // We are adding the message in a packet extension. If this element\r\n        // is different from 'body', we add a custom namespace.\r\n        // e.g. for 'json-message' extension of message stanza.\r\n        if (elementName === 'body') {\r\n            msg.c(elementName, message).up();\r\n        } else {\r\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\r\n                .up();\r\n        }\r\n        if (nickname) {\r\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\r\n                .t(nickname)\r\n                .up()\r\n                .up();\r\n        }\r\n        this.connection.send(msg);\r\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Send private text message to another participant of the conference\r\n     * @param id id/muc resource of the receiver\r\n     * @param message\r\n     * @param elementName\r\n     * @param nickname\r\n     */\r\n    sendPrivateMessage(id, message, elementName, nickname) {\r\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\r\n            type: 'chat' });\r\n\r\n        // We are adding the message in packet. If this element is different\r\n        // from 'body', we add our custom namespace for the same.\r\n        // e.g. for 'json-message' message extension.\r\n        if (elementName === 'body') {\r\n            msg.c(elementName, message).up();\r\n        } else {\r\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\r\n                .up();\r\n        }\r\n        if (nickname) {\r\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\r\n                .t(nickname)\r\n                .up()\r\n                .up();\r\n        }\r\n\r\n        this.connection.send(msg);\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\r\n    }\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param subject\r\n     */\r\n    setSubject(subject) {\r\n        const msg = $msg({ to: this.roomjid,\r\n            type: 'groupchat' });\r\n\r\n        msg.c('subject', subject);\r\n        this.connection.send(msg);\r\n    }\r\n\r\n    /**\r\n     * Called when participant leaves.\r\n     * @param jid the jid of the participant that leaves\r\n     * @param skipEvents optional params to skip any events, including check\r\n     * whether this is the focus that left\r\n     */\r\n    onParticipantLeft(jid, skipEvents) {\r\n        delete this.lastPresences[jid];\r\n\r\n        if (skipEvents) {\r\n            return;\r\n        }\r\n\r\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\r\n\r\n        this.moderator.onMucMemberLeft(jid);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     * @param from\r\n     */\r\n    onPresenceUnavailable(pres, from) {\r\n        // ignore presence\r\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\r\n            return true;\r\n        }\r\n\r\n        // room destroyed ?\r\n        const destroySelect = $(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>destroy');\r\n\r\n        if (destroySelect.length) {\r\n            let reason;\r\n            const reasonSelect\r\n                = $(pres).find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n                        + '>destroy>reason');\r\n\r\n            if (reasonSelect.length) {\r\n                reason = reasonSelect.text();\r\n            }\r\n\r\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason, destroySelect.attr('jid'));\r\n            this.connection.emuc.doLeave(this.roomjid);\r\n\r\n            return true;\r\n        }\r\n\r\n        // Status code 110 indicates that this notification is \"self-presence\".\r\n        const isSelfPresence\r\n            = $(pres)\r\n                .find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\r\n                        + 'status[code=\"110\"]')\r\n                .length;\r\n        const isKick\r\n            = $(pres)\r\n                .find(\r\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n                        + '>status[code=\"307\"]')\r\n                .length;\r\n        const membersKeys = Object.keys(this.members);\r\n\r\n        if (isKick) {\r\n            const actorSelect\r\n                = $(pres)\r\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\r\n\r\n            let actorNick;\r\n\r\n            if (actorSelect.length) {\r\n                actorNick = actorSelect.attr('nick');\r\n            }\r\n\r\n            // we first fire the kicked so we can show the participant\r\n            // who kicked, before notifying that participant left\r\n            // we fire kicked for us and for any participant kicked\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.KICKED,\r\n                isSelfPresence,\r\n                actorNick,\r\n                Strophe.getResourceFromJid(from));\r\n        }\r\n\r\n        if (isSelfPresence) {\r\n            // If the status code is 110 this means we're leaving and we would\r\n            // like to remove everyone else from our view, so we trigger the\r\n            // event.\r\n            membersKeys.forEach(jid => {\r\n                const member = this.members[jid];\r\n\r\n                delete this.members[jid];\r\n                this.onParticipantLeft(jid, member.isFocus);\r\n            });\r\n            this.connection.emuc.doLeave(this.roomjid);\r\n\r\n            // we fire muc_left only if this is not a kick,\r\n            // kick has both statuses 110 and 307.\r\n            if (!isKick) {\r\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\r\n            }\r\n        } else {\r\n            delete this.members[from];\r\n            this.onParticipantLeft(from, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param msg\r\n     * @param from\r\n     */\r\n    onMessage(msg, from) {\r\n        const nick\r\n            = $(msg).find('>nick[xmlns=\"http://jabber.org/protocol/nick\"]')\r\n                .text()\r\n            || Strophe.getResourceFromJid(from);\r\n\r\n        const type = msg.getAttribute('type');\r\n\r\n        if (type === 'error') {\r\n            const errorMsg = $(msg).find('>error>text').text();\r\n\r\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED, errorMsg);\r\n\r\n            return true;\r\n        }\r\n\r\n        const txt = $(msg).find('>body').text();\r\n        const subject = $(msg).find('>subject');\r\n\r\n        if (subject.length) {\r\n            const subjectText = subject.text();\r\n\r\n            if (subjectText || subjectText === '') {\r\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\r\n\t\t\t\t//Bizwell. by.jhhan\r\n\t\t\t\ttry {\r\n\t\t\t\t\tdocument.title = `${subjectText} | ${interfaceConfig.APP_NAME}`;\r\n\t\t\t\t} catch (e) {}\r\n                logger.log(`Subject is changed to ${subjectText}`);\r\n            }\r\n        }\r\n\r\n        // xep-0203 delay\r\n        let stamp = $(msg).find('>delay').attr('stamp');\r\n\r\n        if (!stamp) {\r\n            // or xep-0091 delay, UTC timestamp\r\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\r\n\r\n            if (stamp) {\r\n                // the format is CCYYMMDDThh:mm:ss\r\n                const dateParts\r\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\r\n\r\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\r\n            }\r\n        }\r\n\r\n        if (from === this.roomjid) {\r\n            let invite;\r\n\r\n            if ($(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>status[code=\"104\"]').length) {\r\n                this.discoRoomInfo();\r\n            } else if ((invite = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>invite'))\r\n                        && invite.length) {\r\n                const passwordSelect = $(msg).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>password');\r\n                let password;\r\n\r\n                if (passwordSelect && passwordSelect.length) {\r\n                    password = passwordSelect.text();\r\n                }\r\n\r\n                this.eventEmitter.emit(XMPPEvents.INVITE_MESSAGE_RECEIVED,\r\n                    from, invite.attr('from'), txt, password);\r\n            }\r\n        }\r\n\r\n        const jsonMessage = $(msg).find('>json-message').text();\r\n\r\n        if (jsonMessage) {\r\n            const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\r\n\r\n            // We emit this event if the message is a valid json, and is not\r\n            // delivered after a delay, i.e. stamp is undefined.\r\n            // e.g. - subtitles should not be displayed if delayed.\r\n            if (parsedJson && stamp === undefined) {\r\n                this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\r\n                    from, parsedJson);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (txt) {\r\n            if (type === 'chat') {\r\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\r\n                        from, nick, txt, this.myroomjid, stamp);\r\n            } else if (type === 'groupchat') {\r\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\r\n                        from, nick, txt, this.myroomjid, stamp);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     * @param from\r\n     */\r\n    onPresenceError(pres, from) {\r\n        if ($(pres)\r\n                .find(\r\n                    '>error[type=\"auth\"]'\r\n                        + '>not-authorized['\r\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\r\n                .length) {\r\n            logger.log('on password required', from);\r\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\r\n        } else if ($(pres)\r\n                .find(\r\n                    '>error[type=\"cancel\"]'\r\n                        + '>not-allowed['\r\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\r\n                .length) {\r\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\r\n\r\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\r\n                // enter the room by replying with 'not-authorized'. This would\r\n                // result in reconnection from authorized domain.\r\n                // We're either missing Jicofo/Prosody config for anonymous\r\n                // domains or something is wrong.\r\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\r\n\r\n            } else {\r\n                logger.warn('onPresError ', pres);\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\r\n            }\r\n        } else if ($(pres).find('>error>service-unavailable').length) {\r\n            logger.warn('Maximum users limit for the room has been reached',\r\n                pres);\r\n            //Bizwell. error message 넘김. by.jhhan\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR, $(pres).find('>error>text').text());\r\n        } else if ($(pres)\r\n            .find(\r\n                '>error[type=\"auth\"]'\r\n                + '>registration-required['\r\n                + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]').length) {\r\n\r\n            // let's extract the lobby jid from the custom field\r\n            const lobbyRoomNode = $(pres).find('>lobbyroom');\r\n            let lobbyRoomJid;\r\n\r\n            if (lobbyRoomNode.length) {\r\n                lobbyRoomJid = lobbyRoomNode.text();\r\n            } else {\r\n                // let's fallback to old location of lobbyroom node, TODO: to be removed in the future once\r\n                // everything is updated\r\n                const lobbyRoomOldNode = $(pres).find('>lobbyroom');\r\n\r\n                if (lobbyRoomOldNode.length) {\r\n                    lobbyRoomJid = lobbyRoomOldNode.text();\r\n                }\r\n            }\r\n\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR, lobbyRoomJid);\r\n        } else {\r\n            logger.warn('onPresError ', pres);\r\n            //Bizwell. error message 넘김. by.jhhan\r\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR, $(pres).find('>error>text').text());\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param affiliation\r\n     */\r\n    setAffiliation(jid, affiliation) {\r\n        const grantIQ = $iq({\r\n            to: this.roomjid,\r\n            type: 'set'\r\n        })\r\n        .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n        .c('item', {\r\n            affiliation,\r\n            nick: Strophe.getResourceFromJid(jid)\r\n        })\r\n        .c('reason').t(`Your affiliation has been changed to '${affiliation}'.`)\r\n        .up().up().up();\r\n\r\n        this.connection.sendIQ(\r\n            grantIQ,\r\n            result => logger.log('Set affiliation of participant with jid: ', jid, 'to', affiliation, result),\r\n            error => logger.log('Set affiliation of participant error: ', error));\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     */\r\n    kick(jid) {\r\n        const kickIQ = $iq({ to: this.roomjid,\r\n            type: 'set' })\r\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\r\n                role: 'none' })\r\n            .c('reason').t('You have been kicked.').up().up().up();\r\n\r\n        this.connection.sendIQ(\r\n            kickIQ,\r\n            result => logger.log('Kick participant with jid: ', jid, result),\r\n            error => logger.log('Kick participant error: ', error));\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     * @param onSuccess\r\n     * @param onError\r\n     * @param onNotSupported\r\n     */\r\n    lockRoom(key, onSuccess, onError, onNotSupported) {\r\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\r\n        this.connection.sendIQ(\r\n            $iq({\r\n                to: this.roomjid,\r\n                type: 'get'\r\n            })\r\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\r\n            res => {\r\n                if ($(res)\r\n                        .find(\r\n                            '>query>x[xmlns=\"jabber:x:data\"]'\r\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\r\n                        .length) {\r\n                    const formsubmit\r\n                        = $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set'\r\n                        })\r\n                            .c('query', {\r\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\r\n                            });\r\n\r\n                    formsubmit.c('x', {\r\n                        xmlns: 'jabber:x:data',\r\n                        type: 'submit'\r\n                    });\r\n                    formsubmit\r\n                        .c('field', { 'var': 'FORM_TYPE' })\r\n                        .c('value')\r\n                        .t('http://jabber.org/protocol/muc#roomconfig')\r\n                        .up()\r\n                        .up();\r\n                    formsubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\r\n                        .c('value')\r\n                        .t(key)\r\n                        .up()\r\n                        .up();\r\n                    formsubmit\r\n                        .c('field',\r\n                             { 'var': 'muc#roomconfig_passwordprotectedroom' })\r\n                        .c('value')\r\n                        .t(key === null || key.length === 0 ? '0' : '1')\r\n                        .up()\r\n                        .up();\r\n\r\n                    // if members only enabled\r\n                    if (this.membersOnlyEnabled) {\r\n                        formsubmit\r\n                            .c('field', { 'var': 'muc#roomconfig_membersonly' })\r\n                            .c('value')\r\n                            .t('true')\r\n                            .up()\r\n                            .up();\r\n                    }\r\n\r\n                    // Fixes a bug in prosody 0.9.+\r\n                    // https://prosody.im/issues/issue/373\r\n                    formsubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\r\n                        .c('value')\r\n                        .t('anyone')\r\n                        .up()\r\n                        .up();\r\n\r\n                    this.connection.sendIQ(formsubmit, onSuccess, onError);\r\n                } else {\r\n                    onNotSupported();\r\n                }\r\n            },\r\n            onError);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Turns off or on the members only config for the main room.\r\n     *\r\n     * @param {boolean} enabled - Whether to turn it on or off.\r\n     * @param onSuccess - optional callback.\r\n     * @param onError - optional callback.\r\n     */\r\n    setMembersOnly(enabled, onSuccess, onError) {\r\n        if (enabled && Object.values(this.members).filter(m => !m.isFocus).length) {\r\n            // first grant membership to all that are in the room\r\n            // currently there is a bug in prosody where it handles only the first item\r\n            // that's why we will send iq per member\r\n            Object.values(this.members).forEach(m => {\r\n                if (m.jid && !MEMBERS_AFFILIATIONS.includes(m.affiliation)) {\r\n                    this.xmpp.connection.sendIQ(\r\n                        $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set' })\r\n                        .c('query', {\r\n                            xmlns: 'http://jabber.org/protocol/muc#admin' })\r\n                        .c('item', {\r\n                            'affiliation': 'member',\r\n                            'jid': m.jid\r\n                        }).up().up());\r\n                }\r\n            });\r\n        }\r\n\r\n        const errorCallback = onError ? onError : () => {}; // eslint-disable-line no-empty-function\r\n\r\n        this.xmpp.connection.sendIQ(\r\n            $iq({\r\n                to: this.roomjid,\r\n                type: 'get'\r\n            }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\r\n            res => {\r\n                if ($(res).find('>query>x[xmlns=\"jabber:x:data\"]>field[var=\"muc#roomconfig_membersonly\"]').length) {\r\n                    const formToSubmit\r\n                        = $iq({\r\n                            to: this.roomjid,\r\n                            type: 'set'\r\n                        }).c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\r\n\r\n                    formToSubmit.c('x', {\r\n                        xmlns: 'jabber:x:data',\r\n                        type: 'submit'\r\n                    });\r\n                    formToSubmit\r\n                        .c('field', { 'var': 'FORM_TYPE' })\r\n                        .c('value')\r\n                        .t('http://jabber.org/protocol/muc#roomconfig')\r\n                        .up()\r\n                        .up();\r\n                    formToSubmit\r\n                        .c('field', { 'var': 'muc#roomconfig_membersonly' })\r\n                        .c('value')\r\n                        .t(enabled ? 'true' : 'false')\r\n                        .up()\r\n                        .up();\r\n\r\n                    // if room is locked from other participant or we are locking it\r\n                    if (this.locked) {\r\n                        formToSubmit\r\n                            .c('field',\r\n                                { 'var': 'muc#roomconfig_passwordprotectedroom' })\r\n                            .c('value')\r\n                            .t('1')\r\n                            .up()\r\n                            .up();\r\n                    }\r\n\r\n                    this.xmpp.connection.sendIQ(formToSubmit, onSuccess, errorCallback);\r\n                } else {\r\n                    errorCallback(new Error('Setting members only room not supported!'));\r\n                }\r\n            },\r\n            errorCallback);\r\n    }\r\n\r\n    /**\r\n     * Adds the key to the presence map, overriding any previous value.\r\n     * @param key\r\n     * @param values\r\n     */\r\n    addToPresence(key, values) {\r\n        return this.addOrReplaceInPresence(key, values);\r\n    }\r\n    \r\n    /**\r\n     * Adds the key to the presence map, overriding any previous value.\r\n     * @param key The key to add or replace.\r\n     * @param values The new values.\r\n     * @returns {boolean|null} <tt>true</tt> if the operation succeeded or <tt>false</tt> when no add or replace was\r\n     * performed as the value was already there.\r\n     */\r\n    addOrReplaceInPresence(key, values) {\r\n        values.tagName = key;\r\n\r\n        const matchingNodes = this.presMap.nodes.filter(node => key === node.tagName);\r\n\r\n        // if we have found just one, let's check is it the same\r\n        if (matchingNodes.length === 1 && isEqual(matchingNodes[0], values)) {\r\n            return false;\r\n        }\r\n\r\n        this.removeFromPresence(key);\r\n        this.presMap.nodes.push(values);\r\n        this.presenceUpdateTime = Date.now();\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Retrieves a value from the presence map.\r\n     *\r\n     * @param {string} key - The key to find the value for.\r\n     * @returns {Object?}\r\n     */\r\n    getFromPresence(key) {\r\n        return this.presMap.nodes.find(node => key === node.tagName);\r\n    }\r\n\r\n    /**\r\n     * Removes a key from the presence map.\r\n     * @param key\r\n     */\r\n    removeFromPresence(key) {\r\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\r\n\r\n        this.presMap.nodes = nodes;\r\n        this.presenceUpdateTime = Date.now();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param name\r\n     * @param handler\r\n     */\r\n    addPresenceListener(name, handler) {\r\n        if (typeof handler !== 'function') {\r\n            throw new Error('\"handler\" is not a function');\r\n        }\r\n        let tagHandlers = this.presHandlers[name];\r\n\r\n        if (!tagHandlers) {\r\n            this.presHandlers[name] = tagHandlers = [];\r\n        }\r\n        if (tagHandlers.indexOf(handler) === -1) {\r\n            tagHandlers.push(handler);\r\n        } else {\r\n            logger.warn(\r\n                `Trying to add the same handler more than once for: ${name}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param name\r\n     * @param handler\r\n     */\r\n    removePresenceListener(name, handler) {\r\n        const tagHandlers = this.presHandlers[name];\r\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\r\n\r\n        // eslint-disable-next-line no-negated-condition\r\n        if (handlerIdx !== -1) {\r\n            tagHandlers.splice(handlerIdx, 1);\r\n        } else {\r\n            logger.warn(`Handler for: ${name} was not registered`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\r\n     * focus.\r\n     * @param mucJid the full MUC address of the user to be checked.\r\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\r\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\r\n     * the MUC then <tt>null</tt> is returned.\r\n     */\r\n    isFocus(mucJid) {\r\n        const member = this.members[mucJid];\r\n\r\n        if (member) {\r\n            return member.isFocus;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    isModerator() {\r\n        return this.role === 'moderator';\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param peerJid\r\n     */\r\n    getMemberRole(peerJid) {\r\n        if (this.members[peerJid]) {\r\n            return this.members[peerJid].role;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     * @param callback\r\n     */\r\n    setVideoMute(mute, callback) {\r\n        this.sendVideoInfoPresence(mute);\r\n        if (callback) {\r\n            callback(mute);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     * @param callback\r\n     */\r\n    setAudioMute(mute, callback) {\r\n        return this.sendAudioInfoPresence(mute, callback);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    addAudioInfoToPresence(mute) {\r\n        const audioMutedTagName = 'audiomuted';\r\n\r\n        // we skip adding it as muted is default value\r\n        if (mute && !this.getFromPresence(audioMutedTagName)) {\r\n            return false;\r\n        }\r\n        \r\n        this.addOrReplaceInPresence(\r\n            'audiomuted',\r\n            {\r\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/audio' },\r\n                value: mute.toString()\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     * @param callback\r\n     */\r\n    sendAudioInfoPresence(mute, callback) {\r\n        this.addAudioInfoToPresence(mute);\r\n\r\n        // FIXME resend presence on CONNECTED\r\n        this.sendPresence();\r\n        if (callback) {\r\n            callback();\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    addVideoInfoToPresence(mute) {\r\n        const videoMutedTagName = 'videomuted';\r\n\r\n        // we skip adding it as muted is default value\r\n        if (mute && !this.getFromPresence(videoMutedTagName)) {\r\n            return false;\r\n        }\r\n        this.addOrReplaceInPresence(\r\n            'videomuted',\r\n            {\r\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/video' },\r\n                value: mute.toString()\r\n            });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param mute\r\n     */\r\n    sendVideoInfoPresence(mute) {\r\n        this.addVideoInfoToPresence(mute);\r\n        this.sendPresence();\r\n    }\r\n\r\n    /**\r\n     * Obtains the info about given media advertised in the MUC presence of\r\n     * the participant identified by the given endpoint JID.\r\n     * @param {string} endpointId the endpoint ID mapped to the participant\r\n     * which corresponds to MUC nickname.\r\n     * @param {MediaType} mediaType the type of the media for which presence\r\n     * info will be obtained.\r\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\r\n     * info or <tt>null</tt> either if there is no presence available or if\r\n     * the media type given is invalid.\r\n     */\r\n    getMediaPresenceInfo(endpointId, mediaType) {\r\n        // Will figure out current muted status by looking up owner's presence\r\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\r\n\r\n        if (!pres) {\r\n            // No presence available\r\n            return null;\r\n        }\r\n        const data = {\r\n            muted: false, // unmuted by default\r\n            videoType: mediaType === MediaType.VIDEO ? VideoType.CAMERA : undefined // 'camera' by default\r\n        };\r\n        let mutedNode = null;\r\n\r\n        if (mediaType === MediaType.AUDIO) {\r\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\r\n        } else if (mediaType === MediaType.VIDEO) {\r\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\r\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\r\n\r\n            if (videoTypeNode.length > 0) {\r\n                data.videoType = videoTypeNode[0].value;\r\n            }\r\n        } else {\r\n            logger.error(`Unsupported media type: ${mediaType}`);\r\n\r\n            return null;\r\n        }\r\n\r\n        data.muted = mutedNode.length > 0 && mutedNode[0].value === 'true';\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the SIP calls are supported and false otherwise\r\n     */\r\n    isSIPCallingSupported() {\r\n        if (this.moderator) {\r\n            return this.moderator.isSipGatewayEnabled();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Dials a number.\r\n     * @param number the number\r\n     */\r\n    dial(number) {\r\n        return this.connection.rayo.dial(number, 'fromnumber',\r\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\r\n            this.focusMucJid);\r\n    }\r\n\r\n    /**\r\n     * Hangup an existing call\r\n     */\r\n    hangup() {\r\n        return this.connection.rayo.hangup();\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Lobby}\r\n     */\r\n    getLobby() {\r\n        return this.lobby;\r\n    }\r\n\r\n    /**\r\n     * Returns the phone number for joining the conference.\r\n     */\r\n    getPhoneNumber() {\r\n        return this.phoneNumber;\r\n    }\r\n\r\n    /**\r\n     * Returns the pin for joining the conference with phone.\r\n     */\r\n    getPhonePin() {\r\n        return this.phonePin;\r\n    }\r\n\r\n    /**\r\n     * Returns the meeting unique ID if any came from backend.\r\n     *\r\n     * @returns {string} - The meeting ID.\r\n     */\r\n    getMeetingId() {\r\n        return this.meetingId;\r\n    }\r\n\r\n    /**\r\n     * Mutes remote participant.\r\n     * @param jid of the participant\r\n     * @param mute\r\n     */\r\n    muteParticipant(jid, mute) {\r\n        logger.info('set mute', mute);\r\n        const iqToFocus = $iq(\r\n            { to: this.focusMucJid,\r\n                type: 'set' })\r\n            .c('mute', {\r\n                xmlns: 'http://jitsi.org/jitmeet/audio',\r\n                jid\r\n            })\r\n            .t(mute.toString())\r\n            .up();\r\n\r\n        this.connection.sendIQ(\r\n            iqToFocus,\r\n            result => logger.log('set mute', result),\r\n            error => logger.log('set mute error', error));\r\n    }\r\n\r\n    /**\r\n     * TODO: Document\r\n     * @param iq\r\n     */\r\n    onMute(iq) {\r\n        const from = iq.getAttribute('from');\r\n\r\n        if (from !== this.focusMucJid) {\r\n            logger.warn('Ignored mute from non focus peer');\r\n\r\n            return;\r\n        }\r\n        const mute = $(iq).find('mute');\r\n\r\n        if (mute.length && mute.text() === 'true') {\r\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\r\n        } else {\r\n            // XXX Why do we support anything but muting? Why do we encode the\r\n            // value in the text of the element? Why do we use a separate XML\r\n            // namespace?\r\n            logger.warn('Ignoring a mute request which does not explicitly '\r\n                + 'specify a positive mute command.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clean any listeners or resources, executed on leaving.\r\n     */\r\n    clean() {\r\n        this._removeConnListeners.forEach(remove => remove());\r\n        this._removeConnListeners = [];\r\n\r\n        this.joined = false;\r\n    }\r\n\r\n    /**\r\n     * Leaves the room. Closes the jingle session.\r\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\r\n     * less than 5s after sending presence unavailable. Otherwise the promise is\r\n     * rejected.\r\n     */\r\n    leave() {\r\n        return new Promise((resolve, reject) => {\r\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\r\n            const eventEmitter = this.eventEmitter;\r\n\r\n            this.clean();\r\n\r\n            /**\r\n             *\r\n             * @param doReject\r\n             */\r\n            function onMucLeft(doReject = false) {\r\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\r\n                clearTimeout(timeout);\r\n                if (doReject) {\r\n                    // the timeout expired\r\n                    reject(new Error('The timeout for the confirmation about '\r\n                        + 'leaving the room expired.'));\r\n                } else {\r\n                    resolve();\r\n                }\r\n            }\r\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\r\n            this.doLeave();\r\n        });\r\n    }\r\n}\r\n\r\n/* eslint-enable newline-per-chained-call */\r\n","/**\r\n * The transciption is on.\r\n *\r\n * @type {String}\r\n */\r\nexport const ON = 'on';\r\n\r\n/**\r\n * The transciption is off.\r\n *\r\n * @type {String}\r\n */\r\nexport const OFF = 'off';\r\n","/* global __filename, module */\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport browser from '../browser';\r\n\r\nimport RTCUtils from './RTCUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Maps our handler types to MediaStreamTrack properties.\r\n */\r\nconst trackHandler2Prop = {\r\n    'track_mute': 'onmute', // Not supported on FF\r\n    'track_unmute': 'onunmute',\r\n    'track_ended': 'onended'\r\n};\r\n\r\n/**\r\n * Represents a single media track (either audio or video).\r\n */\r\nexport default class JitsiTrack extends EventEmitter {\r\n    /* eslint-disable max-params */\r\n    /**\r\n     * Represents a single media track (either audio or video).\r\n     * @constructor\r\n     * @param conference the rtc instance\r\n     * @param stream the WebRTC MediaStream instance\r\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\r\n     * the given <tt>stream</tt>.\r\n     * @param streamInactiveHandler the function that will handle\r\n     *        onended/oninactive events of the stream.\r\n     * @param trackMediaType the media type of the JitsiTrack\r\n     * @param videoType the VideoType for this track if any\r\n     */\r\n    constructor(\r\n            conference,\r\n            stream,\r\n            track,\r\n            streamInactiveHandler,\r\n            trackMediaType,\r\n            videoType) {\r\n        super();\r\n\r\n        // aliases for addListener/removeListener\r\n        this.addEventListener = this.addListener;\r\n        this.removeEventListener = this.off = this.removeListener;\r\n\r\n        /**\r\n         * Array with the HTML elements that are displaying the streams.\r\n         * @type {Array}\r\n         */\r\n        this.containers = [];\r\n        this.conference = conference;\r\n        this.audioLevel = -1;\r\n        this.type = trackMediaType;\r\n        this.track = track;\r\n        this.videoType = videoType;\r\n        this.handlers = new Map();\r\n\r\n        /**\r\n         * Indicates whether this JitsiTrack has been disposed. If true, this\r\n         * JitsiTrack is to be considered unusable and operations involving it\r\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\r\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\r\n         * @type {boolean}\r\n         */\r\n        this.disposed = false;\r\n\r\n        /**\r\n         * The inactive handler which will be triggered when the underlying\r\n         * <tt>MediaStream</tt> ends.\r\n         *\r\n         * @private\r\n         * @type {Function}\r\n         */\r\n        this._streamInactiveHandler = streamInactiveHandler;\r\n\r\n        this._setStream(stream);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Adds onended/oninactive handler to a MediaStream or a MediaStreamTrack.\r\n     * Firefox doesn't fire a inactive event on the MediaStream, instead it fires\r\n     * a onended event on the MediaStreamTrack.\r\n     * @param {Function} handler the handler\r\n     */\r\n    _addMediaStreamInactiveHandler(handler) {\r\n        if (browser.isFirefox()) {\r\n            this.track.onended = handler;\r\n        } else {\r\n            this.stream.oninactive = handler;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\r\n     * depending on the passed type.\r\n     * @param {string} type the type of the handler that is going to be set\r\n     * @param {Function} handler the handler.\r\n     */\r\n    _setHandler(type, handler) {\r\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\r\n            logger.error(`Invalid handler type ${type}`);\r\n\r\n            return;\r\n        }\r\n        if (handler) {\r\n            this.handlers.set(type, handler);\r\n        } else {\r\n            this.handlers.delete(type);\r\n        }\r\n\r\n        if (this.stream) {\r\n            for (const track of this.stream.getTracks()) {\r\n                track[trackHandler2Prop[type]] = handler;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Unregisters all event handlers bound to the underlying media stream/track\r\n     * @private\r\n     */\r\n    _unregisterHandlers() {\r\n        if (!this.stream) {\r\n            logger.warn(\r\n                `${this}: unable to unregister handlers - no stream object`);\r\n\r\n            return;\r\n        }\r\n\r\n        for (const type of this.handlers.keys()) {\r\n            // FIXME Why only video tracks?\r\n            for (const videoTrack of this.stream.getVideoTracks()) {\r\n                videoTrack[trackHandler2Prop[type]] = undefined;\r\n            }\r\n        }\r\n        if (this._streamInactiveHandler) {\r\n            this._addMediaStreamInactiveHandler(undefined);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the stream property of JitsiTrack object and sets all stored\r\n     * handlers to it.\r\n     *\r\n     * @param {MediaStream} stream the new stream.\r\n     * @protected\r\n     */\r\n    _setStream(stream) {\r\n        if (this.stream === stream) {\r\n            return;\r\n        }\r\n\r\n        this.stream = stream;\r\n\r\n        // TODO Practically, that's like the opposite of _unregisterHandlers\r\n        // i.e. may be abstracted into a function/method called\r\n        // _registerHandlers for clarity and easing the maintenance of the two\r\n        // pieces of source code.\r\n        if (this.stream) {\r\n            for (const type of this.handlers.keys()) {\r\n                this._setHandler(type, this.handlers.get(type));\r\n            }\r\n            if (this._streamInactiveHandler) {\r\n                this._addMediaStreamInactiveHandler(this._streamInactiveHandler);\r\n            }\r\n        }\r\n    }\r\n\r\n    getVideoType() {\r\n        return this.videoType;\r\n    }\r\n\r\n    /**\r\n     * Returns the type (audio or video) of this track.\r\n     */\r\n    getType() {\r\n        return this.type;\r\n    }\r\n\r\n    /**\r\n     * Check if this is an audio track.\r\n     */\r\n    isAudioTrack() {\r\n        return this.getType() === MediaType.AUDIO;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\r\n     * according to it's 'muted' field status.\r\n     * @return {boolean} <tt>true</tt> if the underlying\r\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\r\n     */\r\n    isWebRTCTrackMuted() {\r\n        return this.track && this.track.muted;\r\n    }\r\n\r\n    /**\r\n     * Check if this is a video track.\r\n     */\r\n    isVideoTrack() {\r\n        return this.getType() === MediaType.VIDEO;\r\n    }\r\n\r\n    /**\r\n     * Checks whether this is a local track.\r\n     * @abstract\r\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\r\n     */\r\n    isLocal() {\r\n        throw new Error('Not implemented by subclass');\r\n    }\r\n\r\n    /**\r\n     * Check whether this is a local audio track.\r\n     *\r\n     * @return {boolean} -  true if track represents a local audio track, false otherwise.\r\n     */\r\n    isLocalAudioTrack() {\r\n        return this.isAudioTrack() && this.isLocal();\r\n    }\r\n\r\n    /**\r\n     * Returns the WebRTC MediaStream instance.\r\n     */\r\n    getOriginalStream() {\r\n        return this.stream;\r\n    }\r\n\r\n    /**\r\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\r\n     * @returns {String|null}\r\n     */\r\n    getStreamId() {\r\n        return this.stream ? this.stream.id : null;\r\n    }\r\n\r\n    /**\r\n     * Return the underlying WebRTC MediaStreamTrack\r\n     * @returns {MediaStreamTrack}\r\n     */\r\n    getTrack() {\r\n        return this.track;\r\n    }\r\n\r\n    /**\r\n     * Return the underlying WebRTC MediaStreamTrack label\r\n     * @returns {string}\r\n     */\r\n    getTrackLabel() {\r\n        return this.track.label;\r\n    }\r\n\r\n    /**\r\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\r\n     * @returns {String|null}\r\n     */\r\n    getTrackId() {\r\n        return this.track ? this.track.id : null;\r\n    }\r\n\r\n    /**\r\n     * Return meaningful usage label for this track depending on it's media and\r\n     * eventual video type.\r\n     * @returns {string}\r\n     */\r\n    getUsageLabel() {\r\n        if (this.isAudioTrack()) {\r\n            return 'mic';\r\n        }\r\n\r\n        return this.videoType ? this.videoType : 'default';\r\n    }\r\n\r\n    /**\r\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\r\n     * @param container the video/audio container to which this stream is\r\n     *        attached and for which event will be fired.\r\n     * @private\r\n     */\r\n    _maybeFireTrackAttached(container) {\r\n        if (this.conference && container) {\r\n            this.conference._onTrackAttach(this, container);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attaches the MediaStream of this track to an HTML container.\r\n     * Adds the container to the list of containers that are displaying the\r\n     * track.\r\n     *\r\n     * @param container the HTML container which can be 'video' or 'audio'\r\n     * element.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    attach(container) {\r\n        if (this.stream) {\r\n            this._onTrackAttach(container);\r\n            RTCUtils.attachMediaStream(container, this.stream);\r\n        }\r\n        this.containers.push(container);\r\n        this._maybeFireTrackAttached(container);\r\n        this._attachTTFMTracker(container);\r\n    }\r\n\r\n    /**\r\n     * Removes this JitsiTrack from the passed HTML container.\r\n     *\r\n     * @param container the HTML container to detach from this JitsiTrack. If\r\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\r\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\r\n     * which this JitsiTrack is currently attached.\r\n     */\r\n    detach(container) {\r\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\r\n            const c = cs[i];\r\n\r\n            if (!container) {\r\n                this._onTrackDetach(c);\r\n                RTCUtils.attachMediaStream(c, null);\r\n            }\r\n            if (!container || c === container) {\r\n                cs.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        if (container) {\r\n            this._onTrackDetach(container);\r\n            RTCUtils.attachMediaStream(container, null);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been attached to a new container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been detached from a container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Attach time to first media tracker only if there is conference and only\r\n     * for the first element.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\r\n        // Should be defined by the classes that are extending JitsiTrack\r\n    }\r\n\r\n    /**\r\n     * Removes attached event listeners.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    dispose() {\r\n        this.removeAllListeners();\r\n\r\n        this.disposed = true;\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Returns true if this is a video track and the source of the video is a\r\n     * screen capture as opposed to a camera.\r\n     */\r\n    isScreenSharing() {\r\n        // FIXME: Should be fixed or removed.\r\n    }\r\n\r\n    /**\r\n     * Returns id of the track.\r\n     * @returns {string|null} id of the track or null if this is fake track.\r\n     */\r\n    getId() {\r\n        if (this.stream) {\r\n            return RTCUtils.getStreamID(this.stream);\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the MediaStream is active/not ended.\r\n     * When there is no check for active we don't have information and so\r\n     * will return that stream is active (in case of FF).\r\n     * @returns {boolean} whether MediaStream is active.\r\n     */\r\n    isActive() {\r\n        if (typeof this.stream.active !== 'undefined') {\r\n            return this.stream.active;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Sets the audio level for the stream\r\n     * @param {number} audioLevel value between 0 and 1\r\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\r\n     * is source for the audio level. It can be <tt>undefined</tt> for\r\n     * a local track if the audio level was measured outside of the\r\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\r\n     */\r\n    setAudioLevel(audioLevel, tpc) {\r\n        let newAudioLevel = audioLevel;\r\n\r\n        // When using getSynchornizationSources on the audio receiver to gather audio levels for\r\n        // remote tracks, browser reports last known audio levels even when the remote user is\r\n        // audio muted, we need to reset the value to zero here so that the audio levels are cleared.\r\n        // Remote tracks have the tpc info present while local tracks do not.\r\n        if (browser.supportsReceiverStats() && typeof tpc !== 'undefined' && this.isMuted()) {\r\n            newAudioLevel = 0;\r\n        }\r\n\r\n        if (this.audioLevel !== newAudioLevel) {\r\n            this.audioLevel = newAudioLevel;\r\n            this.emit(\r\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                newAudioLevel,\r\n                tpc);\r\n\r\n        // LocalStatsCollector reports a value of 0.008 for muted mics\r\n        // and a value of 0 when there is no audio input.\r\n        } else if (this.audioLevel === 0\r\n            && newAudioLevel === 0\r\n            && this.isLocal()\r\n            && !this.isWebRTCTrackMuted()) {\r\n            this.emit(\r\n                JitsiTrackEvents.NO_AUDIO_INPUT,\r\n                newAudioLevel);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the msid of the stream attached to the JitsiTrack object or null\r\n     * if no stream is attached.\r\n     */\r\n    getMSID() {\r\n        const streamId = this.getStreamId();\r\n        const trackId = this.getTrackId();\r\n\r\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\r\n    }\r\n\r\n    /**\r\n     * Sets new audio output device for track's DOM elements. Video tracks are\r\n     * ignored.\r\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\r\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\r\n     * @returns {Promise}\r\n     */\r\n    setAudioOutput(audioOutputDeviceId) {\r\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\r\n            return Promise.reject(\r\n                new Error('Audio output device change is not supported'));\r\n        }\r\n\r\n        // All audio communication is done through audio tracks, so ignore\r\n        // changing audio output for video tracks at all.\r\n        if (this.isVideoTrack()) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return (\r\n            Promise.all(\r\n                this.containers.map(\r\n                    element =>\r\n                        element.setSinkId(audioOutputDeviceId)\r\n                            .catch(error => {\r\n                                logger.warn(\r\n                                    'Failed to change audio output device on'\r\n                                        + ' element. Default or previously set'\r\n                                        + ' audio output device will be used.',\r\n                                    element,\r\n                                    error);\r\n                                throw error;\r\n                            }))\r\n            )\r\n                .then(() => {\r\n                    this.emit(\r\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\r\n                        audioOutputDeviceId);\r\n                }));\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport RTC from '../RTC/RTC';\r\nimport { createAudioContext } from '../webaudio/WebAudioUtils';\r\n\r\nimport { VAD_SCORE_PUBLISHED } from './DetectionEvents';\r\n\r\n/**\r\n * Connects an audio JitsiLocalTrack to a vadProcessor using WebAudio ScriptProcessorNode.\r\n * Once an object is created audio from the local track flows through the ScriptProcessorNode as raw PCM.\r\n * The PCM is processed by the injected vad module and a voice activity detection score is obtained, the\r\n * score is published to consumers via an EventEmitter.\r\n * After work is done with this service the destroy method needs to be called for a proper cleanup.\r\n *\r\n * @fires VAD_SCORE_PUBLISHED\r\n */\r\nexport default class TrackVADEmitter extends EventEmitter {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param {number} procNodeSampleRate - Sample rate of the ScriptProcessorNode. Possible values  256, 512, 1024,\r\n     *  2048, 4096, 8192, 16384. Passing other values will default to closes neighbor.\r\n     * @param {Object} vadProcessor - VAD processor that allows us to calculate VAD score for PCM samples.\r\n     * @param {JitsiLocalTrack} jitsiLocalTrack - JitsiLocalTrack corresponding to micDeviceId.\r\n     */\r\n    constructor(procNodeSampleRate, vadProcessor, jitsiLocalTrack) {\r\n        super();\r\n\r\n        /**\r\n         * Sample rate of the ScriptProcessorNode.\r\n         */\r\n        this._procNodeSampleRate = procNodeSampleRate;\r\n\r\n        /**\r\n         * VAD Processor that allows us to calculate VAD score for PCM samples\r\n         */\r\n        this._vadProcessor = vadProcessor;\r\n\r\n        /**\r\n         * The JitsiLocalTrack instance.\r\n         */\r\n        this._localTrack = jitsiLocalTrack;\r\n\r\n        /**\r\n         * Buffer to hold residue PCM resulting after a ScriptProcessorNode callback\r\n         */\r\n        this._bufferResidue = new Float32Array([]);\r\n\r\n        /**\r\n         * The AudioContext instance with the preferred sample frequency.\r\n         */\r\n        this._audioContext = createAudioContext({ sampleRate: vadProcessor.getRequiredPCMFrequency() });\r\n\r\n        /**\r\n         * PCM Sample size expected by the VAD Processor instance. We cache it here as this value is used extensively,\r\n         * saves a couple of function calls.\r\n         */\r\n        this._vadSampleSize = vadProcessor.getSampleLength();\r\n\r\n        /**\r\n         * Event listener function that will be called by the ScriptProcessNode with raw PCM data, depending on the set\r\n         * sample rate.\r\n         */\r\n        this._onAudioProcess = this._onAudioProcess.bind(this);\r\n\r\n        this._initializeAudioContext();\r\n    }\r\n\r\n    /**\r\n     * Factory method that sets up all the necessary components for the creation of the TrackVADEmitter.\r\n     *\r\n     * @param {string} micDeviceId - Target microphone device id.\r\n     * @param {number} procNodeSampleRate - Sample rate of the proc node.\r\n     * @param {Object} vadProcessor -Module that calculates the voice activity score for a certain audio PCM sample.\r\n     * The processor needs to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @returns {Promise<TrackVADEmitter>} - Promise resolving in a new instance of TrackVADEmitter.\r\n     */\r\n    static create(micDeviceId, procNodeSampleRate, vadProcessor) {\r\n        return RTC.obtainAudioAndVideoPermissions({\r\n            devices: [ 'audio' ],\r\n            micDeviceId\r\n        }).then(localTrack => {\r\n            // We only expect one audio track when specifying a device id.\r\n            if (!localTrack[0]) {\r\n                throw new Error(`Failed to create jitsi local track for device id: ${micDeviceId}`);\r\n            }\r\n\r\n            return new TrackVADEmitter(procNodeSampleRate, vadProcessor, localTrack[0]);\r\n\r\n            // We have no exception handling at this point as there is nothing to clean up, the vadProcessor\r\n            // life cycle is handled by whoever created this instance.\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets up the audio graph in the AudioContext.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _initializeAudioContext() {\r\n        this._audioSource = this._audioContext.createMediaStreamSource(this._localTrack.stream);\r\n\r\n        // TODO AudioProcessingNode is deprecated in the web audio specifications and the recommended replacement\r\n        // is audio worklet, however at the point of implementation AudioProcessingNode was still de de facto way\r\n        // of achieving this functionality and supported in all major browsers as opposed to audio worklet which\r\n        // was only available in Chrome. This todo is just a reminder that we should replace AudioProcessingNode\r\n        // with audio worklet when it's mature enough and has more browser support.\r\n        // We don't need stereo for determining the VAD score so we create a single channel processing node.\r\n        this._audioProcessingNode = this._audioContext.createScriptProcessor(this._procNodeSampleRate, 1, 1);\r\n    }\r\n\r\n    /**\r\n     * ScriptProcessorNode callback, the input parameters contains the PCM audio that is then sent to rnnoise.\r\n     * Rnnoise only accepts PCM samples of 480 bytes whereas the webaudio processor node can't sample at a multiple\r\n     * of 480 thus after each _onAudioProcess callback there will remain and PCM buffer residue equal\r\n     * to _procNodeSampleRate / 480 which will be added to the next sample buffer and so on.\\\r\n     *\r\n     *\r\n     * @param {AudioProcessingEvent} audioEvent - Audio event.\r\n     * @returns {void}\r\n     * @fires VAD_SCORE_PUBLISHED\r\n     */\r\n    _onAudioProcess(audioEvent) {\r\n        // Prepend the residue PCM buffer from the previous process callback.\r\n        const inData = audioEvent.inputBuffer.getChannelData(0);\r\n        const completeInData = [ ...this._bufferResidue, ...inData ];\r\n        const sampleTimestamp = Date.now();\r\n\r\n        let i = 0;\r\n\r\n        for (; i + this._vadSampleSize < completeInData.length; i += this._vadSampleSize) {\r\n            const pcmSample = completeInData.slice(i, i + this._vadSampleSize);\r\n\r\n            // The VAD processor might change the values inside the array so we make a copy.\r\n            const vadScore = this._vadProcessor.calculateAudioFrameVAD(pcmSample.slice());\r\n\r\n            this.emit(VAD_SCORE_PUBLISHED, {\r\n                timestamp: sampleTimestamp,\r\n                score: vadScore,\r\n                pcmData: pcmSample,\r\n                deviceId: this._localTrack.getDeviceId()\r\n            });\r\n        }\r\n\r\n        this._bufferResidue = completeInData.slice(i, completeInData.length);\r\n    }\r\n\r\n    /**\r\n     * Connects the nodes in the AudioContext to start the flow of audio data.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _connectAudioGraph() {\r\n        this._audioProcessingNode.onaudioprocess = this._onAudioProcess;\r\n        this._audioSource.connect(this._audioProcessingNode);\r\n        this._audioProcessingNode.connect(this._audioContext.destination);\r\n    }\r\n\r\n    /**\r\n     * Disconnects the nodes in the AudioContext.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _disconnectAudioGraph() {\r\n        // Even thought we disconnect the processing node it seems that some callbacks remain queued,\r\n        // resulting in calls with and uninitialized context.\r\n        // eslint-disable-next-line no-empty-function\r\n        this._audioProcessingNode.onaudioprocess = () => {};\r\n        this._audioProcessingNode.disconnect();\r\n        this._audioSource.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Cleanup potentially acquired resources.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _cleanupResources() {\r\n        this._disconnectAudioGraph();\r\n        this._localTrack.stopStream();\r\n    }\r\n\r\n    /**\r\n     * Get the associated track device ID.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getDeviceId() {\r\n        return this._localTrack.getDeviceId();\r\n    }\r\n\r\n\r\n    /**\r\n     * Get the associated track label.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getTrackLabel() {\r\n        return this._localTrack.getDeviceLabel();\r\n    }\r\n\r\n    /**\r\n     * Start the emitter by connecting the audio graph.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    start() {\r\n        this._connectAudioGraph();\r\n    }\r\n\r\n    /**\r\n     * Stops the emitter by disconnecting the audio graph.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        this._disconnectAudioGraph();\r\n        this._bufferResidue = [];\r\n    }\r\n\r\n    /**\r\n     * Destroy TrackVADEmitter instance (release resources and stop callbacks).\r\n     *\r\n     * @returns {void}\r\n     */\r\n    destroy() {\r\n        if (this._destroyed) {\r\n            return;\r\n        }\r\n\r\n        this._cleanupResources();\r\n        this._destroyed = true;\r\n    }\r\n}\r\n","/**\r\n * Adapter that creates AudioContext objects depending on the browser.\r\n *\r\n * @returns {AudioContext} - Return a new AudioContext or undefined if the browser does not support it.\r\n */\r\nexport function createAudioContext(options) {\r\n    const AudioContextImpl = window.AudioContext || window.webkitAudioContext;\r\n\r\n    if (!AudioContextImpl) {\r\n        return undefined;\r\n    }\r\n\r\n    return new AudioContextImpl(options);\r\n}\r\n","/**\r\n * Indicates that the end-to-end round-trip-time for a participant has changed.\r\n */\r\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\r\n","\r\n/**\r\n * Promise-like object which can be passed around for resolving it later. It\r\n * implements the \"thenable\" interface, so it can be used wherever a Promise\r\n * could be used.\r\n *\r\n * In addition a \"reject on timeout\" functionality is provided.\r\n */\r\nexport default class Deferred {\r\n    /**\r\n     * Instantiates a Deferred object.\r\n     */\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = (...args) => {\r\n                this.clearRejectTimeout();\r\n                resolve(...args);\r\n            };\r\n            this.reject = (...args) => {\r\n                this.clearRejectTimeout();\r\n                reject(...args);\r\n            };\r\n        });\r\n        this.then = this.promise.then.bind(this.promise);\r\n        this.catch = this.promise.catch.bind(this.promise);\r\n    }\r\n\r\n    /**\r\n     * Clears the reject timeout.\r\n     */\r\n    clearRejectTimeout() {\r\n        clearTimeout(this._timeout);\r\n    }\r\n\r\n    /**\r\n     * Rejects the promise after the given timeout.\r\n     */\r\n    setRejectTimeout(ms) {\r\n        this._timeout = setTimeout(() => {\r\n            this.reject(new Error('timeout'));\r\n        }, ms);\r\n    }\r\n}\r\n","/**\r\n * A model for keeping track of each user's total\r\n * time as a dominant speaker. The model also\r\n * keeps track of the user's last known name\r\n * in case the user has left the meeting,\r\n * which is also tracked.\r\n */\r\nclass SpeakerStats {\r\n    /**\r\n     * Initializes a new SpeakerStats instance.\r\n     *\r\n     * @constructor\r\n     * @param {string} userId - The id of the user being tracked.\r\n     * @param {string} displayName - The name of the user being tracked.\r\n     * @param {boolean} isLocalStats - True if the stats model tracks\r\n     * the local user.\r\n     * @returns {void}\r\n     */\r\n    constructor(userId, displayName, isLocalStats) {\r\n        this._userId = userId;\r\n        this.setDisplayName(displayName);\r\n        this._isLocalStats = isLocalStats || false;\r\n        this.setDominantSpeaker(false);\r\n        this.totalDominantSpeakerTime = 0;\r\n        this._dominantSpeakerStart = 0;\r\n        this._hasLeft = false;\r\n    }\r\n\r\n    /**\r\n     * Get the user id being tracked.\r\n     *\r\n     * @returns {string} The user id.\r\n     */\r\n    getUserId() {\r\n        return this._userId;\r\n    }\r\n\r\n    /**\r\n     * Get the name of the user being tracked.\r\n     *\r\n     * @returns {string} The user name.\r\n     */\r\n    getDisplayName() {\r\n        return this.displayName;\r\n    }\r\n\r\n    /**\r\n     * Updates the last known name of the user being tracked.\r\n     *\r\n     * @param {string} - The user name.\r\n     * @returns {void}\r\n     */\r\n    setDisplayName(newName) {\r\n        this.displayName = newName;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the stats are tracking the local user.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isLocalStats() {\r\n        return this._isLocalStats;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tracked user is currently a dominant speaker.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isDominantSpeaker() {\r\n        return this._dominantSpeakerStart > 0;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the tracked user is currently a dominant speaker.\r\n     *\r\n     * @param {boolean} - If true, the user will being accumulating time\r\n     * as dominant speaker. If false, the user will not accumulate time\r\n     * and will record any time accumulated since starting as dominant speaker.\r\n     * @returns {void}\r\n     */\r\n    setDominantSpeaker(isNowDominantSpeaker) {\r\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\r\n            this._dominantSpeakerStart = Date.now();\r\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\r\n            const now = Date.now();\r\n            const timeElapsed = now - this._dominantSpeakerStart;\r\n\r\n            this.totalDominantSpeakerTime += timeElapsed;\r\n            this._dominantSpeakerStart = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get how long the tracked user has been dominant speaker.\r\n     *\r\n     * @returns {number} - The speaker time in milliseconds.\r\n     */\r\n    getTotalDominantSpeakerTime() {\r\n        let total = this.totalDominantSpeakerTime;\r\n\r\n        if (this.isDominantSpeaker()) {\r\n            total += Date.now() - this._dominantSpeakerStart;\r\n        }\r\n\r\n        return total;\r\n    }\r\n\r\n    /**\r\n     * Get whether or not the user is still in the meeting.\r\n     *\r\n     * @returns {boolean} True if the user is no longer in the meeting.\r\n     */\r\n    hasLeft() {\r\n        return this._hasLeft;\r\n    }\r\n\r\n    /**\r\n     * Set the user as having left the meeting.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    markAsHasLeft() {\r\n        this._hasLeft = true;\r\n        this.setDominantSpeaker(false);\r\n    }\r\n}\r\n\r\nmodule.exports = SpeakerStats;\r\n","/* Copyright @ 2015-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*jslint latedef:false*/\r\n\r\n/**\r\n * Ordered log levels.\r\n */\r\nvar levels = {\r\n    \"trace\": 0,\r\n    \"debug\": 1,\r\n    \"info\": 2,\r\n    \"log\": 3,\r\n    \"warn\": 4,\r\n    \"error\": 5\r\n};\r\n\r\n/**\r\n * The default transport - console\r\n * @type LoggerTransport\r\n */\r\nLogger.consoleTransport = console;\r\n\r\n/**\r\n * The array which stores currently registered global transports.\r\n * @type {[LoggerTransport]}\r\n */\r\nvar globalTransports = [ Logger.consoleTransport ];\r\n\r\n/**\r\n * Adds given {@link LoggerTransport} instance to the list of global\r\n * transports which means that it'll be used by all {@link Logger}s\r\n * @param {LoggerTransport} transport\r\n */\r\nLogger.addGlobalTransport = function(transport) {\r\n    if (globalTransports.indexOf(transport) === -1) {\r\n        globalTransports.push(transport);\r\n    }\r\n};\r\n\r\n/**\r\n * Removes given {@link LoggerTransport} instance from the list of global\r\n * transports\r\n * @param {LoggerTransport} transport\r\n */\r\nLogger.removeGlobalTransport = function(transport) {\r\n    var transportIdx = globalTransports.indexOf(transport);\r\n    if (transportIdx !== -1) {\r\n        globalTransports.splice(transportIdx, 1);\r\n    }\r\n};\r\n\r\n/**\r\n * The global configuration options.\r\n */\r\nvar globalOptions = {};\r\n\r\n/**\r\n * Sets global options which will be used by all loggers. Changing these works\r\n * even after other loggers are created.\r\n */\r\nLogger.setGlobalOptions = function(options) {\r\n    globalOptions = options || {};\r\n};\r\n\r\n/**\r\n * Parses Error's object stack trace and extracts information about the last\r\n * caller before the log method was called.\r\n * @returns JS object with info about the caller - method name, file location,\r\n * line and column.\r\n */\r\nfunction getCallerInfo() {\r\n    var callerInfo = {\r\n        methodName: \"\",\r\n        fileLocation: \"\",\r\n        line: null,\r\n        column: null\r\n    };\r\n    //gets the part of the stack without the logger wrappers\r\n    var error = new Error();\r\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\r\n    if(!stack || stack.length < 1) {\r\n        return callerInfo;\r\n    }\r\n    var m = null;\r\n    if(stack[3]) {\r\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\r\n    }\r\n    if(!m || m.length <= 4) {\r\n        //Firefox && Safari\r\n        if(stack[2].indexOf(\"log@\") === 0){\r\n            //Safari\r\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\r\n        } else {\r\n            //Firefox\r\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\r\n        }\r\n        return callerInfo;\r\n    }\r\n\r\n    callerInfo.methodName = m[1];\r\n    callerInfo.fileLocation = m[2];\r\n    callerInfo.line = m[3];\r\n    callerInfo.column = m[4];\r\n    return callerInfo;\r\n}\r\n\r\n/**\r\n * Logs messages using the transports and level from the logger.\r\n * @param logger a logger instance.\r\n * @param level the log level of the message. See the levels variable.\r\n * @param arguments array with arguments that will be logged.\r\n */\r\nfunction log() {\r\n    var logger = arguments[0], level = arguments[1],\r\n        args = Array.prototype.slice.call(arguments, 2);\r\n    if(levels[level] < logger.level) {\r\n        return;\r\n    }\r\n\r\n    var callerInfo\r\n        = !(logger.options.disableCallerInfo || globalOptions.disableCallerInfo) &&\r\n            getCallerInfo();\r\n    var transports = globalTransports.concat(logger.transports);\r\n    for(var i = 0; i < transports.length; i++) {\r\n        var t = transports[i];\r\n        var l = t[level];\r\n        if(l && typeof(l) === \"function\") {\r\n            var logPrefixes = [];\r\n\r\n            logPrefixes.push(new Date().toISOString());\r\n\r\n            if (logger.id) {\r\n                logPrefixes.push(\"[\" + logger.id + \"]\");\r\n            }\r\n\r\n            if (callerInfo && callerInfo.methodName.length > 1) {\r\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\r\n            }\r\n\r\n            var fullLogParts = logPrefixes.concat(args);\r\n\r\n            l.bind(t).apply(t, fullLogParts);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n * Constructs new logger object.\r\n * @param level the logging level for the new logger\r\n * @param id optional identifier for the logger instance.\r\n * @param {LoggerTransport} transports optional list of handlers(objects) for\r\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\r\n * @param options optional configuration file for how the logger should behave.\r\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\r\n * method invocation should be included in the log. Defaults to false, so the\r\n * call site will be included.\r\n */\r\nfunction Logger(level, id, transports, options) {\r\n    this.id = id;\r\n    this.options = options || {};\r\n    this.transports = transports;\r\n    if(!this.transports) {\r\n        this.transports = [];\r\n    }\r\n    this.level = levels[level];\r\n    var methods = Object.keys(levels);\r\n    for(var i = 0; i < methods.length; i++){\r\n        this[methods[i]] =\r\n            log.bind(null, this, methods[i]);\r\n    }\r\n}\r\n\r\n/**\r\n * Sets the log level for the logger.\r\n * @param level the new log level.\r\n */\r\nLogger.prototype.setLevel = function (level) {\r\n    this.level = levels[level];\r\n};\r\nmodule.exports = Logger;\r\n\r\n/**\r\n * Enum for the supported log levels.\r\n */\r\nLogger.levels = {\r\n    TRACE: \"trace\",\r\n    DEBUG: \"debug\",\r\n    INFO: \"info\",\r\n    LOG: \"log\",\r\n    WARN: \"warn\",\r\n    ERROR: \"error\"\r\n};\r\n","const AuthenticationEvents = {\r\n    /**\r\n     * Event callback arguments:\r\n     * function(authenticationEnabled, userIdentity)\r\n     * authenticationEnabled - indicates whether authentication has been enabled\r\n     *                         in this session\r\n     * userIdentity - if user has been logged in then it contains user name. If\r\n     *                contains 'null' or 'undefined' then user is not logged in.\r\n     */\r\n    IDENTITY_UPDATED: 'authentication.identity_updated'\r\n};\r\n\r\nmodule.exports = AuthenticationEvents;\r\n","/**\r\n * [js-md5]{@link https://github.com/emn178/js-md5}\r\n *\r\n * @namespace md5\r\n * @version 0.7.3\r\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\r\n * @copyright Chen, Yi-Cyuan 2014-2017\r\n * @license MIT\r\n */\r\n(function () {\r\n  'use strict';\r\n\r\n  var ERROR = 'input is invalid type';\r\n  var WINDOW = typeof window === 'object';\r\n  var root = WINDOW ? window : {};\r\n  if (root.JS_MD5_NO_WINDOW) {\r\n    WINDOW = false;\r\n  }\r\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\r\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\r\n  if (NODE_JS) {\r\n    root = global;\r\n  } else if (WEB_WORKER) {\r\n    root = self;\r\n  }\r\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\r\n  var AMD = typeof define === 'function' && define.amd;\r\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\r\n  var HEX_CHARS = '0123456789abcdef'.split('');\r\n  var EXTRA = [128, 32768, 8388608, -2147483648];\r\n  var SHIFT = [0, 8, 16, 24];\r\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\r\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\r\n\r\n  var blocks = [], buffer8;\r\n  if (ARRAY_BUFFER) {\r\n    var buffer = new ArrayBuffer(68);\r\n    buffer8 = new Uint8Array(buffer);\r\n    blocks = new Uint32Array(buffer);\r\n  }\r\n\r\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\r\n    Array.isArray = function (obj) {\r\n      return Object.prototype.toString.call(obj) === '[object Array]';\r\n    };\r\n  }\r\n\r\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\r\n    ArrayBuffer.isView = function (obj) {\r\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @method hex\r\n   * @memberof md5\r\n   * @description Output hash as hex string\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {String} Hex string\r\n   * @example\r\n   * md5.hex('The quick brown fox jumps over the lazy dog');\r\n   * // equal to\r\n   * md5('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method digest\r\n   * @memberof md5\r\n   * @description Output hash as bytes array\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Array} Bytes array\r\n   * @example\r\n   * md5.digest('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method array\r\n   * @memberof md5\r\n   * @description Output hash as bytes array\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Array} Bytes array\r\n   * @example\r\n   * md5.array('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method arrayBuffer\r\n   * @memberof md5\r\n   * @description Output hash as ArrayBuffer\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {ArrayBuffer} ArrayBuffer\r\n   * @example\r\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method buffer\r\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\r\n   * @memberof md5\r\n   * @description Output hash as ArrayBuffer\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {ArrayBuffer} ArrayBuffer\r\n   * @example\r\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method base64\r\n   * @memberof md5\r\n   * @description Output hash as base64 string\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {String} base64 string\r\n   * @example\r\n   * md5.base64('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  var createOutputMethod = function (outputType) {\r\n    return function (message) {\r\n      return new Md5(true).update(message)[outputType]();\r\n    };\r\n  };\r\n\r\n  /**\r\n   * @method create\r\n   * @memberof md5\r\n   * @description Create Md5 object\r\n   * @returns {Md5} Md5 object.\r\n   * @example\r\n   * var hash = md5.create();\r\n   */\r\n  /**\r\n   * @method update\r\n   * @memberof md5\r\n   * @description Create and update Md5 object\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Md5} Md5 object.\r\n   * @example\r\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\r\n   * // equal to\r\n   * var hash = md5.create();\r\n   * hash.update('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  var createMethod = function () {\r\n    var method = createOutputMethod('hex');\r\n    if (NODE_JS) {\r\n      method = nodeWrap(method);\r\n    }\r\n    method.create = function () {\r\n      return new Md5();\r\n    };\r\n    method.update = function (message) {\r\n      return method.create().update(message);\r\n    };\r\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\r\n      var type = OUTPUT_TYPES[i];\r\n      method[type] = createOutputMethod(type);\r\n    }\r\n    return method;\r\n  };\r\n\r\n  var nodeWrap = function (method) {\r\n    var crypto = eval(\"require('crypto')\");\r\n    var Buffer = eval(\"require('buffer').Buffer\");\r\n    var nodeMethod = function (message) {\r\n      if (typeof message === 'string') {\r\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\r\n      } else {\r\n        if (message === null || message === undefined) {\r\n          throw ERROR;\r\n        } else if (message.constructor === ArrayBuffer) {\r\n          message = new Uint8Array(message);\r\n        }\r\n      }\r\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\r\n        message.constructor === Buffer) {\r\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\r\n      } else {\r\n        return method(message);\r\n      }\r\n    };\r\n    return nodeMethod;\r\n  };\r\n\r\n  /**\r\n   * Md5 class\r\n   * @class Md5\r\n   * @description This is internal class.\r\n   * @see {@link md5.create}\r\n   */\r\n  function Md5(sharedMemory) {\r\n    if (sharedMemory) {\r\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n      this.blocks = blocks;\r\n      this.buffer8 = buffer8;\r\n    } else {\r\n      if (ARRAY_BUFFER) {\r\n        var buffer = new ArrayBuffer(68);\r\n        this.buffer8 = new Uint8Array(buffer);\r\n        this.blocks = new Uint32Array(buffer);\r\n      } else {\r\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n      }\r\n    }\r\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\r\n    this.finalized = this.hashed = false;\r\n    this.first = true;\r\n  }\r\n\r\n  /**\r\n   * @method update\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Update hash\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Md5} Md5 object.\r\n   * @see {@link md5.update}\r\n   */\r\n  Md5.prototype.update = function (message) {\r\n    if (this.finalized) {\r\n      return;\r\n    }\r\n\r\n    var notString, type = typeof message;\r\n    if (type !== 'string') {\r\n      if (type === 'object') {\r\n        if (message === null) {\r\n          throw ERROR;\r\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\r\n          message = new Uint8Array(message);\r\n        } else if (!Array.isArray(message)) {\r\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\r\n            throw ERROR;\r\n          }\r\n        }\r\n      } else {\r\n        throw ERROR;\r\n      }\r\n      notString = true;\r\n    }\r\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\r\n    var buffer8 = this.buffer8;\r\n\r\n    while (index < length) {\r\n      if (this.hashed) {\r\n        this.hashed = false;\r\n        blocks[0] = blocks[16];\r\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n      }\r\n\r\n      if (notString) {\r\n        if (ARRAY_BUFFER) {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            buffer8[i++] = message[index];\r\n          }\r\n        } else {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\r\n          }\r\n        }\r\n      } else {\r\n        if (ARRAY_BUFFER) {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            code = message.charCodeAt(index);\r\n            if (code < 0x80) {\r\n              buffer8[i++] = code;\r\n            } else if (code < 0x800) {\r\n              buffer8[i++] = 0xc0 | (code >> 6);\r\n              buffer8[i++] = 0x80 | (code & 0x3f);\r\n            } else if (code < 0xd800 || code >= 0xe000) {\r\n              buffer8[i++] = 0xe0 | (code >> 12);\r\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\r\n              buffer8[i++] = 0x80 | (code & 0x3f);\r\n            } else {\r\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n              buffer8[i++] = 0xf0 | (code >> 18);\r\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\r\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\r\n              buffer8[i++] = 0x80 | (code & 0x3f);\r\n            }\r\n          }\r\n        } else {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            code = message.charCodeAt(index);\r\n            if (code < 0x80) {\r\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\r\n            } else if (code < 0x800) {\r\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n            } else if (code < 0xd800 || code >= 0xe000) {\r\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n            } else {\r\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.lastByteIndex = i;\r\n      this.bytes += i - this.start;\r\n      if (i >= 64) {\r\n        this.start = i - 64;\r\n        this.hash();\r\n        this.hashed = true;\r\n      } else {\r\n        this.start = i;\r\n      }\r\n    }\r\n    if (this.bytes > 4294967295) {\r\n      this.hBytes += this.bytes / 4294967296 << 0;\r\n      this.bytes = this.bytes % 4294967296;\r\n    }\r\n    return this;\r\n  };\r\n\r\n  Md5.prototype.finalize = function () {\r\n    if (this.finalized) {\r\n      return;\r\n    }\r\n    this.finalized = true;\r\n    var blocks = this.blocks, i = this.lastByteIndex;\r\n    blocks[i >> 2] |= EXTRA[i & 3];\r\n    if (i >= 56) {\r\n      if (!this.hashed) {\r\n        this.hash();\r\n      }\r\n      blocks[0] = blocks[16];\r\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n    }\r\n    blocks[14] = this.bytes << 3;\r\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\r\n    this.hash();\r\n  };\r\n\r\n  Md5.prototype.hash = function () {\r\n    var a, b, c, d, bc, da, blocks = this.blocks;\r\n\r\n    if (this.first) {\r\n      a = blocks[0] - 680876937;\r\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\r\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\r\n      d = (d << 12 | d >>> 20) + a << 0;\r\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\r\n      c = (c << 17 | c >>> 15) + d << 0;\r\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\r\n      b = (b << 22 | b >>> 10) + c << 0;\r\n    } else {\r\n      a = this.h0;\r\n      b = this.h1;\r\n      c = this.h2;\r\n      d = this.h3;\r\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\r\n      a = (a << 7 | a >>> 25) + b << 0;\r\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\r\n      d = (d << 12 | d >>> 20) + a << 0;\r\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\r\n      c = (c << 17 | c >>> 15) + d << 0;\r\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\r\n      b = (b << 22 | b >>> 10) + c << 0;\r\n    }\r\n\r\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\r\n    a = (a << 7 | a >>> 25) + b << 0;\r\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\r\n    d = (d << 12 | d >>> 20) + a << 0;\r\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\r\n    c = (c << 17 | c >>> 15) + d << 0;\r\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\r\n    b = (b << 22 | b >>> 10) + c << 0;\r\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\r\n    a = (a << 7 | a >>> 25) + b << 0;\r\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\r\n    d = (d << 12 | d >>> 20) + a << 0;\r\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\r\n    c = (c << 17 | c >>> 15) + d << 0;\r\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\r\n    b = (b << 22 | b >>> 10) + c << 0;\r\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\r\n    a = (a << 7 | a >>> 25) + b << 0;\r\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\r\n    d = (d << 12 | d >>> 20) + a << 0;\r\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\r\n    c = (c << 17 | c >>> 15) + d << 0;\r\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\r\n    b = (b << 22 | b >>> 10) + c << 0;\r\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\r\n    a = (a << 5 | a >>> 27) + b << 0;\r\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\r\n    d = (d << 9 | d >>> 23) + a << 0;\r\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\r\n    c = (c << 14 | c >>> 18) + d << 0;\r\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\r\n    b = (b << 20 | b >>> 12) + c << 0;\r\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\r\n    a = (a << 5 | a >>> 27) + b << 0;\r\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\r\n    d = (d << 9 | d >>> 23) + a << 0;\r\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\r\n    c = (c << 14 | c >>> 18) + d << 0;\r\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\r\n    b = (b << 20 | b >>> 12) + c << 0;\r\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\r\n    a = (a << 5 | a >>> 27) + b << 0;\r\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\r\n    d = (d << 9 | d >>> 23) + a << 0;\r\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\r\n    c = (c << 14 | c >>> 18) + d << 0;\r\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\r\n    b = (b << 20 | b >>> 12) + c << 0;\r\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\r\n    a = (a << 5 | a >>> 27) + b << 0;\r\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\r\n    d = (d << 9 | d >>> 23) + a << 0;\r\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\r\n    c = (c << 14 | c >>> 18) + d << 0;\r\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\r\n    b = (b << 20 | b >>> 12) + c << 0;\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[5] - 378558;\r\n    a = (a << 4 | a >>> 28) + b << 0;\r\n    d += (bc ^ a) + blocks[8] - 2022574463;\r\n    d = (d << 11 | d >>> 21) + a << 0;\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[11] + 1839030562;\r\n    c = (c << 16 | c >>> 16) + d << 0;\r\n    b += (da ^ c) + blocks[14] - 35309556;\r\n    b = (b << 23 | b >>> 9) + c << 0;\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[1] - 1530992060;\r\n    a = (a << 4 | a >>> 28) + b << 0;\r\n    d += (bc ^ a) + blocks[4] + 1272893353;\r\n    d = (d << 11 | d >>> 21) + a << 0;\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[7] - 155497632;\r\n    c = (c << 16 | c >>> 16) + d << 0;\r\n    b += (da ^ c) + blocks[10] - 1094730640;\r\n    b = (b << 23 | b >>> 9) + c << 0;\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[13] + 681279174;\r\n    a = (a << 4 | a >>> 28) + b << 0;\r\n    d += (bc ^ a) + blocks[0] - 358537222;\r\n    d = (d << 11 | d >>> 21) + a << 0;\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[3] - 722521979;\r\n    c = (c << 16 | c >>> 16) + d << 0;\r\n    b += (da ^ c) + blocks[6] + 76029189;\r\n    b = (b << 23 | b >>> 9) + c << 0;\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[9] - 640364487;\r\n    a = (a << 4 | a >>> 28) + b << 0;\r\n    d += (bc ^ a) + blocks[12] - 421815835;\r\n    d = (d << 11 | d >>> 21) + a << 0;\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[15] + 530742520;\r\n    c = (c << 16 | c >>> 16) + d << 0;\r\n    b += (da ^ c) + blocks[2] - 995338651;\r\n    b = (b << 23 | b >>> 9) + c << 0;\r\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\r\n    a = (a << 6 | a >>> 26) + b << 0;\r\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\r\n    d = (d << 10 | d >>> 22) + a << 0;\r\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\r\n    c = (c << 15 | c >>> 17) + d << 0;\r\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\r\n    b = (b << 21 | b >>> 11) + c << 0;\r\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\r\n    a = (a << 6 | a >>> 26) + b << 0;\r\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\r\n    d = (d << 10 | d >>> 22) + a << 0;\r\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\r\n    c = (c << 15 | c >>> 17) + d << 0;\r\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\r\n    b = (b << 21 | b >>> 11) + c << 0;\r\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\r\n    a = (a << 6 | a >>> 26) + b << 0;\r\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\r\n    d = (d << 10 | d >>> 22) + a << 0;\r\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\r\n    c = (c << 15 | c >>> 17) + d << 0;\r\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\r\n    b = (b << 21 | b >>> 11) + c << 0;\r\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\r\n    a = (a << 6 | a >>> 26) + b << 0;\r\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\r\n    d = (d << 10 | d >>> 22) + a << 0;\r\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\r\n    c = (c << 15 | c >>> 17) + d << 0;\r\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\r\n    b = (b << 21 | b >>> 11) + c << 0;\r\n\r\n    if (this.first) {\r\n      this.h0 = a + 1732584193 << 0;\r\n      this.h1 = b - 271733879 << 0;\r\n      this.h2 = c - 1732584194 << 0;\r\n      this.h3 = d + 271733878 << 0;\r\n      this.first = false;\r\n    } else {\r\n      this.h0 = this.h0 + a << 0;\r\n      this.h1 = this.h1 + b << 0;\r\n      this.h2 = this.h2 + c << 0;\r\n      this.h3 = this.h3 + d << 0;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @method hex\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as hex string\r\n   * @returns {String} Hex string\r\n   * @see {@link md5.hex}\r\n   * @example\r\n   * hash.hex();\r\n   */\r\n  Md5.prototype.hex = function () {\r\n    this.finalize();\r\n\r\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\r\n\r\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\r\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\r\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\r\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\r\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\r\n  };\r\n\r\n  /**\r\n   * @method toString\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as hex string\r\n   * @returns {String} Hex string\r\n   * @see {@link md5.hex}\r\n   * @example\r\n   * hash.toString();\r\n   */\r\n  Md5.prototype.toString = Md5.prototype.hex;\r\n\r\n  /**\r\n   * @method digest\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as bytes array\r\n   * @returns {Array} Bytes array\r\n   * @see {@link md5.digest}\r\n   * @example\r\n   * hash.digest();\r\n   */\r\n  Md5.prototype.digest = function () {\r\n    this.finalize();\r\n\r\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\r\n    return [\r\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\r\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\r\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\r\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\r\n    ];\r\n  };\r\n\r\n  /**\r\n   * @method array\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as bytes array\r\n   * @returns {Array} Bytes array\r\n   * @see {@link md5.array}\r\n   * @example\r\n   * hash.array();\r\n   */\r\n  Md5.prototype.array = Md5.prototype.digest;\r\n\r\n  /**\r\n   * @method arrayBuffer\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as ArrayBuffer\r\n   * @returns {ArrayBuffer} ArrayBuffer\r\n   * @see {@link md5.arrayBuffer}\r\n   * @example\r\n   * hash.arrayBuffer();\r\n   */\r\n  Md5.prototype.arrayBuffer = function () {\r\n    this.finalize();\r\n\r\n    var buffer = new ArrayBuffer(16);\r\n    var blocks = new Uint32Array(buffer);\r\n    blocks[0] = this.h0;\r\n    blocks[1] = this.h1;\r\n    blocks[2] = this.h2;\r\n    blocks[3] = this.h3;\r\n    return buffer;\r\n  };\r\n\r\n  /**\r\n   * @method buffer\r\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as ArrayBuffer\r\n   * @returns {ArrayBuffer} ArrayBuffer\r\n   * @see {@link md5.buffer}\r\n   * @example\r\n   * hash.buffer();\r\n   */\r\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\r\n\r\n  /**\r\n   * @method base64\r\n   * @memberof Md5\r\n   * @instance\r\n   * @description Output hash as base64 string\r\n   * @returns {String} base64 string\r\n   * @see {@link md5.base64}\r\n   * @example\r\n   * hash.base64();\r\n   */\r\n  Md5.prototype.base64 = function () {\r\n    var v1, v2, v3, base64Str = '', bytes = this.array();\r\n    for (var i = 0; i < 15;) {\r\n      v1 = bytes[i++];\r\n      v2 = bytes[i++];\r\n      v3 = bytes[i++];\r\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\r\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\r\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\r\n        BASE64_ENCODE_CHAR[v3 & 63];\r\n    }\r\n    v1 = bytes[i];\r\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\r\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\r\n      '==';\r\n    return base64Str;\r\n  };\r\n\r\n  var exports = createMethod();\r\n\r\n  if (COMMON_JS) {\r\n    module.exports = exports;\r\n  } else {\r\n    /**\r\n     * @method md5\b\r\n     * @description Md5 hash function, export to global in browsers.\r\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n     * @returns {String} md5 hashes\r\n     * @example\r\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\r\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\r\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\r\n     *\r\n     * // It also supports UTF-8 encoding\r\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\r\n     *\r\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\r\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\r\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\r\n     */\r\n    root.md5 = exports;\r\n    if (AMD) {\r\n      define(function () {\r\n        return exports;\r\n      });\r\n    }\r\n  }\r\n})();\r\n","/**\r\n * lodash (Custom Build) <https://lodash.com/>\r\n * Build: `lodash modularize exports=\"npm\" -o ./`\r\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\r\n * Released under MIT license <https://lodash.com/license>\r\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\r\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n */\r\n\r\n/** Used as the `TypeError` message for \"Functions\" methods. */\r\nvar FUNC_ERROR_TEXT = 'Expected a function';\r\n\r\n/** Used as references for various `Number` constants. */\r\nvar NAN = 0 / 0;\r\n\r\n/** `Object#toString` result references. */\r\nvar symbolTag = '[object Symbol]';\r\n\r\n/** Used to match leading and trailing whitespace. */\r\nvar reTrim = /^\\s+|\\s+$/g;\r\n\r\n/** Used to detect bad signed hexadecimal string values. */\r\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\r\n\r\n/** Used to detect binary string values. */\r\nvar reIsBinary = /^0b[01]+$/i;\r\n\r\n/** Used to detect octal string values. */\r\nvar reIsOctal = /^0o[0-7]+$/i;\r\n\r\n/** Built-in method references without a dependency on `root`. */\r\nvar freeParseInt = parseInt;\r\n\r\n/** Detect free variable `global` from Node.js. */\r\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\r\n\r\n/** Detect free variable `self`. */\r\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\r\n\r\n/** Used as a reference to the global object. */\r\nvar root = freeGlobal || freeSelf || Function('return this')();\r\n\r\n/** Used for built-in method references. */\r\nvar objectProto = Object.prototype;\r\n\r\n/**\r\n * Used to resolve the\r\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\r\n * of values.\r\n */\r\nvar objectToString = objectProto.toString;\r\n\r\n/* Built-in method references for those with the same name as other `lodash` methods. */\r\nvar nativeMax = Math.max,\r\n    nativeMin = Math.min;\r\n\r\n/**\r\n * Gets the timestamp of the number of milliseconds that have elapsed since\r\n * the Unix epoch (1 January 1970 00:00:00 UTC).\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 2.4.0\r\n * @category Date\r\n * @returns {number} Returns the timestamp.\r\n * @example\r\n *\r\n * _.defer(function(stamp) {\r\n *   console.log(_.now() - stamp);\r\n * }, _.now());\r\n * // => Logs the number of milliseconds it took for the deferred invocation.\r\n */\r\nvar now = function() {\r\n  return root.Date.now();\r\n};\r\n\r\n/**\r\n * Creates a debounced function that delays invoking `func` until after `wait`\r\n * milliseconds have elapsed since the last time the debounced function was\r\n * invoked. The debounced function comes with a `cancel` method to cancel\r\n * delayed `func` invocations and a `flush` method to immediately invoke them.\r\n * Provide `options` to indicate whether `func` should be invoked on the\r\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\r\n * with the last arguments provided to the debounced function. Subsequent\r\n * calls to the debounced function return the result of the last `func`\r\n * invocation.\r\n *\r\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\r\n * invoked on the trailing edge of the timeout only if the debounced function\r\n * is invoked more than once during the `wait` timeout.\r\n *\r\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\r\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\r\n *\r\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\r\n * for details over the differences between `_.debounce` and `_.throttle`.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Function\r\n * @param {Function} func The function to debounce.\r\n * @param {number} [wait=0] The number of milliseconds to delay.\r\n * @param {Object} [options={}] The options object.\r\n * @param {boolean} [options.leading=false]\r\n *  Specify invoking on the leading edge of the timeout.\r\n * @param {number} [options.maxWait]\r\n *  The maximum time `func` is allowed to be delayed before it's invoked.\r\n * @param {boolean} [options.trailing=true]\r\n *  Specify invoking on the trailing edge of the timeout.\r\n * @returns {Function} Returns the new debounced function.\r\n * @example\r\n *\r\n * // Avoid costly calculations while the window size is in flux.\r\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\r\n *\r\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\r\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\r\n *   'leading': true,\r\n *   'trailing': false\r\n * }));\r\n *\r\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\r\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\r\n * var source = new EventSource('/stream');\r\n * jQuery(source).on('message', debounced);\r\n *\r\n * // Cancel the trailing debounced invocation.\r\n * jQuery(window).on('popstate', debounced.cancel);\r\n */\r\nfunction debounce(func, wait, options) {\r\n  var lastArgs,\r\n      lastThis,\r\n      maxWait,\r\n      result,\r\n      timerId,\r\n      lastCallTime,\r\n      lastInvokeTime = 0,\r\n      leading = false,\r\n      maxing = false,\r\n      trailing = true;\r\n\r\n  if (typeof func != 'function') {\r\n    throw new TypeError(FUNC_ERROR_TEXT);\r\n  }\r\n  wait = toNumber(wait) || 0;\r\n  if (isObject(options)) {\r\n    leading = !!options.leading;\r\n    maxing = 'maxWait' in options;\r\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\r\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\r\n  }\r\n\r\n  function invokeFunc(time) {\r\n    var args = lastArgs,\r\n        thisArg = lastThis;\r\n\r\n    lastArgs = lastThis = undefined;\r\n    lastInvokeTime = time;\r\n    result = func.apply(thisArg, args);\r\n    return result;\r\n  }\r\n\r\n  function leadingEdge(time) {\r\n    // Reset any `maxWait` timer.\r\n    lastInvokeTime = time;\r\n    // Start the timer for the trailing edge.\r\n    timerId = setTimeout(timerExpired, wait);\r\n    // Invoke the leading edge.\r\n    return leading ? invokeFunc(time) : result;\r\n  }\r\n\r\n  function remainingWait(time) {\r\n    var timeSinceLastCall = time - lastCallTime,\r\n        timeSinceLastInvoke = time - lastInvokeTime,\r\n        result = wait - timeSinceLastCall;\r\n\r\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\r\n  }\r\n\r\n  function shouldInvoke(time) {\r\n    var timeSinceLastCall = time - lastCallTime,\r\n        timeSinceLastInvoke = time - lastInvokeTime;\r\n\r\n    // Either this is the first call, activity has stopped and we're at the\r\n    // trailing edge, the system time has gone backwards and we're treating\r\n    // it as the trailing edge, or we've hit the `maxWait` limit.\r\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\r\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\r\n  }\r\n\r\n  function timerExpired() {\r\n    var time = now();\r\n    if (shouldInvoke(time)) {\r\n      return trailingEdge(time);\r\n    }\r\n    // Restart the timer.\r\n    timerId = setTimeout(timerExpired, remainingWait(time));\r\n  }\r\n\r\n  function trailingEdge(time) {\r\n    timerId = undefined;\r\n\r\n    // Only invoke if we have `lastArgs` which means `func` has been\r\n    // debounced at least once.\r\n    if (trailing && lastArgs) {\r\n      return invokeFunc(time);\r\n    }\r\n    lastArgs = lastThis = undefined;\r\n    return result;\r\n  }\r\n\r\n  function cancel() {\r\n    if (timerId !== undefined) {\r\n      clearTimeout(timerId);\r\n    }\r\n    lastInvokeTime = 0;\r\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\r\n  }\r\n\r\n  function flush() {\r\n    return timerId === undefined ? result : trailingEdge(now());\r\n  }\r\n\r\n  function debounced() {\r\n    var time = now(),\r\n        isInvoking = shouldInvoke(time);\r\n\r\n    lastArgs = arguments;\r\n    lastThis = this;\r\n    lastCallTime = time;\r\n\r\n    if (isInvoking) {\r\n      if (timerId === undefined) {\r\n        return leadingEdge(lastCallTime);\r\n      }\r\n      if (maxing) {\r\n        // Handle invocations in a tight loop.\r\n        timerId = setTimeout(timerExpired, wait);\r\n        return invokeFunc(lastCallTime);\r\n      }\r\n    }\r\n    if (timerId === undefined) {\r\n      timerId = setTimeout(timerExpired, wait);\r\n    }\r\n    return result;\r\n  }\r\n  debounced.cancel = cancel;\r\n  debounced.flush = flush;\r\n  return debounced;\r\n}\r\n\r\n/**\r\n * Checks if `value` is the\r\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\r\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 0.1.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\r\n * @example\r\n *\r\n * _.isObject({});\r\n * // => true\r\n *\r\n * _.isObject([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObject(_.noop);\r\n * // => true\r\n *\r\n * _.isObject(null);\r\n * // => false\r\n */\r\nfunction isObject(value) {\r\n  var type = typeof value;\r\n  return !!value && (type == 'object' || type == 'function');\r\n}\r\n\r\n/**\r\n * Checks if `value` is object-like. A value is object-like if it's not `null`\r\n * and has a `typeof` result of \"object\".\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\r\n * @example\r\n *\r\n * _.isObjectLike({});\r\n * // => true\r\n *\r\n * _.isObjectLike([1, 2, 3]);\r\n * // => true\r\n *\r\n * _.isObjectLike(_.noop);\r\n * // => false\r\n *\r\n * _.isObjectLike(null);\r\n * // => false\r\n */\r\nfunction isObjectLike(value) {\r\n  return !!value && typeof value == 'object';\r\n}\r\n\r\n/**\r\n * Checks if `value` is classified as a `Symbol` primitive or object.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to check.\r\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n * @example\r\n *\r\n * _.isSymbol(Symbol.iterator);\r\n * // => true\r\n *\r\n * _.isSymbol('abc');\r\n * // => false\r\n */\r\nfunction isSymbol(value) {\r\n  return typeof value == 'symbol' ||\r\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\r\n}\r\n\r\n/**\r\n * Converts `value` to a number.\r\n *\r\n * @static\r\n * @memberOf _\r\n * @since 4.0.0\r\n * @category Lang\r\n * @param {*} value The value to process.\r\n * @returns {number} Returns the number.\r\n * @example\r\n *\r\n * _.toNumber(3.2);\r\n * // => 3.2\r\n *\r\n * _.toNumber(Number.MIN_VALUE);\r\n * // => 5e-324\r\n *\r\n * _.toNumber(Infinity);\r\n * // => Infinity\r\n *\r\n * _.toNumber('3.2');\r\n * // => 3.2\r\n */\r\nfunction toNumber(value) {\r\n  if (typeof value == 'number') {\r\n    return value;\r\n  }\r\n  if (isSymbol(value)) {\r\n    return NAN;\r\n  }\r\n  if (isObject(value)) {\r\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\r\n    value = isObject(other) ? (other + '') : other;\r\n  }\r\n  if (typeof value != 'string') {\r\n    return value === 0 ? value : +value;\r\n  }\r\n  value = value.replace(reTrim, '');\r\n  var isBinary = reIsBinary.test(value);\r\n  return (isBinary || reIsOctal.test(value))\r\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\r\n    : (reIsBadHex.test(value) ? NAN : +value);\r\n}\r\n\r\nmodule.exports = debounce;\r\n","/**\r\n * Derives a set of keys from the master key.\r\n * @param {CryptoKey} material - master key to derive from\r\n *\r\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\r\n */\r\nexport async function deriveKeys(material) {\r\n    const info = new ArrayBuffer();\r\n    const textEncoder = new TextEncoder();\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\r\n    const encryptionKey = await crypto.subtle.deriveKey({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameEncryptionKey'),\r\n        hash: 'SHA-256',\r\n        info\r\n    }, material, {\r\n        name: 'AES-CTR',\r\n        length: 128\r\n    }, false, [ 'encrypt', 'decrypt' ]);\r\n    const authenticationKey = await crypto.subtle.deriveKey({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameAuthenticationKey'),\r\n        hash: 'SHA-256',\r\n        info\r\n    }, material, {\r\n        name: 'HMAC',\r\n        hash: 'SHA-256'\r\n    }, false, [ 'sign' ]);\r\n    const saltKey = await crypto.subtle.deriveBits({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameSaltKey'),\r\n        hash: 'SHA-256',\r\n        info\r\n    }, material, 128);\r\n\r\n    return {\r\n        material,\r\n        encryptionKey,\r\n        authenticationKey,\r\n        saltKey\r\n    };\r\n}\r\n\r\n/**\r\n * Ratchets a key. See\r\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\r\n * @param {CryptoKey} material - base key material\r\n * @returns {ArrayBuffer} - ratcheted key material\r\n */\r\nexport async function ratchet(material) {\r\n    const textEncoder = new TextEncoder();\r\n\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\r\n    return crypto.subtle.deriveBits({\r\n        name: 'HKDF',\r\n        salt: textEncoder.encode('JFrameRatchetKey'),\r\n        hash: 'SHA-256',\r\n        info: new ArrayBuffer()\r\n    }, material, 256);\r\n}\r\n\r\n/**\r\n * Converts a raw key into a WebCrypto key object with default options\r\n * suitable for our usage.\r\n * @param {ArrayBuffer} keyBytes - raw key\r\n * @param {Array} keyUsages - key usages, see importKey documentation\r\n * @returns {CryptoKey} - the WebCrypto key.\r\n */\r\nexport async function importKey(keyBytes) {\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\r\n    return crypto.subtle.importKey('raw', keyBytes, 'HKDF', false, [ 'deriveBits', 'deriveKey' ]);\r\n}\r\n","import { EventEmitter } from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nimport { VAD_SCORE_PUBLISHED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\nimport TrackVADEmitter from './TrackVADEmitter';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\r\n * @type {number}\r\n */\r\nconst VAD_EMITTER_SAMPLE_RATE = 4096;\r\n\r\n/**\r\n * Connects a TrackVADEmitter to the target conference local audio track and manages various services that use\r\n * the data to produce audio analytics (VADTalkMutedDetection and VADNoiseDetection).\r\n */\r\nexport default class VADAudioAnalyser extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADAudioAnalyser</tt>\r\n     * @param {JitsiConference} conference - JitsiConference instance that created us.\r\n     * @param {Object} createVADProcessor - Function that creates a Voice activity detection processor. The processor\r\n     * needs to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by getSampleLength.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @constructor\r\n     */\r\n    constructor(conference, createVADProcessor) {\r\n        super();\r\n\r\n        /**\r\n         * Member function that instantiates a VAD processor.\r\n         */\r\n        this._createVADProcessor = createVADProcessor;\r\n\r\n        /**\r\n         * Current {@link TrackVADEmitter}. VAD Emitter uses a {@link JitsiLocalTrack} and VAD processor to generate\r\n         * period voice probability scores.\r\n         */\r\n        this._vadEmitter = null;\r\n\r\n        /**\r\n         * Current state of the _vadEmitter\r\n         */\r\n        this._isVADEmitterRunning = false;\r\n\r\n        /**\r\n         * Array of currently attached VAD processing services.\r\n         */\r\n        this._detectionServices = [];\r\n\r\n        /**\r\n         * Promise used to chain create and destroy operations associated with TRACK_ADDED and TRACK_REMOVED events\r\n         * coming from the conference.\r\n         * Because we have an async created component (VAD Processor) we need to make sure that it's initialized before\r\n         * we destroy it ( when changing the device for instance), or when we use it from an external point of entry\r\n         * i.e. (TRACK_MUTE_CHANGED event callback).\r\n         */\r\n        this._vadInitTracker = Promise.resolve();\r\n\r\n        /**\r\n         * Listens for {@link TrackVADEmitter} events and processes them.\r\n         */\r\n        this._processVADScore = this._processVADScore.bind(this);\r\n\r\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\r\n        conference.on(JitsiConferenceEvents.TRACK_REMOVED, this._trackRemoved.bind(this));\r\n        conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED, this._trackMuteChanged.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Attach a VAD detector service to the analyser and handle it's state changes.\r\n     *\r\n     * @param {Object} vadTMDetector\r\n     */\r\n    addVADDetectionService(vadService) {\r\n        this._detectionServices.push(vadService);\r\n        vadService.on(DETECTOR_STATE_CHANGE, () => {\r\n            // When the state of a detector changes check if there are any active detectors attached so that\r\n            // the _vadEmitter doesn't run needlessly.\r\n            const activeDetector = this._detectionServices.filter(detector => detector.isActive() === true);\r\n\r\n            // If there are no active detectors running and the vadEmitter is running then stop the emitter as it is\r\n            // uses a considerable amount of CPU. Otherwise start the service if it's stopped and there is a detector\r\n            // that needs it.\r\n            if (!activeDetector.length && this._isVADEmitterRunning) {\r\n                this._stopVADEmitter();\r\n            } else if (!this._isVADEmitterRunning) {\r\n                this._startVADEmitter();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start the {@link TrackVADEmitter} and attach the event listener.\r\n     * @returns {void}\r\n     */\r\n    _startVADEmitter() {\r\n        this._vadEmitter.on(VAD_SCORE_PUBLISHED, this._processVADScore);\r\n        this._vadEmitter.start();\r\n        this._isVADEmitterRunning = true;\r\n    }\r\n\r\n    /**\r\n     * Stop the {@link TrackVADEmitter} and detach the event listener.\r\n     * @returns {void}\r\n     */\r\n    _stopVADEmitter() {\r\n        this._vadEmitter.removeListener(VAD_SCORE_PUBLISHED, this._processVADScore);\r\n        this._vadEmitter.stop();\r\n        this._isVADEmitterRunning = false;\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and directs them to attached services as needed.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {Float32Array} pcmData - Raw PCM data with which the VAD score was calculated.\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    _processVADScore(vadScore) {\r\n        for (const detector of this._detectionServices) {\r\n            detector.processVADScore(vadScore);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change the isMuted state of all attached detection services.\r\n     *\r\n     * @param {boolean} isMuted\r\n     */\r\n    _changeDetectorsMuteState(isMuted) {\r\n        for (const detector of this._detectionServices) {\r\n            detector.changeMuteState(isMuted);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that a track was added to the associated {@link JitsiConference}.\r\n     * Only take into account local audio tracks.\r\n     * @param {JitsiTrack} track - The added track.\r\n     * @returns {void}\r\n     * @listens TRACK_ADDED\r\n     */\r\n    _trackAdded(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Keep a track promise so we take into account successive TRACK_ADD events being generated so that we\r\n            // destroy/create the processing context in the proper order.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => this._createVADProcessor())\r\n                .then(vadProcessor =>\r\n                    TrackVADEmitter.create(track.getDeviceId(), VAD_EMITTER_SAMPLE_RATE, vadProcessor)\r\n                )\r\n                .then(vadEmitter => {\r\n                    logger.debug('Created VAD emitter for track: ', track.getTrackLabel());\r\n\r\n                    this._vadEmitter = vadEmitter;\r\n\r\n                    // Iterate through the detection services and set their appropriate mute state, depending on\r\n                    // service this will trigger a DETECTOR_STATE_CHANGE which in turn might start the _vadEmitter.\r\n                    this._changeDetectorsMuteState(track.isMuted());\r\n                });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that the mute state of a {@link JitsiConference} track has changed. Only takes into account\r\n     * local audio tracks.\r\n     * @param {JitsiTrack} track - The track whose mute state has changed.\r\n     * @returns {void}\r\n     * @listens TRACK_MUTE_CHANGED\r\n     */\r\n    _trackMuteChanged(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // On a mute toggle reset the state.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => {\r\n                // Set mute status for the attached detection services.\r\n                this._changeDetectorsMuteState(track.isMuted());\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Notifies the detector that a track associated with the {@link JitsiConference} was removed. Only takes into\r\n     * account local audio tracks. Cleans up resources associated with the track and resets the processing context.\r\n     *\r\n     * @param {JitsiTrack} track - The removed track.\r\n     * @returns {void}\r\n     * @listens TRACK_REMOVED\r\n     */\r\n    _trackRemoved(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Use the promise to make sure operations are in sequence.\r\n            this._vadInitTracker = this._vadInitTracker.then(() => {\r\n                logger.debug('Removing track from VAD detection - ', track.getTrackLabel());\r\n\r\n                // Track was removed, clean up and set appropriate states.\r\n                if (this._vadEmitter) {\r\n                    this._stopVADEmitter();\r\n                    this._vadEmitter.destroy();\r\n                    this._vadEmitter = null;\r\n                }\r\n\r\n                // Reset state of detectors when active track is removed.\r\n                for (const detector of this._detectionServices) {\r\n                    detector.reset();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { $iq } from 'strophe.js';\r\n\r\nimport recordingXMLUtils from './recordingXMLUtils';\r\n\r\n/**\r\n * Represents a recording session.\r\n */\r\nexport default class JibriSession {\r\n    /**\r\n     * Initializes a new JibriSession instance.\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor(options = {}) {\r\n        this._connection = options.connection;\r\n        this._mode = options.mode;\r\n\r\n        this._setSessionID(options.sessionID);\r\n        this.setStatus(options.status);\r\n    }\r\n\r\n    /**\r\n     * Returns the error related to the session instance, if any.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getError() {\r\n        return this._error;\r\n    }\r\n\r\n    /**\r\n     * Returns the session ID of the session instance.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getID() {\r\n        return this._sessionID;\r\n    }\r\n\r\n    /**\r\n     * Returns the initiator of the session instance.\r\n     *\r\n     * @returns {JitsiParticipant|undefined} The participant that started the session.\r\n     */\r\n    getInitiator() {\r\n        return this._initiator;\r\n    }\r\n\r\n    /**\r\n     * Returns the streaming URL of the session.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getLiveStreamViewURL() {\r\n        return this._liveStreamViewURL;\r\n    }\r\n\r\n    /**\r\n     * Returns the current status of the session.\r\n     *\r\n     * @returns {string|undefined}\r\n     */\r\n    getStatus() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the participant that stopped the session.\r\n     *\r\n     * @returns {JitsiParticipant|undefined} The participant that stopped the session.\r\n     */\r\n    getTerminator() {\r\n        return this._terminator;\r\n    }\r\n\r\n    /**\r\n     * Returns the current recording mode of the session, such as \"file\".\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getMode() {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Sets the last known error message related to the session.\r\n     *\r\n     * @param {string} error - The error string explaining why the session\r\n     * entered an error state.\r\n     * @returns {void}\r\n     */\r\n    setError(error) {\r\n        this._error = error;\r\n    }\r\n\r\n    /**\r\n     * Sets the last live stream URL for the session instance. Usually this is\r\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\r\n     *\r\n     * @param {string} url - The live stream URL associated with the session.\r\n     * @returns {void}\r\n     */\r\n    setLiveStreamViewURL(url) {\r\n        this._liveStreamViewURL = url;\r\n    }\r\n\r\n    /**\r\n     * Sets the last known status for this recording session.\r\n     *\r\n     * @param {string} status - The new status to set.\r\n     * @returns {void}\r\n     */\r\n    setStatus(status) {\r\n        this._status = status;\r\n    }\r\n\r\n    /**\r\n     * Sets the creator's jid of the session.\r\n     * @param {JitsiParticipant} participant - The creator of the session.\r\n     */\r\n    setInitiator(participant) {\r\n        this._initiator = participant;\r\n    }\r\n\r\n    /**\r\n     * Sets the jid of the participant that stopped the session.\r\n     * @param {JitsiParticipant} participant  - The participant's jid,\r\n     * that stopped the session.\r\n     */\r\n    setTerminator(participant) {\r\n        this._terminator = participant;\r\n    }\r\n\r\n    /**\r\n     * Sends a message to start the actual recording.\r\n     *\r\n     * @param {Object} options - Additional arguments for starting the\r\n     * recording.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [options.broadcastId] - The broadcast ID of an\r\n     * associated YouTube stream, used for knowing the URL from which the stream\r\n     * can be viewed.\r\n     * @param {string} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @param {streamId} options.streamId - Necessary for live streaming, this\r\n     * is the the stream key needed to start a live streaming session with the\r\n     * streaming service provider.\r\n     * @returns Promise\r\n     */\r\n    start({ appData, broadcastId, focusMucJid, streamId }) {\r\n        return new Promise((resolve, reject) => {\r\n            this._connection.sendIQ(\r\n                this._createIQ({\r\n                    action: 'start',\r\n                    appData,\r\n                    focusMucJid,\r\n                    broadcastId,\r\n                    streamId\r\n                }),\r\n                result => {\r\n                    // All users will eventually receive the 'pending' status\r\n                    // from the backend, but for the user initiating the session\r\n                    // it's better to give some instant feedback that recording\r\n                    // is starting so fire 'pending' here manually.\r\n                    this.setStatus('pending');\r\n                    this._setSessionID(\r\n                        recordingXMLUtils.getSessionIdFromIq(result));\r\n\r\n                    resolve();\r\n                },\r\n                error => {\r\n                    this._setErrorFromIq(error);\r\n\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a message to actually stop the recording session.\r\n     *\r\n     * @param {Object} options - Additional arguments for stopping the\r\n     * recording.\r\n     * @param {Object} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @returns Promise\r\n     */\r\n    stop({ focusMucJid }) {\r\n        return new Promise((resolve, reject) => {\r\n            this._connection.sendIQ(\r\n                this._createIQ({\r\n                    action: 'stop',\r\n                    focusMucJid\r\n                }),\r\n                resolve,\r\n                reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates the message to change the status of the recording session.\r\n     *\r\n     * @param {string} status - The new status to which the recording session\r\n     * should transition.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [options.broadcastId] - The broadcast ID of an\r\n     * associated YouTube stream, used for knowing the URL from which the stream\r\n     * can be viewed.\r\n     * @param {string} options.focusMucJid - The JID of the focus participant\r\n     * that controls recording.\r\n     * @param {streamId} options.streamId - Necessary for live streaming, this\r\n     * is the the stream key needed to start a live streaming session with the\r\n     * streaming service provider.\r\n     * @returns Object - The XMPP IQ message.\r\n     */\r\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\r\n        return $iq({\r\n            to: focusMucJid,\r\n            type: 'set'\r\n        })\r\n        .c('jibri', {\r\n            'xmlns': 'http://jitsi.org/protocol/jibri',\r\n            'action': action,\r\n            'app_data': appData,\r\n            'recording_mode': this._mode,\r\n            'streamid': streamId,\r\n            'you_tube_broadcast_id': broadcastId\r\n        })\r\n        .up();\r\n    }\r\n\r\n    /**\r\n     * Handles the error from an iq and stores the error.\r\n     *\r\n     * @param {Node} errorIq - The error response from an Iq.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _setErrorFromIq(errorIq) {\r\n        const error = errorIq.getElementsByTagName('error')[0];\r\n\r\n        this.setError(error.children[0].tagName);\r\n    }\r\n\r\n    /**\r\n     * Sets the known session ID for this recording session.\r\n     *\r\n     * @param {string} sessionID\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _setSessionID(sessionID) {\r\n        this._sessionID = sessionID;\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport RTCEvents from './service/RTC/RTCEvents';\r\n\r\nconst AUDIO_PERMISSION_NAME = 'microphone';\r\nconst PERMISSION_GRANTED_STATUS = 'granted';\r\nconst VIDEO_PERMISSION_NAME = 'camera';\r\n\r\n/**\r\n * Media devices utilities for Jitsi.\r\n */\r\nclass JitsiMediaDevices {\r\n    /**\r\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\r\n     * instance of this class.\r\n     */\r\n    constructor() {\r\n        this._eventEmitter = new EventEmitter();\r\n        this._grantedPermissions = {};\r\n\r\n        RTC.addListener(\r\n            RTCEvents.DEVICE_LIST_CHANGED,\r\n            devices =>\r\n                this._eventEmitter.emit(\r\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\r\n                    devices));\r\n        RTC.addListener(\r\n            RTCEvents.DEVICE_LIST_AVAILABLE,\r\n            devices =>\r\n                this._logOutputDevice(\r\n                    this.getAudioOutputDevice(),\r\n                    devices));\r\n        RTC.addListener(\r\n            RTCEvents.GRANTED_PERMISSIONS,\r\n            grantedPermissions =>\r\n                this._handleGrantedPermissions(grantedPermissions));\r\n\r\n        // Test if the W3C Permissions API is implemented and the 'camera' and\r\n        // 'microphone' permissions are implemented. (Testing for at least one\r\n        // of them seems sufficient).\r\n        this._permissionsApiSupported = new Promise(resolve => {\r\n            if (!navigator.permissions) {\r\n                resolve(false);\r\n\r\n                return;\r\n            }\r\n\r\n            navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\r\n                .then(() => resolve(true), () => resolve(false));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updated the local granted permissions cache. A permissions might be\r\n     * granted, denied, or undefined. This is represented by having its media\r\n     * type key set to {@code true} or {@code false} respectively.\r\n     *\r\n     * @param {Object} grantedPermissions - Array with the permissions\r\n     * which were granted.\r\n     */\r\n    _handleGrantedPermissions(grantedPermissions) {\r\n        this._grantedPermissions = {\r\n            ...this._grantedPermissions,\r\n            ...grantedPermissions\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gathers data and sends it to statistics.\r\n     * @param deviceID the device id to log\r\n     * @param devices list of devices\r\n     */\r\n    _logOutputDevice(deviceID, devices) {\r\n        const device\r\n            = devices.find(\r\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\r\n\r\n        if (device) {\r\n            Statistics.sendActiveDeviceListEvent(\r\n                RTC.getEventDataForActiveDevice(device));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Executes callback with list of media devices connected.\r\n     * @param {function} callback\r\n     */\r\n    enumerateDevices(callback) {\r\n        RTC.enumerateDevices(callback);\r\n    }\r\n\r\n    /**\r\n     * Checks if its possible to enumerate available cameras/micropones.\r\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\r\n     * the WebRTC stack is ready, either with true if the device listing is\r\n     * available available or with false otherwise.\r\n     */\r\n    isDeviceListAvailable() {\r\n        return RTC.isDeviceListAvailable();\r\n    }\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     * @param {string} [deviceType] - type of device to change. Default is\r\n     *      undefined or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} true if available, false otherwise.\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        return RTC.isDeviceChangeAvailable(deviceType);\r\n    }\r\n\r\n    /**\r\n     * Checks if the permission for the given device was granted.\r\n     *\r\n     * @param {'audio'|'video'} [type] - type of devices to check,\r\n     *      undefined stands for both 'audio' and 'video' together\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    isDevicePermissionGranted(type) {\r\n        return new Promise(resolve => {\r\n            // Shortcut: first check if we already know the permission was\r\n            // granted.\r\n            if (type in this._grantedPermissions) {\r\n                resolve(this._grantedPermissions[type]);\r\n\r\n                return;\r\n            }\r\n\r\n            // Check using the Permissions API.\r\n            this._permissionsApiSupported.then(supported => {\r\n                if (!supported) {\r\n                    // Workaround on Safari for audio input device\r\n                    // selection to work. Safari doesn't support the\r\n                    // permissions query.\r\n                    if (browser.isSafari()) {\r\n                        resolve(true);\r\n\r\n                        return;\r\n                    }\r\n                    resolve(false);\r\n\r\n                    return;\r\n                }\r\n\r\n                const promises = [];\r\n\r\n                switch (type) {\r\n                case MediaType.VIDEO:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: VIDEO_PERMISSION_NAME\r\n                        }));\r\n                    break;\r\n                case MediaType.AUDIO:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: AUDIO_PERMISSION_NAME\r\n                        }));\r\n                    break;\r\n                default:\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: VIDEO_PERMISSION_NAME\r\n                        }));\r\n                    promises.push(\r\n                        navigator.permissions.query({\r\n                            name: AUDIO_PERMISSION_NAME\r\n                        }));\r\n                }\r\n\r\n                Promise.all(promises).then(\r\n                    results => resolve(results.every(permissionStatus => {\r\n                        // The status attribute is deprecated, and state\r\n                        // should be used instead, but check both for now\r\n                        // for backwards compatibility.\r\n                        const grantStatus = permissionStatus.state\r\n                            || permissionStatus.status;\r\n\r\n                        return grantStatus === PERMISSION_GRANTED_STATUS;\r\n                    })),\r\n                    () => resolve(false)\r\n                );\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns true if it is possible to be simultaneously capturing audio\r\n     * from more than one device.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isMultipleAudioInputSupported() {\r\n        return !browser.isFirefox();\r\n    }\r\n\r\n    /**\r\n     * Returns currently used audio output device id, 'default' stands\r\n     * for default device\r\n     * @returns {string}\r\n     */\r\n    getAudioOutputDevice() {\r\n        return RTC.getAudioOutputDevice();\r\n    }\r\n\r\n    /**\r\n     * Sets current audio output device.\r\n     * @param {string} deviceId - id of 'audiooutput' device from\r\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\r\n     *      default device\r\n     * @returns {Promise} - resolves when audio output is changed, is rejected\r\n     *      otherwise\r\n     */\r\n    setAudioOutputDevice(deviceId) {\r\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\r\n\r\n        if (availableDevices.length > 0) {\r\n            // if we have devices info report device to stats\r\n            // normally this will not happen on startup as this method is called\r\n            // too early. This will happen only on user selection of new device\r\n            this._logOutputDevice(\r\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\r\n        }\r\n\r\n        return RTC.setAudioOutputDevice(deviceId);\r\n    }\r\n\r\n    /**\r\n     * Adds an event handler.\r\n     * @param {string} event - event name\r\n     * @param {function} handler - event handler\r\n     */\r\n    addEventListener(event, handler) {\r\n        this._eventEmitter.addListener(event, handler);\r\n    }\r\n\r\n    /**\r\n     * Removes event handler.\r\n     * @param {string} event - event name\r\n     * @param {function} handler - event handler\r\n     */\r\n    removeEventListener(event, handler) {\r\n        this._eventEmitter.removeListener(event, handler);\r\n    }\r\n\r\n    /**\r\n     * Emits an event.\r\n     * @param {string} event - event name\r\n     */\r\n    emitEvent(event, ...args) {\r\n        this._eventEmitter.emit(event, ...args);\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current browser can support capturing video,\r\n     * be it camera or desktop, and displaying received video.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    supportsVideo() {\r\n        // Defer to the browser capabilities to allow exposure of the api to the\r\n        // consumer but prevent other files from having to import\r\n        // JitsiMediaDevices.\r\n        return browser.supportsVideo();\r\n    }\r\n}\r\n\r\nexport default new JitsiMediaDevices();\r\n","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","var grammar = module.exports = {\r\n  v: [{\r\n    name: 'version',\r\n    reg: /^(\\d*)$/\r\n  }],\r\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\r\n    // NB: sessionId will be a String in most cases because it is huge\r\n    name: 'origin',\r\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\r\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\r\n    format: '%s %s %d %s IP%d %s'\r\n  }],\r\n  // default parsing of these only (though some of these feel outdated)\r\n  s: [{ name: 'name' }],\r\n  i: [{ name: 'description' }],\r\n  u: [{ name: 'uri' }],\r\n  e: [{ name: 'email' }],\r\n  p: [{ name: 'phone' }],\r\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\r\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\r\n  //k: [{}], // outdated thing ignored\r\n  t: [{ //t=0 0\r\n    name: 'timing',\r\n    reg: /^(\\d*) (\\d*)/,\r\n    names: ['start', 'stop'],\r\n    format: '%d %d'\r\n  }],\r\n  c: [{ //c=IN IP4 10.47.197.26\r\n    name: 'connection',\r\n    reg: /^IN IP(\\d) (\\S*)/,\r\n    names: ['version', 'ip'],\r\n    format: 'IN IP%d %s'\r\n  }],\r\n  b: [{ //b=AS:4000\r\n    push: 'bandwidth',\r\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\r\n    names: ['type', 'limit'],\r\n    format: '%s:%s'\r\n  }],\r\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\r\n    // NB: special - pushes to session\r\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\r\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\r\n    names: ['type', 'port', 'protocol', 'payloads'],\r\n    format: '%s %d %s %s'\r\n  }],\r\n  a: [\r\n    { //a=rtpmap:110 opus/48000/2\r\n      push: 'rtp',\r\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\r\n      names: ['payload', 'codec', 'rate', 'encoding'],\r\n      format: function (o) {\r\n        return (o.encoding) ?\r\n          'rtpmap:%d %s/%s/%s':\r\n          o.rate ?\r\n          'rtpmap:%d %s/%s':\r\n          'rtpmap:%d %s';\r\n      }\r\n    },\r\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\r\n      //a=fmtp:111 minptime=10; useinbandfec=1\r\n      push: 'fmtp',\r\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\r\n      names: ['payload', 'config'],\r\n      format: 'fmtp:%d %s'\r\n    },\r\n    { //a=control:streamid=0\r\n      name: 'control',\r\n      reg: /^control:(.*)/,\r\n      format: 'control:%s'\r\n    },\r\n    { //a=rtcp:65179 IN IP4 193.84.77.194\r\n      name: 'rtcp',\r\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\r\n      names: ['port', 'netType', 'ipVer', 'address'],\r\n      format: function (o) {\r\n        return (o.address != null) ?\r\n          'rtcp:%d %s IP%d %s':\r\n          'rtcp:%d';\r\n      }\r\n    },\r\n    { //a=rtcp-fb:98 trr-int 100\r\n      push: 'rtcpFbTrrInt',\r\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\r\n      names: ['payload', 'value'],\r\n      format: 'rtcp-fb:%d trr-int %d'\r\n    },\r\n    { //a=rtcp-fb:98 nack rpsi\r\n      push: 'rtcpFb',\r\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\r\n      names: ['payload', 'type', 'subtype'],\r\n      format: function (o) {\r\n        return (o.subtype != null) ?\r\n          'rtcp-fb:%s %s %s':\r\n          'rtcp-fb:%s %s';\r\n      }\r\n    },\r\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\r\n      //a=extmap:1/recvonly URI-gps-string\r\n      push: 'ext',\r\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\r\n      names: ['value', 'direction', 'uri', 'config'],\r\n      format: function (o) {\r\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\r\n      }\r\n    },\r\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\r\n      push: 'crypto',\r\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\r\n      names: ['id', 'suite', 'config', 'sessionConfig'],\r\n      format: function (o) {\r\n        return (o.sessionConfig != null) ?\r\n          'crypto:%d %s %s %s':\r\n          'crypto:%d %s %s';\r\n      }\r\n    },\r\n    { //a=setup:actpass\r\n      name: 'setup',\r\n      reg: /^setup:(\\w*)/,\r\n      format: 'setup:%s'\r\n    },\r\n    { //a=mid:1\r\n      name: 'mid',\r\n      reg: /^mid:([^\\s]*)/,\r\n      format: 'mid:%s'\r\n    },\r\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\r\n      name: 'msid',\r\n      reg: /^msid:(.*)/,\r\n      format: 'msid:%s'\r\n    },\r\n    { //a=ptime:20\r\n      name: 'ptime',\r\n      reg: /^ptime:(\\d*)/,\r\n      format: 'ptime:%d'\r\n    },\r\n    { //a=maxptime:60\r\n      name: 'maxptime',\r\n      reg: /^maxptime:(\\d*)/,\r\n      format: 'maxptime:%d'\r\n    },\r\n    { //a=sendrecv\r\n      name: 'direction',\r\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\r\n    },\r\n    { //a=ice-lite\r\n      name: 'icelite',\r\n      reg: /^(ice-lite)/\r\n    },\r\n    { //a=ice-ufrag:F7gI\r\n      name: 'iceUfrag',\r\n      reg: /^ice-ufrag:(\\S*)/,\r\n      format: 'ice-ufrag:%s'\r\n    },\r\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\r\n      name: 'icePwd',\r\n      reg: /^ice-pwd:(\\S*)/,\r\n      format: 'ice-pwd:%s'\r\n    },\r\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\r\n      name: 'fingerprint',\r\n      reg: /^fingerprint:(\\S*) (\\S*)/,\r\n      names: ['type', 'hash'],\r\n      format: 'fingerprint:%s %s'\r\n    },\r\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\r\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\r\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\r\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\r\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\r\n      push:'candidates',\r\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\r\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\r\n      format: function (o) {\r\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\r\n\r\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\r\n\r\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\r\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\r\n\r\n        if (o.generation != null) {\r\n          str += ' generation %d';\r\n        }\r\n\r\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\r\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\r\n        return str;\r\n      }\r\n    },\r\n    { //a=end-of-candidates (keep after the candidates line for readability)\r\n      name: 'endOfCandidates',\r\n      reg: /^(end-of-candidates)/\r\n    },\r\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\r\n      name: 'remoteCandidates',\r\n      reg: /^remote-candidates:(.*)/,\r\n      format: 'remote-candidates:%s'\r\n    },\r\n    { //a=ice-options:google-ice\r\n      name: 'iceOptions',\r\n      reg: /^ice-options:(\\S*)/,\r\n      format: 'ice-options:%s'\r\n    },\r\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\r\n      push: 'ssrcs',\r\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\r\n      names: ['id', 'attribute', 'value'],\r\n      format: function (o) {\r\n        var str = 'ssrc:%d';\r\n        if (o.attribute != null) {\r\n          str += ' %s';\r\n          if (o.value != null) {\r\n            str += ':%s';\r\n          }\r\n        }\r\n        return str;\r\n      }\r\n    },\r\n    { //a=ssrc-group:FEC 1 2\r\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\r\n      push: 'ssrcGroups',\r\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\r\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\r\n      names: ['semantics', 'ssrcs'],\r\n      format: 'ssrc-group:%s %s'\r\n    },\r\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\r\n      name: 'msidSemantic',\r\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\r\n      names: ['semantic', 'token'],\r\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\r\n    },\r\n    { //a=group:BUNDLE audio video\r\n      push: 'groups',\r\n      reg: /^group:(\\w*) (.*)/,\r\n      names: ['type', 'mids'],\r\n      format: 'group:%s %s'\r\n    },\r\n    { //a=rtcp-mux\r\n      name: 'rtcpMux',\r\n      reg: /^(rtcp-mux)/\r\n    },\r\n    { //a=rtcp-rsize\r\n      name: 'rtcpRsize',\r\n      reg: /^(rtcp-rsize)/\r\n    },\r\n    { //a=sctpmap:5000 webrtc-datachannel 1024\r\n      name: 'sctpmap',\r\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\r\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\r\n      format: function (o) {\r\n        return (o.maxMessageSize != null) ?\r\n          'sctpmap:%s %s %s' :\r\n          'sctpmap:%s %s';\r\n      }\r\n    },\r\n    { //a=x-google-flag:conference\r\n      name: 'xGoogleFlag',\r\n      reg: /^x-google-flag:([^\\s]*)/,\r\n      format: 'x-google-flag:%s'\r\n    },\r\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\r\n      push: 'rids',\r\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\r\n      names: ['id', 'direction', 'params'],\r\n      format: function (o) {\r\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\r\n      }\r\n    },\r\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\r\n      //a=imageattr:* send [x=800,y=640] recv *\r\n      //a=imageattr:100 recv [x=320,y=240]\r\n      push: 'imageattrs',\r\n      reg: new RegExp(\r\n        //a=imageattr:97\r\n        '^imageattr:(\\\\d+|\\\\*)' +\r\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\r\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\r\n        //recv [x=330,y=250]\r\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\r\n      ),\r\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\r\n      format: function (o) {\r\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\r\n      }\r\n    },\r\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\r\n      //a=simulcast:recv 1;4,5 send 6;7\r\n      name: 'simulcast',\r\n      reg: new RegExp(\r\n        //a=simulcast:\r\n        '^simulcast:' +\r\n        //send 1,2,3;~4,~5\r\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\r\n        //space + recv 6;~7,~8\r\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\r\n        //end\r\n        '$'\r\n      ),\r\n      names: ['dir1', 'list1', 'dir2', 'list2'],\r\n      format: function (o) {\r\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\r\n      }\r\n    },\r\n    { //Old simulcast draft 03 (implemented by Firefox)\r\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\r\n      //a=simulcast: recv pt=97;98 send pt=97\r\n      //a=simulcast: send rid=5;6;7 paused=6,7\r\n      name: 'simulcast_03',\r\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\r\n      names: ['value'],\r\n      format: 'simulcast: %s'\r\n    },\r\n    {\r\n      //a=framerate:25\r\n      //a=framerate:29.97\r\n      name: 'framerate',\r\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\r\n      format: 'framerate:%s'\r\n    },\r\n    { // any a= that we don't understand is kepts verbatim on media.invalid\r\n      push: 'invalid',\r\n      names: ['value']\r\n    }\r\n  ]\r\n};\r\n\r\n// set sensible defaults to avoid polluting the grammar with boring details\r\nObject.keys(grammar).forEach(function (key) {\r\n  var objs = grammar[key];\r\n  objs.forEach(function (obj) {\r\n    if (!obj.reg) {\r\n      obj.reg = /(.*)/;\r\n    }\r\n    if (!obj.format) {\r\n      obj.format = '%s';\r\n    }\r\n  });\r\n});\r\n","/* global MediaRecorder, MediaStream */\r\n\r\nconst RecordingResult = require('./recordingResult');\r\n\r\n/**\r\n * Possible audio formats MIME types\r\n */\r\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\r\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\r\n\r\n/**\r\n * A TrackRecorder object holds all the information needed for recording a\r\n * single JitsiTrack (either remote or local)\r\n * @param track The JitsiTrack the object is going to hold\r\n */\r\nconst TrackRecorder = function(track) {\r\n    // The JitsiTrack holding the stream\r\n    this.track = track;\r\n\r\n    // The MediaRecorder recording the stream\r\n    this.recorder = null;\r\n\r\n    // The array of data chunks recorded from the stream\r\n    // acts as a buffer until the data is stored on disk\r\n    this.data = null;\r\n\r\n    // the name of the person of the JitsiTrack. This can be undefined and/or\r\n    // not unique\r\n    this.name = null;\r\n\r\n    // the time of the start of the recording\r\n    this.startTime = null;\r\n};\r\n\r\n/**\r\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\r\n * This will also define the timestamp and try to update the name\r\n * @param trackRecorder the TrackRecorder to start\r\n */\r\nfunction startRecorder(trackRecorder) {\r\n    if (trackRecorder.recorder === undefined) {\r\n        throw new Error('Passed an object to startRecorder which is not a '\r\n            + 'TrackRecorder object');\r\n    }\r\n    trackRecorder.recorder.start();\r\n    trackRecorder.startTime = new Date();\r\n}\r\n\r\n/**\r\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\r\n * This will also try to update the name\r\n * @param trackRecorder the TrackRecorder to stop\r\n */\r\nfunction stopRecorder(trackRecorder) {\r\n    if (trackRecorder.recorder === undefined) {\r\n        throw new Error('Passed an object to stopRecorder which is not a '\r\n            + 'TrackRecorder object');\r\n    }\r\n    trackRecorder.recorder.stop();\r\n}\r\n\r\n/**\r\n * Determines which kind of audio recording the browser supports\r\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\r\n */\r\nfunction determineCorrectFileType() {\r\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\r\n        return AUDIO_WEBM;\r\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\r\n        return AUDIO_OGG;\r\n    }\r\n    throw new Error(\r\n        'unable to create a MediaRecorder with the right mimetype!');\r\n}\r\n\r\n/**\r\n * main exported object of the file, holding all\r\n * relevant functions and variables for the outside world\r\n * @param jitsiConference the jitsiConference which this object\r\n * is going to record\r\n */\r\nfunction AudioRecorder(jitsiConference) {\r\n    // array of TrackRecorders, where each trackRecorder\r\n    // holds the JitsiTrack, MediaRecorder and recorder data\r\n    this.recorders = [];\r\n\r\n    // get which file type is supported by the current browser\r\n    this.fileType = determineCorrectFileType();\r\n\r\n    // boolean flag for active recording\r\n    this.isRecording = false;\r\n\r\n    // the jitsiconference the object is recording\r\n    this.jitsiConference = jitsiConference;\r\n}\r\n\r\n/**\r\n * Add the the exported module so that it can be accessed by other files\r\n */\r\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\r\n\r\n/**\r\n * Adds a new TrackRecorder object to the array.\r\n *\r\n * @param track the track potentially holding an audio stream\r\n */\r\nAudioRecorder.prototype.addTrack = function(track) {\r\n    if (track.isAudioTrack()) {\r\n        // create the track recorder\r\n        const trackRecorder = this.instantiateTrackRecorder(track);\r\n\r\n        // push it to the local array of all recorders\r\n\r\n        this.recorders.push(trackRecorder);\r\n\r\n        // update the name of the trackRecorders\r\n        this.updateNames();\r\n\r\n        // If we're already recording, immediately start recording this new\r\n        // track.\r\n        if (this.isRecording) {\r\n            startRecorder(trackRecorder);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\r\n * data array for the trackRecorder.\r\n * @param track the JitsiTrack holding the audio MediaStream(s)\r\n */\r\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\r\n    const trackRecorder = new TrackRecorder(track);\r\n\r\n    // Create a new stream which only holds the audio track\r\n    const originalStream = trackRecorder.track.getOriginalStream();\r\n    const stream = createEmptyStream();\r\n\r\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\r\n\r\n    // Create the MediaRecorder\r\n    trackRecorder.recorder = new MediaRecorder(stream,\r\n        { mimeType: this.fileType });\r\n\r\n    // array for holding the recorder data. Resets it when\r\n    // audio already has been recorder once\r\n    trackRecorder.data = [];\r\n\r\n    // function handling a dataEvent, e.g the stream gets new data\r\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\r\n        if (dataEvent.data.size > 0) {\r\n            trackRecorder.data.push(dataEvent.data);\r\n        }\r\n    };\r\n\r\n    return trackRecorder;\r\n};\r\n\r\n/**\r\n * Notifies the module that a specific track has stopped, e.g participant left\r\n * the conference.\r\n * if the recording has not started yet, the TrackRecorder will be removed from\r\n * the array. If the recording has started, the recorder will stop recording\r\n * but not removed from the array so that the recorded stream can still be\r\n * accessed\r\n *\r\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\r\n */\r\nAudioRecorder.prototype.removeTrack = function(track) {\r\n    if (track.isVideoTrack()) {\r\n        return;\r\n    }\r\n\r\n    const array = this.recorders;\r\n    let i;\r\n\r\n    for (i = 0; i < array.length; i++) {\r\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\r\n            const recorderToRemove = array[i];\r\n\r\n            if (this.isRecording) {\r\n                stopRecorder(recorderToRemove);\r\n            } else {\r\n                // remove the TrackRecorder from the array\r\n                array.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    // make sure the names are up to date\r\n    this.updateNames();\r\n};\r\n\r\n/**\r\n * Tries to update the name value of all TrackRecorder in the array.\r\n * If it hasn't changed,it will keep the exiting name. If it changes to a\r\n * undefined value, the old value will also be kept.\r\n */\r\nAudioRecorder.prototype.updateNames = function() {\r\n    const conference = this.jitsiConference;\r\n\r\n    this.recorders.forEach(trackRecorder => {\r\n        if (trackRecorder.track.isLocal()) {\r\n            trackRecorder.name = 'the transcriber';\r\n        } else {\r\n            const id = trackRecorder.track.getParticipantId();\r\n            const participant = conference.getParticipantById(id);\r\n            const newName = participant.getDisplayName();\r\n\r\n            if (newName !== 'undefined') {\r\n                trackRecorder.name = newName;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Starts the audio recording of every local and remote track\r\n */\r\nAudioRecorder.prototype.start = function() {\r\n    if (this.isRecording) {\r\n        throw new Error('audiorecorder is already recording');\r\n    }\r\n\r\n    // set boolean isRecording flag to true so if new participants join the\r\n    // conference, that track can instantly start recording as well\r\n    this.isRecording = true;\r\n\r\n    // start all the mediaRecorders\r\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\r\n\r\n    // log that recording has started\r\n    console.log(\r\n        `Started the recording of the audio. There are currently ${\r\n            this.recorders.length} recorders active.`);\r\n};\r\n\r\n/**\r\n * Stops the audio recording of every local and remote track\r\n */\r\nAudioRecorder.prototype.stop = function() {\r\n    // set the boolean flag to false\r\n    this.isRecording = false;\r\n\r\n    // stop all recorders\r\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\r\n    console.log('stopped recording');\r\n};\r\n\r\n/**\r\n * link hacking to download all recorded audio streams\r\n */\r\nAudioRecorder.prototype.download = function() {\r\n    this.recorders.forEach(trackRecorder => {\r\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n\r\n        document.body.appendChild(a);\r\n        a.style = 'display: none';\r\n        a.href = url;\r\n        a.download = `test.${this.fileType.split('/')[1]}`;\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n    });\r\n};\r\n\r\n/**\r\n * returns the audio files of all recorders as an array of objects,\r\n * which include the name of the owner of the track and the starting time stamp\r\n * @returns {Array} an array of RecordingResult objects\r\n */\r\nAudioRecorder.prototype.getRecordingResults = function() {\r\n    if (this.isRecording) {\r\n        throw new Error(\r\n            'cannot get blobs because the AudioRecorder is still recording!');\r\n    }\r\n\r\n    // make sure the names are up to date before sending them off\r\n    this.updateNames();\r\n\r\n    const array = [];\r\n\r\n    this.recorders.forEach(\r\n        recorder =>\r\n            array.push(\r\n                new RecordingResult(\r\n                    new Blob(recorder.data, { type: this.fileType }),\r\n                    recorder.name,\r\n                    recorder.startTime)));\r\n\r\n    return array;\r\n};\r\n\r\n/**\r\n * Gets the mime type of the recorder audio\r\n * @returns {String} the mime type of the recorder audio\r\n */\r\nAudioRecorder.prototype.getFileType = function() {\r\n    return this.fileType;\r\n};\r\n\r\n/**\r\n * Creates a empty MediaStream object which can be used\r\n * to add MediaStreamTracks to\r\n * @returns MediaStream\r\n */\r\nfunction createEmptyStream() {\r\n    if (typeof MediaStream !== 'undefined') {\r\n        return new MediaStream();\r\n    }\r\n    throw new Error('cannot create a clean mediaStream');\r\n}\r\n\r\n/**\r\n * export the main object AudioRecorder\r\n */\r\nmodule.exports = AudioRecorder;\r\n","import JitsiConference from './JitsiConference';\r\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport XMPP from './modules/xmpp/xmpp';\r\nimport {\r\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\r\n    createConnectionFailedEvent\r\n} from './service/statistics/AnalyticsEvents';\r\n\r\n/**\r\n * Creates a new connection object for the Jitsi Meet server side video\r\n * conferencing service. Provides access to the JitsiConference interface.\r\n * @param appID identification for the provider of Jitsi Meet video conferencing\r\n * services.\r\n * @param token the JWT token used to authenticate with the server(optional)\r\n * @param options Object with properties / settings related to connection with\r\n * the server.\r\n * @constructor\r\n */\r\nexport default function JitsiConnection(appID, token, options) {\r\n    this.appID = appID;\r\n    this.token = token;\r\n    this.options = options;\r\n    this.xmpp = new XMPP(options, token);\r\n\r\n    /* eslint-disable max-params */\r\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\r\n        (errType, msg, credentials, details) => {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createConnectionFailedEvent(errType, msg, details));\r\n        });\r\n    /* eslint-enable max-params */\r\n\r\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\r\n        msg => {\r\n            // we can see disconnects from normal tab closing of the browser\r\n            // and then there are no msgs, but we want to log only disconnects\r\n            // when there is real error\r\n            // XXX Do we need the difference in handling between the log and\r\n            // analytics event here?\r\n            if (msg) {\r\n                Statistics.sendAnalytics(\r\n                    ANALYTICS_CONNECTION_DISCONNECTED,\r\n                    { message: msg });\r\n            }\r\n            Statistics.sendLog(\r\n                JSON.stringify(\r\n                    {\r\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\r\n                        msg\r\n                    }));\r\n        });\r\n}\r\n\r\n/**\r\n * Connect the client with the server.\r\n * @param options {object} connecting options\r\n * (for example authentications parameters).\r\n */\r\nJitsiConnection.prototype.connect = function(options = {}) {\r\n    this.xmpp.connect(options.id, options.password);\r\n};\r\n\r\n/**\r\n * Attach to existing connection. Can be used for optimizations. For example:\r\n * if the connection is created on the server we can attach to it and start\r\n * using it.\r\n *\r\n * @param options {object} connecting options - rid, sid and jid.\r\n */\r\nJitsiConnection.prototype.attach = function(options) {\r\n    this.xmpp.attach(options);\r\n};\r\n\r\n/**\r\n * Disconnect the client from the server.\r\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\r\n */\r\nJitsiConnection.prototype.disconnect = function(...args) {\r\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\r\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\r\n    // may optionally pass the event which triggered the disconnect in order to\r\n    // provide the implementation with finer-grained context.\r\n    return this.xmpp.disconnect(...args);\r\n};\r\n\r\n/**\r\n * Returns the jid of the participant associated with the XMPP connection.\r\n *\r\n * @returns {string} The jid of the participant.\r\n */\r\nJitsiConnection.prototype.getJid = function() {\r\n    return this.xmpp.getJid();\r\n};\r\n\r\n/**\r\n * This method allows renewal of the tokens if they are expiring.\r\n * @param token the new token.\r\n */\r\nJitsiConnection.prototype.setToken = function(token) {\r\n    this.token = token;\r\n};\r\n\r\n/**\r\n * Creates and joins new conference.\r\n * @param name the name of the conference; if null - a generated name will be\r\n * provided from the api\r\n * @param options Object with properties / settings related to the conference\r\n * that will be created.\r\n * @returns {JitsiConference} returns the new conference object.\r\n */\r\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\r\n    return new JitsiConference({\r\n        name,\r\n        config: options,\r\n        connection: this\r\n    });\r\n};\r\n\r\n/**\r\n * Subscribes the passed listener to the event.\r\n * @param event {JitsiConnectionEvents} the connection event.\r\n * @param listener {Function} the function that will receive the event\r\n */\r\nJitsiConnection.prototype.addEventListener = function(event, listener) {\r\n    this.xmpp.addListener(event, listener);\r\n};\r\n\r\n/**\r\n * Unsubscribes the passed handler.\r\n * @param event {JitsiConnectionEvents} the connection event.\r\n * @param listener {Function} the function that will receive the event\r\n */\r\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\r\n    this.xmpp.removeListener(event, listener);\r\n};\r\n\r\n/**\r\n * Returns measured connectionTimes.\r\n */\r\nJitsiConnection.prototype.getConnectionTimes = function() {\r\n    return this.xmpp.connectionTimes;\r\n};\r\n\r\n/**\r\n * Adds new feature to the list of supported features for the local\r\n * participant.\r\n * @param {String} feature the name of the feature.\r\n * @param {boolean} submit if true - the new list of features will be\r\n * immediately submitted to the others.\r\n */\r\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\r\n    return this.xmpp.caps.addFeature(feature, submit);\r\n};\r\n\r\n/**\r\n * Removes a feature from the list of supported features for the local\r\n * participant\r\n * @param {String} feature the name of the feature.\r\n * @param {boolean} submit if true - the new list of features will be\r\n * immediately submitted to the others.\r\n */\r\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\r\n    return this.xmpp.caps.removeFeature(feature, submit);\r\n};\r\n\r\n/**\r\n * Get object with internal logs.\r\n */\r\nJitsiConnection.prototype.getLogs = function() {\r\n    const data = this.xmpp.getJingleLog();\r\n\r\n    const metadata = {};\r\n\r\n    metadata.time = new Date();\r\n    metadata.url = window.location.href;\r\n    metadata.ua = navigator.userAgent;\r\n\r\n    const log = this.xmpp.getXmppLog();\r\n\r\n    if (log) {\r\n        metadata.xmpp = log;\r\n    }\r\n\r\n    data.metadata = metadata;\r\n\r\n    return data;\r\n};\r\n","/* global __filename, $, Promise */\r\n\r\nimport EventEmitter from 'events';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport JitsiParticipant from './JitsiParticipant';\r\nimport JitsiTrackError from './JitsiTrackError';\r\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\r\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\r\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\r\nimport IceFailedHandling\r\n    from './modules/connectivity/IceFailedHandling';\r\nimport ParticipantConnectionStatusHandler\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\r\nimport NoAudioSignalDetection from './modules/detection/NoAudioSignalDetection';\r\nimport P2PDominantSpeakerDetection from './modules/detection/P2PDominantSpeakerDetection';\r\nimport VADAudioAnalyser from './modules/detection/VADAudioAnalyser';\r\nimport VADNoiseDetection from './modules/detection/VADNoiseDetection';\r\nimport VADTalkMutedDetection from './modules/detection/VADTalkMutedDetection';\r\nimport { E2EEncryption } from './modules/e2ee/E2EEncryption';\r\nimport E2ePing from './modules/e2eping/e2eping';\r\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\r\nimport { QualityController } from './modules/qualitycontrol/QualityController';\r\nimport RecordingManager from './modules/recording/RecordingManager';\r\nimport Settings from './modules/settings/Settings';\r\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\r\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\r\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport Transcriber from './modules/transcription/transcriber';\r\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\r\nimport RandomUtil from './modules/util/RandomUtil';\r\nimport ComponentsVersions from './modules/version/ComponentsVersions';\r\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\r\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\r\nimport { JITSI_MEET_MUC_TYPE } from './modules/xmpp/xmpp';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport VideoType from './service/RTC/VideoType';\r\nimport {\r\n    ACTION_JINGLE_RESTART,\r\n    ACTION_JINGLE_SI_RECEIVED,\r\n    ACTION_JINGLE_SI_TIMEOUT,\r\n    ACTION_JINGLE_TERMINATE,\r\n    ACTION_P2P_DECLINED,\r\n    ACTION_P2P_ESTABLISHED,\r\n    ACTION_P2P_FAILED,\r\n    ACTION_P2P_SWITCH_TO_JVB,\r\n    ICE_ESTABLISHMENT_DURATION_DIFF,\r\n    createConferenceEvent,\r\n    createJingleEvent,\r\n    createP2PEvent\r\n} from './service/statistics/AnalyticsEvents';\r\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\r\nimport FeatureFlags from './modules/flags/FeatureFlags';\r\nimport SignalingLayerImpl from './modules/xmpp/SignalingLayerImpl';\r\nimport { SS_DEFAULT_FRAME_RATE } from './modules/RTC/ScreenObtainer'\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * How long since Jicofo is supposed to send a session-initiate, before\r\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\r\n * @type {number}\r\n */\r\nconst JINGLE_SI_TIMEOUT = 5000;\r\n\r\n/**\r\n * Creates a JitsiConference object with the given name and properties.\r\n * Note: this constructor is not a part of the public API (objects should be\r\n * created using JitsiConnection.createConference).\r\n * @param options.config properties / settings related to the conference that\r\n * will be created.\r\n * @param options.name the name of the conference\r\n * @param options.connection the JitsiConnection object for this\r\n * JitsiConference.\r\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\r\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\r\n * calculated and submitted to the analytics module.\r\n * @param {boolean} [options.config.enableIceRestart=false] - enables the ICE\r\n * restart logic.\r\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\r\n * the peer to peer mode will be enabled. It means that when there are only 2\r\n * participants in the conference an attempt to make direct connection will be\r\n * made. If the connection succeeds the conference will stop sending data\r\n * through the JVB connection and will use the direct one instead.\r\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\r\n * seconds, before the conference switches back to P2P, after the 3rd\r\n * participant has left the room.\r\n * @param {number} [options.config.channelLastN=-1] The requested amount of\r\n * videos are going to be delivered after the value is in effect. Set to -1 for\r\n * unlimited or all available videos.\r\n * @param {number} [options.config.forceJVB121Ratio]\r\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\r\n * conference should be moved to the JVB instead of P2P. The decision is made on\r\n * the responder side, after ICE succeeds on the P2P connection.\r\n * @param {*} [options.config.openBridgeChannel] Which kind of communication to\r\n * open with the videobridge. Values can be \"datachannel\", \"websocket\", true\r\n * (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false\r\n * (don't open any channel).\r\n * @constructor\r\n *\r\n * FIXME Make all methods which are called from lib-internal classes\r\n *       to non-public (use _). To name a few:\r\n *       {@link JitsiConference.onLocalRoleChanged}\r\n *       {@link JitsiConference.onUserRoleChanged}\r\n *       {@link JitsiConference.onMemberLeft}\r\n *       and so on...\r\n */\r\nexport default function JitsiConference(options) {\r\n    if (!options.name || options.name.toLowerCase() !== options.name) {\r\n        const errmsg\r\n            = 'Invalid conference name (no conference name passed or it '\r\n                + 'contains invalid characters like capital letters)!';\r\n\r\n        logger.error(errmsg);\r\n        throw new Error(errmsg);\r\n    }\r\n    this.eventEmitter = new EventEmitter();\r\n    this.options = options;\r\n    this.eventManager = new JitsiConferenceEventManager(this);\r\n    this.participants = {};\r\n\r\n    this._signalingLayer = new SignalingLayerImpl();\r\n\r\n    this._init(options);\r\n    this.componentsVersions = new ComponentsVersions(this);\r\n\r\n    /**\r\n     * Jingle session instance for the JVB connection.\r\n     * @type {JingleSessionPC}\r\n     */\r\n    this.jvbJingleSession = null;\r\n    this.lastDominantSpeaker = null;\r\n    this.dtmfManager = null;\r\n    this.somebodySupportsDTMF = false;\r\n    this.authEnabled = false;\r\n    this.startAudioMuted = false;\r\n    this.startVideoMuted = false;\r\n    this.startMutedPolicy = {\r\n        audio: false,\r\n        video: false\r\n    };\r\n    this.isMutedByFocus = false;\r\n\r\n    // when muted by focus we receive the jid of the initiator of the mute\r\n    this.mutedByFocusActor = null;\r\n\r\n    // Flag indicates if the 'onCallEnded' method was ever called on this\r\n    // instance. Used to log extra analytics event for debugging purpose.\r\n    // We need to know if the potential issue happened before or after\r\n    // the restart.\r\n    this.wasStopped = false;\r\n\r\n    // Conference properties, maintained by jicofo.\r\n    this.properties = {};\r\n\r\n    /**\r\n     * The object which monitors local and remote connection statistics (e.g.\r\n     * sending bitrate) and calculates a number which represents the connection\r\n     * quality.\r\n     */\r\n    this.connectionQuality\r\n        = new ConnectionQuality(this, this.eventEmitter, options);\r\n\r\n    /**\r\n     * Reports average RTP statistics to the analytics module.\r\n     * @type {AvgRTPStatsReporter}\r\n     */\r\n    this.avgRtpStatsReporter\r\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\r\n\r\n    /**\r\n     * Detects issues with the audio of remote participants.\r\n     * @type {AudioOutputProblemDetector}\r\n     */\r\n    this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\r\n\r\n    /**\r\n     * Indicates whether the connection is interrupted or not.\r\n     */\r\n    this.isJvbConnectionInterrupted = false;\r\n\r\n    /**\r\n     * The object which tracks active speaker times\r\n     */\r\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\r\n\r\n    /* P2P related fields below: */\r\n\r\n    /**\r\n     * Stores reference to deferred start P2P task. It's created when 3rd\r\n     * participant leaves the room in order to avoid ping pong effect (it\r\n     * could be just a page reload).\r\n     * @type {number|null}\r\n     */\r\n    this.deferredStartP2PTask = null;\r\n\r\n    const delay\r\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\r\n\r\n    /**\r\n     * A delay given in seconds, before the conference switches back to P2P\r\n     * after the 3rd participant has left.\r\n     * @type {number}\r\n     */\r\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\r\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\r\n\r\n    /**\r\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\r\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\r\n     * and running.\r\n     * @type {boolean}\r\n     */\r\n    this.isP2PConnectionInterrupted = false;\r\n\r\n    /**\r\n     * Flag set to <tt>true</tt> when P2P session has been established\r\n     * (ICE has been connected) and this conference is currently in the peer to\r\n     * peer mode (P2P connection is the active one).\r\n     * @type {boolean}\r\n     */\r\n    this.p2p = false;\r\n\r\n    /**\r\n     * A JingleSession for the direct peer to peer connection.\r\n     * @type {JingleSessionPC}\r\n     */\r\n    this.p2pJingleSession = null;\r\n\r\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\r\n    this.recordingManager = new RecordingManager(this.room);\r\n\r\n    /**\r\n     * If the conference.joined event has been sent this will store the timestamp when it happened.\r\n     *\r\n     * @type {undefined|number}\r\n     * @private\r\n     */\r\n    this._conferenceJoinAnalyticsEventSent = undefined;\r\n\r\n    /**\r\n     * End-to-End Encryption. Make it available if supported.\r\n     */\r\n    if (this.isE2EESupported()) {\r\n        logger.info('End-to-End Encryprtion is supported');\r\n\r\n        this._e2eEncryption = new E2EEncryption(this);\r\n    }\r\n}\r\n\r\n// FIXME convert JitsiConference to ES6 - ASAP !\r\nJitsiConference.prototype.constructor = JitsiConference;\r\n\r\n/**\r\n * Create a resource for the a jid. We use the room nickname (the resource part\r\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\r\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\r\n * into a 32bit field.\r\n *\r\n * @param {string} jid - The id set onto the XMPP connection.\r\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\r\n * to the XMPP service with a password.\r\n * @returns {string}\r\n * @static\r\n */\r\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\r\n    let mucNickname;\r\n\r\n    //Bizwell. nickname is loginID. by.jhhan\r\n    mucNickname = Strophe.getNodeFromJid(jid);\r\n    mucNickname += \"$\";\r\n    mucNickname += RandomUtil.randomHexString(8).toLowerCase();\r\n    /*\r\n\tif (isAuthenticatedUser) {\r\n        // For authenticated users generate a random ID.\r\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\r\n    } else {\r\n        // We try to use the first part of the node (which for anonymous users\r\n        // on prosody is a UUID) to match the previous behavior (and maybe make\r\n        // debugging easier).\r\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\r\n            .toLowerCase();\r\n\r\n        // But if this doesn't have the required format we just generate a new\r\n        // random nickname.\r\n        const re = /[0-9a-f]{8}/g;\r\n\r\n        if (!re.test(mucNickname)) {\r\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\r\n        }\r\n    }\r\n\t*/\r\n\r\n    return mucNickname;\r\n};\r\n\r\n/**\r\n * Initializes the conference object properties\r\n * @param options {object}\r\n * @param options.connection {JitsiConnection} overrides this.connection\r\n */\r\nJitsiConference.prototype._init = function(options = {}) {\r\n    // Override connection and xmpp properties (Useful if the connection\r\n    // reloaded)\r\n    if (options.connection) {\r\n        this.connection = options.connection;\r\n        this.xmpp = this.connection.xmpp;\r\n\r\n        // Setup XMPP events only if we have new connection object.\r\n        this.eventManager.setupXMPPListeners();\r\n    }\r\n\r\n    const { config } = this.options;\r\n\r\n    this._statsCurrentId = config.statisticsId ? config.statisticsId : Settings.callStatsUserName;\r\n    this.room = this.xmpp.createRoom(\r\n        this.options.name, {\r\n            ...config,\r\n            statsId: this._statsCurrentId\r\n        },\r\n        JitsiConference.resourceCreator\r\n    );\r\n\r\n    this._signalingLayer.setChatRoom(this.room);\r\n\r\n    // Connection interrupted/restored listeners\r\n    this._onIceConnectionInterrupted\r\n        = this._onIceConnectionInterrupted.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\r\n\r\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\r\n\r\n    this._onIceConnectionEstablished\r\n        = this._onIceConnectionEstablished.bind(this);\r\n    this.room.addListener(\r\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\r\n\r\n    this._updateProperties = this._updateProperties.bind(this);\r\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\r\n        this._updateProperties);\r\n\r\n    this._sendConferenceJoinAnalyticsEvent = this._sendConferenceJoinAnalyticsEvent.bind(this);\r\n    this.room.addListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\r\n\r\n    this._removeLocalSourceOnReject = this._removeLocalSourceOnReject.bind(this);\r\n    this._updateRoomPresence = this._updateRoomPresence.bind(this);\r\n    this.room.addListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\r\n    this.room.addListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\r\n    this.room.addListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\r\n    this.room.addListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\r\n\r\n    if (config.e2eping?.enabled) {\r\n        this.e2eping = new E2ePing(\r\n            this,\r\n            config,\r\n            (message, to) => {\r\n                try {\r\n                    this.sendMessage(message, to, true /* sendThroughVideobridge */);\r\n                } catch (error) {\r\n                    logger.warn('Failed to send E2E ping request or response.', error && error.msg);\r\n                }\r\n            });\r\n    }\r\n\r\n    if (!this.rtc) {\r\n        this.rtc = new RTC(this, options);\r\n        this.eventManager.setupRTCListeners();\r\n    }\r\n\r\n    this.qualityController = new QualityController(this);\r\n\r\n    this.participantConnectionStatus\r\n        = new ParticipantConnectionStatusHandler(\r\n            this.rtc,\r\n            this,\r\n            {\r\n                // Both these options are not public API, leaving it here only\r\n                // as an entry point through config for tuning up purposes.\r\n                // Default values should be adjusted as soon as optimal values\r\n                // are discovered.\r\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\r\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\r\n            });\r\n    this.participantConnectionStatus.init();\r\n\r\n    // Add the ability to enable callStats only on a percentage of users based on config.js settings.\r\n    let enableCallStats = true;\r\n\r\n    if (config.testing && config.testing.callStatsThreshold) {\r\n        enableCallStats = (Math.random() * 100) <= config.testing.callStatsThreshold;\r\n    }\r\n\r\n    if (!this.statistics) {\r\n        this.statistics = new Statistics(this.xmpp, {\r\n            aliasName: this._statsCurrentId,\r\n            userName: config.statisticsDisplayName ? config.statisticsDisplayName : this.myUserId(),\r\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\r\n            siteID: config.siteID,\r\n            customScriptUrl: config.callStatsCustomScriptUrl,\r\n            callStatsID: config.callStatsID,\r\n            callStatsSecret: config.callStatsSecret,\r\n            callStatsApplicationLogsDisabled: config.callStatsApplicationLogsDisabled,\r\n            enableCallStats,\r\n            roomName: this.options.name,\r\n            applicationName: config.applicationName,\r\n            getWiFiStatsMethod: config.getWiFiStatsMethod\r\n        });\r\n        Statistics.analytics.addPermanentProperties({\r\n            'callstats_name': this._statsCurrentId\r\n        });\r\n\r\n        // Start performance observer for monitoring long tasks\r\n        if (config.longTasksStatsInterval) {\r\n            this.statistics.attachLongTasksStats(this);\r\n        }\r\n    }\r\n\r\n    this.eventManager.setupChatRoomListeners();\r\n\r\n    // Always add listeners because on reload we are executing leave and the\r\n    // listeners are removed from statistics module.\r\n    this.eventManager.setupStatisticsListeners();\r\n\r\n    // Disable VAD processing on Safari since it causes audio input to\r\n    // fail on some of the mobile devices.\r\n    if (config.enableTalkWhileMuted && !browser.isSafari()) {\r\n\r\n        // If VAD processor factory method is provided uses VAD based detection, otherwise fallback to audio level\r\n        // based detection.\r\n        if (config.createVADProcessor) {\r\n            logger.info('Using VAD detection for generating talk while muted events');\r\n\r\n            if (!this._audioAnalyser) {\r\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\r\n            }\r\n\r\n            const vadTalkMutedDetection = new VADTalkMutedDetection();\r\n\r\n            vadTalkMutedDetection.on(DetectionEvents.VAD_TALK_WHILE_MUTED, () =>\r\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\r\n\r\n            this._audioAnalyser.addVADDetectionService(vadTalkMutedDetection);\r\n        } else {\r\n            logger.warn('No VAD Processor was provided. Talk while muted detection service was not initialized!');\r\n        }\r\n    }\r\n\r\n    // Disable noisy mic detection on safari since it causes the audio input to\r\n    // fail on Safari on iPadOS.\r\n    if (config.enableNoisyMicDetection && !browser.isSafari()) {\r\n        if (config.createVADProcessor) {\r\n            if (!this._audioAnalyser) {\r\n                this._audioAnalyser = new VADAudioAnalyser(this, config.createVADProcessor);\r\n            }\r\n\r\n            const vadNoiseDetection = new VADNoiseDetection();\r\n\r\n            vadNoiseDetection.on(DetectionEvents.VAD_NOISY_DEVICE, () =>\r\n                this.eventEmitter.emit(JitsiConferenceEvents.NOISY_MIC));\r\n\r\n            this._audioAnalyser.addVADDetectionService(vadNoiseDetection);\r\n        } else {\r\n            logger.warn('No VAD Processor was provided. Noisy microphone detection service was not initialized!');\r\n        }\r\n    }\r\n\r\n    // Generates events based on no audio input detector.\r\n    if (config.enableNoAudioDetection) {\r\n        this._noAudioSignalDetection = new NoAudioSignalDetection(this);\r\n        this._noAudioSignalDetection.on(DetectionEvents.NO_AUDIO_INPUT, () => {\r\n            this.eventEmitter.emit(JitsiConferenceEvents.NO_AUDIO_INPUT);\r\n        });\r\n        this._noAudioSignalDetection.on(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal => {\r\n            this.eventEmitter.emit(JitsiConferenceEvents.AUDIO_INPUT_STATE_CHANGE, hasAudioSignal);\r\n        });\r\n    }\r\n\r\n\r\n    if ('channelLastN' in config) {\r\n        this.setLastN(config.channelLastN);\r\n    }\r\n\r\n    /**\r\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\r\n     * @type {Jvb121EventGenerator}\r\n     */\r\n    this.jvb121Status = new Jvb121EventGenerator(this);\r\n\r\n    // creates dominant speaker detection that works only in p2p mode\r\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\r\n\r\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\r\n        this.setLocalParticipantProperty(\r\n            'region', config.deploymentInfo.userRegion);\r\n    }\r\n};\r\n\r\n/**\r\n * Joins the conference.\r\n * @param password {string} the password\r\n */\r\nJitsiConference.prototype.join = function(password) {\r\n    if (this.room) {\r\n        this.room.join(password).then(() => this._maybeSetSITimeout());\r\n    }\r\n};\r\n\r\n/**\r\n * Authenticates and upgrades the role of the local participant/user.\r\n *\r\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\r\n * authenticating and upgrading the role of the local participant/user finishes\r\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\r\n * process.\r\n */\r\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\r\n    return authenticateAndUpgradeRole.call(this, {\r\n        ...options,\r\n        onCreateResource: JitsiConference.resourceCreator\r\n    });\r\n};\r\n\r\n/**\r\n * Check if joined to the conference.\r\n */\r\nJitsiConference.prototype.isJoined = function() {\r\n    return this.room && this.room.joined;\r\n};\r\n\r\n/**\r\n * Tells whether or not the P2P mode is enabled in the configuration.\r\n * @return {boolean}\r\n */\r\nJitsiConference.prototype.isP2PEnabled = function() {\r\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\r\n\r\n        // FIXME: remove once we have a default config template. -saghul\r\n        || typeof this.options.config.p2p === 'undefined';\r\n};\r\n\r\n/**\r\n * When in P2P test mode, the conference will not automatically switch to P2P\r\n * when there 2 participants.\r\n * @return {boolean}\r\n */\r\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\r\n    return Boolean(this.options.config.testing\r\n        && this.options.config.testing.p2pTestMode);\r\n};\r\n\r\n/**\r\n * Leaves the conference.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.leave = function() {\r\n    if (this.participantConnectionStatus) {\r\n        this.participantConnectionStatus.dispose();\r\n        this.participantConnectionStatus = null;\r\n    }\r\n    if (this.avgRtpStatsReporter) {\r\n        this.avgRtpStatsReporter.dispose();\r\n        this.avgRtpStatsReporter = null;\r\n    }\r\n\r\n    if (this._audioOutputProblemDetector) {\r\n        this._audioOutputProblemDetector.dispose();\r\n        this._audioOutputProblemDetector = null;\r\n    }\r\n\r\n    if (this.e2eping) {\r\n        this.e2eping.stop();\r\n        this.e2eping = null;\r\n    }\r\n\r\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\r\n\r\n    this.rtc.closeBridgeChannel();\r\n\r\n    this._sendConferenceLeftAnalyticsEvent();\r\n\r\n    if (this.statistics) {\r\n        this.statistics.dispose();\r\n    }\r\n\r\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\r\n\r\n    // Close both JVb and P2P JingleSessions\r\n    if (this.jvbJingleSession) {\r\n        this.jvbJingleSession.close();\r\n        this.jvbJingleSession = null;\r\n    }\r\n    if (this.p2pJingleSession) {\r\n        this.p2pJingleSession.close();\r\n        this.p2pJingleSession = null;\r\n    }\r\n\r\n    // leave the conference\r\n    if (this.room) {\r\n        const room = this.room;\r\n\r\n        // Unregister connection state listeners\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_INTERRUPTED,\r\n            this._onIceConnectionInterrupted);\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_RESTORED,\r\n            this._onIceConnectionRestored);\r\n        room.removeListener(\r\n            XMPPEvents.CONNECTION_ESTABLISHED,\r\n            this._onIceConnectionEstablished);\r\n\r\n        room.removeListener(\r\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\r\n            this._updateProperties);\r\n\r\n    room.removeListener(XMPPEvents.MEETING_ID_SET, this._sendConferenceJoinAnalyticsEvent);\r\n    room.removeListener(XMPPEvents.SESSION_ACCEPT, this._updateRoomPresence);\r\n    room.removeListener(XMPPEvents.SOURCE_ADD, this._updateRoomPresence);\r\n    room.removeListener(XMPPEvents.SOURCE_ADD_ERROR, this._removeLocalSourceOnReject);\r\n    room.removeListener(XMPPEvents.SOURCE_REMOVE, this._updateRoomPresence);\r\n\r\n        this.eventManager.removeXMPPListeners();\r\n\r\n        this.room = null;\r\n\r\n        this._signalingLayer.setChatRoom(null);\r\n\r\n        return room.leave()\r\n            .then(() => {\r\n                if (this.rtc) {\r\n                    this.rtc.destroy();\r\n                }\r\n            })\r\n            .catch(error => {\r\n                // remove all participants because currently the conference\r\n                // won't be usable anyway. This is done on success automatically\r\n                // by the ChatRoom instance.\r\n                this.getParticipants().forEach(\r\n                    participant => this.onMemberLeft(participant.getJid()));\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    // If this.room == null we are calling second time leave().\r\n    return Promise.reject(\r\n        new Error('The conference is has been already left'));\r\n};\r\n\r\n/**\r\n * Returns the currently active media session if any.\r\n *\r\n * @returns {JingleSessionPC|undefined}\r\n * @private\r\n */\r\nJitsiConference.prototype._getActiveMediaSession = function() {\r\n    return this.isP2PActive() ? this.p2pJingleSession : this.jvbJingleSession;\r\n};\r\n\r\n/**\r\n * Returns an array containing all media sessions existing in this conference.\r\n *\r\n * @returns {Array<JingleSessionPC>}\r\n * @private\r\n */\r\nJitsiConference.prototype._getMediaSessions = function() {\r\n    const sessions = [];\r\n\r\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\r\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\r\n\r\n    return sessions;\r\n};\r\n\r\n/**\r\n * Returns name of this conference.\r\n */\r\nJitsiConference.prototype.getName = function() {\r\n    return this.options.name;\r\n};\r\n\r\n/**\r\n * Returns the {@link JitsiConnection} used by this this conference.\r\n */\r\nJitsiConference.prototype.getConnection = function() {\r\n    return this.connection;\r\n};\r\n\r\n/**\r\n * Check if authentication is enabled for this conference.\r\n */\r\nJitsiConference.prototype.isAuthEnabled = function() {\r\n    return this.authEnabled;\r\n};\r\n\r\n/**\r\n * Check if user is logged in.\r\n */\r\nJitsiConference.prototype.isLoggedIn = function() {\r\n    return Boolean(this.authIdentity);\r\n};\r\n\r\n/**\r\n * Get authorized login.\r\n */\r\nJitsiConference.prototype.getAuthLogin = function() {\r\n    return this.authIdentity;\r\n};\r\n\r\n/**\r\n * Check if external authentication is enabled for this conference.\r\n */\r\nJitsiConference.prototype.isExternalAuthEnabled = function() {\r\n    return this.room && this.room.moderator.isExternalAuthEnabled();\r\n};\r\n\r\n/**\r\n * Get url for external authentication.\r\n * @param {boolean} [urlForPopup] if true then return url for login popup,\r\n *                                else url of login page.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\r\n    return new Promise((resolve, reject) => {\r\n        if (!this.isExternalAuthEnabled()) {\r\n            reject();\r\n\r\n            return;\r\n        }\r\n        if (urlForPopup) {\r\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\r\n        } else {\r\n            this.room.moderator.getLoginUrl(resolve, reject);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Returns the local tracks of the given media type, or all local tracks if no\r\n * specific type is given.\r\n * @param {MediaType} [mediaType] Optional media type (audio or video).\r\n */\r\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\r\n    let tracks = [];\r\n\r\n    if (this.rtc) {\r\n        tracks = this.rtc.getLocalTracks(mediaType);\r\n    }\r\n\r\n    return tracks;\r\n};\r\n\r\n/**\r\n * Obtains local audio track.\r\n * @return {JitsiLocalTrack|null}\r\n */\r\nJitsiConference.prototype.getLocalAudioTrack = function() {\r\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\r\n};\r\n\r\n/**\r\n * Obtains local video track.\r\n * @return {JitsiLocalTrack|null}\r\n */\r\nJitsiConference.prototype.getLocalVideoTrack = function() {\r\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\r\n};\r\n\r\n/**\r\n * Obtains the performance statistics.\r\n * @returns {Object|null}\r\n */\r\nJitsiConference.prototype.getPerformanceStats = function() {\r\n    return {\r\n        longTasksStats: this.statistics.getLongTasksStats()\r\n    };\r\n};\r\n\r\n/**\r\n * Attaches a handler for events(For example - \"participant joined\".) in the\r\n * conference. All possible event are defined in JitsiConferenceEvents.\r\n * @param eventId the event ID.\r\n * @param handler handler for the event.\r\n *\r\n * Note: consider adding eventing functionality by extending an EventEmitter\r\n * impl, instead of rolling ourselves\r\n */\r\nJitsiConference.prototype.on = function(eventId, handler) {\r\n    if (this.eventEmitter) {\r\n        this.eventEmitter.on(eventId, handler);\r\n    }\r\n};\r\n\r\n/**\r\n * Removes event listener\r\n * @param eventId the event ID.\r\n * @param [handler] optional, the specific handler to unbind\r\n *\r\n * Note: consider adding eventing functionality by extending an EventEmitter\r\n * impl, instead of rolling ourselves\r\n */\r\nJitsiConference.prototype.off = function(eventId, handler) {\r\n    if (this.eventEmitter) {\r\n        this.eventEmitter.removeListener(eventId, handler);\r\n    }\r\n};\r\n\r\n// Common aliases for event emitter\r\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\r\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\r\n\r\n/**\r\n * Receives notifications from other participants about commands / custom events\r\n * (sent by sendCommand or sendCommandOnce methods).\r\n * @param command {String} the name of the command\r\n * @param handler {Function} handler for the command\r\n */\r\nJitsiConference.prototype.addCommandListener = function(command, handler) {\r\n    if (this.room) {\r\n        this.room.addPresenceListener(command, handler);\r\n    }\r\n};\r\n\r\n/**\r\n  * Removes command  listener\r\n  * @param command {String} the name of the command\r\n  * @param handler {Function} handler to remove for the command\r\n  */\r\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\r\n    if (this.room) {\r\n        this.room.removePresenceListener(command, handler);\r\n    }\r\n};\r\n\r\n/**\r\n * Sends text message to the other participants in the conference\r\n * @param message the text message.\r\n * @param elementName the element name to encapsulate the message.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendTextMessage = function(\r\n        message, elementName = 'body') {\r\n    if (this.room) {\r\n        const displayName = (this.room.getFromPresence('nick') || {}).value;\r\n\r\n        this.room.sendMessage(message, elementName, displayName);\r\n    }\r\n};\r\n\r\n/**\r\n * Send private text message to another participant of the conference\r\n * @param id the id of the participant to send a private message.\r\n * @param message the text message.\r\n * @param elementName the element name to encapsulate the message.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendPrivateTextMessage = function(\r\n        id, message, elementName = 'body') {\r\n    if (this.room) {\r\n        this.room.sendPrivateMessage(id, message, elementName);\r\n    }\r\n};\r\n\r\n/**\r\n * Send presence command.\r\n * @param name {String} the name of the command.\r\n * @param values {Object} with keys and values that will be sent.\r\n **/\r\nJitsiConference.prototype.sendCommand = function(name, values) {\r\n    if (this.room) {\r\n        this.room.addToPresence(name, values);\r\n        this.room.sendPresence();\r\n    } else {\r\n        logger.warn('Not sending a command, room not initialized.');\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * Send presence command one time.\r\n * @param name {String} the name of the command.\r\n * @param values {Object} with keys and values that will be sent.\r\n **/\r\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\r\n    this.sendCommand(name, values);\r\n    this.removeCommand(name);\r\n};\r\n\r\n/**\r\n * Removes presence command.\r\n * @param name {String} the name of the command.\r\n **/\r\nJitsiConference.prototype.removeCommand = function(name) {\r\n    if (this.room) {\r\n        this.room.removeFromPresence(name);\r\n    }\r\n};\r\n\r\n/**\r\n * Sets the display name for this conference.\r\n * @param name the display name to set\r\n */\r\nJitsiConference.prototype.setDisplayName = function(name) {\r\n    if (this.room) {\r\n        this.room.addToPresence('nick', {\r\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\r\n            value: name\r\n        });\r\n        this.room.sendPresence();\r\n    }\r\n};\r\n\r\n/**\r\n * Set new subject for this conference. (available only for moderator)\r\n * @param {string} subject new subject\r\n */\r\nJitsiConference.prototype.setSubject = function(subject) {\r\n    if (this.room && this.isModerator()) {\r\n        this.room.setSubject(subject);\r\n    }\r\n};\r\n\r\n/**\r\n * Get a transcriber object for all current participants in this conference\r\n * @return {Transcriber} the transcriber object\r\n */\r\nJitsiConference.prototype.getTranscriber = function() {\r\n    if (this.transcriber === undefined) {\r\n        this.transcriber = new Transcriber();\r\n\r\n        // add all existing local audio tracks to the transcriber\r\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\r\n\r\n        for (const localAudio of localAudioTracks) {\r\n            this.transcriber.addTrack(localAudio);\r\n        }\r\n\r\n        // and all remote audio tracks\r\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\r\n\r\n        for (const remoteTrack of remoteAudioTracks) {\r\n            this.transcriber.addTrack(remoteTrack);\r\n        }\r\n    }\r\n\r\n    return this.transcriber;\r\n};\r\n\r\n/**\r\n * Returns the transcription status.\r\n *\r\n * @returns {String} \"on\" or \"off\".\r\n */\r\nJitsiConference.prototype.getTranscriptionStatus = function() {\r\n    return this.room.transcriptionStatus;\r\n};\r\n\r\n/**\r\n * Adds JitsiLocalTrack object to the conference.\r\n * @param track the JitsiLocalTrack object.\r\n * @returns {Promise<JitsiLocalTrack>}\r\n * @throws {Error} if the specified track is a video track and there is already\r\n * another video track in the conference.\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.12\r\n */\r\nJitsiConference.prototype.addTrack = function(track) {\r\n    const mediaType = track.getType();\r\n    const localTracks = this.rtc.getLocalTracks(mediaType);\r\n\r\n    // Ensure there's exactly 1 local track of each media type in the conference.\r\n    if (localTracks.length > 0) {\r\n        // Don't be excessively harsh and severe if the API client happens to attempt to add the same local track twice.\r\n        if (track === localTracks[0]) {\r\n            return Promise.resolve(track);\r\n        }\r\n\r\n        if (FeatureFlags.isMultiStreamSupportEnabled() && mediaType === MediaType.VIDEO) {\r\n            const addTrackPromises = [];\r\n\r\n            this.p2pJingleSession && addTrackPromises.push(this.p2pJingleSession.addTracks([ track ]));\r\n            this.jvbJingleSession && addTrackPromises.push(this.jvbJingleSession.addTracks([ track ]));\r\n\r\n            return Promise.all(addTrackPromises)\r\n                .then(() => {\r\n                    this._setupNewTrack(track);\r\n                    this._sendBridgeVideoTypeMessage(track);\r\n                    this._updateRoomPresence(this._getActiveMediaSession());\r\n\r\n                    if (this.isMutedByFocus || this.isVideoMutedByFocus) {\r\n                        this._fireMuteChangeEvent(track);\r\n                    }\r\n                });\r\n        }\r\n\r\n        return Promise.reject(new Error(`Cannot add second ${mediaType} track to the conference`));\r\n    }\r\n\r\n    return this.replaceTrack(null, track);\r\n};\r\n\r\n/**\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.12\r\n * @param {*} localtrack \r\n */\r\nJitsiConference.prototype._sendBridgeVideoTypeMessage = function(localtrack) {\r\n    let videoType = !localtrack || localtrack.isMuted() ? 'none' : localtrack.getVideoType();\r\n\r\n    if (videoType === 'desktop' && this._desktopSharingFrameRate > SS_DEFAULT_FRAME_RATE) {\r\n        videoType = 'desktop_high_fps';\r\n    }\r\n\r\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localtrack) {\r\n        this.rtc.sendSourceVideoType(localtrack.getSourceName(), videoType);\r\n    } else if (!FeatureFlags.isSourceNameSignalingEnabled()) {\r\n        this.rtc.setVideoType(videoType);\r\n    }\r\n};\r\n\r\n/**\r\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\r\n * @param {number} audioLevel the audio level\r\n * @param {TraceablePeerConnection} [tpc]\r\n */\r\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\r\n        audioLevel,\r\n        tpc) {\r\n    const activeTpc = this.getActivePeerConnection();\r\n\r\n    // There will be no TraceablePeerConnection if audio levels do not come from\r\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\r\n    // Audio Analyser API and emits local audio levels events through\r\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\r\n    // optional.\r\n    if (!tpc || activeTpc === tpc) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n            this.myUserId(), audioLevel);\r\n    }\r\n};\r\n\r\n/**\r\n * Fires TRACK_MUTE_CHANGED change conference event.\r\n * @param track the JitsiTrack object related to the event.\r\n */\r\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\r\n    // check if track was muted by focus and now is unmuted by user\r\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\r\n        this.isMutedByFocus = false;\r\n\r\n        // unmute local user on server\r\n        this.room.muteParticipant(this.room.myroomjid, false);\r\n    }\r\n\r\n    let actorParticipant;\r\n\r\n    if (this.mutedByFocusActor) {\r\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\r\n\r\n        actorParticipant = this.participants[actorId];\r\n    }\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\r\n};\r\n\r\n/**\r\n * Clear JitsiLocalTrack properties and listeners.\r\n * @param track the JitsiLocalTrack object.\r\n */\r\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\r\n    track.setConference(null);\r\n    this.rtc.removeLocalTrack(track);\r\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, track.muteHandler);\r\n    if (track.isAudioTrack()) {\r\n        track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, track.audioLevelHandler);\r\n    }\r\n\r\n    // send event for stopping screen sharing\r\n    // FIXME: we assume we have only one screen sharing track\r\n    // if we change this we need to fix this check\r\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\r\n        this.statistics.sendScreenSharingEvent(false);\r\n    }\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\r\n};\r\n\r\n/**\r\n * Removes JitsiLocalTrack from the conference and performs\r\n * a new offer/answer cycle.\r\n * @param {JitsiLocalTrack} track\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.removeTrack = function(track) {\r\n    return this.replaceTrack(track, null);\r\n};\r\n\r\n/**\r\n * Replaces oldTrack with newTrack and performs a single offer/answer\r\n *  cycle after both operations are done.  Either oldTrack or newTrack\r\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\r\n *  effectively just removes 'oldTrack'\r\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\r\n * @param {JitsiLocalTrack} newTrack the new stream to use\r\n * @returns {Promise} resolves when the replacement is finished\r\n */\r\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\r\n    const oldVideoType = oldTrack?.getVideoType();\r\n    const newVideoType = newTrack?.getVideoType();\r\n\r\n    if (FeatureFlags.isMultiStreamSupportEnabled() && oldTrack && newTrack && oldVideoType !== newVideoType) {\r\n        throw new Error(`Replacing a track of videoType=${oldVideoType} with a track of videoType=${newVideoType} is`\r\n            + ' not supported in this mode.');\r\n    }\r\n    const oldTrackBelongsToConference = (this === oldTrack?.conference) ? true : false;\r\n\r\n    if (oldTrackBelongsToConference && oldTrack?.disposed) {\r\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\r\n    }\r\n    if (newTrack?.disposed) {\r\n        return Promise.reject(new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\r\n    }\r\n\r\n    if (oldTrack && !oldTrackBelongsToConference) {\r\n        logger.warn(`JitsiConference.replaceTrack oldTrack (${oldTrack} does not belong to this conference`);\r\n    }\r\n\r\n    if (FeatureFlags.isMultiStreamSupportEnabled() && oldTrack && newTrack && oldTrack?.isVideoTrack()) {\r\n        newTrack?.setSourceName(oldTrack?.getSourceName());\r\n    }\r\n\r\n    // Now replace the stream at the lower levels\r\n    return this._doReplaceTrack(oldTrackBelongsToConference ? oldTrack : null, newTrack)\r\n        .then(() => {\r\n            oldTrackBelongsToConference && this.onLocalTrackRemoved(oldTrack);\r\n            newTrack && this._setupNewTrack(newTrack);\r\n\r\n            // Send 'VideoTypeMessage' on the bridge channel when a video track is added/removed.\r\n            if ((oldTrackBelongsToConference && oldTrack?.isVideoTrack()) || newTrack?.isVideoTrack()) {\r\n                this._sendBridgeVideoTypeMessage(newTrack);\r\n            }\r\n\r\n            // updates presence when we replace the video tracks desktop with screen and screen with desktop\r\n            if (oldTrackBelongsToConference && oldTrack?.isVideoTrack()\r\n\r\n                // we do not want to send presence update during setEffect switching, which does remove and then add\r\n                && !(oldTrack?._setEffectInProgress || newTrack?._setEffectInProgress)) {\r\n                this._updateRoomPresence(this._getActiveMediaSession());\r\n            }\r\n\r\n            if (newTrack !== null && (this.isMutedByFocus || this.isVideoMutedByFocus)) {\r\n                this._fireMuteChangeEvent(newTrack);\r\n            }\r\n\r\n            return Promise.resolve();\r\n        })\r\n        .catch(error => {\r\n            logger.error(`replaceTrack failed: ${error?.stack}`);\r\n\r\n            return Promise.reject(error);\r\n        });\r\n};\r\n\r\n/**\r\n * Replaces the tracks at the lower level by going through the Jingle session\r\n * and WebRTC peer connection. The method will resolve immediately if there is\r\n * currently no JingleSession started.\r\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\r\n * the process or <tt>null</t> if the method should act as \"add track\"\r\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\r\n * <tt>null</tt> if the method should act as \"remove track\"\r\n * @return {Promise} resolved when the process is done or rejected with a string\r\n * which describes the error.\r\n * @private\r\n */\r\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\r\n    const replaceTrackPromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        replaceTrackPromises.push(\r\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\r\n    } else {\r\n        logger.info('_doReplaceTrack - no JVB JingleSession');\r\n    }\r\n\r\n    if (this.p2pJingleSession) {\r\n        replaceTrackPromises.push(\r\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\r\n    } else {\r\n        logger.info('_doReplaceTrack - no P2P JingleSession');\r\n    }\r\n\r\n    return Promise.all(replaceTrackPromises);\r\n};\r\n\r\n/**\r\n * Handler for when a source-add for a local source is rejected by Jicofo.\r\n *\r\n * @param {JingleSessionPC} jingleSession - The media session.\r\n * @param {Error} error - The error message.\r\n * @param {MediaType} mediaType - The media type of the track associated with the source that was rejected.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype._removeLocalSourceOnReject = function(jingleSession, error, mediaType) {\r\n    if (!jingleSession) {\r\n        return;\r\n    }\r\n    logger.warn(`Source-add rejected on ${jingleSession}, reason=\"${error?.reason}\", message=\"${error?.msg}\"`);\r\n    const track = this.getLocalTracks(mediaType)[0];\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_UNMUTE_REJECTED, track);\r\n};\r\n\r\n/**\r\n * Operations related to creating a new track\r\n * @param {JitsiLocalTrack} newTrack the new track being created\r\n */\r\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\r\n    const mediaType = newTrack.getType();\r\n\r\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack() && newTrack.videoType !== VideoType.DESKTOP)) {\r\n        // Report active device to statistics\r\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\r\n        const device = devices\r\n            .find(d => d.kind === `${newTrack.getTrack().kind}input` && d.label === newTrack.getTrack().label);\r\n\r\n        if (device) {\r\n            Statistics.sendActiveDeviceListEvent(RTC.getEventDataForActiveDevice(device));\r\n        }\r\n    }\r\n\r\n    // Create a source name for this track if it doesn't exist.\r\n    if (FeatureFlags.isSourceNameSignalingEnabled() && !newTrack.getSourceName()) {\r\n        const sourceName = getSourceNameForJitsiTrack(\r\n            this.myUserId(),\r\n            mediaType,\r\n            this.getLocalTracks(mediaType)?.length);\r\n\r\n        newTrack.setSourceName(sourceName);\r\n    }\r\n\r\n    this.rtc.addLocalTrack(newTrack);\r\n    newTrack.setConference(this);\r\n\r\n    // Add event handlers.\r\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\r\n    newTrack.addEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED, newTrack.muteHandler);\r\n\r\n    if (newTrack.isAudioTrack()) {\r\n        newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\r\n        newTrack.addEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, newTrack.audioLevelHandler);\r\n    }\r\n\r\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\r\n};\r\n\r\n/**\r\n * Sets the video type.\r\n * @param track\r\n * @return <tt>true</tt> if video type was changed in presence.\r\n * @private\r\n */\r\nJitsiConference.prototype._setNewVideoType = function(track) {\r\n    let videoTypeChanged = false;\r\n\r\n    if (FeatureFlags.isSourceNameSignalingEnabled() && track) {\r\n        videoTypeChanged = this._signalingLayer.setTrackVideoType(track.getSourceName(), track.videoType);\r\n    }\r\n\r\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\r\n        const videoTypeTagName = 'videoType';\r\n\r\n        // If track is missing we revert to default type Camera, the case where we screenshare and\r\n        // we return to be video muted.\r\n        const trackVideoType = track ? track.videoType : VideoType.CAMERA;\r\n\r\n        // If video type is camera and there is no videoType in presence, we skip adding it, as this is the default one\r\n        if (trackVideoType !== VideoType.CAMERA || this.room.getFromPresence(videoTypeTagName)) {\r\n            // We will not use this.sendCommand here to avoid sending the presence immediately, as later we may also\r\n            // set the mute status.\r\n            const legacyTypeChanged = this.room.addOrReplaceInPresence(videoTypeTagName, { value: trackVideoType });\r\n\r\n            videoTypeChanged = videoTypeChanged || legacyTypeChanged;\r\n        }\r\n    }\r\n\r\n    return videoTypeChanged;\r\n};\r\n\r\n/**\r\n * Sets mute status.\r\n * @param mediaType\r\n * @param localTrack\r\n * @param isMuted\r\n * @param <tt>true</tt> when presence was changed, <tt>false</tt> otherwise.\r\n * @private\r\n */\r\nJitsiConference.prototype._setTrackMuteStatus = function(mediaType, localTrack, isMuted) {\r\n    let presenceChanged = false;\r\n\r\n    if (FeatureFlags.isSourceNameSignalingEnabled() && localTrack) {\r\n        presenceChanged = this._signalingLayer.setTrackMuteStatus(localTrack.getSourceName(), isMuted);\r\n    }\r\n\r\n    // Add the 'audioMuted' and 'videoMuted' tags when source name signaling is enabled for backward compatibility.\r\n    // It won't be used anymore when multiple stream support is enabled.\r\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\r\n        let audioMuteChanged, videoMuteChanged;\r\n\r\n        if (!this.room) {\r\n            return false;\r\n        }\r\n\r\n        if (mediaType === MediaType.AUDIO) {\r\n            audioMuteChanged = this.room.addAudioInfoToPresence(isMuted);\r\n        } else {\r\n            videoMuteChanged = this.room.addVideoInfoToPresence(isMuted);\r\n        }\r\n\r\n        presenceChanged = presenceChanged || audioMuteChanged || videoMuteChanged;\r\n    }\r\n\r\n    return presenceChanged;\r\n};\r\n\r\n/**\r\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\r\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\r\n * removed on video mute).\r\n * @param {JitsiLocalTrack} track the local track that will be added as part of\r\n * the unmute operation.\r\n * @return {Promise} resolved when the process is done or rejected with a string\r\n * which describes the error.\r\n */\r\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\r\n    const addAsUnmutePromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\r\n    } else {\r\n        logger.info(\r\n            'Add local MediaStream as unmute -'\r\n                + ' no JVB Jingle session started yet');\r\n    }\r\n\r\n    if (this.p2pJingleSession) {\r\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\r\n    } else {\r\n        logger.info(\r\n            'Add local MediaStream as unmute -'\r\n                + ' no P2P Jingle session started yet');\r\n    }\r\n\r\n    return Promise.all(addAsUnmutePromises);\r\n};\r\n\r\n/**\r\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\r\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\r\n * that is to stop sending any data and turn off the HW camera device.\r\n * @param {JitsiLocalTrack} track the local track that will be removed.\r\n * @return {Promise}\r\n */\r\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\r\n    const removeAsMutePromises = [];\r\n\r\n    if (this.jvbJingleSession) {\r\n        removeAsMutePromises.push(\r\n            this.jvbJingleSession.removeTrackAsMute(track));\r\n    } else {\r\n        logger.info(\r\n            'Remove local MediaStream - no JVB JingleSession started yet');\r\n    }\r\n    if (this.p2pJingleSession) {\r\n        removeAsMutePromises.push(\r\n            this.p2pJingleSession.removeTrackAsMute(track));\r\n    } else {\r\n        logger.info(\r\n            'Remove local MediaStream - no P2P JingleSession started yet');\r\n    }\r\n\r\n    return Promise.all(removeAsMutePromises);\r\n};\r\n\r\n/**\r\n * Get role of the local user.\r\n * @returns {string} user role: 'moderator' or 'none'\r\n */\r\nJitsiConference.prototype.getRole = function() {\r\n    return this.room.role;\r\n};\r\n\r\n/**\r\n * Returns whether or not the current conference has been joined as a hidden\r\n * user.\r\n *\r\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\r\n * no connection is active.\r\n */\r\nJitsiConference.prototype.isHidden = function() {\r\n    if (!this.connection) {\r\n        return null;\r\n    }\r\n\r\n    return Strophe.getDomainFromJid(this.connection.getJid())\r\n        === this.options.config.hiddenDomain;\r\n};\r\n\r\n/**\r\n * Check if local user is moderator.\r\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\r\n * we're no longer in the conference room then <tt>null</tt> is returned.\r\n */\r\nJitsiConference.prototype.isModerator = function() {\r\n    return this.room ? this.room.isModerator() : null;\r\n};\r\n\r\n/**\r\n * Set password for the room.\r\n * @param {string} password new password for the room.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.lock = function(password) {\r\n    if (!this.isModerator()) {\r\n        return Promise.reject(new Error('You are not moderator.'));\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.room.lockRoom(\r\n            password || '',\r\n            () => resolve(),\r\n            err => reject(err),\r\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\r\n    });\r\n};\r\n\r\n/**\r\n * Remove password from the room.\r\n * @returns {Promise}\r\n */\r\nJitsiConference.prototype.unlock = function() {\r\n    return this.lock();\r\n};\r\n\r\n/**\r\n * Elects the participant with the given id to be the selected participant in\r\n * order to receive higher video quality (if simulcast is enabled).\r\n * Or cache it if channel is not created and send it once channel is available.\r\n * @param participantId the identifier of the participant\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.selectParticipant = function(participantId) {\r\n    this.selectParticipants([ participantId ]);\r\n};\r\n\r\n/*\r\n * Elects participants with given ids to be the selected participants in order\r\n * to receive higher video quality (if simulcast is enabled). The argument\r\n * should be an array of participant id strings or an empty array; an error will\r\n * be thrown if a non-array is passed in. The error is thrown as a layer of\r\n * protection against passing an invalid argument, as the error will happen in\r\n * the bridge and may not be visible in the client.\r\n *\r\n * @param {Array<strings>} participantIds - An array of identifiers for\r\n * participants.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.selectParticipants = function(participantIds) {\r\n    if (!Array.isArray(participantIds)) {\r\n        throw new Error('Invalid argument; participantIds must be an array.');\r\n    }\r\n\r\n    this.rtc.selectEndpoints(participantIds);\r\n};\r\n\r\n/**\r\n * Elects the participant with the given id to be the pinned participant in\r\n * order to always receive video for this participant (even when last n is\r\n * enabled).\r\n * @param participantId the identifier of the participant\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n */\r\nJitsiConference.prototype.pinParticipant = function(participantId) {\r\n    this.rtc.pinEndpoint(participantId);\r\n};\r\n\r\n/**\r\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\r\n * @returns {number}\r\n */\r\nJitsiConference.prototype.getLastN = function() {\r\n    return this.rtc.getLastN();\r\n};\r\n\r\n/**\r\n * Selects a new value for \"lastN\". The requested amount of videos are going\r\n * to be delivered after the value is in effect. Set to -1 for unlimited or\r\n * all available videos.\r\n * @param lastN the new number of videos the user would like to receive.\r\n * @throws Error or RangeError if the given value is not a number or is smaller\r\n * than -1.\r\n */\r\nJitsiConference.prototype.setLastN = function(lastN) {\r\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\r\n        throw new Error(`Invalid value for lastN: ${lastN}`);\r\n    }\r\n    const n = Number(lastN);\r\n\r\n    if (n < -1) {\r\n        throw new RangeError('lastN cannot be smaller than -1');\r\n    }\r\n    this.rtc.setLastN(n);\r\n\r\n    // If the P2P session is not fully established yet, we wait until it gets\r\n    // established.\r\n    if (this.p2pJingleSession) {\r\n        const isVideoActive = n !== 0;\r\n\r\n        this.p2pJingleSession\r\n            .setMediaTransferActive(true, isVideoActive)\r\n            .catch(error => {\r\n                logger.error(\r\n                    `Failed to adjust video transfer status (${isVideoActive})`,\r\n                    error);\r\n            });\r\n    }\r\n};\r\n\r\n/**\r\n * Checks if the participant given by participantId is currently included in\r\n * the last N.\r\n * @param {string} participantId the identifier of the participant we would\r\n * like to check.\r\n * @return {boolean} true if the participant with id is in the last N set or\r\n * if there's no last N set, false otherwise.\r\n * @deprecated this method should never be used to figure out the UI, but\r\n * {@link ParticipantConnectionStatus} should be used instead.\r\n */\r\nJitsiConference.prototype.isInLastN = function(participantId) {\r\n    return this.rtc.isInLastN(participantId);\r\n};\r\n\r\n/**\r\n * @return Array<JitsiParticipant> an array of all participants in this\r\n * conference.\r\n */\r\nJitsiConference.prototype.getParticipants = function() {\r\n    return Object.values(this.participants);\r\n};\r\n\r\n/**\r\n * Returns the number of participants in the conference, including the local\r\n * participant.\r\n * @param countHidden {boolean} Whether or not to include hidden participants\r\n * in the count. Default: false.\r\n **/\r\nJitsiConference.prototype.getParticipantCount\r\n    = function(countHidden = false) {\r\n\r\n        let participants = this.getParticipants();\r\n\r\n        if (!countHidden) {\r\n            participants = participants.filter(p => !p.isHidden());\r\n        }\r\n\r\n        // Add one for the local participant.\r\n        return participants.length + 1;\r\n    };\r\n\r\n/**\r\n * @returns {JitsiParticipant} the participant in this conference with the\r\n * specified id (or undefined if there isn't one).\r\n * @param id the id of the participant.\r\n */\r\nJitsiConference.prototype.getParticipantById = function(id) {\r\n    return this.participants[id];\r\n};\r\n\r\n/**\r\n * Grant owner rights to the participant.\r\n * @param {string} id id of the participant to grant owner rights to.\r\n */\r\nJitsiConference.prototype.grantOwner = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.setAffiliation(participant.getJid(), 'owner');\r\n};\r\n\r\n/**\r\n * Kick participant from this conference.\r\n * @param {string} id id of the participant to kick\r\n */\r\nJitsiConference.prototype.kickParticipant = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.kick(participant.getJid());\r\n};\r\n\r\n/**\r\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\r\n * analytics event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeClearSITimeout = function() {\r\n    if (this._sessionInitiateTimeout\r\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\r\n        window.clearTimeout(this._sessionInitiateTimeout);\r\n        this._sessionInitiateTimeout = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\r\n * event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeSetSITimeout = function() {\r\n    // Jicofo is supposed to invite if there are at least 2 participants\r\n    if (!this.jvbJingleSession\r\n            && this.getParticipantCount() >= 2\r\n            && !this._sessionInitiateTimeout) {\r\n        this._sessionInitiateTimeout = window.setTimeout(() => {\r\n            this._sessionInitiateTimeout = null;\r\n            Statistics.sendAnalytics(createJingleEvent(\r\n                ACTION_JINGLE_SI_TIMEOUT,\r\n                {\r\n                    p2p: false,\r\n                    value: JINGLE_SI_TIMEOUT\r\n                }));\r\n        }, JINGLE_SI_TIMEOUT);\r\n    }\r\n};\r\n\r\n/**\r\n * Mutes a participant.\r\n * @param {string} id The id of the participant to mute.\r\n */\r\nJitsiConference.prototype.muteParticipant = function(id) {\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    this.room.muteParticipant(participant.getJid(), true);\r\n};\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Notifies this JitsiConference that a new member has joined its chat room.\r\n *\r\n * FIXME This should NOT be exposed!\r\n *\r\n * @param jid the jid of the participant in the MUC\r\n * @param nick the display name of the participant\r\n * @param role the role of the participant in the MUC\r\n * @param isHidden indicates if this is a hidden participant (system\r\n * participant for example a recorder).\r\n * @param statsID the participant statsID (optional)\r\n * @param status the initial status if any\r\n * @param identity the member identity, if any\r\n * @param botType the member botType, if any\r\n */\r\nJitsiConference.prototype.onMemberJoined = function(\r\n        jid, nick, role, isHidden, statsID, status, identity, botType) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n\r\n    if (id === 'focus' || this.myUserId() === id) {\r\n        return;\r\n    }\r\n\r\n    const participant\r\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\r\n\r\n    participant._role = role;\r\n    participant._botType = botType;\r\n    this.participants[id] = participant;\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.USER_JOINED,\r\n        id,\r\n        participant);\r\n\r\n    this._updateFeatures(participant);\r\n\r\n    this._maybeStartOrStopP2P();\r\n    this._maybeSetSITimeout();\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Updates features for a participant.\r\n * @param {JitsiParticipant} participant - The participant to query for features.\r\n * @returns {void}\r\n * @private\r\n */\r\nJitsiConference.prototype._updateFeatures = function(participant) {\r\n    participant.getFeatures()\r\n        .then(features => {\r\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\r\n            this.updateDTMFSupport();\r\n\r\n            if (features.has('http://jitsi.org/protocol/jigasi')) {\r\n                participant.setProperty('features_jigasi', true);\r\n            }\r\n\r\n            if (features.has('https://jitsi.org/meet/e2ee')) {\r\n                participant.setProperty('features_e2ee', true);\r\n            }\r\n        })\r\n        .catch(() => false);\r\n};\r\n\r\n/**\r\n * Get notified when member bot type had changed.\r\n * @param jid the member jid\r\n * @param botType the new botType value\r\n * @private\r\n */\r\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\r\n\r\n    // find the participant and mark it as non bot, as the real one will join\r\n    // in a moment\r\n    const peers = this.getParticipants();\r\n    const botParticipant = peers.find(p => p.getJid() === jid);\r\n\r\n    if (botParticipant) {\r\n        botParticipant._botType = botType;\r\n        const id = Strophe.getResourceFromJid(jid);\r\n\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\r\n            id,\r\n            botType);\r\n    }\r\n\r\n    // if botType changed to undefined, botType was removed, in case of\r\n    // poltergeist mode this is the moment when the poltergeist had exited and\r\n    // the real participant had already replaced it.\r\n    // In this case we can check and try p2p\r\n    if (!botParticipant._botType) {\r\n        this._maybeStartOrStopP2P();\r\n    }\r\n};\r\n\r\nJitsiConference.prototype.onMemberLeft = function(jid) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n\r\n    if (id === 'focus' || this.myUserId() === id) {\r\n        return;\r\n    }\r\n\r\n    const participant = this.participants[id];\r\n    const mediaSessions = this.getMediaSessions();\r\n    let tracksToBeRemoved = [];\r\n\r\n    for (const session of mediaSessions) {\r\n        const remoteTracks = session.peerconnection.getRemoteTracks(id);\r\n\r\n        remoteTracks && (tracksToBeRemoved = [ ...tracksToBeRemoved, ...remoteTracks ]);\r\n\r\n        // Remove the ssrcs from the remote description and renegotiate.\r\n        session.removeRemoteStreamsOnLeave(id);\r\n    }\r\n\r\n    // Fire the event before renegotiation is done so that the thumbnails can be removed immediately.\r\n    tracksToBeRemoved.forEach(track => {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\r\n    });\r\n\r\n    if (participant) {\r\n        delete this.participants[id];\r\n        this.eventEmitter.emit(JitsiConferenceEvents.USER_LEFT, id, participant);\r\n    }\r\n\r\n    if (this.room !== null) { // Skip if we have left the room already.\r\n        this._maybeStartOrStopP2P(true /* triggered by user left event */);\r\n        this._maybeClearSITimeout();\r\n    }\r\n};\r\n\r\n/**\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.12\r\n * Returns an array containing all media sessions existing in this conference.\r\n *\r\n * @returns {Array<JingleSessionPC>}\r\n */\r\n JitsiConference.prototype.getMediaSessions = function() {\r\n    const sessions = [];\r\n\r\n    this.jvbJingleSession && sessions.push(this.jvbJingleSession);\r\n    this.p2pJingleSession && sessions.push(this.p2pJingleSession);\r\n\r\n    return sessions;\r\n};\r\n\r\n/**\r\n * Designates an event indicating that we were kicked from the XMPP MUC.\r\n * @param {boolean} isSelfPresence - whether it is for local participant\r\n * or another participant.\r\n * @param {string} actorId - the id of the participant who was initiator\r\n * of the kick.\r\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\r\n * this is the id of the participant which was kicked.\r\n */\r\nJitsiConference.prototype.onMemberKicked = function(isSelfPresence, actorId, kickedParticipantId) {\r\n    // This check which be true when we kick someone else. With the introduction of lobby\r\n    // the ChatRoom KICKED event is now also emitted for ourselves (the kicker) so we want to\r\n    // avoid emitting an event where `undefined` kicked someone.\r\n    if (actorId === this.myUserId()) {\r\n        return;\r\n    }\r\n\r\n    const actorParticipant = this.participants[actorId];\r\n\r\n    if (isSelfPresence) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.KICKED, actorParticipant);\r\n\r\n        this.leave();\r\n\r\n        return;\r\n    }\r\n\r\n    const kickedParticipant = this.participants[kickedParticipantId];\r\n\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant);\r\n};\r\n\r\n/**\r\n * Method called on local MUC role change.\r\n * @param {string} role the name of new user's role as defined by XMPP MUC.\r\n */\r\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\r\n    // Emit role changed for local  JID\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\r\n};\r\n\r\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n    participant._role = role;\r\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\r\n};\r\n\r\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\r\n    const id = Strophe.getResourceFromJid(jid);\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        return;\r\n    }\r\n\r\n    if (participant._displayName === displayName) {\r\n        return;\r\n    }\r\n\r\n    participant._displayName = displayName;\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\r\n        id,\r\n        displayName);\r\n};\r\n\r\n/**\r\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\r\n * the conference.\r\n *\r\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\r\n * JitsiConference\r\n */\r\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\r\n    if (track.isP2P && !this.isP2PActive()) {\r\n        logger.info(\r\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\r\n\r\n        return;\r\n    } else if (!track.isP2P && this.isP2PActive()) {\r\n        logger.info(\r\n            'Trying to add remote JVB track, when in P2P - IGNORED');\r\n\r\n        return;\r\n    }\r\n\r\n    const id = track.getParticipantId();\r\n    const participant = this.getParticipantById(id);\r\n\r\n    if (!participant) {\r\n        logger.error(`No participant found for id: ${id}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Add track to JitsiParticipant.\r\n    participant._tracks.push(track);\r\n\r\n    if (this.transcriber) {\r\n        this.transcriber.addTrack(track);\r\n    }\r\n\r\n    const emitter = this.eventEmitter;\r\n\r\n    track.addEventListener(\r\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\r\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\r\n    track.addEventListener(\r\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n        (audioLevel, tpc) => {\r\n            const activeTPC = this.getActivePeerConnection();\r\n\r\n            if (activeTPC === tpc) {\r\n                emitter.emit(\r\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                    id,\r\n                    audioLevel);\r\n            }\r\n        }\r\n    );\r\n\r\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\r\n};\r\n\r\n/**\r\n * Callback called by the Jingle plugin when 'session-answer' is received.\r\n * @param {JingleSessionPC} session the Jingle session for which an answer was\r\n * received.\r\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\r\n    if (this.p2pJingleSession === session) {\r\n        logger.info('P2P setAnswer');\r\n\r\n        this.p2pJingleSession.setAnswer(answer);\r\n        this.eventEmitter.emit(JitsiConferenceEvents._MEDIA_SESSION_STARTED, this.p2pJingleSession);\r\n    }\r\n};\r\n\r\n/**\r\n * Callback called by the Jingle plugin when 'transport-info' is received.\r\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\r\n * received\r\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\r\n * element\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\r\n    if (this.p2pJingleSession === session) {\r\n        logger.info('P2P addIceCandidates');\r\n        this.p2pJingleSession.addIceCandidates(transportInfo);\r\n    }\r\n};\r\n\r\n/**\r\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\r\n * the conference.\r\n *\r\n * @param {JitsiRemoteTrack} removedTrack\r\n */\r\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\r\n    this.getParticipants().forEach(participant => {\r\n        const tracks = participant.getTracks();\r\n\r\n        for (let i = 0; i < tracks.length; i++) {\r\n            if (tracks[i] === removedTrack) {\r\n                // Since the tracks have been compared and are\r\n                // considered equal the result of splice can be ignored.\r\n                participant._tracks.splice(i, 1);\r\n\r\n                this.eventEmitter.emit(\r\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\r\n\r\n                if (this.transcriber) {\r\n                    this.transcriber.removeTrack(removedTrack);\r\n                }\r\n\r\n                break;\r\n            }\r\n        }\r\n    }, this);\r\n};\r\n\r\n/**\r\n * Handles an incoming call event for the P2P jingle session.\r\n */\r\nJitsiConference.prototype._onIncomingCallP2P = function(\r\n        jingleSession,\r\n        jingleOffer) {\r\n\r\n    let rejectReason;\r\n\r\n    if (!browser.supportsP2P()) {\r\n        rejectReason = {\r\n            reason: 'unsupported-applications',\r\n            reasonDescription: 'P2P not supported',\r\n            errorMsg: 'This client does not support P2P connections'\r\n        };\r\n    } else if (!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) {\r\n        rejectReason = {\r\n            reason: 'decline',\r\n            reasonDescription: 'P2P disabled',\r\n            errorMsg: 'P2P mode disabled in the configuration'\r\n        };\r\n    } else if (this.p2pJingleSession) {\r\n        // Reject incoming P2P call (already in progress)\r\n        rejectReason = {\r\n            reason: 'busy',\r\n            reasonDescription: 'P2P already in progress',\r\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\r\n        };\r\n    } else if (!this._shouldBeInP2PMode()) {\r\n        rejectReason = {\r\n            reason: 'decline',\r\n            reasonDescription: 'P2P requirements not met',\r\n            errorMsg: 'Received P2P \"session-initiate\" when should not be in P2P mode'\r\n        };\r\n        Statistics.sendAnalytics(createJingleEvent(ACTION_P2P_DECLINED));\r\n    }\r\n\r\n    if (rejectReason) {\r\n        this._rejectIncomingCall(jingleSession, rejectReason);\r\n    } else {\r\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles an incoming call event.\r\n */\r\nJitsiConference.prototype.onIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer,\r\n        now) {\r\n    // Handle incoming P2P call\r\n    if (jingleSession.isP2P) {\r\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\r\n    } else {\r\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\r\n            const description = 'Rejecting session-initiate from non-focus.';\r\n\r\n            this._rejectIncomingCall(\r\n                jingleSession, {\r\n                    reason: 'security-error',\r\n                    reasonDescription: description,\r\n                    errorMsg: description\r\n                });\r\n\r\n            return;\r\n        }\r\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\r\n    }\r\n};\r\n\r\n/**\r\n * Accepts an incoming call event for the JVB jingle session.\r\n */\r\nJitsiConference.prototype._acceptJvbIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer,\r\n        now) {\r\n\r\n    // Accept incoming call\r\n    this.jvbJingleSession = jingleSession;\r\n    this.room.connectionTimes['session.initiate'] = now;\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    if (this.wasStopped) {\r\n        Statistics.sendAnalyticsAndLog(\r\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\r\n    }\r\n\r\n    const serverRegion\r\n        = $(jingleOffer)\r\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\r\n            .attr('region');\r\n\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\r\n        serverRegion);\r\n\r\n    this._maybeClearSITimeout();\r\n    Statistics.sendAnalytics(createJingleEvent(\r\n        ACTION_JINGLE_SI_RECEIVED,\r\n        {\r\n            p2p: false,\r\n            value: now\r\n        }));\r\n\r\n    try {\r\n        jingleSession.initialize(this.room, this.rtc, this._signalingLayer, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: this._isE2EEEnabled()\r\n        });\r\n    } catch (error) {\r\n        GlobalOnErrorHandler.callErrorHandler(error);\r\n    }\r\n\r\n    // Open a channel with the videobridge.\r\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\r\n\r\n    // Add local tracks to the session\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    try {\r\n        jingleSession.acceptOffer(\r\n            jingleOffer,\r\n            () => {\r\n                // If for any reason invite for the JVB session arrived after\r\n                // the P2P has been established already the media transfer needs\r\n                // to be turned off here.\r\n                if (this.isP2PActive() && this.jvbJingleSession) {\r\n                    this._suspendMediaTransferForJvbConnection();\r\n                }\r\n\r\n                this.eventEmitter.emit(\r\n                    JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n                    jingleSession);\r\n                if (!this.isP2PActive()) {\r\n                    this.eventEmitter.emit(\r\n                        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n                        jingleSession);\r\n                }\r\n            },\r\n            error => {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(\r\n                    'Failed to accept incoming Jingle session', error);\r\n            },\r\n            localTracks\r\n        );\r\n\r\n        // Start callstats as soon as peerconnection is initialized,\r\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\r\n        // happen in case if user doesn't have or denied permission to\r\n        // both camera and microphone.\r\n        logger.info('Starting CallStats for JVB connection...');\r\n        this.statistics.startCallStats(\r\n            this.jvbJingleSession.peerconnection,\r\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\r\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\r\n    } catch (e) {\r\n        GlobalOnErrorHandler.callErrorHandler(e);\r\n        logger.error(e);\r\n    }\r\n};\r\n\r\n/**\r\n * Sets the BridgeChannel.\r\n *\r\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\r\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\r\n * BridgeChannel mode.\r\n * @param {TraceablePeerConnection} pc the peer connection which will be used\r\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\r\n */\r\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\r\n    let wsUrl = null;\r\n    const webSocket\r\n        = $(offerIq)\r\n            .find('>content>transport>web-socket')\r\n            .first();\r\n\r\n    if (webSocket.length === 1) {\r\n        wsUrl = webSocket[0].getAttribute('url');\r\n    }\r\n\r\n    let bridgeChannelType;\r\n\r\n    switch (this.options.config.openBridgeChannel) {\r\n    case 'datachannel':\r\n    case true:\r\n    case undefined:\r\n        bridgeChannelType = 'datachannel';\r\n        break;\r\n    case 'websocket':\r\n        bridgeChannelType = 'websocket';\r\n        break;\r\n    }\r\n\r\n    if (bridgeChannelType === 'datachannel') {\r\n        this.rtc.initializeBridgeChannel(pc, null);\r\n    } else if (bridgeChannelType === 'websocket' && wsUrl) {\r\n        this.rtc.initializeBridgeChannel(null, wsUrl);\r\n    }\r\n};\r\n\r\n/**\r\n * Rejects incoming Jingle call.\r\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\r\n * @param {object} [options]\r\n * @param {string} options.reason the name of the reason element as defined\r\n * by Jingle\r\n * @param {string} options.reasonDescription the reason description which will\r\n * be included in Jingle 'session-terminate' message.\r\n * @param {string} options.errorMsg an error message to be logged on global\r\n * error handler\r\n * @private\r\n */\r\nJitsiConference.prototype._rejectIncomingCall = function(\r\n        jingleSession,\r\n        options) {\r\n    if (options && options.errorMsg) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\r\n    }\r\n\r\n    // Terminate the jingle session with a reason\r\n    jingleSession.terminate(\r\n        null /* success callback => we don't care */,\r\n        error => {\r\n            logger.warn(\r\n                'An error occurred while trying to terminate'\r\n                    + ' invalid Jingle session', error);\r\n        }, {\r\n            reason: options && options.reason,\r\n            reasonDescription: options && options.reasonDescription,\r\n            sendSessionTerminate: true\r\n        });\r\n};\r\n\r\n/**\r\n * Handles the call ended event.\r\n * XXX is this due to the remote side terminating the Jingle session?\r\n *\r\n * @param {JingleSessionPC} jingleSession the jingle session which has been\r\n * terminated.\r\n * @param {String} reasonCondition the Jingle reason condition.\r\n * @param {String|null} reasonText human readable reason text which may provide\r\n * more details about why the call has been terminated.\r\n */\r\nJitsiConference.prototype.onCallEnded = function(\r\n        jingleSession,\r\n        reasonCondition,\r\n        reasonText) {\r\n    logger.info(\r\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\r\n            jingleSession.isP2P}`);\r\n    if (jingleSession === this.jvbJingleSession) {\r\n        this.wasStopped = true;\r\n\r\n        Statistics.sendAnalytics(\r\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\r\n\r\n        // Stop the stats\r\n        if (this.statistics) {\r\n            this.statistics.stopRemoteStats(\r\n                this.jvbJingleSession.peerconnection);\r\n            logger.info('Stopping JVB CallStats');\r\n            this.statistics.stopCallStats(\r\n                this.jvbJingleSession.peerconnection);\r\n        }\r\n\r\n        // Current JVB JingleSession is no longer valid, so set it to null\r\n        this.jvbJingleSession = null;\r\n\r\n        // Let the RTC service do any cleanups\r\n        this.rtc.onCallEnded();\r\n    } else if (jingleSession === this.p2pJingleSession) {\r\n        // It's the responder who decides to enforce JVB mode, so that both\r\n        // initiator and responder are aware if it was intentional.\r\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\r\n            logger.info('In forced JVB 121 mode...');\r\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\r\n        } else if (reasonCondition === 'connectivity-error'\r\n            && reasonText === 'ICE FAILED') {\r\n            // It can happen that the other peer detects ICE failed and\r\n            // terminates the session, before we get the event on our side.\r\n            // But we are able to parse the reason and mark it here.\r\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\r\n        }\r\n        this._stopP2PSession();\r\n    } else {\r\n        logger.error(\r\n            'Received onCallEnded for invalid session',\r\n            jingleSession.sid,\r\n            jingleSession.remoteJid,\r\n            reasonCondition,\r\n            reasonText);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles the suspend detected event. Leaves the room and fires suspended.\r\n * @param {JingleSessionPC} jingleSession\r\n */\r\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\r\n    if (!jingleSession.isP2P) {\r\n        this.leave();\r\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\r\n    }\r\n};\r\n\r\nJitsiConference.prototype.updateDTMFSupport = function() {\r\n    let somebodySupportsDTMF = false;\r\n    const participants = this.getParticipants();\r\n\r\n    // check if at least 1 participant supports DTMF\r\n    for (let i = 0; i < participants.length; i += 1) {\r\n        if (participants[i].supportsDTMF()) {\r\n            somebodySupportsDTMF = true;\r\n            break;\r\n        }\r\n    }\r\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\r\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\r\n            somebodySupportsDTMF);\r\n    }\r\n};\r\n\r\n/**\r\n * Allows to check if there is at least one user in the conference\r\n * that supports DTMF.\r\n * @returns {boolean} true if somebody supports DTMF, false otherwise\r\n */\r\nJitsiConference.prototype.isDTMFSupported = function() {\r\n    return this.somebodySupportsDTMF;\r\n};\r\n\r\n/**\r\n * Returns the local user's ID\r\n * @return {string} local user's ID\r\n */\r\nJitsiConference.prototype.myUserId = function() {\r\n    return (\r\n        this.room && this.room.myroomjid\r\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\r\n            : null);\r\n};\r\n\r\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\r\n    const peerConnection = this.getActivePeerConnection();\r\n\r\n    if (peerConnection) {\r\n        peerConnection.sendTones(tones, duration, pause);\r\n    } else {\r\n        logger.warn('cannot sendTones: no peer connection');\r\n    }\r\n};\r\n\r\n/**\r\n * Starts recording the current conference.\r\n *\r\n * @param {Object} options - Configuration for the recording. See\r\n * {@link Chatroom#startRecording} for more info.\r\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\r\n */\r\nJitsiConference.prototype.startRecording = function(options) {\r\n    if (this.room) {\r\n        return this.recordingManager.startRecording(options);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference is not created yet!'));\r\n};\r\n\r\n/**\r\n * Stop a recording session.\r\n *\r\n * @param {string} sessionID - The ID of the recording session that\r\n * should be stopped.\r\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\r\n */\r\nJitsiConference.prototype.stopRecording = function(sessionID) {\r\n    if (this.room) {\r\n        return this.recordingManager.stopRecording(sessionID);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference is not created yet!'));\r\n};\r\n\r\n/**\r\n * Returns true if the SIP calls are supported and false otherwise\r\n */\r\nJitsiConference.prototype.isSIPCallingSupported = function() {\r\n    if (this.room) {\r\n        return this.room.isSIPCallingSupported();\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n/**\r\n * Dials a number.\r\n * @param number the number\r\n */\r\nJitsiConference.prototype.dial = function(number) {\r\n    if (this.room) {\r\n        return this.room.dial(number);\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        reject(new Error('The conference is not created yet!'));\r\n    });\r\n};\r\n\r\n/**\r\n * Hangup an existing call\r\n */\r\nJitsiConference.prototype.hangup = function() {\r\n    if (this.room) {\r\n        return this.room.hangup();\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        reject(new Error('The conference is not created yet!'));\r\n    });\r\n};\r\n\r\n/**\r\n * Starts the transcription service.\r\n */\r\nJitsiConference.prototype.startTranscriber = function() {\r\n    return this.dial('jitsi_meet_transcribe');\r\n};\r\n\r\n\r\n/**\r\n * Stops the transcription service.\r\n */\r\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\r\n\r\n/**\r\n * Returns the phone number for joining the conference.\r\n */\r\nJitsiConference.prototype.getPhoneNumber = function() {\r\n    if (this.room) {\r\n        return this.room.getPhoneNumber();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the pin for joining the conference with phone.\r\n */\r\nJitsiConference.prototype.getPhonePin = function() {\r\n    if (this.room) {\r\n        return this.room.getPhonePin();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Returns the meeting unique ID if any.\r\n *\r\n * @returns {string|undefined}\r\n */\r\nJitsiConference.prototype.getMeetingUniqueId = function() {\r\n    if (this.room) {\r\n        return this.room.getMeetingId();\r\n    }\r\n};\r\n\r\n/**\r\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\r\n * which connection is currently active.\r\n *\r\n * @return {TraceablePeerConnection|null} null if there isn't any active\r\n * <tt>TraceablePeerConnection</tt> currently available.\r\n * @public (FIXME how to make package local ?)\r\n */\r\nJitsiConference.prototype.getActivePeerConnection = function() {\r\n    if (this.isP2PActive()) {\r\n        return this.p2pJingleSession.peerconnection;\r\n    }\r\n\r\n    return this.jvbJingleSession ? this.jvbJingleSession.peerconnection : null;\r\n};\r\n\r\n/**\r\n * Returns the connection state for the current room. Its ice connection state\r\n * for its session.\r\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\r\n * be converted to \"connected\".\r\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\r\n * peer connection at this time.\r\n */\r\nJitsiConference.prototype.getConnectionState = function() {\r\n    const peerConnection = this.getActivePeerConnection();\r\n\r\n    return peerConnection ? peerConnection.getConnectionState() : null;\r\n};\r\n\r\n/**\r\n * Make all new participants mute their audio/video on join.\r\n * @param policy {Object} object with 2 boolean properties for video and audio:\r\n * @param {boolean} audio if audio should be muted.\r\n * @param {boolean} video if video should be muted.\r\n */\r\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\r\n    if (!this.isModerator()) {\r\n        return;\r\n    }\r\n    this.startMutedPolicy = policy;\r\n    this.room.addToPresence('startmuted', {\r\n        attributes: {\r\n            audio: policy.audio,\r\n            video: policy.video,\r\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\r\n        }\r\n    });\r\n    this.room.sendPresence();\r\n};\r\n\r\n/**\r\n * Returns current start muted policy\r\n * @returns {Object} with 2 properties - audio and video.\r\n */\r\nJitsiConference.prototype.getStartMutedPolicy = function() {\r\n    return this.startMutedPolicy;\r\n};\r\n\r\n/**\r\n * Check if audio is muted on join.\r\n */\r\nJitsiConference.prototype.isStartAudioMuted = function() {\r\n    return this.startAudioMuted;\r\n};\r\n\r\n/**\r\n * Check if video is muted on join.\r\n */\r\nJitsiConference.prototype.isStartVideoMuted = function() {\r\n    return this.startVideoMuted;\r\n};\r\n\r\n/**\r\n * Returns measured connectionTimes.\r\n */\r\nJitsiConference.prototype.getConnectionTimes = function() {\r\n    return this.room.connectionTimes;\r\n};\r\n\r\n/**\r\n * Sets a property for the local participant.\r\n */\r\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\r\n    this.sendCommand(`jitsi_participant_${name}`, { value });\r\n};\r\n\r\n/**\r\n *  Removes a property for the local participant and sends the updated presence.\r\n */\r\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\r\n    this.removeCommand(`jitsi_participant_${name}`);\r\n    this.room.sendPresence();\r\n};\r\n\r\n/**\r\n * Gets a local participant property.\r\n *\r\n * @return value of the local participant property if the tagName exists in the\r\n * list of properties, otherwise returns undefined.\r\n */\r\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\r\n    const property = this.room.presMap.nodes.find(prop =>\r\n        prop.tagName === `jitsi_participant_${name}`\r\n    );\r\n\r\n    return property ? property.value : undefined;\r\n};\r\n\r\n/**\r\n * Sends the given feedback through CallStats if enabled.\r\n *\r\n * @param overallFeedback an integer between 1 and 5 indicating the\r\n * user feedback\r\n * @param detailedFeedback detailed feedback from the user. Not yet used\r\n * @returns {Promise} Resolves if feedback is submitted successfully.\r\n */\r\nJitsiConference.prototype.sendFeedback = function(\r\n        overallFeedback,\r\n        detailedFeedback) {\r\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\r\n};\r\n\r\n/**\r\n * Returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n *\r\n * @returns true if the callstats integration is enabled, otherwise returns\r\n * false.\r\n */\r\nJitsiConference.prototype.isCallstatsEnabled = function() {\r\n    return this.statistics.isCallstatsEnabled();\r\n};\r\n\r\n/**\r\n * Finds the SSRC of a given track\r\n *\r\n * @param track\r\n * @returns {number|undefined} the SSRC of the specificed track, otherwise undefined.\r\n */\r\nJitsiConference.prototype.getSsrcByTrack = function(track) {\r\n    return track.isLocal() ? this.getActivePeerConnection()?.getLocalSSRC(track) : track.getSSRC();\r\n};\r\n\r\n/**\r\n * Handles track attached to container (Calls associateStreamWithVideoTag method\r\n * from statistics module)\r\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\r\n * @param container the container\r\n */\r\nJitsiConference.prototype._onTrackAttach = function(track, container) {\r\n    const isLocal = track.isLocal();\r\n    let ssrc = null;\r\n    const isP2P = track.isP2P;\r\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\r\n    const peerConnection\r\n        = isP2P\r\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\r\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\r\n\r\n    if (isLocal) {\r\n        // Local tracks have SSRC stored on per peer connection basis.\r\n        if (peerConnection) {\r\n            ssrc = peerConnection.getLocalSSRC(track);\r\n        }\r\n    } else {\r\n        ssrc = track.getSSRC();\r\n    }\r\n    if (!container.id || !ssrc || !peerConnection) {\r\n        return;\r\n    }\r\n\r\n    this.statistics.associateStreamWithVideoTag(\r\n        peerConnection,\r\n        ssrc,\r\n        isLocal,\r\n        remoteUserId,\r\n        track.getUsageLabel(),\r\n        container.id);\r\n};\r\n\r\n/**\r\n * Logs an \"application log\" message.\r\n * @param message {string} The message to log. Note that while this can be a\r\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\r\n * log valid JSON strings, with an \"id\" field used for distinguishing between\r\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\r\n */\r\nJitsiConference.prototype.sendApplicationLog = function(message) {\r\n    Statistics.sendLog(message);\r\n};\r\n\r\n/**\r\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\r\n * focus.\r\n * @param mucJid the full MUC address of the user to be checked.\r\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\r\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\r\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\r\n */\r\nJitsiConference.prototype._isFocus = function(mucJid) {\r\n    return this.room ? this.room.isFocus(mucJid) : null;\r\n};\r\n\r\n/**\r\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\r\n */\r\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\r\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\r\n};\r\n\r\n/**\r\n * Sends a message via the data channel.\r\n * @param to {string} the id of the endpoint that should receive the message.\r\n * If \"\" the message will be sent to all participants.\r\n * @param payload {object} the payload of the message.\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\r\n    this.rtc.sendChannelMessage(to, payload);\r\n};\r\n\r\n/**\r\n * Sends a broadcast message via the data channel.\r\n * @param payload {object} the payload of the message.\r\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\r\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\r\n */\r\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\r\n    this.sendEndpointMessage('', payload);\r\n};\r\n\r\n/**\r\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\r\n * broadcasts it to all endpoints in the conference.\r\n * @param {string} to The ID of the endpoint/participant which is to receive\r\n * the message, or '' to broadcast the message to all endpoints in the\r\n * conference.\r\n * @param {string|object} message the message to send. If this is of type\r\n * 'string' it will be sent as a chat message. If it is of type 'object', it\r\n * will be encapsulated in a format recognized by jitsi-meet and converted to\r\n * JSON before being sent.\r\n * @param {boolean} sendThroughVideobridge Whether to send the message through\r\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\r\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\r\n */\r\nJitsiConference.prototype.sendMessage = function(\r\n        message,\r\n        to = '',\r\n        sendThroughVideobridge = false) {\r\n    const messageType = typeof message;\r\n\r\n    // Through videobridge we support only objects. Through XMPP we support\r\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\r\n    // regular chat messages).\r\n    if (messageType !== 'object'\r\n            && (sendThroughVideobridge || messageType !== 'string')) {\r\n        logger.error(`Can not send a message of type ${messageType}`);\r\n\r\n        return;\r\n    }\r\n\r\n    if (sendThroughVideobridge) {\r\n        this.sendEndpointMessage(to, message);\r\n    } else {\r\n        let messageToSend = message;\r\n\r\n        // Name of packet extension of message stanza to send the required\r\n        // message in.\r\n        let elementName = 'body';\r\n\r\n        if (messageType === 'object') {\r\n            elementName = 'json-message';\r\n\r\n            // Mark as valid JSON message if not already\r\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\r\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\r\n            }\r\n\r\n            try {\r\n                messageToSend = JSON.stringify(messageToSend);\r\n            } catch (e) {\r\n                logger.error('Can not send a message, stringify failed: ', e);\r\n\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (to) {\r\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\r\n        } else {\r\n            // Broadcast\r\n            this.sendTextMessage(messageToSend, elementName);\r\n        }\r\n    }\r\n\r\n};\r\n\r\nJitsiConference.prototype.isConnectionInterrupted = function() {\r\n    return this.isP2PActive()\r\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\r\n    if (session.isP2P) {\r\n        this.isP2PConnectionInterrupted = true;\r\n    } else {\r\n        this.isJvbConnectionInterrupted = true;\r\n    }\r\n    if (session.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\r\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\r\n    // eventually come up with the new offer (at least for the time being).\r\n    if (session.isP2P) {\r\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\r\n        // and \"bad\" connection\r\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\r\n\r\n        if (this.p2pJingleSession) {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createP2PEvent(\r\n                    ACTION_P2P_FAILED,\r\n                    {\r\n                        initiator: this.p2pJingleSession.isInitiator\r\n                    }));\r\n\r\n        }\r\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\r\n    } else if (session && this.jvbJingleSession === session) {\r\n        this._delayedIceFailed = new IceFailedHandling(this);\r\n        this._delayedIceFailed.start(session);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\r\n * @param {JingleSessionPC} session\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\r\n    if (session.isP2P) {\r\n        this.isP2PConnectionInterrupted = false;\r\n    } else {\r\n        this.isJvbConnectionInterrupted = false;\r\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\r\n    }\r\n\r\n    if (session.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\r\n    }\r\n};\r\n\r\n/**\r\n * Accept incoming P2P Jingle call.\r\n * @param {JingleSessionPC} jingleSession the session instance\r\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\r\n * @private\r\n */\r\nJitsiConference.prototype._acceptP2PIncomingCall = function(\r\n        jingleSession,\r\n        jingleOffer) {\r\n    this.isP2PConnectionInterrupted = false;\r\n\r\n    // Accept the offer\r\n    this.p2pJingleSession = jingleSession;\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    this.p2pJingleSession.initialize(\r\n        this.room,\r\n        this.rtc,\r\n        this._signalingLayer, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: this._isE2EEEnabled()\r\n        });\r\n\r\n    logger.info('Starting CallStats for P2P connection...');\r\n\r\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\r\n\r\n    const participant = this.participants[remoteID];\r\n\r\n    if (participant) {\r\n        remoteID = participant.getStatsID() || remoteID;\r\n    }\r\n\r\n    this.statistics.startCallStats(\r\n        this.p2pJingleSession.peerconnection,\r\n        remoteID);\r\n\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    this.p2pJingleSession.acceptOffer(\r\n        jingleOffer,\r\n        () => {\r\n            logger.debug('Got RESULT for P2P \"session-accept\"');\r\n\r\n            this.eventEmitter.emit(\r\n                JitsiConferenceEvents._MEDIA_SESSION_STARTED,\r\n                this.p2pJingleSession);\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to accept incoming P2P Jingle session', error);\r\n        },\r\n        localTracks);\r\n};\r\n\r\n/**\r\n * Adds remote tracks to the conference associated with the JVB session.\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteJVBTracks = function() {\r\n    this._addRemoteTracks(\r\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Adds remote tracks to the conference associated with the P2P session.\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteP2PTracks = function() {\r\n    this._addRemoteTracks(\r\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Generates fake \"remote track added\" events for given Jingle session.\r\n * @param {string} logName the session's nickname which will appear in log\r\n * messages.\r\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\r\n * @private\r\n */\r\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\r\n    for (const track of remoteTracks) {\r\n        logger.info(`Adding remote ${logName} track: ${track}`);\r\n        this.onRemoteTrackAdded(track);\r\n    }\r\n};\r\n\r\n/**\r\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\r\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\r\n * the P2P connection if the event comes from the P2P session.\r\n * @param {JingleSessionPC} jingleSession the session instance.\r\n * @private\r\n */\r\nJitsiConference.prototype._onIceConnectionEstablished = function(\r\n        jingleSession) {\r\n    if (this.p2pJingleSession !== null) {\r\n        // store the establishment time of the p2p session as a field of the\r\n        // JitsiConference because the p2pJingleSession might get disposed (thus\r\n        // the value is lost).\r\n        this.p2pEstablishmentDuration\r\n            = this.p2pJingleSession.establishmentDuration;\r\n    }\r\n\r\n    if (this.jvbJingleSession !== null) {\r\n        this.jvbEstablishmentDuration\r\n            = this.jvbJingleSession.establishmentDuration;\r\n    }\r\n\r\n    let done = false;\r\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\r\n\r\n    // We don't care about the JVB case, there's nothing to be done\r\n    if (!jingleSession.isP2P) {\r\n        done = true;\r\n    } else if (this.p2pJingleSession !== jingleSession) {\r\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\r\n\r\n        done = true;\r\n    } else if (!jingleSession.isInitiator\r\n        && typeof forceJVB121Ratio === 'number'\r\n        && Math.random() < forceJVB121Ratio) {\r\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\r\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\r\n        this._stopP2PSession('decline', 'force JVB121');\r\n\r\n        done = true;\r\n    }\r\n\r\n    if (!isNaN(this.p2pEstablishmentDuration)\r\n        && !isNaN(this.jvbEstablishmentDuration)) {\r\n        const establishmentDurationDiff\r\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\r\n\r\n        Statistics.sendAnalytics(\r\n            ICE_ESTABLISHMENT_DURATION_DIFF,\r\n            { value: establishmentDurationDiff });\r\n    }\r\n\r\n    if (jingleSession.isP2P === this.isP2PActive()) {\r\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\r\n    }\r\n\r\n    if (done) {\r\n\r\n        return;\r\n    }\r\n\r\n    // Update P2P status and emit events\r\n    this._setP2PStatus(true);\r\n\r\n    // Remove remote tracks\r\n    if (this.jvbJingleSession) {\r\n        this._removeRemoteJVBTracks();\r\n    } else {\r\n        logger.info('Not removing remote JVB tracks - no session yet');\r\n    }\r\n\r\n    this._addRemoteP2PTracks();\r\n\r\n    // Stop media transfer over the JVB connection\r\n    if (this.jvbJingleSession) {\r\n        this._suspendMediaTransferForJvbConnection();\r\n    }\r\n\r\n    logger.info('Starting remote stats with p2p connection');\r\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\r\n\r\n    Statistics.sendAnalyticsAndLog(\r\n        createP2PEvent(\r\n            ACTION_P2P_ESTABLISHED,\r\n            {\r\n                initiator: this.p2pJingleSession.isInitiator\r\n            }));\r\n\r\n};\r\n\r\n/**\r\n * Called when the chat room reads a new list of properties from jicofo's\r\n * presence. The properties may have changed, but they don't have to.\r\n *\r\n * @param {Object} properties - The properties keyed by the property name\r\n * ('key').\r\n * @private\r\n */\r\nJitsiConference.prototype._updateProperties = function(properties = {}) {\r\n    const changed = !isEqual(properties, this.properties);\r\n\r\n    this.properties = properties;\r\n    if (changed) {\r\n        this.eventEmitter.emit(\r\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\r\n            this.properties);\r\n\r\n        // Some of the properties need to be added to analytics events.\r\n        const analyticsKeys = [\r\n\r\n            // The number of jitsi-videobridge instances currently used for the\r\n            // conference.\r\n            'bridge-count',\r\n\r\n            // The conference creation time (set by jicofo).\r\n            'created-ms',\r\n            'octo-enabled'\r\n        ];\r\n\r\n        analyticsKeys.forEach(key => {\r\n            if (properties[key] !== undefined) {\r\n                Statistics.analytics.addPermanentProperties({\r\n                    [key.replace('-', '_')]: properties[key]\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\n/**\r\n * Gets a conference property with a given key.\r\n *\r\n * @param {string} key - The key.\r\n * @returns {*} The value\r\n */\r\nJitsiConference.prototype.getProperty = function(key) {\r\n    return this.properties[key];\r\n};\r\n\r\n/**\r\n * Clears the deferred start P2P task if it has been scheduled.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\r\n    if (this.deferredStartP2PTask) {\r\n        logger.info('Cleared deferred start P2P task');\r\n        clearTimeout(this.deferredStartP2PTask);\r\n        this.deferredStartP2PTask = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Removes from the conference remote tracks associated with the JVB\r\n * connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\r\n    this._removeRemoteTracks(\r\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Removes from the conference remote tracks associated with the P2P\r\n * connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\r\n    this._removeRemoteTracks(\r\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\r\n};\r\n\r\n/**\r\n * Generates fake \"remote track removed\" events for given Jingle session.\r\n * @param {string} sessionNickname the session's nickname which will appear in\r\n * log messages.\r\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\r\n * @private\r\n */\r\nJitsiConference.prototype._removeRemoteTracks = function(\r\n        sessionNickname,\r\n        remoteTracks) {\r\n    for (const track of remoteTracks) {\r\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\r\n        this.onRemoteTrackRemoved(track);\r\n    }\r\n};\r\n\r\n/**\r\n * Resumes media transfer over the JVB connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\r\n    logger.info('Resuming media transfer over the JVB connection...');\r\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\r\n        () => {\r\n            logger.info('Resumed media transfer over the JVB connection!');\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to resume media transfer over the JVB connection:',\r\n                error);\r\n        });\r\n};\r\n\r\n/**\r\n * Sets new P2P status and updates some events/states hijacked from\r\n * the <tt>JitsiConference</tt>.\r\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\r\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\r\n * @private\r\n */\r\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\r\n    if (this.p2p === newStatus) {\r\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\r\n\r\n        return;\r\n    }\r\n    this.p2p = newStatus;\r\n    if (newStatus) {\r\n        logger.info('Peer to peer connection established!');\r\n\r\n        // When we end up in a valid P2P session need to reset the properties\r\n        // in case they have persisted, after session with another peer.\r\n        Statistics.analytics.addPermanentProperties({\r\n            p2pFailed: false,\r\n            forceJvb121: false\r\n        });\r\n\r\n        // Sync up video transfer active in case p2pJingleSession not existed\r\n        // when the lastN value was being adjusted.\r\n        const isVideoActive = this.rtc.getLastN() !== 0;\r\n\r\n        this.p2pJingleSession\r\n            .setMediaTransferActive(true, isVideoActive)\r\n            .catch(error => {\r\n                logger.error(\r\n                    'Failed to sync up P2P video transfer status'\r\n                        + `(${isVideoActive})`, error);\r\n            });\r\n    } else {\r\n        logger.info('Peer to peer connection closed!');\r\n    }\r\n\r\n    // Put the JVB connection on hold/resume\r\n    if (this.jvbJingleSession) {\r\n        this.statistics.sendConnectionResumeOrHoldEvent(\r\n            this.jvbJingleSession.peerconnection, !newStatus);\r\n    }\r\n\r\n    // Clear dtmfManager, so that it can be recreated with new connection\r\n    this.dtmfManager = null;\r\n\r\n    // Update P2P status\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents.P2P_STATUS,\r\n        this,\r\n        this.p2p);\r\n    this.eventEmitter.emit(\r\n        JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\r\n        this._getActiveMediaSession());\r\n\r\n    // Refresh connection interrupted/restored\r\n    this.eventEmitter.emit(\r\n        this.isConnectionInterrupted()\r\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\r\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\r\n};\r\n\r\n/**\r\n * Starts new P2P session.\r\n * @param {string} remoteJid the JID of the remote participant\r\n * @private\r\n */\r\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\r\n    this._maybeClearDeferredStartP2P();\r\n    if (this.p2pJingleSession) {\r\n        logger.error('P2P session already started!');\r\n\r\n        return;\r\n    }\r\n\r\n    this.isP2PConnectionInterrupted = false;\r\n    this.p2pJingleSession\r\n        = this.xmpp.connection.jingle.newP2PJingleSession(\r\n            this.room.myroomjid,\r\n            remoteJid);\r\n    logger.info(\r\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\r\n    this._sendConferenceJoinAnalyticsEvent();\r\n\r\n    this.p2pJingleSession.initialize(\r\n        this.room,\r\n        this.rtc,\r\n        this._signalingLayer, {\r\n            ...this.options.config,\r\n            enableInsertableStreams: this._isE2EEEnabled()\r\n        });\r\n\r\n    logger.info('Starting CallStats for P2P connection...');\r\n\r\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\r\n\r\n    const participant = this.participants[remoteID];\r\n\r\n    if (participant) {\r\n        remoteID = participant.getStatsID() || remoteID;\r\n    }\r\n\r\n    this.statistics.startCallStats(\r\n        this.p2pJingleSession.peerconnection,\r\n        remoteID);\r\n\r\n    // NOTE one may consider to start P2P with the local tracks detached,\r\n    // but no data will be sent until ICE succeeds anyway. And we switch\r\n    // immediately once the P2P ICE connects.\r\n    const localTracks = this.getLocalTracks();\r\n\r\n    this.p2pJingleSession.invite(localTracks);\r\n};\r\n\r\n/**\r\n * Suspends media transfer over the JVB connection.\r\n * @private\r\n */\r\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\r\n    logger.info('Suspending media transfer over the JVB connection...');\r\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\r\n        () => {\r\n            logger.info('Suspended media transfer over the JVB connection !');\r\n        },\r\n        error => {\r\n            logger.error(\r\n                'Failed to suspend media transfer over the JVB connection:',\r\n                error);\r\n        });\r\n};\r\n\r\n/**\r\n * Method when called will decide whether it's the time to start or stop\r\n * the P2P session.\r\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\r\n * originates from the user left event.\r\n * @private\r\n */\r\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\r\n    if (!browser.supportsP2P()\r\n        || !this.isP2PEnabled()\r\n        || this.isP2PTestModeEnabled()) {\r\n        logger.info('Auto P2P disabled');\r\n\r\n        return;\r\n    }\r\n    const peers = this.getParticipants();\r\n    const peerCount = peers.length;\r\n\r\n    // FIXME 1 peer and it must *support* P2P switching\r\n    const shouldBeInP2P = this._shouldBeInP2PMode();\r\n\r\n    // Clear deferred \"start P2P\" task\r\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\r\n        this._maybeClearDeferredStartP2P();\r\n    }\r\n\r\n    // Start peer to peer session\r\n    if (!this.p2pJingleSession && shouldBeInP2P) {\r\n        const peer = peerCount && peers[0];\r\n\r\n\r\n        const myId = this.myUserId();\r\n        const peersId = peer.getId();\r\n\r\n        if (myId > peersId) {\r\n            logger.debug(\r\n                'I\\'m the bigger peersId - '\r\n                + 'the other peer should start P2P', myId, peersId);\r\n\r\n            return;\r\n        } else if (myId === peersId) {\r\n            logger.error('The same IDs ? ', myId, peersId);\r\n\r\n            return;\r\n        }\r\n\r\n        const jid = peer.getJid();\r\n\r\n        if (userLeftEvent) {\r\n            if (this.deferredStartP2PTask) {\r\n                logger.error('Deferred start P2P task\\'s been set already!');\r\n\r\n                return;\r\n            }\r\n            logger.info(\r\n                `Will start P2P with: ${jid} after ${\r\n                    this.backToP2PDelay} seconds...`);\r\n            this.deferredStartP2PTask = setTimeout(\r\n                this._startP2PSession.bind(this, jid),\r\n                this.backToP2PDelay * 1000);\r\n        } else {\r\n            logger.info(`Will start P2P with: ${jid}`);\r\n            this._startP2PSession(jid);\r\n        }\r\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\r\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\r\n\r\n        // Log that there will be a switch back to the JVB connection\r\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\r\n        }\r\n        this._stopP2PSession();\r\n    }\r\n};\r\n\r\n/**\r\n * Tells whether or not this conference should be currently in the P2P mode.\r\n *\r\n * @private\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype._shouldBeInP2PMode = function() {\r\n    const peers = this.getParticipants();\r\n    const peerCount = peers.length;\r\n    const hasBotPeer = peers.find(p => p._botType === 'poltergeist') !== undefined;\r\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\r\n\r\n    logger.debug(`P2P? peerCount: ${peerCount}, hasBotPeer: ${hasBotPeer} => ${shouldBeInP2P}`);\r\n\r\n    return shouldBeInP2P;\r\n};\r\n\r\n/**\r\n * Stops the current P2P session.\r\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\r\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\r\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\r\n * description that will be included in the session terminate message\r\n * @private\r\n */\r\nJitsiConference.prototype._stopP2PSession = function(\r\n        reason,\r\n        reasonDescription) {\r\n    if (!this.p2pJingleSession) {\r\n        logger.error('No P2P session to be stopped!');\r\n\r\n        return;\r\n    }\r\n\r\n    const wasP2PEstablished = this.isP2PActive();\r\n\r\n    // Swap remote tracks, but only if the P2P has been fully established\r\n    if (wasP2PEstablished) {\r\n        if (this.jvbJingleSession) {\r\n            this._resumeMediaTransferForJvbConnection();\r\n        }\r\n\r\n        // Remove remote P2P tracks\r\n        this._removeRemoteP2PTracks();\r\n    }\r\n\r\n    // Stop P2P stats\r\n    logger.info('Stopping remote stats for P2P connection');\r\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\r\n    logger.info('Stopping CallStats for P2P connection');\r\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\r\n\r\n    this.p2pJingleSession.terminate(\r\n        () => {\r\n            logger.info('P2P session terminate RESULT');\r\n        },\r\n        error => {\r\n            // Because both initiator and responder are simultaneously\r\n            // terminating their JingleSessions in case of the 'to JVB switch'\r\n            // when 3rd participant joins, both will dispose their sessions and\r\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\r\n            // want to log this as an error since it's expected behaviour.\r\n            //\r\n            // We want them both to terminate, because in case of initiator's\r\n            // crash the responder would stay in P2P mode until ICE fails which\r\n            // could take up to 20 seconds.\r\n            //\r\n            // NOTE lack of 'reason' is considered as graceful session terminate\r\n            // where both initiator and responder terminate their sessions\r\n            // simultaneously.\r\n            if (reason) {\r\n                logger.error(\r\n                    'An error occurred while trying to terminate'\r\n                        + ' P2P Jingle session', error);\r\n            }\r\n        }, {\r\n            reason: reason ? reason : 'success',\r\n            reasonDescription: reasonDescription\r\n                ? reasonDescription : 'Turing off P2P session',\r\n            sendSessionTerminate: this.room\r\n                && this.getParticipantById(\r\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\r\n        });\r\n\r\n    this.p2pJingleSession = null;\r\n\r\n    // Update P2P status and other affected events/states\r\n    this._setP2PStatus(false);\r\n\r\n    if (wasP2PEstablished) {\r\n        // Add back remote JVB tracks\r\n        if (this.jvbJingleSession) {\r\n            this._addRemoteJVBTracks();\r\n        } else {\r\n            logger.info('Not adding remote JVB tracks - no session yet');\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Updates room presence if needed and send the packet in case of a modification.\r\n * @param {JingleSessionPC} jingleSession the session firing the event, contains the peer connection which\r\n * tracks we will check.\r\n * @param {Object|null} ctx a context object we can distinguish multiple calls of the same pass of updating tracks.\r\n */\r\nJitsiConference.prototype._updateRoomPresence = function(jingleSession, ctx) {\r\n    if (!jingleSession) {\r\n        return;\r\n    }\r\n\r\n    // skips sending presence twice for the same pass of updating ssrcs\r\n    if (ctx) {\r\n        if (ctx.skip) {\r\n            return;\r\n        }\r\n        ctx.skip = true;\r\n    }\r\n\r\n    let presenceChanged = false;\r\n    let muteStatusChanged, videoTypeChanged;\r\n    const localTracks = this.getLocalTracks();\r\n    const localAudioTracks = jingleSession.peerconnection.getLocalTracks(MediaType.AUDIO);\r\n    const localVideoTracks = jingleSession.peerconnection.getLocalTracks(MediaType.VIDEO);\r\n\r\n    // Set presence for all the available local tracks.\r\n    for (const track of localTracks) {\r\n        muteStatusChanged = this._setTrackMuteStatus(track.getType(), track, track.isMuted());\r\n        if (track.getType() === MediaType.VIDEO) {\r\n            videoTypeChanged = this._setNewVideoType(track);\r\n        }\r\n        presenceChanged = muteStatusChanged || videoTypeChanged;\r\n    }\r\n\r\n    // Set the presence in the legacy format if there are no local tracks and multi stream support is not enabled.\r\n    if (!FeatureFlags.isMultiStreamSupportEnabled()) {\r\n        let audioMuteStatusChanged, videoMuteStatusChanged;\r\n\r\n        if (!localAudioTracks?.length) {\r\n            audioMuteStatusChanged = this._setTrackMuteStatus(MediaType.AUDIO, undefined, true);\r\n        }\r\n        if (!localVideoTracks?.length) {\r\n            videoMuteStatusChanged = this._setTrackMuteStatus(MediaType.VIDEO, undefined, true);\r\n            videoTypeChanged = this._setNewVideoType();\r\n        }\r\n\r\n        presenceChanged = presenceChanged || audioMuteStatusChanged || videoMuteStatusChanged || videoTypeChanged;\r\n    }\r\n\r\n    presenceChanged && this.room.sendPresence();\r\n};\r\n\r\n/**\r\n * Checks whether or not the conference is currently in the peer to peer mode.\r\n * Being in peer to peer mode means that the direct connection has been\r\n * established and the P2P connection is being used for media transmission.\r\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\r\n */\r\nJitsiConference.prototype.isP2PActive = function() {\r\n    return this.p2p;\r\n};\r\n\r\n/**\r\n * Returns the current ICE state of the P2P connection.\r\n * NOTE: method is used by the jitsi-meet-torture tests.\r\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\r\n * no P2P connection.\r\n */\r\nJitsiConference.prototype.getP2PConnectionState = function() {\r\n    if (this.isP2PActive()) {\r\n        return this.p2pJingleSession.peerconnection.getConnectionState();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n\r\n/**\r\n * Manually starts new P2P session (should be used only in the tests).\r\n */\r\nJitsiConference.prototype.startP2PSession = function() {\r\n    const peers = this.getParticipants();\r\n\r\n    // Start peer to peer session\r\n    if (peers.length === 1) {\r\n        const peerJid = peers[0].getJid();\r\n\r\n        this._startP2PSession(peerJid);\r\n    } else {\r\n        throw new Error(\r\n            'There must be exactly 1 participant to start the P2P session !');\r\n    }\r\n};\r\n\r\n/**\r\n * Manually stops the current P2P session (should be used only in the tests)\r\n */\r\nJitsiConference.prototype.stopP2PSession = function() {\r\n    this._stopP2PSession();\r\n};\r\n\r\n/**\r\n * Get a summary of how long current participants have been the dominant speaker\r\n * @returns {object}\r\n */\r\nJitsiConference.prototype.getSpeakerStats = function() {\r\n    return this.speakerStatsCollector.getStats();\r\n};\r\n\r\n/**\r\n * Sets the maximum video size the local participant should receive from remote\r\n * participants.\r\n *\r\n * @param {number} maxFrameHeight - the maximum frame height, in pixels,\r\n * this receiver is willing to receive.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.setReceiverVideoConstraint = function(maxFrameHeight) {\r\n    this.qualityController.setPreferredReceiveMaxFrameHeight(maxFrameHeight);\r\n};\r\n\r\n/**\r\n * Sets the maximum video size the local participant should send to remote\r\n * participants.\r\n * @param {number} maxFrameHeight - The user preferred max frame height.\r\n * @returns {Promise} promise that will be resolved when the operation is\r\n * successful and rejected otherwise.\r\n */\r\nJitsiConference.prototype.setSenderVideoConstraint = function(maxFrameHeight) {\r\n    return this.qualityController.setPreferredSendMaxFrameHeight(maxFrameHeight);\r\n};\r\n\r\n/**\r\n * Creates a video SIP GW session and returns it if service is enabled. Before\r\n * creating a session one need to check whether video SIP GW service is\r\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\r\n * if there are available nodes to serve this request, after creating the\r\n * session those nodes can be taken and the request about using the\r\n * created session can fail.\r\n *\r\n * @param {string} sipAddress - The sip address to be used.\r\n * @param {string} displayName - The display name to be used for this session.\r\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\r\n * initialised and there is no room.\r\n */\r\nJitsiConference.prototype.createVideoSIPGWSession\r\n    = function(sipAddress, displayName) {\r\n        if (!this.room) {\r\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\r\n        }\r\n\r\n        return this.videoSIPGWHandler\r\n            .createVideoSIPGWSession(sipAddress, displayName);\r\n    };\r\n\r\n/**\r\n * Sends a conference.join analytics event.\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype._sendConferenceJoinAnalyticsEvent = function() {\r\n    const meetingId = this.getMeetingUniqueId();\r\n\r\n    if (this._conferenceJoinAnalyticsEventSent || !meetingId || this.getActivePeerConnection() === null) {\r\n        return;\r\n    }\r\n\r\n    Statistics.sendAnalytics(createConferenceEvent('joined', {\r\n        meetingId,\r\n        participantId: `${meetingId}.${this._statsCurrentId}`\r\n    }));\r\n    this._conferenceJoinAnalyticsEventSent = Date.now();\r\n};\r\n\r\n/**\r\n * Sends conference.left analytics event.\r\n * @private\r\n */\r\nJitsiConference.prototype._sendConferenceLeftAnalyticsEvent = function() {\r\n    const meetingId = this.getMeetingUniqueId();\r\n\r\n    if (!meetingId || !this._conferenceJoinAnalyticsEventSent) {\r\n\r\n        return;\r\n    }\r\n\r\n    Statistics.sendAnalytics(createConferenceEvent('left', {\r\n        meetingId,\r\n        participantId: `${meetingId}.${this._statsCurrentId}`,\r\n        stats: {\r\n            duration: Math.floor((Date.now() - this._conferenceJoinAnalyticsEventSent) / 1000),\r\n            perf: this.getPerformanceStats()\r\n        }\r\n    }));\r\n};\r\n\r\n/**\r\n * Restarts all active media sessions.\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype._restartMediaSessions = function() {\r\n    if (this.p2pJingleSession) {\r\n        this.stopP2PSession();\r\n    }\r\n\r\n    if (this.jvbJingleSession) {\r\n        this.jvbJingleSession.terminate(\r\n            null /* success callback => we don't care */,\r\n            error => {\r\n                logger.warn('An error occurred while trying to terminate the JVB session', error);\r\n            }, {\r\n                reason: 'success',\r\n                reasonDescription: 'restart required',\r\n                requestRestart: true,\r\n                sendSessionTerminate: true\r\n            });\r\n    }\r\n\r\n    this._maybeStartOrStopP2P(false);\r\n};\r\n\r\n/**\r\n * Returns whether End-To-End encryption is enabled.\r\n *\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype._isE2EEEnabled = function() {\r\n    return this._e2eEncryption && this._e2eEncryption.isEnabled();\r\n};\r\n\r\n/**\r\n * Returns whether End-To-End encryption is supported. Note that not all participants\r\n * in the conference may support it.\r\n *\r\n * @returns {boolean}\r\n */\r\nJitsiConference.prototype.isE2EESupported = function() {\r\n    return E2EEncryption.isSupported(this.options.config);\r\n};\r\n\r\n/**\r\n * Enables / disables End-to-End encryption.\r\n *\r\n * @param {boolean} enabled whether to enable E2EE or not.\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.toggleE2EE = function(enabled) {\r\n    if (!this.isE2EESupported()) {\r\n        logger.warn('Cannot enable / disable E2EE: platform is not supported.');\r\n\r\n        return;\r\n    }\r\n\r\n    this._e2eEncryption.setEnabled(enabled);\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if lobby support is enabled in the backend.\r\n *\r\n * @returns {boolean} whether lobby is supported in the backend.\r\n */\r\nJitsiConference.prototype.isLobbySupported = function() {\r\n    return Boolean(this.room && this.room.getLobby().isSupported());\r\n};\r\n\r\n/**\r\n * Returns <tt>true</tt> if the room has members only enabled.\r\n *\r\n * @returns {boolean} whether conference room is members only.\r\n */\r\nJitsiConference.prototype.isMembersOnly = function() {\r\n    return Boolean(this.room && this.room.membersOnlyEnabled);\r\n};\r\n\r\n/**\r\n * Enables lobby by moderators\r\n *\r\n * @returns {Promise} resolves when lobby room is joined or rejects with the error.\r\n */\r\nJitsiConference.prototype.enableLobby = function() {\r\n    if (this.room && this.isModerator()) {\r\n        return this.room.getLobby().enable();\r\n    }\r\n\r\n    return Promise.reject(\r\n        new Error('The conference not started or user is not moderator'));\r\n};\r\n\r\n/**\r\n * Disabled lobby by moderators\r\n *\r\n * @returns {void}\r\n */\r\nJitsiConference.prototype.disableLobby = function() {\r\n    if (this.room && this.isModerator()) {\r\n        this.room.getLobby().disable();\r\n    }\r\n};\r\n\r\n/**\r\n * Joins the lobby room with display name and optional email or with a shared password to skip waiting.\r\n *\r\n * @param {string} displayName Display name should be set to show it to moderators.\r\n * @param {string} email Optional email is used to present avatar to the moderator.\r\n * @returns {Promise<never>}\r\n */\r\nJitsiConference.prototype.joinLobby = function(displayName, email) {\r\n    if (this.room) {\r\n        return this.room.getLobby().join(displayName, email);\r\n    }\r\n\r\n    return Promise.reject(new Error('The conference not started'));\r\n};\r\n\r\n/**\r\n * Denies an occupant in the lobby room access to the conference.\r\n * @param {string} id The participant id.\r\n */\r\nJitsiConference.prototype.lobbyDenyAccess = function(id) {\r\n    if (this.room) {\r\n        this.room.getLobby().denyAccess(id);\r\n    }\r\n};\r\n\r\n/**\r\n * Approves the request to join the conference to a participant waiting in the lobby.\r\n *\r\n * @param {string} id The participant id.\r\n */\r\nJitsiConference.prototype.lobbyApproveAccess = function(id) {\r\n    if (this.room) {\r\n        this.room.getLobby().approveAccess(id);\r\n    }\r\n};\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport RTCEvents from './service/RTC/RTCEvents';\r\nimport VideoType from './service/RTC/VideoType';\r\nimport AuthenticationEvents\r\n    from './service/authentication/AuthenticationEvents';\r\nimport {\r\n    ACTION_JINGLE_SA_TIMEOUT,\r\n    createBridgeDownEvent,\r\n    createConnectionStageReachedEvent,\r\n    createFocusLeftEvent,\r\n    createJingleEvent,\r\n    createRemotelyMutedEvent\r\n} from './service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from './service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Setups all event listeners related to conference\r\n * @param conference {JitsiConference} the conference\r\n */\r\nexport default function JitsiConferenceEventManager(conference) {\r\n    this.conference = conference;\r\n    this.xmppListeners = {};\r\n\r\n    // Listeners related to the conference only\r\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\r\n        track => {\r\n            if (!track.isLocal() || !conference.statistics) {\r\n                return;\r\n            }\r\n            const session\r\n                = track.isP2P\r\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\r\n\r\n            // TPC will be null, before the conference starts, but the event\r\n            // still should be queued\r\n            const tpc = (session && session.peerconnection) || null;\r\n\r\n            conference.statistics.sendMuteEvent(\r\n                tpc,\r\n                track.isMuted(),\r\n                track.getType());\r\n        });\r\n}\r\n\r\n/**\r\n * Setups event listeners related to conference.chatRoom\r\n */\r\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\r\n    const conference = this.conference;\r\n    const chatRoom = conference.room;\r\n\r\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\r\n        this.conference.eventEmitter);\r\n\r\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\r\n        if (!jingleSession.isP2P) {\r\n            // If using DataChannel as bridge channel, it must be closed\r\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\r\n            // event for the channel established with the new bridge.\r\n            // TODO: This may be bypassed when using a WebSocket as bridge\r\n            // channel.\r\n            conference.rtc.closeBridgeChannel();\r\n        }\r\n\r\n        // else: there are no DataChannels in P2P session (at least for now)\r\n    });\r\n\r\n    chatRoom.addListener(XMPPEvents.PARTICIPANT_FEATURES_CHANGED, (from, features) => {\r\n        const participant = conference.getParticipantById(Strophe.getResourceFromJid(from));\r\n\r\n        if (participant) {\r\n            participant.setFeatures(features);\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED, participant);\r\n        }\r\n    });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.ICE_RESTART_SUCCESS,\r\n        (jingleSession, offerIq) => {\r\n            // The JVB data chanel needs to be reopened in case the conference\r\n            // has been moved to a new bridge.\r\n            !jingleSession.isP2P\r\n                && conference._setBridgeChannel(\r\n                    offerIq, jingleSession.peerconnection);\r\n        });\r\n\r\n\r\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\r\n        actor => {\r\n            // TODO: Add a way to differentiate between commands which caused\r\n            // us to mute and those that did not change our state (i.e. we were\r\n            // already muted).\r\n            Statistics.sendAnalytics(createRemotelyMutedEvent());\r\n\r\n            conference.mutedByFocusActor = actor;\r\n\r\n            // set isMutedByFocus when setAudioMute Promise ends\r\n            conference.rtc.setAudioMute(true).then(\r\n                () => {\r\n                    conference.isMutedByFocus = true;\r\n                    conference.mutedByFocusActor = null;\r\n                })\r\n                .catch(\r\n                    error => {\r\n                        conference.mutedByFocusActor = null;\r\n                        logger.warn(\r\n                            'Error while audio muting due to focus request', error);\r\n                    });\r\n        }\r\n    );\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\r\n        JitsiConferenceEvents.SUBJECT_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\r\n        JitsiConferenceEvents.CONFERENCE_JOINED);\r\n\r\n    // send some analytics events\r\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\r\n        () => {\r\n            this.conference.isJvbConnectionInterrupted = false;\r\n\r\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\r\n                const event\r\n                    = createConnectionStageReachedEvent(\r\n                        `conference_${key}`,\r\n                        { value: chatRoom.connectionTimes[key] });\r\n\r\n                Statistics.sendAnalytics(event);\r\n            });\r\n\r\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\r\n                const event\r\n                    = createConnectionStageReachedEvent(\r\n                        `xmpp_${key}`,\r\n                        { value: chatRoom.xmpp.connectionTimes[key] });\r\n\r\n                Statistics.sendAnalytics(event);\r\n            });\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\r\n        if (!session.isP2P) {\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n        }\r\n    });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONNECTION_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONNECTION_ERROR);\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.MEMBERS_ONLY_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\r\n    chatRoom.addListener(\r\n        XMPPEvents.BRIDGE_DOWN,\r\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.RESERVATION_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\r\n\r\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\r\n        jingleSession => {\r\n            conference._onIceConnectionFailed(jingleSession);\r\n        });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\r\n        JitsiConferenceEvents.CONFERENCE_ERROR,\r\n        JitsiConferenceErrors.CHAT_ERROR);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\r\n\r\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\r\n        () => {\r\n            Statistics.sendAnalytics(createFocusLeftEvent());\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.FOCUS_LEFT);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\r\n        jingleSession => {\r\n            Statistics.sendAnalyticsAndLog(\r\n                createJingleEvent(\r\n                    ACTION_JINGLE_SA_TIMEOUT,\r\n                    { p2p: jingleSession.isP2P }));\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.RECORDER_STATE_CHANGED,\r\n        (session, jid) => {\r\n\r\n            if (jid) {\r\n                const participant = conference.getParticipantById(\r\n                    Strophe.getResourceFromJid(jid));\r\n\r\n                if (session.getStatus() === 'off') {\r\n                    session.setTerminator(participant);\r\n                } else if (session.getStatus() === 'on') {\r\n                    session.setInitiator(participant);\r\n                }\r\n            }\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.RECORDER_STATE_CHANGED,\r\n                session);\r\n        });\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\r\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\r\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(\r\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\r\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\r\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\r\n\r\n    chatRoom.setParticipantPropertyListener((node, from) => {\r\n        const participant = conference.getParticipantById(from);\r\n\r\n        if (!participant) {\r\n            return;\r\n        }\r\n\r\n        participant.setProperty(\r\n            node.tagName.substring('jitsi_participant_'.length),\r\n            node.value);\r\n    });\r\n\r\n    chatRoom.addListener(XMPPEvents.KICKED,\r\n        conference.onMemberKicked.bind(conference));\r\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\r\n        conference.onSuspendDetected.bind(conference));\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\r\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\r\n\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\r\n        JitsiConferenceEvents.MEMBERS_ONLY_CHANGED);\r\n\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\r\n        conference.onMemberJoined.bind(conference));\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\r\n        JitsiConferenceEvents.LOBBY_USER_JOINED);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED,\r\n        JitsiConferenceEvents.LOBBY_USER_UPDATED);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\r\n        JitsiConferenceEvents.LOBBY_USER_LEFT);\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\r\n        conference._onMemberBotTypeChanged.bind(conference));\r\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\r\n        conference.onMemberLeft.bind(conference));\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\r\n        JitsiConferenceEvents.CONFERENCE_LEFT);\r\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DENIED_ACCESS,\r\n        JitsiConferenceEvents.CONFERENCE_FAILED,\r\n        JitsiConferenceErrors.CONFERENCE_ACCESS_DENIED);\r\n\r\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\r\n        conference.onDisplayNameChanged.bind(conference));\r\n\r\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\r\n        conference.onLocalRoleChanged(role);\r\n\r\n        // log all events for the recorder operated by the moderator\r\n        if (conference.statistics && conference.isModerator()) {\r\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\r\n                recorderSession => {\r\n                    const logObject = {\r\n                        error: recorderSession.getError(),\r\n                        id: 'recorder_status',\r\n                        status: recorderSession.getStatus()\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n                });\r\n        }\r\n    });\r\n\r\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\r\n        conference.onUserRoleChanged.bind(conference));\r\n\r\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\r\n        (authEnabled, authIdentity) => {\r\n            conference.authEnabled = authEnabled;\r\n            conference.authIdentity = authIdentity;\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\r\n                authIdentity);\r\n        });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.MESSAGE_RECEIVED,\r\n\r\n        // eslint-disable-next-line max-params\r\n        (jid, displayName, txt, myJid, ts) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\r\n                id, txt, ts, displayName);\r\n        });\r\n\r\n    chatRoom.addListener(\r\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\r\n\r\n        // eslint-disable-next-line max-params\r\n        (jid, displayName, txt, myJid, ts) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\r\n                id, txt, ts);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\r\n        (jid, status) => {\r\n            const id = Strophe.getResourceFromJid(jid);\r\n            const participant = conference.getParticipantById(id);\r\n\r\n            if (!participant || participant._status === status) {\r\n                return;\r\n            }\r\n            participant._status = status;\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\r\n        });\r\n\r\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\r\n        (from, payload) => {\r\n            const id = Strophe.getResourceFromJid(from);\r\n            const participant = conference.getParticipantById(id);\r\n\r\n            if (participant) {\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n                    participant, payload);\r\n            } else {\r\n                logger.warn(\r\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\r\n                    + `participant: ${from}`,\r\n                    payload);\r\n            }\r\n        });\r\n\r\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\r\n        let isModerator = false;\r\n\r\n        if (conference.myUserId() === from && conference.isModerator()) {\r\n            isModerator = true;\r\n        } else {\r\n            const participant = conference.getParticipantById(from);\r\n\r\n            if (participant && participant.isModerator()) {\r\n                isModerator = true;\r\n            }\r\n        }\r\n\r\n        if (!isModerator) {\r\n            return;\r\n        }\r\n\r\n        const startAudioMuted = data.attributes.audio === 'true';\r\n        const startVideoMuted = data.attributes.video === 'true';\r\n\r\n        let updated = false;\r\n\r\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\r\n            conference.startMutedPolicy.audio = startAudioMuted;\r\n            updated = true;\r\n        }\r\n\r\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\r\n            conference.startMutedPolicy.video = startVideoMuted;\r\n            updated = true;\r\n        }\r\n\r\n        if (updated) {\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\r\n                conference.startMutedPolicy\r\n            );\r\n        }\r\n    });\r\n\r\n    if (conference.statistics) {\r\n        // FIXME ICE related events should end up in RTCEvents eventually\r\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\r\n            session => {\r\n                conference.statistics.sendIceConnectionFailedEvent(\r\n                    session.peerconnection);\r\n            });\r\n\r\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\r\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\r\n            (e, pc) => {\r\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\r\n            });\r\n    }\r\n};\r\n\r\n/**\r\n * Setups event listeners related to conference.rtc\r\n */\r\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\r\n    const conference = this.conference;\r\n    const rtc = conference.rtc;\r\n\r\n    rtc.addListener(\r\n        RTCEvents.REMOTE_TRACK_ADDED,\r\n        conference.onRemoteTrackAdded.bind(conference));\r\n\r\n    rtc.addListener(\r\n        RTCEvents.REMOTE_TRACK_REMOVED,\r\n        conference.onRemoteTrackRemoved.bind(conference));\r\n\r\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n        id => {\r\n            if (conference.lastDominantSpeaker !== id && conference.room) {\r\n                conference.lastDominantSpeaker = id;\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, id);\r\n\r\n                if (conference.statistics && conference.myUserId() === id) {\r\n                    // We are the new dominant speaker.\r\n                    conference.statistics.sendDominantSpeakerEvent(\r\n                        conference.room.roomjid);\r\n                }\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\r\n        const now = window.performance.now();\r\n        const key = 'data.channel.opened';\r\n\r\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\r\n        logger.log(`(TIME) ${key}:\\t`, now);\r\n        conference.room.connectionTimes[key] = now;\r\n        Statistics.sendAnalytics(\r\n            createConnectionStageReachedEvent(key, { value: now }));\r\n\r\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\r\n    });\r\n\r\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n        (from, payload) => {\r\n            const participant = conference.getParticipantById(from);\r\n\r\n            if (participant) {\r\n                conference.eventEmitter.emit(\r\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n                    participant, payload);\r\n            } else {\r\n                logger.warn(\r\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\r\n                        + `participant: ${from}`,\r\n                    payload);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\r\n        (tpc, ufrag) => {\r\n            if (!tpc.isP2P) {\r\n                Statistics.sendLog(\r\n                    JSON.stringify({\r\n                        id: 'local_ufrag',\r\n                        value: ufrag\r\n                    }));\r\n            }\r\n        });\r\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\r\n        (tpc, ufrag) => {\r\n            if (!tpc.isP2P) {\r\n                Statistics.sendLog(\r\n                    JSON.stringify({\r\n                        id: 'remote_ufrag',\r\n                        value: ufrag\r\n                    }));\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendCreateOfferFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\r\n        (e, tpc) => {\r\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\r\n            if (!tpc.isP2P) {\r\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\r\n            }\r\n        });\r\n\r\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\r\n        (track, ssrc) => {\r\n            // when starting screen sharing, the track is created and when\r\n            // we do set local description and we process the ssrc we\r\n            // will be notified for it and we will report it with the event\r\n            // for screen sharing\r\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\r\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * Removes event listeners related to conference.xmpp\r\n */\r\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    conference.xmpp.caps.removeListener(\r\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\r\n        this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]);\r\n    delete this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED];\r\n\r\n    Object.keys(this.xmppListeners).forEach(eventName => {\r\n        conference.xmpp.removeListener(\r\n            eventName,\r\n            this.xmppListeners[eventName]);\r\n    });\r\n    this.xmppListeners = {};\r\n};\r\n\r\n\r\n/**\r\n * Setups event listeners related to conference.xmpp\r\n */\r\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    const featuresChangedListener = from => {\r\n        const participant\r\n            = conference.getParticipantById(\r\n            Strophe.getResourceFromJid(from));\r\n\r\n        if (participant) {\r\n            conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED,\r\n                participant);\r\n        }\r\n    };\r\n\r\n    conference.xmpp.caps.addListener(\r\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\r\n        featuresChangedListener);\r\n    this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]\r\n        = featuresChangedListener;\r\n\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_INCOMING,\r\n        conference.onIncomingCall.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_ACCEPTED,\r\n        conference.onCallAccepted.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.TRANSPORT_INFO,\r\n        conference.onTransportInfo.bind(conference));\r\n    this._addConferenceXMPPListener(\r\n        XMPPEvents.CALL_ENDED,\r\n        conference.onCallEnded.bind(conference));\r\n\r\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\r\n        (audioMuted, videoMuted) => {\r\n            if (conference.options.config.ignoreStartMuted) {\r\n                return;\r\n            }\r\n\r\n            conference.startAudioMuted = audioMuted;\r\n            conference.startVideoMuted = videoMuted;\r\n\r\n            // mute existing local tracks because this is initial mute from\r\n            // Jicofo\r\n            conference.getLocalTracks().forEach(track => {\r\n                switch (track.getType()) {\r\n                case MediaType.AUDIO:\r\n                    conference.startAudioMuted && track.mute();\r\n                    break;\r\n                case MediaType.VIDEO:\r\n                    conference.startVideoMuted && track.mute();\r\n                    break;\r\n                }\r\n            });\r\n\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\r\n        });\r\n\r\n    this._addConferenceXMPPListener(XMPPEvents.CONFERENCE_TIMESTAMP_RECEIVED,\r\n        createdTimestamp => {\r\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_CREATED_TIMESTAMP, createdTimestamp);\r\n        });\r\n};\r\n\r\n/**\r\n * Add XMPP listener and save its reference for remove on leave conference.\r\n */\r\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\r\n        eventName, listener) {\r\n    this.xmppListeners[eventName] = listener;\r\n    this.conference.xmpp.addListener(eventName, listener);\r\n};\r\n\r\n/**\r\n * Setups event listeners related to conference.statistics\r\n */\r\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\r\n    const conference = this.conference;\r\n\r\n    if (!conference.statistics) {\r\n        return;\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\r\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\r\n    });\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    // Forward the \"before stats disposed\" event\r\n    conference.statistics.addBeforeDisposedListener(() => {\r\n        conference.eventEmitter.emit(\r\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\r\n    });\r\n\r\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\r\n    if (!conference.options.config.startSilent) {\r\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\r\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\r\n                const ssrc = tpc.getLocalSSRC(track);\r\n\r\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\r\n                    return;\r\n                }\r\n\r\n                track.onByteSentStatsReceived(tpc, stats[ssrc]);\r\n            });\r\n        });\r\n    }\r\n};\r\n","import { BrowserDetection } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// TODO: Move this code to js-utils.\r\n\r\n// NOTE: Now we are extending BrowserDetection in order to preserve\r\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\r\n// and BrowserDetection as separate objects in future.\r\n\r\n/**\r\n * Implements browser capabilities for lib-jitsi-meet.\r\n */\r\nexport default class BrowserCapabilities extends BrowserDetection {\r\n    /**\r\n     * Creates new BrowserCapabilities instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n        logger.info(\r\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\r\n    }\r\n\r\n    /**\r\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\r\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\r\n     * off the camera device).\r\n     * @return {boolean} <tt>true</tt> if the current browser supports this\r\n     * strategy or <tt>false</tt> otherwise.\r\n     */\r\n    doesVideoMuteByStreamRemove() {\r\n        return this.isChromiumBased() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the current browser support peer to peer connections\r\n     * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>\r\n     * otherwise.\r\n     */\r\n    supportsP2P() {\r\n        return !this.usesUnifiedPlan();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser is Chromium based, that is, it's either\r\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\r\n     * Chrome.\r\n     *\r\n     * This includes the following browsers:\r\n     * - Chrome and Chromium\r\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\r\n     *   such as Brave and Vivaldi\r\n     * - Browsers which are NOT Chrome but use it as their engine, and have\r\n     *   custom detection code: Opera, Electron and NW.JS\r\n     */\r\n    isChromiumBased() {\r\n        return this.isChrome()\r\n            || this.isElectron()\r\n            || this.isNWJS()\r\n            || this.isOpera();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser is supported.\r\n     *\r\n     * @returns {boolean} true if the browser is supported, false otherwise.\r\n     */\r\n    isSupported() {\r\n        return this.isChromiumBased()\r\n            || this.isFirefox()\r\n            || this.isReactNative()\r\n            || (this.isSafari() && !this.isVersionLessThan('12.1'));\r\n    }\r\n\r\n    isWebKitBased() {\r\n        // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\r\n        return this._bowser.isEngine('webkit')\r\n            && typeof navigator.mediaDevices !== 'undefined'\r\n            && typeof navigator.mediaDevices.getUserMedia !== 'undefined'\r\n            && typeof window.RTCRtpTransceiver !== 'undefined'\r\n            // eslint-disable-next-line no-undef\r\n            && Object.keys(RTCRtpTransceiver.prototype).indexOf('currentDirection') > -1;\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current environment needs a user interaction\r\n     * with the page before any unmute can occur.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isUserInteractionRequiredForUnmute() {\r\n        return this.isFirefox() && this.isVersionLessThan('68');\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\r\n     * user's connection is interrupted and the video stops playback.\r\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\r\n     * otherwise.\r\n     */\r\n    supportsVideoMuteOnConnInterrupted() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser reports upload and download bandwidth\r\n     * statistics.\r\n     * @return {boolean}\r\n     */\r\n    supportsBandwidthStatistics() {\r\n        // FIXME bandwidth stats are currently not implemented for FF on our\r\n        // side, but not sure if not possible ?\r\n        return !this.isFirefox() && !this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports setting codec preferences on the transceiver.\r\n     * @returns {boolean}\r\n     */\r\n    supportsCodecPreferences() {\r\n        return this.usesUnifiedPlan()\r\n            && typeof window.RTCRtpTransceiver !== 'undefined'\r\n            && Object.keys(window.RTCRtpTransceiver.prototype).indexOf('setCodecPreferences') > -1\r\n            && Object.keys(RTCRtpSender.prototype).indexOf('getCapabilities') > -1\r\n\r\n            // this is not working on Safari because of the following bug\r\n            // https://bugs.webkit.org/show_bug.cgi?id=215567\r\n            && !this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser support the device change event.\r\n     * @return {boolean}\r\n     */\r\n    supportsDeviceChangeEvent() {\r\n        return navigator.mediaDevices\r\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\r\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports RTT statistics for srflx local\r\n     * candidates through the legacy getStats() API.\r\n     */\r\n    supportsLocalCandidateRttStatistics() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports the Long Tasks API that lets us observe\r\n     * performance measurement events and be notified of tasks that take longer than\r\n     * 50ms to execute on the main thread.\r\n     */\r\n    supportsPerformanceObserver() {\r\n        return typeof window.PerformanceObserver !== 'undefined'\r\n            && PerformanceObserver.supportedEntryTypes.indexOf('longtask') > -1;\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser supports audio level stats on the receivers.\r\n     */\r\n    supportsReceiverStats() {\r\n        return typeof window.RTCRtpReceiver !== 'undefined'\r\n            && Object.keys(RTCRtpReceiver.prototype).indexOf('getSynchronizationSources') > -1;\r\n    }\r\n\r\n    /**\r\n     * Checks if the current browser reports round trip time statistics for\r\n     * the ICE candidate pair.\r\n     * @return {boolean}\r\n     */\r\n    supportsRTTStatistics() {\r\n        // Firefox does not seem to report RTT for ICE candidate pair:\r\n        // eslint-disable-next-line max-len\r\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\r\n        // It does report mozRTT for RTP streams, but at the time of this\r\n        // writing it's value does not make sense most of the time\r\n        // (is reported as 1):\r\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\r\n        // For Chrome and others we rely on 'googRtt'.\r\n        return !this.isFirefox();\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current browser can support capturing video,\r\n     * be it camera or desktop, and displaying received video.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    supportsVideo() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses plan B.\r\n     * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n     * @returns {boolean}\r\n     */\r\n    usesPlanB() {\r\n        return this.isReactNative();//!this.usesUnifiedPlan();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses SDP munging for turning on simulcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesSdpMungingForSimulcast() {\r\n        return this.isChromiumBased() || this.isReactNative() || this.isSafari();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses unified plan.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesUnifiedPlan() {\r\n        if (this.isFirefox()) {\r\n            return true;\r\n        }\r\n\r\n        if (this.isSafari() && typeof window.RTCRtpTransceiver !== 'undefined') {\r\n            // eslint-disable-next-line max-len\r\n            // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\r\n            // eslint-disable-next-line no-undef\r\n            return Object.keys(RTCRtpTransceiver.prototype)\r\n                   .indexOf('currentDirection') > -1;\r\n        }\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n        // return false;\r\n        return !this.isReactNative();\r\n    }\r\n\r\n    /**\r\n     * Returns whether or not the current browser should be using the new\r\n     * getUserMedia flow, which utilizes the adapter shim. This method should\r\n     * be temporary and used while migrating all browsers to use adapter and\r\n     * the new getUserMedia.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesNewGumFlow() {\r\n        const REQUIRED_CHROME_VERSION = 61;\r\n\r\n        if (this.isChrome()) {\r\n            return !this.isVersionLessThan(REQUIRED_CHROME_VERSION);\r\n        }\r\n\r\n        if (this.isFirefox() || this.isSafari()) {\r\n            return true;\r\n        }\r\n\r\n        if (this.isChromiumBased()) {\r\n            return this._getChromiumBasedVersion() >= REQUIRED_CHROME_VERSION;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses webrtc-adapter. All browsers using the new\r\n     * getUserMedia flow and Edge.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    usesAdapter() {\r\n        return !this.isReactNative();\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser uses RIDs/MIDs for siganling the simulcast streams\r\n     * to the bridge instead of the ssrcs.\r\n     */\r\n    usesRidsForSimulcast() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports getDisplayMedia.\r\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\r\n     */\r\n    supportsGetDisplayMedia() {\r\n        return typeof navigator.getDisplayMedia !== 'undefined'\r\n            || (typeof navigator.mediaDevices !== 'undefined'\r\n                && typeof navigator.mediaDevices.getDisplayMedia\r\n                    !== 'undefined');\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports insertable streams, needed for E2EE.\r\n     * @returns {boolean} {@code true} if the browser supports insertable streams.\r\n     */\r\n    supportsInsertableStreams() {\r\n        if (!(typeof window.RTCRtpSender !== 'undefined'\r\n            && (window.RTCRtpSender.prototype.createEncodedStreams\r\n                || window.RTCRtpSender.prototype.createEncodedVideoStreams))) {\r\n            return false;\r\n        }\r\n\r\n        // Feature-detect transferable streams which we need to operate in a worker.\r\n        // See https://groups.google.com/a/chromium.org/g/blink-dev/c/1LStSgBt6AM/m/hj0odB8pCAAJ\r\n        const stream = new ReadableStream();\r\n\r\n        try {\r\n            window.postMessage(stream, '*', [ stream ]);\r\n\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether the browser supports the RED format for audio.\r\n     */\r\n    supportsAudioRed() {\r\n        return Boolean(window.RTCRtpSender\r\n            && window.RTCRtpSender.getCapabilities\r\n            && window.RTCRtpSender.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red')\r\n            && window.RTCRtpReceiver\r\n            && window.RTCRtpReceiver.getCapabilities\r\n            && window.RTCRtpReceiver.getCapabilities('audio').codecs.some(codec => codec.mimeType === 'audio/red'));\r\n    }\r\n\r\n    /**\r\n     * Checks if the browser supports the \"sdpSemantics\" configuration option.\r\n     * https://webrtc.org/web-apis/chrome/unified-plan/\r\n     * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n     * @returns {boolean}\r\n     */\r\n    supportsSdpSemantics() {\r\n        return this.isReactNative();//this.isChromiumBased() && this._getChromiumBasedVersion() >= 65;\r\n    }\r\n\r\n    /**\r\n     * Returns the version of a Chromium based browser.\r\n     *\r\n     * @returns {Number}\r\n     */\r\n    _getChromiumBasedVersion() {\r\n        if (this.isChromiumBased()) {\r\n            // NW.JS doesn't expose the Chrome version in the UA string.\r\n            if (this.isNWJS()) {\r\n                // eslint-disable-next-line no-undef\r\n                return Number.parseInt(process.versions.chromium, 10);\r\n            }\r\n\r\n            // Here we process all browsers which use the Chrome engine but\r\n            // don't necessarily identify as Chrome. We cannot use the version\r\n            // comparing functions because the Electron, Opera and NW.JS\r\n            // versions are inconsequential here, as we need to know the actual\r\n            // Chrome engine version.\r\n            const ua = navigator.userAgent;\r\n\r\n            if (ua.match(/Chrome/)) {\r\n                const version\r\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\r\n\r\n                return version;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n}\r\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.bowser=t():e.bowser=t()}(this,(function(){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&\"object\"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,\"default\",{enumerable:!0,value:e}),2&t&&\"string\"!=typeof e)for(var n in e)r.d(i,n,function(t){return e[t]}.bind(null,n));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,\"a\",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p=\"\",r(r.s=90)}({17:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=r(18),n=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||\"\"},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||\"\"},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case\"NT\":return\"NT\";case\"XP\":return\"XP\";case\"NT 5.0\":return\"2000\";case\"NT 5.1\":return\"XP\";case\"NT 5.2\":return\"2003\";case\"NT 6.0\":return\"Vista\";case\"NT 6.1\":return\"7\";case\"NT 6.2\":return\"8\";case\"NT 6.3\":return\"8.1\";case\"NT 10.0\":return\"10\";default:return}},e.getMacOSVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return\"Leopard\";case 6:return\"Snow Leopard\";case 7:return\"Lion\";case 8:return\"Mountain Lion\";case 9:return\"Mavericks\";case 10:return\"Yosemite\";case 11:return\"El Capitan\";case 12:return\"Sierra\";case 13:return\"High Sierra\";case 14:return\"Mojave\";case 15:return\"Catalina\";default:return}},e.getAndroidVersionName=function(e){var t=e.split(\".\").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?\"Cupcake\":1===t[0]&&t[1]>=6?\"Donut\":2===t[0]&&t[1]<2?\"Eclair\":2===t[0]&&2===t[1]?\"Froyo\":2===t[0]&&t[1]>2?\"Gingerbread\":3===t[0]?\"Honeycomb\":4===t[0]&&t[1]<1?\"Ice Cream Sandwich\":4===t[0]&&t[1]<4?\"Jelly Bean\":4===t[0]&&t[1]>=4?\"KitKat\":5===t[0]?\"Lollipop\":6===t[0]?\"Marshmallow\":7===t[0]?\"Nougat\":8===t[0]?\"Oreo\":9===t[0]?\"Pie\":void 0},e.getVersionPrecision=function(e){return e.split(\".\").length},e.compareVersions=function(t,r,i){void 0===i&&(i=!1);var n=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(n,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),i=t+new Array(r+1).join(\".0\");return e.map(i.split(\".\"),(function(e){return new Array(20-e.length).join(\"0\")+e})).reverse()}));for(i&&(a=o-Math.min(n,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,i=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)i.push(t(e[r]));return i},e.getBrowserAlias=function(e){return i.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return i.BROWSER_MAP[e]||\"\"},e}();t.default=n,e.exports=t.default},18:function(e,t,r){\"use strict\";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={\"Amazon Silk\":\"amazon_silk\",\"Android Browser\":\"android\",Bada:\"bada\",BlackBerry:\"blackberry\",Chrome:\"chrome\",Chromium:\"chromium\",Epiphany:\"epiphany\",Firefox:\"firefox\",Focus:\"focus\",Generic:\"generic\",\"Google Search\":\"google_search\",Googlebot:\"googlebot\",\"Internet Explorer\":\"ie\",\"K-Meleon\":\"k_meleon\",Maxthon:\"maxthon\",\"Microsoft Edge\":\"edge\",\"MZ Browser\":\"mz\",\"NAVER Whale Browser\":\"naver\",Opera:\"opera\",\"Opera Coast\":\"opera_coast\",PhantomJS:\"phantomjs\",Puffin:\"puffin\",QupZilla:\"qupzilla\",QQ:\"qq\",QQLite:\"qqlite\",Safari:\"safari\",Sailfish:\"sailfish\",\"Samsung Internet for Android\":\"samsung_internet\",SeaMonkey:\"seamonkey\",Sleipnir:\"sleipnir\",Swing:\"swing\",Tizen:\"tizen\",\"UC Browser\":\"uc\",Vivaldi:\"vivaldi\",\"WebOS Browser\":\"webos\",WeChat:\"wechat\",\"Yandex Browser\":\"yandex\",Roku:\"roku\"};t.BROWSER_MAP={amazon_silk:\"Amazon Silk\",android:\"Android Browser\",bada:\"Bada\",blackberry:\"BlackBerry\",chrome:\"Chrome\",chromium:\"Chromium\",epiphany:\"Epiphany\",firefox:\"Firefox\",focus:\"Focus\",generic:\"Generic\",googlebot:\"Googlebot\",google_search:\"Google Search\",ie:\"Internet Explorer\",k_meleon:\"K-Meleon\",maxthon:\"Maxthon\",edge:\"Microsoft Edge\",mz:\"MZ Browser\",naver:\"NAVER Whale Browser\",opera:\"Opera\",opera_coast:\"Opera Coast\",phantomjs:\"PhantomJS\",puffin:\"Puffin\",qupzilla:\"QupZilla\",qq:\"QQ Browser\",qqlite:\"QQ Browser Lite\",safari:\"Safari\",sailfish:\"Sailfish\",samsung_internet:\"Samsung Internet for Android\",seamonkey:\"SeaMonkey\",sleipnir:\"Sleipnir\",swing:\"Swing\",tizen:\"Tizen\",uc:\"UC Browser\",vivaldi:\"Vivaldi\",webos:\"WebOS Browser\",wechat:\"WeChat\",yandex:\"Yandex Browser\"};t.PLATFORMS_MAP={tablet:\"tablet\",mobile:\"mobile\",desktop:\"desktop\",tv:\"tv\"};t.OS_MAP={WindowsPhone:\"Windows Phone\",Windows:\"Windows\",MacOS:\"macOS\",iOS:\"iOS\",Android:\"Android\",WebOS:\"WebOS\",BlackBerry:\"BlackBerry\",Bada:\"Bada\",Tizen:\"Tizen\",Linux:\"Linux\",ChromeOS:\"Chrome OS\",PlayStation4:\"PlayStation 4\",Roku:\"Roku\"};t.ENGINE_MAP={EdgeHTML:\"EdgeHTML\",Blink:\"Blink\",Trident:\"Trident\",Presto:\"Presto\",Gecko:\"Gecko\",WebKit:\"WebKit\"}},90:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(91))&&i.__esModule?i:{default:i},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var i=t[r];i.enumerable=i.enumerable||!1,i.configurable=!0,\"value\"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var a=function(){function e(){}var t,r,i;return e.getParser=function(e,t){if(void 0===t&&(t=!1),\"string\"!=typeof e)throw new Error(\"UserAgent should be a string\");return new n.default(e,t)},e.parse=function(e){return new n.default(e).getResult()},t=e,i=[{key:\"BROWSER_MAP\",get:function(){return s.BROWSER_MAP}},{key:\"ENGINE_MAP\",get:function(){return s.ENGINE_MAP}},{key:\"OS_MAP\",get:function(){return s.OS_MAP}},{key:\"PLATFORMS_MAP\",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),i&&o(t,i),e}();t.default=a,e.exports=t.default},91:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i=u(r(92)),n=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||\"\"===e)throw new Error(\"UserAgent parameter can't be empty\");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=i.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||\"\":this.getBrowser().name||\"\"},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=n.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||\"\":t||\"\"},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||\"\":t||\"\"},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=s.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||\"\":this.getEngine().name||\"\"},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=o.default.find((function(t){if(\"function\"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error(\"Browser's test function is not valid\")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return Object.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},i=0,n={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];\"string\"==typeof o?(n[t]=o,s+=1):\"object\"==typeof o&&(r[t]=o,i+=1)})),i>0){var o=Object.keys(r),a=o.find((function(e){return t.isOS(e)}));if(a){var u=this.satisfies(r[a]);if(void 0!==u)return u}var d=o.find((function(e){return t.isPlatform(e)}));if(d){var c=this.satisfies(r[d]);if(void 0!==c)return c}}if(s>0){var f=Object.keys(n).find((function(e){return t.isBrowser(e,!0)}));if(void 0!==f)return this.compareVersion(n[f])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),i=e.toLowerCase(),n=a.default.getBrowserTypeByAlias(i);return t&&n&&(i=n.toLowerCase()),i===r},t.compareVersion=function(e){var t=[0],r=e,i=!1,n=this.getBrowserVersion();if(\"string\"==typeof n)return\">\"===e[0]||\"<\"===e[0]?(r=e.substr(1),\"=\"===e[1]?(i=!0,r=e.substr(2)):t=[],\">\"===e[0]?t.push(1):t.push(-1)):\"=\"===e[0]?r=e.substr(1):\"~\"===e[0]&&(i=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(n,r,i))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i};var s=/version\\/(\\d+(\\.?_?\\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:\"Googlebot\"},r=n.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\\/|opios/i],describe:function(e){var t={name:\"Opera\"},r=n.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:\"Samsung Internet for Android\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:\"NAVER Whale Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:\"MZ Browser\"},r=n.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:\"Focus\"},r=n.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:\"Swing\"},r=n.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:\"Opera Coast\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:\"Yandex Browser\"},r=n.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:\"UC Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:\"Maxthon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:\"Epiphany\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:\"Puffin\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:\"Sleipnir\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:\"K-Meleon\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:\"WeChat\"},r=n.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?\"QQ Browser Lite\":\"QQ Browser\"},r=n.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:\"Internet Explorer\"},r=n.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\\sedg\\//i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:\"Microsoft Edge\"},r=n.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:\"Vivaldi\"},r=n.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:\"SeaMonkey\"},r=n.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:\"Sailfish\"},r=n.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:\"Amazon Silk\"},r=n.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:\"PhantomJS\"},r=n.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:\"SlimerJS\"},r=n.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t={name:\"BlackBerry\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:\"WebOS Browser\"},r=n.default.getFirstMatch(s,e)||n.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:\"Bada\"},r=n.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:\"Tizen\"},r=n.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:\"QupZilla\"},r=n.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:\"Firefox\"},r=n.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:\"Chromium\"},r=n.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i,e)||n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:\"Chrome\"},r=n.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:\"Google Search\"},r=n.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:\"Android Browser\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:\"PlayStation 4\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:\"Safari\"},r=n.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search(\"\\\\(\")?/^(.*)\\/(.*)[ \\t]\\((.*)/:/^(.*)\\/(.*) /;return{name:n.default.getFirstMatch(t,e),version:n.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/Roku\\/DVP/],describe:function(e){var t=n.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=n.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows/i],describe:function(e){var t=n.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i,e),r=n.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/macintosh/i],describe:function(e){var t=n.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i,e).replace(/[_\\s]/g,\".\"),r=n.default.getMacOSVersionName(t),i={name:s.OS_MAP.MacOS,version:t};return r&&(i.versionName=r),i}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=n.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i,e).replace(/[_\\s]/g,\".\");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=n.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i,e),r=n.default.getAndroidVersionName(t),i={name:s.OS_MAP.Android,version:t};return r&&(i.versionName=r),i}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=n.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\\bbb\\d+/i,/rim\\stablet/i],describe:function(e){var t=n.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i,e)||n.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i,e)||n.default.getFirstMatch(/\\bbb(\\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=n.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=n.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=n.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:\"bot\",vendor:\"Google\"}}},{test:[/huawei/i],describe:function(e){var t=n.default.getFirstMatch(/(can-l01)/i,e)&&\"Nova\",r={type:s.PLATFORMS_MAP.mobile,vendor:\"Huawei\"};return t&&(r.model=t),r}},{test:[/nexus\\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Nexus\"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Apple\",model:\"iPad\"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\",model:\"Kindle Fire HD 7\"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:\"Amazon\"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=n.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:\"Apple\",model:t}}},{test:[/nexus\\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Nexus\"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"blackberry\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"BlackBerry\"}}},{test:function(e){return\"bada\"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"windows phone\"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:\"Microsoft\"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(\".\")[0]);return\"android\"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return\"android\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return\"macos\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:\"Apple\"}}},{test:function(e){return\"windows\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"linux\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return\"playstation 4\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return\"roku\"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){\"use strict\";t.__esModule=!0,t.default=void 0;var i,n=(i=r(17))&&i.__esModule?i:{default:i},s=r(18);var o=[{test:function(e){return\"microsoft edge\"===e.getBrowserName(!0)},describe:function(e){if(/\\sedg\\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=n.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=n.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=n.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=n.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\\/537\\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=n.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    TYPE_OPERATIONAL,\r\n    TYPE_PAGE,\r\n    TYPE_TRACK,\r\n    TYPE_UI\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\n\r\nconst MAX_CACHE_SIZE = 100;\r\n\r\n// eslist-disable-line no-undef\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This class provides an API to lib-jitsi-meet and its users for sending\r\n * analytics events. It serves as a bridge to different backend implementations\r\n * (\"analytics handlers\") and a cache for events attempted to be sent before\r\n * the analytics handlers were enabled.\r\n *\r\n * The API is designed to be an easy replacement for the previous version of\r\n * this adapter, and is meant to be extended with more convenience methods.\r\n *\r\n *\r\n * The API calls are translated to objects with the following structure, which\r\n * are then passed to the sendEvent(event) function of the underlying handlers:\r\n *\r\n * {\r\n *    type,\r\n *\r\n *    action,\r\n *    actionSubject,\r\n *    actionSubjectId,\r\n *    attributes,\r\n *    categories,\r\n *    containerId,\r\n *    containerType,\r\n *    name,\r\n *    objectId,\r\n *    objectType,\r\n *    source,\r\n *    tags\r\n * }\r\n *\r\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\r\n * other properties are considered required according to the type.\r\n *\r\n * For events with type 'page', the required properties are: name.\r\n *\r\n * For events with type 'operational' and 'ui', the required properties are:\r\n * action, actionSubject, source\r\n *\r\n * For events with type 'page', the required properties are:\r\n * action, actionSubject, source, containerType, containerId, objectType,\r\n * objectId\r\n */\r\nclass AnalyticsAdapter {\r\n    /**\r\n     * Creates new AnalyticsAdapter instance.\r\n     */\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Reset the state to the initial one.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        /**\r\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\r\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\r\n         * any more events, and it can not be re-enabled.\r\n         * @type {boolean}\r\n         */\r\n        this.disposed = false;\r\n\r\n        /**\r\n         * The set of handlers to which events will be sent.\r\n         * @type {Set<any>}\r\n         */\r\n        this.analyticsHandlers = new Set();\r\n\r\n        /**\r\n         * The cache of events which are not sent yet. The cache is enabled\r\n         * while this field is truthy, and disabled otherwise.\r\n         * @type {Array}\r\n         */\r\n        this.cache = [];\r\n\r\n        /**\r\n         * Map of properties that will be added to every event. Note that the\r\n         * keys will be prefixed with \"permanent.\".\r\n         */\r\n        this.permanentProperties = {};\r\n\r\n        /**\r\n         * The name of the conference that this AnalyticsAdapter is associated\r\n         * with.\r\n         * @type {null}\r\n         */\r\n        this.conferenceName = '';\r\n\r\n        this.addPermanentProperties({\r\n            'user_agent': navigator.userAgent,\r\n            'browser_name': browser.getName()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Dispose analytics. Clears all handlers.\r\n     */\r\n    dispose() {\r\n        logger.warn('Disposing of analytics adapter.');\r\n\r\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\r\n            this.analyticsHandlers.forEach(handler => {\r\n                if (typeof handler.dispose === 'function') {\r\n                    handler.dispose();\r\n                }\r\n            });\r\n        }\r\n\r\n        this.setAnalyticsHandlers([]);\r\n        this.disposed = true;\r\n    }\r\n\r\n    /**\r\n     * Sets the handlers that are going to be used to send analytics. Sends any\r\n     * cached events.\r\n     * @param {Array} handlers the handlers\r\n     */\r\n    setAnalyticsHandlers(handlers) {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        this.analyticsHandlers = new Set(handlers);\r\n\r\n        this._setUserProperties();\r\n\r\n        // Note that we disable the cache even if the set of handlers is empty.\r\n        const cache = this.cache;\r\n\r\n        this.cache = null;\r\n        if (cache) {\r\n            cache.forEach(event => this._sendEvent(event));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the user properties to the analytics handlers.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _setUserProperties() {\r\n        this.analyticsHandlers.forEach(handler => {\r\n            try {\r\n                handler.setUserProperties(this.permanentProperties);\r\n            } catch (error) {\r\n                logger.warn('Error in setUserProperties method of one of the '\r\n                    + `analytics handlers: ${error}`);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\r\n     * Permanent properties will be added as \"attributes\" to events sent to\r\n     * the underlying \"analytics handlers\", and their keys will be prefixed\r\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\r\n     * result in {\"permanent_key\": \"value\"} object to be added to the\r\n     * \"attributes\" field of events.\r\n     *\r\n     * @param {Object} properties the properties to add\r\n     */\r\n    addPermanentProperties(properties) {\r\n        this.permanentProperties = {\r\n            ...this.permanentProperties,\r\n            ...properties\r\n        };\r\n\r\n        this._setUserProperties();\r\n    }\r\n\r\n    /**\r\n     * Sets the name of the conference that this AnalyticsAdapter is associated\r\n     * with.\r\n     * @param name the name to set.\r\n     */\r\n    setConferenceName(name) {\r\n        this.conferenceName = name;\r\n        this.addPermanentProperties({ 'conference_name': name });\r\n    }\r\n\r\n    /**\r\n     * Sends an event with a given name and given properties. The first\r\n     * parameter is either a string or an object. If it is a string, it is used\r\n     * as the event name and the second parameter is used at the attributes to\r\n     * attach to the event. If it is an object, it represents the whole event,\r\n     * including any desired attributes, and the second parameter is ignored.\r\n     *\r\n     * @param {String|Object} eventName either a string to be used as the name\r\n     * of the event, or an event object. If an event object is passed, the\r\n     * properties parameters is ignored.\r\n     * @param {Object} properties the properties/attributes to attach to the\r\n     * event, if eventName is a string.\r\n     */\r\n    sendEvent(eventName, properties = {}) {\r\n        if (this.disposed) {\r\n            return;\r\n        }\r\n\r\n        let event = null;\r\n\r\n        if (typeof eventName === 'string') {\r\n            event = {\r\n                type: TYPE_OPERATIONAL,\r\n                action: eventName,\r\n                actionSubject: eventName,\r\n                source: eventName,\r\n                attributes: properties\r\n            };\r\n        } else if (typeof eventName === 'object') {\r\n            event = eventName;\r\n        }\r\n\r\n        if (!this._verifyRequiredFields(event)) {\r\n            logger.error(\r\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendEvent(event);\r\n    }\r\n\r\n    /**\r\n     * Checks whether an event has all of the required fields set, and tries\r\n     * to fill in some of the missing fields with reasonable default values.\r\n     * Returns true if after this operation the event has all of the required\r\n     * fields set, and false otherwise (if some of the required fields were not\r\n     * set and the attempt to fill them in with a default failed).\r\n     *\r\n     * @param event the event object.\r\n     * @return {boolean} true if the event (after the call to this function)\r\n     * contains all of the required fields, and false otherwise.\r\n     * @private\r\n     */\r\n    _verifyRequiredFields(event) {\r\n        if (!event) {\r\n            return false;\r\n        }\r\n\r\n        if (!event.type) {\r\n            event.type = TYPE_OPERATIONAL;\r\n        }\r\n\r\n        const type = event.type;\r\n\r\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\r\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\r\n            logger.error(`Unknown event type: ${type}`);\r\n\r\n            return false;\r\n        }\r\n\r\n        if (type === TYPE_PAGE) {\r\n            return Boolean(event.name);\r\n        }\r\n\r\n        // Try to set some reasonable default values in case some of the\r\n        // parameters required by the handler API are missing.\r\n        event.action = event.action || event.name || event.actionSubject;\r\n        event.actionSubject = event.actionSubject || event.name || event.action;\r\n        event.source = event.source || event.name || event.action\r\n            || event.actionSubject;\r\n\r\n        if (!event.action || !event.actionSubject || !event.source) {\r\n            logger.error(\r\n                'Required field missing (action, actionSubject or source)');\r\n\r\n            return false;\r\n        }\r\n\r\n        // Track events have additional required fields.\r\n        if (type === TYPE_TRACK) {\r\n            event.objectType = event.objectType || 'generic-object-type';\r\n            event.containerType = event.containerType || 'conference';\r\n            if (event.containerType === 'conference' && !event.containerId) {\r\n                event.containerId = this.conferenceName;\r\n            }\r\n\r\n\r\n            if (!event.objectType || !event.objectId\r\n                || !event.containerType || !event.containerId) {\r\n                logger.error(\r\n                    'Required field missing (containerId, containerType, '\r\n                        + 'objectId or objectType)');\r\n\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Saves an event to the cache, if the cache is enabled.\r\n     * @param event the event to save.\r\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\r\n     * if the cache was disabled).\r\n     * @private\r\n     */\r\n    _maybeCacheEvent(event) {\r\n        if (this.cache) {\r\n            this.cache.push(event);\r\n\r\n            // We limit the size of the cache, in case the user fails to ever\r\n            // set the analytics handlers.\r\n            if (this.cache.length > MAX_CACHE_SIZE) {\r\n                this.cache.splice(0, 1);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param event\r\n     * @private\r\n     */\r\n    _sendEvent(event) {\r\n        if (this._maybeCacheEvent(event)) {\r\n            // The event was consumed by the cache.\r\n        } else {\r\n            this.analyticsHandlers.forEach(handler => {\r\n                try {\r\n                    handler.sendEvent(event);\r\n                } catch (e) {\r\n                    logger.warn(`Error sending analytics event: ${e}`);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default new AnalyticsAdapter();\r\n","\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport { RunningAverage } from '../util/MathUtil';\r\n\r\nconst logger = getLogger(__filename);\r\nconst MILLI_SECONDS = 1000;\r\nconst SECONDS = 60;\r\n\r\n/**\r\n * This class creates an observer that monitors browser's performance measurement events\r\n * as they are recorded in the browser's performance timeline and computes an average and\r\n * a maximum value for the long task events. Tasks are classified as long tasks if they take\r\n * longer than 50ms to execute on the main thread.\r\n */\r\nexport class PerformanceObserverStats {\r\n    /**\r\n     * Creates a new instance of Performance observer statistics.\r\n     *\r\n     * @param {*} emitter Event emitter for emitting stats periodically\r\n     * @param {*} statsInterval interval for calculating the stats\r\n     */\r\n    constructor(emitter, statsInterval) {\r\n        this.eventEmitter = emitter;\r\n        this.longTasks = 0;\r\n        this.maxDuration = 0;\r\n        this.performanceStatsInterval = statsInterval;\r\n        this.stats = new RunningAverage();\r\n    }\r\n\r\n    /**\r\n     * Obtains the average rate of long tasks observed per min and the\r\n     * duration of the longest task recorded by the observer.\r\n     * @returns {Object}\r\n     */\r\n    getLongTasksStats() {\r\n        return {\r\n            avgRatePerMinute: (this.stats.getAverage() * SECONDS).toFixed(2), // calc rate per min\r\n            maxDurationMs: this.maxDuration\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Starts the performance observer by registering the callback function\r\n     * that calculates the performance statistics periodically.\r\n     * @returns {void}\r\n     */\r\n    startObserver() {\r\n        // Create a handler for when the long task event is fired.\r\n        this.longTaskEventHandler = list => {\r\n            const entries = list.getEntries();\r\n\r\n            for (const task of entries) {\r\n                this.longTasks++;\r\n                this.maxDuration = Math.max(this.maxDuration, task.duration).toFixed(3);\r\n            }\r\n        };\r\n\r\n        // Create an observer for monitoring long tasks.\r\n        logger.info('Creating a Performance Observer for monitoring Long Tasks');\r\n        this.observer = new PerformanceObserver(this.longTaskEventHandler);\r\n        this.observer.observe({ type: 'longtask',\r\n            buffered: true });\r\n        const startTime = Date.now();\r\n\r\n        // Calculate the average # of events/sec and emit a stats event.\r\n        this.longTasksIntervalId = setInterval(() => {\r\n            const now = Date.now();\r\n            const interval = this._lastTimeStamp\r\n                ? (now - this._lastTimeStamp) / MILLI_SECONDS\r\n                : (now - startTime) / MILLI_SECONDS;\r\n            const rate = this.longTasks / interval;\r\n\r\n            this.stats.addNext(rate);\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.LONG_TASKS_STATS, this.getLongTasksStats());\r\n\r\n            // Reset the counter and start counting events again.\r\n            this.longTasks = 0;\r\n            this._lastTimeStamp = Date.now();\r\n        }, this.performanceStatsInterval);\r\n    }\r\n\r\n    /**\r\n     * Stops the performance observer.\r\n     * @returns {void}\r\n     */\r\n    stopObserver() {\r\n        this.observer && this.observer.disconnect();\r\n        this.longTaskEventHandler = null;\r\n        if (this.longTasksIntervalId) {\r\n            clearInterval(this.longTasksIntervalId);\r\n            this.longTasksIntervalId = null;\r\n        }\r\n    }\r\n}\r\n","import { browsers } from '@jitsi/js-utils';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as StatisticsEvents from '../../service/statistics/Events';\r\nimport browser from '../browser';\r\n\r\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The lib-jitsi-meet browser-agnostic names of the browser-specific keys\r\n * reported by RTCPeerConnection#getStats mapped by browser.\r\n */\r\nconst KEYS_BY_BROWSER_TYPE = {};\r\n\r\nKEYS_BY_BROWSER_TYPE[browsers.FIREFOX] = {\r\n    'ssrc': 'ssrc',\r\n    'packetsReceived': 'packetsReceived',\r\n    'packetsLost': 'packetsLost',\r\n    'packetsSent': 'packetsSent',\r\n    'bytesReceived': 'bytesReceived',\r\n    'bytesSent': 'bytesSent',\r\n    'framerateMean': 'framerateMean',\r\n    'ip': 'address',\r\n    'port': 'port',\r\n    'protocol': 'protocol'\r\n};\r\nKEYS_BY_BROWSER_TYPE[browsers.CHROME] = {\r\n    'receiveBandwidth': 'googAvailableReceiveBandwidth',\r\n    'sendBandwidth': 'googAvailableSendBandwidth',\r\n    'remoteAddress': 'googRemoteAddress',\r\n    'transportType': 'googTransportType',\r\n    'localAddress': 'googLocalAddress',\r\n    'activeConnection': 'googActiveConnection',\r\n    'ssrc': 'ssrc',\r\n    'packetsReceived': 'packetsReceived',\r\n    'packetsSent': 'packetsSent',\r\n    'packetsLost': 'packetsLost',\r\n    'bytesReceived': 'bytesReceived',\r\n    'bytesSent': 'bytesSent',\r\n    'googCodecName': 'googCodecName',\r\n    'googFrameHeightReceived': 'googFrameHeightReceived',\r\n    'googFrameWidthReceived': 'googFrameWidthReceived',\r\n    'googFrameHeightSent': 'googFrameHeightSent',\r\n    'googFrameWidthSent': 'googFrameWidthSent',\r\n    'googFrameRateReceived': 'googFrameRateReceived',\r\n    'googFrameRateSent': 'googFrameRateSent',\r\n    'audioInputLevel': 'audioInputLevel',\r\n    'audioOutputLevel': 'audioOutputLevel',\r\n    'currentRoundTripTime': 'googRtt',\r\n    'remoteCandidateType': 'googRemoteCandidateType',\r\n    'localCandidateType': 'googLocalCandidateType',\r\n    'ip': 'ip',\r\n    'port': 'port',\r\n    'protocol': 'protocol'\r\n};\r\nKEYS_BY_BROWSER_TYPE[browsers.OPERA]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.NWJS]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.ELECTRON]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.SAFARI]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\nKEYS_BY_BROWSER_TYPE[browsers.REACT_NATIVE]\r\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\r\n\r\n/**\r\n * Calculates packet lost percent using the number of lost packets and the\r\n * number of all packet.\r\n * @param lostPackets the number of lost packets\r\n * @param totalPackets the number of all packets.\r\n * @returns {number} packet loss percent\r\n */\r\nfunction calculatePacketLoss(lostPackets, totalPackets) {\r\n    if (!totalPackets || totalPackets <= 0\r\n            || !lostPackets || lostPackets <= 0) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.round((lostPackets / totalPackets) * 100);\r\n}\r\n\r\n/**\r\n * Holds \"statistics\" for a single SSRC.\r\n * @constructor\r\n */\r\nfunction SsrcStats() {\r\n    this.loss = {};\r\n    this.bitrate = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    this.resolution = {};\r\n    this.framerate = 0;\r\n    this.codec = '';\r\n}\r\n\r\n/**\r\n * Sets the \"loss\" object.\r\n * @param loss the value to set.\r\n */\r\nSsrcStats.prototype.setLoss = function(loss) {\r\n    this.loss = loss || {};\r\n};\r\n\r\n/**\r\n * Sets resolution that belong to the ssrc represented by this instance.\r\n * @param resolution new resolution value to be set.\r\n */\r\nSsrcStats.prototype.setResolution = function(resolution) {\r\n    this.resolution = resolution || {};\r\n};\r\n\r\n/**\r\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\r\n * the respective fields of the \"bitrate\" field of this object.\r\n * @param bitrate an object holding the values to add.\r\n */\r\nSsrcStats.prototype.addBitrate = function(bitrate) {\r\n    this.bitrate.download += bitrate.download;\r\n    this.bitrate.upload += bitrate.upload;\r\n};\r\n\r\n/**\r\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\r\n * represented by this instance.\r\n */\r\nSsrcStats.prototype.resetBitrate = function() {\r\n    this.bitrate.download = 0;\r\n    this.bitrate.upload = 0;\r\n};\r\n\r\n/**\r\n * Sets the \"framerate\".\r\n * @param framerate the value to set.\r\n */\r\nSsrcStats.prototype.setFramerate = function(framerate) {\r\n    this.framerate = framerate || 0;\r\n};\r\n\r\nSsrcStats.prototype.setCodec = function(codec) {\r\n    this.codec = codec || '';\r\n};\r\n\r\n/**\r\n *\r\n */\r\nfunction ConferenceStats() {\r\n\r\n    /**\r\n     * The bandwidth\r\n     * @type {{}}\r\n     */\r\n    this.bandwidth = {};\r\n\r\n    /**\r\n     * The bit rate\r\n     * @type {{}}\r\n     */\r\n    this.bitrate = {};\r\n\r\n    /**\r\n     * The packet loss rate\r\n     * @type {{}}\r\n     */\r\n    this.packetLoss = null;\r\n\r\n    /**\r\n     * Array with the transport information.\r\n     * @type {Array}\r\n     */\r\n    this.transport = [];\r\n}\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * <tt>StatsCollector</tt> registers for stats updates of given\r\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\r\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\r\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\r\n * instance as an event source.\r\n *\r\n * @param peerconnection WebRTC PeerConnection object.\r\n * @param audioLevelsInterval\r\n * @param statsInterval stats refresh interval given in ms.\r\n * @param eventEmitter\r\n * @constructor\r\n */\r\nexport default function StatsCollector(\r\n        peerconnection,\r\n        audioLevelsInterval,\r\n        statsInterval,\r\n        eventEmitter) {\r\n    // StatsCollector depends entirely on the format of the reports returned by\r\n    // RTCPeerConnection#getStats. Given that the value of\r\n    // browser#getName() is very unlikely to change at runtime, it\r\n    // makes sense to discover whether StatsCollector supports the executing\r\n    // browser as soon as possible. Otherwise, (1) getStatValue would have to\r\n    // needlessly check a \"static\" condition multiple times very very often and\r\n    // (2) the lack of support for the executing browser would be discovered and\r\n    // reported multiple times very very often too late in the execution in some\r\n    // totally unrelated callback.\r\n    /**\r\n     * The browser type supported by this StatsCollector. In other words, the\r\n     * type of the browser which initialized this StatsCollector\r\n     * instance.\r\n     * @private\r\n     */\r\n    this._browserType = browser.getName();\r\n    const keys = KEYS_BY_BROWSER_TYPE[this._browserType];\r\n\r\n    if (!keys) {\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw `The browser type '${this._browserType}' isn't supported!`;\r\n    }\r\n\r\n    /**\r\n     * Whether to use the Promise-based getStats API or not.\r\n     * @type {boolean}\r\n     */\r\n    this._usesPromiseGetStats\r\n        = browser.isSafari() || browser.isFirefox();\r\n\r\n    /**\r\n     * The function which is to be used to retrieve the value associated in a\r\n     * report returned by RTCPeerConnection#getStats with a lib-jitsi-meet\r\n     * browser-agnostic name/key.\r\n     *\r\n     * @function\r\n     * @private\r\n     */\r\n    this._getStatValue\r\n        = this._usesPromiseGetStats\r\n            ? this._defineNewGetStatValueMethod(keys)\r\n            : this._defineGetStatValueMethod(keys);\r\n\r\n    this.peerconnection = peerconnection;\r\n    this.baselineAudioLevelsReport = null;\r\n    this.currentAudioLevelsReport = null;\r\n    this.currentStatsReport = null;\r\n    this.previousStatsReport = null;\r\n    this.audioLevelReportHistory = {};\r\n    this.audioLevelsIntervalId = null;\r\n    this.eventEmitter = eventEmitter;\r\n    this.conferenceStats = new ConferenceStats();\r\n\r\n    // Updates stats interval\r\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\r\n\r\n    this.statsIntervalId = null;\r\n    this.statsIntervalMilis = statsInterval;\r\n\r\n    /**\r\n     * Maps SSRC numbers to {@link SsrcStats}.\r\n     * @type {Map<number,SsrcStats}\r\n     */\r\n    this.ssrc2stats = new Map();\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Stops stats updates.\r\n */\r\nStatsCollector.prototype.stop = function() {\r\n    if (this.audioLevelsIntervalId) {\r\n        clearInterval(this.audioLevelsIntervalId);\r\n        this.audioLevelsIntervalId = null;\r\n    }\r\n\r\n    if (this.statsIntervalId) {\r\n        clearInterval(this.statsIntervalId);\r\n        this.statsIntervalId = null;\r\n    }\r\n};\r\n\r\n/**\r\n * Callback passed to <tt>getStats</tt> method.\r\n * @param error an error that occurred on <tt>getStats</tt> call.\r\n */\r\nStatsCollector.prototype.errorCallback = function(error) {\r\n    GlobalOnErrorHandler.callErrorHandler(error);\r\n    logger.error('Get stats error', error);\r\n    this.stop();\r\n};\r\n\r\n/**\r\n * Starts stats updates.\r\n */\r\nStatsCollector.prototype.start = function(startAudioLevelStats) {\r\n    if (startAudioLevelStats) {\r\n        if (browser.supportsReceiverStats()) {\r\n            logger.info('Using RTCRtpSynchronizationSource for remote audio levels');\r\n        }\r\n        this.audioLevelsIntervalId = setInterval(\r\n            () => {\r\n                if (browser.supportsReceiverStats()) {\r\n                    const audioLevels = this.peerconnection.getAudioLevels();\r\n\r\n                    for (const ssrc in audioLevels) {\r\n                        if (audioLevels.hasOwnProperty(ssrc)) {\r\n                            // Use a scaling factor of 2.5 to report the same\r\n                            // audio levels that getStats reports.\r\n                            const audioLevel = audioLevels[ssrc] * 2.5;\r\n\r\n                            this.eventEmitter.emit(\r\n                                StatisticsEvents.AUDIO_LEVEL,\r\n                                this.peerconnection,\r\n                                Number.parseInt(ssrc, 10),\r\n                                audioLevel,\r\n                                false /* isLocal */);\r\n                        }\r\n                    }\r\n                } else {\r\n                    // Interval updates\r\n                    this.peerconnection.getStats(\r\n                        report => {\r\n                            let results = null;\r\n\r\n                            if (!report || !report.result\r\n                                || typeof report.result !== 'function') {\r\n                                results = report;\r\n                            } else {\r\n                                results = report.result();\r\n                            }\r\n                            this.currentAudioLevelsReport = results;\r\n                            if (this._usesPromiseGetStats) {\r\n                                this.processNewAudioLevelReport();\r\n                            } else {\r\n                                this.processAudioLevelReport();\r\n                            }\r\n\r\n                            this.baselineAudioLevelsReport\r\n                                = this.currentAudioLevelsReport;\r\n                        },\r\n                        error => this.errorCallback(error)\r\n                    );\r\n                }\r\n            },\r\n            this.audioLevelsIntervalMilis\r\n        );\r\n    }\r\n\r\n    this.statsIntervalId = setInterval(\r\n        () => {\r\n            // Interval updates\r\n            this.peerconnection.getStats(\r\n                report => {\r\n                    let results = null;\r\n\r\n                    if (!report || !report.result\r\n                        || typeof report.result !== 'function') {\r\n                        // firefox\r\n                        results = report;\r\n                    } else {\r\n                        // chrome\r\n                        results = report.result();\r\n                    }\r\n\r\n                    this.currentStatsReport = results;\r\n                    try {\r\n                        if (this._usesPromiseGetStats) {\r\n                            this.processNewStatsReport();\r\n                        } else {\r\n                            this.processStatsReport();\r\n                        }\r\n                    } catch (e) {\r\n                        GlobalOnErrorHandler.callErrorHandler(e);\r\n                        logger.error(`Unsupported key:${e}`, e);\r\n                    }\r\n\r\n                    this.previousStatsReport = this.currentStatsReport;\r\n                },\r\n                error => this.errorCallback(error)\r\n            );\r\n        },\r\n        this.statsIntervalMilis\r\n    );\r\n};\r\n\r\n/**\r\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\r\n * gets the value from a specific report returned by RTCPeerConnection#getStats\r\n * associated with a lib-jitsi-meet browser-agnostic name.\r\n *\r\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\r\n * names to RTCPeerConnection#getStats browser-specific keys\r\n */\r\nStatsCollector.prototype._defineGetStatValueMethod = function(keys) {\r\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\r\n    // to a browser-specific key of a report returned by\r\n    // RTCPeerConnection#getStats.\r\n    const keyFromName = function(name) {\r\n        const key = keys[name];\r\n\r\n        if (key) {\r\n            return key;\r\n        }\r\n\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw `The property '${name}' isn't supported!`;\r\n    };\r\n\r\n    // Define the function which retrieves the value from a specific report\r\n    // returned by RTCPeerConnection#getStats associated with a given\r\n    // browser-specific key.\r\n    let itemStatByKey;\r\n\r\n    switch (this._browserType) {\r\n    case browsers.CHROME:\r\n    case browsers.OPERA:\r\n    case browsers.NWJS:\r\n    case browsers.ELECTRON:\r\n        // TODO What about other types of browser which are based on Chrome such\r\n        // as NW.js? Every time we want to support a new type browser we have to\r\n        // go and add more conditions (here and in multiple other places).\r\n        // Cannot we do a feature detection instead of a browser type check? For\r\n        // example, if item has a stat property of type function, then it's very\r\n        // likely that whoever defined it wanted you to call it in order to\r\n        // retrieve the value associated with a specific key.\r\n        itemStatByKey = (item, key) => item.stat(key);\r\n        break;\r\n    case browsers.REACT_NATIVE:\r\n        // The implementation provided by react-native-webrtc follows the\r\n        // Objective-C WebRTC API: RTCStatsReport has a values property of type\r\n        // Array in which each element is a key-value pair.\r\n        itemStatByKey = function(item, key) {\r\n            let value;\r\n\r\n            item.values.some(pair => {\r\n                if (pair.hasOwnProperty(key)) {\r\n                    value = pair[key];\r\n\r\n                    return true;\r\n                }\r\n\r\n                return false;\r\n\r\n            });\r\n\r\n            return value;\r\n        };\r\n        break;\r\n    default:\r\n        itemStatByKey = (item, key) => item[key];\r\n    }\r\n\r\n    // Compose the 2 functions defined above to get a function which retrieves\r\n    // the value from a specific report returned by RTCPeerConnection#getStats\r\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\r\n    return (item, name) => itemStatByKey(item, keyFromName(name));\r\n};\r\n\r\n/**\r\n * Obtains a stat value from given stat and converts it to a non-negative\r\n * number. If the value is either invalid or negative then 0 will be returned.\r\n * @param report\r\n * @param {string} name\r\n * @return {number}\r\n * @private\r\n */\r\nStatsCollector.prototype.getNonNegativeStat = function(report, name) {\r\n    let value = this._getStatValue(report, name);\r\n\r\n    if (typeof value !== 'number') {\r\n        value = Number(value);\r\n    }\r\n\r\n    if (isNaN(value)) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.max(0, value);\r\n};\r\n\r\n/* eslint-disable no-continue */\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processStatsReport = function() {\r\n    if (!this.previousStatsReport) {\r\n        return;\r\n    }\r\n\r\n    const getStatValue = this._getStatValue;\r\n    const byteSentStats = {};\r\n\r\n    for (const idx in this.currentStatsReport) {\r\n        if (!this.currentStatsReport.hasOwnProperty(idx)) {\r\n            continue;\r\n        }\r\n        const now = this.currentStatsReport[idx];\r\n\r\n        // The browser API may return \"undefined\" values in the array\r\n        if (!now) {\r\n            continue;\r\n        }\r\n\r\n        try {\r\n            const receiveBandwidth = getStatValue(now, 'receiveBandwidth');\r\n            const sendBandwidth = getStatValue(now, 'sendBandwidth');\r\n\r\n            if (receiveBandwidth || sendBandwidth) {\r\n                this.conferenceStats.bandwidth = {\r\n                    'download': Math.round(receiveBandwidth / 1000),\r\n                    'upload': Math.round(sendBandwidth / 1000)\r\n                };\r\n            }\r\n        } catch (e) { /* not supported*/ }\r\n\r\n        if (now.type === 'googCandidatePair') {\r\n            let active, ip, localCandidateType, localip,\r\n                remoteCandidateType, rtt, type;\r\n\r\n            try {\r\n                active = getStatValue(now, 'activeConnection');\r\n                if (!active) {\r\n                    continue;\r\n                }\r\n\r\n                ip = getStatValue(now, 'remoteAddress');\r\n                type = getStatValue(now, 'transportType');\r\n                localip = getStatValue(now, 'localAddress');\r\n                localCandidateType = getStatValue(now, 'localCandidateType');\r\n                remoteCandidateType = getStatValue(now, 'remoteCandidateType');\r\n                rtt = this.getNonNegativeStat(now, 'currentRoundTripTime');\r\n            } catch (e) { /* not supported*/ }\r\n            if (!ip || !type || !localip || active !== 'true') {\r\n                continue;\r\n            }\r\n\r\n            // Save the address unless it has been saved already.\r\n            const conferenceStatsTransport = this.conferenceStats.transport;\r\n\r\n            if (!conferenceStatsTransport.some(\r\n                    t =>\r\n                        t.ip === ip\r\n                            && t.type === type\r\n                            && t.localip === localip)) {\r\n                conferenceStatsTransport.push({\r\n                    ip,\r\n                    type,\r\n                    localip,\r\n                    p2p: this.peerconnection.isP2P,\r\n                    localCandidateType,\r\n                    remoteCandidateType,\r\n                    rtt\r\n                });\r\n            }\r\n            continue;\r\n        }\r\n\r\n        if (now.type === 'candidatepair') {\r\n            // we need succeeded and selected pairs only\r\n            if (now.state !== 'succeeded' || !now.selected) {\r\n                continue;\r\n            }\r\n\r\n            const local = this.currentStatsReport[now.localCandidateId];\r\n            const remote = this.currentStatsReport[now.remoteCandidateId];\r\n\r\n            this.conferenceStats.transport.push({\r\n                ip: `${remote.ipAddress}:${remote.portNumber}`,\r\n                type: local.transport,\r\n                localip: `${local.ipAddress}:${local.portNumber}`,\r\n                p2p: this.peerconnection.isP2P,\r\n                localCandidateType: local.candidateType,\r\n                remoteCandidateType: remote.candidateType\r\n            });\r\n        }\r\n\r\n        if (now.type !== 'ssrc' && now.type !== 'outboundrtp'\r\n            && now.type !== 'inboundrtp' && now.type !== 'track') {\r\n            continue;\r\n        }\r\n\r\n        const before = this.previousStatsReport[idx];\r\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\r\n\r\n        // If type=\"track\", take the first SSRC from ssrcIds.\r\n        if (now.type === 'track' && Array.isArray(now.ssrcIds)) {\r\n            ssrc = Number(now.ssrcIds[0]);\r\n        }\r\n\r\n        if (!before || !ssrc) {\r\n            continue;\r\n        }\r\n\r\n        // isRemote is available only in FF and is ignored in case of chrome\r\n        // according to the spec\r\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcrtpstreamstats-isremote\r\n        // when isRemote is true indicates that the measurements were done at\r\n        // the remote endpoint and reported in an RTCP RR/XR.\r\n        // Fixes a problem where we are calculating local stats wrong adding\r\n        // the sent bytes to the local download bitrate.\r\n        // In new W3 stats spec, type=\"track\" has a remoteSource boolean\r\n        // property.\r\n        if (now.isRemote === true || now.remoteSource === true) {\r\n            continue;\r\n        }\r\n\r\n        let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n        if (!ssrcStats) {\r\n            ssrcStats = new SsrcStats();\r\n            this.ssrc2stats.set(ssrc, ssrcStats);\r\n        }\r\n\r\n        let isDownloadStream = true;\r\n        let key = 'packetsReceived';\r\n        let packetsNow = getStatValue(now, key);\r\n\r\n        if (typeof packetsNow === 'undefined'\r\n            || packetsNow === null || packetsNow === '') {\r\n            isDownloadStream = false;\r\n            key = 'packetsSent';\r\n            packetsNow = getStatValue(now, key);\r\n            if (typeof packetsNow === 'undefined' || packetsNow === null) {\r\n                logger.warn('No packetsReceived nor packetsSent stat found');\r\n            }\r\n        }\r\n        if (!packetsNow || packetsNow < 0) {\r\n            packetsNow = 0;\r\n        }\r\n\r\n        const packetsBefore = this.getNonNegativeStat(before, key);\r\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\r\n\r\n        const packetsLostNow\r\n            = this.getNonNegativeStat(now, 'packetsLost');\r\n        const packetsLostBefore\r\n            = this.getNonNegativeStat(before, 'packetsLost');\r\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\r\n\r\n        ssrcStats.setLoss({\r\n            packetsTotal: packetsDiff + packetsLostDiff,\r\n            packetsLost: packetsLostDiff,\r\n            isDownloadStream\r\n        });\r\n\r\n        const bytesReceivedNow\r\n            = this.getNonNegativeStat(now, 'bytesReceived');\r\n        const bytesReceivedBefore\r\n            = this.getNonNegativeStat(before, 'bytesReceived');\r\n        const bytesReceived\r\n            = Math.max(0, bytesReceivedNow - bytesReceivedBefore);\r\n\r\n        let bytesSent = 0;\r\n\r\n        // TODO: clean this mess up!\r\n        let nowBytesTransmitted = getStatValue(now, 'bytesSent');\r\n\r\n        if (typeof nowBytesTransmitted === 'number'\r\n            || typeof nowBytesTransmitted === 'string') {\r\n            nowBytesTransmitted = Number(nowBytesTransmitted);\r\n            if (!isNaN(nowBytesTransmitted)) {\r\n                byteSentStats[ssrc] = nowBytesTransmitted;\r\n                if (nowBytesTransmitted > 0) {\r\n                    bytesSent = nowBytesTransmitted\r\n                        - getStatValue(before, 'bytesSent');\r\n                }\r\n            }\r\n        }\r\n        bytesSent = Math.max(0, bytesSent);\r\n\r\n        const timeMs = now.timestamp - before.timestamp;\r\n        let bitrateReceivedKbps = 0, bitrateSentKbps = 0;\r\n\r\n        if (timeMs > 0) {\r\n            // TODO is there any reason to round here?\r\n            bitrateReceivedKbps = Math.round((bytesReceived * 8) / timeMs);\r\n            bitrateSentKbps = Math.round((bytesSent * 8) / timeMs);\r\n        }\r\n\r\n        ssrcStats.addBitrate({\r\n            'download': bitrateReceivedKbps,\r\n            'upload': bitrateSentKbps\r\n        });\r\n\r\n        const resolution = {\r\n            height: null,\r\n            width: null\r\n        };\r\n\r\n        try {\r\n            let height, width;\r\n\r\n            if ((height = getStatValue(now, 'googFrameHeightReceived'))\r\n                && (width = getStatValue(now, 'googFrameWidthReceived'))) {\r\n                resolution.height = height;\r\n                resolution.width = width;\r\n            } else if ((height = getStatValue(now, 'googFrameHeightSent'))\r\n                && (width = getStatValue(now, 'googFrameWidthSent'))) {\r\n                resolution.height = height;\r\n                resolution.width = width;\r\n            }\r\n        } catch (e) { /* not supported*/ }\r\n\r\n        // Tries to get frame rate\r\n        let frameRate;\r\n\r\n        try {\r\n            frameRate = getStatValue(now, 'googFrameRateReceived')\r\n                || getStatValue(now, 'googFrameRateSent') || 0;\r\n        } catch (e) {\r\n            // if it fails with previous properties(chrome),\r\n            // let's try with another one (FF)\r\n            try {\r\n                frameRate = this.getNonNegativeStat(now, 'framerateMean');\r\n            } catch (err) { /* not supported*/ }\r\n        }\r\n        ssrcStats.setFramerate(Math.round(frameRate || 0));\r\n\r\n        if (resolution.height && resolution.width) {\r\n            ssrcStats.setResolution(resolution);\r\n        } else {\r\n            ssrcStats.setResolution(null);\r\n        }\r\n\r\n        let codec;\r\n\r\n        // Try to get the codec for later reporting.\r\n        try {\r\n            codec = getStatValue(now, 'googCodecName') || '';\r\n        } catch (e) { /* not supported*/ }\r\n\r\n        ssrcStats.setCodec(codec);\r\n    }\r\n\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\r\n\r\n    this._processAndEmitReport();\r\n};\r\n\r\n/**\r\n *\r\n */\r\nStatsCollector.prototype._processAndEmitReport = function() {\r\n    // process stats\r\n    const totalPackets = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    const lostPackets = {\r\n        download: 0,\r\n        upload: 0\r\n    };\r\n    let bitrateDownload = 0;\r\n    let bitrateUpload = 0;\r\n    const resolutions = {};\r\n    const framerates = {};\r\n    const codecs = {};\r\n    let audioBitrateDownload = 0;\r\n    let audioBitrateUpload = 0;\r\n    let audioCodec = '';\r\n    let videoBitrateDownload = 0;\r\n    let videoBitrateUpload = 0;\r\n    let videoCodec = '';\r\n\r\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\r\n        // process packet loss stats\r\n        const loss = ssrcStats.loss;\r\n        const type = loss.isDownloadStream ? 'download' : 'upload';\r\n\r\n        totalPackets[type] += loss.packetsTotal;\r\n        lostPackets[type] += loss.packetsLost;\r\n\r\n        // process bitrate stats\r\n        bitrateDownload += ssrcStats.bitrate.download;\r\n        bitrateUpload += ssrcStats.bitrate.upload;\r\n\r\n        // collect resolutions and framerates\r\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\r\n\r\n        if (track) {\r\n            if (track.isAudioTrack()) {\r\n                audioBitrateDownload += ssrcStats.bitrate.download;\r\n                audioBitrateUpload += ssrcStats.bitrate.upload;\r\n                audioCodec = ssrcStats.codec;\r\n            } else {\r\n                videoBitrateDownload += ssrcStats.bitrate.download;\r\n                videoBitrateUpload += ssrcStats.bitrate.upload;\r\n                videoCodec = ssrcStats.codec;\r\n            }\r\n\r\n            const participantId = track.getParticipantId();\r\n\r\n            if (participantId) {\r\n                const resolution = ssrcStats.resolution;\r\n\r\n                if (resolution.width\r\n                        && resolution.height\r\n                        && resolution.width !== -1\r\n                        && resolution.height !== -1) {\r\n                    const userResolutions = resolutions[participantId] || {};\r\n\r\n                    userResolutions[ssrc] = resolution;\r\n                    resolutions[participantId] = userResolutions;\r\n                }\r\n                if (ssrcStats.framerate !== 0) {\r\n                    const userFramerates = framerates[participantId] || {};\r\n\r\n                    userFramerates[ssrc] = ssrcStats.framerate;\r\n                    framerates[participantId] = userFramerates;\r\n                }\r\n                if (audioCodec.length && videoCodec.length) {\r\n                    const codecDesc = {\r\n                        'audio': audioCodec,\r\n                        'video': videoCodec\r\n                    };\r\n\r\n                    const userCodecs = codecs[participantId] || {};\r\n\r\n                    userCodecs[ssrc] = codecDesc;\r\n                    codecs[participantId] = userCodecs;\r\n                }\r\n            } else {\r\n                logger.error(`No participant ID returned by ${track}`);\r\n            }\r\n        }\r\n\r\n        ssrcStats.resetBitrate();\r\n    }\r\n\r\n    this.conferenceStats.bitrate = {\r\n        'upload': bitrateUpload,\r\n        'download': bitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.bitrate.audio = {\r\n        'upload': audioBitrateUpload,\r\n        'download': audioBitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.bitrate.video = {\r\n        'upload': videoBitrateUpload,\r\n        'download': videoBitrateDownload\r\n    };\r\n\r\n    this.conferenceStats.packetLoss = {\r\n        total:\r\n            calculatePacketLoss(\r\n                lostPackets.download + lostPackets.upload,\r\n                totalPackets.download + totalPackets.upload),\r\n        download:\r\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\r\n        upload:\r\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\r\n    };\r\n\r\n    const avgAudioLevels = {};\r\n    let localAvgAudioLevels;\r\n\r\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\r\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\r\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\r\n\r\n        if (isLocal) {\r\n            localAvgAudioLevels = avgAudioLevel;\r\n        } else {\r\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\r\n\r\n            if (track) {\r\n                const participantId = track.getParticipantId();\r\n\r\n                if (participantId) {\r\n                    avgAudioLevels[participantId] = avgAudioLevel;\r\n                }\r\n            }\r\n        }\r\n    });\r\n    this.audioLevelReportHistory = {};\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.CONNECTION_STATS,\r\n        this.peerconnection,\r\n        {\r\n            'bandwidth': this.conferenceStats.bandwidth,\r\n            'bitrate': this.conferenceStats.bitrate,\r\n            'packetLoss': this.conferenceStats.packetLoss,\r\n            'resolution': resolutions,\r\n            'framerate': framerates,\r\n            'codec': codecs,\r\n            'transport': this.conferenceStats.transport,\r\n            localAvgAudioLevels,\r\n            avgAudioLevels\r\n        });\r\n    this.conferenceStats.transport = [];\r\n};\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processAudioLevelReport = function() {\r\n    if (!this.baselineAudioLevelsReport) {\r\n        return;\r\n    }\r\n\r\n    const getStatValue = this._getStatValue;\r\n\r\n    for (const idx in this.currentAudioLevelsReport) {\r\n        if (!this.currentAudioLevelsReport.hasOwnProperty(idx)) {\r\n            continue;\r\n        }\r\n\r\n        const now = this.currentAudioLevelsReport[idx];\r\n\r\n        if (now.type !== 'ssrc' && now.type !== 'track') {\r\n            continue;\r\n        }\r\n\r\n        const before = this.baselineAudioLevelsReport[idx];\r\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\r\n\r\n        if (!ssrc && Array.isArray(now.ssrcIds)) {\r\n            ssrc = Number(now.ssrcIds[0]);\r\n        }\r\n\r\n        if (!before) {\r\n            logger.warn(`${ssrc} not enough data`);\r\n            continue;\r\n        }\r\n\r\n        if (!ssrc) {\r\n            if ((Date.now() - now.timestamp) < 3000) {\r\n                logger.warn('No ssrc: ');\r\n            }\r\n            continue;\r\n        }\r\n\r\n        // Audio level\r\n        let audioLevel;\r\n\r\n        try {\r\n            audioLevel\r\n                = getStatValue(now, 'audioInputLevel')\r\n                    || getStatValue(now, 'audioOutputLevel');\r\n        } catch (e) { /* not supported*/\r\n            logger.warn('Audio Levels are not available in the statistics.');\r\n            clearInterval(this.audioLevelsIntervalId);\r\n\r\n            return;\r\n        }\r\n\r\n        if (audioLevel) {\r\n            let isLocal;\r\n\r\n            // If type=\"ssrc\" (legacy) check whether they are received packets.\r\n            if (now.type === 'ssrc') {\r\n                isLocal = !getStatValue(now, 'packetsReceived');\r\n\r\n            // If type=\"track\", check remoteSource boolean property.\r\n            } else {\r\n                isLocal = !now.remoteSource;\r\n            }\r\n\r\n            // According to the W3C WebRTC Stats spec, audioLevel should be in\r\n            // 0..1 range (0 == silence). However browsers don't behave that\r\n            // way so we must convert it to 0..1.\r\n            // TODO: Can't find specs about what this value really is, but it\r\n            // seems to vary between 0 and around 32k.\r\n            audioLevel = audioLevel / 32767;\r\n\r\n            if (!(ssrc in this.audioLevelReportHistory)) {\r\n                this.audioLevelReportHistory[ssrc] = {\r\n                    isLocal,\r\n                    data: []\r\n                };\r\n            }\r\n            this.audioLevelReportHistory[ssrc].data.push(audioLevel);\r\n\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.AUDIO_LEVEL,\r\n                this.peerconnection,\r\n                ssrc,\r\n                audioLevel,\r\n                isLocal);\r\n        }\r\n    }\r\n};\r\n\r\n/* eslint-enable no-continue */\r\n\r\n/**\r\n * New promised based getStats report processing.\r\n * Tested with chrome, firefox and safari. Not switching it on for chrome as\r\n * frameRate stat is missing and calculating it using framesSent,\r\n * gives values double the values seen in webrtc-internals.\r\n * https://w3c.github.io/webrtc-stats/\r\n */\r\n\r\n/**\r\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\r\n * gets the value from a specific report returned by RTCPeerConnection#getStats\r\n * associated with a lib-jitsi-meet browser-agnostic name in case of using\r\n * Promised based getStats.\r\n *\r\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\r\n * names to RTCPeerConnection#getStats browser-specific keys\r\n */\r\nStatsCollector.prototype._defineNewGetStatValueMethod = function(keys) {\r\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\r\n    // to a browser-specific key of a report returned by\r\n    // RTCPeerConnection#getStats.\r\n    const keyFromName = function(name) {\r\n        const key = keys[name];\r\n\r\n        if (key) {\r\n            return key;\r\n        }\r\n\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw `The property '${name}' isn't supported!`;\r\n    };\r\n\r\n    // Compose the 2 functions defined above to get a function which retrieves\r\n    // the value from a specific report returned by RTCPeerConnection#getStats\r\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\r\n    return (item, name) => item[keyFromName(name)];\r\n};\r\n\r\n/**\r\n * Converts the value to a non-negative number.\r\n * If the value is either invalid or negative then 0 will be returned.\r\n * @param {*} v\r\n * @return {number}\r\n * @private\r\n */\r\nStatsCollector.prototype.getNonNegativeValue = function(v) {\r\n    let value = v;\r\n\r\n    if (typeof value !== 'number') {\r\n        value = Number(value);\r\n    }\r\n\r\n    if (isNaN(value)) {\r\n        return 0;\r\n    }\r\n\r\n    return Math.max(0, value);\r\n};\r\n\r\n/**\r\n * Calculates bitrate between before and now using a supplied field name and its\r\n * value in the stats.\r\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\r\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\r\n * previous stats.\r\n * @param fieldName the field to use for calculations.\r\n * @return {number} the calculated bitrate between now and before.\r\n * @private\r\n */\r\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\r\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\r\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\r\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\r\n\r\n    const timeMs = now.timestamp - before.timestamp;\r\n    let bitrateKbps = 0;\r\n\r\n    if (timeMs > 0) {\r\n        // TODO is there any reason to round here?\r\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\r\n    }\r\n\r\n    return bitrateKbps;\r\n};\r\n\r\n/**\r\n * Stats processing new getStats logic.\r\n */\r\nStatsCollector.prototype.processNewStatsReport = function() {\r\n    if (!this.previousStatsReport) {\r\n        return;\r\n    }\r\n\r\n    const getStatValue = this._getStatValue;\r\n    const byteSentStats = {};\r\n\r\n    this.currentStatsReport.forEach(now => {\r\n\r\n        // RTCIceCandidatePairStats\r\n        // https://w3c.github.io/webrtc-stats/#candidatepair-dict*\r\n        if (now.type === 'candidate-pair'\r\n            && now.nominated\r\n            && now.state === 'succeeded') {\r\n\r\n            const availableIncomingBitrate = now.availableIncomingBitrate;\r\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\r\n\r\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\r\n                this.conferenceStats.bandwidth = {\r\n                    'download': Math.round(availableIncomingBitrate / 1000),\r\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\r\n                };\r\n            }\r\n\r\n            const remoteUsedCandidate\r\n                = this.currentStatsReport.get(now.remoteCandidateId);\r\n            const localUsedCandidate\r\n                = this.currentStatsReport.get(now.localCandidateId);\r\n\r\n            // RTCIceCandidateStats\r\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\r\n            // safari currently does not provide ice candidates in stats\r\n            if (remoteUsedCandidate && localUsedCandidate) {\r\n                const remoteIpAddress = getStatValue(remoteUsedCandidate, 'ip');\r\n                const remotePort = getStatValue(remoteUsedCandidate, 'port');\r\n                const ip = `${remoteIpAddress}:${remotePort}`;\r\n\r\n                const localIpAddress = getStatValue(localUsedCandidate, 'ip');\r\n                const localPort = getStatValue(localUsedCandidate, 'port');\r\n\r\n                const localIp = `${localIpAddress}:${localPort}`;\r\n                const type = getStatValue(remoteUsedCandidate, 'protocol');\r\n\r\n                // Save the address unless it has been saved already.\r\n                const conferenceStatsTransport = this.conferenceStats.transport;\r\n\r\n                if (!conferenceStatsTransport.some(\r\n                        t =>\r\n                            t.ip === ip\r\n                            && t.type === type\r\n                            && t.localip === localIp)) {\r\n                    conferenceStatsTransport.push({\r\n                        ip,\r\n                        type,\r\n                        localIp,\r\n                        p2p: this.peerconnection.isP2P,\r\n                        localCandidateType: localUsedCandidate.candidateType,\r\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\r\n                        networkType: localUsedCandidate.networkType,\r\n                        rtt: now.currentRoundTripTime * 1000\r\n                    });\r\n                }\r\n            }\r\n\r\n        // RTCReceivedRtpStreamStats\r\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\r\n        // RTCSentRtpStreamStats\r\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\r\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\r\n            const before = this.previousStatsReport.get(now.id);\r\n            const ssrc = this.getNonNegativeValue(now.ssrc);\r\n\r\n            if (!before || !ssrc) {\r\n                return;\r\n            }\r\n\r\n            let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n            if (!ssrcStats) {\r\n                ssrcStats = new SsrcStats();\r\n                this.ssrc2stats.set(ssrc, ssrcStats);\r\n            }\r\n\r\n            let isDownloadStream = true;\r\n            let key = 'packetsReceived';\r\n\r\n            if (now.type === 'outbound-rtp') {\r\n                isDownloadStream = false;\r\n                key = 'packetsSent';\r\n            }\r\n\r\n            let packetsNow = now[key];\r\n\r\n            if (!packetsNow || packetsNow < 0) {\r\n                packetsNow = 0;\r\n            }\r\n\r\n            const packetsBefore = this.getNonNegativeValue(before[key]);\r\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\r\n\r\n            const packetsLostNow\r\n                = this.getNonNegativeValue(now.packetsLost);\r\n            const packetsLostBefore\r\n                = this.getNonNegativeValue(before.packetsLost);\r\n            const packetsLostDiff\r\n                = Math.max(0, packetsLostNow - packetsLostBefore);\r\n\r\n            ssrcStats.setLoss({\r\n                packetsTotal: packetsDiff + packetsLostDiff,\r\n                packetsLost: packetsLostDiff,\r\n                isDownloadStream\r\n            });\r\n\r\n            if (now.type === 'inbound-rtp') {\r\n\r\n                ssrcStats.addBitrate({\r\n                    'download': this._calculateBitrate(\r\n                                    now, before, 'bytesReceived'),\r\n                    'upload': 0\r\n                });\r\n\r\n                // RTCInboundRtpStreamStats\r\n                // https://w3c.github.io/webrtc-stats/#inboundrtpstats-dict*\r\n                // TODO: can we use framesDecoded for frame rate, available\r\n                // in chrome\r\n            } else {\r\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\r\n                ssrcStats.addBitrate({\r\n                    'download': 0,\r\n                    'upload': this._calculateBitrate(\r\n                                now, before, 'bytesSent')\r\n                });\r\n\r\n                // RTCOutboundRtpStreamStats\r\n                // https://w3c.github.io/webrtc-stats/#outboundrtpstats-dict*\r\n                // TODO: can we use framesEncoded for frame rate, available\r\n                // in chrome\r\n            }\r\n\r\n            // FF has framerateMean out of spec\r\n            const framerateMean = now.framerateMean;\r\n\r\n            if (framerateMean) {\r\n                ssrcStats.setFramerate(Math.round(framerateMean || 0));\r\n            }\r\n\r\n        // track for resolution\r\n        // RTCVideoHandlerStats\r\n        // https://w3c.github.io/webrtc-stats/#vststats-dict*\r\n        // RTCMediaHandlerStats\r\n        // https://w3c.github.io/webrtc-stats/#mststats-dict*\r\n        } else if (now.type === 'track') {\r\n\r\n            const resolution = {\r\n                height: now.frameHeight,\r\n                width: now.frameWidth\r\n            };\r\n\r\n            // Tries to get frame rate\r\n            let frameRate = now.framesPerSecond;\r\n\r\n            if (!frameRate) {\r\n                // we need to calculate it\r\n                const before = this.previousStatsReport.get(now.id);\r\n\r\n                if (before) {\r\n                    const timeMs = now.timestamp - before.timestamp;\r\n\r\n                    if (timeMs > 0 && now.framesSent) {\r\n                        const numberOfFramesSinceBefore\r\n                            = now.framesSent - before.framesSent;\r\n\r\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\r\n                    }\r\n                }\r\n\r\n                if (!frameRate) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            const trackIdentifier = now.trackIdentifier;\r\n            const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\r\n\r\n            if (!ssrc) {\r\n                return;\r\n            }\r\n            let ssrcStats = this.ssrc2stats.get(ssrc);\r\n\r\n            if (!ssrcStats) {\r\n                ssrcStats = new SsrcStats();\r\n                this.ssrc2stats.set(ssrc, ssrcStats);\r\n            }\r\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\r\n\r\n            if (resolution.height && resolution.width) {\r\n                ssrcStats.setResolution(resolution);\r\n            } else {\r\n                ssrcStats.setResolution(null);\r\n            }\r\n        }\r\n    });\r\n\r\n    this.eventEmitter.emit(\r\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\r\n\r\n    this._processAndEmitReport();\r\n};\r\n\r\n/**\r\n * Stats processing logic.\r\n */\r\nStatsCollector.prototype.processNewAudioLevelReport = function() {\r\n    if (!this.baselineAudioLevelsReport) {\r\n        return;\r\n    }\r\n\r\n    this.currentAudioLevelsReport.forEach(now => {\r\n        if (now.type !== 'track') {\r\n            return;\r\n        }\r\n\r\n        // Audio level\r\n        const audioLevel = now.audioLevel;\r\n\r\n        if (!audioLevel) {\r\n            return;\r\n        }\r\n\r\n        const trackIdentifier = now.trackIdentifier;\r\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\r\n\r\n        if (ssrc) {\r\n            const isLocal\r\n                = ssrc === this.peerconnection.getLocalSSRC(\r\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\r\n\r\n            this.eventEmitter.emit(\r\n                StatisticsEvents.AUDIO_LEVEL,\r\n                this.peerconnection,\r\n                ssrc,\r\n                audioLevel,\r\n                isLocal);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * End new promised based getStats processing methods.\r\n */\r\n","/**\r\n * Implements utility to forward events from one eventEmitter to another.\r\n * @param src {object} instance of EventEmitter or another class that implements\r\n * addListener method which will register listener to EventEmitter instance.\r\n * @param dest {object} instance of EventEmitter or another class that\r\n * implements emit method which will emit an event.\r\n */\r\nfunction EventEmitterForwarder(src, dest) {\r\n    if (!src || !dest || typeof src.addListener !== 'function'\r\n        || typeof dest.emit !== 'function') {\r\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\r\n    }\r\n    this.src = src;\r\n    this.dest = dest;\r\n}\r\n\r\n/**\r\n * Adds event to be forwarded from src to dest.\r\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\r\n * for.\r\n * @param dstEvent {string} the event that will be fired from dest.\r\n * @param arguments all other passed arguments are going to be fired with\r\n * dstEvent.\r\n */\r\nEventEmitterForwarder.prototype.forward = function(...args) {\r\n    const srcEvent = args[0];\r\n\r\n    // This will be the \"this\" value for emit function.\r\n\r\n    args[0] = this.dest;\r\n\r\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\r\n    this.src.addListener(\r\n        srcEvent,\r\n        Function.prototype.bind.apply(this.dest.emit, args));\r\n};\r\n\r\nmodule.exports = EventEmitterForwarder;\r\n","\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\n\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport { ParticipantConnectionStatus }\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport { ERROR_FEATURE_VERSION_MISMATCH } from './modules/xmpp/Caps';\r\nimport * as MediaType from './service/RTC/MediaType';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Represents a participant in (i.e. a member of) a conference.\r\n */\r\nexport default class JitsiParticipant {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Initializes a new JitsiParticipant instance.\r\n     *\r\n     * @constructor\r\n     * @param jid the conference XMPP jid\r\n     * @param conference\r\n     * @param displayName\r\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\r\n     * represent a hidden participant; otherwise, false.\r\n     * @param {string} statsID - optional participant statsID\r\n     * @param {string} status - the initial status if any.\r\n     * @param {object} identity - the xmpp identity\r\n     */\r\n    constructor(jid, conference, displayName, hidden, statsID, status, identity) {\r\n        this._jid = jid;\r\n        this._id = Strophe.getResourceFromJid(jid);\r\n        this._conference = conference;\r\n        this._displayName = displayName;\r\n        this._supportsDTMF = false;\r\n        this._tracks = [];\r\n        this._role = 'none';\r\n        this._status = status;\r\n        this._hidden = hidden;\r\n        this._statsID = statsID;\r\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\r\n        this._properties = {};\r\n        this._identity = identity;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * @returns {JitsiConference} The conference that this participant belongs\r\n     * to.\r\n     */\r\n    getConference() {\r\n        return this._conference;\r\n    }\r\n\r\n    /**\r\n     * Gets the value of a property of this participant.\r\n     */\r\n    getProperty(name) {\r\n        return this._properties[name];\r\n    }\r\n\r\n    /**\r\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\r\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\r\n     * muted status.\r\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\r\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\r\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\r\n     */\r\n    hasAnyVideoTrackWebRTCMuted() {\r\n        return (\r\n            this.getTracks().some(\r\n                jitsiTrack =>\r\n                    jitsiTrack.getType() === MediaType.VIDEO\r\n                        && jitsiTrack.isWebRTCTrackMuted()));\r\n    }\r\n\r\n    /**\r\n     * Updates participant's connection status.\r\n     * @param {string} state the current participant connection state.\r\n     * {@link ParticipantConnectionStatus}.\r\n     * @private\r\n     */\r\n    _setConnectionStatus(status) {\r\n        this._connectionStatus = status;\r\n    }\r\n\r\n    /**\r\n     * Return participant's connectivity status.\r\n     *\r\n     * @returns {string} the connection status\r\n     * <tt>ParticipantConnectionStatus</tt> of the user.\r\n     * {@link ParticipantConnectionStatus}.\r\n     */\r\n    getConnectionStatus() {\r\n        return this._connectionStatus;\r\n    }\r\n\r\n    /**\r\n     * Sets the value of a property of this participant, and fires an event if\r\n     * the value has changed.\r\n     * @name the name of the property.\r\n     * @value the value to set.\r\n     */\r\n    setProperty(name, value) {\r\n        const oldValue = this._properties[name];\r\n\r\n        if (value !== oldValue) {\r\n            this._properties[name] = value;\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\r\n                this,\r\n                name,\r\n                oldValue,\r\n                value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\r\n     * participant.\r\n     */\r\n    getTracks() {\r\n        return this._tracks.slice();\r\n    }\r\n\r\n    /**\r\n     * @param {MediaType} mediaType\r\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\r\n     * participant, for given media type.\r\n     */\r\n    getTracksByMediaType(mediaType) {\r\n        return this.getTracks().filter(track => track.getType() === mediaType);\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The ID of this participant.\r\n     */\r\n    getId() {\r\n        return this._id;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The JID of this participant.\r\n     */\r\n    getJid() {\r\n        return this._jid;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The human-readable display name of this participant.\r\n     */\r\n    getDisplayName() {\r\n        return this._displayName;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The stats ID of this participant.\r\n     */\r\n    getStatsID() {\r\n        return this._statsID;\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The status of the participant.\r\n     */\r\n    getStatus() {\r\n        return this._status;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant is a moderator or not.\r\n     */\r\n    isModerator() {\r\n        return this._role === 'moderator';\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\r\n     * special system participants may want to join hidden (like for example the\r\n     * recorder).\r\n     */\r\n    isHidden() {\r\n        return this._hidden;\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant has muted their audio.\r\n     */\r\n    isAudioMuted() {\r\n        return this._isMediaTypeMuted(MediaType.AUDIO);\r\n    }\r\n\r\n    /**\r\n     * Determines whether all JitsiTracks which are of a specific MediaType and\r\n     * which belong to this JitsiParticipant are muted.\r\n     *\r\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\r\n     * checked.\r\n     * @private\r\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\r\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\r\n     * false.\r\n     */\r\n    _isMediaTypeMuted(mediaType) {\r\n        return this.getTracks().reduce(\r\n            (muted, track) =>\r\n                muted && (track.getType() !== mediaType || track.isMuted()),\r\n            true);\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} Whether this participant has muted their video.\r\n     */\r\n    isVideoMuted() {\r\n        return this._isMediaTypeMuted(MediaType.VIDEO);\r\n    }\r\n\r\n    /**\r\n     * @returns {String} The role of this participant.\r\n     */\r\n    getRole() {\r\n        return this._role;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    supportsDTMF() {\r\n        return this._supportsDTMF;\r\n    }\r\n\r\n    /**\r\n     * Returns a set with the features for the participant.\r\n     * @param {int} timeout the timeout in ms for reply from the participant.\r\n     * @returns {Promise<Set<String>, Error>}\r\n     */\r\n    getFeatures(timeout = 5000) {\r\n        if (this._getFeaturesPromise) {\r\n            return this._getFeaturesPromise;\r\n        }\r\n\r\n        this._getFeaturesPromise = this._conference.xmpp.caps.getFeatures(this._jid, timeout)\r\n            .catch(error => {\r\n                // Retry on feature version mismatch\r\n                if (error === ERROR_FEATURE_VERSION_MISMATCH) {\r\n                    return this._conference.xmpp.caps.getFeatures(this._jid, timeout);\r\n                }\r\n\r\n                logger.warn(`Failed to discover features of ${this._jid}`, error);\r\n\r\n                return Promise.reject(error);\r\n            });\r\n\r\n        return this._getFeaturesPromise\r\n            .then(result => {\r\n                this._getFeaturesPromise = undefined;\r\n\r\n                return result;\r\n            }, error => {\r\n                this._getFeaturesPromise = undefined;\r\n\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Returns the bot type for the participant.\r\n     *\r\n     * @returns {string|undefined} - The bot type of the participant.\r\n     */\r\n    getBotType() {\r\n        return this._botType;\r\n    }\r\n}\r\n","import {\r\n    CONNECTION_DISCONNECTED,\r\n    CONNECTION_ESTABLISHED,\r\n    CONNECTION_FAILED\r\n} from './JitsiConnectionEvents';\r\nimport XMPP from './modules/xmpp/xmpp';\r\n\r\n/**\r\n * @typedef {Object} UpgradeRoleError\r\n *\r\n * @property {JitsiConnectionErrors} [connectionError] - One of\r\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\r\n * XMPP server.\r\n * @property {String} [authenticationError] - One of XMPP error conditions\r\n * returned by Jicofo on authentication attempt. See\r\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\r\n * @property {String} [message] - More details about the error.\r\n * @property {Object} [credentials] - The credentials that failed the\r\n * authentication.\r\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\r\n * that failed the authentication.\r\n * @property {string} [credentials.password] - The password part of the\r\n * credentials that failed the authentication.\r\n *\r\n * NOTE If neither one of the errors is present, then the operation has been\r\n * canceled.\r\n */\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\n/**\r\n * Connects to the XMPP server using the specified credentials and contacts\r\n * Jicofo in order to obtain a session ID (which is then stored in the local\r\n * storage). The user's role of the parent conference will be upgraded to\r\n * moderator (by Jicofo). It's also used to join the conference when starting\r\n * from anonymous domain and only authenticated users are allowed to create new\r\n * rooms.\r\n *\r\n * @param {Object} options\r\n * @param {string} options.id - XMPP user's ID to log in. For example,\r\n * user@xmpp-server.com.\r\n * @param {string} options.password - XMPP user's password to log in with.\r\n * @param {string} [options.roomPassword] - The password to join the MUC with.\r\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\r\n * into the XMPP server was successful. The next step will be to obtain a new\r\n * session ID from Jicofo and join the MUC using it which will effectively\r\n * upgrade the user's role to moderator.\r\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\r\n * authenticating and upgrading the role of the specified XMPP user finishes and\r\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\r\n * process. If the process finishes successfully, the session ID has been stored\r\n * in the settings and the <tt>thenable</tt> is resolved. If the process\r\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\r\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\r\n * <tt>authenticationError</tt> property set depending on which of the steps has\r\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\r\n * thenable will be rejected with an empty object (i.e. no error property will\r\n * be set on the rejection reason).\r\n */\r\nexport default function authenticateAndUpgradeRole({\r\n    // 1. Log the specified XMPP user in.\r\n    id,\r\n    password,\r\n    onCreateResource,\r\n\r\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\r\n    //    successfully logged in.\r\n    onLoginSuccessful,\r\n\r\n    // 3. Join the MUC.\r\n    roomPassword\r\n}) {\r\n    let canceled = false;\r\n    let rejectPromise;\r\n    let xmpp = new XMPP(this.connection.options);\r\n\r\n    const process = new Promise((resolve, reject) => {\r\n        // The process is represented by a Thenable with a cancel method. The\r\n        // Thenable is implemented using Promise and the cancel using the\r\n        // Promise's reject function.\r\n        rejectPromise = reject;\r\n\r\n\r\n        xmpp.addListener(\r\n            CONNECTION_DISCONNECTED,\r\n            () => {\r\n                xmpp = undefined;\r\n            });\r\n        xmpp.addListener(\r\n            CONNECTION_ESTABLISHED,\r\n            () => {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                // Let the caller know that the XMPP login was successful.\r\n                onLoginSuccessful && onLoginSuccessful();\r\n\r\n                // Now authenticate with Jicofo and get a new session ID.\r\n                const room = xmpp.createRoom(\r\n                    this.options.name,\r\n                    this.options.config,\r\n                    onCreateResource\r\n                );\r\n\r\n                room.moderator.authenticate()\r\n                    .then(() => {\r\n                        xmpp && xmpp.disconnect();\r\n\r\n                        if (canceled) {\r\n                            return;\r\n                        }\r\n\r\n                        // At this point we should have the new session ID\r\n                        // stored in the settings. Jicofo will allow to join the\r\n                        // room.\r\n                        this.join(roomPassword);\r\n\r\n                        resolve();\r\n                    })\r\n                    .catch(({ error, message }) => {\r\n                        xmpp.disconnect();\r\n\r\n                        reject({\r\n                            authenticationError: error,\r\n                            message\r\n                        });\r\n                    });\r\n            });\r\n        xmpp.addListener(\r\n            CONNECTION_FAILED,\r\n            (connectionError, message, credentials) => {\r\n                reject({\r\n                    connectionError,\r\n                    credentials,\r\n                    message\r\n                });\r\n                xmpp = undefined;\r\n            });\r\n\r\n        canceled || xmpp.connect(id, password);\r\n    });\r\n\r\n    /**\r\n     * Cancels the process, if it's in progress, of authenticating and upgrading\r\n     * the role of the local participant/user.\r\n     *\r\n     * @public\r\n     * @returns {void}\r\n     */\r\n    process.cancel = () => {\r\n        canceled = true;\r\n        rejectPromise({});\r\n        xmpp && xmpp.disconnect();\r\n    };\r\n\r\n    return process;\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// Flag to set on senders / receivers to avoid setting up the encryption transform\r\n// more than once.\r\nconst kJitsiE2EE = Symbol('kJitsiE2EE');\r\n\r\n/**\r\n * Context encapsulating the cryptography bits required for E2EE.\r\n * This uses the WebRTC Insertable Streams API which is explained in\r\n *   https://github.com/alvestrand/webrtc-media-streams/blob/master/explainer.md\r\n * that provides access to the encoded frames and allows them to be transformed.\r\n *\r\n * The encoded frame format is explained below in the _encodeFunction method.\r\n * High level design goals were:\r\n * - do not require changes to existing SFUs and retain (VP8) metadata.\r\n * - allow the SFU to rewrite SSRCs, timestamp, pictureId.\r\n * - allow for the key to be rotated frequently.\r\n */\r\nexport default class E2EEcontext {\r\n    /**\r\n     * Build a new E2EE context instance, which will be used in a given conference.\r\n     */\r\n    constructor() {\r\n        // Determine the URL for the worker script. Relative URLs are relative to\r\n        // the entry point, not the script that launches the worker.\r\n        let baseUrl = '';\r\n        const ljm = document.querySelector('script[src*=\"lib-jitsi-meet\"]');\r\n\r\n        if (ljm) {\r\n            const idx = ljm.src.lastIndexOf('/');\r\n\r\n            baseUrl = `${ljm.src.substring(0, idx)}/`;\r\n        }\r\n\r\n        // Initialize the E2EE worker. In order to avoid CORS issues, start the worker and have it\r\n        // synchronously load the JS.\r\n        const workerUrl = `${baseUrl}lib-jitsi-meet.e2ee-worker.js`;\r\n        const workerBlob\r\n            = new Blob([ `importScripts(\"${workerUrl}\");` ], { type: 'application/javascript' });\r\n        const blobUrl = window.URL.createObjectURL(workerBlob);\r\n\r\n        this._worker = new Worker(blobUrl, { name: 'E2EE Worker' });\r\n        this._worker.onerror = e => logger.onerror(e);\r\n    }\r\n\r\n    /**\r\n     * Cleans up all state associated with the given participant. This is needed when a\r\n     * participant leaves the current conference.\r\n     *\r\n     * @param {string} participantId - The participant that just left.\r\n     */\r\n    cleanup(participantId) {\r\n        this._worker.postMessage({\r\n            operation: 'cleanup',\r\n            participantId\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Handles the given {@code RTCRtpReceiver} by creating a {@code TransformStream} which will inject\r\n     * a frame decoder.\r\n     *\r\n     * @param {RTCRtpReceiver} receiver - The receiver which will get the decoding function injected.\r\n     * @param {string} kind - The kind of track this receiver belongs to.\r\n     * @param {string} participantId - The participant id that this receiver belongs to.\r\n     */\r\n    handleReceiver(receiver, kind, participantId) {\r\n        if (receiver[kJitsiE2EE]) {\r\n            return;\r\n        }\r\n        receiver[kJitsiE2EE] = true;\r\n\r\n        let receiverStreams;\r\n\r\n        if (receiver.createEncodedStreams) {\r\n            receiverStreams = receiver.createEncodedStreams();\r\n        } else {\r\n            receiverStreams = kind === 'video' ? receiver.createEncodedVideoStreams()\r\n                : receiver.createEncodedAudioStreams();\r\n        }\r\n\r\n        this._worker.postMessage({\r\n            operation: 'decode',\r\n            readableStream: receiverStreams.readable || receiverStreams.readableStream,\r\n            writableStream: receiverStreams.writable || receiverStreams.writableStream,\r\n            participantId\r\n        }, [ receiverStreams.readable || receiverStreams.readableStream,\r\n            receiverStreams.writable || receiverStreams.writableStream ]);\r\n    }\r\n\r\n    /**\r\n     * Handles the given {@code RTCRtpSender} by creating a {@code TransformStream} which will inject\r\n     * a frame encoder.\r\n     *\r\n     * @param {RTCRtpSender} sender - The sender which will get the encoding function injected.\r\n     * @param {string} kind - The kind of track this sender belongs to.\r\n     * @param {string} participantId - The participant id that this sender belongs to.\r\n     */\r\n    handleSender(sender, kind, participantId) {\r\n        if (sender[kJitsiE2EE]) {\r\n            return;\r\n        }\r\n        sender[kJitsiE2EE] = true;\r\n\r\n        let senderStreams;\r\n\r\n        if (sender.createEncodedStreams) {\r\n            senderStreams = sender.createEncodedStreams();\r\n        } else {\r\n            senderStreams = kind === 'video' ? sender.createEncodedVideoStreams()\r\n                : sender.createEncodedAudioStreams();\r\n        }\r\n\r\n        this._worker.postMessage({\r\n            operation: 'encode',\r\n            readableStream: senderStreams.readable || senderStreams.readableStream,\r\n            writableStream: senderStreams.writable || senderStreams.writableStream,\r\n            participantId\r\n        }, [ senderStreams.readable || senderStreams.readableStream,\r\n            senderStreams.writable || senderStreams.writableStream ]);\r\n    }\r\n\r\n    /**\r\n     * Set the E2EE key for the specified participant.\r\n     *\r\n     * @param {string} participantId - the ID of the participant who's key we are setting.\r\n     * @param {Uint8Array | boolean} key - they key for the given participant.\r\n     * @param {Number} keyIndex - the key index.\r\n     */\r\n    setKey(participantId, key, keyIndex) {\r\n        this._worker.postMessage({\r\n            operation: 'setKey',\r\n            participantId,\r\n            key,\r\n            keyIndex\r\n        });\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    default as NetworkInfo,\r\n    NETWORK_INFO_EVENT\r\n} from '../connectivity/NetworkInfo';\r\nimport { getJitterDelay } from '../util/Retry';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The class contains the logic for triggering connection resume via XEP-0198 stream management.\r\n * It does two things, the first one is it tracks the internet online/offline status and it makes sure that\r\n * the reconnect is attempted only while online. The seconds thing is that it tracks the retry attempts and extends\r\n * the retry interval using the full jitter pattern.\r\n */\r\nexport default class ResumeTask {\r\n    /**\r\n     * Initializes new {@code RetryTask}.\r\n     * @param {Strophe.Connection} stropheConnection - The Strophe connection instance.\r\n     */\r\n    constructor(stropheConnection) {\r\n        this._stropheConn = stropheConnection;\r\n\r\n        /**\r\n         * The counter increased before each resume retry attempt, used to calculate exponential backoff.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._resumeRetryN = 0;\r\n\r\n        this._retryDelay = undefined;\r\n    }\r\n\r\n    /**\r\n     * @returns {number|undefined} - How much the app will wait before trying to resume the XMPP connection. When\r\n     * 'undefined' it means that no resume task was not scheduled.\r\n     */\r\n    get retryDelay() {\r\n        return this._retryDelay;\r\n    }\r\n\r\n    /**\r\n     * Called by {@link XmppConnection} when the connection drops and it's a signal it wants to schedule a reconnect.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    schedule() {\r\n        this._cancelResume();\r\n\r\n        this._resumeRetryN += 1;\r\n\r\n        this._networkOnlineListener\r\n            = NetworkInfo.addEventListener(\r\n                NETWORK_INFO_EVENT,\r\n                ({ isOnline }) => {\r\n                    if (isOnline) {\r\n                        this._scheduleResume();\r\n                    } else {\r\n                        this._cancelResume();\r\n                    }\r\n                });\r\n\r\n        NetworkInfo.isOnline() && this._scheduleResume();\r\n    }\r\n\r\n    /**\r\n     * Schedules a delayed timeout which will execute the resume action.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _scheduleResume() {\r\n        if (this._resumeTimeout) {\r\n\r\n            // NO-OP\r\n            return;\r\n        }\r\n\r\n        // The retry delay will be:\r\n        //   1st retry: 1.5s - 3s\r\n        //   2nd retry: 3s - 9s\r\n        //   3rd and next retry: 4.5s - 27s\r\n        this._resumeRetryN = Math.min(3, this._resumeRetryN);\r\n        this._retryDelay = getJitterDelay(\r\n            /* retry */ this._resumeRetryN,\r\n            /* minDelay */ this._resumeRetryN * 1500,\r\n            3);\r\n\r\n        logger.info(`Will try to resume the XMPP connection in ${this.retryDelay}ms`);\r\n\r\n        this._resumeTimeout = setTimeout(() => this._resumeConnection(), this.retryDelay);\r\n    }\r\n\r\n    /**\r\n     * Cancels the delayed resume task.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _cancelResume() {\r\n        if (this._resumeTimeout) {\r\n            logger.info('Canceling connection resume task');\r\n            clearTimeout(this._resumeTimeout);\r\n            this._resumeTimeout = undefined;\r\n            this._retryDelay = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resumes the XMPP connection using the stream management plugin.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _resumeConnection() {\r\n        const { streamManagement } = this._stropheConn;\r\n        const resumeToken = streamManagement.getResumeToken();\r\n\r\n        // Things may have changed since when the task was scheduled\r\n        if (!resumeToken) {\r\n            return;\r\n        }\r\n\r\n        logger.info('Trying to resume the XMPP connection');\r\n\r\n        const url = new URL(this._stropheConn.service);\r\n        let { search } = url;\r\n\r\n        // adds previd param only if missing\r\n        if (search.indexOf('previd=') === -1) {\r\n            search += search.indexOf('?') === -1 ? `?previd=${resumeToken}` : `&previd=${resumeToken}`;\r\n        }\r\n\r\n        url.search = search;\r\n\r\n        this._stropheConn.service = url.toString();\r\n\r\n        streamManagement.resume();\r\n    }\r\n\r\n    /**\r\n     * Cancels the retry task. It's called by {@link XmppConnection} when it's no longer interested in reconnecting for\r\n     * example when the disconnect method is called.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    cancel() {\r\n        this._cancelResume();\r\n        this._resumeRetryN = 0;\r\n        if (this._networkOnlineListener) {\r\n            this._networkOnlineListener();\r\n            this._networkOnlineListener = null;\r\n        }\r\n    }\r\n}\r\n","/**\r\n* Gets next timeout using the full jitter pattern.\r\n*\r\n* NOTE that there are no checks for argument correctness, so either do the math or use defaults.\r\n*\r\n* @param {number} retry - The retry number.\r\n* @param {number} minDelay - The minimal delay in milliseconds.\r\n* @param {number} base - The exponent base.\r\n* @returns {number} - The amount of waiting before trying another time given in milliseconds.\r\n* @private\r\n*/\r\nexport function getJitterDelay(retry, minDelay = 500, base = 2) {\r\n    return Math.floor((Math.random() * ((Math.pow(base, retry) * 1000) - minDelay)) + minDelay);\r\n}\r\n","/**\r\n * Attaches to the {@link Strophe.Connection.rawInput} which is called whenever any data is received from the server.\r\n */\r\nexport default class LastRequestTracker {\r\n    /**\r\n     * Initializes new instance.\r\n     */\r\n    constructor() {\r\n        this._lastSuccess = null;\r\n    }\r\n\r\n    /**\r\n     * Starts tracking requests on the given connection.\r\n     *\r\n     * @param {XmppConnection} xmppConnection - The XMPP connection which manages the given {@code stropheConnection}.\r\n     * @param {Object} stropheConnection - Strophe connection instance.\r\n     */\r\n    startTracking(xmppConnection, stropheConnection) {\r\n        const originalRawInput = stropheConnection.rawInput;\r\n\r\n        stropheConnection.rawInput = (...args) => {\r\n            // It's okay to use rawInput callback only once the connection has been established, otherwise it will\r\n            // treat 'item-not-found' or other connection error on websocket reconnect as successful stanza received.\r\n            if (xmppConnection.connected) {\r\n                this._lastSuccess = Date.now();\r\n            }\r\n            originalRawInput.apply(stropheConnection, args);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns how many milliseconds have passed since the last successful BOSH request.\r\n     *\r\n     * @returns {number|null}\r\n     */\r\n    getTimeSinceLastSuccess() {\r\n        return this._lastSuccess\r\n            ? Date.now() - this._lastSuccess\r\n            : null;\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Ping every 10 sec\r\n */\r\nconst PING_INTERVAL = 10000;\r\n\r\n/**\r\n * Ping timeout error after 5 sec of waiting.\r\n */\r\nconst PING_TIMEOUT = 5000;\r\n\r\n/**\r\n * How many ping failures will be tolerated before the WebSocket connection is killed.\r\n * The worst case scenario in case of ping timing out without a response is (25 seconds at the time of this writing):\r\n * PING_THRESHOLD * PING_INTERVAL + PING_TIMEOUT\r\n */\r\nconst PING_THRESHOLD = 2;\r\n\r\n/**\r\n * The number of timestamps of send pings to keep.\r\n * The current value is 2 minutes.\r\n * @type {number} number of timestamps.\r\n */\r\nconst PING_TIMESTAMPS_TO_KEEP = 120000 / PING_INTERVAL;\r\n\r\n/**\r\n * XEP-0199 ping plugin.\r\n *\r\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\r\n */\r\nexport default class PingConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     * Contructs new object\r\n     * @param {Object} options\r\n     * @param {Function} options.onPingThresholdExceeded - Callback called when ping fails too many times (controlled\r\n     * by the {@link PING_THRESHOLD} constant).\r\n     * @constructor\r\n     */\r\n    constructor({ onPingThresholdExceeded }) {\r\n        super();\r\n        this.failedPings = 0;\r\n        this.pingExecIntervals = new Array(PING_TIMESTAMPS_TO_KEEP);\r\n        this._onPingThresholdExceeded = onPingThresholdExceeded;\r\n    }\r\n\r\n    /**\r\n     * Initializes the plugin. Method called by Strophe.\r\n     * @param connection Strophe connection instance.\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Sends \"ping\" to given <tt>jid</tt>\r\n     * @param jid the JID to which ping request will be sent.\r\n     * @param success callback called on success.\r\n     * @param error callback called on error.\r\n     * @param timeout ms how long are we going to wait for the response. On\r\n     * timeout <tt>error<//t> callback is called with undefined error argument.\r\n     */\r\n    ping(jid, success, error, timeout) {\r\n        this._addPingExecutionTimestamp();\r\n\r\n        const iq = $iq({\r\n            type: 'get',\r\n            to: jid\r\n        });\r\n\r\n        iq.c('ping', { xmlns: Strophe.NS.PING });\r\n        this.connection.sendIQ2(iq, { timeout })\r\n            .then(success, error);\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Starts to send ping in given interval to specified remote JID.\r\n     * This plugin supports only one such task and <tt>stopInterval</tt>\r\n     * must be called before starting a new one.\r\n     * @param remoteJid remote JID to which ping requests will be sent to.\r\n     * @param interval task interval in ms.\r\n     */\r\n    startInterval(remoteJid, interval = PING_INTERVAL) {\r\n        clearInterval(this.intervalId);\r\n        this.intervalId = window.setInterval(() => {\r\n            this.ping(remoteJid, () => {\r\n                this.failedPings = 0;\r\n            }, error => {\r\n                this.failedPings += 1;\r\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\r\n\r\n                if (this.failedPings >= PING_THRESHOLD) {\r\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n                    logger.error(errmsg, error);\r\n                    this._onPingThresholdExceeded && this._onPingThresholdExceeded();\r\n                } else {\r\n                    logger.warn(errmsg, error);\r\n                }\r\n            }, PING_TIMEOUT);\r\n        }, interval);\r\n        logger.info(`XMPP pings will be sent every ${interval} ms`);\r\n    }\r\n\r\n    /**\r\n     * Stops current \"ping\"  interval task.\r\n     */\r\n    stopInterval() {\r\n        if (this.intervalId) {\r\n            window.clearInterval(this.intervalId);\r\n            this.intervalId = null;\r\n            this.failedPings = 0;\r\n            logger.info('Ping interval cleared');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds the current time to the array of send ping timestamps.\r\n     * @private\r\n     */\r\n    _addPingExecutionTimestamp() {\r\n        this.pingExecIntervals.push(new Date().getTime());\r\n\r\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\r\n        if (this.pingExecIntervals.length > PING_TIMESTAMPS_TO_KEEP) {\r\n            this.pingExecIntervals.shift();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the maximum time between the recent sent pings, if there is a\r\n     * big value it means the computer was inactive for some time(suspended).\r\n     * Checks the maximum gap between sending pings, considering and the\r\n     * current time. Trying to detect computer inactivity (sleep).\r\n     *\r\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\r\n     */\r\n    getPingSuspendTime() {\r\n        const pingIntervals = this.pingExecIntervals.slice();\r\n\r\n        // we need current time, as if ping was sent now\r\n        // if computer sleeps we will get correct interval after next\r\n        // scheduled ping, bet we sometimes need that interval before waiting\r\n        // for the next ping, on closing the connection on error.\r\n        pingIntervals.push(new Date().getTime());\r\n\r\n        let maxInterval = 0;\r\n        let previousTS = pingIntervals[0];\r\n\r\n        pingIntervals.forEach(e => {\r\n            const currentInterval = e - previousTS;\r\n\r\n            if (currentInterval > maxInterval) {\r\n                maxInterval = currentInterval;\r\n            }\r\n\r\n            previousTS = e;\r\n        });\r\n\r\n        // remove the interval between the ping sent\r\n        // this way in normal execution there is no suspend and the return\r\n        // will be 0 or close to 0.\r\n        maxInterval -= PING_INTERVAL;\r\n\r\n        // make sure we do not return less than 0\r\n        return Math.max(maxInterval, 0);\r\n    }\r\n}\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport ChatRoom from './ChatRoom';\r\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * MUC connection plugin.\r\n */\r\nexport default class MucConnectionPlugin extends ConnectionPluginListenable {\r\n    /**\r\n     *\r\n     * @param xmpp\r\n     */\r\n    constructor(xmpp) {\r\n        super();\r\n        this.xmpp = xmpp;\r\n        this.rooms = {};\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n\r\n        // add handlers (just once)\r\n        this.connection.addHandler(this.onPresence.bind(this), null,\r\n            'presence', null, null, null, null);\r\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\r\n            null, 'presence', 'unavailable', null);\r\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\r\n            'presence', 'error', null);\r\n        this.connection.addHandler(this.onMessage.bind(this), null,\r\n            'message', null, null);\r\n        this.connection.addHandler(this.onMute.bind(this),\r\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     * @param password\r\n     * @param options\r\n     */\r\n    createRoom(jid, password, options) {\r\n        const roomJid = Strophe.getBareJidFromJid(jid);\r\n\r\n        if (this.rooms[roomJid]) {\r\n            const errmsg = 'You are already in the room!';\r\n\r\n            logger.error(errmsg);\r\n            throw new Error(errmsg);\r\n        }\r\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\r\n            password, this.xmpp, options);\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\r\n\r\n        return this.rooms[roomJid];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param jid\r\n     */\r\n    doLeave(jid) {\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\r\n        delete this.rooms[jid];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresence(pres) {\r\n        const from = pres.getAttribute('from');\r\n\r\n        // What is this for? A workaround for something?\r\n        if (pres.getAttribute('type')) {\r\n            return true;\r\n        }\r\n\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        // Parse status.\r\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\r\n            + '>status[code=\"201\"]').length) {\r\n            room.createNonAnonymousRoom();\r\n        }\r\n\r\n        room.onPresence(pres);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresenceUnavailable(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onPresenceUnavailable(pres, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param pres\r\n     */\r\n    onPresenceError(pres) {\r\n        const from = pres.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onPresenceError(pres, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param msg\r\n     */\r\n    onMessage(msg) {\r\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\r\n        const from = msg.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onMessage(msg, from);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * TODO: Document\r\n     * @param iq\r\n     */\r\n    onMute(iq) {\r\n        const from = iq.getAttribute('from');\r\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\r\n\r\n        // Returning false would result in the listener being deregistered by Strophe\r\n        if (!room) {\r\n            return true;\r\n        }\r\n\r\n        room.onMute(iq);\r\n\r\n        return true;\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $msg, Strophe } from 'strophe.js';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The command type for updating a lobby participant's e-mail address.\r\n *\r\n * @type {string}\r\n */\r\nconst EMAIL_COMMAND = 'email';\r\n\r\n/**\r\n * The Lobby room implementation. Setting a room to members only, joining the lobby room\r\n * approving or denying access to participants from the lobby room.\r\n */\r\nexport default class Lobby {\r\n\r\n    /**\r\n     * Constructs lobby room.\r\n     *\r\n     * @param {ChatRoom} room the main room.\r\n     */\r\n    constructor(room) {\r\n        this.xmpp = room.xmpp;\r\n        this.mainRoom = room;\r\n\r\n        const maybeJoinLobbyRoom = this._maybeJoinLobbyRoom.bind(this);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.LOCAL_ROLE_CHANGED,\r\n            maybeJoinLobbyRoom);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.MUC_MEMBERS_ONLY_CHANGED,\r\n            maybeJoinLobbyRoom);\r\n\r\n        this.mainRoom.addEventListener(\r\n            XMPPEvents.ROOM_CONNECT_MEMBERS_ONLY_ERROR,\r\n            jid => {\r\n                this.lobbyRoomJid = jid;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Whether lobby is supported on backend.\r\n     *\r\n     * @returns {boolean} whether lobby is supported on backend.\r\n     */\r\n    isSupported() {\r\n        return this.xmpp.lobbySupported;\r\n    }\r\n\r\n    /**\r\n     * Enables lobby by setting the main room to be members only and joins the lobby chat room.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    enable() {\r\n        if (!this.isSupported()) {\r\n            return Promise.reject(new Error('Lobby not supported!'));\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.mainRoom.setMembersOnly(true, resolve, reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Disable lobby by setting the main room to be non members only and levaes the lobby chat room if joined.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    disable() {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()\r\n                || !this.lobbyRoom || !this.mainRoom.membersOnlyEnabled) {\r\n            return;\r\n        }\r\n\r\n        this.mainRoom.setMembersOnly(false);\r\n    }\r\n\r\n    /**\r\n     * Leaves the lobby room.\r\n     * @private\r\n     */\r\n    _leaveLobbyRoom() {\r\n        if (this.lobbyRoom) {\r\n            this.lobbyRoom.leave()\r\n                .then(() => {\r\n                    this.lobbyRoom = undefined;\r\n                    logger.info('Lobby room left!');\r\n                })\r\n                .catch(() => {}); // eslint-disable-line no-empty-function\r\n        }\r\n    }\r\n\r\n    /**\r\n     * We had received a jid for the lobby room.\r\n     *\r\n     * @param jid the lobby room jid to join.\r\n     */\r\n    setLobbyRoomJid(jid) {\r\n        this.lobbyRoomJid = jid;\r\n    }\r\n\r\n    /**\r\n     * Checks the state of mainRoom, lobbyRoom and current user role to decide whether to join lobby room.\r\n     * @private\r\n     */\r\n    _maybeJoinLobbyRoom() {\r\n        if (!this.isSupported()) {\r\n            return;\r\n        }\r\n\r\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\r\n\r\n        if (isModerator && this.mainRoom.membersOnlyEnabled && !this.lobbyRoom) {\r\n            // join the lobby\r\n            this.join()\r\n                .then(() => logger.info('Joined lobby room'))\r\n                .catch(e => logger.error('Failed joining lobby', e));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Joins a lobby room setting display name and eventually avatar(using the email provided).\r\n     *\r\n     * @param {string} username is required.\r\n     * @param {string} email is optional.\r\n     * @returns {Promise} resolves once we join the room.\r\n     */\r\n    join(displayName, email) {\r\n        const isModerator = this.mainRoom.joined && this.mainRoom.isModerator();\r\n\r\n        if (!this.lobbyRoomJid) {\r\n            return Promise.reject(new Error('Missing lobbyRoomJid, cannot join lobby room.'));\r\n        }\r\n\r\n        const roomName = Strophe.getNodeFromJid(this.lobbyRoomJid);\r\n        const customDomain = Strophe.getDomainFromJid(this.lobbyRoomJid);\r\n\r\n        this.lobbyRoom = this.xmpp.createRoom(\r\n            roomName, {\r\n                customDomain,\r\n                disableDiscoInfo: true,\r\n                disableFocus: true,\r\n                enableLobby: false\r\n            }\r\n        );\r\n\r\n        if (displayName) {\r\n            // remove previously set nickname\r\n            this.lobbyRoom.removeFromPresence('nick');\r\n            this.lobbyRoom.addToPresence('nick', {\r\n                attributes: { xmlns: 'http://jabber.org/protocol/nick' },\r\n                value: displayName\r\n            });\r\n        }\r\n\r\n        if (isModerator) {\r\n            this.lobbyRoom.addPresenceListener(EMAIL_COMMAND, (node, from) => {\r\n                this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_LOBBY_MEMBER_UPDATED, from, { email: node.value });\r\n            });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_MEMBER_JOINED,\r\n                // eslint-disable-next-line max-params\r\n                (from, nick, role, isHiddenDomain, statsID, status, identity, botType, jid) => {\r\n                    // we need to ignore joins on lobby for participants that are already in the main room\r\n                    if (Object.values(this.mainRoom.members).find(m => m.jid === jid)) {\r\n                        return;\r\n                    }\r\n\r\n                    // we emit the new event on the main room so we can propagate\r\n                    // events to the conference\r\n                    this.mainRoom.eventEmitter.emit(\r\n                        XMPPEvents.MUC_LOBBY_MEMBER_JOINED,\r\n                        Strophe.getResourceFromJid(from),\r\n                        nick,\r\n                        identity ? identity.avatar : undefined\r\n                    );\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_MEMBER_LEFT, from => {\r\n                    // we emit the new event on the main room so we can propagate\r\n                    // events to the conference\r\n                    this.mainRoom.eventEmitter.emit(\r\n                        XMPPEvents.MUC_LOBBY_MEMBER_LEFT,\r\n                        Strophe.getResourceFromJid(from)\r\n                    );\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_DESTROYED,\r\n                () => {\r\n                    // let's make sure we emit that all lobby users had left\r\n                    Object.keys(this.lobbyRoom.members)\r\n                        .forEach(j => this.mainRoom.eventEmitter.emit(\r\n                            XMPPEvents.MUC_LOBBY_MEMBER_LEFT, Strophe.getResourceFromJid(j)));\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    this.lobbyRoom = undefined;\r\n                    logger.info('Lobby room left(destroyed)!');\r\n                });\r\n        } else {\r\n            // this should only be handled by those waiting in lobby\r\n            this.lobbyRoom.addEventListener(XMPPEvents.KICKED, isSelfPresence => {\r\n                if (isSelfPresence) {\r\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DENIED_ACCESS);\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    return;\r\n                }\r\n            });\r\n\r\n            // As there is still reference of the main room\r\n            // the invite will be detected and addressed to its eventEmitter, even though we are not in it\r\n            // the invite message should be received directly to the xmpp conn in general\r\n            this.mainRoom.addEventListener(\r\n                XMPPEvents.INVITE_MESSAGE_RECEIVED,\r\n                (roomJid, from, txt, invitePassword) => {\r\n                    logger.debug(`Received approval to join ${roomJid} ${from} ${txt}`);\r\n                    if (roomJid === this.mainRoom.roomjid) {\r\n                        // we are now allowed let's join and leave lobby\r\n                        this.mainRoom.join(invitePassword);\r\n\r\n                        this._leaveLobbyRoom();\r\n                    }\r\n                });\r\n            this.lobbyRoom.addEventListener(\r\n                XMPPEvents.MUC_DESTROYED,\r\n                (reason, jid) => {\r\n                    // we are receiving the jid of the main room\r\n                    // means we are invited to join, maybe lobby was disabled\r\n                    if (jid && jid === this.mainRoom.roomjid) {\r\n                        this.mainRoom.join();\r\n\r\n                        return;\r\n                    }\r\n\r\n                    this.lobbyRoom.clean();\r\n\r\n                    this.mainRoom.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\r\n                });\r\n\r\n            // If participant retries joining shared password while waiting in the lobby\r\n            // and succeeds make sure we leave lobby\r\n            this.mainRoom.addEventListener(\r\n                XMPPEvents.MUC_JOINED,\r\n                () => {\r\n                    this._leaveLobbyRoom();\r\n                });\r\n        }\r\n\r\n        return new Promise((resolve, reject) => {\r\n            this.lobbyRoom.addEventListener(XMPPEvents.MUC_JOINED, () => {\r\n                resolve();\r\n\r\n                // send our email, as we do not handle this on initial presence we need a second one\r\n                if (email && !isModerator) {\r\n                    this.lobbyRoom.removeFromPresence(EMAIL_COMMAND);\r\n                    this.lobbyRoom.addToPresence(EMAIL_COMMAND, { value: email });\r\n                    this.lobbyRoom.sendPresence();\r\n                }\r\n            });\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_JOIN_ERROR, reject);\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR, reject);\r\n            this.lobbyRoom.addEventListener(XMPPEvents.ROOM_CONNECT_ERROR, reject);\r\n\r\n            this.lobbyRoom.join();\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * Should be possible only for moderators.\r\n     * @param id\r\n     */\r\n    denyAccess(id) {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\r\n            return;\r\n        }\r\n\r\n        const jid = Object.keys(this.lobbyRoom.members)\r\n            .find(j => Strophe.getResourceFromJid(j) === id);\r\n\r\n        if (jid) {\r\n            this.lobbyRoom.kick(jid);\r\n        } else {\r\n            logger.error(`Not found member for ${id} in lobby room.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Should be possible only for moderators.\r\n     * @param id\r\n     */\r\n    approveAccess(id) {\r\n        if (!this.isSupported() || !this.mainRoom.isModerator()) {\r\n            return;\r\n        }\r\n\r\n        const memberRoomJid = Object.keys(this.lobbyRoom.members)\r\n            .find(j => Strophe.getResourceFromJid(j) === id);\r\n\r\n        if (memberRoomJid) {\r\n            const jid = this.lobbyRoom.members[memberRoomJid].jid;\r\n            const msgToSend\r\n                = $msg({ to: this.mainRoom.roomjid })\r\n                    .c('x', { xmlns: 'http://jabber.org/protocol/muc#user' })\r\n                    .c('invite', { to: jid });\r\n\r\n            this.xmpp.connection.sendIQ(msgToSend,\r\n                () => { }, // eslint-disable-line no-empty-function\r\n                e => {\r\n                    logger.error(`Error sending invite for ${jid}`, e);\r\n                });\r\n        } else {\r\n            logger.error(`Not found member for ${memberRoomJid} in lobby room.`);\r\n        }\r\n    }\r\n}\r\n","/* global $, Promise */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport Settings from '../settings/Settings';\r\n\r\nconst AuthenticationEvents\r\n    = require('../../service/authentication/AuthenticationEvents');\r\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\r\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n *\r\n * @param step\r\n */\r\nfunction createExpBackoffTimer(step) {\r\n    let count = 1;\r\n\r\n    return function(reset) {\r\n        // Reset call\r\n        if (reset) {\r\n            count = 1;\r\n\r\n            return;\r\n        }\r\n\r\n        // Calculate next timeout\r\n        const timeout = Math.pow(2, count - 1);\r\n\r\n        count += 1;\r\n\r\n        return timeout * step;\r\n    };\r\n}\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n *\r\n * @param roomName\r\n * @param xmpp\r\n * @param emitter\r\n * @param options\r\n */\r\nexport default function Moderator(roomName, xmpp, emitter, options) {\r\n    this.roomName = roomName;\r\n    this.xmppService = xmpp;\r\n    this.getNextTimeout = createExpBackoffTimer(1000);\r\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\r\n\r\n    // External authentication stuff\r\n    this.externalAuthEnabled = false;\r\n    this.options = options;\r\n\r\n    // Sip gateway can be enabled by configuring Jigasi host in config.js or\r\n    // it will be enabled automatically if focus detects the component through\r\n    // service discovery.\r\n    this.sipGatewayEnabled\r\n        = this.options.connection.hosts\r\n            && this.options.connection.hosts.call_control !== undefined;\r\n\r\n    this.eventEmitter = emitter;\r\n\r\n    this.connection = this.xmppService.connection;\r\n\r\n    // FIXME: Message listener that talks to POPUP window\r\n    /**\r\n     *\r\n     * @param event\r\n     */\r\n    function listener(event) {\r\n        if (event.data && event.data.sessionId) {\r\n            if (event.origin !== window.location.origin) {\r\n                logger.warn(\r\n                    `Ignoring sessionId from different origin: ${\r\n                        event.origin}`);\r\n\r\n                return;\r\n            }\r\n            Settings.sessionId = event.data.sessionId;\r\n\r\n            // After popup is closed we will authenticate\r\n        }\r\n    }\r\n\r\n    // Register\r\n    if (window.addEventListener) {\r\n        window.addEventListener('message', listener, false);\r\n    } else {\r\n        window.attachEvent('onmessage', listener);\r\n    }\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\nModerator.prototype.isExternalAuthEnabled = function() {\r\n    return this.externalAuthEnabled;\r\n};\r\n\r\nModerator.prototype.isSipGatewayEnabled = function() {\r\n    return this.sipGatewayEnabled;\r\n};\r\n\r\nModerator.prototype.onMucMemberLeft = function(jid) {\r\n    logger.info(`Someone left is it focus ? ${jid}`);\r\n    const resource = Strophe.getResourceFromJid(jid);\r\n\r\n    if (resource === 'focus') {\r\n        logger.info(\r\n            'Focus has left the room - leaving conference');\r\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\r\n    }\r\n};\r\n\r\nModerator.prototype.setFocusUserJid = function(focusJid) {\r\n    if (!this.focusUserJid) {\r\n        this.focusUserJid = focusJid;\r\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\r\n    }\r\n};\r\n\r\nModerator.prototype.getFocusUserJid = function() {\r\n    return this.focusUserJid;\r\n};\r\n\r\nModerator.prototype.getFocusComponent = function() {\r\n    // Get focus component address\r\n    let focusComponent = this.options.connection.hosts.focus;\r\n\r\n    // If not specified use default:  'focus.domain'\r\n\r\n    if (!focusComponent) {\r\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\r\n    }\r\n\r\n    return focusComponent;\r\n};\r\n\r\nModerator.prototype.createConferenceIq = function() {\r\n    // Generate create conference IQ\r\n    const elem = $iq({ to: this.getFocusComponent(),\r\n        type: 'set' });\r\n\r\n    // Session Id used for authentication\r\n    const { sessionId } = Settings;\r\n    const machineUID = Settings.machineId;\r\n    const config = this.options.conference;\r\n\r\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\r\n\r\n    elem.c('conference', {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        room: this.roomName,\r\n        'machine-uid': machineUID\r\n    });\r\n\r\n    if (sessionId) {\r\n        elem.attrs({ 'session-id': sessionId });\r\n    }\r\n    if (this.options.connection.enforcedBridge !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'enforcedBridge',\r\n                value: this.options.connection.enforcedBridge\r\n            }).up();\r\n    }\r\n\r\n    // Tell the focus we have Jigasi configured\r\n    if (this.options.connection.hosts !== undefined\r\n        && this.options.connection.hosts.call_control !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'call_control',\r\n                value: this.options.connection.hosts.call_control\r\n            }).up();\r\n    }\r\n    if (config.channelLastN !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'channelLastN',\r\n                value: config.channelLastN\r\n            }).up();\r\n    }\r\n    elem.c(\r\n        'property', {\r\n            name: 'disableRtx',\r\n            value: Boolean(config.disableRtx)\r\n        }).up();\r\n\r\n    if (config.enableTcc !== undefined) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'enableTcc',\r\n                    value: Boolean(config.enableTcc)\r\n                }).up();\r\n    }\r\n    if (config.enableRemb !== undefined) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'enableRemb',\r\n                    value: Boolean(config.enableRemb)\r\n                }).up();\r\n    }\r\n    if (config.enableOpusRed === true) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'enableOpusRed',\r\n                    value: true\r\n                }).up();\r\n    }\r\n    if (config.minParticipants !== undefined) {\r\n        elem.c(\r\n                'property', {\r\n                    name: 'minParticipants',\r\n                    value: config.minParticipants\r\n                }).up();\r\n    }\r\n\r\n    elem.c(\r\n        'property', {\r\n            name: 'enableLipSync',\r\n            value: this.options.connection.enableLipSync === true\r\n        }).up();\r\n    if (config.audioPacketDelay !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'audioPacketDelay',\r\n                value: config.audioPacketDelay\r\n            }).up();\r\n    }\r\n    if (config.startBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startBitrate',\r\n                value: config.startBitrate\r\n            }).up();\r\n    }\r\n    if (config.minBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'minBitrate',\r\n                value: config.minBitrate\r\n            }).up();\r\n    }\r\n    if (config.testing && config.testing.octo\r\n        && typeof config.testing.octo.probability === 'number') {\r\n        if (Math.random() < config.testing.octo.probability) {\r\n            elem.c(\r\n                'property', {\r\n                    name: 'octo',\r\n                    value: true\r\n                }).up();\r\n        }\r\n    }\r\n\r\n    let openSctp;\r\n\r\n    switch (this.options.conference.openBridgeChannel) {\r\n    case 'datachannel':\r\n    case true:\r\n    case undefined:\r\n        openSctp = true;\r\n        break;\r\n    case 'websocket':\r\n        openSctp = false;\r\n        break;\r\n    }\r\n\r\n    elem.c(\r\n        'property', {\r\n            name: 'openSctp',\r\n            value: openSctp\r\n        }).up();\r\n\r\n    if (config.opusMaxAverageBitrate) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'opusMaxAverageBitrate',\r\n                value: config.opusMaxAverageBitrate\r\n            }).up();\r\n    }\r\n    if (this.options.conference.startAudioMuted !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startAudioMuted',\r\n                value: this.options.conference.startAudioMuted\r\n            }).up();\r\n    }\r\n    if (this.options.conference.startVideoMuted !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'startVideoMuted',\r\n                value: this.options.conference.startVideoMuted\r\n            }).up();\r\n    }\r\n    if (this.options.conference.stereo !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'stereo',\r\n                value: this.options.conference.stereo\r\n            }).up();\r\n    }\r\n    if (this.options.conference.useRoomAsSharedDocumentName !== undefined) {\r\n        elem.c(\r\n            'property', {\r\n                name: 'useRoomAsSharedDocumentName',\r\n                value: this.options.conference.useRoomAsSharedDocumentName\r\n            }).up();\r\n    }\r\n    elem.up();\r\n\r\n    return elem;\r\n};\r\n\r\n\r\nModerator.prototype.parseSessionId = function(resultIq) {\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    const sessionId = $(resultIq).find('conference').attr('session-id');\r\n\r\n    if (sessionId) {\r\n        logger.info(`Received sessionId:  ${sessionId}`);\r\n        Settings.sessionId = sessionId;\r\n    }\r\n};\r\n\r\nModerator.prototype.parseConfigOptions = function(resultIq) {\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\r\n\r\n    const authenticationEnabled\r\n        = $(resultIq).find(\r\n            '>conference>property'\r\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\r\n\r\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\r\n\r\n    this.externalAuthEnabled = $(resultIq).find(\r\n        '>conference>property'\r\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\r\n\r\n    logger.info(\r\n        `External authentication enabled: ${this.externalAuthEnabled}`);\r\n\r\n    if (!this.externalAuthEnabled) {\r\n        // We expect to receive sessionId in 'internal' authentication mode\r\n        this.parseSessionId(resultIq);\r\n    }\r\n\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\r\n\r\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\r\n        authenticationEnabled, authIdentity);\r\n\r\n    // Check if focus has auto-detected Jigasi component(this will be also\r\n    // included if we have passed our host from the config)\r\n    if ($(resultIq).find(\r\n        '>conference>property'\r\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\r\n        this.sipGatewayEnabled = true;\r\n    }\r\n\r\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\r\n};\r\n\r\n// FIXME We need to show the fact that we're waiting for the focus to the user\r\n// (or that the focus is not available)\r\n/**\r\n * Allocates the conference focus.\r\n *\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\r\n * rejected and it'll keep on pinging Jicofo forever.\r\n */\r\nModerator.prototype.allocateConferenceFocus = function() {\r\n    return new Promise(resolve => {\r\n        // Try to use focus user JID from the config\r\n        this.setFocusUserJid(this.options.connection.focusUserJid);\r\n\r\n        // Send create conference IQ\r\n        this.connection.sendIQ(\r\n            this.createConferenceIq(),\r\n            result => this._allocateConferenceFocusSuccess(result, resolve),\r\n            error => this._allocateConferenceFocusError(error, resolve));\r\n\r\n        // XXX We're pressed for time here because we're beginning a complex\r\n        // and/or lengthy conference-establishment process which supposedly\r\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\r\n        // decide to send our IQ.\r\n        this.connection.flush();\r\n    });\r\n};\r\n\r\n/**\r\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\r\n * error result.\r\n *\r\n * @param error - the error result of the request that\r\n * {@link #allocateConferenceFocus} sent\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n */\r\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\r\n    // If the session is invalid, remove and try again without session ID to get\r\n    // a new one\r\n    const invalidSession\r\n        = $(error).find('>error>session-invalid').length\r\n            || $(error).find('>error>not-acceptable').length;\r\n\r\n    if (invalidSession) {\r\n        logger.info('Session expired! - removing');\r\n        Settings.sessionId = undefined;\r\n    }\r\n    if ($(error).find('>error>graceful-shutdown').length) {\r\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\r\n\r\n        return;\r\n    }\r\n\r\n    // Check for error returned by the reservation system\r\n    const reservationErr = $(error).find('>error>reservation-error');\r\n\r\n    if (reservationErr.length) {\r\n        // Trigger error event\r\n        const errorCode = reservationErr.attr('error-code');\r\n        const errorTextNode = $(error).find('>error>text');\r\n        let errorMsg;\r\n\r\n        if (errorTextNode) {\r\n            errorMsg = errorTextNode.text();\r\n        }\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.RESERVATION_ERROR,\r\n            errorCode,\r\n            errorMsg);\r\n\r\n        return;\r\n    }\r\n\r\n    // Not authorized to create new room\r\n    if ($(error).find('>error>not-authorized').length) {\r\n        logger.warn('Unauthorized to start the conference', error);\r\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\r\n\r\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\r\n            // FIXME \"is external\" should come either from the focus or\r\n            // config.js\r\n            this.externalAuthEnabled = true;\r\n        }\r\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\r\n\r\n        return;\r\n    }\r\n    const waitMs = this.getNextErrorTimeout();\r\n    const errmsg = `Focus error, retry after ${waitMs}`;\r\n\r\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n    logger.error(errmsg, error);\r\n\r\n    // Show message\r\n    const focusComponent = this.getFocusComponent();\r\n    const retrySec = waitMs / 1000;\r\n\r\n    // FIXME: message is duplicated ? Do not show in case of session invalid\r\n    // which means just a retry\r\n\r\n    if (!invalidSession) {\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.FOCUS_DISCONNECTED,\r\n            focusComponent,\r\n            retrySec);\r\n    }\r\n\r\n    // Reset response timeout\r\n    this.getNextTimeout(true);\r\n    window.setTimeout(\r\n        () => this.allocateConferenceFocus().then(callback),\r\n        waitMs);\r\n};\r\n\r\n/**\r\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\r\n * success (i.e. non-error) result.\r\n *\r\n * @param result - the success (i.e. non-error) result of the request that\r\n * {@link #allocateConferenceFocus} sent\r\n * @param {Function} callback - the function to be called back upon the\r\n * successful allocation of the conference focus\r\n */\r\nModerator.prototype._allocateConferenceFocusSuccess = function(\r\n        result,\r\n        callback) {\r\n    // Setup config options\r\n    this.parseConfigOptions(result);\r\n\r\n    // Reset the error timeout (because we haven't failed here).\r\n    this.getNextErrorTimeout(true);\r\n\r\n    // eslint-disable-next-line newline-per-chained-call\r\n    if ($(result).find('conference').attr('ready') === 'true') {\r\n        // Reset the non-error timeout (because we've succeeded here).\r\n        this.getNextTimeout(true);\r\n\r\n        // Exec callback\r\n        callback();\r\n    } else {\r\n        const waitMs = this.getNextTimeout();\r\n\r\n        logger.info(`Waiting for the focus... ${waitMs}`);\r\n        window.setTimeout(\r\n            () => this.allocateConferenceFocus().then(callback),\r\n            waitMs);\r\n    }\r\n};\r\n\r\nModerator.prototype.authenticate = function() {\r\n    return new Promise((resolve, reject) => {\r\n        this.connection.sendIQ(\r\n            this.createConferenceIq(),\r\n            result => {\r\n                this.parseSessionId(result);\r\n                resolve();\r\n            },\r\n            errorIq => reject({\r\n                error: $(errorIq).find('iq>error :first')\r\n                    .prop('tagName'),\r\n                message: $(errorIq).find('iq>error>text')\r\n                    .text()\r\n            })\r\n        );\r\n    });\r\n};\r\n\r\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\r\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\r\n};\r\n\r\n/**\r\n *\r\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\r\n * {@link Moderator#getPopupLoginUrl}\r\n * @param urlCb\r\n * @param failureCb\r\n */\r\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\r\n    const iq = $iq({ to: this.getFocusComponent(),\r\n        type: 'get' });\r\n    const attrs = {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        room: this.roomName,\r\n        'machine-uid': Settings.machineId\r\n    };\r\n    let str = 'auth url'; // for logger\r\n\r\n    if (popup) {\r\n        attrs.popup = true;\r\n        str = `POPUP ${str}`;\r\n    }\r\n    iq.c('login-url', attrs);\r\n\r\n    /**\r\n     * Implements a failure callback which reports an error message and an error\r\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\r\n     *\r\n     * @param {string} errmsg the error messsage to report\r\n     * @param {*} error the error to report (in addition to errmsg)\r\n     */\r\n    function reportError(errmsg, err) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n        logger.error(errmsg, err);\r\n        failureCb(err);\r\n    }\r\n    this.connection.sendIQ(\r\n        iq,\r\n        result => {\r\n            // eslint-disable-next-line newline-per-chained-call\r\n            let url = $(result).find('login-url').attr('url');\r\n\r\n            url = decodeURIComponent(url);\r\n            if (url) {\r\n                logger.info(`Got ${str}: ${url}`);\r\n                urlCb(url);\r\n            } else {\r\n                reportError(`Failed to get ${str} from the focus`, result);\r\n            }\r\n        },\r\n        reportError.bind(undefined, `Get ${str} error`)\r\n    );\r\n};\r\n\r\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\r\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\r\n};\r\n\r\nModerator.prototype.logout = function(callback) {\r\n    const iq = $iq({ to: this.getFocusComponent(),\r\n        type: 'set' });\r\n    const { sessionId } = Settings;\r\n\r\n    if (!sessionId) {\r\n        callback();\r\n\r\n        return;\r\n    }\r\n    iq.c('logout', {\r\n        xmlns: 'http://jitsi.org/protocol/focus',\r\n        'session-id': sessionId\r\n    });\r\n    this.connection.sendIQ(\r\n        iq,\r\n        result => {\r\n            // eslint-disable-next-line newline-per-chained-call\r\n            let logoutUrl = $(result).find('logout').attr('logout-url');\r\n\r\n            if (logoutUrl) {\r\n                logoutUrl = decodeURIComponent(logoutUrl);\r\n            }\r\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\r\n            Settings.sessionId = undefined;\r\n            callback(logoutUrl);\r\n        },\r\n        error => {\r\n            const errmsg = 'Logout error';\r\n\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\r\n            logger.error(errmsg, error);\r\n        }\r\n    );\r\n};\r\n","const RandomUtil = require('./RandomUtil');\r\n\r\n/**\r\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\r\n * MIT License\r\n * http://github.com/marak/faker.js/\r\n *\r\n * @const\r\n */\r\nconst names = [\r\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\r\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\r\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\r\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\r\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\r\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\r\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\r\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\r\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\r\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\r\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\r\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\r\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\r\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\r\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\r\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\r\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\r\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\r\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\r\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\r\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\r\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\r\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\r\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\r\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\r\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\r\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\r\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\r\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\r\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\r\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\r\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\r\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\r\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\r\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\r\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\r\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\r\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\r\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\r\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\r\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\r\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\r\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\r\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\r\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\r\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\r\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\r\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\r\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\r\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\r\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\r\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\r\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\r\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\r\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\r\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\r\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\r\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\r\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\r\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\r\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\r\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\r\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\r\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\r\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\r\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\r\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\r\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\r\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\r\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\r\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\r\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\r\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\r\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\r\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\r\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\r\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\r\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\r\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\r\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\r\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\r\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\r\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\r\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\r\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\r\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\r\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\r\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\r\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\r\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\r\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\r\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\r\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\r\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\r\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\r\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\r\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\r\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\r\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\r\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\r\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\r\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\r\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\r\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\r\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\r\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\r\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\r\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\r\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\r\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\r\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\r\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\r\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\r\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\r\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\r\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\r\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\r\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\r\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\r\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\r\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\r\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\r\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\r\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\r\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\r\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\r\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\r\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\r\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\r\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\r\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\r\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\r\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\r\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\r\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\r\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\r\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\r\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\r\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\r\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\r\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\r\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\r\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\r\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\r\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\r\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\r\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\r\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\r\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\r\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\r\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\r\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\r\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\r\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\r\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\r\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\r\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\r\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\r\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\r\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\r\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\r\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\r\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\r\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\r\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\r\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\r\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\r\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\r\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\r\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\r\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\r\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\r\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\r\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\r\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\r\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\r\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\r\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\r\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\r\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\r\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\r\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\r\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\r\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\r\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\r\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\r\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\r\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\r\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\r\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\r\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\r\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\r\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\r\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\r\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\r\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\r\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\r\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\r\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\r\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\r\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\r\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\r\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\r\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\r\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\r\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\r\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\r\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\r\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\r\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\r\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\r\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\r\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\r\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\r\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\r\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\r\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\r\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\r\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\r\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\r\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\r\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\r\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\r\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\r\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\r\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\r\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\r\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\r\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\r\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\r\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\r\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\r\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\r\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\r\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\r\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\r\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\r\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\r\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\r\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\r\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\r\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\r\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\r\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\r\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\r\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\r\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\r\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\r\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\r\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\r\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\r\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\r\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\r\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\r\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\r\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\r\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\r\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\r\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\r\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\r\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\r\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\r\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\r\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\r\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\r\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\r\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\r\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\r\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\r\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\r\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\r\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\r\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\r\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\r\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\r\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\r\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\r\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\r\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\r\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\r\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\r\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\r\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\r\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\r\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\r\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\r\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\r\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\r\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\r\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\r\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\r\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\r\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\r\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\r\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\r\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\r\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\r\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\r\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\r\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\r\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\r\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\r\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\r\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\r\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\r\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\r\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\r\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\r\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\r\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\r\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\r\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\r\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\r\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\r\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\r\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\r\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\r\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\r\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\r\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\r\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\r\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\r\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\r\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\r\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\r\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\r\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\r\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\r\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\r\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\r\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\r\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\r\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\r\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\r\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\r\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\r\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\r\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\r\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\r\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\r\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\r\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\r\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\r\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\r\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\r\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\r\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\r\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\r\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\r\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\r\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\r\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\r\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\r\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\r\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\r\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\r\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\r\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\r\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\r\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\r\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\r\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\r\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\r\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\r\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\r\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\r\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\r\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\r\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\r\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\r\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\r\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\r\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\r\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\r\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\r\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\r\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\r\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\r\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\r\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\r\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\r\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\r\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\r\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\r\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\r\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\r\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\r\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\r\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\r\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\r\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\r\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\r\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\r\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\r\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\r\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\r\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\r\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\r\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\r\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\r\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\r\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\r\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\r\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\r\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\r\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\r\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\r\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\r\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\r\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\r\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\r\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\r\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\r\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\r\n    'Zoila', 'Zola', 'Zora', 'Zula'\r\n];\r\n\r\n/**\r\n * Generate random username.\r\n * @returns {string} random username\r\n */\r\nfunction generateUsername() {\r\n    const name = RandomUtil.randomElement(names);\r\n    const suffix = RandomUtil.randomAlphanumStr(3);\r\n\r\n    return `${name}-${suffix}`;\r\n}\r\n\r\nmodule.exports = {\r\n    generateUsername\r\n};\r\n","/* global $, __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq, Strophe } from 'strophe.js';\r\n\r\nimport {\r\n    ACTION_JINGLE_TR_RECEIVED,\r\n    ACTION_JINGLE_TR_SUCCESS,\r\n    createJingleEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport RandomUtil from '../util/RandomUtil';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\nimport JingleSessionPC from './JingleSessionPC';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// XXX Strophe is build around the idea of chaining function calls so allow long\r\n// function call chains.\r\n/* eslint-disable newline-per-chained-call */\r\n\r\n/**\r\n *\r\n */\r\nexport default class JingleConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     * Creates new <tt>JingleConnectionPlugin</tt>\r\n     * @param {XMPP} xmpp\r\n     * @param {EventEmitter} eventEmitter\r\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\r\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\r\n     */\r\n    constructor(xmpp, eventEmitter, iceConfig) {\r\n        super();\r\n        this.xmpp = xmpp;\r\n        this.eventEmitter = eventEmitter;\r\n        this.sessions = {};\r\n        this.jvbIceConfig = iceConfig.jvb;\r\n        this.p2pIceConfig = iceConfig.p2p;\r\n        this.mediaConstraints = {\r\n            offerToReceiveAudio: true,\r\n            offerToReceiveVideo: true\r\n        };\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        this.connection.addHandler(this.onJingle.bind(this),\r\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param iq\r\n     */\r\n    onJingle(iq) {\r\n        const sid = $(iq).find('jingle').attr('sid');\r\n        const action = $(iq).find('jingle').attr('action');\r\n        const fromJid = iq.getAttribute('from');\r\n\r\n        // send ack first\r\n        const ack = $iq({ type: 'result',\r\n            to: fromJid,\r\n            id: iq.getAttribute('id')\r\n        });\r\n\r\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\r\n        let sess = this.sessions[sid];\r\n\r\n        if (action !== 'session-initiate') {\r\n            if (!sess) {\r\n                ack.attrs({ type: 'error' });\r\n                ack.c('error', { type: 'cancel' })\r\n                    .c('item-not-found', {\r\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                    })\r\n                    .up()\r\n                    .c('unknown-session', {\r\n                        xmlns: 'urn:xmpp:jingle:errors:1'\r\n                    });\r\n                logger.warn('invalid session id', iq);\r\n                this.connection.send(ack);\r\n\r\n                return true;\r\n            }\r\n\r\n            // local jid is not checked\r\n            if (fromJid !== sess.remoteJid) {\r\n                logger.warn(\r\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\r\n                ack.attrs({ type: 'error' });\r\n                ack.c('error', { type: 'cancel' })\r\n                    .c('item-not-found', {\r\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                    })\r\n                    .up()\r\n                    .c('unknown-session', {\r\n                        xmlns: 'urn:xmpp:jingle:errors:1'\r\n                    });\r\n                this.connection.send(ack);\r\n\r\n                return true;\r\n            }\r\n        } else if (sess !== undefined) {\r\n            // Existing session with same session id. This might be out-of-order\r\n            // if the sess.remoteJid is the same as from.\r\n            ack.attrs({ type: 'error' });\r\n            ack.c('error', { type: 'cancel' })\r\n                .c('service-unavailable', {\r\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\r\n                })\r\n                .up();\r\n            logger.warn('duplicate session id', sid, iq);\r\n            this.connection.send(ack);\r\n\r\n            return true;\r\n        }\r\n        const now = window.performance.now();\r\n\r\n        // FIXME that should work most of the time, but we'd have to\r\n        // think how secure it is to assume that user with \"focus\"\r\n        // nickname is Jicofo.\r\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\r\n\r\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\r\n\r\n        switch (action) {\r\n        case 'session-initiate': {\r\n            logger.log('(TIME) received session-initiate:\\t', now);\r\n            const startMuted = $(iq).find('jingle>startmuted');\r\n\r\n            if (startMuted && startMuted.length > 0) {\r\n                const audioMuted = startMuted.attr('audio');\r\n                const videoMuted = startMuted.attr('video');\r\n\r\n                this.eventEmitter.emit(\r\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\r\n                    audioMuted === 'true',\r\n                    videoMuted === 'true');\r\n            }\r\n\r\n            logger.info(\r\n                `Marking session from ${fromJid\r\n                } as ${isP2P ? '' : '*not*'} P2P`);\r\n\r\n            const iceConfig = isP2P ? this.p2pIceConfig : this.jvbIceConfig;\r\n\r\n            sess\r\n                = new JingleSessionPC(\r\n                    $(iq).find('jingle').attr('sid'),\r\n                    $(iq).attr('to'),\r\n                    fromJid,\r\n                    this.connection,\r\n                    this.mediaConstraints,\r\n\r\n                    // Makes a copy in order to prevent exception thrown on RN when either this.p2pIceConfig or\r\n                    // this.jvbIceConfig is modified and there's a PeerConnection instance holding a reference\r\n                    JSON.parse(JSON.stringify(iceConfig)),\r\n                    isP2P,\r\n                    /* initiator */ false);\r\n\r\n            this.sessions[sess.sid] = sess;\r\n\r\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\r\n                sess, $(iq).find('>jingle'), now);\r\n            break;\r\n        }\r\n        case 'session-accept': {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'content-modify': {\r\n            sess.modifyContents($(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'transport-info': {\r\n            this.eventEmitter.emit(\r\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\r\n            break;\r\n        }\r\n        case 'session-terminate': {\r\n            logger.log('terminating...', sess.sid);\r\n            let reasonCondition = null;\r\n            let reasonText = null;\r\n\r\n            if ($(iq).find('>jingle>reason').length) {\r\n                reasonCondition\r\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\r\n                reasonText = $(iq).find('>jingle>reason>text').text();\r\n            }\r\n            this.terminate(sess.sid, reasonCondition, reasonText);\r\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\r\n                sess, reasonCondition, reasonText);\r\n            break;\r\n        }\r\n        case 'transport-replace':\r\n            logger.info('(TIME) Start transport replace:\\t', now);\r\n            Statistics.sendAnalytics(createJingleEvent(\r\n                ACTION_JINGLE_TR_RECEIVED,\r\n                {\r\n                    p2p: isP2P,\r\n                    value: now\r\n                }));\r\n\r\n            sess.replaceTransport($(iq).find('>jingle'), () => {\r\n                const successTime = window.performance.now();\r\n\r\n                logger.info('(TIME) Transport replace success:\\t', successTime);\r\n                Statistics.sendAnalytics(createJingleEvent(\r\n                    ACTION_JINGLE_TR_SUCCESS,\r\n                    {\r\n                        p2p: isP2P,\r\n                        value: successTime\r\n                    }));\r\n            }, error => {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error('Transport replace failed', error);\r\n                sess.sendTransportReject();\r\n            });\r\n            break;\r\n        case 'addsource': // FIXME: proprietary, un-jingleish\r\n        case 'source-add': // FIXME: proprietary\r\n            sess.addRemoteStream($(iq).find('>jingle>content'));\r\n            break;\r\n        case 'removesource': // FIXME: proprietary, un-jingleish\r\n        case 'source-remove': // FIXME: proprietary\r\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\r\n            break;\r\n        default:\r\n            logger.warn('jingle action not implemented', action);\r\n            ack.attrs({ type: 'error' });\r\n            ack.c('error', { type: 'cancel' })\r\n                .c('bad-request',\r\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\r\n                .up();\r\n            break;\r\n        }\r\n        this.connection.send(ack);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\r\n     * connection, configured as 'initiator'.\r\n     * @param {string} me our JID\r\n     * @param {string} peer remote participant's JID\r\n     * @return {JingleSessionPC}\r\n     */\r\n    newP2PJingleSession(me, peer) {\r\n        const sess\r\n            = new JingleSessionPC(\r\n                RandomUtil.randomHexString(12),\r\n                me,\r\n                peer,\r\n                this.connection,\r\n                this.mediaConstraints,\r\n                this.p2pIceConfig,\r\n                /* P2P */ true,\r\n                /* initiator */ true);\r\n\r\n        this.sessions[sess.sid] = sess;\r\n\r\n        return sess;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param sid\r\n     * @param reasonCondition\r\n     * @param reasonText\r\n     */\r\n    terminate(sid, reasonCondition, reasonText) {\r\n        if (this.sessions.hasOwnProperty(sid)) {\r\n            if (this.sessions[sid].state !== 'ended') {\r\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\r\n            }\r\n            delete this.sessions[sid];\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    getStunAndTurnCredentials() {\r\n        // get stun and turn configuration from server via xep-0215\r\n        // uses time-limited credentials as described in\r\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\r\n        //\r\n        // See https://modules.prosody.im/mod_turncredentials.html\r\n        // for a prosody module which implements this.\r\n        //\r\n        // Currently, this doesn't work with updateIce and therefore credentials\r\n        // with a long validity have to be fetched before creating the\r\n        // peerconnection.\r\n        // TODO: implement refresh via updateIce as described in\r\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\r\n        this.connection.sendIQ(\r\n            $iq({ type: 'get',\r\n                to: this.connection.domain })\r\n                .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\r\n            res => {\r\n                const iceservers = [];\r\n\r\n                $(res).find('>services>service').each((idx, el) => {\r\n                    // eslint-disable-next-line no-param-reassign\r\n                    el = $(el);\r\n                    const dict = {};\r\n                    const type = el.attr('type');\r\n\r\n                    switch (type) {\r\n                    case 'stun':\r\n                        dict.urls = `stun:${el.attr('host')}`;\r\n                        if (el.attr('port')) {\r\n                            dict.urls += `:${el.attr('port')}`;\r\n                        }\r\n                        iceservers.push(dict);\r\n                        break;\r\n                    case 'turn':\r\n                    case 'turns': {\r\n                        dict.urls = `${type}:`;\r\n                        const username = el.attr('username');\r\n\r\n                        // https://code.google.com/p/webrtc/issues/detail\r\n                        // ?id=1508\r\n\r\n                        if (username) {\r\n                            const match\r\n                                = navigator.userAgent.match(\r\n                                    /Chrom(e|ium)\\/([0-9]+)\\./);\r\n\r\n                            if (match && parseInt(match[2], 10) < 28) {\r\n                                dict.urls += `${username}@`;\r\n                            } else {\r\n                                // only works in M28\r\n                                dict.username = username;\r\n                            }\r\n                        }\r\n                        dict.urls += el.attr('host');\r\n                        const port = el.attr('port');\r\n\r\n                        if (port) {\r\n                            dict.urls += `:${el.attr('port')}`;\r\n                        }\r\n                        const transport = el.attr('transport');\r\n\r\n                        if (transport && transport !== 'udp') {\r\n                            dict.urls += `?transport=${transport}`;\r\n                        }\r\n\r\n                        dict.credential = el.attr('password')\r\n                                || dict.credential;\r\n                        iceservers.push(dict);\r\n                        break;\r\n                    }\r\n                    }\r\n                });\r\n\r\n                const options = this.xmpp.options;\r\n\r\n                // Shuffle ICEServers for loadbalancing\r\n                for (let i = iceservers.length - 1; i > 0; i--) {\r\n                    const j = Math.floor(Math.random() * (i + 1));\r\n                    const temp = iceservers[i];\r\n\r\n                    iceservers[i] = iceservers[j];\r\n                    iceservers[j] = temp;\r\n                }\r\n\r\n                let filter;\r\n\r\n                if (options.useTurnUdp) {\r\n                    filter = s => s.urls.startsWith('turn');\r\n                } else {\r\n                    // By default we filter out STUN and TURN/UDP and leave only TURN/TCP.\r\n                    filter = s => s.urls.startsWith('turn') && (s.urls.indexOf('transport=tcp') >= 0);\r\n                }\r\n\r\n                this.jvbIceConfig.iceServers = iceservers.filter(filter);\r\n                this.p2pIceConfig.iceServers = iceservers;\r\n            }, err => {\r\n                logger.warn('getting turn credentials failed', err);\r\n                logger.warn('is mod_turncredentials or similar installed?');\r\n            });\r\n\r\n        // implement push?\r\n    }\r\n\r\n    /**\r\n     * Returns the data saved in 'updateLog' in a format to be logged.\r\n     */\r\n    getLog() {\r\n        const data = {};\r\n\r\n        Object.keys(this.sessions).forEach(sid => {\r\n            const session = this.sessions[sid];\r\n            const pc = session.peerconnection;\r\n\r\n            if (pc && pc.updateLog) {\r\n                // FIXME: should probably be a .dump call\r\n                data[`jingle_${sid}`] = {\r\n                    updateLog: pc.updateLog,\r\n                    stats: pc.stats,\r\n                    url: window.location.href\r\n                };\r\n            }\r\n        });\r\n\r\n        return data;\r\n    }\r\n}\r\n\r\n/* eslint-enable newline-per-chained-call */\r\n","import async from 'async';\r\n\r\n/**\r\n * A queue for async task execution.\r\n */\r\nexport default class AsyncQueue {\r\n    /**\r\n     * Creates new instance.\r\n     */\r\n    constructor() {\r\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\r\n        this._stopped = false;\r\n    }\r\n\r\n    /**\r\n     * Removes any pending tasks from the queue.\r\n     */\r\n    clear() {\r\n        this._queue.kill();\r\n    }\r\n\r\n    /**\r\n     * Internal task processing implementation which makes things work.\r\n     */\r\n    _processQueueTasks(task, finishedCallback) {\r\n        task(finishedCallback);\r\n    }\r\n\r\n    /**\r\n     * The 'task' function will be given a callback it MUST call with either:\r\n     *  1) No arguments if it was successful or\r\n     *  2) An error argument if there was an error\r\n     * If the task wants to process the success or failure of the task, it\r\n     * should pass the {@code callback} to the push function, e.g.:\r\n     * queue.push(task, (err) => {\r\n     *     if (err) {\r\n     *         // error handling\r\n     *     } else {\r\n     *         // success handling\r\n     *     }\r\n     * });\r\n     *\r\n     * @param {function} task - The task to be executed. See the description above.\r\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\r\n     */\r\n    push(task, callback) {\r\n        if (this._stopped) {\r\n            callback && callback(new Error('The queue has been stopped'));\r\n\r\n            return;\r\n        }\r\n        this._queue.push(task, callback);\r\n    }\r\n\r\n    /**\r\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\r\n     * after the queue has been shutdown then the callback will be called with an error.\r\n     */\r\n    shutdown() {\r\n        this._stopped = true;\r\n    }\r\n}\r\n","/*!\r\n * async\r\n * https://github.com/caolan/async\r\n *\r\n * Copyright 2010-2014 Caolan McMahon\r\n * Released under the MIT license\r\n */\r\n/*jshint onevar: false, indent:4 */\r\n/*global setImmediate: false, setTimeout: false, console: false */\r\n(function () {\r\n\r\n    var async = {};\r\n\r\n    // global on the server, window in the browser\r\n    var root, previous_async;\r\n\r\n    root = this;\r\n    if (root != null) {\r\n      previous_async = root.async;\r\n    }\r\n\r\n    async.noConflict = function () {\r\n        root.async = previous_async;\r\n        return async;\r\n    };\r\n\r\n    function only_once(fn) {\r\n        var called = false;\r\n        return function() {\r\n            if (called) throw new Error(\"Callback was already called.\");\r\n            called = true;\r\n            fn.apply(root, arguments);\r\n        }\r\n    }\r\n\r\n    //// cross-browser compatiblity functions ////\r\n\r\n    var _toString = Object.prototype.toString;\r\n\r\n    var _isArray = Array.isArray || function (obj) {\r\n        return _toString.call(obj) === '[object Array]';\r\n    };\r\n\r\n    var _each = function (arr, iterator) {\r\n        if (arr.forEach) {\r\n            return arr.forEach(iterator);\r\n        }\r\n        for (var i = 0; i < arr.length; i += 1) {\r\n            iterator(arr[i], i, arr);\r\n        }\r\n    };\r\n\r\n    var _map = function (arr, iterator) {\r\n        if (arr.map) {\r\n            return arr.map(iterator);\r\n        }\r\n        var results = [];\r\n        _each(arr, function (x, i, a) {\r\n            results.push(iterator(x, i, a));\r\n        });\r\n        return results;\r\n    };\r\n\r\n    var _reduce = function (arr, iterator, memo) {\r\n        if (arr.reduce) {\r\n            return arr.reduce(iterator, memo);\r\n        }\r\n        _each(arr, function (x, i, a) {\r\n            memo = iterator(memo, x, i, a);\r\n        });\r\n        return memo;\r\n    };\r\n\r\n    var _keys = function (obj) {\r\n        if (Object.keys) {\r\n            return Object.keys(obj);\r\n        }\r\n        var keys = [];\r\n        for (var k in obj) {\r\n            if (obj.hasOwnProperty(k)) {\r\n                keys.push(k);\r\n            }\r\n        }\r\n        return keys;\r\n    };\r\n\r\n    //// exported async module functions ////\r\n\r\n    //// nextTick implementation with browser-compatible fallback ////\r\n    if (typeof process === 'undefined' || !(process.nextTick)) {\r\n        if (typeof setImmediate === 'function') {\r\n            async.nextTick = function (fn) {\r\n                // not a direct alias for IE10 compatibility\r\n                setImmediate(fn);\r\n            };\r\n            async.setImmediate = async.nextTick;\r\n        }\r\n        else {\r\n            async.nextTick = function (fn) {\r\n                setTimeout(fn, 0);\r\n            };\r\n            async.setImmediate = async.nextTick;\r\n        }\r\n    }\r\n    else {\r\n        async.nextTick = process.nextTick;\r\n        if (typeof setImmediate !== 'undefined') {\r\n            async.setImmediate = function (fn) {\r\n              // not a direct alias for IE10 compatibility\r\n              setImmediate(fn);\r\n            };\r\n        }\r\n        else {\r\n            async.setImmediate = async.nextTick;\r\n        }\r\n    }\r\n\r\n    async.each = function (arr, iterator, callback) {\r\n        callback = callback || function () {};\r\n        if (!arr.length) {\r\n            return callback();\r\n        }\r\n        var completed = 0;\r\n        _each(arr, function (x) {\r\n            iterator(x, only_once(done) );\r\n        });\r\n        function done(err) {\r\n          if (err) {\r\n              callback(err);\r\n              callback = function () {};\r\n          }\r\n          else {\r\n              completed += 1;\r\n              if (completed >= arr.length) {\r\n                  callback();\r\n              }\r\n          }\r\n        }\r\n    };\r\n    async.forEach = async.each;\r\n\r\n    async.eachSeries = function (arr, iterator, callback) {\r\n        callback = callback || function () {};\r\n        if (!arr.length) {\r\n            return callback();\r\n        }\r\n        var completed = 0;\r\n        var iterate = function () {\r\n            iterator(arr[completed], function (err) {\r\n                if (err) {\r\n                    callback(err);\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    completed += 1;\r\n                    if (completed >= arr.length) {\r\n                        callback();\r\n                    }\r\n                    else {\r\n                        iterate();\r\n                    }\r\n                }\r\n            });\r\n        };\r\n        iterate();\r\n    };\r\n    async.forEachSeries = async.eachSeries;\r\n\r\n    async.eachLimit = function (arr, limit, iterator, callback) {\r\n        var fn = _eachLimit(limit);\r\n        fn.apply(null, [arr, iterator, callback]);\r\n    };\r\n    async.forEachLimit = async.eachLimit;\r\n\r\n    var _eachLimit = function (limit) {\r\n\r\n        return function (arr, iterator, callback) {\r\n            callback = callback || function () {};\r\n            if (!arr.length || limit <= 0) {\r\n                return callback();\r\n            }\r\n            var completed = 0;\r\n            var started = 0;\r\n            var running = 0;\r\n\r\n            (function replenish () {\r\n                if (completed >= arr.length) {\r\n                    return callback();\r\n                }\r\n\r\n                while (running < limit && started < arr.length) {\r\n                    started += 1;\r\n                    running += 1;\r\n                    iterator(arr[started - 1], function (err) {\r\n                        if (err) {\r\n                            callback(err);\r\n                            callback = function () {};\r\n                        }\r\n                        else {\r\n                            completed += 1;\r\n                            running -= 1;\r\n                            if (completed >= arr.length) {\r\n                                callback();\r\n                            }\r\n                            else {\r\n                                replenish();\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            })();\r\n        };\r\n    };\r\n\r\n\r\n    var doParallel = function (fn) {\r\n        return function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(null, [async.each].concat(args));\r\n        };\r\n    };\r\n    var doParallelLimit = function(limit, fn) {\r\n        return function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\r\n        };\r\n    };\r\n    var doSeries = function (fn) {\r\n        return function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            return fn.apply(null, [async.eachSeries].concat(args));\r\n        };\r\n    };\r\n\r\n\r\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\r\n        arr = _map(arr, function (x, i) {\r\n            return {index: i, value: x};\r\n        });\r\n        if (!callback) {\r\n            eachfn(arr, function (x, callback) {\r\n                iterator(x.value, function (err) {\r\n                    callback(err);\r\n                });\r\n            });\r\n        } else {\r\n            var results = [];\r\n            eachfn(arr, function (x, callback) {\r\n                iterator(x.value, function (err, v) {\r\n                    results[x.index] = v;\r\n                    callback(err);\r\n                });\r\n            }, function (err) {\r\n                callback(err, results);\r\n            });\r\n        }\r\n    };\r\n    async.map = doParallel(_asyncMap);\r\n    async.mapSeries = doSeries(_asyncMap);\r\n    async.mapLimit = function (arr, limit, iterator, callback) {\r\n        return _mapLimit(limit)(arr, iterator, callback);\r\n    };\r\n\r\n    var _mapLimit = function(limit) {\r\n        return doParallelLimit(limit, _asyncMap);\r\n    };\r\n\r\n    // reduce only has a series version, as doing reduce in parallel won't\r\n    // work in many situations.\r\n    async.reduce = function (arr, memo, iterator, callback) {\r\n        async.eachSeries(arr, function (x, callback) {\r\n            iterator(memo, x, function (err, v) {\r\n                memo = v;\r\n                callback(err);\r\n            });\r\n        }, function (err) {\r\n            callback(err, memo);\r\n        });\r\n    };\r\n    // inject alias\r\n    async.inject = async.reduce;\r\n    // foldl alias\r\n    async.foldl = async.reduce;\r\n\r\n    async.reduceRight = function (arr, memo, iterator, callback) {\r\n        var reversed = _map(arr, function (x) {\r\n            return x;\r\n        }).reverse();\r\n        async.reduce(reversed, memo, iterator, callback);\r\n    };\r\n    // foldr alias\r\n    async.foldr = async.reduceRight;\r\n\r\n    var _filter = function (eachfn, arr, iterator, callback) {\r\n        var results = [];\r\n        arr = _map(arr, function (x, i) {\r\n            return {index: i, value: x};\r\n        });\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x.value, function (v) {\r\n                if (v) {\r\n                    results.push(x);\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            callback(_map(results.sort(function (a, b) {\r\n                return a.index - b.index;\r\n            }), function (x) {\r\n                return x.value;\r\n            }));\r\n        });\r\n    };\r\n    async.filter = doParallel(_filter);\r\n    async.filterSeries = doSeries(_filter);\r\n    // select alias\r\n    async.select = async.filter;\r\n    async.selectSeries = async.filterSeries;\r\n\r\n    var _reject = function (eachfn, arr, iterator, callback) {\r\n        var results = [];\r\n        arr = _map(arr, function (x, i) {\r\n            return {index: i, value: x};\r\n        });\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x.value, function (v) {\r\n                if (!v) {\r\n                    results.push(x);\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            callback(_map(results.sort(function (a, b) {\r\n                return a.index - b.index;\r\n            }), function (x) {\r\n                return x.value;\r\n            }));\r\n        });\r\n    };\r\n    async.reject = doParallel(_reject);\r\n    async.rejectSeries = doSeries(_reject);\r\n\r\n    var _detect = function (eachfn, arr, iterator, main_callback) {\r\n        eachfn(arr, function (x, callback) {\r\n            iterator(x, function (result) {\r\n                if (result) {\r\n                    main_callback(x);\r\n                    main_callback = function () {};\r\n                }\r\n                else {\r\n                    callback();\r\n                }\r\n            });\r\n        }, function (err) {\r\n            main_callback();\r\n        });\r\n    };\r\n    async.detect = doParallel(_detect);\r\n    async.detectSeries = doSeries(_detect);\r\n\r\n    async.some = function (arr, iterator, main_callback) {\r\n        async.each(arr, function (x, callback) {\r\n            iterator(x, function (v) {\r\n                if (v) {\r\n                    main_callback(true);\r\n                    main_callback = function () {};\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            main_callback(false);\r\n        });\r\n    };\r\n    // any alias\r\n    async.any = async.some;\r\n\r\n    async.every = function (arr, iterator, main_callback) {\r\n        async.each(arr, function (x, callback) {\r\n            iterator(x, function (v) {\r\n                if (!v) {\r\n                    main_callback(false);\r\n                    main_callback = function () {};\r\n                }\r\n                callback();\r\n            });\r\n        }, function (err) {\r\n            main_callback(true);\r\n        });\r\n    };\r\n    // all alias\r\n    async.all = async.every;\r\n\r\n    async.sortBy = function (arr, iterator, callback) {\r\n        async.map(arr, function (x, callback) {\r\n            iterator(x, function (err, criteria) {\r\n                if (err) {\r\n                    callback(err);\r\n                }\r\n                else {\r\n                    callback(null, {value: x, criteria: criteria});\r\n                }\r\n            });\r\n        }, function (err, results) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            else {\r\n                var fn = function (left, right) {\r\n                    var a = left.criteria, b = right.criteria;\r\n                    return a < b ? -1 : a > b ? 1 : 0;\r\n                };\r\n                callback(null, _map(results.sort(fn), function (x) {\r\n                    return x.value;\r\n                }));\r\n            }\r\n        });\r\n    };\r\n\r\n    async.auto = function (tasks, callback) {\r\n        callback = callback || function () {};\r\n        var keys = _keys(tasks);\r\n        var remainingTasks = keys.length\r\n        if (!remainingTasks) {\r\n            return callback();\r\n        }\r\n\r\n        var results = {};\r\n\r\n        var listeners = [];\r\n        var addListener = function (fn) {\r\n            listeners.unshift(fn);\r\n        };\r\n        var removeListener = function (fn) {\r\n            for (var i = 0; i < listeners.length; i += 1) {\r\n                if (listeners[i] === fn) {\r\n                    listeners.splice(i, 1);\r\n                    return;\r\n                }\r\n            }\r\n        };\r\n        var taskComplete = function () {\r\n            remainingTasks--\r\n            _each(listeners.slice(0), function (fn) {\r\n                fn();\r\n            });\r\n        };\r\n\r\n        addListener(function () {\r\n            if (!remainingTasks) {\r\n                var theCallback = callback;\r\n                // prevent final callback from calling itself if it errors\r\n                callback = function () {};\r\n\r\n                theCallback(null, results);\r\n            }\r\n        });\r\n\r\n        _each(keys, function (k) {\r\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\r\n            var taskCallback = function (err) {\r\n                var args = Array.prototype.slice.call(arguments, 1);\r\n                if (args.length <= 1) {\r\n                    args = args[0];\r\n                }\r\n                if (err) {\r\n                    var safeResults = {};\r\n                    _each(_keys(results), function(rkey) {\r\n                        safeResults[rkey] = results[rkey];\r\n                    });\r\n                    safeResults[k] = args;\r\n                    callback(err, safeResults);\r\n                    // stop subsequent errors hitting callback multiple times\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    results[k] = args;\r\n                    async.setImmediate(taskComplete);\r\n                }\r\n            };\r\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\r\n            var ready = function () {\r\n                return _reduce(requires, function (a, x) {\r\n                    return (a && results.hasOwnProperty(x));\r\n                }, true) && !results.hasOwnProperty(k);\r\n            };\r\n            if (ready()) {\r\n                task[task.length - 1](taskCallback, results);\r\n            }\r\n            else {\r\n                var listener = function () {\r\n                    if (ready()) {\r\n                        removeListener(listener);\r\n                        task[task.length - 1](taskCallback, results);\r\n                    }\r\n                };\r\n                addListener(listener);\r\n            }\r\n        });\r\n    };\r\n\r\n    async.retry = function(times, task, callback) {\r\n        var DEFAULT_TIMES = 5;\r\n        var attempts = [];\r\n        // Use defaults if times not passed\r\n        if (typeof times === 'function') {\r\n            callback = task;\r\n            task = times;\r\n            times = DEFAULT_TIMES;\r\n        }\r\n        // Make sure times is a number\r\n        times = parseInt(times, 10) || DEFAULT_TIMES;\r\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\r\n            var retryAttempt = function(task, finalAttempt) {\r\n                return function(seriesCallback) {\r\n                    task(function(err, result){\r\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\r\n                    }, wrappedResults);\r\n                };\r\n            };\r\n            while (times) {\r\n                attempts.push(retryAttempt(task, !(times-=1)));\r\n            }\r\n            async.series(attempts, function(done, data){\r\n                data = data[data.length - 1];\r\n                (wrappedCallback || callback)(data.err, data.result);\r\n            });\r\n        }\r\n        // If a callback is passed, run this as a controll flow\r\n        return callback ? wrappedTask() : wrappedTask\r\n    };\r\n\r\n    async.waterfall = function (tasks, callback) {\r\n        callback = callback || function () {};\r\n        if (!_isArray(tasks)) {\r\n          var err = new Error('First argument to waterfall must be an array of functions');\r\n          return callback(err);\r\n        }\r\n        if (!tasks.length) {\r\n            return callback();\r\n        }\r\n        var wrapIterator = function (iterator) {\r\n            return function (err) {\r\n                if (err) {\r\n                    callback.apply(null, arguments);\r\n                    callback = function () {};\r\n                }\r\n                else {\r\n                    var args = Array.prototype.slice.call(arguments, 1);\r\n                    var next = iterator.next();\r\n                    if (next) {\r\n                        args.push(wrapIterator(next));\r\n                    }\r\n                    else {\r\n                        args.push(callback);\r\n                    }\r\n                    async.setImmediate(function () {\r\n                        iterator.apply(null, args);\r\n                    });\r\n                }\r\n            };\r\n        };\r\n        wrapIterator(async.iterator(tasks))();\r\n    };\r\n\r\n    var _parallel = function(eachfn, tasks, callback) {\r\n        callback = callback || function () {};\r\n        if (_isArray(tasks)) {\r\n            eachfn.map(tasks, function (fn, callback) {\r\n                if (fn) {\r\n                    fn(function (err) {\r\n                        var args = Array.prototype.slice.call(arguments, 1);\r\n                        if (args.length <= 1) {\r\n                            args = args[0];\r\n                        }\r\n                        callback.call(null, err, args);\r\n                    });\r\n                }\r\n            }, callback);\r\n        }\r\n        else {\r\n            var results = {};\r\n            eachfn.each(_keys(tasks), function (k, callback) {\r\n                tasks[k](function (err) {\r\n                    var args = Array.prototype.slice.call(arguments, 1);\r\n                    if (args.length <= 1) {\r\n                        args = args[0];\r\n                    }\r\n                    results[k] = args;\r\n                    callback(err);\r\n                });\r\n            }, function (err) {\r\n                callback(err, results);\r\n            });\r\n        }\r\n    };\r\n\r\n    async.parallel = function (tasks, callback) {\r\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\r\n    };\r\n\r\n    async.parallelLimit = function(tasks, limit, callback) {\r\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\r\n    };\r\n\r\n    async.series = function (tasks, callback) {\r\n        callback = callback || function () {};\r\n        if (_isArray(tasks)) {\r\n            async.mapSeries(tasks, function (fn, callback) {\r\n                if (fn) {\r\n                    fn(function (err) {\r\n                        var args = Array.prototype.slice.call(arguments, 1);\r\n                        if (args.length <= 1) {\r\n                            args = args[0];\r\n                        }\r\n                        callback.call(null, err, args);\r\n                    });\r\n                }\r\n            }, callback);\r\n        }\r\n        else {\r\n            var results = {};\r\n            async.eachSeries(_keys(tasks), function (k, callback) {\r\n                tasks[k](function (err) {\r\n                    var args = Array.prototype.slice.call(arguments, 1);\r\n                    if (args.length <= 1) {\r\n                        args = args[0];\r\n                    }\r\n                    results[k] = args;\r\n                    callback(err);\r\n                });\r\n            }, function (err) {\r\n                callback(err, results);\r\n            });\r\n        }\r\n    };\r\n\r\n    async.iterator = function (tasks) {\r\n        var makeCallback = function (index) {\r\n            var fn = function () {\r\n                if (tasks.length) {\r\n                    tasks[index].apply(null, arguments);\r\n                }\r\n                return fn.next();\r\n            };\r\n            fn.next = function () {\r\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\r\n            };\r\n            return fn;\r\n        };\r\n        return makeCallback(0);\r\n    };\r\n\r\n    async.apply = function (fn) {\r\n        var args = Array.prototype.slice.call(arguments, 1);\r\n        return function () {\r\n            return fn.apply(\r\n                null, args.concat(Array.prototype.slice.call(arguments))\r\n            );\r\n        };\r\n    };\r\n\r\n    var _concat = function (eachfn, arr, fn, callback) {\r\n        var r = [];\r\n        eachfn(arr, function (x, cb) {\r\n            fn(x, function (err, y) {\r\n                r = r.concat(y || []);\r\n                cb(err);\r\n            });\r\n        }, function (err) {\r\n            callback(err, r);\r\n        });\r\n    };\r\n    async.concat = doParallel(_concat);\r\n    async.concatSeries = doSeries(_concat);\r\n\r\n    async.whilst = function (test, iterator, callback) {\r\n        if (test()) {\r\n            iterator(function (err) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                async.whilst(test, iterator, callback);\r\n            });\r\n        }\r\n        else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    async.doWhilst = function (iterator, test, callback) {\r\n        iterator(function (err) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            var args = Array.prototype.slice.call(arguments, 1);\r\n            if (test.apply(null, args)) {\r\n                async.doWhilst(iterator, test, callback);\r\n            }\r\n            else {\r\n                callback();\r\n            }\r\n        });\r\n    };\r\n\r\n    async.until = function (test, iterator, callback) {\r\n        if (!test()) {\r\n            iterator(function (err) {\r\n                if (err) {\r\n                    return callback(err);\r\n                }\r\n                async.until(test, iterator, callback);\r\n            });\r\n        }\r\n        else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    async.doUntil = function (iterator, test, callback) {\r\n        iterator(function (err) {\r\n            if (err) {\r\n                return callback(err);\r\n            }\r\n            var args = Array.prototype.slice.call(arguments, 1);\r\n            if (!test.apply(null, args)) {\r\n                async.doUntil(iterator, test, callback);\r\n            }\r\n            else {\r\n                callback();\r\n            }\r\n        });\r\n    };\r\n\r\n    async.queue = function (worker, concurrency) {\r\n        if (concurrency === undefined) {\r\n            concurrency = 1;\r\n        }\r\n        function _insert(q, data, pos, callback) {\r\n          if (!q.started){\r\n            q.started = true;\r\n          }\r\n          if (!_isArray(data)) {\r\n              data = [data];\r\n          }\r\n          if(data.length == 0) {\r\n             // call drain immediately if there are no tasks\r\n             return async.setImmediate(function() {\r\n                 if (q.drain) {\r\n                     q.drain();\r\n                 }\r\n             });\r\n          }\r\n          _each(data, function(task) {\r\n              var item = {\r\n                  data: task,\r\n                  callback: typeof callback === 'function' ? callback : null\r\n              };\r\n\r\n              if (pos) {\r\n                q.tasks.unshift(item);\r\n              } else {\r\n                q.tasks.push(item);\r\n              }\r\n\r\n              if (q.saturated && q.tasks.length === q.concurrency) {\r\n                  q.saturated();\r\n              }\r\n              async.setImmediate(q.process);\r\n          });\r\n        }\r\n\r\n        var workers = 0;\r\n        var q = {\r\n            tasks: [],\r\n            concurrency: concurrency,\r\n            saturated: null,\r\n            empty: null,\r\n            drain: null,\r\n            started: false,\r\n            paused: false,\r\n            push: function (data, callback) {\r\n              _insert(q, data, false, callback);\r\n            },\r\n            kill: function () {\r\n              q.drain = null;\r\n              q.tasks = [];\r\n            },\r\n            unshift: function (data, callback) {\r\n              _insert(q, data, true, callback);\r\n            },\r\n            process: function () {\r\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\r\n                    var task = q.tasks.shift();\r\n                    if (q.empty && q.tasks.length === 0) {\r\n                        q.empty();\r\n                    }\r\n                    workers += 1;\r\n                    var next = function () {\r\n                        workers -= 1;\r\n                        if (task.callback) {\r\n                            task.callback.apply(task, arguments);\r\n                        }\r\n                        if (q.drain && q.tasks.length + workers === 0) {\r\n                            q.drain();\r\n                        }\r\n                        q.process();\r\n                    };\r\n                    var cb = only_once(next);\r\n                    worker(task.data, cb);\r\n                }\r\n            },\r\n            length: function () {\r\n                return q.tasks.length;\r\n            },\r\n            running: function () {\r\n                return workers;\r\n            },\r\n            idle: function() {\r\n                return q.tasks.length + workers === 0;\r\n            },\r\n            pause: function () {\r\n                if (q.paused === true) { return; }\r\n                q.paused = true;\r\n                q.process();\r\n            },\r\n            resume: function () {\r\n                if (q.paused === false) { return; }\r\n                q.paused = false;\r\n                q.process();\r\n            }\r\n        };\r\n        return q;\r\n    };\r\n    \r\n    async.priorityQueue = function (worker, concurrency) {\r\n        \r\n        function _compareTasks(a, b){\r\n          return a.priority - b.priority;\r\n        };\r\n        \r\n        function _binarySearch(sequence, item, compare) {\r\n          var beg = -1,\r\n              end = sequence.length - 1;\r\n          while (beg < end) {\r\n            var mid = beg + ((end - beg + 1) >>> 1);\r\n            if (compare(item, sequence[mid]) >= 0) {\r\n              beg = mid;\r\n            } else {\r\n              end = mid - 1;\r\n            }\r\n          }\r\n          return beg;\r\n        }\r\n        \r\n        function _insert(q, data, priority, callback) {\r\n          if (!q.started){\r\n            q.started = true;\r\n          }\r\n          if (!_isArray(data)) {\r\n              data = [data];\r\n          }\r\n          if(data.length == 0) {\r\n             // call drain immediately if there are no tasks\r\n             return async.setImmediate(function() {\r\n                 if (q.drain) {\r\n                     q.drain();\r\n                 }\r\n             });\r\n          }\r\n          _each(data, function(task) {\r\n              var item = {\r\n                  data: task,\r\n                  priority: priority,\r\n                  callback: typeof callback === 'function' ? callback : null\r\n              };\r\n              \r\n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\r\n\r\n              if (q.saturated && q.tasks.length === q.concurrency) {\r\n                  q.saturated();\r\n              }\r\n              async.setImmediate(q.process);\r\n          });\r\n        }\r\n        \r\n        // Start with a normal queue\r\n        var q = async.queue(worker, concurrency);\r\n        \r\n        // Override push to accept second parameter representing priority\r\n        q.push = function (data, priority, callback) {\r\n          _insert(q, data, priority, callback);\r\n        };\r\n        \r\n        // Remove unshift function\r\n        delete q.unshift;\r\n\r\n        return q;\r\n    };\r\n\r\n    async.cargo = function (worker, payload) {\r\n        var working     = false,\r\n            tasks       = [];\r\n\r\n        var cargo = {\r\n            tasks: tasks,\r\n            payload: payload,\r\n            saturated: null,\r\n            empty: null,\r\n            drain: null,\r\n            drained: true,\r\n            push: function (data, callback) {\r\n                if (!_isArray(data)) {\r\n                    data = [data];\r\n                }\r\n                _each(data, function(task) {\r\n                    tasks.push({\r\n                        data: task,\r\n                        callback: typeof callback === 'function' ? callback : null\r\n                    });\r\n                    cargo.drained = false;\r\n                    if (cargo.saturated && tasks.length === payload) {\r\n                        cargo.saturated();\r\n                    }\r\n                });\r\n                async.setImmediate(cargo.process);\r\n            },\r\n            process: function process() {\r\n                if (working) return;\r\n                if (tasks.length === 0) {\r\n                    if(cargo.drain && !cargo.drained) cargo.drain();\r\n                    cargo.drained = true;\r\n                    return;\r\n                }\r\n\r\n                var ts = typeof payload === 'number'\r\n                            ? tasks.splice(0, payload)\r\n                            : tasks.splice(0, tasks.length);\r\n\r\n                var ds = _map(ts, function (task) {\r\n                    return task.data;\r\n                });\r\n\r\n                if(cargo.empty) cargo.empty();\r\n                working = true;\r\n                worker(ds, function () {\r\n                    working = false;\r\n\r\n                    var args = arguments;\r\n                    _each(ts, function (data) {\r\n                        if (data.callback) {\r\n                            data.callback.apply(null, args);\r\n                        }\r\n                    });\r\n\r\n                    process();\r\n                });\r\n            },\r\n            length: function () {\r\n                return tasks.length;\r\n            },\r\n            running: function () {\r\n                return working;\r\n            }\r\n        };\r\n        return cargo;\r\n    };\r\n\r\n    var _console_fn = function (name) {\r\n        return function (fn) {\r\n            var args = Array.prototype.slice.call(arguments, 1);\r\n            fn.apply(null, args.concat([function (err) {\r\n                var args = Array.prototype.slice.call(arguments, 1);\r\n                if (typeof console !== 'undefined') {\r\n                    if (err) {\r\n                        if (console.error) {\r\n                            console.error(err);\r\n                        }\r\n                    }\r\n                    else if (console[name]) {\r\n                        _each(args, function (x) {\r\n                            console[name](x);\r\n                        });\r\n                    }\r\n                }\r\n            }]));\r\n        };\r\n    };\r\n    async.log = _console_fn('log');\r\n    async.dir = _console_fn('dir');\r\n    /*async.info = _console_fn('info');\r\n    async.warn = _console_fn('warn');\r\n    async.error = _console_fn('error');*/\r\n\r\n    async.memoize = function (fn, hasher) {\r\n        var memo = {};\r\n        var queues = {};\r\n        hasher = hasher || function (x) {\r\n            return x;\r\n        };\r\n        var memoized = function () {\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var callback = args.pop();\r\n            var key = hasher.apply(null, args);\r\n            if (key in memo) {\r\n                async.nextTick(function () {\r\n                    callback.apply(null, memo[key]);\r\n                });\r\n            }\r\n            else if (key in queues) {\r\n                queues[key].push(callback);\r\n            }\r\n            else {\r\n                queues[key] = [callback];\r\n                fn.apply(null, args.concat([function () {\r\n                    memo[key] = arguments;\r\n                    var q = queues[key];\r\n                    delete queues[key];\r\n                    for (var i = 0, l = q.length; i < l; i++) {\r\n                      q[i].apply(null, arguments);\r\n                    }\r\n                }]));\r\n            }\r\n        };\r\n        memoized.memo = memo;\r\n        memoized.unmemoized = fn;\r\n        return memoized;\r\n    };\r\n\r\n    async.unmemoize = function (fn) {\r\n      return function () {\r\n        return (fn.unmemoized || fn).apply(null, arguments);\r\n      };\r\n    };\r\n\r\n    async.times = function (count, iterator, callback) {\r\n        var counter = [];\r\n        for (var i = 0; i < count; i++) {\r\n            counter.push(i);\r\n        }\r\n        return async.map(counter, iterator, callback);\r\n    };\r\n\r\n    async.timesSeries = function (count, iterator, callback) {\r\n        var counter = [];\r\n        for (var i = 0; i < count; i++) {\r\n            counter.push(i);\r\n        }\r\n        return async.mapSeries(counter, iterator, callback);\r\n    };\r\n\r\n    async.seq = function (/* functions... */) {\r\n        var fns = arguments;\r\n        return function () {\r\n            var that = this;\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var callback = args.pop();\r\n            async.reduce(fns, args, function (newargs, fn, cb) {\r\n                fn.apply(that, newargs.concat([function () {\r\n                    var err = arguments[0];\r\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\r\n                    cb(err, nextargs);\r\n                }]))\r\n            },\r\n            function (err, results) {\r\n                callback.apply(that, [err].concat(results));\r\n            });\r\n        };\r\n    };\r\n\r\n    async.compose = function (/* functions... */) {\r\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\r\n    };\r\n\r\n    var _applyEach = function (eachfn, fns /*args...*/) {\r\n        var go = function () {\r\n            var that = this;\r\n            var args = Array.prototype.slice.call(arguments);\r\n            var callback = args.pop();\r\n            return eachfn(fns, function (fn, cb) {\r\n                fn.apply(that, args.concat([cb]));\r\n            },\r\n            callback);\r\n        };\r\n        if (arguments.length > 2) {\r\n            var args = Array.prototype.slice.call(arguments, 2);\r\n            return go.apply(this, args);\r\n        }\r\n        else {\r\n            return go;\r\n        }\r\n    };\r\n    async.applyEach = doParallel(_applyEach);\r\n    async.applyEachSeries = doSeries(_applyEach);\r\n\r\n    async.forever = function (fn, callback) {\r\n        function next(err) {\r\n            if (err) {\r\n                if (callback) {\r\n                    return callback(err);\r\n                }\r\n                throw err;\r\n            }\r\n            fn(next);\r\n        }\r\n        next();\r\n    };\r\n\r\n    // Node.js\r\n    if (typeof module !== 'undefined' && module.exports) {\r\n        module.exports = async;\r\n    }\r\n    // AMD / RequireJS\r\n    else if (typeof define !== 'undefined' && define.amd) {\r\n        define([], function () {\r\n            return async;\r\n        });\r\n    }\r\n    // included directly via <script> tag\r\n    else {\r\n        root.async = async;\r\n    }\r\n\r\n}());\r\n","/**\r\n * Implements a simple hash code for a string (see\r\n * https://en.wikipedia.org/wiki/Java_hashCode()).\r\n *\r\n * @param {string} The string to return a hash of.\r\n * @return {Number} the integer hash code of the string.\r\n */\r\nfunction integerHash(string) {\r\n    if (!string) {\r\n        return 0;\r\n    }\r\n\r\n    let char, hash = 0, i;\r\n\r\n    for (i = 0; i < string.length; i++) {\r\n        char = string.charCodeAt(i);\r\n        hash += char * Math.pow(31, string.length - 1 - i);\r\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\r\n    }\r\n\r\n    return hash;\r\n}\r\n\r\nmodule.exports = { integerHash };\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport * as JingleSessionState from './JingleSessionState';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * JingleSession provides an API to manage a single Jingle session. We will\r\n * have different implementations depending on the underlying interface used\r\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\r\n */\r\nexport default class JingleSession extends Listenable {\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * Creates new <tt>JingleSession</tt>.\r\n     * @param {string} sid the Jingle session identifier\r\n     * @param {string} localJid our JID\r\n     * @param {string} remoteJid the JID of the remote peer\r\n     * @param {XmppConnection} connection the XMPP connection\r\n     * @param {Object} mediaConstraints the media constraints object passed to\r\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\r\n     * @param {Object} iceConfig the ICE servers config object as defined by\r\n     * the WebRTC. Passed to the PeerConnection's constructor.\r\n     * @param {boolean} isInitiator indicates if it will be the side which\r\n     * initiates the session.\r\n     */\r\n    constructor(\r\n            sid,\r\n            localJid,\r\n            remoteJid,\r\n            connection,\r\n            mediaConstraints,\r\n            iceConfig,\r\n            isInitiator) {\r\n        super();\r\n        this.sid = sid;\r\n        this.localJid = localJid;\r\n        this.remoteJid = remoteJid;\r\n        this.connection = connection;\r\n        this.mediaConstraints = mediaConstraints;\r\n        this.iceConfig = iceConfig;\r\n\r\n        /**\r\n         * Indicates whether this instance is an initiator or an answerer of\r\n         * the Jingle session.\r\n         * @type {boolean}\r\n         */\r\n        this.isInitiator = isInitiator;\r\n\r\n        /**\r\n         * Whether to use dripping or not. Dripping is sending trickle\r\n         * candidates not one-by-one.\r\n         */\r\n        this.usedrip = true;\r\n\r\n        /**\r\n         *  When dripping is used, stores ICE candidates which are to be sent.\r\n         */\r\n        this.dripContainer = [];\r\n\r\n        /**\r\n         * The chat room instance associated with the session.\r\n         * @type {ChatRoom}\r\n         */\r\n        this.room = null;\r\n\r\n        this._signalingLayer = null;\r\n\r\n        /**\r\n         * Jingle session state - uninitialized until {@link initialize} is\r\n         * called @type {JingleSessionState}\r\n         */\r\n        this.state = null;\r\n\r\n        /**\r\n         * The RTC service instance\r\n         * @type {RTC}\r\n         */\r\n        this.rtc = null;\r\n    }\r\n\r\n    /**\r\n     * Returns XMPP address of this session's initiator.\r\n     * @return {string}\r\n     */\r\n    get initiatorJid() {\r\n        return this.isInitiator ? this.localJid : this.remoteJid;\r\n    }\r\n\r\n    /**\r\n     * Returns XMPP address of this session's responder.\r\n     * @return {string}\r\n     */\r\n    get responderJid() {\r\n        return this.isInitiator ? this.remoteJid : this.localJid;\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Prepares this object to initiate a session.\r\n     * @param {ChatRoom} room the chat room for the conference associated with\r\n     * this session\r\n     * @param {RTC} rtc the RTC service instance\r\n     * @param {object} options - the options, see implementing class's\r\n     * {@link #doInitialize} description for more details.\r\n     */\r\n    initialize(room, rtc, signalingLayer, options) {\r\n        if (this.state !== null) {\r\n            const errmsg\r\n                = `attempt to initiate on session ${this.sid}\r\n                   in state ${this.state}`;\r\n\r\n            logger.error(errmsg);\r\n            throw new Error(errmsg);\r\n        }\r\n        this.room = room;\r\n        this.rtc = rtc;\r\n        this._signalingLayer = signalingLayer;\r\n        this.state = JingleSessionState.PENDING;\r\n        this.doInitialize(options);\r\n    }\r\n\r\n    /**\r\n     * The implementing class finishes initialization here. Called at the end of\r\n     * {@link initialize}.\r\n     * @param {Object} options - The options specific to the implementing class.\r\n     * @protected\r\n     */\r\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\r\n\r\n    /* eslint-disable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Adds the ICE candidates found in the 'contents' array as remote\r\n     * candidates?\r\n     * Note: currently only used on transport-info\r\n     *\r\n     * @param contents\r\n     */\r\n    addIceCandidates(contents) {}\r\n\r\n    /* eslint-enable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Returns current state of this <tt>JingleSession</tt> instance.\r\n     * @returns {JingleSessionState} the current state of this session instance.\r\n     */\r\n    getState() {\r\n        return this.state;\r\n    }\r\n\r\n    /* eslint-disable no-unused-vars, no-empty-function */\r\n\r\n    /**\r\n     * Handles an 'add-source' event.\r\n     *\r\n     * @param contents an array of Jingle 'content' elements.\r\n     */\r\n    addSources(contents) {}\r\n\r\n    /**\r\n     * Handles a 'remove-source' event.\r\n     *\r\n     * @param contents an array of Jingle 'content' elements.\r\n     */\r\n    removeSources(contents) {}\r\n\r\n    /**\r\n     * Terminates this Jingle session by sending session-terminate\r\n     * @param success a callback called once the 'session-terminate' packet has\r\n     * been acknowledged with RESULT.\r\n     * @param failure a callback called when either timeout occurs or ERROR\r\n     * response is received.\r\n     * @param {Object} options\r\n     * @param {string} [options.reason] XMPP Jingle error condition\r\n     * @param {string} [options.reasonDescription] some meaningful error message\r\n     * @param {boolean} [options.requestRestart=false] set to true to ask Jicofo to start a new session one this once is\r\n     * terminated.\r\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\r\n     * sending session-terminate. It may not make sense to send it if the XMPP\r\n     * connection has been closed already or if the remote peer has disconnected\r\n     */\r\n    terminate(success, failure, options) {}\r\n\r\n    /**\r\n     * Handles an offer from the remote peer (prepares to accept a session).\r\n     * @param jingle the 'jingle' XML element.\r\n     * @param success callback called when we the incoming session has been\r\n     * accepted\r\n     * @param failure callback called when we fail for any reason, will supply\r\n     * error object with details(which is meant more to be printed to the logger\r\n     * than analysed in the code, as the error is unrecoverable anyway)\r\n     */\r\n    acceptOffer(jingle, success, failure) {}\r\n\r\n    /**\r\n     * Returns the JID of the initiator of the jingle session.\r\n     */\r\n    _getInitiatorJid() {\r\n        return this.isInitiator ? this.localJid : this.remoteJid;\r\n    }\r\n\r\n    /* eslint-enable no-unused-vars, no-empty-function */\r\n}\r\n","import { Strophe } from 'strophe.js';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\n/**\r\n *  Logs raw stanzas and makes them available for download as JSON\r\n */\r\nclass StropheLogger extends ConnectionPlugin {\r\n    /**\r\n     *\r\n     */\r\n    constructor() {\r\n        super();\r\n        this.log = [];\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n        this.connection.rawInput = this.logIncoming.bind(this);\r\n        this.connection.rawOutput = this.logOutgoing.bind(this);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stanza\r\n     */\r\n    logIncoming(stanza) {\r\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param stanza\r\n     */\r\n    logOutgoing(stanza) {\r\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\r\n    }\r\n}\r\n\r\n/**\r\n *\r\n */\r\nexport default function() {\r\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\r\n}\r\n","/* global $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport ConnectionPlugin from './ConnectionPlugin';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\r\n\r\n/**\r\n *\r\n */\r\nexport default class RayoConnectionPlugin extends ConnectionPlugin {\r\n    /**\r\n     *\r\n     * @param connection\r\n     */\r\n    init(connection) {\r\n        super.init(connection);\r\n\r\n        this.connection.addHandler(\r\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param iq\r\n     */\r\n    onRayo(iq) {\r\n        logger.info('Rayo IQ', iq);\r\n    }\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     *\r\n     * @param to\r\n     * @param from\r\n     * @param roomName\r\n     * @param roomPass\r\n     * @param focusMucJid\r\n     */\r\n    dial(to, from, roomName, roomPass, focusMucJid) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!focusMucJid) {\r\n                reject(new Error('Internal error!'));\r\n\r\n                return;\r\n            }\r\n            const req = $iq({\r\n                type: 'set',\r\n                to: focusMucJid\r\n            });\r\n\r\n            req.c('dial', {\r\n                xmlns: RAYO_XMLNS,\r\n                to,\r\n                from\r\n            });\r\n            req.c('header', {\r\n                name: 'JvbRoomName',\r\n                value: roomName\r\n            }).up();\r\n\r\n            if (roomPass && roomPass.length) {\r\n                req.c('header', {\r\n                    name: 'JvbRoomPassword',\r\n                    value: roomPass\r\n                }).up();\r\n            }\r\n\r\n            this.connection.sendIQ(\r\n                req,\r\n                result => {\r\n                    logger.info('Dial result ', result);\r\n\r\n                    // eslint-disable-next-line newline-per-chained-call\r\n                    const resource = $(result).find('ref').attr('uri');\r\n\r\n                    this.callResource = resource.substr('xmpp:'.length);\r\n                    logger.info(`Received call resource: ${this.callResource}`);\r\n                    resolve();\r\n                },\r\n                error => {\r\n                    logger.info('Dial error ', error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     *\r\n     */\r\n    hangup() {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.callResource) {\r\n                reject(new Error('No call in progress'));\r\n                logger.warn('No call in progress');\r\n\r\n                return;\r\n            }\r\n\r\n            const req = $iq({\r\n                type: 'set',\r\n                to: this.callResource\r\n            });\r\n\r\n            req.c('hangup', {\r\n                xmlns: RAYO_XMLNS\r\n            });\r\n\r\n            this.connection.sendIQ(req, result => {\r\n                logger.info('Hangup result ', result);\r\n                this.callResource = null;\r\n                resolve();\r\n            }, error => {\r\n                logger.info('Hangup error ', error);\r\n                this.callResource = null;\r\n                reject(new Error('Hangup error '));\r\n            });\r\n        });\r\n    }\r\n}\r\n","/* global __filename */\r\n/**\r\n * Strophe logger implementation. Logs from level WARN and above.\r\n */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This is the last HTTP error status captured from Strophe debug logs.\r\n * The purpose of storing it is to distinguish between the network and\r\n * infrastructure reason for connection being dropped (see connectionHandler in\r\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\r\n * which means that the failure could be transient.\r\n *\r\n * FIXME in the latest Strophe (not released on npm) there is API to handle\r\n * particular HTTP errors, but there is no way to learn if the subsequent\r\n * request succeeded in order to tell if the error was one time incident or if\r\n * it was the reason for dropping the connection by Strophe (the connection is\r\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\r\n * details about the reason on why the connection stopped.\r\n *\r\n * @type {number}\r\n */\r\nlet lastErrorStatus = -1;\r\n\r\n/**\r\n * A regular expression used to catch Strophe's log message indicating that the\r\n * last BOSH request was successful. When there is such message seen the\r\n * {@link lastErrorStatus} will be set back to '-1'.\r\n * @type {RegExp}\r\n */\r\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\r\n\r\n/**\r\n * A regular expression used to capture the current value of the BOSH request\r\n * error status (HTTP error code or '0' or something else).\r\n * @type {RegExp}\r\n */\r\nconst lastErrorStatusRegExpr\r\n    = /request errored, status: (\\d+), number of errors: \\d+/;\r\n\r\n/**\r\n *\r\n */\r\nexport default function() {\r\n\r\n    Strophe.log = function(level, msg) {\r\n        // Our global handler reports uncaught errors to the stats which may\r\n        // interpret those as partial call failure.\r\n        // Strophe log entry about secondary request timeout does not mean that\r\n        // it's a final failure(the request will be restarted), so we lower it's\r\n        // level here to a warning.\r\n        logger.trace('Strophe', level, msg);\r\n        if (typeof msg === 'string'\r\n                && msg.indexOf('Request ') !== -1\r\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\r\n            // eslint-disable-next-line no-param-reassign\r\n            level = Strophe.LogLevel.WARN;\r\n        }\r\n\r\n        /* eslint-disable no-case-declarations */\r\n        switch (level) {\r\n        case Strophe.LogLevel.DEBUG:\r\n            // The log message which reports successful status is logged on\r\n            // Strophe's DEBUG level.\r\n            if (lastErrorStatus !== -1\r\n                    && resetLastErrorStatusRegExpr.test(msg)) {\r\n                logger.debug('Reset lastErrorStatus');\r\n                lastErrorStatus = -1;\r\n            }\r\n            break;\r\n        case Strophe.LogLevel.WARN:\r\n            logger.warn(`Strophe: ${msg}`);\r\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\r\n\r\n            if (errStatusCapture && errStatusCapture.length === 2) {\r\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\r\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\r\n            }\r\n            break;\r\n        case Strophe.LogLevel.ERROR:\r\n        case Strophe.LogLevel.FATAL:\r\n            // eslint-disable-next-line no-param-reassign\r\n            msg = `Strophe: ${msg}`;\r\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\r\n            logger.error(msg);\r\n            break;\r\n        }\r\n\r\n        /* eslint-enable no-case-declarations */\r\n    };\r\n\r\n    /**\r\n     * Returns error status (HTTP error code) of the last BOSH request.\r\n     *\r\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\r\n     * (this is a hack).\r\n     */\r\n    Strophe.getLastErrorStatus = function() {\r\n        return lastErrorStatus;\r\n    };\r\n\r\n    Strophe.getStatusString = function(status) {\r\n        switch (status) {\r\n        case Strophe.Status.BINDREQUIRED:\r\n            return 'BINDREQUIRED';\r\n        case Strophe.Status.ERROR:\r\n            return 'ERROR';\r\n        case Strophe.Status.CONNECTING:\r\n            return 'CONNECTING';\r\n        case Strophe.Status.CONNFAIL:\r\n            return 'CONNFAIL';\r\n        case Strophe.Status.AUTHENTICATING:\r\n            return 'AUTHENTICATING';\r\n        case Strophe.Status.AUTHFAIL:\r\n            return 'AUTHFAIL';\r\n        case Strophe.Status.CONNECTED:\r\n            return 'CONNECTED';\r\n        case Strophe.Status.DISCONNECTED:\r\n            return 'DISCONNECTED';\r\n        case Strophe.Status.DISCONNECTING:\r\n            return 'DISCONNECTING';\r\n        case Strophe.Status.ATTACHED:\r\n            return 'ATTACHED';\r\n        default:\r\n            return 'unknown';\r\n        }\r\n    };\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\r\n * with the videobridge.\r\n */\r\nexport default class BridgeChannel {\r\n    /**\r\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\r\n     * instance, or creates a WebSocket connection with the videobridge.\r\n     * At least one of both, peerconnection or wsUrl parameters, must be\r\n     * given.\r\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\r\n     * instance.\r\n     * @param {string} [wsUrl] WebSocket URL.\r\n     * @param {EventEmitter} emitter the EventEmitter instance to use for event emission.\r\n     * @param {function} senderVideoConstraintsChanged callback to call when the sender video constraints change.\r\n     */\r\n    constructor(peerconnection, wsUrl, emitter) {\r\n        if (!peerconnection && !wsUrl) {\r\n            throw new TypeError(\r\n                'At least peerconnection or wsUrl must be given');\r\n        } else if (peerconnection && wsUrl) {\r\n            throw new TypeError(\r\n                'Just one of peerconnection or wsUrl must be given');\r\n        }\r\n\r\n        if (peerconnection) {\r\n            logger.debug('constructor() with peerconnection');\r\n        } else {\r\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\r\n        }\r\n\r\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\r\n        // @type {RTCDataChannel|WebSocket}\r\n        this._channel = null;\r\n\r\n        // @type {EventEmitter}\r\n        this._eventEmitter = emitter;\r\n\r\n        // Whether a RTCDataChannel or WebSocket is internally used.\r\n        // @type {string} \"datachannel\" / \"websocket\"\r\n        this._mode = null;\r\n\r\n        // Indicates whether the connection retries are enabled or not.\r\n        this._areRetriesEnabled = false;\r\n\r\n        // Indicates whether the connection was closed from the client or not.\r\n        this._closedFromClient = false;\r\n\r\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\r\n        // event.\r\n        if (peerconnection) {\r\n            const datachannel\r\n                = peerconnection.createDataChannel(\r\n                    'JVB data channel', {\r\n                        protocol: 'http://jitsi.org/protocols/colibri'\r\n                    });\r\n\r\n            // Handle the RTCDataChannel.\r\n            this._handleChannel(datachannel);\r\n            this._mode = 'datachannel';\r\n\r\n        // Otherwise create a WebSocket connection.\r\n        } else if (wsUrl) {\r\n            this._areRetriesEnabled = true;\r\n            this._wsUrl = wsUrl;\r\n            this._initWebSocket();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initializes the web socket channel.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _initWebSocket() {\r\n        // Create a WebSocket instance.\r\n        const ws = new WebSocket(this._wsUrl);\r\n\r\n        // Handle the WebSocket.\r\n        this._handleChannel(ws);\r\n        this._mode = 'websocket';\r\n    }\r\n\r\n    /**\r\n     * Starts the websocket connection retries.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _startConnectionRetries() {\r\n        let timeoutS = 1;\r\n\r\n        const reload = () => {\r\n            if (this.isOpen()) {\r\n                return;\r\n            }\r\n            this._initWebSocket(this._wsUrl);\r\n            timeoutS = Math.min(timeoutS * 2, 60);\r\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\r\n        };\r\n\r\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\r\n    }\r\n\r\n    /**\r\n     * Stops the websocket connection retries.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _stopConnectionRetries() {\r\n        if (this._retryTimeout) {\r\n            clearTimeout(this._retryTimeout);\r\n            this._retryTimeout = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retries to establish the websocket connection after the connection was closed by the server.\r\n     *\r\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\r\n     * @returns {void}\r\n     */\r\n    _retryWebSocketConnection(closeEvent) {\r\n        if (!this._areRetriesEnabled) {\r\n            return;\r\n        }\r\n        const { code, reason } = closeEvent;\r\n\r\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\r\n        this._areRetriesEnabled = false;\r\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\r\n            this._stopConnectionRetries();\r\n            this._areRetriesEnabled = true;\r\n        });\r\n        this._startConnectionRetries();\r\n    }\r\n\r\n    /**\r\n     * The channel mode.\r\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\r\n     */\r\n    get mode() {\r\n        return this._mode;\r\n    }\r\n\r\n    /**\r\n     * Closes the currently opened channel.\r\n     */\r\n    close() {\r\n        this._closedFromClient = true;\r\n        this._stopConnectionRetries();\r\n        this._areRetriesEnabled = false;\r\n        if (this._channel) {\r\n            try {\r\n                this._channel.close();\r\n            } catch (error) {} // eslint-disable-line no-empty\r\n\r\n            this._channel = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\r\n     * open.\r\n     * @return {boolean}\r\n     */\r\n    isOpen() {\r\n        return this._channel && (this._channel.readyState === 'open'\r\n            || this._channel.readyState === WebSocket.OPEN);\r\n    }\r\n\r\n    /**\r\n     * Sends local stats via the bridge channel.\r\n     * @param {Object} payload The payload of the message.\r\n     * @throws NetworkError/InvalidStateError/Error if the operation fails or if there is no data channel created.\r\n     */\r\n    sendEndpointStatsMessage(payload) {\r\n        this._send({\r\n            colibriClass: 'EndpointStats',\r\n            ...payload\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends message via the channel.\r\n     * @param {string} to The id of the endpoint that should receive the\r\n     * message. If \"\" the message will be sent to all participants.\r\n     * @param  {object} payload The payload of the message.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendMessage(to, payload) {\r\n        this._send({\r\n            colibriClass: 'EndpointMessage',\r\n            msgPayload: payload,\r\n            to\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"lastN value changed\" message via the channel.\r\n     * @param {number} value The new value for lastN. -1 means unlimited.\r\n     */\r\n    sendSetLastNMessage(value) {\r\n        const jsonObject = {\r\n            colibriClass: 'LastNChangedEvent',\r\n            lastN: value\r\n        };\r\n\r\n        this._send(jsonObject);\r\n        logger.log(`Channel lastN set to: ${value}`);\r\n    }\r\n\r\n    /**\r\n     * Sends a \"pinned endpoint changed\" message via the channel.\r\n     * @param {string} endpointId The id of the pinned endpoint.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendPinnedEndpointMessage(endpointId) {\r\n        logger.log(\r\n            'sending pinned changed notification to the bridge for endpoint ',\r\n            endpointId);\r\n\r\n        this._send({\r\n            colibriClass: 'PinnedEndpointChangedEvent',\r\n            pinnedEndpoint: endpointId || null\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"selected endpoints changed\" message via the channel.\r\n     *\r\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    sendSelectedEndpointsMessage(endpointIds) {\r\n        logger.log(\r\n            'sending selected changed notification to the bridge for endpoints',\r\n            endpointIds);\r\n\r\n        this._send({\r\n            colibriClass: 'SelectedEndpointsChangedEvent',\r\n            selectedEndpoints: endpointIds\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sends a \"receiver video constraint\" message via the channel.\r\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\r\n     * in pixels, this receiver is willing to receive\r\n     */\r\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\r\n        logger.log('sending a ReceiverVideoConstraint message with '\r\n            + `a maxFrameHeight of ${maxFrameHeightPixels} pixels`);\r\n        this._send({\r\n            colibriClass: 'ReceiverVideoConstraint',\r\n            maxFrameHeight: maxFrameHeightPixels\r\n        });\r\n    }\r\n\r\n    sendNewReceiverVideoConstraintsMessage(constraints) {\r\n        logger.log(`Sending ReceiverVideoConstraints with ${JSON.stringify(constraints)}`);\r\n        this._send({\r\n            colibriClass: 'ReceiverVideoConstraints',\r\n            ...constraints\r\n        });\r\n    }\r\n\r\n    sendVideoTypeMessage(videoType) {\r\n        logger.debug(`Sending VideoTypeMessage with video type as ${videoType}`);\r\n        this._send({\r\n            colibriClass: 'VideoTypeMessage',\r\n            videoType\r\n        });\r\n    }\r\n\r\n    sendSourceVideoTypeMessage(sourceName, videoType) {\r\n        logger.info(`Sending SourceVideoTypeMessage with video type ${sourceName}: ${videoType}`);\r\n        this._send({\r\n            colibriClass: 'SourceVideoTypeMessage',\r\n            sourceName,\r\n            videoType\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Set events on the given RTCDataChannel or WebSocket instance.\r\n     */\r\n    _handleChannel(channel) {\r\n        const emitter = this._eventEmitter;\r\n\r\n        channel.onopen = () => {\r\n            logger.info(`${this._mode} channel opened`);\r\n\r\n            // Code sample for sending string and/or binary data.\r\n            // Sends string message to the bridge:\r\n            //     channel.send(\"Hello bridge!\");\r\n            // Sends 12 bytes binary message to the bridge:\r\n            //     channel.send(new ArrayBuffer(12));\r\n\r\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\r\n        };\r\n\r\n        channel.onerror = event => {\r\n            // WS error events contain no information about the failure (this is available in the onclose event) and\r\n            // the event references the WS object itself, which causes hangs on mobile.\r\n            if (this._mode !== 'websocket') {\r\n                logger.error(`Channel error: ${event.message}`);\r\n            }\r\n        };\r\n\r\n        channel.onmessage = ({ data }) => {\r\n            // JSON object.\r\n            let obj;\r\n\r\n            try {\r\n                obj = JSON.parse(data);\r\n            } catch (error) {\r\n                GlobalOnErrorHandler.callErrorHandler(error);\r\n                logger.error(\r\n                    'Failed to parse channel message as JSON: ',\r\n                    data, error);\r\n\r\n                return;\r\n            }\r\n\r\n            const colibriClass = obj.colibriClass;\r\n\r\n            switch (colibriClass) {\r\n            case 'DominantSpeakerEndpointChangeEvent': {\r\n                // Endpoint ID from the Videobridge.\r\n                const dominantSpeakerEndpoint = obj.dominantSpeakerEndpoint;\r\n\r\n                logger.info(\r\n                    'Channel new dominant speaker event: ',\r\n                    dominantSpeakerEndpoint);\r\n                emitter.emit(\r\n                    RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n                    dominantSpeakerEndpoint);\r\n                break;\r\n            }\r\n            case 'EndpointConnectivityStatusChangeEvent': {\r\n                const endpoint = obj.endpoint;\r\n                const isActive = obj.active === 'true';\r\n\r\n                logger.info(\r\n                    `Endpoint connection status changed: ${endpoint} active ? ${\r\n                        isActive}`);\r\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\r\n                    endpoint, isActive);\r\n\r\n                break;\r\n            }\r\n            case 'EndpointMessage': {\r\n                emitter.emit(\r\n                    RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from,\r\n                    obj.msgPayload);\r\n\r\n                break;\r\n            }\r\n            case 'LastNEndpointsChangeEvent': {\r\n                // The new/latest list of last-n endpoint IDs.\r\n                const lastNEndpoints = obj.lastNEndpoints;\r\n\r\n                logger.info('Channel new last-n event: ',\r\n                    lastNEndpoints, obj);\r\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED,\r\n                    lastNEndpoints, obj);\r\n\r\n                break;\r\n            }\r\n            case 'LastNEndpointsChangeEvent': {\r\n                if (!FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                    // The new/latest list of last-n endpoint IDs (i.e. endpoints for which the bridge is sending\r\n                    // video).\r\n                    const lastNEndpoints = obj.lastNEndpoints;\r\n\r\n                    logger.info(`New forwarded endpoints: ${lastNEndpoints}`);\r\n                    emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED, lastNEndpoints);\r\n                }\r\n\r\n                break;\r\n            }\r\n            case 'ForwardedSources': {\r\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                    // The new/latest list of forwarded sources\r\n                    const forwardedSources = obj.forwardedSources;\r\n\r\n                    logger.info(`New forwarded sources: ${forwardedSources}`);\r\n                    emitter.emit(RTCEvents.FORWARDED_SOURCES_CHANGED, forwardedSources);\r\n                }\r\n\r\n                break;\r\n            }\r\n            case 'SenderVideoConstraints': {\r\n                const videoConstraints = obj.videoConstraints;\r\n\r\n                if (videoConstraints) {\r\n                    logger.info(`SenderVideoConstraints: ${JSON.stringify(videoConstraints)}`);\r\n                    emitter.emit(RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, videoConstraints);\r\n                }\r\n                break;\r\n            }\r\n            case 'SenderSourceConstraints': {\r\n                if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                    const { sourceName, maxHeight } = obj;\r\n\r\n                    if (typeof sourceName === 'string' && typeof maxHeight === 'number') {\r\n                        // eslint-disable-next-line object-property-newline\r\n                        logger.info(`SenderSourceConstraints: ${JSON.stringify({ sourceName, maxHeight })}`);\r\n                        emitter.emit(\r\n                            RTCEvents.SENDER_VIDEO_CONSTRAINTS_CHANGED, {\r\n                                sourceName,\r\n                                maxHeight\r\n                            }\r\n                        );\r\n                    } else {\r\n                        logger.error(`Invalid SenderSourceConstraints: ${JSON.stringify(obj)}`);\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case 'ServerHello': {\r\n                logger.info(`Received ServerHello, version=${obj.version}.`);\r\n                break;\r\n            }\r\n            default: {\r\n                logger.debug('Channel JSON-formatted message: ', obj);\r\n\r\n                // The received message appears to be appropriately formatted\r\n                // (i.e. is a JSON object which assigns a value to the\r\n                // mandatory property colibriClass) so don't just swallow it,\r\n                // expose it to public consumption.\r\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\r\n            }\r\n            }\r\n        };\r\n\r\n        channel.onclose = event => {\r\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\r\n\r\n            if (this._mode === 'websocket') {\r\n                if (!this._closedFromClient) {\r\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\r\n                    this._retryWebSocketConnection(event);\r\n                }\r\n            }\r\n\r\n            // Remove the channel.\r\n            this._channel = null;\r\n        };\r\n\r\n        // Store the channel.\r\n        this._channel = channel;\r\n    }\r\n\r\n    /**\r\n     * Sends passed object via the channel.\r\n     * @param {object} jsonObject The object that will be sent.\r\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\r\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\r\n     * or from WebSocket#send or Error with \"No opened channel\" message.\r\n     */\r\n    _send(jsonObject) {\r\n        const channel = this._channel;\r\n\r\n        if (!this.isOpen()) {\r\n            logger.error('Bridge Channel send: no opened channel.');\r\n            throw new Error('No opened channel');\r\n        }\r\n\r\n        channel.send(JSON.stringify(jsonObject));\r\n    }\r\n}\r\n","/* global __filename, Promise */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport JitsiTrackError from '../../JitsiTrackError';\r\nimport {\r\n    TRACK_IS_DISPOSED,\r\n    TRACK_NO_STREAM_FOUND\r\n} from '../../JitsiTrackErrors';\r\nimport {\r\n    LOCAL_TRACK_STOPPED,\r\n    NO_DATA_FROM_SOURCE,\r\n    TRACK_MUTE_CHANGED\r\n} from '../../JitsiTrackEvents';\r\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport {\r\n    NO_BYTES_SENT,\r\n    TRACK_UNMUTED,\r\n    createNoDataFromSourceEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nimport JitsiTrack from './JitsiTrack';\r\nimport RTCUtils from './RTCUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Represents a single media track(either audio or video).\r\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\r\n */\r\nexport default class JitsiLocalTrack extends JitsiTrack {\r\n    /**\r\n     * Constructs new JitsiLocalTrack instance.\r\n     *\r\n     * @constructor\r\n     * @param {Object} trackInfo\r\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\r\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\r\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\r\n     * JitsiRemoteTrack\r\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\r\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\r\n     * @param trackInfo.effects the effects array contains the effect instance to use\r\n     * @param trackInfo.resolution the video resolution if it's a video track\r\n     * @param trackInfo.deviceId the ID of the local device for this track\r\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\r\n     * call\r\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\r\n     * source. NOTE: defined for desktop sharing tracks only.\r\n     */\r\n    constructor({\r\n        deviceId,\r\n        facingMode,\r\n        mediaType,\r\n        resolution,\r\n        rtcId,\r\n        sourceId,\r\n        sourceType,\r\n        stream,\r\n        track,\r\n        videoType,\r\n        effects = []\r\n    }) {\r\n        super(\r\n            /* conference */ null,\r\n            stream,\r\n            track,\r\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\r\n            mediaType,\r\n            videoType);\r\n\r\n        this._setEffectInProgress = false;\r\n        const effect = effects.find(e => e.isEnabled(this));\r\n\r\n        if (effect) {\r\n            this._startStreamEffect(effect);\r\n        }\r\n\r\n        const displaySurface = videoType === VideoType.DESKTOP\r\n            ? track.getSettings().displaySurface\r\n            : null;\r\n\r\n        /**\r\n         * Track metadata.\r\n         */\r\n        this.metadata = {\r\n            timestamp: Date.now(),\r\n            ...displaySurface ? { displaySurface } : {}\r\n        };\r\n\r\n\r\n        /**\r\n         * The ID assigned by the RTC module on instance creation.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.rtcId = rtcId;\r\n        this.sourceId = sourceId;\r\n        this.sourceType = sourceType;\r\n\r\n        // Get the resolution from the track itself because it cannot be\r\n        // certain which resolution webrtc has fallen back to using.\r\n        this.resolution = track.getSettings().height;\r\n        this.maxEnabledResolution = resolution;\r\n\r\n        // Cache the constraints of the track in case of any this track\r\n        // model needs to call getUserMedia again, such as when unmuting.\r\n        this._constraints = track.getConstraints();\r\n\r\n        // Safari returns an empty constraints object, construct the constraints using getSettings.\r\n        if (!Object.keys(this._constraints).length && videoType === VideoType.CAMERA) {\r\n            this._constraints = {\r\n                height: track.getSettings().height,\r\n                width: track.getSettings().width\r\n            };\r\n        }\r\n\r\n        this.deviceId = deviceId;\r\n\r\n        /**\r\n         * The <tt>Promise</tt> which represents the progress of a previously\r\n         * queued/scheduled {@link _setMuted} (from the point of view of\r\n         * {@link _queueSetMuted}).\r\n         *\r\n         * @private\r\n         * @type {Promise}\r\n         */\r\n        this._prevSetMuted = Promise.resolve();\r\n\r\n        /**\r\n         * The facing mode of the camera from which this JitsiLocalTrack\r\n         * instance was obtained.\r\n         *\r\n         * @private\r\n         * @type {CameraFacingMode|undefined}\r\n         */\r\n        this._facingMode = facingMode;\r\n\r\n        // Currently there is no way to know the MediaStreamTrack ended due to\r\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\r\n        // Instead we will compare current track's label with device labels from\r\n        // enumerateDevices() list.\r\n        this._trackEnded = false;\r\n\r\n        /**\r\n         * Indicates whether data has been sent or not.\r\n         */\r\n        this._hasSentData = false;\r\n\r\n        /**\r\n         * Used only for detection of audio problems. We want to check only once\r\n         * whether the track is sending data ot not. This flag is set to false\r\n         * after the check.\r\n         */\r\n        this._testDataSent = true;\r\n\r\n        // Currently there is no way to determine with what device track was\r\n        // created (until getConstraints() support), however we can associate\r\n        // tracks with real devices obtained from enumerateDevices() call as\r\n        // soon as it's called.\r\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\r\n        // correspond to the id of a matching device from the available device list.\r\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\r\n\r\n        // The source name that will be signaled for this track.\r\n        this._sourceName = null;\r\n\r\n        this._trackMutedTS = 0;\r\n\r\n        this._onDeviceListWillChange = devices => {\r\n            const oldRealDeviceId = this._realDeviceId;\r\n\r\n            this._setRealDeviceIdFromDeviceList(devices);\r\n\r\n            if (\r\n                // Mark track as ended for those browsers that do not support\r\n                // \"readyState\" property. We do not touch tracks created with\r\n                // default device ID \"\".\r\n                (typeof this.getTrack().readyState === 'undefined'\r\n                    && typeof this._realDeviceId !== 'undefined'\r\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\r\n\r\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\r\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\r\n                // addition on some Chrome versions the readyState property is set after the device change event is\r\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\r\n                // detect that the old one was removed.\r\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\r\n            ) {\r\n                this._trackEnded = true;\r\n            }\r\n        };\r\n\r\n        // Subscribe each created local audio track to\r\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\r\n        // handling this event for remote tracks (which are handled in RTC.js),\r\n        // because there might be local tracks not attached to a conference.\r\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\r\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\r\n            RTCUtils.addListener(\r\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._onAudioOutputDeviceChanged);\r\n        }\r\n\r\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\r\n\r\n        this._initNoDataFromSourceHandlers();\r\n    }\r\n\r\n    /**\r\n     * Adds stream to conference and marks it as \"unmute\" operation.\r\n     *\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _addStreamToConferenceAsUnmute() {\r\n        if (!this.conference) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        // FIXME it would be good to not included conference as part of this process. Only TraceablePeerConnections to\r\n        // which the track is attached should care about this action. The TPCs to which the track is not attached can\r\n        // sync up when track is re-attached. A problem with that is that the \"modify sources\" queue is part of the\r\n        // JingleSessionPC and it would be excluded from the process. One solution would be to extract class between\r\n        // TPC and JingleSessionPC which would contain the queue and would notify the signaling layer when local SSRCs\r\n        // are changed. This would help to separate XMPP from the RTC module.\r\n        return new Promise((resolve, reject) => {\r\n            this.conference._addLocalTrackAsUnmute(this)\r\n                .then(resolve, error => reject(new Error(error)));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _fireNoDataFromSourceEvent() {\r\n        const value = !this.isReceivingData();\r\n\r\n        this.emit(NO_DATA_FROM_SOURCE, value);\r\n\r\n        // FIXME: Should we report all of those events\r\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\r\n        Statistics.sendLog(JSON.stringify({\r\n            name: NO_DATA_FROM_SOURCE,\r\n            log: value\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * Returns if associated MediaStreamTrack is in the 'ended' state\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isEnded() {\r\n        if (this.isVideoTrack() && this.isMuted()) {\r\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\r\n            // _trackEnded flag.\r\n            return this._trackEnded;\r\n        }\r\n\r\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\r\n    }\r\n\r\n    /**\r\n     * Sets handlers to the MediaStreamTrack object that will detect camera\r\n     * issues.\r\n     */\r\n    _initNoDataFromSourceHandlers() {\r\n        if (!this._isNoDataFromSourceEventsEnabled()) {\r\n            return;\r\n        }\r\n\r\n        this._setHandler('track_mute', () => {\r\n            this._trackMutedTS = window.performance.now();\r\n            this._fireNoDataFromSourceEvent();\r\n        });\r\n\r\n        this._setHandler('track_unmute', () => {\r\n            this._fireNoDataFromSourceEvent();\r\n            Statistics.sendAnalyticsAndLog(\r\n                TRACK_UNMUTED,\r\n                {\r\n                    'media_type': this.getType(),\r\n                    'track_type': 'local',\r\n                    value: window.performance.now() - this._trackMutedTS\r\n                });\r\n        });\r\n\r\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\r\n            this._setHandler('track_ended', () => {\r\n                if (!this.isReceivingData()) {\r\n                    this._fireNoDataFromSourceEvent();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\r\n     *\r\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\r\n     */\r\n    _isNoDataFromSourceEventsEnabled() {\r\n        // Disable the events for screen sharing.\r\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\r\n    }\r\n\r\n    /**\r\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called multiple times in a row and the\r\n     * invocations of {@link #_setMuted} and, consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\r\n     * serialized fashion.\r\n     *\r\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _queueSetMuted(muted) {\r\n        const setMuted = this._setMuted.bind(this, muted);\r\n\r\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\r\n\r\n        return this._prevSetMuted;\r\n    }\r\n\r\n    /**\r\n     * Removes stream from conference and marks it as \"mute\" operation.\r\n     *\r\n     * @param {Function} successCallback - Callback that will be called when the operation is successful.\r\n     * @param {Function} errorCallback - Callback that will be called when the operation fails.\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\r\n        if (!this.conference) {\r\n            successCallback();\r\n\r\n            return;\r\n        }\r\n        this.conference._removeLocalTrackAsMute(this).then(\r\n            successCallback,\r\n            error => errorCallback(new Error(error)));\r\n    }\r\n\r\n    /**\r\n     * Sends mute status for a track to conference if any.\r\n     *\r\n     * @param {boolean} mute - If track is muted.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _sendMuteStatus(mute) {\r\n        if (this.conference) {\r\n            this.conference._setTrackMuteStatus(this.getType(), this, mute) && this.conference.room.sendPresence();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mutes / unmutes this track.\r\n     *\r\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted; otherwise, this track will be unmuted.\r\n     * @private\r\n     * @returns {Promise}\r\n     */\r\n    _setMuted(muted) {\r\n        if (this.isMuted() === muted\r\n            && !(this.videoType === VideoType.DESKTOP && FeatureFlags.isMultiStreamSupportEnabled())) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this.disposed) {\r\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\r\n        }\r\n\r\n        let promise = Promise.resolve();\r\n\r\n        // A function that will print info about muted status transition\r\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\r\n\r\n        // In the multi-stream mode, desktop tracks are muted from jitsi-meet instead of being removed from the\r\n        // conference. This is needed because we don't want the client to signal a source-remove to the remote peer for\r\n        // the desktop track when screenshare is stopped. Later when screenshare is started again, the same sender will\r\n        // be re-used without the need for signaling a new ssrc through source-add.\r\n        if (this.isAudioTrack()\r\n                || (this.videoType === VideoType.DESKTOP && !FeatureFlags.isMultiStreamSupportEnabled())\r\n                || !browser.doesVideoMuteByStreamRemove()) {\r\n            logMuteInfo();\r\n\r\n            // If we have a stream effect that implements its own mute functionality, prioritize it before\r\n            // normal mute e.g. the stream effect that implements system audio sharing has a custom\r\n            // mute state in which if the user mutes, system audio still has to go through.\r\n            if (this._streamEffect && this._streamEffect.setMuted) {\r\n                this._streamEffect.setMuted(muted);\r\n            } else if (this.track) {\r\n                this.track.enabled = !muted;\r\n            }\r\n        } else if (muted) {\r\n            promise = new Promise((resolve, reject) => {\r\n                logMuteInfo();\r\n                this._removeStreamFromConferenceAsMute(\r\n                    () => {\r\n                        if (this._streamEffect) {\r\n                            this._stopStreamEffect();\r\n                        }\r\n\r\n                        // FIXME: Maybe here we should set the SRC for the\r\n                        // containers to something\r\n                        // We don't want any events to be fired on this stream\r\n                        this._unregisterHandlers();\r\n                        this.stopStream();\r\n                        this._setStream(null);\r\n\r\n                        resolve();\r\n                    },\r\n                    reject);\r\n            });\r\n        } else {\r\n            logMuteInfo();\r\n\r\n            // This path is only for camera.\r\n            const streamOptions = {\r\n                cameraDeviceId: this.getDeviceId(),\r\n                devices: [ MediaType.VIDEO ],\r\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\r\n                facingMode: this.getCameraFacingMode()\r\n            };\r\n\r\n            promise\r\n                = RTCUtils.obtainAudioAndVideoPermissions(Object.assign(\r\n                    {},\r\n                    streamOptions,\r\n                    { constraints: { video: this._constraints } }));\r\n\r\n            promise = promise.then(streamsInfo => {\r\n                // The track kind for presenter track is video as well.\r\n                const mediaType = this.getType() === MediaType.PRESENTER ? MediaType.VIDEO : this.getType();\r\n                const streamInfo = streamsInfo.find(info => info.track.kind === mediaType);\r\n\r\n                if (streamInfo) {\r\n                    this._setStream(streamInfo.stream);\r\n                    this.track = streamInfo.track;\r\n\r\n                    // This is not good when video type changes after\r\n                    // unmute, but let's not crash here\r\n                    if (this.videoType !== streamInfo.videoType) {\r\n                        logger.warn(\r\n                            `${this}: video type has changed after unmute!`,\r\n                            this.videoType, streamInfo.videoType);\r\n                        this.videoType = streamInfo.videoType;\r\n                    }\r\n                } else {\r\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\r\n                }\r\n\r\n                if (this._streamEffect) {\r\n                    this._startStreamEffect(this._streamEffect);\r\n                }\r\n\r\n                this.containers.map(cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n\r\n                return this._addStreamToConferenceAsUnmute();\r\n            });\r\n        }\r\n\r\n        return promise\r\n            .then(() => {\r\n                this._sendMuteStatus(muted);\r\n\r\n                // Send the videoType message to the bridge.\r\n                this.isVideoTrack() && this.conference && this.conference._sendBridgeVideoTypeMessage(this);\r\n                this.emit(TRACK_MUTE_CHANGED, this);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sets real device ID by comparing track information with device\r\n     * information. This is temporary solution until getConstraints() method\r\n     * will be implemented in browsers.\r\n     *\r\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\r\n     * enumerateDevices() call\r\n     */\r\n    _setRealDeviceIdFromDeviceList(devices) {\r\n        const track = this.getTrack();\r\n        const kind = `${track.kind}input`;\r\n\r\n        // We need to match by deviceId as well, in case of multiple devices with the same label.\r\n        let device = devices.find(d => d.kind === kind && d.label === track.label && d.deviceId === this.deviceId);\r\n\r\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\r\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\r\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\r\n            // why in order to match it we need to remove the 'Default - ' part.\r\n            const label = (track.label || '').replace('Default - ', '');\r\n\r\n            device = devices.find(d => d.kind === kind && d.label === label);\r\n        }\r\n\r\n        if (device) {\r\n            this._realDeviceId = device.deviceId;\r\n        } else {\r\n            this._realDeviceId = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\r\n     * handlers to it.\r\n     *\r\n     * @param {MediaStream} stream the new stream.\r\n     * @protected\r\n     */\r\n    _setStream(stream) {\r\n        super._setStream(stream);\r\n\r\n        if (stream) {\r\n            // Store the MSID for video mute/unmute purposes.\r\n            this.storedMSID = this.getMSID();\r\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\r\n        } else {\r\n            logger.debug(`Setting 'null' stream on ${this}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the effect process and returns the modified stream.\r\n     *\r\n     * @private\r\n     * @param {*} effect - Represents effect instance\r\n     * @returns {void}\r\n     */\r\n    _startStreamEffect(effect) {\r\n        this._streamEffect = effect;\r\n        this._originalStream = this.stream;\r\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\r\n        this.track = this.stream.getTracks()[0];\r\n    }\r\n\r\n    /**\r\n     * Stops the effect process and returns the original stream.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _stopStreamEffect() {\r\n        if (this._streamEffect) {\r\n            this._streamEffect.stopEffect();\r\n            this._setStream(this._originalStream);\r\n            this._originalStream = null;\r\n            this.track = this.stream ? this.stream.getTracks()[0] : null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switches the camera facing mode if the WebRTC implementation supports the custom MediaStreamTrack._switchCamera\r\n     * method. Currently, the method in question is implemented in react-native-webrtc only. When such a WebRTC\r\n     * implementation is executing, the method is the preferred way to switch between the front/user-facing and the\r\n     * back/environment-facing cameras because it will likely be (as is the case of react-native-webrtc) noticeably\r\n     * faster that creating a new MediaStreamTrack via a new getUserMedia call with the switched facingMode constraint\r\n     * value. Moreover, the approach with a new getUserMedia call may not even work: WebRTC on Android and iOS is\r\n     * either very slow to open the camera a second time or plainly freezes attempting to do that.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _switchCamera() {\r\n        if (this.isVideoTrack()\r\n                && this.videoType === VideoType.CAMERA\r\n                && typeof this.track._switchCamera === 'function') {\r\n            this.track._switchCamera();\r\n\r\n            this._facingMode\r\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\r\n                    ? CameraFacingMode.USER\r\n                    : CameraFacingMode.ENVIRONMENT;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\r\n     *\r\n     * @param {Object|undefined} effect - The new effect to be set.\r\n     */\r\n    _switchStreamEffect(effect) {\r\n        if (this._streamEffect) {\r\n            this._stopStreamEffect();\r\n            this._streamEffect = undefined;\r\n        }\r\n        if (effect) {\r\n            this._startStreamEffect(effect);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc\r\n     *\r\n     * Stops sending the media track. And removes it from the HTML. NOTE: Works for local tracks only.\r\n     *\r\n     * @extends JitsiTrack#dispose\r\n     * @returns {Promise}\r\n     */\r\n    dispose() {\r\n        let promise = Promise.resolve();\r\n\r\n        // Remove the effect instead of stopping it so that the original stream is restored\r\n        // on both the local track and on the peerconnection.\r\n        if (this._streamEffect) {\r\n            promise = this.setEffect();\r\n        }\r\n\r\n        if (this.conference) {\r\n            promise = promise.then(() => this.conference.removeTrack(this));\r\n        }\r\n\r\n        if (this.stream) {\r\n            this.stopStream();\r\n            this.detach();\r\n        }\r\n\r\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\r\n\r\n        if (this._onAudioOutputDeviceChanged) {\r\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\r\n                this._onAudioOutputDeviceChanged);\r\n        }\r\n\r\n        return promise.then(() => super.dispose());\r\n    }\r\n\r\n    /**\r\n     * Returns facing mode for video track from camera. For other cases (e.g. audio track or 'desktop' video track)\r\n     * returns undefined.\r\n     *\r\n     * @returns {CameraFacingMode|undefined}\r\n     */\r\n    getCameraFacingMode() {\r\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\r\n            // MediaStreamTrack#getSettings() is not implemented in many\r\n            // browsers, so we need feature checking here. Progress on the\r\n            // respective browser's implementation can be tracked at\r\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\r\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\r\n            // for Firefox. Even if a browser implements getSettings() already,\r\n            // it might still not return anything for 'facingMode'.\r\n            const trackSettings = this.track.getSettings?.();\r\n\r\n            if (trackSettings && 'facingMode' in trackSettings) {\r\n                return trackSettings.facingMode;\r\n            }\r\n\r\n            if (typeof this._facingMode !== 'undefined') {\r\n                return this._facingMode;\r\n            }\r\n\r\n            // In most cases we are showing a webcam. So if we've gotten here,\r\n            // it should be relatively safe to assume that we are probably\r\n            // showing the user-facing camera.\r\n            return CameraFacingMode.USER;\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Returns device id associated with track.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getDeviceId() {\r\n        return this._realDeviceId || this.deviceId;\r\n    }\r\n\r\n    /**\r\n     * Get the duration of the track.\r\n     *\r\n     * @returns {Number} the duration of the track in seconds\r\n     */\r\n    getDuration() {\r\n        return (Date.now() / 1000) - (this.metadata.timestamp / 1000);\r\n    }\r\n\r\n    /**\r\n     * Returns the participant id which owns the track.\r\n     *\r\n     * @returns {string} the id of the participants. It corresponds to the\r\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\r\n     */\r\n    getParticipantId() {\r\n        return this.conference && this.conference.myUserId();\r\n    }\r\n\r\n    /**\r\n     * Returns the source name associated with the jitsi track.\r\n     *\r\n     * @returns {string | null} source name\r\n     */\r\n    getSourceName() {\r\n        return this._sourceName;\r\n    }\r\n\r\n    /**\r\n     * Returns if associated MediaStreamTrack is in the 'ended' state\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isEnded() {\r\n        if (this.isVideoTrack() && this.isMuted()) {\r\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\r\n            // _trackEnded flag.\r\n            return this._trackEnded;\r\n        }\r\n\r\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true</tt>.\r\n     *\r\n     * @returns {boolean} <tt>true</tt>\r\n     */\r\n    isLocal() {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\r\n     *\r\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and <tt>false</tt> otherwise.\r\n     */\r\n    isMuted() {\r\n        // this.stream will be null when we mute local video on Chrome\r\n        if (!this.stream) {\r\n            return true;\r\n        }\r\n        if (this.isVideoTrack() && !this.isActive()) {\r\n            return true;\r\n        }\r\n\r\n        // If currently used stream effect has its own muted state, use that.\r\n        if (this._streamEffect && this._streamEffect.isMuted) {\r\n            return this._streamEffect.isMuted();\r\n        }\r\n\r\n        return !this.track || !this.track.enabled;\r\n    }\r\n\r\n    /**\r\n     * Checks whether the attached MediaStream is receiving data from source or not. If the stream property is null\r\n     * (because of mute or another reason) this method will return false.\r\n     * NOTE: This method doesn't indicate problem with the streams directly. For example in case of video mute the\r\n     * method will return false or if the user has disposed the track.\r\n     *\r\n     * @returns {boolean} true if the stream is receiving data and false this otherwise.\r\n     */\r\n    isReceivingData() {\r\n        if (this.isVideoTrack()\r\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\r\n            return true;\r\n        }\r\n\r\n        if (!this.stream) {\r\n            return false;\r\n        }\r\n\r\n        // In older version of the spec there is no muted property and readyState can have value muted. In the latest\r\n        // versions readyState can have values \"live\" and \"ended\" and there is muted boolean property. If the stream is\r\n        // muted that means that we aren't receiving any data from the source. We want to notify the users for error if\r\n        // the stream is muted or ended on it's creation.\r\n\r\n        // For video blur enabled use the original video stream\r\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\r\n\r\n        return stream.getTracks().some(track =>\r\n            (!('readyState' in track) || track.readyState === 'live')\r\n                && (!('muted' in track) || track.muted !== true));\r\n    }\r\n\r\n    /**\r\n     * Asynchronously mutes this track.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    mute() {\r\n        return this._queueSetMuted(true);\r\n    }\r\n\r\n    /**\r\n     * Asynchronously unmutes this track.\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n     unmute() {\r\n        return this._queueSetMuted(false);\r\n    }\r\n\r\n    /**\r\n     * Handles bytes sent statistics. NOTE: used only for audio tracks to detect audio issues.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc - The peerconnection that is reporting the bytes sent stat.\r\n     * @param {number} bytesSent - The new value.\r\n     * @returns {void}\r\n     */\r\n    onByteSentStatsReceived(tpc, bytesSent) {\r\n        if (bytesSent > 0) {\r\n            this._hasSentData = true;\r\n        }\r\n        const iceConnectionState = tpc.getConnectionState();\r\n\r\n        if (this._testDataSent && iceConnectionState === 'connected') {\r\n            setTimeout(() => {\r\n                if (!this._hasSentData) {\r\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\r\n                        ${bytesSent}`);\r\n\r\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\r\n                }\r\n            }, 3000);\r\n            this._testDataSent = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the JitsiConference object associated with the track. This is temp solution.\r\n     *\r\n     * @param conference - JitsiConference object.\r\n     * @returns {void}\r\n     */\r\n    setConference(conference) {\r\n        this.conference = conference;\r\n\r\n        // We want to keep up with postponed events which should have been fired\r\n        // on \"attach\" call, but for local track we not always have the\r\n        // conference before attaching. However this may result in duplicated\r\n        // events if they have been triggered on \"attach\" already.\r\n        for (let i = 0; i < this.containers.length; i++) {\r\n            this._maybeFireTrackAttached(this.containers[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the effect and switches between the modified stream and original one.\r\n     *\r\n     * @param {Object} effect - Represents the effect instance to be used.\r\n     * @returns {Promise}\r\n     */\r\n    setEffect(effect) {\r\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\r\n            return Promise.reject(new Error('Incompatible effect instance!'));\r\n        }\r\n\r\n        if (this._setEffectInProgress === true) {\r\n            return Promise.reject(new Error('setEffect already in progress!'));\r\n        }\r\n\r\n        // In case we have an audio track that is being enhanced with an effect, we still want it to be applied,\r\n        // even if the track is muted. Where as for video the actual track doesn't exists if it's muted.\r\n        if (this.isMuted() && !this.isAudioTrack()) {\r\n            this._streamEffect = effect;\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const conference = this.conference;\r\n\r\n        if (!conference) {\r\n            this._switchStreamEffect(effect);\r\n            if (this.isVideoTrack()) {\r\n                this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n            }\r\n\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._setEffectInProgress = true;\r\n\r\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\r\n        return conference.removeTrack(this)\r\n            .then(() => {\r\n                this._switchStreamEffect(effect);\r\n                if (this.isVideoTrack()) {\r\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\r\n                }\r\n\r\n                return conference.addTrack(this);\r\n            })\r\n            .then(() => {\r\n                this._setEffectInProgress = false;\r\n            })\r\n            .catch(error => {\r\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\r\n                // everyhting related to the effect functionality.\r\n                this._setEffectInProgress = false;\r\n                this._switchStreamEffect();\r\n                logger.error('Failed to switch to the new stream!', error);\r\n                throw error;\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Sets the source name to be used for signaling the jitsi track.\r\n     *\r\n     * @param {string} name The source name.\r\n     */\r\n    setSourceName(name) {\r\n        this._sourceName = name;\r\n    }\r\n\r\n    /**\r\n     * Stops the associated MediaStream.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stopStream() {\r\n        /**\r\n         * Indicates that we are executing {@link #stopStream} i.e.\r\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\r\n         * associated with this <tt>JitsiTrack</tt> instance.\r\n         *\r\n         * @private\r\n         * @type {boolean}\r\n         */\r\n        this._stopStreamInProgress = true;\r\n\r\n        try {\r\n            RTCUtils.stopMediaStream(this.stream);\r\n        } finally {\r\n            this._stopStreamInProgress = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Switches the camera facing mode if the WebRTC implementation supports the\r\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\r\n     * question is implemented in react-native-webrtc only. When such a WebRTC\r\n     * implementation is executing, the method is the preferred way to switch\r\n     * between the front/user-facing and the back/environment-facing cameras\r\n     * because it will likely be (as is the case of react-native-webrtc)\r\n     * noticeably faster that creating a new MediaStreamTrack via a new\r\n     * getUserMedia call with the switched facingMode constraint value.\r\n     * Moreover, the approach with a new getUserMedia call may not even work:\r\n     * WebRTC on Android and iOS is either very slow to open the camera a second\r\n     * time or plainly freezes attempting to do that.\r\n     */\r\n    _switchCamera() {\r\n        if (this.isVideoTrack()\r\n                && this.videoType === VideoType.CAMERA\r\n                && typeof this.track._switchCamera === 'function') {\r\n            this.track._switchCamera();\r\n\r\n            this._facingMode\r\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\r\n                    ? CameraFacingMode.USER\r\n                    : CameraFacingMode.ENVIRONMENT;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates a text representation of this local track instance.\r\n     *\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\r\n    }\r\n}\r\n","/*\r\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n /* eslint-env node */\r\n'use strict';\r\n\r\nvar SDPUtils = require('sdp');\r\n\r\nfunction fixStatsType(stat) {\r\n  return {\r\n    inboundrtp: 'inbound-rtp',\r\n    outboundrtp: 'outbound-rtp',\r\n    candidatepair: 'candidate-pair',\r\n    localcandidate: 'local-candidate',\r\n    remotecandidate: 'remote-candidate'\r\n  }[stat.type] || stat.type;\r\n}\r\n\r\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\r\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\r\n\r\n  // Map ICE parameters (ufrag, pwd) to SDP.\r\n  sdp += SDPUtils.writeIceParameters(\r\n      transceiver.iceGatherer.getLocalParameters());\r\n\r\n  // Map DTLS parameters to SDP.\r\n  sdp += SDPUtils.writeDtlsParameters(\r\n      transceiver.dtlsTransport.getLocalParameters(),\r\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\r\n\r\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\r\n\r\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\r\n    sdp += 'a=sendrecv\\r\\n';\r\n  } else if (transceiver.rtpSender) {\r\n    sdp += 'a=sendonly\\r\\n';\r\n  } else if (transceiver.rtpReceiver) {\r\n    sdp += 'a=recvonly\\r\\n';\r\n  } else {\r\n    sdp += 'a=inactive\\r\\n';\r\n  }\r\n\r\n  if (transceiver.rtpSender) {\r\n    var trackId = transceiver.rtpSender._initialTrackId ||\r\n        transceiver.rtpSender.track.id;\r\n    transceiver.rtpSender._initialTrackId = trackId;\r\n    // spec.\r\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\r\n        trackId + '\\r\\n';\r\n    sdp += 'a=' + msid;\r\n    // for Chrome. Legacy should no longer be required.\r\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\r\n        ' ' + msid;\r\n\r\n    // RTX\r\n    if (transceiver.sendEncodingParameters[0].rtx) {\r\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n          ' ' + msid;\r\n      sdp += 'a=ssrc-group:FID ' +\r\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\r\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n          '\\r\\n';\r\n    }\r\n  }\r\n  // FIXME: this should be written by writeRtpDescription.\r\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\r\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\r\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\r\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\r\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\r\n  }\r\n  return sdp;\r\n}\r\n\r\n// Edge does not like\r\n// 1) stun: filtered after 14393 unless ?transport=udp is present\r\n// 2) turn: that does not have all of turn:host:port?transport=udp\r\n// 3) turn: with ipv6 addresses\r\n// 4) turn: occurring muliple times\r\nfunction filterIceServers(iceServers, edgeVersion) {\r\n  var hasTurn = false;\r\n  iceServers = JSON.parse(JSON.stringify(iceServers));\r\n  return iceServers.filter(function(server) {\r\n    if (server && (server.urls || server.url)) {\r\n      var urls = server.urls || server.url;\r\n      if (server.url && !server.urls) {\r\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\r\n      }\r\n      var isString = typeof urls === 'string';\r\n      if (isString) {\r\n        urls = [urls];\r\n      }\r\n      urls = urls.filter(function(url) {\r\n        var validTurn = url.indexOf('turn:') === 0 &&\r\n            url.indexOf('transport=udp') !== -1 &&\r\n            url.indexOf('turn:[') === -1 &&\r\n            !hasTurn;\r\n\r\n        if (validTurn) {\r\n          hasTurn = true;\r\n          return true;\r\n        }\r\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\r\n            url.indexOf('?transport=udp') === -1;\r\n      });\r\n\r\n      delete server.url;\r\n      server.urls = isString ? urls[0] : urls;\r\n      return !!urls.length;\r\n    }\r\n  });\r\n}\r\n\r\n// Determines the intersection of local and remote capabilities.\r\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\r\n  var commonCapabilities = {\r\n    codecs: [],\r\n    headerExtensions: [],\r\n    fecMechanisms: []\r\n  };\r\n\r\n  var findCodecByPayloadType = function(pt, codecs) {\r\n    pt = parseInt(pt, 10);\r\n    for (var i = 0; i < codecs.length; i++) {\r\n      if (codecs[i].payloadType === pt ||\r\n          codecs[i].preferredPayloadType === pt) {\r\n        return codecs[i];\r\n      }\r\n    }\r\n  };\r\n\r\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\r\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\r\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\r\n    return lCodec && rCodec &&\r\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\r\n  };\r\n\r\n  localCapabilities.codecs.forEach(function(lCodec) {\r\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\r\n      var rCodec = remoteCapabilities.codecs[i];\r\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\r\n          lCodec.clockRate === rCodec.clockRate) {\r\n        if (lCodec.name.toLowerCase() === 'rtx' &&\r\n            lCodec.parameters && rCodec.parameters.apt) {\r\n          // for RTX we need to find the local rtx that has a apt\r\n          // which points to the same local codec as the remote one.\r\n          if (!rtxCapabilityMatches(lCodec, rCodec,\r\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\r\n            continue;\r\n          }\r\n        }\r\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\r\n        // number of channels is the highest common number of channels\r\n        rCodec.numChannels = Math.min(lCodec.numChannels,\r\n            rCodec.numChannels);\r\n        // push rCodec so we reply with offerer payload type\r\n        commonCapabilities.codecs.push(rCodec);\r\n\r\n        // determine common feedback mechanisms\r\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\r\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\r\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\r\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\r\n              return true;\r\n            }\r\n          }\r\n          return false;\r\n        });\r\n        // FIXME: also need to determine .parameters\r\n        //  see https://github.com/openpeer/ortc/issues/569\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\r\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\r\n         i++) {\r\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\r\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\r\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\r\n        break;\r\n      }\r\n    }\r\n  });\r\n\r\n  // FIXME: fecMechanisms\r\n  return commonCapabilities;\r\n}\r\n\r\n// is action=setLocalDescription with type allowed in signalingState\r\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\r\n  return {\r\n    offer: {\r\n      setLocalDescription: ['stable', 'have-local-offer'],\r\n      setRemoteDescription: ['stable', 'have-remote-offer']\r\n    },\r\n    answer: {\r\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\r\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\r\n    }\r\n  }[type][action].indexOf(signalingState) !== -1;\r\n}\r\n\r\nfunction maybeAddCandidate(iceTransport, candidate) {\r\n  // Edge's internal representation adds some fields therefore\r\n  // not all fieldѕ are taken into account.\r\n  var alreadyAdded = iceTransport.getRemoteCandidates()\r\n      .find(function(remoteCandidate) {\r\n        return candidate.foundation === remoteCandidate.foundation &&\r\n            candidate.ip === remoteCandidate.ip &&\r\n            candidate.port === remoteCandidate.port &&\r\n            candidate.priority === remoteCandidate.priority &&\r\n            candidate.protocol === remoteCandidate.protocol &&\r\n            candidate.type === remoteCandidate.type;\r\n      });\r\n  if (!alreadyAdded) {\r\n    iceTransport.addRemoteCandidate(candidate);\r\n  }\r\n  return !alreadyAdded;\r\n}\r\n\r\n\r\nfunction makeError(name, description) {\r\n  var e = new Error(description);\r\n  e.name = name;\r\n  // legacy error codes from https://heycam.github.io/webidl/#idl-DOMException-error-names\r\n  e.code = {\r\n    NotSupportedError: 9,\r\n    InvalidStateError: 11,\r\n    InvalidAccessError: 15,\r\n    TypeError: undefined,\r\n    OperationError: undefined\r\n  }[name];\r\n  return e;\r\n}\r\n\r\nmodule.exports = function(window, edgeVersion) {\r\n  // https://w3c.github.io/mediacapture-main/#mediastream\r\n  // Helper function to add the track to the stream and\r\n  // dispatch the event ourselves.\r\n  function addTrackToStreamAndFireEvent(track, stream) {\r\n    stream.addTrack(track);\r\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\r\n        {track: track}));\r\n  }\r\n\r\n  function removeTrackFromStreamAndFireEvent(track, stream) {\r\n    stream.removeTrack(track);\r\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\r\n        {track: track}));\r\n  }\r\n\r\n  function fireAddTrack(pc, track, receiver, streams) {\r\n    var trackEvent = new Event('track');\r\n    trackEvent.track = track;\r\n    trackEvent.receiver = receiver;\r\n    trackEvent.transceiver = {receiver: receiver};\r\n    trackEvent.streams = streams;\r\n    window.setTimeout(function() {\r\n      pc._dispatchEvent('track', trackEvent);\r\n    });\r\n  }\r\n\r\n  var RTCPeerConnection = function(config) {\r\n    var pc = this;\r\n\r\n    var _eventTarget = document.createDocumentFragment();\r\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\r\n        .forEach(function(method) {\r\n          pc[method] = _eventTarget[method].bind(_eventTarget);\r\n        });\r\n\r\n    this.canTrickleIceCandidates = null;\r\n\r\n    this.needNegotiation = false;\r\n\r\n    this.localStreams = [];\r\n    this.remoteStreams = [];\r\n\r\n    this._localDescription = null;\r\n    this._remoteDescription = null;\r\n\r\n    this.signalingState = 'stable';\r\n    this.iceConnectionState = 'new';\r\n    this.connectionState = 'new';\r\n    this.iceGatheringState = 'new';\r\n\r\n    config = JSON.parse(JSON.stringify(config || {}));\r\n\r\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\r\n    if (config.rtcpMuxPolicy === 'negotiate') {\r\n      throw(makeError('NotSupportedError',\r\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\r\n    } else if (!config.rtcpMuxPolicy) {\r\n      config.rtcpMuxPolicy = 'require';\r\n    }\r\n\r\n    switch (config.iceTransportPolicy) {\r\n      case 'all':\r\n      case 'relay':\r\n        break;\r\n      default:\r\n        config.iceTransportPolicy = 'all';\r\n        break;\r\n    }\r\n\r\n    switch (config.bundlePolicy) {\r\n      case 'balanced':\r\n      case 'max-compat':\r\n      case 'max-bundle':\r\n        break;\r\n      default:\r\n        config.bundlePolicy = 'balanced';\r\n        break;\r\n    }\r\n\r\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\r\n\r\n    this._iceGatherers = [];\r\n    if (config.iceCandidatePoolSize) {\r\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\r\n        this._iceGatherers.push(new window.RTCIceGatherer({\r\n          iceServers: config.iceServers,\r\n          gatherPolicy: config.iceTransportPolicy\r\n        }));\r\n      }\r\n    } else {\r\n      config.iceCandidatePoolSize = 0;\r\n    }\r\n\r\n    this._config = config;\r\n\r\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\r\n    // everything that is needed to describe a SDP m-line.\r\n    this.transceivers = [];\r\n\r\n    this._sdpSessionId = SDPUtils.generateSessionId();\r\n    this._sdpSessionVersion = 0;\r\n\r\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\r\n\r\n    this._isClosed = false;\r\n  };\r\n\r\n  Object.defineProperty(RTCPeerConnection.prototype, 'localDescription', {\r\n    configurable: true,\r\n    get: function() {\r\n      return this._localDescription;\r\n    }\r\n  });\r\n  Object.defineProperty(RTCPeerConnection.prototype, 'remoteDescription', {\r\n    configurable: true,\r\n    get: function() {\r\n      return this._remoteDescription;\r\n    }\r\n  });\r\n\r\n  // set up event handlers on prototype\r\n  RTCPeerConnection.prototype.onicecandidate = null;\r\n  RTCPeerConnection.prototype.onaddstream = null;\r\n  RTCPeerConnection.prototype.ontrack = null;\r\n  RTCPeerConnection.prototype.onremovestream = null;\r\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\r\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\r\n  RTCPeerConnection.prototype.onconnectionstatechange = null;\r\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\r\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\r\n  RTCPeerConnection.prototype.ondatachannel = null;\r\n\r\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\r\n    if (this._isClosed) {\r\n      return;\r\n    }\r\n    this.dispatchEvent(event);\r\n    if (typeof this['on' + name] === 'function') {\r\n      this['on' + name](event);\r\n    }\r\n  };\r\n\r\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\r\n    var event = new Event('icegatheringstatechange');\r\n    this._dispatchEvent('icegatheringstatechange', event);\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getConfiguration = function() {\r\n    return this._config;\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getLocalStreams = function() {\r\n    return this.localStreams;\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\r\n    return this.remoteStreams;\r\n  };\r\n\r\n  // internal helper to create a transceiver object.\r\n  // (which is not yet the same as the WebRTC 1.0 transceiver)\r\n  RTCPeerConnection.prototype._createTransceiver = function(kind, doNotAdd) {\r\n    var hasBundleTransport = this.transceivers.length > 0;\r\n    var transceiver = {\r\n      track: null,\r\n      iceGatherer: null,\r\n      iceTransport: null,\r\n      dtlsTransport: null,\r\n      localCapabilities: null,\r\n      remoteCapabilities: null,\r\n      rtpSender: null,\r\n      rtpReceiver: null,\r\n      kind: kind,\r\n      mid: null,\r\n      sendEncodingParameters: null,\r\n      recvEncodingParameters: null,\r\n      stream: null,\r\n      associatedRemoteMediaStreams: [],\r\n      wantReceive: true\r\n    };\r\n    if (this.usingBundle && hasBundleTransport) {\r\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\r\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\r\n    } else {\r\n      var transports = this._createIceAndDtlsTransports();\r\n      transceiver.iceTransport = transports.iceTransport;\r\n      transceiver.dtlsTransport = transports.dtlsTransport;\r\n    }\r\n    if (!doNotAdd) {\r\n      this.transceivers.push(transceiver);\r\n    }\r\n    return transceiver;\r\n  };\r\n\r\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\r\n    if (this._isClosed) {\r\n      throw makeError('InvalidStateError',\r\n          'Attempted to call addTrack on a closed peerconnection.');\r\n    }\r\n\r\n    var alreadyExists = this.transceivers.find(function(s) {\r\n      return s.track === track;\r\n    });\r\n\r\n    if (alreadyExists) {\r\n      throw makeError('InvalidAccessError', 'Track already exists.');\r\n    }\r\n\r\n    var transceiver;\r\n    for (var i = 0; i < this.transceivers.length; i++) {\r\n      if (!this.transceivers[i].track &&\r\n          this.transceivers[i].kind === track.kind) {\r\n        transceiver = this.transceivers[i];\r\n      }\r\n    }\r\n    if (!transceiver) {\r\n      transceiver = this._createTransceiver(track.kind);\r\n    }\r\n\r\n    this._maybeFireNegotiationNeeded();\r\n\r\n    if (this.localStreams.indexOf(stream) === -1) {\r\n      this.localStreams.push(stream);\r\n    }\r\n\r\n    transceiver.track = track;\r\n    transceiver.stream = stream;\r\n    transceiver.rtpSender = new window.RTCRtpSender(track,\r\n        transceiver.dtlsTransport);\r\n    return transceiver.rtpSender;\r\n  };\r\n\r\n  RTCPeerConnection.prototype.addStream = function(stream) {\r\n    var pc = this;\r\n    if (edgeVersion >= 15025) {\r\n      stream.getTracks().forEach(function(track) {\r\n        pc.addTrack(track, stream);\r\n      });\r\n    } else {\r\n      // Clone is necessary for local demos mostly, attaching directly\r\n      // to two different senders does not work (build 10547).\r\n      // Fixed in 15025 (or earlier)\r\n      var clonedStream = stream.clone();\r\n      stream.getTracks().forEach(function(track, idx) {\r\n        var clonedTrack = clonedStream.getTracks()[idx];\r\n        track.addEventListener('enabled', function(event) {\r\n          clonedTrack.enabled = event.enabled;\r\n        });\r\n      });\r\n      clonedStream.getTracks().forEach(function(track) {\r\n        pc.addTrack(track, clonedStream);\r\n      });\r\n    }\r\n  };\r\n\r\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\r\n    if (this._isClosed) {\r\n      throw makeError('InvalidStateError',\r\n          'Attempted to call removeTrack on a closed peerconnection.');\r\n    }\r\n\r\n    if (!(sender instanceof window.RTCRtpSender)) {\r\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\r\n          'does not implement interface RTCRtpSender.');\r\n    }\r\n\r\n    var transceiver = this.transceivers.find(function(t) {\r\n      return t.rtpSender === sender;\r\n    });\r\n\r\n    if (!transceiver) {\r\n      throw makeError('InvalidAccessError',\r\n          'Sender was not created by this connection.');\r\n    }\r\n    var stream = transceiver.stream;\r\n\r\n    transceiver.rtpSender.stop();\r\n    transceiver.rtpSender = null;\r\n    transceiver.track = null;\r\n    transceiver.stream = null;\r\n\r\n    // remove the stream from the set of local streams\r\n    var localStreams = this.transceivers.map(function(t) {\r\n      return t.stream;\r\n    });\r\n    if (localStreams.indexOf(stream) === -1 &&\r\n        this.localStreams.indexOf(stream) > -1) {\r\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\r\n    }\r\n\r\n    this._maybeFireNegotiationNeeded();\r\n  };\r\n\r\n  RTCPeerConnection.prototype.removeStream = function(stream) {\r\n    var pc = this;\r\n    stream.getTracks().forEach(function(track) {\r\n      var sender = pc.getSenders().find(function(s) {\r\n        return s.track === track;\r\n      });\r\n      if (sender) {\r\n        pc.removeTrack(sender);\r\n      }\r\n    });\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getSenders = function() {\r\n    return this.transceivers.filter(function(transceiver) {\r\n      return !!transceiver.rtpSender;\r\n    })\r\n    .map(function(transceiver) {\r\n      return transceiver.rtpSender;\r\n    });\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getReceivers = function() {\r\n    return this.transceivers.filter(function(transceiver) {\r\n      return !!transceiver.rtpReceiver;\r\n    })\r\n    .map(function(transceiver) {\r\n      return transceiver.rtpReceiver;\r\n    });\r\n  };\r\n\r\n\r\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\r\n      usingBundle) {\r\n    var pc = this;\r\n    if (usingBundle && sdpMLineIndex > 0) {\r\n      return this.transceivers[0].iceGatherer;\r\n    } else if (this._iceGatherers.length) {\r\n      return this._iceGatherers.shift();\r\n    }\r\n    var iceGatherer = new window.RTCIceGatherer({\r\n      iceServers: this._config.iceServers,\r\n      gatherPolicy: this._config.iceTransportPolicy\r\n    });\r\n    Object.defineProperty(iceGatherer, 'state',\r\n        {value: 'new', writable: true}\r\n    );\r\n\r\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\r\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\r\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\r\n      // polyfill since RTCIceGatherer.state is not implemented in\r\n      // Edge 10547 yet.\r\n      iceGatherer.state = end ? 'completed' : 'gathering';\r\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\r\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\r\n      }\r\n    };\r\n    iceGatherer.addEventListener('localcandidate',\r\n      this.transceivers[sdpMLineIndex].bufferCandidates);\r\n    return iceGatherer;\r\n  };\r\n\r\n  // start gathering from an RTCIceGatherer.\r\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\r\n    var pc = this;\r\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\r\n    if (iceGatherer.onlocalcandidate) {\r\n      return;\r\n    }\r\n    var bufferedCandidateEvents =\r\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\r\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\r\n    iceGatherer.removeEventListener('localcandidate',\r\n      this.transceivers[sdpMLineIndex].bufferCandidates);\r\n    iceGatherer.onlocalcandidate = function(evt) {\r\n      if (pc.usingBundle && sdpMLineIndex > 0) {\r\n        // if we know that we use bundle we can drop candidates with\r\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\r\n        // confused since we dispose the extra ice gatherer.\r\n        return;\r\n      }\r\n      var event = new Event('icecandidate');\r\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\r\n\r\n      var cand = evt.candidate;\r\n      // Edge emits an empty object for RTCIceCandidateComplete‥\r\n      var end = !cand || Object.keys(cand).length === 0;\r\n      if (end) {\r\n        // polyfill since RTCIceGatherer.state is not implemented in\r\n        // Edge 10547 yet.\r\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\r\n          iceGatherer.state = 'completed';\r\n        }\r\n      } else {\r\n        if (iceGatherer.state === 'new') {\r\n          iceGatherer.state = 'gathering';\r\n        }\r\n        // RTCIceCandidate doesn't have a component, needs to be added\r\n        cand.component = 1;\r\n        // also the usernameFragment. TODO: update SDP to take both variants.\r\n        cand.ufrag = iceGatherer.getLocalParameters().usernameFragment;\r\n\r\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\r\n        event.candidate = Object.assign(event.candidate,\r\n            SDPUtils.parseCandidate(serializedCandidate));\r\n\r\n        event.candidate.candidate = serializedCandidate;\r\n        event.candidate.toJSON = function() {\r\n          return {\r\n            candidate: event.candidate.candidate,\r\n            sdpMid: event.candidate.sdpMid,\r\n            sdpMLineIndex: event.candidate.sdpMLineIndex,\r\n            usernameFragment: event.candidate.usernameFragment\r\n          };\r\n        };\r\n      }\r\n\r\n      // update local description.\r\n      var sections = SDPUtils.getMediaSections(pc._localDescription.sdp);\r\n      if (!end) {\r\n        sections[event.candidate.sdpMLineIndex] +=\r\n            'a=' + event.candidate.candidate + '\\r\\n';\r\n      } else {\r\n        sections[event.candidate.sdpMLineIndex] +=\r\n            'a=end-of-candidates\\r\\n';\r\n      }\r\n      pc._localDescription.sdp =\r\n          SDPUtils.getDescription(pc._localDescription.sdp) +\r\n          sections.join('');\r\n      var complete = pc.transceivers.every(function(transceiver) {\r\n        return transceiver.iceGatherer &&\r\n            transceiver.iceGatherer.state === 'completed';\r\n      });\r\n\r\n      if (pc.iceGatheringState !== 'gathering') {\r\n        pc.iceGatheringState = 'gathering';\r\n        pc._emitGatheringStateChange();\r\n      }\r\n\r\n      // Emit candidate. Also emit null candidate when all gatherers are\r\n      // complete.\r\n      if (!end) {\r\n        pc._dispatchEvent('icecandidate', event);\r\n      }\r\n      if (complete) {\r\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\r\n        pc.iceGatheringState = 'complete';\r\n        pc._emitGatheringStateChange();\r\n      }\r\n    };\r\n\r\n    // emit already gathered candidates.\r\n    window.setTimeout(function() {\r\n      bufferedCandidateEvents.forEach(function(e) {\r\n        iceGatherer.onlocalcandidate(e);\r\n      });\r\n    }, 0);\r\n  };\r\n\r\n  // Create ICE transport and DTLS transport.\r\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\r\n    var pc = this;\r\n    var iceTransport = new window.RTCIceTransport(null);\r\n    iceTransport.onicestatechange = function() {\r\n      pc._updateIceConnectionState();\r\n      pc._updateConnectionState();\r\n    };\r\n\r\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\r\n    dtlsTransport.ondtlsstatechange = function() {\r\n      pc._updateConnectionState();\r\n    };\r\n    dtlsTransport.onerror = function() {\r\n      // onerror does not set state to failed by itself.\r\n      Object.defineProperty(dtlsTransport, 'state',\r\n          {value: 'failed', writable: true});\r\n      pc._updateConnectionState();\r\n    };\r\n\r\n    return {\r\n      iceTransport: iceTransport,\r\n      dtlsTransport: dtlsTransport\r\n    };\r\n  };\r\n\r\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\r\n  // Without triggering the callbacks.\r\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\r\n      sdpMLineIndex) {\r\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\r\n    if (iceGatherer) {\r\n      delete iceGatherer.onlocalcandidate;\r\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\r\n    }\r\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\r\n    if (iceTransport) {\r\n      delete iceTransport.onicestatechange;\r\n      delete this.transceivers[sdpMLineIndex].iceTransport;\r\n    }\r\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\r\n    if (dtlsTransport) {\r\n      delete dtlsTransport.ondtlsstatechange;\r\n      delete dtlsTransport.onerror;\r\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\r\n    }\r\n  };\r\n\r\n  // Start the RTP Sender and Receiver for a transceiver.\r\n  RTCPeerConnection.prototype._transceive = function(transceiver,\r\n      send, recv) {\r\n    var params = getCommonCapabilities(transceiver.localCapabilities,\r\n        transceiver.remoteCapabilities);\r\n    if (send && transceiver.rtpSender) {\r\n      params.encodings = transceiver.sendEncodingParameters;\r\n      params.rtcp = {\r\n        cname: SDPUtils.localCName,\r\n        compound: transceiver.rtcpParameters.compound\r\n      };\r\n      if (transceiver.recvEncodingParameters.length) {\r\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\r\n      }\r\n      transceiver.rtpSender.send(params);\r\n    }\r\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\r\n      // remove RTX field in Edge 14942\r\n      if (transceiver.kind === 'video'\r\n          && transceiver.recvEncodingParameters\r\n          && edgeVersion < 15019) {\r\n        transceiver.recvEncodingParameters.forEach(function(p) {\r\n          delete p.rtx;\r\n        });\r\n      }\r\n      if (transceiver.recvEncodingParameters.length) {\r\n        params.encodings = transceiver.recvEncodingParameters;\r\n      } else {\r\n        params.encodings = [{}];\r\n      }\r\n      params.rtcp = {\r\n        compound: transceiver.rtcpParameters.compound\r\n      };\r\n      if (transceiver.rtcpParameters.cname) {\r\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\r\n      }\r\n      if (transceiver.sendEncodingParameters.length) {\r\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\r\n      }\r\n      transceiver.rtpReceiver.receive(params);\r\n    }\r\n  };\r\n\r\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\r\n    var pc = this;\r\n\r\n    // Note: pranswer is not supported.\r\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\r\n      return Promise.reject(makeError('TypeError',\r\n          'Unsupported type \"' + description.type + '\"'));\r\n    }\r\n\r\n    if (!isActionAllowedInSignalingState('setLocalDescription',\r\n        description.type, pc.signalingState) || pc._isClosed) {\r\n      return Promise.reject(makeError('InvalidStateError',\r\n          'Can not set local ' + description.type +\r\n          ' in state ' + pc.signalingState));\r\n    }\r\n\r\n    var sections;\r\n    var sessionpart;\r\n    if (description.type === 'offer') {\r\n      // VERY limited support for SDP munging. Limited to:\r\n      // * changing the order of codecs\r\n      sections = SDPUtils.splitSections(description.sdp);\r\n      sessionpart = sections.shift();\r\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\r\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\r\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\r\n      });\r\n\r\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\r\n        pc._gather(transceiver.mid, sdpMLineIndex);\r\n      });\r\n    } else if (description.type === 'answer') {\r\n      sections = SDPUtils.splitSections(pc._remoteDescription.sdp);\r\n      sessionpart = sections.shift();\r\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\r\n          'a=ice-lite').length > 0;\r\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\r\n        var transceiver = pc.transceivers[sdpMLineIndex];\r\n        var iceGatherer = transceiver.iceGatherer;\r\n        var iceTransport = transceiver.iceTransport;\r\n        var dtlsTransport = transceiver.dtlsTransport;\r\n        var localCapabilities = transceiver.localCapabilities;\r\n        var remoteCapabilities = transceiver.remoteCapabilities;\r\n\r\n        // treat bundle-only as not-rejected.\r\n        var rejected = SDPUtils.isRejected(mediaSection) &&\r\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\r\n\r\n        if (!rejected && !transceiver.rejected) {\r\n          var remoteIceParameters = SDPUtils.getIceParameters(\r\n              mediaSection, sessionpart);\r\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\r\n              mediaSection, sessionpart);\r\n          if (isIceLite) {\r\n            remoteDtlsParameters.role = 'server';\r\n          }\r\n\r\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\r\n            pc._gather(transceiver.mid, sdpMLineIndex);\r\n            if (iceTransport.state === 'new') {\r\n              iceTransport.start(iceGatherer, remoteIceParameters,\r\n                  isIceLite ? 'controlling' : 'controlled');\r\n            }\r\n            if (dtlsTransport.state === 'new') {\r\n              dtlsTransport.start(remoteDtlsParameters);\r\n            }\r\n          }\r\n\r\n          // Calculate intersection of capabilities.\r\n          var params = getCommonCapabilities(localCapabilities,\r\n              remoteCapabilities);\r\n\r\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\r\n          // transceiver has already been started in setRemoteDescription.\r\n          pc._transceive(transceiver,\r\n              params.codecs.length > 0,\r\n              false);\r\n        }\r\n      });\r\n    }\r\n\r\n    pc._localDescription = {\r\n      type: description.type,\r\n      sdp: description.sdp\r\n    };\r\n    if (description.type === 'offer') {\r\n      pc._updateSignalingState('have-local-offer');\r\n    } else {\r\n      pc._updateSignalingState('stable');\r\n    }\r\n\r\n    return Promise.resolve();\r\n  };\r\n\r\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\r\n    var pc = this;\r\n\r\n    // Note: pranswer is not supported.\r\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\r\n      return Promise.reject(makeError('TypeError',\r\n          'Unsupported type \"' + description.type + '\"'));\r\n    }\r\n\r\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\r\n        description.type, pc.signalingState) || pc._isClosed) {\r\n      return Promise.reject(makeError('InvalidStateError',\r\n          'Can not set remote ' + description.type +\r\n          ' in state ' + pc.signalingState));\r\n    }\r\n\r\n    var streams = {};\r\n    pc.remoteStreams.forEach(function(stream) {\r\n      streams[stream.id] = stream;\r\n    });\r\n    var receiverList = [];\r\n    var sections = SDPUtils.splitSections(description.sdp);\r\n    var sessionpart = sections.shift();\r\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\r\n        'a=ice-lite').length > 0;\r\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\r\n        'a=group:BUNDLE ').length > 0;\r\n    pc.usingBundle = usingBundle;\r\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\r\n        'a=ice-options:')[0];\r\n    if (iceOptions) {\r\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\r\n          .indexOf('trickle') >= 0;\r\n    } else {\r\n      pc.canTrickleIceCandidates = false;\r\n    }\r\n\r\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\r\n      var lines = SDPUtils.splitLines(mediaSection);\r\n      var kind = SDPUtils.getKind(mediaSection);\r\n      // treat bundle-only as not-rejected.\r\n      var rejected = SDPUtils.isRejected(mediaSection) &&\r\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\r\n      var protocol = lines[0].substr(2).split(' ')[2];\r\n\r\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\r\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\r\n\r\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\r\n\r\n      // Reject datachannels which are not implemented yet.\r\n      if (rejected || (kind === 'application' && (protocol === 'DTLS/SCTP' ||\r\n          protocol === 'UDP/DTLS/SCTP'))) {\r\n        // TODO: this is dangerous in the case where a non-rejected m-line\r\n        //     becomes rejected.\r\n        pc.transceivers[sdpMLineIndex] = {\r\n          mid: mid,\r\n          kind: kind,\r\n          protocol: protocol,\r\n          rejected: true\r\n        };\r\n        return;\r\n      }\r\n\r\n      if (!rejected && pc.transceivers[sdpMLineIndex] &&\r\n          pc.transceivers[sdpMLineIndex].rejected) {\r\n        // recycle a rejected transceiver.\r\n        pc.transceivers[sdpMLineIndex] = pc._createTransceiver(kind, true);\r\n      }\r\n\r\n      var transceiver;\r\n      var iceGatherer;\r\n      var iceTransport;\r\n      var dtlsTransport;\r\n      var rtpReceiver;\r\n      var sendEncodingParameters;\r\n      var recvEncodingParameters;\r\n      var localCapabilities;\r\n\r\n      var track;\r\n      // FIXME: ensure the mediaSection has rtcp-mux set.\r\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\r\n      var remoteIceParameters;\r\n      var remoteDtlsParameters;\r\n      if (!rejected) {\r\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\r\n            sessionpart);\r\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\r\n            sessionpart);\r\n        remoteDtlsParameters.role = 'client';\r\n      }\r\n      recvEncodingParameters =\r\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\r\n\r\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\r\n\r\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\r\n          'a=end-of-candidates', sessionpart).length > 0;\r\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\r\n          .map(function(cand) {\r\n            return SDPUtils.parseCandidate(cand);\r\n          })\r\n          .filter(function(cand) {\r\n            return cand.component === 1;\r\n          });\r\n\r\n      // Check if we can use BUNDLE and dispose transports.\r\n      if ((description.type === 'offer' || description.type === 'answer') &&\r\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\r\n          pc.transceivers[sdpMLineIndex]) {\r\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\r\n        pc.transceivers[sdpMLineIndex].iceGatherer =\r\n            pc.transceivers[0].iceGatherer;\r\n        pc.transceivers[sdpMLineIndex].iceTransport =\r\n            pc.transceivers[0].iceTransport;\r\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\r\n            pc.transceivers[0].dtlsTransport;\r\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\r\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\r\n              pc.transceivers[0].dtlsTransport);\r\n        }\r\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\r\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\r\n              pc.transceivers[0].dtlsTransport);\r\n        }\r\n      }\r\n      if (description.type === 'offer' && !rejected) {\r\n        transceiver = pc.transceivers[sdpMLineIndex] ||\r\n            pc._createTransceiver(kind);\r\n        transceiver.mid = mid;\r\n\r\n        if (!transceiver.iceGatherer) {\r\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\r\n              usingBundle);\r\n        }\r\n\r\n        if (cands.length && transceiver.iceTransport.state === 'new') {\r\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\r\n            transceiver.iceTransport.setRemoteCandidates(cands);\r\n          } else {\r\n            cands.forEach(function(candidate) {\r\n              maybeAddCandidate(transceiver.iceTransport, candidate);\r\n            });\r\n          }\r\n        }\r\n\r\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\r\n\r\n        // filter RTX until additional stuff needed for RTX is implemented\r\n        // in adapter.js\r\n        if (edgeVersion < 15019) {\r\n          localCapabilities.codecs = localCapabilities.codecs.filter(\r\n              function(codec) {\r\n                return codec.name !== 'rtx';\r\n              });\r\n        }\r\n\r\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\r\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\r\n        }];\r\n\r\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\r\n        var isNewTrack = false;\r\n        if (direction === 'sendrecv' || direction === 'sendonly') {\r\n          isNewTrack = !transceiver.rtpReceiver;\r\n          rtpReceiver = transceiver.rtpReceiver ||\r\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\r\n\r\n          if (isNewTrack) {\r\n            var stream;\r\n            track = rtpReceiver.track;\r\n            // FIXME: does not work with Plan B.\r\n            if (remoteMsid && remoteMsid.stream === '-') {\r\n              // no-op. a stream id of '-' means: no associated stream.\r\n            } else if (remoteMsid) {\r\n              if (!streams[remoteMsid.stream]) {\r\n                streams[remoteMsid.stream] = new window.MediaStream();\r\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\r\n                  get: function() {\r\n                    return remoteMsid.stream;\r\n                  }\r\n                });\r\n              }\r\n              Object.defineProperty(track, 'id', {\r\n                get: function() {\r\n                  return remoteMsid.track;\r\n                }\r\n              });\r\n              stream = streams[remoteMsid.stream];\r\n            } else {\r\n              if (!streams.default) {\r\n                streams.default = new window.MediaStream();\r\n              }\r\n              stream = streams.default;\r\n            }\r\n            if (stream) {\r\n              addTrackToStreamAndFireEvent(track, stream);\r\n              transceiver.associatedRemoteMediaStreams.push(stream);\r\n            }\r\n            receiverList.push([track, rtpReceiver, stream]);\r\n          }\r\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\r\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\r\n            var nativeTrack = s.getTracks().find(function(t) {\r\n              return t.id === transceiver.rtpReceiver.track.id;\r\n            });\r\n            if (nativeTrack) {\r\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\r\n            }\r\n          });\r\n          transceiver.associatedRemoteMediaStreams = [];\r\n        }\r\n\r\n        transceiver.localCapabilities = localCapabilities;\r\n        transceiver.remoteCapabilities = remoteCapabilities;\r\n        transceiver.rtpReceiver = rtpReceiver;\r\n        transceiver.rtcpParameters = rtcpParameters;\r\n        transceiver.sendEncodingParameters = sendEncodingParameters;\r\n        transceiver.recvEncodingParameters = recvEncodingParameters;\r\n\r\n        // Start the RTCRtpReceiver now. The RTPSender is started in\r\n        // setLocalDescription.\r\n        pc._transceive(pc.transceivers[sdpMLineIndex],\r\n            false,\r\n            isNewTrack);\r\n      } else if (description.type === 'answer' && !rejected) {\r\n        transceiver = pc.transceivers[sdpMLineIndex];\r\n        iceGatherer = transceiver.iceGatherer;\r\n        iceTransport = transceiver.iceTransport;\r\n        dtlsTransport = transceiver.dtlsTransport;\r\n        rtpReceiver = transceiver.rtpReceiver;\r\n        sendEncodingParameters = transceiver.sendEncodingParameters;\r\n        localCapabilities = transceiver.localCapabilities;\r\n\r\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\r\n            recvEncodingParameters;\r\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\r\n            remoteCapabilities;\r\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\r\n\r\n        if (cands.length && iceTransport.state === 'new') {\r\n          if ((isIceLite || isComplete) &&\r\n              (!usingBundle || sdpMLineIndex === 0)) {\r\n            iceTransport.setRemoteCandidates(cands);\r\n          } else {\r\n            cands.forEach(function(candidate) {\r\n              maybeAddCandidate(transceiver.iceTransport, candidate);\r\n            });\r\n          }\r\n        }\r\n\r\n        if (!usingBundle || sdpMLineIndex === 0) {\r\n          if (iceTransport.state === 'new') {\r\n            iceTransport.start(iceGatherer, remoteIceParameters,\r\n                'controlling');\r\n          }\r\n          if (dtlsTransport.state === 'new') {\r\n            dtlsTransport.start(remoteDtlsParameters);\r\n          }\r\n        }\r\n\r\n        // If the offer contained RTX but the answer did not,\r\n        // remove RTX from sendEncodingParameters.\r\n        var commonCapabilities = getCommonCapabilities(\r\n          transceiver.localCapabilities,\r\n          transceiver.remoteCapabilities);\r\n\r\n        var hasRtx = commonCapabilities.codecs.filter(function(c) {\r\n          return c.name.toLowerCase() === 'rtx';\r\n        }).length;\r\n        if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\r\n          delete transceiver.sendEncodingParameters[0].rtx;\r\n        }\r\n\r\n        pc._transceive(transceiver,\r\n            direction === 'sendrecv' || direction === 'recvonly',\r\n            direction === 'sendrecv' || direction === 'sendonly');\r\n\r\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\r\n        if (rtpReceiver &&\r\n            (direction === 'sendrecv' || direction === 'sendonly')) {\r\n          track = rtpReceiver.track;\r\n          if (remoteMsid) {\r\n            if (!streams[remoteMsid.stream]) {\r\n              streams[remoteMsid.stream] = new window.MediaStream();\r\n            }\r\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\r\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\r\n          } else {\r\n            if (!streams.default) {\r\n              streams.default = new window.MediaStream();\r\n            }\r\n            addTrackToStreamAndFireEvent(track, streams.default);\r\n            receiverList.push([track, rtpReceiver, streams.default]);\r\n          }\r\n        } else {\r\n          // FIXME: actually the receiver should be created later.\r\n          delete transceiver.rtpReceiver;\r\n        }\r\n      }\r\n    });\r\n\r\n    if (pc._dtlsRole === undefined) {\r\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\r\n    }\r\n\r\n    pc._remoteDescription = {\r\n      type: description.type,\r\n      sdp: description.sdp\r\n    };\r\n    if (description.type === 'offer') {\r\n      pc._updateSignalingState('have-remote-offer');\r\n    } else {\r\n      pc._updateSignalingState('stable');\r\n    }\r\n    Object.keys(streams).forEach(function(sid) {\r\n      var stream = streams[sid];\r\n      if (stream.getTracks().length) {\r\n        if (pc.remoteStreams.indexOf(stream) === -1) {\r\n          pc.remoteStreams.push(stream);\r\n          var event = new Event('addstream');\r\n          event.stream = stream;\r\n          window.setTimeout(function() {\r\n            pc._dispatchEvent('addstream', event);\r\n          });\r\n        }\r\n\r\n        receiverList.forEach(function(item) {\r\n          var track = item[0];\r\n          var receiver = item[1];\r\n          if (stream.id !== item[2].id) {\r\n            return;\r\n          }\r\n          fireAddTrack(pc, track, receiver, [stream]);\r\n        });\r\n      }\r\n    });\r\n    receiverList.forEach(function(item) {\r\n      if (item[2]) {\r\n        return;\r\n      }\r\n      fireAddTrack(pc, item[0], item[1], []);\r\n    });\r\n\r\n    // check whether addIceCandidate({}) was called within four seconds after\r\n    // setRemoteDescription.\r\n    window.setTimeout(function() {\r\n      if (!(pc && pc.transceivers)) {\r\n        return;\r\n      }\r\n      pc.transceivers.forEach(function(transceiver) {\r\n        if (transceiver.iceTransport &&\r\n            transceiver.iceTransport.state === 'new' &&\r\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\r\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\r\n              'an end-of-candidates notification');\r\n          transceiver.iceTransport.addRemoteCandidate({});\r\n        }\r\n      });\r\n    }, 4000);\r\n\r\n    return Promise.resolve();\r\n  };\r\n\r\n  RTCPeerConnection.prototype.close = function() {\r\n    this.transceivers.forEach(function(transceiver) {\r\n      /* not yet\r\n      if (transceiver.iceGatherer) {\r\n        transceiver.iceGatherer.close();\r\n      }\r\n      */\r\n      if (transceiver.iceTransport) {\r\n        transceiver.iceTransport.stop();\r\n      }\r\n      if (transceiver.dtlsTransport) {\r\n        transceiver.dtlsTransport.stop();\r\n      }\r\n      if (transceiver.rtpSender) {\r\n        transceiver.rtpSender.stop();\r\n      }\r\n      if (transceiver.rtpReceiver) {\r\n        transceiver.rtpReceiver.stop();\r\n      }\r\n    });\r\n    // FIXME: clean up tracks, local streams, remote streams, etc\r\n    this._isClosed = true;\r\n    this._updateSignalingState('closed');\r\n  };\r\n\r\n  // Update the signaling state.\r\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\r\n    this.signalingState = newState;\r\n    var event = new Event('signalingstatechange');\r\n    this._dispatchEvent('signalingstatechange', event);\r\n  };\r\n\r\n  // Determine whether to fire the negotiationneeded event.\r\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\r\n    var pc = this;\r\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\r\n      return;\r\n    }\r\n    this.needNegotiation = true;\r\n    window.setTimeout(function() {\r\n      if (pc.needNegotiation) {\r\n        pc.needNegotiation = false;\r\n        var event = new Event('negotiationneeded');\r\n        pc._dispatchEvent('negotiationneeded', event);\r\n      }\r\n    }, 0);\r\n  };\r\n\r\n  // Update the ice connection state.\r\n  RTCPeerConnection.prototype._updateIceConnectionState = function() {\r\n    var newState;\r\n    var states = {\r\n      'new': 0,\r\n      closed: 0,\r\n      checking: 0,\r\n      connected: 0,\r\n      completed: 0,\r\n      disconnected: 0,\r\n      failed: 0\r\n    };\r\n    this.transceivers.forEach(function(transceiver) {\r\n      if (transceiver.iceTransport && !transceiver.rejected) {\r\n        states[transceiver.iceTransport.state]++;\r\n      }\r\n    });\r\n\r\n    newState = 'new';\r\n    if (states.failed > 0) {\r\n      newState = 'failed';\r\n    } else if (states.checking > 0) {\r\n      newState = 'checking';\r\n    } else if (states.disconnected > 0) {\r\n      newState = 'disconnected';\r\n    } else if (states.new > 0) {\r\n      newState = 'new';\r\n    } else if (states.connected > 0) {\r\n      newState = 'connected';\r\n    } else if (states.completed > 0) {\r\n      newState = 'completed';\r\n    }\r\n\r\n    if (newState !== this.iceConnectionState) {\r\n      this.iceConnectionState = newState;\r\n      var event = new Event('iceconnectionstatechange');\r\n      this._dispatchEvent('iceconnectionstatechange', event);\r\n    }\r\n  };\r\n\r\n  // Update the connection state.\r\n  RTCPeerConnection.prototype._updateConnectionState = function() {\r\n    var newState;\r\n    var states = {\r\n      'new': 0,\r\n      closed: 0,\r\n      connecting: 0,\r\n      connected: 0,\r\n      completed: 0,\r\n      disconnected: 0,\r\n      failed: 0\r\n    };\r\n    this.transceivers.forEach(function(transceiver) {\r\n      if (transceiver.iceTransport && transceiver.dtlsTransport &&\r\n          !transceiver.rejected) {\r\n        states[transceiver.iceTransport.state]++;\r\n        states[transceiver.dtlsTransport.state]++;\r\n      }\r\n    });\r\n    // ICETransport.completed and connected are the same for this purpose.\r\n    states.connected += states.completed;\r\n\r\n    newState = 'new';\r\n    if (states.failed > 0) {\r\n      newState = 'failed';\r\n    } else if (states.connecting > 0) {\r\n      newState = 'connecting';\r\n    } else if (states.disconnected > 0) {\r\n      newState = 'disconnected';\r\n    } else if (states.new > 0) {\r\n      newState = 'new';\r\n    } else if (states.connected > 0) {\r\n      newState = 'connected';\r\n    }\r\n\r\n    if (newState !== this.connectionState) {\r\n      this.connectionState = newState;\r\n      var event = new Event('connectionstatechange');\r\n      this._dispatchEvent('connectionstatechange', event);\r\n    }\r\n  };\r\n\r\n  RTCPeerConnection.prototype.createOffer = function() {\r\n    var pc = this;\r\n\r\n    if (pc._isClosed) {\r\n      return Promise.reject(makeError('InvalidStateError',\r\n          'Can not call createOffer after close'));\r\n    }\r\n\r\n    var numAudioTracks = pc.transceivers.filter(function(t) {\r\n      return t.kind === 'audio';\r\n    }).length;\r\n    var numVideoTracks = pc.transceivers.filter(function(t) {\r\n      return t.kind === 'video';\r\n    }).length;\r\n\r\n    // Determine number of audio and video tracks we need to send/recv.\r\n    var offerOptions = arguments[0];\r\n    if (offerOptions) {\r\n      // Reject Chrome legacy constraints.\r\n      if (offerOptions.mandatory || offerOptions.optional) {\r\n        throw new TypeError(\r\n            'Legacy mandatory/optional constraints not supported.');\r\n      }\r\n      if (offerOptions.offerToReceiveAudio !== undefined) {\r\n        if (offerOptions.offerToReceiveAudio === true) {\r\n          numAudioTracks = 1;\r\n        } else if (offerOptions.offerToReceiveAudio === false) {\r\n          numAudioTracks = 0;\r\n        } else {\r\n          numAudioTracks = offerOptions.offerToReceiveAudio;\r\n        }\r\n      }\r\n      if (offerOptions.offerToReceiveVideo !== undefined) {\r\n        if (offerOptions.offerToReceiveVideo === true) {\r\n          numVideoTracks = 1;\r\n        } else if (offerOptions.offerToReceiveVideo === false) {\r\n          numVideoTracks = 0;\r\n        } else {\r\n          numVideoTracks = offerOptions.offerToReceiveVideo;\r\n        }\r\n      }\r\n    }\r\n\r\n    pc.transceivers.forEach(function(transceiver) {\r\n      if (transceiver.kind === 'audio') {\r\n        numAudioTracks--;\r\n        if (numAudioTracks < 0) {\r\n          transceiver.wantReceive = false;\r\n        }\r\n      } else if (transceiver.kind === 'video') {\r\n        numVideoTracks--;\r\n        if (numVideoTracks < 0) {\r\n          transceiver.wantReceive = false;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Create M-lines for recvonly streams.\r\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\r\n      if (numAudioTracks > 0) {\r\n        pc._createTransceiver('audio');\r\n        numAudioTracks--;\r\n      }\r\n      if (numVideoTracks > 0) {\r\n        pc._createTransceiver('video');\r\n        numVideoTracks--;\r\n      }\r\n    }\r\n\r\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\r\n        pc._sdpSessionVersion++);\r\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\r\n      // For each track, create an ice gatherer, ice transport,\r\n      // dtls transport, potentially rtpsender and rtpreceiver.\r\n      var track = transceiver.track;\r\n      var kind = transceiver.kind;\r\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\r\n      transceiver.mid = mid;\r\n\r\n      if (!transceiver.iceGatherer) {\r\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\r\n            pc.usingBundle);\r\n      }\r\n\r\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\r\n      // filter RTX until additional stuff needed for RTX is implemented\r\n      // in adapter.js\r\n      if (edgeVersion < 15019) {\r\n        localCapabilities.codecs = localCapabilities.codecs.filter(\r\n            function(codec) {\r\n              return codec.name !== 'rtx';\r\n            });\r\n      }\r\n      localCapabilities.codecs.forEach(function(codec) {\r\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\r\n        // by adding level-asymmetry-allowed=1\r\n        if (codec.name === 'H264' &&\r\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\r\n          codec.parameters['level-asymmetry-allowed'] = '1';\r\n        }\r\n\r\n        // for subsequent offers, we might have to re-use the payload\r\n        // type of the last offer.\r\n        if (transceiver.remoteCapabilities &&\r\n            transceiver.remoteCapabilities.codecs) {\r\n          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {\r\n            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&\r\n                codec.clockRate === remoteCodec.clockRate) {\r\n              codec.preferredPayloadType = remoteCodec.payloadType;\r\n            }\r\n          });\r\n        }\r\n      });\r\n      localCapabilities.headerExtensions.forEach(function(hdrExt) {\r\n        var remoteExtensions = transceiver.remoteCapabilities &&\r\n            transceiver.remoteCapabilities.headerExtensions || [];\r\n        remoteExtensions.forEach(function(rHdrExt) {\r\n          if (hdrExt.uri === rHdrExt.uri) {\r\n            hdrExt.id = rHdrExt.id;\r\n          }\r\n        });\r\n      });\r\n\r\n      // generate an ssrc now, to be used later in rtpSender.send\r\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\r\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\r\n      }];\r\n      if (track) {\r\n        // add RTX\r\n        if (edgeVersion >= 15019 && kind === 'video' &&\r\n            !sendEncodingParameters[0].rtx) {\r\n          sendEncodingParameters[0].rtx = {\r\n            ssrc: sendEncodingParameters[0].ssrc + 1\r\n          };\r\n        }\r\n      }\r\n\r\n      if (transceiver.wantReceive) {\r\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\r\n            transceiver.dtlsTransport, kind);\r\n      }\r\n\r\n      transceiver.localCapabilities = localCapabilities;\r\n      transceiver.sendEncodingParameters = sendEncodingParameters;\r\n    });\r\n\r\n    // always offer BUNDLE and dispose on return if not supported.\r\n    if (pc._config.bundlePolicy !== 'max-compat') {\r\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\r\n        return t.mid;\r\n      }).join(' ') + '\\r\\n';\r\n    }\r\n    sdp += 'a=ice-options:trickle\\r\\n';\r\n\r\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\r\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\r\n          'offer', transceiver.stream, pc._dtlsRole);\r\n      sdp += 'a=rtcp-rsize\\r\\n';\r\n\r\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\r\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\r\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\r\n          cand.component = 1;\r\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\r\n        });\r\n\r\n        if (transceiver.iceGatherer.state === 'completed') {\r\n          sdp += 'a=end-of-candidates\\r\\n';\r\n        }\r\n      }\r\n    });\r\n\r\n    var desc = new window.RTCSessionDescription({\r\n      type: 'offer',\r\n      sdp: sdp\r\n    });\r\n    return Promise.resolve(desc);\r\n  };\r\n\r\n  RTCPeerConnection.prototype.createAnswer = function() {\r\n    var pc = this;\r\n\r\n    if (pc._isClosed) {\r\n      return Promise.reject(makeError('InvalidStateError',\r\n          'Can not call createAnswer after close'));\r\n    }\r\n\r\n    if (!(pc.signalingState === 'have-remote-offer' ||\r\n        pc.signalingState === 'have-local-pranswer')) {\r\n      return Promise.reject(makeError('InvalidStateError',\r\n          'Can not call createAnswer in signalingState ' + pc.signalingState));\r\n    }\r\n\r\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\r\n        pc._sdpSessionVersion++);\r\n    if (pc.usingBundle) {\r\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\r\n        return t.mid;\r\n      }).join(' ') + '\\r\\n';\r\n    }\r\n    sdp += 'a=ice-options:trickle\\r\\n';\r\n\r\n    var mediaSectionsInOffer = SDPUtils.getMediaSections(\r\n        pc._remoteDescription.sdp).length;\r\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\r\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\r\n        return;\r\n      }\r\n      if (transceiver.rejected) {\r\n        if (transceiver.kind === 'application') {\r\n          if (transceiver.protocol === 'DTLS/SCTP') { // legacy fmt\r\n            sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n';\r\n          } else {\r\n            sdp += 'm=application 0 ' + transceiver.protocol +\r\n                ' webrtc-datachannel\\r\\n';\r\n          }\r\n        } else if (transceiver.kind === 'audio') {\r\n          sdp += 'm=audio 0 UDP/TLS/RTP/SAVPF 0\\r\\n' +\r\n              'a=rtpmap:0 PCMU/8000\\r\\n';\r\n        } else if (transceiver.kind === 'video') {\r\n          sdp += 'm=video 0 UDP/TLS/RTP/SAVPF 120\\r\\n' +\r\n              'a=rtpmap:120 VP8/90000\\r\\n';\r\n        }\r\n        sdp += 'c=IN IP4 0.0.0.0\\r\\n' +\r\n            'a=inactive\\r\\n' +\r\n            'a=mid:' + transceiver.mid + '\\r\\n';\r\n        return;\r\n      }\r\n\r\n      // FIXME: look at direction.\r\n      if (transceiver.stream) {\r\n        var localTrack;\r\n        if (transceiver.kind === 'audio') {\r\n          localTrack = transceiver.stream.getAudioTracks()[0];\r\n        } else if (transceiver.kind === 'video') {\r\n          localTrack = transceiver.stream.getVideoTracks()[0];\r\n        }\r\n        if (localTrack) {\r\n          // add RTX\r\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\r\n              !transceiver.sendEncodingParameters[0].rtx) {\r\n            transceiver.sendEncodingParameters[0].rtx = {\r\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\r\n            };\r\n          }\r\n        }\r\n      }\r\n\r\n      // Calculate intersection of capabilities.\r\n      var commonCapabilities = getCommonCapabilities(\r\n          transceiver.localCapabilities,\r\n          transceiver.remoteCapabilities);\r\n\r\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\r\n        return c.name.toLowerCase() === 'rtx';\r\n      }).length;\r\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\r\n        delete transceiver.sendEncodingParameters[0].rtx;\r\n      }\r\n\r\n      sdp += writeMediaSection(transceiver, commonCapabilities,\r\n          'answer', transceiver.stream, pc._dtlsRole);\r\n      if (transceiver.rtcpParameters &&\r\n          transceiver.rtcpParameters.reducedSize) {\r\n        sdp += 'a=rtcp-rsize\\r\\n';\r\n      }\r\n    });\r\n\r\n    var desc = new window.RTCSessionDescription({\r\n      type: 'answer',\r\n      sdp: sdp\r\n    });\r\n    return Promise.resolve(desc);\r\n  };\r\n\r\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\r\n    var pc = this;\r\n    var sections;\r\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\r\n        candidate.sdpMid)) {\r\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\r\n    }\r\n\r\n    // TODO: needs to go into ops queue.\r\n    return new Promise(function(resolve, reject) {\r\n      if (!pc._remoteDescription) {\r\n        return reject(makeError('InvalidStateError',\r\n            'Can not add ICE candidate without a remote description'));\r\n      } else if (!candidate || candidate.candidate === '') {\r\n        for (var j = 0; j < pc.transceivers.length; j++) {\r\n          if (pc.transceivers[j].rejected) {\r\n            continue;\r\n          }\r\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\r\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\r\n          sections[j] += 'a=end-of-candidates\\r\\n';\r\n          pc._remoteDescription.sdp =\r\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\r\n              sections.join('');\r\n          if (pc.usingBundle) {\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        var sdpMLineIndex = candidate.sdpMLineIndex;\r\n        if (candidate.sdpMid) {\r\n          for (var i = 0; i < pc.transceivers.length; i++) {\r\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\r\n              sdpMLineIndex = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        var transceiver = pc.transceivers[sdpMLineIndex];\r\n        if (transceiver) {\r\n          if (transceiver.rejected) {\r\n            return resolve();\r\n          }\r\n          var cand = Object.keys(candidate.candidate).length > 0 ?\r\n              SDPUtils.parseCandidate(candidate.candidate) : {};\r\n          // Ignore Chrome's invalid candidates since Edge does not like them.\r\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\r\n            return resolve();\r\n          }\r\n          // Ignore RTCP candidates, we assume RTCP-MUX.\r\n          if (cand.component && cand.component !== 1) {\r\n            return resolve();\r\n          }\r\n          // when using bundle, avoid adding candidates to the wrong\r\n          // ice transport. And avoid adding candidates added in the SDP.\r\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\r\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\r\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\r\n              return reject(makeError('OperationError',\r\n                  'Can not add ICE candidate'));\r\n            }\r\n          }\r\n\r\n          // update the remoteDescription.\r\n          var candidateString = candidate.candidate.trim();\r\n          if (candidateString.indexOf('a=') === 0) {\r\n            candidateString = candidateString.substr(2);\r\n          }\r\n          sections = SDPUtils.getMediaSections(pc._remoteDescription.sdp);\r\n          sections[sdpMLineIndex] += 'a=' +\r\n              (cand.type ? candidateString : 'end-of-candidates')\r\n              + '\\r\\n';\r\n          pc._remoteDescription.sdp =\r\n              SDPUtils.getDescription(pc._remoteDescription.sdp) +\r\n              sections.join('');\r\n        } else {\r\n          return reject(makeError('OperationError',\r\n              'Can not add ICE candidate'));\r\n        }\r\n      }\r\n      resolve();\r\n    });\r\n  };\r\n\r\n  RTCPeerConnection.prototype.getStats = function(selector) {\r\n    if (selector && selector instanceof window.MediaStreamTrack) {\r\n      var senderOrReceiver = null;\r\n      this.transceivers.forEach(function(transceiver) {\r\n        if (transceiver.rtpSender &&\r\n            transceiver.rtpSender.track === selector) {\r\n          senderOrReceiver = transceiver.rtpSender;\r\n        } else if (transceiver.rtpReceiver &&\r\n            transceiver.rtpReceiver.track === selector) {\r\n          senderOrReceiver = transceiver.rtpReceiver;\r\n        }\r\n      });\r\n      if (!senderOrReceiver) {\r\n        throw makeError('InvalidAccessError', 'Invalid selector.');\r\n      }\r\n      return senderOrReceiver.getStats();\r\n    }\r\n\r\n    var promises = [];\r\n    this.transceivers.forEach(function(transceiver) {\r\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\r\n          'dtlsTransport'].forEach(function(method) {\r\n            if (transceiver[method]) {\r\n              promises.push(transceiver[method].getStats());\r\n            }\r\n          });\r\n    });\r\n    return Promise.all(promises).then(function(allStats) {\r\n      var results = new Map();\r\n      allStats.forEach(function(stats) {\r\n        stats.forEach(function(stat) {\r\n          results.set(stat.id, stat);\r\n        });\r\n      });\r\n      return results;\r\n    });\r\n  };\r\n\r\n  // fix low-level stat names and return Map instead of object.\r\n  var ortcObjects = ['RTCRtpSender', 'RTCRtpReceiver', 'RTCIceGatherer',\r\n    'RTCIceTransport', 'RTCDtlsTransport'];\r\n  ortcObjects.forEach(function(ortcObjectName) {\r\n    var obj = window[ortcObjectName];\r\n    if (obj && obj.prototype && obj.prototype.getStats) {\r\n      var nativeGetstats = obj.prototype.getStats;\r\n      obj.prototype.getStats = function() {\r\n        return nativeGetstats.apply(this)\r\n        .then(function(nativeStats) {\r\n          var mapStats = new Map();\r\n          Object.keys(nativeStats).forEach(function(id) {\r\n            nativeStats[id].type = fixStatsType(nativeStats[id]);\r\n            mapStats.set(id, nativeStats[id]);\r\n          });\r\n          return mapStats;\r\n        });\r\n      };\r\n    }\r\n  });\r\n\r\n  // legacy callback shims. Should be moved to adapter.js some days.\r\n  var methods = ['createOffer', 'createAnswer'];\r\n  methods.forEach(function(method) {\r\n    var nativeMethod = RTCPeerConnection.prototype[method];\r\n    RTCPeerConnection.prototype[method] = function() {\r\n      var args = arguments;\r\n      if (typeof args[0] === 'function' ||\r\n          typeof args[1] === 'function') { // legacy\r\n        return nativeMethod.apply(this, [arguments[2]])\r\n        .then(function(description) {\r\n          if (typeof args[0] === 'function') {\r\n            args[0].apply(null, [description]);\r\n          }\r\n        }, function(error) {\r\n          if (typeof args[1] === 'function') {\r\n            args[1].apply(null, [error]);\r\n          }\r\n        });\r\n      }\r\n      return nativeMethod.apply(this, arguments);\r\n    };\r\n  });\r\n\r\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\r\n  methods.forEach(function(method) {\r\n    var nativeMethod = RTCPeerConnection.prototype[method];\r\n    RTCPeerConnection.prototype[method] = function() {\r\n      var args = arguments;\r\n      if (typeof args[1] === 'function' ||\r\n          typeof args[2] === 'function') { // legacy\r\n        return nativeMethod.apply(this, arguments)\r\n        .then(function() {\r\n          if (typeof args[1] === 'function') {\r\n            args[1].apply(null);\r\n          }\r\n        }, function(error) {\r\n          if (typeof args[2] === 'function') {\r\n            args[2].apply(null, [error]);\r\n          }\r\n        });\r\n      }\r\n      return nativeMethod.apply(this, arguments);\r\n    };\r\n  });\r\n\r\n  // getStats is special. It doesn't have a spec legacy method yet we support\r\n  // getStats(something, cb) without error callbacks.\r\n  ['getStats'].forEach(function(method) {\r\n    var nativeMethod = RTCPeerConnection.prototype[method];\r\n    RTCPeerConnection.prototype[method] = function() {\r\n      var args = arguments;\r\n      if (typeof args[1] === 'function') {\r\n        return nativeMethod.apply(this, arguments)\r\n        .then(function() {\r\n          if (typeof args[1] === 'function') {\r\n            args[1].apply(null);\r\n          }\r\n        });\r\n      }\r\n      return nativeMethod.apply(this, arguments);\r\n    };\r\n  });\r\n\r\n  return RTCPeerConnection;\r\n};\r\n","/* global __filename, RTCSessionDescription */\r\n\r\nimport { Interop } from '@jitsi/sdp-interop';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport transform from 'sdp-transform';\r\n\r\nimport * as CodecMimeType from '../../service/RTC/CodecMimeType';\r\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\r\nimport { MediaType } from '../../service/RTC/MediaType';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\r\nimport * as VideoType from '../../service/RTC/VideoType';\r\nimport browser from '../browser';\r\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\r\nimport RtxModifier from '../xmpp/RtxModifier';\r\nimport SDP from '../xmpp/SDP';\r\nimport SDPUtil from '../xmpp/SDPUtil';\r\nimport SdpConsistency from '../xmpp/SdpConsistency';\r\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\n\r\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\r\nimport LocalSdpMunger from './LocalSdpMunger';\r\nimport RTC from './RTC';\r\nimport RTCUtils from './RTCUtils';\r\nimport { SIM_LAYER_RIDS, TPCUtils } from './TPCUtils';\r\nimport SdpSimulcast from '../xmpp/SdpSimulcast.ts';\r\n\r\n// FIXME SDP tools should end up in some kind of util module\r\n\r\nconst logger = getLogger(__filename);\r\nconst DEGRADATION_PREFERENCE_CAMERA = 'maintain-framerate';\r\nconst DEGRADATION_PREFERENCE_DESKTOP = 'maintain-resolution';\r\nconst DESKSTOP_SHARE_RATE = 500000;\r\nconst HD_BITRATE = 2500000;\r\nconst LD_BITRATE = 200000;\r\nconst SD_BITRATE = 700000;\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Creates new instance of 'TraceablePeerConnection'.\r\n *\r\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\r\n * @param {number} id the peer connection id assigned by the parent RTC module.\r\n * @param {SignalingLayer} signalingLayer the signaling layer instance\r\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\r\n * @param {object} constraints WebRTC 'PeerConnection' constraints\r\n * @param {boolean} isP2P indicates whether or not the new instance will be used\r\n * in a peer to peer connection\r\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\r\n * @param {boolean} options.disableSimulcast if set to 'true' will disable\r\n * the simulcast.\r\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX\r\n * @param {boolean} options.capScreenshareBitrate if set to 'true' simulcast will\r\n * be disabled for screenshare and a max bitrate of 500Kbps will applied on the\r\n * stream.\r\n * @param {string} options.disabledCodec the mime type of the code that should\r\n * not be negotiated on the peerconnection.\r\n * @param {boolean} options.disableH264 If set to 'true' H264 will be\r\n *      disabled by removing it from the SDP (deprecated)\r\n * @param {boolean} options.preferH264 if set to 'true' H264 will be preferred\r\n * over other video codecs. (deprecated)\r\n * @param {string} options.preferredCodec the mime type of the codec that needs\r\n * to be made the preferred codec for the connection.\r\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\r\n *\r\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\r\n * debug the peer connection. Since many other responsibilities have been added\r\n * it would make sense to extract a separate class from it and come up with\r\n * a more suitable name.\r\n *\r\n * @constructor\r\n */\r\nexport default function TraceablePeerConnection(\r\n        rtc,\r\n        id,\r\n        signalingLayer,\r\n        iceConfig,\r\n        constraints,\r\n        isP2P,\r\n        options) {\r\n\r\n    /**\r\n     * Indicates whether or not this peer connection instance is actively\r\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\r\n     * media direction will be adjusted to 'inactive' in order to suspend\r\n     * the transmission.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.audioTransferActive = !(options.startSilent === true);\r\n\r\n    /**\r\n     * The DTMF sender instance used to send DTMF tones.\r\n     *\r\n     * @type {RTCDTMFSender|undefined}\r\n     * @private\r\n     */\r\n    this._dtmfSender = undefined;\r\n\r\n    /**\r\n     * @typedef {Object} TouchToneRequest\r\n     * @property {string} tones - The DTMF tones string as defined by\r\n     * {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\r\n     * @property {number} duration - The amount of time in milliseconds that\r\n     * each DTMF should last.\r\n     * @property {string} interToneGap - The length of time in miliseconds to\r\n     * wait between tones.\r\n     */\r\n    /**\r\n     * TouchToneRequests which are waiting to be played. This queue is filled\r\n     * if there are touch tones currently being played.\r\n     *\r\n     * @type {Array<TouchToneRequest>}\r\n     * @private\r\n     */\r\n    this._dtmfTonesQueue = [];\r\n\r\n    /**\r\n     * Indicates whether or not this peer connection instance is actively\r\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\r\n     * media direction will be adjusted to 'inactive' in order to suspend\r\n     * the transmission.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.videoTransferActive = true;\r\n\r\n    /**\r\n     * The parent instance of RTC service which created this\r\n     * <tt>TracablePeerConnection</tt>.\r\n     * @type {RTC}\r\n     */\r\n    this.rtc = rtc;\r\n\r\n    /**\r\n     * The peer connection identifier assigned by the RTC module.\r\n     * @type {number}\r\n     */\r\n    this.id = id;\r\n\r\n    /**\r\n     * Indicates whether or not this instance is used in a peer to peer\r\n     * connection.\r\n     * @type {boolean}\r\n     */\r\n    this.isP2P = isP2P;\r\n\r\n    // FIXME: We should support multiple streams per jid.\r\n    /**\r\n     * The map holds remote tracks associated with this peer connection.\r\n     * It maps user's JID to media type and remote track\r\n     * (one track per media type per user's JID).\r\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\r\n     */\r\n    this.remoteTracks = new Map();\r\n\r\n    /**\r\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\r\n     * @type {Map<number, JitsiLocalTrack>}\r\n     */\r\n    this.localTracks = new Map();\r\n\r\n    /**\r\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\r\n     * the underlying WebRTC PeerConnection.\r\n     * @type {Array}\r\n     * @private\r\n     */\r\n    this._addedStreams = [];\r\n\r\n    /**\r\n     * @typedef {Object} TPCGroupInfo\r\n     * @property {string} semantics the SSRC groups semantics\r\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\r\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\r\n     * on...\r\n     */\r\n    /**\r\n     * @typedef {Object} TPCSSRCInfo\r\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\r\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\r\n     * groups\r\n     */\r\n    /**\r\n     * Holds the info about local track's SSRCs mapped per their\r\n     * {@link JitsiLocalTrack.rtcId}\r\n     * @type {Map<number, TPCSSRCInfo>}\r\n     */\r\n    this.localSSRCs = new Map();\r\n\r\n    /**\r\n     * The local ICE username fragment for this session.\r\n     */\r\n    this.localUfrag = null;\r\n\r\n    /**\r\n     * The remote ICE username fragment for this session.\r\n     */\r\n    this.remoteUfrag = null;\r\n\r\n    /**\r\n     * The DTLS transport object for the PeerConnection.\r\n     * Note: this assume only one shared transport exists because we bundled\r\n     *       all streams on the same underlying transport.\r\n     */\r\n    this._dtlsTransport = null;\r\n\r\n    /**\r\n     * The signaling layer which operates this peer connection.\r\n     * @type {SignalingLayer}\r\n     */\r\n    this.signalingLayer = signalingLayer;\r\n\r\n    // SignalingLayer listeners\r\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\r\n    this.signalingLayer.on(\r\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\r\n        this._peerVideoTypeChanged);\r\n\r\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\r\n    this.signalingLayer.on(\r\n        SignalingEvents.PEER_MUTED_CHANGED,\r\n        this._peerMutedChanged);\r\n    this.options = options;\r\n\r\n    // Setup SignalingLayer listeners for source-name based events.\r\n    this.signalingLayer.on(SignalingEvents.SOURCE_MUTED_CHANGED,\r\n        (sourceName, isMuted) => this._sourceMutedChanged(sourceName, isMuted));\r\n    this.signalingLayer.on(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED,\r\n        (sourceName, videoType) => this._sourceVideoTypeChanged(sourceName, videoType));\r\n\r\n    // Make sure constraints is properly formatted in order to provide information about whether or not this\r\n    // connection is P2P to rtcstats.\r\n    const safeConstraints = constraints || {};\r\n\r\n    safeConstraints.optional = safeConstraints.optional || [];\r\n\r\n    // The `optional` parameter needs to be of type array, otherwise chrome will throw an error.\r\n    // Firefox and Safari just ignore it.\r\n    if (Array.isArray(safeConstraints.optional)) {\r\n        safeConstraints.optional.push({ rtcStatsSFUP2P: this.isP2P });\r\n    } else {\r\n        logger.warn('Optional param is not an array, rtcstats p2p data is omitted.');\r\n    }\r\n\r\n    this.peerconnection\r\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, safeConstraints);\r\n\r\n    // The standard video bitrates are used in Unified plan when switching\r\n    // between camera/desktop tracks on the same sender.\r\n    const standardVideoBitrates = {\r\n        low: LD_BITRATE,\r\n        standard: SD_BITRATE,\r\n        high: HD_BITRATE\r\n    };\r\n\r\n    // Check if the max. bitrates for video are specified through config.js videoQuality settings.\r\n    // These bitrates will be applied on all browsers for camera sources in both simulcast and p2p mode.\r\n    this.videoBitrates = this.options.videoQuality && this.options.videoQuality.maxBitratesVideo\r\n        ? this.options.videoQuality.maxBitratesVideo\r\n        : standardVideoBitrates;\r\n\r\n    this.tpcUtils = new TPCUtils(this, this.videoBitrates);\r\n    this.updateLog = [];\r\n    this.stats = {};\r\n    this.statsinterval = null;\r\n\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    this._usesTransceiverCodecPreferences = browser.supportsCodecPreferences() && browser.usesUnifiedPlan();\r\n    this._capScreenshareBitrate = this.options.capScreenshareBitrate;\r\n\r\n    /**\r\n     * @type {number} The max number of stats to keep in this.stats. Limit to\r\n     * 300 values, i.e. 5 minutes; set to 0 to disable\r\n     */\r\n    this.maxstats = options.maxstats;\r\n\r\n    this.interop = new Interop();\r\n\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    // this.simulcast = new Simulcast(\r\n    //     {\r\n    //         numOfLayers: SIM_LAYER_RIDS.length,\r\n    //         explodeRemoteSimulcast: false,\r\n    //         usesUnifiedPlan: browser.usesUnifiedPlan()\r\n    //     });\r\n    if (browser.usesUnifiedPlan()) {\r\n        this.simulcast = new SdpSimulcast({ numOfLayers: SIM_LAYER_RIDS.length })\r\n    } else {\r\n        const Simulcast = require('@jitsi/sdp-simulcast');\r\n\r\n        this.simulcast = new Simulcast(\r\n            {\r\n                numOfLayers: SIM_LAYER_RIDS.length,\r\n                explodeRemoteSimulcast: false,\r\n                usesUnifiedPlan: false\r\n            });\r\n    }\r\n\r\n    this.sdpConsistency = new SdpConsistency(this.toString());\r\n\r\n    /**\r\n     * Munges local SDP provided to the Jingle Session in order to prevent from\r\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\r\n     * @type {LocalSdpMunger}\r\n     */\r\n    this.localSdpMunger = new LocalSdpMunger(this, this.rtc.getLocalEndpointId());\r\n\r\n    /**\r\n     * TracablePeerConnection uses RTC's eventEmitter\r\n     * @type {EventEmitter}\r\n     */\r\n    this.eventEmitter = rtc.eventEmitter;\r\n    this.rtxModifier = new RtxModifier();\r\n\r\n    /**\r\n     * The height constraint applied on the video sender.\r\n     */\r\n    this.senderVideoMaxHeight = null;\r\n\r\n    // We currently support preferring/disabling video codecs only.\r\n    const getCodecMimeType = codec => {\r\n        if (typeof codec === 'string') {\r\n            return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    // Set the codec preference that will be applied on the SDP based on the config.js settings.\r\n    let preferredCodec = getCodecMimeType(\r\n        this.options.preferredCodec || (this.options.preferH264 && CodecMimeType.H264)\r\n    );\r\n\r\n    // Do not prefer VP9 on Firefox because of the following bug.\r\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1633876\r\n    if (browser.isFirefox() && preferredCodec === CodecMimeType.VP9) {\r\n        preferredCodec = null;\r\n    }\r\n\r\n    // Determine the codec that needs to be disabled based on config.js settings.\r\n    let disabledCodec = getCodecMimeType(\r\n        this.options.disabledCodec || (this.options.disableH264 && CodecMimeType.H264)\r\n    );\r\n\r\n    // Make sure we don't disable VP8 since it is a mandatory codec.\r\n    if (disabledCodec === CodecMimeType.VP8) {\r\n        logger.warn('Disabling VP8 is not permitted, setting is ignored!');\r\n        disabledCodec = null;\r\n    }\r\n\r\n    if (preferredCodec || disabledCodec) {\r\n        // If both enable and disable are set for the same codec, disable setting will prevail.\r\n        this.codecPreference = {\r\n            enable: disabledCodec === null,\r\n            mediaType: MediaType.VIDEO,\r\n            mimeType: disabledCodec ? disabledCodec : preferredCodec\r\n        };\r\n    }\r\n\r\n    // override as desired\r\n    this.trace = (what, info) => {\r\n        logger.debug(what, info);\r\n\r\n        this.updateLog.push({\r\n            time: new Date(),\r\n            type: what,\r\n            value: info || ''\r\n        });\r\n    };\r\n    this.onicecandidate = null;\r\n    this.peerconnection.onicecandidate = event => {\r\n        this.trace(\r\n            'onicecandidate',\r\n            JSON.stringify(event.candidate, null, ' '));\r\n\r\n        if (this.onicecandidate !== null) {\r\n            this.onicecandidate(event);\r\n        }\r\n    };\r\n\r\n    // Use stream events in plan-b and track events in unified plan.\r\n    if (browser.usesPlanB()) {\r\n        this.peerconnection.onaddstream\r\n            = event => this._remoteStreamAdded(event.stream);\r\n        this.peerconnection.onremovestream\r\n            = event => this._remoteStreamRemoved(event.stream);\r\n    } else {\r\n        this.peerconnection.ontrack = event => {\r\n            const stream = event.streams[0];\r\n\r\n            this._remoteTrackAdded(stream, event.track, event.transceiver);\r\n            stream.onremovetrack = evt => {\r\n                this._remoteTrackRemoved(stream, evt.track);\r\n            };\r\n        };\r\n    }\r\n    this.onsignalingstatechange = null;\r\n    this.peerconnection.onsignalingstatechange = event => {\r\n        this.trace('onsignalingstatechange', this.signalingState);\r\n        if (this.onsignalingstatechange !== null) {\r\n            this.onsignalingstatechange(event);\r\n        }\r\n    };\r\n    this.oniceconnectionstatechange = null;\r\n    this.peerconnection.oniceconnectionstatechange = event => {\r\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\r\n        if (this.oniceconnectionstatechange !== null) {\r\n            this.oniceconnectionstatechange(event);\r\n        }\r\n    };\r\n    this.onnegotiationneeded = null;\r\n    this.peerconnection.onnegotiationneeded = event => {\r\n        this.trace('onnegotiationneeded');\r\n        if (this.onnegotiationneeded !== null) {\r\n            this.onnegotiationneeded(event);\r\n        }\r\n    };\r\n    this.onconnectionstatechange = null;\r\n    this.peerconnection.onconnectionstatechange = event => {\r\n        this.trace('onconnectionstatechange', this.connectionState);\r\n        if (this.onconnectionstatechange !== null) {\r\n            this.onconnectionstatechange(event);\r\n        }\r\n    };\r\n    this.ondatachannel = null;\r\n    this.peerconnection.ondatachannel = event => {\r\n        this.trace('ondatachannel');\r\n        if (this.ondatachannel !== null) {\r\n            this.ondatachannel(event);\r\n        }\r\n    };\r\n\r\n    if (this.maxstats) {\r\n        this.statsinterval = window.setInterval(() => {\r\n            this.getStats(stats => {\r\n                if (stats.result\r\n                    && typeof stats.result === 'function') {\r\n                    const results = stats.result();\r\n\r\n                    for (let i = 0; i < results.length; ++i) {\r\n                        const res = results[i];\r\n\r\n                        res.names().forEach(name => {\r\n                            this._processStat(res, name, res.stat(name));\r\n                        });\r\n                    }\r\n                } else {\r\n                    stats.forEach(r => this._processStat(r, '', r));\r\n                }\r\n            }, () => {\r\n\r\n                // empty error callback\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    logger.info(`Create new ${this}`);\r\n}\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Process stat and adds it to the array of stats we store.\r\n * @param report the current stats report.\r\n * @param name the name of the report, if available\r\n * @param statValue the value to add.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._processStat\r\n    = function(report, name, statValue) {\r\n        const id = `${report.id}-${name}`;\r\n        let s = this.stats[id];\r\n        const now = new Date();\r\n\r\n        if (!s) {\r\n            this.stats[id] = s = {\r\n                startTime: now,\r\n                endTime: now,\r\n                values: [],\r\n                times: []\r\n            };\r\n        }\r\n        s.values.push(statValue);\r\n        s.times.push(now.getTime());\r\n        if (s.values.length > this.maxstats) {\r\n            s.values.shift();\r\n            s.times.shift();\r\n        }\r\n        s.endTime = now;\r\n    };\r\n\r\n/**\r\n * Returns a string representation of a SessionDescription object.\r\n */\r\nconst dumpSDP = function(description) {\r\n    if (typeof description === 'undefined' || description === null) {\r\n        return '';\r\n    }\r\n\r\n    return `type: ${description.type}\\r\\n${description.sdp}`;\r\n};\r\n\r\n\r\n/**\r\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\r\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\r\n * succeeded and is up and running. We never see \"completed\" state for\r\n * the JVB connection, but it started appearing for the P2P one. This method\r\n * allows to adapt old logic to this new situation.\r\n * @return {string}\r\n */\r\nTraceablePeerConnection.prototype.getConnectionState = function() {\r\n    const state = this.peerconnection.iceConnectionState;\r\n\r\n    if (state === 'completed') {\r\n        return 'connected';\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\n/**\r\n * Obtains the media direction for given {@link MediaType}. The method takes\r\n * into account whether or not there are any local tracks for media and\r\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\r\n * @param {MediaType} mediaType\r\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\r\n * etc.) which should be used when setting local description on the peer\r\n * connection.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype.getDesiredMediaDirection = function(mediaType, isAddOperation = false) {\r\n    const hasLocalSource = this.hasAnyTracksOfType(mediaType);\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        return isAddOperation\r\n            ? hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.SENDONLY\r\n            : hasLocalSource ? MediaDirection.RECVONLY : MediaDirection.INACTIVE;\r\n    }\r\n\r\n    const mediaTransferActive = mediaType === MediaType.AUDIO ? this.audioTransferActive : this.videoTransferActive;\r\n\r\n    if (mediaTransferActive) {\r\n        return hasLocalSource ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\r\n    }\r\n\r\n    return MediaDirection.INACTIVE;\r\n};\r\n\r\n/**\r\n * Tells whether or not this TPC instance is using Simulcast.\r\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\r\n * <tt>false</tt> if it's turned off.\r\n */\r\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\r\n    return !this.options.disableSimulcast;\r\n};\r\n\r\n/**\r\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\r\n * @param {string} endpointId the video owner's ID (MUC nickname)\r\n * @param {VideoType} videoType the new value\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\r\n        endpointId,\r\n        videoType) {\r\n    // Check if endpointId has a value to avoid action on random track\r\n    if (!endpointId) {\r\n        logger.error(`No endpointID on peerVideoTypeChanged ${this}`);\r\n\r\n        return;\r\n    }\r\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\r\n\r\n    if (videoTrack.length) {\r\n        // NOTE 1 track per media type is assumed\r\n        videoTrack[0]._setVideoType(videoType);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles remote track mute / unmute events.\r\n * @param {string} endpointId the track owner's identifier (MUC nickname)\r\n * @param {MediaType} mediaType \"audio\" or \"video\"\r\n * @param {boolean} isMuted the new mute state\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._peerMutedChanged = function(\r\n        endpointId,\r\n        mediaType,\r\n        isMuted) {\r\n    // Check if endpointId is a value to avoid doing action on all remote tracks\r\n    if (!endpointId) {\r\n        logger.error('On peerMuteChanged - no endpoint ID');\r\n\r\n        return;\r\n    }\r\n    const track = this.getRemoteTracks(endpointId, mediaType);\r\n\r\n    if (track.length) {\r\n        // NOTE 1 track per media type is assumed\r\n        track[0].setMute(isMuted);\r\n    }\r\n};\r\n\r\n/**\r\n * Obtains audio levels of the remote audio tracks by getting the source\r\n * information on the RTCRtpReceivers. The information relevant to the ssrc\r\n * is updated each time a RTP packet constaining the ssrc is received.\r\n * @returns {Object} containing ssrc and audio level information as a\r\n * key-value pair.\r\n */\r\nTraceablePeerConnection.prototype.getAudioLevels = function() {\r\n    const audioLevels = {};\r\n    const audioReceivers = this.peerconnection.getReceivers()\r\n        .filter(receiver => receiver.track && receiver.track.kind === MediaType.AUDIO);\r\n\r\n    audioReceivers.forEach(remote => {\r\n        const ssrc = remote.getSynchronizationSources();\r\n\r\n        if (ssrc && ssrc.length) {\r\n            // As per spec, this audiolevel is a value between 0..1 (linear), where 1.0\r\n            // represents 0 dBov, 0 represents silence, and 0.5 represents approximately\r\n            // 6 dBSPL change in the sound pressure level from 0 dBov.\r\n            // https://www.w3.org/TR/webrtc/#dom-rtcrtpcontributingsource-audiolevel\r\n            audioLevels[ssrc[0].source] = ssrc[0].audioLevel;\r\n        }\r\n    });\r\n\r\n    return audioLevels;\r\n};\r\n\r\n/**\r\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\r\n * argument is omitted the list of all local tracks will be returned.\r\n * @param {MediaType} [mediaType]\r\n * @return {Array<JitsiLocalTrack>}\r\n */\r\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\r\n    let tracks = Array.from(this.localTracks.values());\r\n\r\n    if (mediaType !== undefined) {\r\n        tracks = tracks.filter(track => track.getType() === mediaType);\r\n    }\r\n\r\n    return tracks;\r\n};\r\n\r\n/**\r\n * Retrieves the local video track.\r\n *\r\n * @returns {JitsiLocalTrack|undefined} - local video track.\r\n */\r\nTraceablePeerConnection.prototype.getLocalVideoTrack = function() {\r\n    return this.getLocalTracks(MediaType.VIDEO)[0];\r\n};\r\n\r\n/**\r\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\r\n * any local tracks for given <tt>mediaType</tt>.\r\n * @param {MediaType} mediaType\r\n * @return {boolean}\r\n */\r\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\r\n    if (!mediaType) {\r\n        throw new Error('\"mediaType\" is required');\r\n    }\r\n\r\n    return this.getLocalTracks(mediaType).length > 0;\r\n};\r\n\r\n/**\r\n * Obtains all remote tracks currently known to this PeerConnection instance.\r\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\r\n * @param {MediaType} [mediaType] the remote tracks will be filtered\r\n * by their media type if this argument is specified.\r\n * @return {Array<JitsiRemoteTrack>}\r\n */\r\nTraceablePeerConnection.prototype.getRemoteTracks = function(\r\n        endpointId,\r\n        mediaType) {\r\n    let remoteTracks = [];\r\n    const endpoints\r\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\r\n\r\n        for (const endpoint of endpoints) {\r\n            const endpointTracksByMediaType = this.remoteTracks.get(endpoint);\r\n    \r\n            if (endpointTracksByMediaType) {\r\n                for (const trackMediaType of endpointTracksByMediaType.keys()) {\r\n                    // per media type filtering\r\n                    if (!mediaType || mediaType === trackMediaType) {\r\n                        remoteTracks = remoteTracks.concat(Array.from(endpointTracksByMediaType.get(trackMediaType)));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    return remoteTracks;\r\n};\r\n\r\n/**\r\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\r\n * local and remote tracks bound to this instance.\r\n * @param {number} ssrc\r\n * @return {JitsiTrack|null}\r\n */\r\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\r\n    if (typeof ssrc !== 'number') {\r\n        throw new Error(`SSRC ${ssrc} is not a number`);\r\n    }\r\n    for (const localTrack of this.localTracks.values()) {\r\n        if (this.getLocalSSRC(localTrack) === ssrc) {\r\n            return localTrack;\r\n        }\r\n    }\r\n    for (const remoteTrack of this.getRemoteTracks()) {\r\n        if (remoteTrack.getSSRC() === ssrc) {\r\n            return remoteTrack;\r\n        }\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\r\n * both local and remote tracks bound to this instance.\r\n * @param {string} id\r\n * @return {number|null}\r\n */\r\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\r\n\r\n    const findTrackById = track => track.getTrack().id === id;\r\n    const localTrack = this.getLocalTracks().find(findTrackById);\r\n\r\n    if (localTrack) {\r\n        return this.getLocalSSRC(localTrack);\r\n    }\r\n\r\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\r\n\r\n    if (remoteTrack) {\r\n        return remoteTrack.getSSRC();\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Called when new remote MediaStream is added to the PeerConnection.\r\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\r\n */\r\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\r\n    const streamId = RTC.getStreamID(stream);\r\n\r\n    if (!RTC.isUserStreamById(streamId)) {\r\n        logger.info(\r\n            `${this} ignored remote 'stream added' event for non-user stream`\r\n             + `id: ${streamId}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Bind 'addtrack'/'removetrack' event handlers\r\n    if (browser.isChromiumBased()) {\r\n        stream.onaddtrack = event => {\r\n            this._remoteTrackAdded(stream, event.track);\r\n        };\r\n        stream.onremovetrack = event => {\r\n            this._remoteTrackRemoved(stream, event.track);\r\n        };\r\n    }\r\n\r\n    // Call remoteTrackAdded for each track in the stream\r\n    const streamAudioTracks = stream.getAudioTracks();\r\n\r\n    for (const audioTrack of streamAudioTracks) {\r\n        this._remoteTrackAdded(stream, audioTrack);\r\n    }\r\n    const streamVideoTracks = stream.getVideoTracks();\r\n\r\n    for (const videoTrack of streamVideoTracks) {\r\n        this._remoteTrackAdded(stream, videoTrack);\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\r\n * handle streams on per track basis). Finds the owner and the SSRC for\r\n * the track and passes that to ChatRoom for further processing.\r\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\r\n * the parent of the track\r\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\r\n * participant.\r\n * @param {RTCRtpTransceiver} transceiver the WebRTC transceiver that is created\r\n * for the remote participant in unified plan.\r\n */\r\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track, transceiver = null) {\r\n    const streamId = RTC.getStreamID(stream);\r\n    const mediaType = track.kind;\r\n\r\n    if (!this.isP2P && !RTC.isUserStreamById(streamId)) {\r\n        logger.info(\r\n            `${this} ignored remote 'stream added' event for non-user stream`\r\n             + `id: ${streamId}`);\r\n\r\n        return;\r\n    }\r\n    logger.info(`${this} remote track added:`, streamId, mediaType);\r\n\r\n    // look up an associated JID for a stream id\r\n    if (!mediaType) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `MediaType undefined for remote track, stream id: ${streamId}`\r\n            ));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    const remoteSDP = browser.usesPlanB()\r\n        ? new SDP(this.remoteDescription.sdp)\r\n        : new SDP(this.peerconnection.remoteDescription.sdp);\r\n    let mediaLines;\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        if (transceiver && transceiver.mid) {\r\n            const mid = transceiver.mid;\r\n\r\n            mediaLines = remoteSDP.media.filter(mls => SDPUtil.findLine(mls, `a=mid:${mid}`));\r\n        } else {\r\n            mediaLines = remoteSDP.media.filter(mls => {\r\n                const msid = SDPUtil.findLine(mls, 'a=msid');\r\n\r\n                return typeof msid !== 'undefined' && streamId === msid.substring(7).split(' ')[0];\r\n            });\r\n        }\r\n    } else {\r\n        mediaLines = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\r\n    }\r\n\r\n    if (!mediaLines.length) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No media lines for type ${\r\n                    mediaType} found in remote SDP for remote track: ${\r\n                    streamId}`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\r\n\r\n    ssrcLines\r\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\r\n    if (!ssrcLines.length) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No SSRC lines for streamId ${\r\n                    streamId} for remote track, media type: ${mediaType}`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\r\n    // with global error handler anyway\r\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\r\n    const trackSsrc = Number(ssrcStr);\r\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\r\n\r\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `Invalid SSRC: ${ssrcStr} for remote track, msid: ${\r\n                    streamId} media type: ${mediaType}`));\r\n\r\n        // Abort\r\n        return;\r\n    } else if (!ownerEndpointId) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(\r\n                `No SSRC owner known for: ${\r\n                    trackSsrc} for remote track, msid: ${\r\n                    streamId} media type: ${mediaType}`));\r\n\r\n        // Abort\r\n        return;\r\n    }\r\n\r\n    let sourceName;\r\n\r\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n        sourceName = this.signalingLayer.getTrackSourceName(trackSsrc);\r\n\r\n        // If source name was not signaled, we'll generate one which allows testing signaling\r\n        // when mixing legacy(mobile) with new clients.\r\n        if (!sourceName) {\r\n            sourceName = getSourceNameForJitsiTrack(ownerEndpointId, mediaType, 0);\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line no-undef\r\n    logger.info(`${this} creating remote track[endpoint=${ownerEndpointId},ssrc=${trackSsrc},`\r\n        + `type=${mediaType},sourceName=${sourceName}]`);\r\n\r\n    const peerMediaInfo = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType, sourceName);\r\n\r\n    if (!peerMediaInfo) {\r\n        GlobalOnErrorHandler.callErrorHandler(\r\n            new Error(`${this}: no peer media info available for ${ownerEndpointId}`));\r\n\r\n        return;\r\n    }\r\n\r\n    const muted = peerMediaInfo.muted;\r\n    const videoType = peerMediaInfo.videoType; // can be undefined\r\n\r\n    // eslint-disable-next-line no-undef\r\n    this._createRemoteTrack(\r\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted, sourceName);\r\n};\r\n\r\n// FIXME cleanup params\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Initializes a new JitsiRemoteTrack instance with the data provided by\r\n * the signaling layer and SDP.\r\n *\r\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\r\n * @param {MediaStream} stream the WebRTC stream instance\r\n * @param {MediaStreamTrack} track the WebRTC track instance\r\n * @param {MediaType} mediaType the track's type of the media\r\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\r\n * @param {number} ssrc the track's main SSRC number\r\n * @param {boolean} muted the initial muted status\r\n */\r\n TraceablePeerConnection.prototype._createRemoteTrack = function(\r\n        ownerEndpointId,\r\n        stream,\r\n        track,\r\n        mediaType,\r\n        videoType,\r\n        ssrc,\r\n        muted,\r\n        sourceName) {\r\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\r\n\r\n    if (!remoteTracksMap) {\r\n        remoteTracksMap = new Map();\r\n        remoteTracksMap.set(MediaType.AUDIO, new Set());\r\n        remoteTracksMap.set(MediaType.VIDEO, new Set());\r\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\r\n    }\r\n\r\n    const userTracksByMediaType = remoteTracksMap.get(mediaType);\r\n\r\n    if (userTracksByMediaType?.size\r\n        && Array.from(userTracksByMediaType).find(jitsiTrack => jitsiTrack.getTrack() === track)) {\r\n        // Ignore duplicated event which can originate either from 'onStreamAdded' or 'onTrackAdded'.\r\n        logger.info(`${this} ignored duplicated track event for track[endpoint=${ownerEndpointId},type=${mediaType}]`);\r\n\r\n        return;\r\n    } else if (userTracksByMediaType?.size && !FeatureFlags.isSourceNameSignalingEnabled()) {\r\n        logger.error(`${this} received a second remote track for track[endpoint=${ownerEndpointId},type=${mediaType}]`\r\n            + 'deleting the existing track');\r\n        const existingTrack = Array.from(userTracksByMediaType)[0];\r\n\r\n        // The exisiting track needs to be removed here. This happens on Safari sometimes when a SSRC is removed from\r\n        // the remote description and the browser doesn't fire a 'removetrack' event on the associated MediaStream.\r\n        this._remoteTrackRemoved(existingTrack.getOriginalStream(), existingTrack.getTrack());\r\n    }\r\n\r\n    const remoteTrack\r\n        = new JitsiRemoteTrack(\r\n                this.rtc,\r\n                this.rtc.conference,\r\n                ownerEndpointId,\r\n                stream,\r\n                track,\r\n                mediaType,\r\n                videoType,\r\n                ssrc,\r\n                muted,\r\n                this.isP2P,\r\n                sourceName);\r\n\r\n    userTracksByMediaType.add(remoteTrack);\r\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack, this);\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\n/**\r\n * Handles remote stream removal.\r\n * @param stream the WebRTC MediaStream object which is being removed from the\r\n * PeerConnection\r\n */\r\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\r\n    if (!RTC.isUserStream(stream)) {\r\n        const id = RTC.getStreamID(stream);\r\n\r\n        logger.info(\r\n            `Ignored remote 'stream removed' event for non-user stream ${id}`);\r\n\r\n        return;\r\n    }\r\n\r\n    // Call remoteTrackRemoved for each track in the stream\r\n    const streamVideoTracks = stream.getVideoTracks();\r\n\r\n    for (const videoTrack of streamVideoTracks) {\r\n        this._remoteTrackRemoved(stream, videoTrack);\r\n    }\r\n    const streamAudioTracks = stream.getAudioTracks();\r\n\r\n    for (const audioTrack of streamAudioTracks) {\r\n        this._remoteTrackRemoved(stream, audioTrack);\r\n    }\r\n};\r\n\r\n/**\r\n * Handles remote media track removal.\r\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\r\n * of the track.\r\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\r\n * removed from the PeerConnection.\r\n */\r\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\r\n        stream,\r\n        track) {\r\n    const streamId = RTC.getStreamID(stream);\r\n    const trackId = track && RTC.getTrackID(track);\r\n\r\n    if (!RTC.isUserStreamById(streamId)) {\r\n        logger.info(`${this} ignored remote 'stream removed' event for non-user stream[id=${streamId}]`);\r\n\r\n        return;\r\n    }\r\n\r\n    if (!streamId) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no stream ID`));\r\n\r\n        return;\r\n    }\r\n\r\n    if (!trackId) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - no track ID`));\r\n\r\n        return;\r\n    }\r\n\r\n    const toBeRemoved = this.getRemoteTracks().find(\r\n        remoteTrack => remoteTrack.getStreamId() === streamId\r\n        && remoteTrack.getTrackId() === trackId);\r\n\r\n    if (!toBeRemoved) {\r\n        GlobalOnErrorHandler.callErrorHandler(new Error(`${this} remote track removal failed - track not found`));\r\n\r\n        return;\r\n    }\r\n\r\n    logger.info(`${this} remote track removed stream[id=${streamId},trackId=${trackId}]`);\r\n    this._removeRemoteTrack(toBeRemoved);\r\n};\r\n\r\n/**\r\n * Finds remote track by it's stream and track ids.\r\n * @param {string} streamId the media stream id as defined by the WebRTC\r\n * @param {string} trackId the media track id as defined by the WebRTC\r\n * @return {JitsiRemoteTrack|undefined} the track's instance or\r\n * <tt>undefined</tt> if not found.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\r\n        streamId,\r\n        trackId) {\r\n    // .find will break the loop once the first match is found\r\n    for (const endpointTrackMap of this.remoteTracks.values()) {\r\n        for (const mediaTrack of endpointTrackMap.values()) {\r\n            // FIXME verify and try to use ===\r\n            /* eslint-disable eqeqeq */\r\n            if (mediaTrack.getStreamId() == streamId\r\n                && mediaTrack.getTrackId() == trackId) {\r\n                return mediaTrack;\r\n            }\r\n\r\n            /* eslint-enable eqeqeq */\r\n        }\r\n    }\r\n\r\n    return undefined;\r\n};\r\n\r\n/**\r\n * Removes all JitsiRemoteTracks associated with given MUC nickname\r\n * (resource part of the JID). Returns array of removed tracks.\r\n *\r\n * @param {string} owner - The resource part of the MUC JID.\r\n * @returns {JitsiRemoteTrack[]}\r\n */\r\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\r\n    const removedTracks = [];\r\n    const remoteTracksMap = this.remoteTracks.get(owner);\r\n\r\n    if (remoteTracksMap) {\r\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\r\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\r\n\r\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\r\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\r\n\r\n        this.remoteTracks.delete(owner);\r\n    }\r\n\r\n    logger.debug(\r\n        `${this} removed remote tracks for ${owner} count: ${\r\n            removedTracks.length}`);\r\n\r\n    return removedTracks;\r\n};\r\n\r\n/**\r\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\r\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\r\n * @param {JitsiRemoteTrack} toBeRemoved\r\n */\r\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\r\n    toBeRemoved.dispose && toBeRemoved.dispose();\r\n    const participantId = toBeRemoved.getParticipantId();\r\n    const remoteTracksMap = this.remoteTracks.get(participantId);\r\n\r\n    if (!remoteTracksMap) {\r\n        logger.error(\r\n            `removeRemoteTrack: no remote tracks map for ${participantId}`);\r\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\r\n        logger.error(\r\n            `Failed to remove ${toBeRemoved} - type mapping messed up ?`);\r\n    }\r\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\r\n};\r\n\r\n/**\r\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\r\n * track ids.\r\n *\r\n * @param {string} streamId the media stream id as defined by the WebRTC\r\n * @param {string} trackId the media track id as defined by the WebRTC\r\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\r\n * <tt>undefined</tt> if no track matching given stream and track ids was\r\n * found.\r\n */\r\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\r\n        streamId,\r\n        trackId) {\r\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\r\n\r\n    if (toBeRemoved) {\r\n        this._removeRemoteTrack(toBeRemoved);\r\n    }\r\n\r\n    return toBeRemoved;\r\n};\r\n\r\n/**\r\n * @typedef {Object} SSRCGroupInfo\r\n * @property {Array<number>} ssrcs group's SSRCs\r\n * @property {string} semantics\r\n */\r\n/**\r\n * @typedef {Object} TrackSSRCInfo\r\n * @property {Array<number>} ssrcs track's SSRCs\r\n * @property {Array<SSRCGroupInfo>} groups track's SSRC groups\r\n */\r\n/**\r\n * Returns map with keys msid and <tt>TrackSSRCInfo</tt> values.\r\n * @param {Object} desc the WebRTC SDP instance.\r\n * @return {Map<string,TrackSSRCInfo>}\r\n */\r\nfunction extractSSRCMap(desc) {\r\n    /**\r\n     * Track SSRC infos mapped by stream ID (msid)\r\n     * @type {Map<string,TrackSSRCInfo>}\r\n     */\r\n    const ssrcMap = new Map();\r\n\r\n    /**\r\n     * Groups mapped by primary SSRC number\r\n     * @type {Map<number,Array<SSRCGroupInfo>>}\r\n     */\r\n    const groupsMap = new Map();\r\n\r\n    if (typeof desc !== 'object' || desc === null\r\n        || typeof desc.sdp !== 'string') {\r\n        logger.warn('An empty description was passed as an argument.');\r\n\r\n        return ssrcMap;\r\n    }\r\n\r\n    const session = transform.parse(desc.sdp);\r\n\r\n    if (!Array.isArray(session.media)) {\r\n        return ssrcMap;\r\n    }\r\n\r\n    let media = session.media;\r\n\r\n    // For unified plan clients, only the first audio and video mlines will have ssrcs for the local sources.\r\n    // The rest of the m-lines are for the recv-only sources, one for each remote source.\r\n    if (browser.usesUnifiedPlan()) {\r\n        media = [];\r\n        [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\r\n            const mLine = session.media.find(m => m.type === mediaType);\r\n\r\n            mLine && media.push(mLine);\r\n        });\r\n    }\r\n\r\n    for (const mLine of media) {\r\n        if (!Array.isArray(mLine.ssrcs)) {\r\n            continue; // eslint-disable-line no-continue\r\n        }\r\n\r\n        if (Array.isArray(mLine.ssrcGroups)) {\r\n            for (const group of mLine.ssrcGroups) {\r\n                if (typeof group.semantics !== 'undefined'\r\n                    && typeof group.ssrcs !== 'undefined') {\r\n                    // Parse SSRCs and store as numbers\r\n                    const groupSSRCs\r\n                        = group.ssrcs.split(' ').map(\r\n                            ssrcStr => parseInt(ssrcStr, 10));\r\n                    const primarySSRC = groupSSRCs[0];\r\n\r\n                    // Note that group.semantics is already present\r\n\r\n                    group.ssrcs = groupSSRCs;\r\n\r\n                    // eslint-disable-next-line max-depth\r\n                    if (!groupsMap.has(primarySSRC)) {\r\n                        groupsMap.set(primarySSRC, []);\r\n                    }\r\n                    groupsMap.get(primarySSRC).push(group);\r\n                }\r\n            }\r\n        }\r\n\r\n        let ssrcs = mLine.ssrcs;\r\n\r\n        // Filter the ssrcs with 'msid' attribute for plan-b clients and 'cname' for unified-plan clients.\r\n        ssrcs = browser.usesUnifiedPlan()\r\n            ? ssrcs.filter(s => s.attribute === 'cname')\r\n            : ssrcs.filter(s => s.attribute === 'msid');\r\n\r\n        for (const ssrc of ssrcs) {\r\n            // Use the mediaType as key for the source map for unified plan clients since msids are not part of\r\n            // the standard and the unified plan SDPs do not have a proper msid attribute for the sources.\r\n            // Also the ssrcs for sources do not change for Unified plan clients since RTCRtpSender#replaceTrack is\r\n            // used for switching the tracks so it is safe to use the mediaType as the key for the TrackSSRCInfo map.\r\n            const key = browser.usesUnifiedPlan() ? mLine.type : ssrc.value;\r\n            const ssrcNumber = ssrc.id;\r\n            let ssrcInfo = ssrcMap.get(key);\r\n\r\n            if (!ssrcInfo) {\r\n                ssrcInfo = {\r\n                    ssrcs: [],\r\n                    groups: [],\r\n                    msid: key\r\n                };\r\n                ssrcMap.set(key, ssrcInfo);\r\n            }\r\n            ssrcInfo.ssrcs.push(ssrcNumber);\r\n\r\n            if (groupsMap.has(ssrcNumber)) {\r\n                const ssrcGroups = groupsMap.get(ssrcNumber);\r\n\r\n                for (const group of ssrcGroups) {\r\n                    ssrcInfo.groups.push(group);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return ssrcMap;\r\n}\r\n\r\n/**\r\n * Takes a SessionDescription object and returns a \"normalized\" version.\r\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\r\n * only SSRCs.\r\n */\r\nconst normalizePlanB = function(desc) {\r\n    if (typeof desc !== 'object' || desc === null\r\n        || typeof desc.sdp !== 'string') {\r\n        logger.warn('An empty description was passed as an argument.');\r\n\r\n        return desc;\r\n    }\r\n\r\n    // eslint-disable-next-line no-shadow\r\n    const transform = require('sdp-transform');\r\n    const session = transform.parse(desc.sdp);\r\n\r\n    if (typeof session !== 'undefined'\r\n            && typeof session.media !== 'undefined'\r\n            && Array.isArray(session.media)) {\r\n        session.media.forEach(mLine => {\r\n\r\n            // Chrome appears to be picky about the order in which a=ssrc lines\r\n            // are listed in an m-line when rtx is enabled (and thus there are\r\n            // a=ssrc-group lines with FID semantics). Specifically if we have\r\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\r\n            // the \"a=ssrc:S1\" lines, SRD fails.\r\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\r\n            // first.\r\n            const firstSsrcs = [];\r\n            const newSsrcLines = [];\r\n\r\n            if (typeof mLine.ssrcGroups !== 'undefined'\r\n                && Array.isArray(mLine.ssrcGroups)) {\r\n                mLine.ssrcGroups.forEach(group => {\r\n                    if (typeof group.semantics !== 'undefined'\r\n                        && group.semantics === 'FID') {\r\n                        if (typeof group.ssrcs !== 'undefined') {\r\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (Array.isArray(mLine.ssrcs)) {\r\n                let i;\r\n\r\n                for (i = 0; i < mLine.ssrcs.length; i++) {\r\n                    if (typeof mLine.ssrcs[i] === 'object'\r\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\r\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\r\n                        newSsrcLines.push(mLine.ssrcs[i]);\r\n                        delete mLine.ssrcs[i];\r\n                    }\r\n                }\r\n\r\n                for (i = 0; i < mLine.ssrcs.length; i++) {\r\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\r\n                        newSsrcLines.push(mLine.ssrcs[i]);\r\n                    }\r\n                }\r\n\r\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\r\n            }\r\n        });\r\n    }\r\n\r\n    const resStr = transform.write(session);\r\n\r\n\r\n    return new RTCSessionDescription({\r\n        type: desc.type,\r\n        sdp: resStr\r\n    });\r\n};\r\n\r\n/**\r\n * Unified plan differentiates a remote track not associated with a stream using\r\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\r\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\r\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\r\n * line. Normally the ssrcs are not used by the client, as the bridge controls\r\n * media flow, but keep one reference to the ssrc for the p2p case.\r\n *\r\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\r\n * @private\r\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\r\n */\r\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\r\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\r\n        return ssrcLines;\r\n    }\r\n\r\n    let filteredLines = [ ...ssrcLines ];\r\n\r\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\r\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\r\n        .map(ssrcLine => ssrcLine.id);\r\n\r\n    problematicSsrcIds.forEach(ssrcId => {\r\n        // Find the cname which is to be modified and left in.\r\n        const cnameLine = filteredLines.find(line =>\r\n            line.id === ssrcId && line.attribute === 'cname');\r\n\r\n        cnameLine.value = `recvonly-${ssrcId}`;\r\n\r\n        // Remove all of lines for the ssrc.\r\n        filteredLines\r\n            = filteredLines.filter(line => line.id !== ssrcId);\r\n\r\n        // But re-add the cname line so there is a reference kept to the ssrc\r\n        // in the SDP.\r\n        filteredLines.push(cnameLine);\r\n    });\r\n\r\n    return filteredLines;\r\n}\r\n\r\n/**\r\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\r\n * @param {Object} localDescription the SDP object as defined by WebRTC.\r\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\r\n */\r\nconst enforceSendRecv = function(localDescription, options) {\r\n    if (!localDescription) {\r\n        throw new Error('No local description passed in.');\r\n    }\r\n\r\n    const transformer = new SdpTransformWrap(localDescription.sdp);\r\n    const audioMedia = transformer.selectMedia('audio');\r\n    let changed = false;\r\n\r\n    if (audioMedia && audioMedia.direction !== 'sendrecv') {\r\n        if (options.startSilent) {\r\n            audioMedia.direction = 'inactive';\r\n        } else {\r\n            audioMedia.direction = 'sendrecv';\r\n        }\r\n\r\n        changed = true;\r\n    }\r\n\r\n    const videoMedia = transformer.selectMedia('video');\r\n\r\n    if (videoMedia && videoMedia.direction !== 'sendrecv') {\r\n        videoMedia.direction = 'sendrecv';\r\n        changed = true;\r\n    }\r\n\r\n    if (changed) {\r\n        return new RTCSessionDescription({\r\n            type: localDescription.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n\r\n    return localDescription;\r\n};\r\n\r\n/**\r\n *\r\n * @param {JitsiLocalTrack} localTrack\r\n */\r\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\r\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\r\n\r\n    return ssrcInfo && ssrcInfo.ssrcs[0];\r\n};\r\n\r\n/**\r\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\r\n * same msid but no ssrc-group, since unified plan signals the simulcast\r\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\r\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\r\n * an ssrc-group line to make Jicofo happy.\r\n * @param desc A session description object (with 'type' and 'sdp' fields)\r\n * @return A session description object with its sdp field modified to\r\n * contain an inject ssrc-group for simulcast\r\n */\r\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\r\n    = function(desc) {\r\n        const sdp = transform.parse(desc.sdp);\r\n        const video = sdp.media.find(mline => mline.type === 'video');\r\n\r\n        // Check if the browser supports RTX, add only the primary ssrcs to the\r\n        // SIM group if that is the case.\r\n        video.ssrcGroups = video.ssrcGroups || [];\r\n        const fidGroups = video.ssrcGroups.filter(group => group.semantics === 'FID');\r\n\r\n        if (video.simulcast || video.simulcast_03) {\r\n            const ssrcs = [];\r\n\r\n            if (fidGroups && fidGroups.length) {\r\n                fidGroups.forEach(group => {\r\n                    ssrcs.push(group.ssrcs.split(' ')[0]);\r\n                });\r\n            } else {\r\n                video.ssrcs.forEach(ssrc => {\r\n                    if (ssrc.attribute === 'msid') {\r\n                        ssrcs.push(ssrc.id);\r\n                    }\r\n                });\r\n            }\r\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\r\n                // Group already exists, no need to do anything\r\n                return desc;\r\n            }\r\n            video.ssrcGroups.push({\r\n                semantics: 'SIM',\r\n                ssrcs: ssrcs.join(' ')\r\n            });\r\n        }\r\n\r\n        return new RTCSessionDescription({\r\n            type: desc.type,\r\n            sdp: transform.write(sdp)\r\n        });\r\n    };\r\n\r\n/* eslint-disable-next-line vars-on-top */\r\nconst getters = {\r\n    signalingState() {\r\n        return this.peerconnection.signalingState;\r\n    },\r\n    iceConnectionState() {\r\n        return this.peerconnection.iceConnectionState;\r\n    },\r\n    connectionState() {\r\n        return this.peerconnection.connectionState;\r\n    },\r\n    localDescription() {\r\n        let desc = this.peerconnection.localDescription;\r\n\r\n        if (!desc) {\r\n            logger.debug('getLocalDescription no localDescription found');\r\n\r\n            return {};\r\n        }\r\n\r\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\r\n\r\n        // if we're running on FF, transform to Plan B first.\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n        if (browser.usesUnifiedPlan() && !this.isP2P) {\r\n            desc = this.interop.toPlanB(desc);\r\n            this.trace('getLocalDescription::postTransform (Plan B)',\r\n                dumpSDP(desc));\r\n\r\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\r\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\r\n                dumpSDP(desc));\r\n        } else if (!browser.usesUnifiedPlan()) {\r\n            if (browser.doesVideoMuteByStreamRemove()) {\r\n                desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\r\n                logger.debug(\r\n                    'getLocalDescription::postTransform (munge local SDP)', desc);\r\n            }\r\n\r\n            // What comes out of this getter will be signalled over Jingle to\r\n            // the other peer, so we need to make sure the media direction is\r\n            // 'sendrecv' because we won't change the direction later and don't want\r\n            // the other peer to think we can't send or receive.\r\n            //\r\n            // Note that the description we set in chrome does have the accurate\r\n            // direction (e.g. 'recvonly'), since that is technically what is\r\n            // happening (check setLocalDescription impl).\r\n            desc = enforceSendRecv(desc, this.options);\r\n        }\r\n\r\n        // See the method's doc for more info about this transformation.\r\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\r\n\r\n        return desc;\r\n    },\r\n    remoteDescription() {\r\n        let desc = this.peerconnection.remoteDescription;\r\n\r\n        if (!desc) {\r\n            logger.debug('getRemoteDescription no remoteDescription found');\r\n\r\n            return {};\r\n        }\r\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\r\n\r\n        // if we're running on FF, transform to Plan B first.\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n        if (browser.usesUnifiedPlan()) {\r\n            if (this.isP2P) {\r\n                desc = this._adjustRemoteMediaDirection(desc);\r\n            } else {\r\n                desc = this.interop.toPlanB(desc);\r\n                this.trace(\r\n                    'getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\r\n            }\r\n        }\r\n\r\n        return desc;\r\n    }\r\n};\r\n\r\nObject.keys(getters).forEach(prop => {\r\n    Object.defineProperty(\r\n        TraceablePeerConnection.prototype,\r\n        prop, {\r\n            get: getters[prop]\r\n        }\r\n    );\r\n});\r\n\r\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\r\n    return this.localSSRCs.get(rtcId);\r\n};\r\n\r\n/**\r\n * Munges the order of the codecs in the SDP passed based on the preference\r\n * set through config.js settings. All instances of the specified codec are\r\n * moved up to the top of the list when it is preferred. The specified codec\r\n * is deleted from the list if the configuration specifies that the codec be\r\n * disabled.\r\n * @param {RTCSessionDescription} description that needs to be munged.\r\n * @returns {RTCSessionDescription} the munged description.\r\n */\r\nTraceablePeerConnection.prototype._mungeCodecOrder = function(description) {\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    // if (!this.codecPreference || browser.supportsCodecPreferences()) {\r\n    //     return description;\r\n    // }\r\n\r\n    // const parsedSdp = transform.parse(description.sdp);\r\n    // const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\r\n\r\n    // if (this.codecPreference.enable) {\r\n    //     SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\r\n\r\n    //     // Strip the high profile H264 codecs on mobile clients for p2p connection.\r\n    //     // High profile codecs give better quality at the expense of higher load which\r\n    //     // we do not want on mobile clients.\r\n    //     // Jicofo offers only the baseline code for the jvb connection.\r\n    //     // TODO - add check for mobile browsers once js-utils provides that check.\r\n    //     if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\r\n    //         SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\r\n    //     }\r\n    // } else {\r\n    //     SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\r\n    // }\r\n\r\n    // return new RTCSessionDescription({\r\n    //     type: description.type,\r\n    //     sdp: transform.write(parsedSdp)\r\n    // });\r\n\r\n    if (!this.codecPreference) {\r\n        return description;\r\n    }\r\n\r\n    const parsedSdp = transform.parse(description.sdp);\r\n\r\n    // Only the m-line that defines the source the browser will be sending should need to change.\r\n    // This is typically the first m-line with the matching media type.\r\n    const mLine = parsedSdp.media.find(m => m.type === this.codecPreference.mediaType);\r\n\r\n    if (!mLine) {\r\n        return description;\r\n    }\r\n\r\n    if (this.codecPreference.enable) {\r\n        SDPUtil.preferCodec(mLine, this.codecPreference.mimeType);\r\n\r\n        // Strip the high profile H264 codecs on mobile clients for p2p connection.\r\n        // High profile codecs give better quality at the expense of higher load which\r\n        // we do not want on mobile clients.\r\n        // Jicofo offers only the baseline code for the jvb connection.\r\n        // TODO - add check for mobile browsers once js-utils provides that check.\r\n        if (this.codecPreference.mimeType === CodecMimeType.H264 && browser.isReactNative() && this.isP2P) {\r\n            SDPUtil.stripCodec(mLine, this.codecPreference.mimeType, true /* high profile */);\r\n        }\r\n\r\n        // Set the max bitrate here on the SDP so that the configured max. bitrate is effective\r\n        // as soon as the browser switches to VP9.\r\n        if (this.codecPreference.mimeType === CodecMimeType.VP9\r\n            && this.getConfiguredVideoCodec() === CodecMimeType.VP9) {\r\n            const bitrates = this.tpcUtils.videoBitrates.VP9 || this.tpcUtils.videoBitrates;\r\n            const hdBitrate = bitrates.high ? bitrates.high : HD_BITRATE;\r\n            const limit = Math.floor((this._isSharingScreen() ? HD_BITRATE : hdBitrate) / 1000);\r\n\r\n            // Use only the HD bitrate for now as there is no API available yet for configuring\r\n            // the bitrates on the individual SVC layers.\r\n            mLine.bandwidth = [ {\r\n                type: 'AS',\r\n                limit\r\n            } ];\r\n        } else {\r\n            // Clear the bandwidth limit in SDP when VP9 is no longer the preferred codec.\r\n            // This is needed on react native clients as react-native-webrtc returns the\r\n            // SDP that the application passed instead of returning the SDP off the native side.\r\n            // This line automatically gets cleared on web on every renegotiation.\r\n            mLine.bandwidth = undefined;\r\n        }\r\n    } else {\r\n        SDPUtil.stripCodec(mLine, this.codecPreference.mimeType);\r\n    }\r\n\r\n    return new RTCSessionDescription({\r\n        type: description.type,\r\n        sdp: transform.write(parsedSdp)\r\n    });\r\n};\r\n\r\n/**\r\n * Checks if given track belongs to this peerconnection instance.\r\n *\r\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track - The track to be checked.\r\n * @returns {boolean}\r\n */\r\nTraceablePeerConnection.prototype.containsTrack = function(track) {\r\n    if (track.isLocal()) {\r\n        return this.localTracks.has(track.rtcId);\r\n    }\r\n\r\n    const participantId = track.getParticipantId();\r\n    const remoteTracksMap = this.remoteTracks.get(participantId);\r\n\r\n    return Boolean(remoteTracksMap && remoteTracksMap.get(track.getType()) === track);\r\n};\r\n\r\n/**\r\n * Add {@link JitsiLocalTrack} to this TPC.\r\n * @param {JitsiLocalTrack} track\r\n * @param {boolean} isInitiator indicates if the endpoint is the offerer.\r\n * @returns {Promise<void>} - resolved when done.\r\n */\r\nTraceablePeerConnection.prototype.addTrack = function(track, isInitiator = false) {\r\n    const rtcId = track.rtcId;\r\n\r\n    logger.info(`add ${track} to: ${this}`);\r\n\r\n    if (this.localTracks.has(rtcId)) {\r\n\r\n        return Promise.reject(new Error(`${track} is already in ${this}`));\r\n    }\r\n\r\n    this.localTracks.set(rtcId, track);\r\n    const webrtcStream = track.getOriginalStream();\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        logger.debug(`${this} TPC.addTrack using unified plan`);\r\n        try {\r\n            this.tpcUtils.addTrack(track, isInitiator);\r\n        } catch (error) {\r\n            logger.error(`${this} Adding track=${track} failed: ${error?.message}`);\r\n\r\n            return Promise.reject(error);\r\n        }\r\n    } else {\r\n        // Use addStream API for the plan-b case.\r\n        if (webrtcStream) {\r\n            this._addStream(webrtcStream);\r\n\r\n        // It's not ok for a track to not have a WebRTC stream if:\r\n        } else if (!browser.doesVideoMuteByStreamRemove()\r\n                    || track.isAudioTrack()\r\n                    || (track.isVideoTrack() && !track.isMuted())) {\r\n            return Promise.reject(new Error(`${this} no WebRTC stream for: ${track}`));\r\n        }\r\n\r\n        // Muted video tracks do not have WebRTC stream\r\n        if (browser.doesVideoMuteByStreamRemove() && track.isVideoTrack() && track.isMuted()) {\r\n            const ssrcInfo = this.generateNewStreamSSRCInfo(track);\r\n\r\n            this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\r\n            const simGroup\r\n                = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\r\n\r\n            if (simGroup) {\r\n                this.simulcast.setSsrcCache(simGroup.ssrcs);\r\n            }\r\n            const fidGroups\r\n                = ssrcInfo.groups.filter(\r\n                    groupInfo => groupInfo.semantics === 'FID');\r\n\r\n            if (fidGroups) {\r\n                const rtxSsrcMapping = new Map();\r\n\r\n                fidGroups.forEach(fidGroup => {\r\n                    const primarySsrc = fidGroup.ssrcs[0];\r\n                    const rtxSsrc = fidGroup.ssrcs[1];\r\n\r\n                    rtxSsrcMapping.set(primarySsrc, rtxSsrc);\r\n                });\r\n                this.rtxModifier.setSsrcCache(rtxSsrcMapping);\r\n            }\r\n        }\r\n    }\r\n\r\n    let promiseChain = Promise.resolve();\r\n\r\n    // On Firefox, the encodings have to be configured on the sender only after the transceiver is created.\r\n    if (browser.isFirefox()) {\r\n        promiseChain = promiseChain.then(() => webrtcStream && this.tpcUtils.setEncodings(track));\r\n    }\r\n\r\n    return promiseChain;\r\n};\r\n\r\n/**\r\n * Adds local track as part of the unmute operation.\r\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\r\n * operation\r\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\r\n * state has changed and renegotiation is required, false if no renegotiation is needed or\r\n * Promise is rejected when something goes wrong.\r\n */\r\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\r\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\r\n        // Abort\r\n        return Promise.reject('Track not found on the peerconnection');\r\n    }\r\n\r\n    logger.info(`Adding ${track} as unmute to ${this}`);\r\n    const webRtcStream = track.getOriginalStream();\r\n\r\n    if (!webRtcStream) {\r\n        logger.error(\r\n            `Unable to add ${track} as unmute to ${this} - no WebRTC stream`);\r\n\r\n        return Promise.reject('Stream not found');\r\n    }\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        return this.tpcUtils.replaceTrack(null, track).then(() => false);\r\n    }\r\n\r\n    this._addStream(webRtcStream);\r\n\r\n    return Promise.resolve(true);\r\n};\r\n\r\n/**\r\n * Adds WebRTC media stream to the underlying PeerConnection\r\n * @param {MediaStream} mediaStream\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\r\n    this.peerconnection.addStream(mediaStream);\r\n    this._addedStreams.push(mediaStream);\r\n};\r\n\r\n/**\r\n * Removes WebRTC media stream from the underlying PeerConection\r\n * @param {MediaStream} mediaStream\r\n */\r\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\r\n    this.peerconnection.removeStream(mediaStream);\r\n    this._addedStreams\r\n        = this._addedStreams.filter(stream => stream !== mediaStream);\r\n};\r\n\r\n/**\r\n * This method when called will check if given <tt>localTrack</tt> belongs to\r\n * this TPC (that it has been previously added using {@link addTrack}). If the\r\n * track does not belong an error message will be logged.\r\n * @param {string} methodName the method name that will be logged in an error\r\n * message\r\n * @param {JitsiLocalTrack} localTrack\r\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\r\n * <tt>false</tt> otherwise.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\r\n        methodName,\r\n        localTrack) {\r\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\r\n\r\n    if (!doesBelong) {\r\n        logger.error(\r\n            `${methodName}: ${localTrack} does not belong to ${this}`);\r\n    }\r\n\r\n    return doesBelong;\r\n};\r\n\r\n/**\r\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\r\n * the underlying WebRTC PeerConnection.\r\n * @param {MediaStream} mediaStream\r\n * @returns {boolean}\r\n */\r\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\r\n    return this._addedStreams.indexOf(mediaStream) > -1;\r\n};\r\n\r\n/**\r\n * Remove local track from this TPC.\r\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\r\n *\r\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\r\n *       The same applies to addTrack.\r\n */\r\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\r\n    const webRtcStream = localTrack.getOriginalStream();\r\n\r\n    this.trace(\r\n        'removeStream',\r\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\r\n\r\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\r\n        // Abort - nothing to be done here\r\n        return;\r\n    }\r\n    this.localTracks.delete(localTrack.rtcId);\r\n    this.localSSRCs.delete(localTrack.rtcId);\r\n\r\n    if (webRtcStream) {\r\n        this.peerconnection.removeStream(webRtcStream);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns the sender corresponding to the given media type.\r\n * @param {MEDIA_TYPE} mediaType - The media type 'audio' or 'video' to be used for the search.\r\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findSenderByKind = function(mediaType) {\r\n    return this.peerconnection.getSenders().find(s => s.track && s.track.kind === mediaType);\r\n};\r\n\r\n/**\r\n * Returns the receiver corresponding to the given MediaStreamTrack.\r\n *\r\n * @param {MediaSreamTrack} track - The media stream track used for the search.\r\n * @returns {RTCRtpReceiver|undefined} - The found receiver or undefined if no receiver\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findReceiverForTrack = function(track) {\r\n    return this.peerconnection.getReceivers().find(r => r.track === track);\r\n};\r\n\r\n/**\r\n * Returns the sender corresponding to the given MediaStreamTrack.\r\n *\r\n * @param {MediaSreamTrack} track - The media stream track used for the search.\r\n * @returns {RTCRtpSender|undefined} - The found sender or undefined if no sender\r\n * was found.\r\n */\r\nTraceablePeerConnection.prototype.findSenderForTrack = function(track) {\r\n    return this.peerconnection.getSenders().find(s => s.track === track);\r\n};\r\n\r\n/**\r\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\r\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\r\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\r\n * <tt>oldTrack</tt>\r\n *\r\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\r\n * replaced\r\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\r\n * @returns {Promise<boolean>} - If the promise resolves with true,\r\n * renegotiation will be needed. Otherwise no renegotiation is needed.\r\n */\r\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    // if (browser.usesUnifiedPlan()) {\r\n    //     return this.tpcUtils.replaceTrack(oldTrack, newTrack)\r\n\r\n    //         // renegotiate when SDP is used for simulcast munging\r\n    //         .then(() => this.isSimulcastOn() && browser.usesSdpMungingForSimulcast());\r\n    // }\r\n\r\n    // let promiseChain = Promise.resolve();\r\n\r\n    // if (oldTrack) {\r\n    //     this.removeTrack(oldTrack);\r\n    // }\r\n    // if (newTrack) {\r\n    //     promiseChain = this.addTrack(newTrack);\r\n    // }\r\n\r\n    // return promiseChain.then(() => true);\r\n\r\n    if (!(oldTrack || newTrack)) {\r\n        logger.info(`${this} replaceTrack called with no new track and no old track`);\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // If a track is being added to the peerconnection for the first time, we want the source signaling to be sent to\r\n    // Jicofo before the mute state is sent over presence. Therefore, trigger a renegotiation in this case. If we\r\n    // rely on \"negotiationneeded\" fired by the browser to signal new ssrcs, the mute state in presence will be sent\r\n    // before the source signaling which is undesirable.\r\n    // Send the presence before signaling for a new screenshare source. This is needed for multi-stream support since\r\n    // videoType needs to be availble at remote track creation time so that a fake tile for screenshare can be added.\r\n    // FIXME - This check needs to be removed when the client switches to the bridge based signaling for tracks.\r\n    const isNewTrackScreenshare = !oldTrack\r\n        && newTrack?.getVideoType() === VideoType.DESKTOP\r\n        && FeatureFlags.isMultiStreamSupportEnabled();\r\n    const negotiationNeeded = !isNewTrackScreenshare && Boolean(!oldTrack || !this.localTracks.has(oldTrack?.rtcId));\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        logger.debug(`${this} TPC.replaceTrack using unified plan`);\r\n        const mediaType = newTrack?.getType() ? newTrack?.getType() : oldTrack?.getType();\r\n        const stream = newTrack?.getOriginalStream();\r\n        const promise = newTrack && !stream\r\n\r\n            // Ignore cases when the track is replaced while the device is in a muted state.\r\n            // The track will be replaced again on the peerconnection when the user unmutes.\r\n            ? Promise.resolve()\r\n            : this.tpcUtils.replaceTrack(oldTrack, newTrack);\r\n\r\n        return promise\r\n            .then(transceiver => {\r\n                oldTrack && this.localTracks.delete(oldTrack.rtcId);\r\n                newTrack && this.localTracks.set(newTrack.rtcId, newTrack);\r\n\r\n                // Update the local SSRC cache for the case when one track gets replaced with another and no\r\n                // renegotiation is triggered as a result of this.\r\n                if (oldTrack && newTrack) {\r\n                    const oldTrackSSRC = this.localSSRCs.get(oldTrack.rtcId);\r\n\r\n                    if (oldTrackSSRC) {\r\n                        this.localSSRCs.delete(oldTrack.rtcId);\r\n                        this.localSSRCs.set(newTrack.rtcId, oldTrackSSRC);\r\n                    }\r\n                }\r\n                const mediaActive = mediaType === MediaType.AUDIO\r\n                    ? this.audioTransferActive\r\n                    : this.videoTransferActive;\r\n\r\n                // Set the transceiver direction only if media is not suspended on the connection. This happens when\r\n                // the client is using the p2p connection. Transceiver direction is updated when media is resumed on\r\n                // this connection again.\r\n                if (transceiver && mediaActive) {\r\n                    transceiver.direction = newTrack ? MediaDirection.SENDRECV : MediaDirection.RECVONLY;\r\n                } else if (transceiver) {\r\n                    transceiver.direction = MediaDirection.INACTIVE;\r\n                }\r\n\r\n                // Avoid configuring the encodings on Chromium/Safari until simulcast is configured\r\n                // for the newly added track using SDP munging which happens during the renegotiation.\r\n                const configureEncodingsPromise = browser.usesSdpMungingForSimulcast() || !newTrack\r\n                    ? Promise.resolve()\r\n                    : this.tpcUtils.setEncodings(newTrack);\r\n\r\n                // Force renegotiation only when the source is added for the first time.\r\n                return configureEncodingsPromise.then(() => negotiationNeeded);\r\n            });\r\n    }\r\n\r\n    logger.debug(`${this} TPC.replaceTrack using plan B`);\r\n\r\n    let promiseChain = Promise.resolve();\r\n\r\n    if (oldTrack) {\r\n        this.removeTrack(oldTrack);\r\n    }\r\n    if (newTrack) {\r\n        promiseChain = this.addTrack(newTrack);\r\n    }\r\n\r\n    return promiseChain.then(() => true);\r\n};\r\n\r\n/**\r\n * Removes local track as part of the mute operation.\r\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\r\n * the mute operation.\r\n * @return {Promise<boolean>} Promise that resolves to true if the underlying PeerConnection's\r\n * state has changed and renegotiation is required, false if no renegotiation is needed or\r\n * Promise is rejected when something goes wrong.\r\n */\r\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\r\n    const webRtcStream = localTrack.getOriginalStream();\r\n\r\n    this.trace(\r\n        'removeStreamMute',\r\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\r\n\r\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\r\n        // Abort - nothing to be done here\r\n        return Promise.reject('Track not found in the peerconnection');\r\n    }\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        return this.tpcUtils.replaceTrack(localTrack, null).then(() => false);\r\n    }\r\n\r\n    if (webRtcStream) {\r\n        logger.info(\r\n            `Removing ${localTrack} as mute from ${this}`);\r\n        this._removeStream(webRtcStream);\r\n\r\n        return Promise.resolve(true);\r\n    }\r\n\r\n    logger.error(`removeStreamMute - no WebRTC stream for ${localTrack}`);\r\n\r\n    return Promise.reject('Stream not found');\r\n};\r\n\r\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\r\n    this.trace('createDataChannel', label, opts);\r\n\r\n    return this.peerconnection.createDataChannel(label, opts);\r\n};\r\n\r\n/**\r\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\r\n * in the SDP so that simulcast is properly activated.\r\n *\r\n * @param {Object} localSdp the WebRTC session description instance for\r\n * the local description.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\r\n        localSdp) {\r\n    let sdpStr = localSdp.sdp;\r\n\r\n    const videoStartIndex = sdpStr.indexOf('m=video');\r\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\r\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\r\n\r\n    if (simStartIndex === -1\r\n        || otherStartIndex === -1\r\n        || otherStartIndex === simStartIndex) {\r\n        return localSdp;\r\n    }\r\n\r\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\r\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\r\n\r\n    sdpStr = sdpStr.replace(simStr, '');\r\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\r\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\r\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\r\n    const simStrTrimmed = simStr.trim();\r\n    const sdpTail = sdpStr.slice(otherEndIndex);\r\n\r\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\r\n\r\n    return new RTCSessionDescription({\r\n        type: localSdp.type,\r\n        sdp: sdpStr\r\n    });\r\n};\r\n\r\n/**\r\n * Will adjust audio and video media direction in the given SDP object to\r\n * reflect the current status of the {@link audioTransferActive} and\r\n * {@link videoTransferActive} flags.\r\n * @param {Object} localDescription the WebRTC session description instance for\r\n * the local description.\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(\r\n        localDescription) {\r\n    const transformer = new SdpTransformWrap(localDescription.sdp);\r\n    let modifiedDirection = false;\r\n    const audioMedia = transformer.selectMedia(MediaType.AUDIO)?.[0];\r\n\r\n    if (audioMedia) {\r\n        const desiredAudioDirection\r\n            = this._getDesiredMediaDirection(MediaType.AUDIO);\r\n\r\n        if (audioMedia.direction !== desiredAudioDirection) {\r\n            audioMedia.direction = desiredAudioDirection;\r\n            logger.info(\r\n                `Adjusted local audio direction to ${desiredAudioDirection}`);\r\n            modifiedDirection = true;\r\n        }\r\n    } else {\r\n        logger.warn('No \"audio\" media found int the local description');\r\n    }\r\n\r\n    const videoMedia = transformer.selectMedia('video');\r\n\r\n    if (videoMedia) {\r\n        const desiredVideoDirection\r\n            = this._getDesiredMediaDirection(MediaType.VIDEO);\r\n\r\n        if (videoMedia.direction !== desiredVideoDirection) {\r\n            videoMedia.direction = desiredVideoDirection;\r\n            logger.info(\r\n                `Adjusted local video direction to ${desiredVideoDirection}`);\r\n            modifiedDirection = true;\r\n        }\r\n    } else {\r\n        logger.warn('No \"video\" media found in the local description');\r\n    }\r\n\r\n    if (modifiedDirection) {\r\n        return new RTCSessionDescription({\r\n            type: localDescription.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n\r\n    return localDescription;\r\n};\r\n\r\n/**\r\n * Adjusts the media direction on the remote description based on availability of local and remote sources in a p2p\r\n * media connection.\r\n *\r\n * @param {RTCSessionDescription} remoteDescription the WebRTC session description instance for the remote description.\r\n * @returns the transformed remoteDescription.\r\n * @private\r\n */\r\n TraceablePeerConnection.prototype._adjustRemoteMediaDirection = function(remoteDescription) {\r\n    const transformer = new SdpTransformWrap(remoteDescription.sdp);\r\n\r\n    [ MediaType.AUDIO, MediaType.VIDEO ].forEach(mediaType => {\r\n        const media = transformer.selectMedia(mediaType)?.[0];\r\n        const hasLocalSource = this.hasAnyTracksOfType(mediaType);\r\n        const hasRemoteSource = this.getRemoteTracks(null, mediaType).length > 0;\r\n\r\n        media.direction = hasLocalSource && hasRemoteSource\r\n            ? MediaDirection.SENDRECV\r\n            : hasLocalSource\r\n                ? MediaDirection.RECVONLY\r\n                : hasRemoteSource ? MediaDirection.SENDONLY : MediaDirection.INACTIVE;\r\n    });\r\n\r\n    return new RTCSessionDescription({\r\n        type: remoteDescription.type,\r\n        sdp: transformer.toRawSDP()\r\n    });\r\n}\r\n/**\r\n * Sets up the _dtlsTransport object and initializes callbacks for it.\r\n */\r\nTraceablePeerConnection.prototype._initializeDtlsTransport = function() {\r\n    // We are assuming here that we only have one bundled transport here\r\n    if (!this.peerconnection.getSenders || this._dtlsTransport) {\r\n        return;\r\n    }\r\n\r\n    const senders = this.peerconnection.getSenders();\r\n\r\n    if (senders.length !== 0 && senders[0].transport) {\r\n        this._dtlsTransport = senders[0].transport;\r\n\r\n        this._dtlsTransport.onerror = error => {\r\n            logger.error(`${this} DtlsTransport error: ${error}`);\r\n        };\r\n\r\n        this._dtlsTransport.onstatechange = () => {\r\n            this.trace('dtlsTransport.onstatechange', this._dtlsTransport.state);\r\n        };\r\n    }\r\n};\r\n\r\n/**\r\n * Configures the stream encodings depending on the video type and the bitrates configured.\r\n *\r\n * @param {JitsiLocalTrack} - The local track for which the sender encodings have to configured.\r\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\r\n */\r\n TraceablePeerConnection.prototype.configureSenderVideoEncodings = function(localVideoTrack = null) {\r\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n        if (localVideoTrack) {\r\n            return this.setSenderVideoConstraints(\r\n                this._senderMaxHeights.get(localVideoTrack.getSourceName()),\r\n                localVideoTrack);\r\n        }\r\n        const promises = [];\r\n\r\n        for (const track of this.getLocalVideoTracks()) {\r\n            promises.push(this.setSenderVideoConstraints(this._senderMaxHeights.get(track.getSourceName()), track));\r\n        }\r\n\r\n        return Promise.allSettled(promises);\r\n    }\r\n\r\n    let localTrack = localVideoTrack;\r\n\r\n    if (!localTrack) {\r\n        localTrack = this.getLocalVideoTracks()[0];\r\n    }\r\n\r\n    return this.setSenderVideoConstraints(this._senderVideoMaxHeight, localTrack);\r\n};\r\n\r\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\r\n    let localSdp = description;\r\n\r\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\r\n\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    // Munge the order of the codecs based on the preferences set through config.js\r\n    localSdp = this._mungeOpus(localSdp);\r\n\r\n    if (!browser.usesUnifiedPlan()) {\r\n        localSdp = this._adjustLocalMediaDirection(localSdp);\r\n        localSdp = this._ensureSimulcastGroupIsLast(localSdp);\r\n    }\r\n\r\n    if (!this._usesTransceiverCodecPreferences) {\r\n        localSdp = this._mungeCodecOrder(localSdp);\r\n    }\r\n\r\n    this.trace('setLocalDescription::postTransform (Unified Plan)', dumpSDP(localSdp));\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.peerconnection.setLocalDescription(localSdp)\r\n            .then(() => {\r\n                this.trace('setLocalDescriptionOnSuccess');\r\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\r\n\r\n                if (localUfrag !== this.localUfrag) {\r\n                    this.localUfrag = localUfrag;\r\n                    this.eventEmitter.emit(\r\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\r\n                }\r\n\r\n                this._initializeDtlsTransport();\r\n\r\n                resolve();\r\n            }, err => {\r\n                this.trace('setLocalDescriptionOnFailure', err);\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\r\n                    err, this);\r\n                reject(err);\r\n            });\r\n    });\r\n};\r\n\r\n/**\r\n * Enables/disables audio media transmission on this peer connection. When\r\n * disabled the SDP audio media direction in the local SDP will be adjusted to\r\n * 'inactive' which means that no data will be sent nor accepted, but\r\n * the connection should be kept alive.\r\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\r\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\r\n * no effect.\r\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\r\n * needs to be executed in order for the changes to take effect or\r\n * <tt>false</tt> if the given value was the same as the previous one.\r\n * @public\r\n */\r\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\r\n    logger.debug(`${this} audio transfer active: ${active}`);\r\n    const changed = this.audioTransferActive !== active;\r\n\r\n    this.audioTransferActive = active;\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        this.tpcUtils.setAudioTransferActive(active);\r\n\r\n        // false means no renegotiation up the chain which is not needed in the Unified mode\r\n        return false;\r\n    }\r\n\r\n    return changed;\r\n};\r\n\r\n/**\r\n * Sets the degradation preference on the video sender. This setting determines if\r\n * resolution or framerate will be preferred when bandwidth or cpu is constrained.\r\n * Sets it to 'maintain-framerate' when a camera track is added to the pc, sets it\r\n * to 'maintain-resolution' when a desktop track is being shared instead.\r\n * @returns {Promise<void>}\r\n */\r\nTraceablePeerConnection.prototype.setSenderVideoDegradationPreference = function() {\r\n    if (!this.peerconnection.getSenders) {\r\n        logger.debug('Browser does not support RTCRtpSender');\r\n\r\n        return Promise.resolve();\r\n    }\r\n    const localVideoTrack = this.getLocalVideoTrack();\r\n    let videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!parameters.encodings || !parameters.encodings.length) {\r\n        return Promise.resolve();\r\n    }\r\n    for (const encoding in parameters.encodings) {\r\n        if (parameters.encodings.hasOwnProperty(encoding)) {\r\n            const preference = localVideoTrack.videoType === VideoType.CAMERA\r\n                ? DEGRADATION_PREFERENCE_CAMERA\r\n                : DEGRADATION_PREFERENCE_DESKTOP;\r\n\r\n            logger.info(`Setting video sender degradation preference on ${this} to ${preference}`);\r\n            parameters.encodings[encoding].degradationPreference = preference;\r\n        }\r\n    }\r\n\r\n    return videoSender.setParameters(parameters);\r\n};\r\n\r\n/**\r\n * Sets the max bitrate on the RTCRtpSender so that the\r\n * bitrate of the enocder doesn't exceed the configured value.\r\n * This is needed for the desktop share until spec-complaint\r\n * simulcast is implemented.\r\n * @param {JitsiLocalTrack} localTrack - the local track whose\r\n * max bitrate is to be configured.\r\n * @returns {Promise<void>}\r\n */\r\nTraceablePeerConnection.prototype.setMaxBitRate = function() {\r\n    if (!this.peerconnection.getSenders) {\r\n        logger.debug('Browser doesn\\'t support RTCRtpSender');\r\n\r\n        return Promise.resolve();\r\n    }\r\n    const localVideoTrack = this.getLocalVideoTrack();\r\n\r\n    if (!localVideoTrack) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const videoType = localVideoTrack.videoType;\r\n\r\n    // Apply the maxbitrates on the video track when one of the conditions is met.\r\n    // 1. Max. bitrates for video are specified through videoQuality settings in config.js\r\n    // 2. Track is a desktop track and bitrate is capped using capScreenshareBitrate option in plan-b mode.\r\n    // 3. The client is running in Unified plan mode.\r\n    if (!((this.options.videoQuality && this.options.videoQuality.maxBitratesVideo)\r\n        || (browser.usesPlanB() && this.options.capScreenshareBitrate && videoType === VideoType.DESKTOP)\r\n        || browser.usesUnifiedPlan())) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    const presenterEnabled = localVideoTrack._originalStream\r\n        && localVideoTrack._originalStream.id !== localVideoTrack.getStreamId();\r\n    let videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!(parameters.encodings && parameters.encodings.length)) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    if (this.isSimulcastOn()) {\r\n        for (const encoding in parameters.encodings) {\r\n            if (parameters.encodings.hasOwnProperty(encoding)) {\r\n                // On chromium, set a max bitrate of 500 Kbps for screenshare when\r\n                // capScreenshareBitrate is enabled through config.js and presenter\r\n                // is not turned on.\r\n                const bitrate = browser.usesPlanB()\r\n                    && videoType === VideoType.DESKTOP\r\n                    && this.options.capScreenshareBitrate\r\n                    ? presenterEnabled ? this.videoBitrates.high : DESKSTOP_SHARE_RATE\r\n                    : this.tpcUtils.localStreamEncodingsConfig[encoding].maxBitrate;\r\n\r\n                logger.info(`${this} Setting a max bitrate of ${bitrate} bps on layer `\r\n                    + `${this.tpcUtils.localStreamEncodingsConfig[encoding].rid}`);\r\n                parameters.encodings[encoding].maxBitrate = bitrate;\r\n            }\r\n        }\r\n    } else {\r\n        // Do not change the max bitrate for desktop tracks in non-simulcast mode.\r\n        let bitrate = this.videoBitrates.high;\r\n\r\n        if (videoType === VideoType.CAMERA) {\r\n            // Determine the bitrates based on the sender constraint applied for unicast tracks.\r\n            const scaleFactor = this.senderVideoMaxHeight\r\n                ? Math.floor(localVideoTrack.resolution / this.senderVideoMaxHeight)\r\n                : 1;\r\n            const encoding = this.tpcUtils.localStreamEncodingsConfig?.find(layer => layer.scaleResolutionDownBy === scaleFactor);\r\n\r\n            if (encoding) {\r\n                logger.info(`${this} Setting a max bitrate of ${encoding.maxBitrate} bps on local video track`);\r\n                bitrate = encoding.maxBitrate;\r\n            }\r\n        }\r\n        parameters.encodings[0].maxBitrate = bitrate;\r\n    }\r\n\r\n    return videoSender.setParameters(parameters);\r\n};\r\n\r\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\r\n    // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n    //this.trace('setRemoteDescription::preTransform', dumpSDP(description));\r\n\r\n    // Munge the order of the codecs based on the preferences set through config.js\r\n    // eslint-disable-next-line no-param-reassign\r\n    //description = this._mungeCodecOrder(description);\r\n\r\n    let remoteDescription = description;\r\n\r\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\r\n\r\n    // Munge stereo flag and opusMaxAverageBitrate based on config.js\r\n    remoteDescription = this._mungeOpus(remoteDescription);\r\n\r\n    if (browser.usesPlanB()) {\r\n        // TODO the focus should squeze or explode the remote simulcast\r\n        if (this.isSimulcastOn()) {\r\n            // Determine if \"x-google-conference\" needs to be added to the remote description.\r\n            // We need to add that flag for camera tracks always and for desktop tracks only when\r\n            // capScreenshareBitrate is disabled.\r\n            const enableConferenceFlag = !(this.options.capScreenshareBitrate && !hasCameraTrack(this));\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            description = this.simulcast.mungeRemoteDescription(description, enableConferenceFlag);\r\n            this.trace(\r\n                'setRemoteDescription::postTransform (simulcast)',\r\n                dumpSDP(description));\r\n        }\r\n\r\n        // eslint-disable-next-line no-param-reassign\r\n        description = normalizePlanB(description);\r\n    } else {\r\n        // [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n        // const currentDescription = this.peerconnection.remoteDescription;\r\n\r\n        // // eslint-disable-next-line no-param-reassign\r\n        // description = this.interop.toUnifiedPlan(description, currentDescription);\r\n        // this.trace(\r\n        //     'setRemoteDescription::postTransform (Unified)',\r\n        //     dumpSDP(description));\r\n\r\n        // if (this.isSimulcastOn()) {\r\n        //     // eslint-disable-next-line no-param-reassign\r\n        //     description = this.simulcast.mungeRemoteDescription(description);\r\n\r\n        //     // eslint-disable-next-line no-param-reassign\r\n        //     description = this.tpcUtils.insertUnifiedPlanSimulcastReceive(description);\r\n        //     this.trace(\r\n        //         'setRemoteDescription::postTransform (sim receive)',\r\n        //         dumpSDP(description));\r\n\r\n        //     // eslint-disable-next-line no-param-reassign\r\n        //     description = this.tpcUtils.ensureCorrectOrderOfSsrcs(description);\r\n        // }\r\n\r\n         // Translate the SDP to Unified plan format first for the jvb case, p2p case will only have 2 m-lines.\r\n         if (!this.isP2P) {\r\n            const currentDescription = this.peerconnection.remoteDescription;\r\n\r\n            remoteDescription = this.interop.toUnifiedPlan(remoteDescription, currentDescription);\r\n            this.trace('setRemoteDescription::postTransform (Unified)', dumpSDP(remoteDescription));\r\n        }\r\n        if (this.isSimulcastOn()) {\r\n            // Implode the simulcast ssrcs so that the remote sdp has only the first ssrc in the SIM group.\r\n            remoteDescription = this.simulcast.mungeRemoteDescription(remoteDescription);\r\n            this.trace('setRemoteDescription::postTransform (simulcast)', dumpSDP(remoteDescription));\r\n\r\n            remoteDescription = this.tpcUtils.insertUnifiedPlanSimulcastReceive(remoteDescription);\r\n            this.trace('setRemoteDescription::postTransform (sim receive)', dumpSDP(remoteDescription));\r\n        }\r\n        remoteDescription = this.tpcUtils.ensureCorrectOrderOfSsrcs(remoteDescription);\r\n        this.trace('setRemoteDescription::postTransform (correct ssrc order)', dumpSDP(remoteDescription));\r\n\r\n        \r\n    }\r\n\r\n    // Munge the order of the codecs based on the preferences set through config.js.\r\n    remoteDescription = this._mungeCodecOrder(remoteDescription);\r\n    this.trace('setRemoteDescription::postTransform (munge codec order)', dumpSDP(remoteDescription));\r\n\r\n    return new Promise((resolve, reject) => {\r\n        this.peerconnection.setRemoteDescription(remoteDescription)\r\n            .then(() => {\r\n                this.trace('setRemoteDescriptionOnSuccess');\r\n                const remoteUfrag = SDPUtil.getUfrag(remoteDescription.sdp);\r\n\r\n                if (remoteUfrag !== this.remoteUfrag) {\r\n                    this.remoteUfrag = remoteUfrag;\r\n                    this.eventEmitter.emit(\r\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\r\n                }\r\n\r\n                this._initializeDtlsTransport();\r\n\r\n                resolve();\r\n            }, err => {\r\n                this.trace('setRemoteDescriptionOnFailure', err);\r\n                this.eventEmitter.emit(\r\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\r\n                    err,\r\n                    this);\r\n                reject(err);\r\n            });\r\n    });\r\n};\r\n\r\n/**\r\n * Changes the resolution of the video stream that is sent to the peer based on the resolution requested by the peer\r\n * and user preference, sets the degradation preference on the sender based on the video type, configures the maximum\r\n * bitrates on the send stream.\r\n *\r\n * @param {number} frameHeight - The max frame height to be imposed on the outgoing video stream.\r\n * @param {JitsiLocalTrack} - The local track for which the sender constraints have to be applied.\r\n * @returns {Promise} promise that will be resolved when the operation is successful and rejected otherwise.\r\n */\r\n TraceablePeerConnection.prototype.setSenderVideoConstraints = function(frameHeight, localVideoTrack) {\r\n    if (frameHeight < 0) {\r\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\r\n    }\r\n\r\n    // XXX: This is not yet supported on mobile.\r\n    if (browser.isReactNative()) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n        this._senderMaxHeights.set(localVideoTrack.getSourceName(), frameHeight);\r\n    } else {\r\n        this._senderVideoMaxHeight = frameHeight;\r\n    }\r\n\r\n    if (!localVideoTrack || localVideoTrack.isMuted()) {\r\n        return Promise.resolve();\r\n    }\r\n    const videoSender = this.findSenderForTrack(localVideoTrack.getTrack());\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!parameters?.encodings?.length) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Set the degradation preference.\r\n    const preference = this.isSharingLowFpsScreen()\r\n        ? DEGRADATION_PREFERENCE_DESKTOP // Prefer resolution for low fps share.\r\n        : DEGRADATION_PREFERENCE_CAMERA; // Prefer frame-rate for high fps share and camera.\r\n\r\n    parameters.degradationPreference = preference;\r\n    logger.info(`${this} Setting degradation preference [preference=${preference},track=${localVideoTrack}`);\r\n\r\n    // Calculate the encodings active state based on the resolution requested by the bridge.\r\n    this.encodingsEnabledState = this.tpcUtils.calculateEncodingsActiveState(localVideoTrack, frameHeight);\r\n    const maxBitrates = this.tpcUtils.calculateEncodingsBitrates(localVideoTrack);\r\n    const videoType = localVideoTrack.getVideoType();\r\n\r\n    if (this.isSimulcastOn()) {\r\n        for (const encoding in parameters.encodings) {\r\n            if (parameters.encodings.hasOwnProperty(encoding)) {\r\n                parameters.encodings[encoding].active = this.encodingsEnabledState[encoding];\r\n\r\n                // Firefox doesn't follow the spec and lets application specify the degradation preference on the\r\n                // encodings.\r\n                browser.isFirefox() && (parameters.encodings[encoding].degradationPreference = preference);\r\n\r\n                // Max bitrates are configured on the encodings only for VP8.\r\n                if (this.getConfiguredVideoCodec() === CodecMimeType.VP8\r\n                    && (this.options?.videoQuality?.maxBitratesVideo\r\n                        || this.isSharingLowFpsScreen()\r\n                        || browser.usesUnifiedPlan())) {\r\n                    parameters.encodings[encoding].maxBitrate = maxBitrates[encoding];\r\n                }\r\n            }\r\n        }\r\n        this.tpcUtils.updateEncodingsResolution(parameters);\r\n\r\n    // For p2p and cases and where simulcast is explicitly disabled.\r\n    } else if (frameHeight > 0) {\r\n        let scaleFactor = HD_SCALE_FACTOR;\r\n\r\n        // Do not scale down encodings for desktop tracks for non-simulcast case.\r\n        if (videoType === VideoType.CAMERA && localVideoTrack.resolution > frameHeight) {\r\n            scaleFactor = Math.floor(localVideoTrack.resolution / frameHeight);\r\n        }\r\n\r\n        parameters.encodings[0].active = true;\r\n        parameters.encodings[0].scaleResolutionDownBy = scaleFactor;\r\n\r\n        // Firefox doesn't follow the spec and lets application specify the degradation preference on the encodings.\r\n        browser.isFirefox() && (parameters.encodings[0].degradationPreference = preference);\r\n\r\n        // Configure the bitrate.\r\n        if (this.getConfiguredVideoCodec() === CodecMimeType.VP8 && this.options?.videoQuality?.maxBitratesVideo) {\r\n            let bitrate = this.getTargetVideoBitrates()?.high;\r\n\r\n            if (videoType === VideoType.CAMERA) {\r\n                bitrate = this.tpcUtils.localStreamEncodingsConfig\r\n                    .find(layer => layer.scaleResolutionDownBy === scaleFactor)?.maxBitrate;\r\n                bitrate = bitrate ? bitrate : this.getTargetVideoBitrates()?.high;\r\n            }\r\n            parameters.encodings[0].maxBitrate = bitrate;\r\n        }\r\n    } else {\r\n        parameters.encodings[0].active = false;\r\n    }\r\n\r\n    logger.info(`${this} setting max height=${frameHeight},encodings=${JSON.stringify(parameters.encodings)}`);\r\n\r\n    return videoSender.setParameters(parameters).then(() => {\r\n        localVideoTrack.maxEnabledResolution = frameHeight;\r\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\r\n    });\r\n};\r\n\r\n/**\r\n * Changes the resolution of the video stream that is sent to the peer based on\r\n * the user preferred value. If simulcast is enabled on the peerconection, all the\r\n * simulcast encodings that have a resolution height lower or equal to the value\r\n * provided will remain active. For the non-simulcast case, video constraint is\r\n * applied on the track.\r\n * @param {number} frameHeight - The user preferred max frame height.\r\n * @returns {Promise} promise that will be resolved when the operation is\r\n * successful and rejected otherwise.\r\n */\r\nTraceablePeerConnection.prototype.setSenderVideoConstraint = function(frameHeight = null) {\r\n    if (frameHeight < 0) {\r\n        throw new Error(`Invalid frameHeight: ${frameHeight}`);\r\n    }\r\n\r\n    // XXX: This is not yet supported on mobile.\r\n    if (browser.isReactNative()) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // Need to explicitly check for null as 0 is falsy, but a valid value\r\n    const newHeight = frameHeight === null ? this.senderVideoMaxHeight : frameHeight;\r\n\r\n    this.senderVideoMaxHeight = newHeight;\r\n\r\n    logger.log(`${this} senderVideoMaxHeight: ${newHeight}`);\r\n\r\n    const localVideoTrack = this.getLocalVideoTrack();\r\n\r\n    if (!localVideoTrack || localVideoTrack.isMuted() || localVideoTrack.videoType !== VideoType.CAMERA) {\r\n        return Promise.resolve();\r\n    }\r\n    let videoSender = this.findSenderByKind(MediaType.VIDEO);\r\n\r\n    if (!videoSender) {\r\n        return Promise.resolve();\r\n    }\r\n    const parameters = videoSender.getParameters();\r\n\r\n    if (!parameters || !parameters.encodings || !parameters.encodings.length) {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    if (this.isSimulcastOn()) {\r\n        // Determine the encodings that need to stay enabled based on the new frameHeight provided.\r\n        const encodingsEnabledState = this.tpcUtils.getLocalStreamHeightConstraints(localVideoTrack.track)\r\n            .map(height => height <= newHeight);\r\n\r\n        // Always keep the LD stream enabled, specifically when the LD stream's resolution is higher than of the\r\n        // requested resolution. This can happen when camera is captured at resolutions higher than 720p but the\r\n        // requested resolution is 180. Since getParameters doesn't give us information about the resolutions\r\n        // of the simulcast encodings, we have to rely on our initial config for the simulcast streams.\r\n        const ldStreamIndex = this.tpcUtils.localStreamEncodingsConfig\r\n            .findIndex(layer => layer.scaleResolutionDownBy === 4.0);\r\n\r\n        if (newHeight > 0 && ldStreamIndex !== -1) {\r\n            encodingsEnabledState[ldStreamIndex] = true;\r\n        }\r\n        for (const encoding in parameters.encodings) {\r\n            if (parameters.encodings.hasOwnProperty(encoding)) {\r\n                parameters.encodings[encoding].active = encodingsEnabledState[encoding];\r\n            }\r\n        }\r\n    } else if (newHeight > 0) {\r\n        parameters.encodings[0].scaleResolutionDownBy = localVideoTrack.resolution >= newHeight\r\n            ? Math.floor(localVideoTrack.resolution / newHeight)\r\n            : 1;\r\n        parameters.encodings[0].active = true;\r\n    } else {\r\n        parameters.encodings[0].scaleResolutionDownBy = undefined;\r\n        parameters.encodings[0].active = false;\r\n    }\r\n\r\n    logger.info(`${this} setting max height of ${newHeight}, encodings: ${JSON.stringify(parameters.encodings)}`);\r\n\r\n    return videoSender.setParameters(parameters).then(() => {\r\n        localVideoTrack.maxEnabledResolution = newHeight;\r\n        this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED, localVideoTrack);\r\n\r\n        // Max bitrate needs to be reconfigured on the sender in p2p/non-simulcast case if needed when\r\n        // the send resolution changes.\r\n        if (this.isP2P || !this.isSimulcastOn()) {\r\n            return this.setMaxBitRate();\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Enables/disables video media transmission on this peer connection. When\r\n * disabled the SDP video media direction in the local SDP will be adjusted to\r\n * 'inactive' which means that no data will be sent nor accepted, but\r\n * the connection should be kept alive.\r\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\r\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\r\n * no effect.\r\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\r\n * needs to be executed in order for the changes to take effect or\r\n * <tt>false</tt> if the given value was the same as the previous one.\r\n * @public\r\n */\r\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\r\n    logger.debug(`${this} video transfer active: ${active}`);\r\n    const changed = this.videoTransferActive !== active;\r\n\r\n    this.videoTransferActive = active;\r\n\r\n    if (browser.usesUnifiedPlan()) {\r\n        this.tpcUtils.setVideoTransferActive(active);\r\n\r\n        // false means no renegotiation up the chain which is not needed in the Unified mode\r\n        return false;\r\n    }\r\n\r\n    return changed;\r\n};\r\n\r\n/**\r\n * Sends DTMF tones if possible.\r\n *\r\n * @param {string} tones - The DTMF tones string as defined by {@code RTCDTMFSender.insertDTMF}, 'tones' argument.\r\n * @param {number} duration - The amount of time in milliseconds that each DTMF should last. It's 200ms by default.\r\n * @param {number} interToneGap - The length of time in miliseconds to wait between tones. It's 200ms by default.\r\n *\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype.sendTones = function(tones, duration = 200, interToneGap = 200) {\r\n    if (!this._dtmfSender) {\r\n        if (this.peerconnection.getSenders) {\r\n            const rtpSender = this.peerconnection.getSenders().find(s => s.dtmf);\r\n\r\n            this._dtmfSender = rtpSender && rtpSender.dtmf;\r\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using getSenders`);\r\n        }\r\n\r\n        if (!this._dtmfSender) {\r\n            const localAudioTrack = Array.from(this.localTracks.values()).find(t => t.isAudioTrack());\r\n\r\n            if (this.peerconnection.createDTMFSender && localAudioTrack) {\r\n                this._dtmfSender = this.peerconnection.createDTMFSender(localAudioTrack.getTrack());\r\n            }\r\n            this._dtmfSender && logger.info(`${this} initialized DTMFSender using deprecated createDTMFSender`);\r\n        }\r\n\r\n        if (this._dtmfSender) {\r\n            this._dtmfSender.ontonechange = this._onToneChange.bind(this);\r\n        }\r\n    }\r\n\r\n    if (this._dtmfSender) {\r\n        if (this._dtmfSender.toneBuffer) {\r\n            this._dtmfTonesQueue.push({\r\n                tones,\r\n                duration,\r\n                interToneGap\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\r\n    } else {\r\n        logger.warn(`${this} sendTones - failed to select DTMFSender`);\r\n    }\r\n};\r\n\r\n/**\r\n * Callback ivoked by {@code this._dtmfSender} when it has finished playing\r\n * a single tone.\r\n *\r\n * @param {Object} event - The tonechange event which indicates what characters\r\n * are left to be played for the current tone.\r\n * @private\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype._onToneChange = function(event) {\r\n    // An empty event.tone indicates the current tones have finished playing.\r\n    // Automatically start playing any queued tones on finish.\r\n    if (this._dtmfSender && event.tone === '' && this._dtmfTonesQueue.length) {\r\n        const { tones, duration, interToneGap } = this._dtmfTonesQueue.shift();\r\n\r\n        this._dtmfSender.insertDTMF(tones, duration, interToneGap);\r\n    }\r\n};\r\n\r\n/**\r\n * Makes the underlying TraceablePeerConnection generate new SSRC for\r\n * the recvonly video stream.\r\n */\r\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\r\n    const newSSRC = SDPUtil.generateSsrc();\r\n\r\n    logger.info(`${this} generated new recvonly SSRC: ${newSSRC}`);\r\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\r\n};\r\n\r\n/**\r\n * Makes the underlying TraceablePeerConnection forget the current primary video\r\n * SSRC.\r\n */\r\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\r\n    logger.info('Clearing primary video SSRC!');\r\n    this.sdpConsistency.clearVideoSsrcCache();\r\n};\r\n\r\n/**\r\n * Closes underlying WebRTC PeerConnection instance and removes all remote\r\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\r\n * them.\r\n */\r\nTraceablePeerConnection.prototype.close = function() {\r\n    this.trace('stop');\r\n\r\n    // Off SignalingEvents\r\n    this.signalingLayer.off(SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\r\n    this.signalingLayer.off(SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\r\n    browser.usesUnifiedPlan() && this.peerconnection.removeEventListener('track', this.onTrack);\r\n\r\n    for (const peerTracks of this.remoteTracks.values()) {\r\n        for (const remoteTracks of peerTracks.values()) {\r\n            for (const remoteTrack of remoteTracks) {\r\n                this._removeRemoteTrack(remoteTrack);\r\n            }\r\n        }\r\n    }\r\n    this.remoteTracks.clear();\r\n\r\n    this._addedStreams = [];\r\n\r\n    this._dtmfSender = null;\r\n    this._dtmfTonesQueue = [];\r\n\r\n    if (!this.rtc._removePeerConnection(this)) {\r\n        logger.error('RTC._removePeerConnection returned false');\r\n    }\r\n    if (this.statsinterval !== null) {\r\n        window.clearInterval(this.statsinterval);\r\n        this.statsinterval = null;\r\n    }\r\n    logger.info(`Closing ${this}...`);\r\n    this.peerconnection.close();\r\n};\r\n\r\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\r\n    return this._createOfferOrAnswer(false /* answer */, constraints);\r\n};\r\n\r\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\r\n    return this._createOfferOrAnswer(true /* offer */, constraints);\r\n};\r\n\r\n/**\r\n * Checks if a camera track has been added to the peerconnection\r\n * @param {TraceablePeerConnection} peerConnection\r\n * @return {boolean} <tt>true</tt> if the peerconnection has\r\n * a camera track for its video source <tt>false</tt> otherwise.\r\n */\r\nfunction hasCameraTrack(peerConnection) {\r\n    return peerConnection.getLocalTracks()\r\n        .some(t => t.videoType === 'camera');\r\n}\r\n\r\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\r\n        isOffer,\r\n        constraints) {\r\n    const logName = isOffer ? 'Offer' : 'Answer';\r\n\r\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\r\n\r\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\r\n        try {\r\n            this.trace(\r\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\r\n\r\n            if (browser.usesPlanB()) {\r\n                // If there are no local video tracks, then a \"recvonly\"\r\n                // SSRC needs to be generated\r\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\r\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\r\n                    this.generateRecvonlySsrc();\r\n                }\r\n\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = new RTCSessionDescription({\r\n                    type: resultSdp.type,\r\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\r\n                        resultSdp.sdp)\r\n                });\r\n\r\n                this.trace(\r\n                    `create${logName}OnSuccess::postTransform `\r\n                         + '(make primary audio/video ssrcs consistent)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            // configure simulcast for camera tracks always and for\r\n            // desktop tracks only when the testing flag for maxbitrates\r\n            // in config.js is disabled.\r\n            if (this.isSimulcastOn() && browser.usesSdpMungingForSimulcast()\r\n                && (!this.options.capScreenshareBitrate\r\n                || (this.options.capScreenshareBitrate && hasCameraTrack(this)))) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\r\n                this.trace(\r\n                    `create${logName}`\r\n                        + 'OnSuccess::postTransform (simulcast)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            if (!this.options.disableRtx && browser.usesSdpMungingForSimulcast()) {\r\n                // eslint-disable-next-line no-param-reassign\r\n                resultSdp = new RTCSessionDescription({\r\n                    type: resultSdp.type,\r\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\r\n                });\r\n\r\n                this.trace(\r\n                    `create${logName}`\r\n                         + 'OnSuccess::postTransform (rtx modifier)',\r\n                    dumpSDP(resultSdp));\r\n            }\r\n\r\n            const ssrcMap = extractSSRCMap(resultSdp);\r\n\r\n            logger.debug('Got local SSRCs MAP: ', ssrcMap);\r\n            this._processLocalSSRCsMap(ssrcMap);\r\n\r\n            resolveFn(resultSdp);\r\n        } catch (e) {\r\n            this.trace(`create${logName}OnError`, e);\r\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\r\n            logger.error(`create${logName}OnError`, e, dumpSDP(resultSdp));\r\n\r\n            rejectFn(e);\r\n        }\r\n    };\r\n\r\n    const handleFailure = (err, rejectFn) => {\r\n        this.trace(`create${logName}OnFailure`, err);\r\n        const eventType\r\n            = isOffer\r\n                ? RTCEvents.CREATE_OFFER_FAILED\r\n                : RTCEvents.CREATE_ANSWER_FAILED;\r\n\r\n        this.eventEmitter.emit(eventType, err, this);\r\n\r\n        rejectFn(err);\r\n    };\r\n\r\n    if (this._usesTransceiverCodecPreferences) {\r\n        const transceiver = this.peerconnection.getTransceivers()\r\n            .find(t => t.receiver && t.receiver?.track?.kind === MediaType.VIDEO);\r\n\r\n        if (transceiver) {\r\n            let capabilities = RTCRtpReceiver.getCapabilities(MediaType.VIDEO)?.codecs;\r\n            const mimeType = this.codecPreference?.mimeType;\r\n            const enable = this.codecPreference?.enable;\r\n\r\n            if (capabilities && mimeType && enable) {\r\n                // Move the desired codec (all variations of it as well) to the beginning of the list.\r\n                /* eslint-disable-next-line arrow-body-style */\r\n                capabilities.sort(caps => {\r\n                    return caps.mimeType.toLowerCase() === `${MediaType.VIDEO}/${mimeType}` ? -1 : 1;\r\n                });\r\n            } else if (capabilities && mimeType) {\r\n                capabilities = capabilities\r\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${mimeType}`);\r\n            }\r\n\r\n            // Disable ulpfec on Google Chrome and derivatives because\r\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=1276427\r\n            if (browser.isChromiumBased()) {\r\n                capabilities = capabilities\r\n                    .filter(caps => caps.mimeType.toLowerCase() !== `${MediaType.VIDEO}/${CodecMimeType.ULPFEC}`);\r\n            }\r\n\r\n            try {\r\n                transceiver.setCodecPreferences(capabilities);\r\n            } catch (err) {\r\n                logger.warn(`${this} Setting codec[preference=${mimeType},enable=${enable}] failed`, err);\r\n            }\r\n        }\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        let oaPromise;\r\n\r\n        if (isOffer) {\r\n            oaPromise = this.peerconnection.createOffer(constraints);\r\n        } else {\r\n            oaPromise = this.peerconnection.createAnswer(constraints);\r\n        }\r\n\r\n        oaPromise\r\n            .then(\r\n                sdp => handleSuccess(sdp, resolve, reject),\r\n                error => handleFailure(error, reject));\r\n    });\r\n};\r\n\r\n/**\r\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\r\n * @param {TrackSSRCInfo} ssrcObj\r\n * @return {number|null} the primary SSRC or <tt>null</tt>\r\n */\r\nTraceablePeerConnection.prototype._extractPrimarySSRC = function(ssrcObj) {\r\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\r\n        return ssrcObj.groups[0].ssrcs[0];\r\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\r\n        return ssrcObj.ssrcs[0];\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Goes over the SSRC map extracted from the latest local description and tries\r\n * to match them with the local tracks (by MSID). Will update the values\r\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\r\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\r\n * @private\r\n */\r\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\r\n    for (const track of this.localTracks.values()) {\r\n        const sourceIdentifier = browser.usesUnifiedPlan() ? track.getType() : track.storedMSID;\r\n\r\n        if (ssrcMap.has(sourceIdentifier)) {\r\n            const newSSRC = ssrcMap.get(sourceIdentifier);\r\n\r\n            if (!newSSRC) {\r\n                logger.error(`No SSRC found for: ${trackMSID} in ${this}`);\r\n\r\n                return;\r\n            }\r\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\r\n            const newSSRCNum = this._extractPrimarySSRC(newSSRC);\r\n            const oldSSRCNum = this._extractPrimarySSRC(oldSSRC);\r\n\r\n            // eslint-disable-next-line no-negated-condition\r\n            if (newSSRCNum !== oldSSRCNum) {\r\n                oldSSRCNum && logger.error(`${this} Overwriting SSRC for track=${track}] with ssrc=${newSSRC}`);\r\n                this.localSSRCs.set(track.rtcId, newSSRC);\r\n                this.eventEmitter.emit(RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\r\n            }\r\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\r\n            // It is normal to find no SSRCs for a muted video track in\r\n            // the local SDP as the recv-only SSRC is no longer munged in.\r\n            // So log the warning only if it's not a muted video track.\r\n            logger.warn(`No SSRCs found in the local SDP for ${track} MSID: ${trackMSID} in ${this}`);\r\n        }\r\n    }\r\n};\r\n\r\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\r\n    this.trace('addIceCandidate', JSON.stringify({\r\n        candidate: candidate.candidate,\r\n        sdpMid: candidate.sdpMid,\r\n        sdpMLineIndex: candidate.sdpMLineIndex,\r\n        usernameFragment: candidate.usernameFragment\r\n    }, null, ' '));\r\n\r\n    return this.peerconnection.addIceCandidate(candidate);\r\n};\r\n\r\n/**\r\n * Obtains call-related stats from the peer connection.\r\n *\r\n * @param {Function} callback - The function to invoke after successfully\r\n * obtaining stats.\r\n * @param {Function} errback - The function to invoke after failing to obtain\r\n * stats.\r\n * @returns {void}\r\n */\r\nTraceablePeerConnection.prototype.getStats = function(callback, errback) {\r\n    // TODO (brian): After moving all browsers to adapter, check if adapter is\r\n    // accounting for different getStats apis, making the browser-checking-if\r\n    // unnecessary.\r\n    if (browser.isSafari() || browser.isFirefox() || browser.isReactNative()) {\r\n        // uses the new Promise based getStats\r\n        this.peerconnection.getStats()\r\n            .then(callback)\r\n            .catch(errback || (() => {\r\n\r\n                // Making sure that getStats won't fail if error callback is\r\n                // not passed.\r\n            }));\r\n    } else {\r\n        this.peerconnection.getStats(callback);\r\n    }\r\n};\r\n\r\n/**\r\n * Generates and stores new SSRC info object for given local track.\r\n * The method should be called only for a video track being added to this TPC\r\n * in the muted state (given that the current browser uses this strategy).\r\n * @param {JitsiLocalTrack} track\r\n * @return {TPCSSRCInfo}\r\n */\r\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\r\n    const rtcId = track.rtcId;\r\n    let ssrcInfo = this._getSSRC(rtcId);\r\n\r\n    if (ssrcInfo) {\r\n        logger.error(`Will overwrite local SSRCs for track ID: ${rtcId}`);\r\n    }\r\n\r\n    // configure simulcast for camera tracks always and for\r\n    // desktop tracks only when the testing flag for maxbitrates\r\n    // in config.js is disabled.\r\n    if (this.isSimulcastOn()\r\n        && (track.getVideoType() === VideoType.CAMERA || !this.isSharingLowFpsScreen())) {\r\n        ssrcInfo = {\r\n            ssrcs: [],\r\n            groups: []\r\n        };\r\n        for (let i = 0; i < SIM_LAYER_RIDS.length; i++) {\r\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\r\n        }\r\n        ssrcInfo.groups.push({\r\n            ssrcs: ssrcInfo.ssrcs.slice(),\r\n            semantics: 'SIM'\r\n        });\r\n    } else {\r\n        ssrcInfo = {\r\n            ssrcs: [ SDPUtil.generateSsrc() ],\r\n            groups: []\r\n        };\r\n    }\r\n    if (!this.options.disableRtx) {\r\n        // Specifically use a for loop here because we'll\r\n        //  be adding to the list we're iterating over, so we\r\n        //  only want to iterate through the items originally\r\n        //  on the list\r\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\r\n\r\n        for (let i = 0; i < currNumSsrcs; ++i) {\r\n            const primarySsrc = ssrcInfo.ssrcs[i];\r\n            const rtxSsrc = SDPUtil.generateSsrc();\r\n\r\n            ssrcInfo.ssrcs.push(rtxSsrc);\r\n            ssrcInfo.groups.push({\r\n                ssrcs: [ primarySsrc, rtxSsrc ],\r\n                semantics: 'FID'\r\n            });\r\n        }\r\n    }\r\n    ssrcInfo.msid = track.storedMSID;\r\n    this.localSSRCs.set(rtcId, ssrcInfo);\r\n\r\n    return ssrcInfo;\r\n};\r\n\r\n/**\r\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\r\n * instance.\r\n * @return {string}\r\n */\r\nTraceablePeerConnection.prototype.toString = function() {\r\n    return `TPC[${this.id},p2p:${this.isP2P}]`;\r\n};\r\n\r\n/**\r\n * [Bizwell] SDP PlanB Deprecated 조치, by LeeJx2, 2022.04.05\r\n * @param {*} description \r\n * @returns \r\n */\r\nTraceablePeerConnection.prototype._mungeOpus = function(description) {\r\n    const { audioQuality } = this.options;\r\n\r\n    if (!audioQuality?.stereo && !audioQuality?.opusMaxAverageBitrate) {\r\n        return description;\r\n    }\r\n\r\n    const parsedSdp = transform.parse(description.sdp);\r\n    const mLines = parsedSdp.media;\r\n\r\n    for (const mLine of mLines) {\r\n        if (mLine.type === 'audio') {\r\n            const { payload } = mLine.rtp.find(protocol => protocol.codec === CodecMimeType.OPUS);\r\n\r\n            if (!payload) {\r\n                // eslint-disable-next-line no-continue\r\n                continue;\r\n            }\r\n\r\n            let fmtpOpus = mLine.fmtp.find(protocol => protocol.payload === payload);\r\n\r\n            if (!fmtpOpus) {\r\n                fmtpOpus = {\r\n                    payload,\r\n                    config: ''\r\n                };\r\n            }\r\n\r\n            const fmtpConfig = transform.parseParams(fmtpOpus.config);\r\n            let sdpChanged = false;\r\n\r\n            if (audioQuality?.stereo) {\r\n                fmtpConfig.stereo = 1;\r\n                sdpChanged = true;\r\n            }\r\n\r\n            if (audioQuality?.opusMaxAverageBitrate) {\r\n                fmtpConfig.maxaveragebitrate = audioQuality.opusMaxAverageBitrate;\r\n                sdpChanged = true;\r\n            }\r\n\r\n            if (!sdpChanged) {\r\n                // eslint-disable-next-line no-continue\r\n                continue;\r\n            }\r\n\r\n            let mungedConfig = '';\r\n\r\n            for (const key of Object.keys(fmtpConfig)) {\r\n                mungedConfig += `${key}=${fmtpConfig[key]}; `;\r\n            }\r\n\r\n            fmtpOpus.config = mungedConfig.trim();\r\n        }\r\n    }\r\n\r\n    return new RTCSessionDescription({\r\n        type: description.type,\r\n        sdp: transform.write(parsedSdp)\r\n    });\r\n};\r\n\r\n/**\r\n * Returns the codec that is configured on the client as the preferred video codec.\r\n * This takes into account the current order of codecs in the local description sdp.\r\n *\r\n * @returns {CodecMimeType} The codec that is set as the preferred codec to receive\r\n * video in the local SDP.\r\n */\r\n TraceablePeerConnection.prototype.getConfiguredVideoCodec = function() {\r\n    const sdp = this.peerconnection.localDescription?.sdp;\r\n    const defaultCodec = CodecMimeType.VP8;\r\n\r\n    if (!sdp) {\r\n        return defaultCodec;\r\n    }\r\n    const parsedSdp = transform.parse(sdp);\r\n    const mLine = parsedSdp.media.find(m => m.type === MediaType.VIDEO);\r\n    const codec = mLine.rtp[0].codec;\r\n\r\n    if (codec) {\r\n        return Object.values(CodecMimeType).find(value => value === codec.toLowerCase());\r\n    }\r\n\r\n    return defaultCodec;\r\n};\r\n\r\nTraceablePeerConnection.prototype._isSharingScreen = function() {\r\n    const tracks = this.getLocalVideoTracks();\r\n\r\n    return Boolean(tracks.find(track => track.videoType === VideoType.DESKTOP));\r\n};\r\n\r\n/**\r\n * Retrieves the local video tracks.\r\n *\r\n * @returns {JitsiLocalTrack|undefined} - local video tracks.\r\n */\r\n TraceablePeerConnection.prototype.getLocalVideoTracks = function() {\r\n    return this.getLocalTracks(MediaType.VIDEO);\r\n};\r\n\r\n/**\r\n * Checks if low fps screensharing is in progress.\r\n *\r\n * @private\r\n * @returns {boolean} Returns true if 5 fps screensharing is in progress, false otherwise.\r\n */\r\n TraceablePeerConnection.prototype.isSharingLowFpsScreen = function() {\r\n    return this._isSharingScreen() && this._capScreenshareBitrate;\r\n};\r\n\r\n/**\r\n * Parses the remote description and returns the sdp lines of the sources associated with a remote participant.\r\n *\r\n * @param {string} id Endpoint id of the remote participant.\r\n * @returns {Array<string>} The sdp lines that have the ssrc information.\r\n */\r\n TraceablePeerConnection.prototype.getRemoteSourceInfoByParticipant = function(id) {\r\n    const removeSsrcInfo = [];\r\n    const remoteTracks = this.getRemoteTracks(id);\r\n\r\n    if (!remoteTracks?.length) {\r\n        return removeSsrcInfo;\r\n    }\r\n    const primarySsrcs = remoteTracks.map(track => track.getSSRC());\r\n    const sdp = new SDP(this.remoteDescription.sdp);\r\n\r\n    primarySsrcs.forEach((ssrc, idx) => {\r\n        for (const media of sdp.media) {\r\n            let lines = '';\r\n            let ssrcLines = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\r\n\r\n            if (ssrcLines.length) {\r\n                if (!removeSsrcInfo[idx]) {\r\n                    removeSsrcInfo[idx] = '';\r\n                }\r\n\r\n                // Check if there are any FID groups present for the primary ssrc.\r\n                const fidLines = SDPUtil.findLines(media, `a=ssrc-group:FID ${ssrc}`);\r\n\r\n                if (fidLines.length) {\r\n                    const secondarySsrc = fidLines[0].split(' ')[2];\r\n\r\n                    lines += `${fidLines[0]}\\r\\n`;\r\n                    ssrcLines = ssrcLines.concat(SDPUtil.findLines(media, `a=ssrc:${secondarySsrc}`));\r\n                }\r\n                removeSsrcInfo[idx] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\r\n                removeSsrcInfo[idx] += lines;\r\n            }\r\n        }\r\n    });\r\n\r\n    return removeSsrcInfo;\r\n};\r\n\r\nTraceablePeerConnection.prototype.usesUnifiedPlan = function() {\r\n    return browser.usesUnifiedPlan();\r\n}","/* global __filename */\r\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\r\nimport { MediaType } from '../../service/RTC/MediaType';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport SDPUtil from './SDPUtil';\r\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Begin helper functions\r\n */\r\n/**\r\n * Updates or inserts the appropriate rtx information for primarySsrc with\r\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\r\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\r\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\r\n * @param {MLineWrap} mLine\r\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\r\n *  primary ssrc\r\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\r\n */\r\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\r\n    logger.debug(\r\n        `Updating mline to associate ${rtxSsrc}`\r\n        + `rtx ssrc with primary stream, ${primarySsrcInfo.id}`);\r\n    const primarySsrc = primarySsrcInfo.id;\r\n    const primarySsrcMsid = primarySsrcInfo.msid;\r\n    const primarySsrcCname = primarySsrcInfo.cname;\r\n\r\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\r\n\r\n    if (previousRtxSSRC === rtxSsrc) {\r\n        logger.debug(`${rtxSsrc} was already associated with ${primarySsrc}`);\r\n\r\n        return;\r\n    }\r\n    if (previousRtxSSRC) {\r\n        logger.debug(\r\n            `${primarySsrc} was previously associated with rtx`\r\n            + `${previousRtxSSRC}, removing all references to it`);\r\n\r\n        // Stream already had an rtx ssrc that is different than the one given,\r\n        //  remove all trace of the old one\r\n        mLine.removeSSRC(previousRtxSSRC);\r\n\r\n        logger.debug(`groups before filtering for ${previousRtxSSRC}`);\r\n        logger.debug(mLine.dumpSSRCGroups());\r\n\r\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\r\n    }\r\n    mLine.addSSRCAttribute({\r\n        id: rtxSsrc,\r\n        attribute: 'cname',\r\n        value: primarySsrcCname\r\n    });\r\n    mLine.addSSRCAttribute({\r\n        id: rtxSsrc,\r\n        attribute: 'msid',\r\n        value: primarySsrcMsid\r\n    });\r\n    mLine.addSSRCGroup({\r\n        semantics: 'FID',\r\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\r\n    });\r\n}\r\n\r\n/**\r\n * End helper functions\r\n */\r\n\r\n/**\r\n * Adds any missing RTX streams for video streams\r\n *  and makes sure that they remain consistent\r\n */\r\nexport default class RtxModifier {\r\n    /**\r\n     * Constructor\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Map of video ssrc to corresponding RTX\r\n         *  ssrc\r\n         */\r\n        this.correspondingRtxSsrcs = new Map();\r\n    }\r\n\r\n    /**\r\n     * Clear the cached map of primary video ssrcs to\r\n     *  their corresponding rtx ssrcs so that they will\r\n     *  not be used for the next call to modifyRtxSsrcs\r\n     */\r\n    clearSsrcCache() {\r\n        this.correspondingRtxSsrcs.clear();\r\n    }\r\n\r\n    /**\r\n     * Explicitly set the primary video ssrc -> rtx ssrc\r\n     *  mapping to be used in modifyRtxSsrcs\r\n     * @param {Map} ssrcMapping a mapping of primary video\r\n     *  ssrcs to their corresponding rtx ssrcs\r\n     */\r\n    setSsrcCache(ssrcMapping) {\r\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\r\n        this.correspondingRtxSsrcs = ssrcMapping;\r\n    }\r\n\r\n    /**\r\n     * Adds RTX ssrcs for any video ssrcs that don't\r\n     *  already have them.  If the video ssrc has been\r\n     *  seen before, and already had an RTX ssrc generated,\r\n     *  the same RTX ssrc will be used again.\r\n     * @param {string} sdpStr sdp in raw string format\r\n     */\r\n    modifyRtxSsrcs(sdpStr) {\r\n        let modified = false;\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\r\n\r\n        if (!videoMLines?.length) {\r\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n\r\n        for (const videoMLine of videoMLines) {\r\n            if (this.modifyRtxSsrcs2(videoMLine)) {\r\n                modified = true;\r\n            }\r\n        }\r\n\r\n        return modified ? sdpTransformer.toRawSDP() : sdpStr;\r\n    }\r\n\r\n    /**\r\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\r\n     *  {@link MLineWrap} instance wrapping video media as an argument.\r\n     * @param {MLineWrap} videoMLine\r\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\r\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\r\n     */\r\n    modifyRtxSsrcs2(videoMLine) {\r\n        if (videoMLine.direction === 'recvonly') {\r\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\r\n\r\n            return false;\r\n        }\r\n        if (videoMLine.getSSRCCount() < 1) {\r\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\r\n\r\n            return false;\r\n        }\r\n        logger.debug('Current ssrc mapping: ', this.correspondingRtxSsrcs);\r\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\r\n\r\n        logger.debug('Parsed primary video ssrcs ', primaryVideoSsrcs,\r\n            ' making sure all have rtx streams');\r\n        for (const ssrc of primaryVideoSsrcs) {\r\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\r\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\r\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\r\n\r\n            if (!correspondingRtxSsrc) {\r\n                // If there's one in the sdp already for it, we'll just set\r\n                //  that as the corresponding one\r\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\r\n\r\n                if (previousAssociatedRtxStream) {\r\n                    logger.debug(\r\n                        `Rtx stream ${previousAssociatedRtxStream} `\r\n                        + 'already existed in the sdp as an rtx stream for '\r\n                        + `${ssrc}`);\r\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\r\n                } else {\r\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\r\n                    logger.debug(`Generated rtx ssrc ${correspondingRtxSsrc} `\r\n                                 + `for ssrc ${ssrc}`);\r\n                }\r\n                logger.debug(`Caching rtx ssrc ${correspondingRtxSsrc} `\r\n                             + `for video ssrc ${ssrc}`);\r\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\r\n            }\r\n            updateAssociatedRtxStream(\r\n                videoMLine,\r\n                {\r\n                    id: ssrc,\r\n                    cname,\r\n                    msid\r\n                },\r\n                correspondingRtxSsrc);\r\n        }\r\n\r\n        // FIXME we're not looking into much details whether the SDP has been\r\n        // modified or not once the precondition requirements are met.\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Strip all rtx streams from the given sdp\r\n     * @param {string} sdpStr sdp in raw string format\r\n     * @returns {string} sdp string with all rtx streams stripped\r\n     */\r\n    stripRtx(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLines = sdpTransformer.selectMedia(MediaType.VIDEO);\r\n\r\n        if (!videoMLines?.length) {\r\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n\r\n        for (const videoMLine of videoMLines) {\r\n            if (videoMLine.direction !== MediaDirection.RECVONLY\r\n                && videoMLine.getSSRCCount()\r\n                && videoMLine.containsAnySSRCGroups()) {\r\n                const fidGroups = videoMLine.findGroups('FID');\r\n\r\n        // Remove the fid groups from the mline\r\n\r\n        videoMLine.removeGroupsBySemantics('FID');\r\n\r\n        // Get the rtx ssrcs and remove them from the mline\r\n        for (const fidGroup of fidGroups) {\r\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\r\n\r\n                    videoMLine.removeSSRC(rtxSsrc);\r\n                }\r\n            }\r\n        }\r\n\r\n        return sdpTransformer.toRawSDP();\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { MediaType } from '../../service/RTC/MediaType';\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport {\r\n    parsePrimarySSRC,\r\n    parseSecondarySSRC,\r\n    SdpTransformWrap\r\n} from './SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Handles the work of keeping video ssrcs consistent across multiple\r\n * o/a cycles, making it such that all stream operations can be\r\n * kept local and do not need to be signaled.\r\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\r\n * the primary video stream\r\n */\r\nexport default class SdpConsistency {\r\n    /**\r\n     * Constructor\r\n     * @param {string} logPrefix the log prefix appended to every logged\r\n     * message, currently used to distinguish for which\r\n     * <tt>TraceablePeerConnection</tt> the instance works.\r\n     */\r\n    constructor(logPrefix) {\r\n        this.clearVideoSsrcCache();\r\n        this.logPrefix = logPrefix;\r\n    }\r\n\r\n    /**\r\n     * Clear the cached video primary and primary rtx ssrcs so that\r\n     *  they will not be used for the next call to\r\n     *  makeVideoPrimarySsrcsConsistent\r\n     */\r\n    clearVideoSsrcCache() {\r\n        this.cachedPrimarySsrc = null;\r\n        this.injectRecvOnly = false;\r\n    }\r\n\r\n    /**\r\n     * Explicitly set the primary ssrc to be used in\r\n     *  makeVideoPrimarySsrcsConsistent\r\n     * @param {number} primarySsrc the primarySsrc to be used\r\n     *  in future calls to makeVideoPrimarySsrcsConsistent\r\n     * @throws Error if <tt>primarySsrc</tt> is not a number\r\n     */\r\n    setPrimarySsrc(primarySsrc) {\r\n        if (typeof primarySsrc !== 'number') {\r\n            throw new Error('Primary SSRC must be a number!');\r\n        }\r\n        this.cachedPrimarySsrc = primarySsrc;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not there is a primary video SSRC cached already.\r\n     * @return {boolean}\r\n     */\r\n    hasPrimarySsrcCached() {\r\n        return Boolean(this.cachedPrimarySsrc);\r\n    }\r\n\r\n    /**\r\n     * Given an sdp string, either:\r\n     *  1) record the primary video and primary rtx ssrcs to be\r\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\r\n     *  2) change the primary and primary rtx ssrcs in the given sdp\r\n     *   to match the ones previously cached\r\n     * @param {string} sdpStr the sdp string to (potentially)\r\n     *  change to make the video ssrcs consistent\r\n     * @returns {string} a (potentially) modified sdp string\r\n     *  with ssrcs consistent with this class' cache\r\n     */\r\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\r\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\r\n        const videoMLine = sdpTransformer.selectMedia(MediaType.VIDEO)?.[0];\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(\r\n                `${this.logPrefix} no 'video' media found in the sdp: `\r\n                    + `${sdpStr}`);\r\n\r\n            return sdpStr;\r\n        }\r\n\r\n        if (videoMLine.direction === 'recvonly') {\r\n            // If the mline is recvonly, we'll add the primary\r\n            //  ssrc as a recvonly ssrc\r\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\r\n                videoMLine.addSSRCAttribute({\r\n                    id: this.cachedPrimarySsrc,\r\n                    attribute: 'cname',\r\n                    value: `recvonly-${this.cachedPrimarySsrc}`\r\n                });\r\n            } else {\r\n                logger.info(\r\n                    `${this.logPrefix} no SSRC found for the recvonly video`\r\n                        + 'stream!');\r\n            }\r\n        } else {\r\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\r\n\r\n            if (!newPrimarySsrc) {\r\n                logger.info(\r\n                    `${this.logPrefix} sdp-consistency couldn't`\r\n                        + ' parse new primary ssrc');\r\n\r\n                return sdpStr;\r\n            }\r\n            if (this.cachedPrimarySsrc) {\r\n                logger.info(\r\n                    `${this.logPrefix} sdp-consistency replacing new ssrc`\r\n                        + `${newPrimarySsrc} with cached `\r\n                        + `${this.cachedPrimarySsrc}`);\r\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\r\n                for (const group of videoMLine.ssrcGroups) {\r\n                    if (group.semantics === 'FID') {\r\n                        const primarySsrc = parsePrimarySSRC(group);\r\n                        const rtxSsrc = parseSecondarySSRC(group);\r\n\r\n                        // eslint-disable-next-line max-depth\r\n                        if (primarySsrc === newPrimarySsrc) {\r\n                            group.ssrcs\r\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                this.cachedPrimarySsrc = newPrimarySsrc;\r\n                logger.info(\r\n                    `${this.logPrefix} sdp-consistency caching primary ssrc`\r\n                        + `${this.cachedPrimarySsrc}`);\r\n            }\r\n\r\n            this.injectRecvOnly = true;\r\n        }\r\n\r\n        return sdpTransformer.toRawSDP();\r\n    }\r\n}\r\n","import * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\n\r\nimport JitsiTrack from './JitsiTrack';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\nconst RTCEvents = require('../../service/RTC/RTCEvents');\r\n\r\nlet ttfmTrackerAudioAttached = false;\r\nlet ttfmTrackerVideoAttached = false;\r\n\r\n/**\r\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\r\n * container for every event in the list.\r\n */\r\nconst containerEvents = [\r\n    'abort', 'canplay', 'canplaythrough', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart',\r\n    'pause', 'play', 'playing', 'ratechange', 'stalled', 'suspend', 'waiting'\r\n];\r\n\r\n/* eslint-disable max-params */\r\n\r\n/**\r\n * Represents a single media track (either audio or video).\r\n */\r\nexport default class JitsiRemoteTrack extends JitsiTrack {\r\n    /**\r\n     * Creates new JitsiRemoteTrack instance.\r\n     * @param {RTC} rtc the RTC service instance.\r\n     * @param {JitsiConference} conference the conference to which this track\r\n     *        belongs to\r\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\r\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\r\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\r\n     *        the new JitsiRemoteTrack\r\n     * @param {MediaType} mediaType the type of the media\r\n     * @param {VideoType} videoType the type of the video if applicable\r\n     * @param {number} ssrc the SSRC number of the Media Stream\r\n     * @param {boolean} muted the initial muted state\r\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\r\n     * P2P session\r\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\r\n     * @constructor\r\n     */\r\n    constructor(\r\n            rtc,\r\n            conference,\r\n            ownerEndpointId,\r\n            stream,\r\n            track,\r\n            mediaType,\r\n            videoType,\r\n            ssrc,\r\n            muted,\r\n            isP2P,\r\n            sourceName) {\r\n        super(\r\n            conference,\r\n            stream,\r\n            track,\r\n            () => {\r\n                // Nothing to do if the track is inactive.\r\n            },\r\n            mediaType,\r\n            videoType);\r\n        this.rtc = rtc;\r\n\r\n        // Prevent from mixing up type of SSRC which should be a number\r\n        if (typeof ssrc !== 'number') {\r\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\r\n        }\r\n        this.ssrc = ssrc;\r\n        this.ownerEndpointId = ownerEndpointId;\r\n        this.muted = muted;\r\n        this.isP2P = isP2P;\r\n        this._sourceName = sourceName;\r\n        this._trackStreamingStatus = null;\r\n        this._trackStreamingStatusImpl = null;\r\n\r\n        /**\r\n         * This holds the timestamp indicating when remote video track entered forwarded sources set. Track entering\r\n         * forwardedSources will have streaming status restoring and when we start receiving video will become active,\r\n         * but if video is not received for certain time {@link DEFAULT_RESTORING_TIMEOUT} that track streaming status\r\n         * will become interrupted.\r\n         */\r\n        this._enteredForwardedSourcesTimestamp = null;\r\n\r\n        this.addEventListener = this.on = this._addEventListener.bind(this);\r\n        this.removeEventListener = this.off = this._removeEventListener.bind(this);\r\n\r\n        logger.debug(`New remote track added: ${this}`);\r\n\r\n        // we want to mark whether the track has been ever muted\r\n        // to detect ttfm events for startmuted conferences, as it can\r\n        // significantly increase ttfm values\r\n        this.hasBeenMuted = muted;\r\n\r\n        // Bind 'onmute' and 'onunmute' event handlers\r\n        if (this.rtc && this.track) {\r\n            this._bindTrackHandlers();\r\n        }\r\n        this._containerHandlers = {};\r\n        containerEvents.forEach(event => {\r\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\r\n        });\r\n    }\r\n\r\n    /* eslint-enable max-params */\r\n    /**\r\n     * Attaches the track handlers.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    _bindTrackHandlers() {\r\n        this.track.addEventListener('mute', () => this._onTrackMute());\r\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\r\n        this.track.addEventListener('ended', () => {\r\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Overrides addEventListener method to init TrackStreamingStatus instance when there are listeners for the\r\n     * {@link JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED} event.\r\n     *\r\n     * @param {string} event - event name\r\n     * @param {function} handler - event handler\r\n     */\r\n    _addEventListener(event, handler) {\r\n        super.addListener(event, handler);\r\n\r\n        if (FeatureFlags.isSourceNameSignalingEnabled()\r\n            && event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\r\n            && this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\r\n            && !this._trackStreamingStatusImpl\r\n        ) {\r\n            this._initTrackStreamingStatus();\r\n            logger.debug(`Initializing track streaming status: ${this._sourceName}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Overrides removeEventListener method to dispose TrackStreamingStatus instance.\r\n     *\r\n     * @param {string} event - event name\r\n     * @param {function} handler - event handler\r\n     */\r\n    _removeEventListener(event, handler) {\r\n        super.removeListener(event, handler);\r\n\r\n        if (FeatureFlags.isSourceNameSignalingEnabled()\r\n            && event === JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED\r\n            && !this.listenerCount(JitsiTrackEvents.TRACK_STREAMING_STATUS_CHANGED)\r\n        ) {\r\n            this._disposeTrackStreamingStatus();\r\n            logger.debug(`Disposing track streaming status: ${this._sourceName}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the track is muted. Emits an event notifying\r\n     * listeners of the mute event.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTrackMute() {\r\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\r\n\r\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the track is unmuted. Emits an event notifying\r\n     * listeners of the mute event.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTrackUnmute() {\r\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\r\n\r\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\r\n    }\r\n\r\n    /**\r\n     * Removes attached event listeners and dispose TrackStreamingStatus .\r\n     *\r\n     * @returns {Promise}\r\n     */\r\n    dispose() {\r\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n            this._disposeTrackStreamingStatus();\r\n        }\r\n\r\n        return super.dispose();\r\n    }\r\n\r\n    /**\r\n     * Sets current muted status and fires an events for the change.\r\n     * @param value the muted status.\r\n     */\r\n    setMute(value) {\r\n        if (this.muted === value) {\r\n            return;\r\n        }\r\n\r\n        if (value) {\r\n            this.hasBeenMuted = true;\r\n        }\r\n\r\n        // we can have a fake video stream\r\n        if (this.stream) {\r\n            this.stream.muted = value;\r\n        }\r\n\r\n        this.muted = value;\r\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\r\n    }\r\n\r\n    /**\r\n     * Returns the current muted status of the track.\r\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\r\n     * muted and <tt>false</tt> otherwise.\r\n     */\r\n    isMuted() {\r\n        return this.muted;\r\n    }\r\n\r\n    /**\r\n     * Returns the participant id which owns the track.\r\n     *\r\n     * @returns {string} the id of the participants. It corresponds to the\r\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\r\n     */\r\n    getParticipantId() {\r\n        return this.ownerEndpointId;\r\n    }\r\n\r\n    /**\r\n     * Return false;\r\n     */\r\n    isLocal() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns the synchronization source identifier (SSRC) of this remote\r\n     * track.\r\n     *\r\n     * @returns {number} the SSRC of this remote track.\r\n     */\r\n    getSSRC() {\r\n        return this.ssrc;\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the tracks source name\r\n     *\r\n     * @returns {string} the track's source name\r\n     */\r\n    getSourceName() {\r\n        return this._sourceName;\r\n    }\r\n\r\n    /**\r\n     * Changes the video type of the track.\r\n     *\r\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\r\n     */\r\n    _setVideoType(type) {\r\n        if (this.videoType === type) {\r\n            return;\r\n        }\r\n        this.videoType = type;\r\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\r\n    }\r\n\r\n    /**\r\n     * Handles track play events.\r\n     */\r\n    _playCallback() {\r\n        if (!this.conference.room) {\r\n            return;\r\n        }\r\n\r\n        const type = this.isVideoTrack() ? 'video' : 'audio';\r\n\r\n        const now = window.performance.now();\r\n\r\n        console.log(`(TIME) Render ${type}:\\t`, now);\r\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\r\n\r\n        // The conference can be started without calling GUM\r\n        // FIXME if there would be a module for connection times this kind\r\n        // of logic (gumDuration or ttfm) should end up there\r\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\r\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\r\n        const gumDuration\r\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\r\n\r\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\r\n        // waits until there are 2 participants to start Jingle sessions.\r\n        const ttfm = now\r\n            - (this.conference.getConnectionTimes()['session.initiate']\r\n                - this.conference.getConnectionTimes()['muc.joined'])\r\n            - gumDuration;\r\n\r\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\r\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\r\n\r\n        Statistics.sendAnalytics(createTtfmEvent(\r\n            {\r\n                'media_type': type,\r\n                muted: this.hasBeenMuted,\r\n                value: ttfm\r\n            }));\r\n\r\n    }\r\n\r\n    /**\r\n     * Attach time to first media tracker only if there is conference and only\r\n     * for the first element.\r\n     * @param container the HTML container which can be 'video' or 'audio'\r\n     * element.\r\n     * @private\r\n     */\r\n    _attachTTFMTracker(container) {\r\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\r\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\r\n            return;\r\n        }\r\n\r\n        if (this.isAudioTrack()) {\r\n            ttfmTrackerAudioAttached = true;\r\n        }\r\n        if (this.isVideoTrack()) {\r\n            ttfmTrackerVideoAttached = true;\r\n        }\r\n\r\n        container.addEventListener('canplay', this._playCallback.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been attached to a new container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackAttach(container) {\r\n        logger.debug(`Track has been attached to a container: ${this}`);\r\n\r\n        containerEvents.forEach(event => {\r\n            container.addEventListener(event, this._containerHandlers[event]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Called when the track has been detached from a container.\r\n     *\r\n     * @param {HTMLElement} container the HTML container which can be 'video' or\r\n     * 'audio' element.\r\n     * @private\r\n     */\r\n    _onTrackDetach(container) {\r\n        logger.debug(`Track has been detached from a container: ${this}`);\r\n\r\n        containerEvents.forEach(event => {\r\n            container.removeEventListener(event, this._containerHandlers[event]);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * An event handler for events triggered by the attached container.\r\n     *\r\n     * @param {string} type - The type of the event.\r\n     */\r\n    _containerEventHandler(type) {\r\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\r\n    }\r\n\r\n    /**\r\n     * Returns a string with a description of the current status of the track.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    _getStatus() {\r\n        const { enabled, muted, readyState } = this.track;\r\n\r\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\r\n    }\r\n\r\n    /**\r\n     * Creates a text representation of this remote track instance.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\r\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\r\n    }\r\n\r\n    /**\r\n     * Initializes trackStreamingStatusImpl.\r\n     */\r\n     _initTrackStreamingStatus() {\r\n        const config = this.conference.options.config;\r\n\r\n        this._trackStreamingStatus = TrackStreamingStatus.ACTIVE;\r\n\r\n        this._trackStreamingStatusImpl = new TrackStreamingStatusImpl(\r\n            this.rtc,\r\n            this.conference,\r\n            this,\r\n            {\r\n                // These options are not public API, leaving it here only as an entry point through config for\r\n                // tuning up purposes. Default values should be adjusted as soon as optimal values are discovered.\r\n                p2pRtcMuteTimeout: config._p2pConnStatusRtcMuteTimeout,\r\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\r\n                outOfForwardedSourcesTimeout: config._peerConnStatusOutOfLastNTimeout\r\n            });\r\n\r\n        this._trackStreamingStatusImpl.init();\r\n    }\r\n\r\n    /**\r\n     * Disposes trackStreamingStatusImpl and clears trackStreamingStatus.\r\n     */\r\n    _disposeTrackStreamingStatus() {\r\n        if (this._trackStreamingStatusImpl) {\r\n            this._trackStreamingStatusImpl.dispose();\r\n            this._trackStreamingStatusImpl = null;\r\n            this._trackStreamingStatus = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates track's streaming status.\r\n     *\r\n     * @param {string} state the current track streaming state. {@link TrackStreamingStatus}.\r\n     */\r\n    _setTrackStreamingStatus(status) {\r\n        this._trackStreamingStatus = status;\r\n    }\r\n\r\n    /**\r\n     * Returns track's streaming status.\r\n     *\r\n     * @returns {string} the streaming status <tt>TrackStreamingStatus</tt> of the track. Returns null\r\n     * if trackStreamingStatusImpl hasn't been initialized.\r\n     *\r\n     * {@link TrackStreamingStatus}.\r\n     */\r\n    getTrackStreamingStatus() {\r\n        return this._trackStreamingStatus;\r\n    }\r\n\r\n    /**\r\n     * Clears the timestamp of when the track entered forwarded sources.\r\n     */\r\n    _clearEnteredForwardedSourcesTimestamp() {\r\n        this._enteredForwardedSourcesTimestamp = null;\r\n    }\r\n\r\n    /**\r\n     * Updates the timestamp of when the track entered forwarded sources.\r\n     *\r\n     * @param {number} timestamp the time in millis\r\n     */\r\n    _setEnteredForwardedSourcesTimestamp(timestamp) {\r\n        this._enteredForwardedSourcesTimestamp = timestamp;\r\n    }\r\n\r\n    /**\r\n     * Returns the timestamp of when the track entered forwarded sources.\r\n     *\r\n     * @returns {number} the time in millis\r\n     */\r\n    _getEnteredForwardedSourcesTimestamp() {\r\n        return this._enteredForwardedSourcesTimestamp;\r\n    }\r\n\r\n    /**\r\n     * Creates a text representation of this remote track instance.\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\r\n            this.getSSRC()}, p2p: ${this.isP2P}, sourceName: ${this._sourceName}, status: ${this._getStatus()}]`;\r\n    }\r\n}\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport { MediaDirection } from '../../service/RTC/MediaDirection';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport { getSourceNameForJitsiTrack } from '../../service/RTC/SignalingLayer';\r\nimport { VideoType } from '../../service/RTC/VideoType';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\r\n * description getter. Modifies the SDP, so that it will contain muted local\r\n * video tracks description, even though their underlying {MediaStreamTrack}s\r\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\r\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\r\n * side.\r\n */\r\nexport default class LocalSdpMunger {\r\n\r\n    /**\r\n     * Creates new <tt>LocalSdpMunger</tt> instance.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc\r\n     */\r\n    constructor(tpc, localEndpointId) {\r\n        this.tpc = tpc;\r\n        this.localEndpointId = localEndpointId;\r\n        this.audioSourcesToMsidMap = new Map();\r\n        this.videoSourcesToMsidMap = new Map();\r\n    }\r\n\r\n    /**\r\n     * Makes sure that muted local video tracks associated with the parent\r\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\r\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\r\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\r\n     * removed from the peerconnection).\r\n     *\r\n     * NOTE 1 video track is assumed\r\n     *\r\n     * @param {SdpTransformWrap} transformer the transformer instance which will\r\n     * be used to process the SDP.\r\n     * @return {boolean} <tt>true</tt> if there were any modifications to\r\n     * the SDP wrapped by <tt>transformer</tt>.\r\n     * @private\r\n     */\r\n    _addMutedLocalVideoTracksToSDP(transformer) {\r\n        // Go over each video tracks and check if the SDP has to be changed\r\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\r\n\r\n        if (!localVideos.length) {\r\n            return false;\r\n        } else if (localVideos.length !== 1) {\r\n            logger.error(\r\n                `${this.tpc} there is more than 1 video track ! `\r\n                    + 'Strange things may happen !', localVideos);\r\n        }\r\n\r\n        const videoMLine = transformer.selectMedia(MediaType.VIDEO)?.[0];\r\n\r\n        if (!videoMLine) {\r\n            logger.debug(\r\n                `${this.tpc} unable to hack local video track SDP`\r\n                    + '- no \"video\" media');\r\n\r\n            return false;\r\n        }\r\n\r\n        let modified = false;\r\n\r\n        for (const videoTrack of localVideos) {\r\n            const muted = videoTrack.isMuted();\r\n            const mediaStream = videoTrack.getOriginalStream();\r\n            const isCamera = videoTrack.videoType === VideoType.CAMERA;\r\n\r\n            // During the mute/unmute operation there are periods of time when\r\n            // the track's underlying MediaStream is not added yet to\r\n            // the PeerConnection. The SDP needs to be munged in such case.\r\n            const isInPeerConnection\r\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\r\n            const shouldFakeSdp = isCamera && (muted || !isInPeerConnection);\r\n\r\n            if (!shouldFakeSdp) {\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            // Inject removed SSRCs\r\n            const requiredSSRCs\r\n                = this.tpc.isSimulcastOn()\r\n                    ? this.tpc.simulcast.ssrcCache\r\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\r\n\r\n            if (!requiredSSRCs.length) {\r\n                logger.error(\r\n                    `No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\r\n\r\n                continue; // eslint-disable-line no-continue\r\n            }\r\n\r\n            modified = true;\r\n\r\n            // We need to fake sendrecv.\r\n            // NOTE the SDP produced here goes only to Jicofo and is never set\r\n            // as localDescription. That's why\r\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\r\n            videoMLine.direction = 'sendrecv';\r\n\r\n            // Check if the recvonly has MSID\r\n            const primarySSRC = requiredSSRCs[0];\r\n\r\n            // FIXME The cname could come from the stream, but may turn out to\r\n            // be too complex. It is fine to come up with any value, as long as\r\n            // we only care about the actual SSRC values when deciding whether\r\n            // or not an update should be sent.\r\n            const primaryCname = `injected-${primarySSRC}`;\r\n\r\n            for (const ssrcNum of requiredSSRCs) {\r\n                // Remove old attributes\r\n                videoMLine.removeSSRC(ssrcNum);\r\n\r\n                // Inject\r\n                logger.debug(\r\n                    `${this.tpc} injecting video SSRC: ${ssrcNum} for ${\r\n                        videoTrack}`);\r\n                videoMLine.addSSRCAttribute({\r\n                    id: ssrcNum,\r\n                    attribute: 'cname',\r\n                    value: primaryCname\r\n                });\r\n                videoMLine.addSSRCAttribute({\r\n                    id: ssrcNum,\r\n                    attribute: 'msid',\r\n                    value: videoTrack.storedMSID\r\n                });\r\n            }\r\n            if (requiredSSRCs.length > 1) {\r\n                const group = {\r\n                    ssrcs: requiredSSRCs.join(' '),\r\n                    semantics: 'SIM'\r\n                };\r\n\r\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\r\n                    // Inject the group\r\n                    logger.debug(\r\n                        `${this.tpc} injecting SIM group for ${videoTrack}`,\r\n                        group);\r\n                    videoMLine.addSSRCGroup(group);\r\n                }\r\n            }\r\n\r\n            // Insert RTX\r\n            // FIXME in P2P RTX is used by Chrome regardless of config option\r\n            // status. Because of that 'source-remove'/'source-add'\r\n            // notifications are still sent to remove/add RTX SSRC and FID group\r\n            if (!this.tpc.options.disableRtx) {\r\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\r\n            }\r\n        }\r\n\r\n        return modified;\r\n    }\r\n\r\n    /**\r\n     * Returns a string that can be set as the MSID attribute for a source.\r\n     *\r\n     * @param {string} mediaType - Media type of the source.\r\n     * @param {string} trackId - Id of the MediaStreamTrack associated with the source.\r\n     * @param {string} streamId - Id of the MediaStream associated with the source.\r\n     * @returns {string|null}\r\n     */\r\n    _generateMsidAttribute(mediaType, trackId, streamId = null) {\r\n        if (!(mediaType && trackId)) {\r\n            logger.error(`Unable to munge local MSID - track id=${trackId} or media type=${mediaType} is missing`);\r\n\r\n            return null;\r\n        }\r\n        const pcId = this.tpc.id;\r\n\r\n        // Handle a case on Firefox when the browser doesn't produce a 'a:ssrc' line with the 'msid' attribute or has\r\n        // '-' for the stream id part of the msid line. Jicofo needs an unique identifier to be associated with a ssrc\r\n        // and uses the msid for that.\r\n        if (streamId === '-' || !streamId) {\r\n            return `${this.localEndpointId}-${mediaType}-${pcId} ${trackId}-${pcId}`;\r\n        }\r\n\r\n        return `${streamId}-${pcId} ${trackId}-${pcId}`;\r\n    }\r\n\r\n    /**\r\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending the id of {@link LocalSdpMunger#tpc} at the end,\r\n     * preceding by a dash sign.\r\n     *\r\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\r\n     * session description which will be modified in place.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _transformMediaIdentifiers(mediaSection) {\r\n        const mediaType = mediaSection.mLine?.type;\r\n        const pcId = this.tpc.id;\r\n\r\n        for (const ssrcLine of mediaSection.ssrcs) {\r\n            switch (ssrcLine.attribute) {\r\n            case 'cname':\r\n            case 'label':\r\n            case 'mslabel':\r\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\r\n                break;\r\n            case 'msid': {\r\n                if (ssrcLine.value) {\r\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\r\n\r\n                    let streamId = streamAndTrackIDs[0];\r\n                    const trackId = streamAndTrackIDs[1];\r\n\r\n                    if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                        // Always overwrite streamId since we want the msid to be in this format even if the browser\r\n                        // generates one (in p2p mode).\r\n                        streamId = `${this.localEndpointId}-${mediaType}`;\r\n\r\n                        // eslint-disable-next-line max-depth\r\n                        if (mediaType === MediaType.VIDEO) {\r\n                            // eslint-disable-next-line max-depth\r\n                            if (!this.videoSourcesToMsidMap.has(trackId)) {\r\n                                streamId = `${streamId}-${this.videoSourcesToMsidMap.size}`;\r\n                                this.videoSourcesToMsidMap.set(trackId, streamId);\r\n                            }\r\n                        } else if (!this.audioSourcesToMsidMap.has(trackId)) {\r\n                            streamId = `${streamId}-${this.audioSourcesToMsidMap.size}`;\r\n                            this.audioSourcesToMsidMap.set(trackId, streamId);\r\n                        }\r\n\r\n                        streamId = mediaType === MediaType.VIDEO\r\n                            ? this.videoSourcesToMsidMap.get(trackId)\r\n                            : this.audioSourcesToMsidMap.get(trackId);\r\n                    }\r\n                    ssrcLine.value = this._generateMsidAttribute(mediaType, trackId, streamId);\r\n                } else {\r\n                    logger.warn(`Unable to munge local MSID - weird format detected: ${ssrcLine.value}`);\r\n                }\r\n                break;\r\n            }\r\n            }\r\n        }\r\n\r\n        // Additional transformations related to MSID are applicable to Unified-plan implementation only.\r\n        if (!this.tpc.usesUnifiedPlan()) {\r\n            return;\r\n        }\r\n\r\n        // If the msid attribute is missing, then remove the ssrc from the transformed description so that a\r\n        // source-remove is signaled to Jicofo. This happens when the direction of the transceiver (or m-line)\r\n        // is set to 'inactive' or 'recvonly' on Firefox, Chrome (unified) and Safari.\r\n        const mediaDirection = mediaSection.mLine?.direction;\r\n\r\n        if (mediaDirection === MediaDirection.RECVONLY || mediaDirection === MediaDirection.INACTIVE) {\r\n            mediaSection.ssrcs = undefined;\r\n            mediaSection.ssrcGroups = undefined;\r\n\r\n        // Add the msid attribute if it is missing when the direction is sendrecv/sendonly. Firefox doesn't produce a\r\n        // a=ssrc line with msid attribute for p2p connection.\r\n        } else {\r\n            const msidLine = mediaSection.mLine?.msid;\r\n            const trackId = msidLine && msidLine.split(' ')[1];\r\n            const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\r\n\r\n            for (const source of sources) {\r\n                const msidExists = mediaSection.ssrcs\r\n                    .find(ssrc => ssrc.id === source && ssrc.attribute === 'msid');\r\n\r\n                if (!msidExists && trackId) {\r\n                    const generatedMsid = this._generateMsidAttribute(mediaType, trackId);\r\n\r\n                    mediaSection.ssrcs.push({\r\n                        id: source,\r\n                        attribute: 'msid',\r\n                        value: generatedMsid\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Maybe modifies local description to fake local video tracks SDP when\r\n     * those are muted.\r\n     *\r\n     * @param {object} desc the WebRTC SDP object instance for the local\r\n     * description.\r\n     * @returns {RTCSessionDescription}\r\n     */\r\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\r\n        if (!desc) {\r\n            throw new Error('No local description passed in.');\r\n        }\r\n\r\n        const transformer = new SdpTransformWrap(desc.sdp);\r\n\r\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\r\n            return new RTCSessionDescription({\r\n                type: desc.type,\r\n                sdp: transformer.toRawSDP()\r\n            });\r\n        }\r\n\r\n        return desc;\r\n    }\r\n\r\n    /**\r\n     * This transformation will make sure that stream identifiers are unique\r\n     * across all of the local PeerConnections even if the same stream is used\r\n     * by multiple instances at the same time.\r\n     * Each PeerConnection assigns different SSRCs to the same local\r\n     * MediaStream, but the MSID remains the same as it's used to identify\r\n     * the stream by the WebRTC backend. The transformation will append\r\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\r\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\r\n     *\r\n     * @param {RTCSessionDescription} sessionDesc - The local session\r\n     * description (this instance remains unchanged).\r\n     * @return {RTCSessionDescription} - Transformed local session description\r\n     * (a modified copy of the one given as the input).\r\n     */\r\n    transformStreamIdentifiers(sessionDesc) {\r\n        // FIXME similar check is probably duplicated in all other transformers\r\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\r\n            return sessionDesc;\r\n        }\r\n\r\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\r\n        const audioMLine = transformer.selectMedia(MediaType.AUDIO)?.[0];\r\n\r\n        if (audioMLine) {\r\n            this._transformMediaIdentifiers(audioMLine);\r\n            this._injectSourceNames(audioMLine);\r\n        }\r\n\r\n        const videoMlines = transformer.selectMedia(MediaType.VIDEO);\r\n\r\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\r\n            videoMlines.splice(1);\r\n        }\r\n\r\n        for (const videoMLine of videoMlines) {\r\n            this._transformMediaIdentifiers(videoMLine);\r\n            this._injectSourceNames(videoMLine);\r\n        }\r\n\r\n        return new RTCSessionDescription({\r\n            type: sessionDesc.type,\r\n            sdp: transformer.toRawSDP()\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Injects source names. Source names are need to for multiple streams per endpoint support. The final plan is to\r\n     * use the \"mid\" attribute for source names, but because the SDP to Jingle conversion still operates in the Plan-B\r\n     * semantics (one source name per media), a custom \"name\" attribute is injected into SSRC lines..\r\n     *\r\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the session description which will be\r\n     * modified in place.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _injectSourceNames(mediaSection) {\r\n        if (!FeatureFlags.isSourceNameSignalingEnabled()) {\r\n            return;\r\n        }\r\n\r\n        const sources = [ ...new Set(mediaSection.mLine?.ssrcs?.map(s => s.id)) ];\r\n        const mediaType = mediaSection.mLine?.type;\r\n\r\n        if (!mediaType) {\r\n            throw new Error('_transformMediaIdentifiers - no media type in mediaSection');\r\n        }\r\n\r\n        for (const source of sources) {\r\n            const nameExists = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'name');\r\n            const msid = mediaSection.ssrcs.find(ssrc => ssrc.id === source && ssrc.attribute === 'msid')?.value;\r\n            let trackIndex;\r\n\r\n            if (msid) {\r\n                const streamId = msid.split(' ')[0];\r\n\r\n                trackIndex = streamId.split('-')[2];\r\n            }\r\n\r\n            if (!nameExists) {\r\n                // Inject source names as a=ssrc:3124985624 name:endpointA-v0\r\n                mediaSection.ssrcs.push({\r\n                    id: source,\r\n                    attribute: 'name',\r\n                    value: getSourceNameForJitsiTrack(this.localEndpointId, mediaType, trackIndex)\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { MediaDirection } from '../../service/RTC/MediaDirection';\r\nimport { MediaType } from '../../service/RTC/MediaType';\r\n\r\nimport * as transform from 'sdp-transform';\r\n\r\nconst DEFAULT_NUM_OF_LAYERS = 3;\r\n\r\ninterface Description {\r\n    type: RTCSdpType;\r\n    sdp: string;\r\n}\r\n\r\ninterface Options {\r\n    numOfLayers?: number\r\n}\r\n\r\n/**\r\n * This class handles SDP munging for enabling simulcast for local video streams in Unified plan. A set of random SSRCs\r\n * are generated for the higher layer streams and they are cached for a given mid. The cached SSRCs are then reused on\r\n * the subsequent iterations while munging the local description. This class also handles imploding of the simulcast\r\n * SSRCs for remote endpoints into the primary FID group in remote description since Jicofo signals all SSRCs relevant\r\n * to a given endpoint.\r\n */\r\nexport default class SdpSimulcast {\r\n    _options: Options;\r\n    _ssrcCache: Map<string, Array<number>>;\r\n\r\n    /**\r\n     * Creates a new instance.\r\n     *\r\n     * @param options\r\n     */\r\n    constructor(options: Options) {\r\n        this._options = options;\r\n        this._ssrcCache = new Map();\r\n\r\n        if (!this._options.numOfLayers) {\r\n            this._options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the given media description using the SSRCs that were cached for the mid associated\r\n     * with the media description and returns the modified media description.\r\n     *\r\n     * @param mLine\r\n     * @returns\r\n     */\r\n     _fillSsrcsFromCache(mLine) : any {\r\n        const mid = mLine.mid;\r\n        const cachedSsrcs = this._ssrcCache.get(mid);\r\n        const newSsrcs = this._parseSimLayers(mLine);\r\n        const newMsid = this._getSsrcAttribute(mLine, newSsrcs[0], 'msid');\r\n        const newCname = this._getSsrcAttribute(mLine, newSsrcs[0], 'cname');\r\n\r\n        mLine.ssrcs = [];\r\n        mLine.ssrcGroups = [];\r\n\r\n        for (const ssrc of cachedSsrcs) {\r\n            mLine.ssrcs.push({\r\n                id: ssrc,\r\n                attribute: 'msid',\r\n                value: newMsid\r\n            });\r\n            mLine.ssrcs.push({\r\n                id: ssrc,\r\n                attribute: 'cname',\r\n                value: newCname\r\n            });\r\n        }\r\n\r\n        mLine.ssrcGroups.push({\r\n            semantics: 'SIM',\r\n            ssrcs: cachedSsrcs.join(' ')\r\n        });\r\n\r\n        return mLine;\r\n    }\r\n\r\n    /**\r\n     * Generates a new set of SSRCs for the higher simulcast layers/streams and adds the attributes and SIM group to\r\n     * the given media description and returns the modified media description.\r\n     *\r\n     * @param mLine\r\n     * @param primarySsrc\r\n     * @returns\r\n     */\r\n    _generateNewSsrcsForSimulcast(mLine, primarySsrc: number) : any {\r\n        const cname = this._getSsrcAttribute(mLine, primarySsrc, 'cname');\r\n        let msid = this._getSsrcAttribute(mLine, primarySsrc, 'msid');\r\n        const addAssociatedAttributes = (mLine, ssrc: number) => {\r\n            mLine.ssrcs.push({\r\n                id: ssrc,\r\n                attribute: 'cname',\r\n                value: cname\r\n            });\r\n            mLine.ssrcs.push({\r\n                id: ssrc,\r\n                attribute: 'msid',\r\n                value: msid\r\n            });\r\n        }\r\n\r\n        // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present (only cname attributes are\r\n        // present) in the answers that Chrome and Safari generate for an offer received from Jicofo. Generate these\r\n        // a=ssrc lines using the msid values from the a=msid line.\r\n        if (!msid) {\r\n            msid = mLine.msid;\r\n            const primarySsrcs = mLine.ssrcs;\r\n\r\n            primarySsrcs.forEach(ssrc => {\r\n                mLine.ssrcs.push({\r\n                    id: ssrc.id,\r\n                    attribute: 'msid',\r\n                    value: msid\r\n                });\r\n            })\r\n        }\r\n\r\n        // Generate SIM layers.\r\n        const simSsrcs = [];\r\n\r\n        for (let i = 0; i < this._options.numOfLayers - 1; ++i) {\r\n            const simSsrc = this._generateSsrc();\r\n\r\n            addAssociatedAttributes(mLine, simSsrc);\r\n            simSsrcs.push(simSsrc);\r\n        }\r\n\r\n        mLine.ssrcGroups = mLine.ssrcGroups || [];\r\n        mLine.ssrcGroups.push({\r\n            semantics: 'SIM',\r\n            ssrcs: primarySsrc + ' ' + simSsrcs.join(' ')\r\n        });\r\n\r\n        return mLine;\r\n    }\r\n\r\n    /**\r\n     * Returns a random number to be used for the SSRC.\r\n     *\r\n     * @returns\r\n     */\r\n    _generateSsrc() : number {\r\n        const max = 0xffffffff;\r\n\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n\r\n    /**\r\n     * Returns the requested attribute value for a SSRC from a given media description.\r\n     *\r\n     * @param mLine\r\n     * @param ssrc\r\n     * @param attributeName\r\n     * @returns\r\n     */\r\n    _getSsrcAttribute(mLine, ssrc: number, attributeName: string) : string | undefined {\r\n        return mLine.ssrcs?.find(\r\n            ssrcInfo => Number(ssrcInfo.id) === ssrc\r\n            && ssrcInfo.attribute === attributeName)?.value;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of all the primary SSRCs in the SIM group for a given media description.\r\n     *\r\n     * @param mLine\r\n     * @returns\r\n     */\r\n    _parseSimLayers(mLine) : Array<number> | null {\r\n        const simGroup = mLine.ssrcGroups?.find(group => group.semantics === 'SIM');\r\n\r\n        if (simGroup) {\r\n            return simGroup.ssrcs.split(' ').map(ssrc => Number(ssrc));\r\n        }\r\n\r\n        if (mLine.ssrcs?.length) {\r\n            return [ Number(mLine.ssrcs[0].id) ];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Munges the given media description to enable simulcast for the video media sections that are in either have\r\n     * SENDRECV or SENDONLY as the media direction thereby ignoring all the RECVONLY transceivers created for remote\r\n     * endpoints.\r\n     * NOTE: This needs to be called only when simulcast is enabled.\r\n     *\r\n     * @param description\r\n     * @returns\r\n     */\r\n    mungeLocalDescription(description: Description) : Description {\r\n        if (!description || !description.sdp) {\r\n            return description;\r\n        }\r\n        const session = transform.parse(description.sdp);\r\n\r\n        for (let media of session.media) {\r\n            // Ignore recvonly and inactive transceivers created for remote sources.\r\n            if (media.direction === MediaDirection.RECVONLY || media.direction === MediaDirection.INACTIVE) {\r\n                continue;\r\n            }\r\n\r\n            // Ignore audio m-lines.\r\n            if (media.type !== MediaType.VIDEO) {\r\n                continue;\r\n            }\r\n            const mid = media.mid;\r\n            const numSsrcs = new Set(media.ssrcs?.map(ssrcInfo => ssrcInfo.id));\r\n            const numGroups = media.ssrcGroups?.length ? media.ssrcGroups?.length : 0;\r\n            let primarySsrc: number;\r\n\r\n            // Do not munge if the description has no ssrcs or if simulcast is already enabled.\r\n            if (numSsrcs.size === 0 || numSsrcs.size > 2 || (numSsrcs.size === 2 && numGroups === 0)) {\r\n                continue;\r\n            }\r\n            if (numSsrcs.size === 1) {\r\n                primarySsrc = Number(media.ssrcs[0]?.id);\r\n            } else {\r\n                const fidGroup = media.ssrcGroups.find(group => group.semantics === 'FID');\r\n\r\n                if (fidGroup) {\r\n                    primarySsrc = Number(fidGroup.ssrcs.split(' ')[0]);\r\n                }\r\n            }\r\n\r\n            if (this._ssrcCache.has(mid)) {\r\n                media = this._fillSsrcsFromCache(media);\r\n            } else {\r\n                media = this._generateNewSsrcsForSimulcast(media, primarySsrc);\r\n                const simulcastSsrcs = this._parseSimLayers(media);\r\n\r\n                // Update the SSRCs in the cache so that they can re-used for the same mid again.\r\n                this._ssrcCache.set(mid, simulcastSsrcs);\r\n            }\r\n        }\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: transform.write(session)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Munges the given media description by removing the SSRCs and related FID groups for the higher layer streams.\r\n     *\r\n     * @param description\r\n     * @returns\r\n     */\r\n    mungeRemoteDescription(description: Description) : Description {\r\n        if (!description || !description.sdp) {\r\n            return description;\r\n        }\r\n\r\n        const session = transform.parse(description.sdp);\r\n\r\n        for (const media of session.media) {\r\n            if (media.type !== MediaType.VIDEO) {\r\n                continue;\r\n            }\r\n\r\n            if (media.direction !== MediaDirection.SENDONLY) {\r\n                continue;\r\n            }\r\n\r\n            // Ignore m-lines that do not have any SSRCs or SSRC groups. These are the ones associated with remote\r\n            // sources that have left the call. These will be recycled when a new remote source joins the call.\r\n            if (!media.ssrcGroups?.length || !media?.ssrcs.length) {\r\n                continue;\r\n            }\r\n\r\n            // Cache the SSRCs and the source groups.\r\n            const mungedSsrcs = new Set(media.ssrcs.slice());\r\n            const mungedSsrcGroups = new Set(media.ssrcGroups.slice());\r\n            const fidGroups = media.ssrcGroups.filter(group => group.semantics === 'FID');\r\n            const simGroup = media.ssrcGroups.find(group => group.semantics === 'SIM');\r\n            const primarySsrc = simGroup?.ssrcs.split(' ')[0];;\r\n\r\n            // When simulcast and RTX are both enabled.\r\n            if (fidGroups.length && simGroup) {\r\n                const fidGroup = fidGroups.find(group => group.ssrcs.includes(primarySsrc));\r\n                const secondarySsrc = fidGroup.ssrcs.split(' ')[1];\r\n\r\n                for (const ssrcGroup of media.ssrcGroups) {\r\n                    if (ssrcGroup !== fidGroup) {\r\n                        mungedSsrcGroups.delete(ssrcGroup);\r\n                    }\r\n                }\r\n                for (const ssrc of media.ssrcs) {\r\n                    if (ssrc.id.toString() !== primarySsrc\r\n                        && ssrc.id.toString() !== secondarySsrc) {\r\n                        mungedSsrcs.delete(ssrc);\r\n                    }\r\n                }\r\n\r\n            // When simulcast is enabled but RTX is disabled.\r\n            } else if (simGroup) {\r\n                mungedSsrcGroups.delete(simGroup);\r\n\r\n                for (const ssrc of media.ssrcs) {\r\n                    if (ssrc.id.toString() !== primarySsrc) {\r\n                        mungedSsrcs.delete(ssrc);\r\n                    }\r\n                }\r\n            }\r\n\r\n            media.ssrcs = Array.from(mungedSsrcs);\r\n            media.ssrcGroups = Array.from(mungedSsrcGroups);\r\n        }\r\n\r\n        return new RTCSessionDescription ({\r\n            type: description.type,\r\n            sdp: transform.write(session)\r\n        });\r\n    }\r\n}","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as RTCEvents from '../../service/RTC/RTCEvents';\r\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\r\n\r\nconst Resolutions = require('../../service/RTC/Resolutions');\r\nconst VideoType = require('../../service/RTC/VideoType');\r\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\r\n * over the data channel.\r\n */\r\nconst STATS_MESSAGE_TYPE = 'stats';\r\n\r\n/**\r\n * See media/engine/simulcast.ss from webrtc.org\r\n */\r\nconst kSimulcastFormats = [\r\n    { width: 1920,\r\n        height: 1080,\r\n        layers: 3,\r\n        max: 5000,\r\n        target: 4000,\r\n        min: 800 },\r\n    { width: 1280,\r\n        height: 720,\r\n        layers: 3,\r\n        max: 2500,\r\n        target: 2500,\r\n        min: 600 },\r\n    { width: 960,\r\n        height: 540,\r\n        layers: 3,\r\n        max: 900,\r\n        target: 900,\r\n        min: 450 },\r\n    { width: 640,\r\n        height: 360,\r\n        layers: 2,\r\n        max: 700,\r\n        target: 500,\r\n        min: 150 },\r\n    { width: 480,\r\n        height: 270,\r\n        layers: 2,\r\n        max: 450,\r\n        target: 350,\r\n        min: 150 },\r\n    { width: 320,\r\n        height: 180,\r\n        layers: 1,\r\n        max: 200,\r\n        target: 150,\r\n        min: 30 }\r\n];\r\n\r\n/**\r\n * The maximum bitrate to use as a measurement against the participant's current\r\n * bitrate. This cap helps in the cases where the participant's bitrate is high\r\n * but not enough to fulfill high targets, such as with 1080p.\r\n */\r\nconst MAX_TARGET_BITRATE = 2500;\r\n\r\n/**\r\n * The initial bitrate for video in kbps.\r\n */\r\nlet startBitrate = 800;\r\n\r\n\r\n/**\r\n * The current cap (in kbps) put on the video stream (or null if there isn't\r\n * a cap).  If there is a cap, we'll take it into account when calculating\r\n * the current quality.\r\n */\r\nlet videoBitrateCap = null;\r\n\r\n/**\r\n * Gets the expected bitrate (in kbps) in perfect network conditions.\r\n * @param simulcast {boolean} whether simulcast is enabled or not.\r\n * @param resolution {Resolution} the resolution.\r\n * @param millisSinceStart {number} the number of milliseconds since sending\r\n * video started.\r\n */\r\nfunction getTarget(simulcast, resolution, millisSinceStart) {\r\n    // Completely ignore the bitrate in the first 5 seconds, as the first\r\n    // event seems to fire very early and the value is suspicious and causes\r\n    // false positives.\r\n    if (millisSinceStart < 15000) {\r\n        return 1;\r\n    }\r\n\r\n    let target = 0;\r\n    let height = Math.min(resolution.height, resolution.width);\r\n\r\n    if (simulcast) {\r\n        // Find the first format with height no bigger than ours.\r\n        let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\r\n\r\n        if (simulcastFormat) {\r\n            // Sum the target fields from all simulcast layers for the given\r\n            // resolution (e.g. 720p + 360p + 180p).\r\n            for (height = simulcastFormat.height; height >= 180; height /= 2) {\r\n                const targetHeight = height;\r\n\r\n                simulcastFormat\r\n                    = kSimulcastFormats.find(f => f.height === targetHeight);\r\n                if (simulcastFormat) {\r\n                    target += simulcastFormat.target;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        // See GetMaxDefaultVideoBitrateKbps in\r\n        // media/engine/webrtcvideoengine2.cc from webrtc.org\r\n        const pixels = resolution.width * resolution.height;\r\n\r\n        if (pixels <= 320 * 240) {\r\n            target = 600;\r\n        } else if (pixels <= 640 * 480) {\r\n            target = 1700;\r\n        } else if (pixels <= 960 * 540) {\r\n            target = 2000;\r\n        } else {\r\n            target = 2500;\r\n        }\r\n    }\r\n\r\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\r\n    // of connection quality by 1 second.\r\n    return Math.min(target, rampUp(Math.max(0, millisSinceStart - 1000)));\r\n}\r\n\r\n/**\r\n * Gets the bitrate to which GCC would have ramped up in perfect network\r\n * conditions after millisSinceStart milliseconds.\r\n * @param millisSinceStart {number} the number of milliseconds since sending\r\n * video was enabled.\r\n */\r\nfunction rampUp(millisSinceStart) {\r\n    if (millisSinceStart > 60000) {\r\n        return Number.MAX_SAFE_INTEGER;\r\n    }\r\n\r\n    // According to GCC the send side bandwidth estimation grows with at most\r\n    // 8% per second.\r\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\r\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\r\n}\r\n\r\n/**\r\n * A class which monitors the local statistics coming from the RTC modules, and\r\n * calculates a \"connection quality\" value, in percent, for the media\r\n * connection. A value of 100% indicates a very good network connection, and a\r\n * value of 0% indicates a poor connection.\r\n */\r\nexport default class ConnectionQuality {\r\n    /**\r\n     *\r\n     * @param conference\r\n     * @param eventEmitter\r\n     * @param options\r\n     */\r\n    constructor(conference, eventEmitter, options) {\r\n        this.eventEmitter = eventEmitter;\r\n\r\n        /**\r\n         * The owning JitsiConference.\r\n         */\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Holds statistics about the local connection quality.\r\n         */\r\n        this._localStats = {\r\n            connectionQuality: 100,\r\n            jvbRTT: undefined\r\n        };\r\n\r\n        /**\r\n         * The time this._localStats.connectionQuality was last updated.\r\n         */\r\n        this._lastConnectionQualityUpdate = -1;\r\n\r\n        /**\r\n         * Maps a participant ID to an object holding connection quality\r\n         * statistics received from this participant.\r\n         */\r\n        this._remoteStats = {};\r\n\r\n        /**\r\n         * The time that the ICE state last changed to CONNECTED. We use this\r\n         * to calculate how much time we as a sender have had to ramp-up.\r\n         */\r\n        this._timeIceConnected = -1;\r\n\r\n        /**\r\n         * The time that local video was unmuted. We use this to calculate how\r\n         * much time we as a sender have had to ramp-up.\r\n         */\r\n        this._timeVideoUnmuted = -1;\r\n\r\n        /**\r\n         * The time at which a video bitrate cap was last removed.  We use\r\n         * this to calculate how much time we, as a sender, have had to\r\n         * ramp-up\r\n         */\r\n        this._timeLastBwCapRemoved = -1;\r\n\r\n        // We assume a global startBitrate value for the sake of simplicity.\r\n        if (options.config.startBitrate && options.config.startBitrate > 0) {\r\n            startBitrate = options.config.startBitrate;\r\n        }\r\n\r\n        // TODO: consider ignoring these events and letting the user of\r\n        // lib-jitsi-meet handle these separately.\r\n        conference.on(\r\n            ConferenceEvents.CONNECTION_INTERRUPTED,\r\n            () => {\r\n                this._updateLocalConnectionQuality(0);\r\n                this.eventEmitter.emit(\r\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n                    this._localStats);\r\n                this._broadcastLocalStats();\r\n            });\r\n\r\n        conference.room.addListener(\r\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\r\n            (jingleSession, newState) => {\r\n                if (!jingleSession.isP2P && newState === 'connected') {\r\n                    this._timeIceConnected = window.performance.now();\r\n                }\r\n            });\r\n\r\n        // Listen to DataChannel message from other participants in the\r\n        // conference, and update the _remoteStats field accordingly.\r\n        conference.on(\r\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            (participant, payload) => {\r\n                if (payload.type === STATS_MESSAGE_TYPE) {\r\n                    this._updateRemoteStats(\r\n                        participant.getId(), payload.values);\r\n                }\r\n            });\r\n\r\n        // Listen to local statistics events originating from the RTC module\r\n        // and update the _localStats field.\r\n        // Oh, and by the way, the resolutions of all remote participants are\r\n        // also piggy-backed in these \"local\" statistics. It's obvious, really,\r\n        // if one carefully reads the *code* (but not the docs) in\r\n        // UI/VideoLayout/VideoLayout.js#updateLocalConnectionStats in\r\n        // jitsi-meet\r\n        // TODO: We should keep track of the remote resolution in _remoteStats,\r\n        // and notify about changes via separate events.\r\n        conference.statistics.addConnectionStatsListener(\r\n            this._updateLocalStats.bind(this));\r\n\r\n        // Save the last time we were unmuted.\r\n        conference.on(\r\n            ConferenceEvents.TRACK_MUTE_CHANGED,\r\n            track => {\r\n                if (track.isVideoTrack()) {\r\n                    if (track.isMuted()) {\r\n                        this._timeVideoUnmuted = -1;\r\n                    } else {\r\n                        this._maybeUpdateUnmuteTime();\r\n                    }\r\n                }\r\n            });\r\n        conference.on(\r\n            ConferenceEvents.TRACK_ADDED,\r\n            track => {\r\n                if (track.isVideoTrack() && !track.isMuted()) {\r\n                    this._maybeUpdateUnmuteTime();\r\n                }\r\n            });\r\n        conference.rtc.on(\r\n            RTCEvents.LOCAL_TRACK_MAX_ENABLED_RESOLUTION_CHANGED,\r\n            track => {\r\n                this._localStats.maxEnabledResolution = track.maxEnabledResolution;\r\n            });\r\n\r\n        conference.on(\r\n            ConferenceEvents.SERVER_REGION_CHANGED,\r\n            serverRegion => {\r\n                this._localStats.serverRegion = serverRegion;\r\n            });\r\n\r\n        conference.on(\r\n            ConferenceEvents.PROPERTIES_CHANGED,\r\n            properties => {\r\n                this._localStats.bridgeCount\r\n                    = Number((properties || {})['bridge-count']);\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\r\n     * doesn't change it.\r\n     */\r\n    _maybeUpdateUnmuteTime() {\r\n        if (this._timeVideoUnmuted < 0) {\r\n            this._timeVideoUnmuted = window.performance.now();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates a new \"connection quality\" value.\r\n     * @param videoType {VideoType} the type of the video source (camera or\r\n     * a screen capture).\r\n     * @param isMuted {boolean} whether the local video is muted.\r\n     * @param resolutionName {Resolution} the input resolution used by the\r\n     * camera.\r\n     * @returns {*} the newly calculated connection quality.\r\n     */\r\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\r\n\r\n        // resolutionName is an index into Resolutions (where \"720\" is\r\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\r\n        const resolution = Resolutions[resolutionName];\r\n\r\n        let quality = 100;\r\n        let packetLoss;\r\n\r\n        // TODO: take into account packet loss for received streams\r\n\r\n        if (this._localStats.packetLoss) {\r\n            packetLoss = this._localStats.packetLoss.upload;\r\n\r\n            // Ugly Hack Alert (UHA):\r\n            // The packet loss for the upload direction is calculated based on\r\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\r\n            // termination for audio, these reports come from the actual\r\n            // receivers in the conference and therefore the reported packet\r\n            // loss includes loss from the bridge to the receiver.\r\n            // When we are sending video this effect is small, because the\r\n            // number of video packets is much larger than the number of audio\r\n            // packets (and our calculation is based on the total number of\r\n            // received and lost packets).\r\n            // When video is muted, however, the effect might be significant,\r\n            // but we don't know what it is. We do know that it is positive, so\r\n            // as a temporary solution, until RTCP termination is implemented\r\n            // for the audio streams, we relax the packet loss checks here.\r\n            if (isMuted) {\r\n                packetLoss *= 0.5;\r\n            }\r\n        }\r\n\r\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\r\n            || this._timeIceConnected < 0\r\n            || this._timeVideoUnmuted < 0) {\r\n\r\n            // Calculate a value based on packet loss only.\r\n            if (packetLoss === undefined) {\r\n                logger.error('Cannot calculate connection quality, unknown '\r\n                    + 'packet loss.');\r\n                quality = 100;\r\n            } else if (packetLoss <= 2) {\r\n                quality = 100; // Full 5 bars.\r\n            } else if (packetLoss <= 4) {\r\n                quality = 70; // 4 bars\r\n            } else if (packetLoss <= 6) {\r\n                quality = 50; // 3 bars\r\n            } else if (packetLoss <= 8) {\r\n                quality = 30; // 2 bars\r\n            } else if (packetLoss <= 12) {\r\n                quality = 10; // 1 bars\r\n            } else {\r\n                quality = 0; // Still 1 bar, but slower climb-up.\r\n            }\r\n        } else {\r\n            // Calculate a value based on the sending bitrate.\r\n\r\n            // Figure out if simulcast is in use\r\n            const activeTPC = this._conference.getActivePeerConnection();\r\n            const isSimulcastOn\r\n                = Boolean(activeTPC && activeTPC.isSimulcastOn());\r\n\r\n            const newVideoBitrateCap\r\n                = activeTPC && activeTPC.bandwidthLimiter\r\n                && activeTPC.bandwidthLimiter.getBandwidthLimit('video');\r\n\r\n            // If we had a cap set but there isn't one now, then it has\r\n            // just been 'lifted', so we should treat this like a new\r\n            // ramp up.\r\n            if (!newVideoBitrateCap && videoBitrateCap) {\r\n                this._timeLastBwCapRemoved = window.performance.now();\r\n\r\n                // Set the start bitrate to whatever we were just capped to\r\n                startBitrate = videoBitrateCap;\r\n            }\r\n            videoBitrateCap = newVideoBitrateCap;\r\n\r\n            // time since sending of video was enabled.\r\n            const millisSinceStart = window.performance.now()\r\n                - Math.max(this._timeVideoUnmuted,\r\n                    this._timeIceConnected,\r\n                    this._timeLastBwCapRemoved);\r\n\r\n            // expected sending bitrate in perfect conditions\r\n            let target\r\n                = getTarget(isSimulcastOn, resolution, millisSinceStart);\r\n\r\n            target = Math.min(0.9 * target, MAX_TARGET_BITRATE);\r\n\r\n            if (videoBitrateCap) {\r\n                target = Math.min(target, videoBitrateCap);\r\n            }\r\n\r\n            quality = 100 * this._localStats.bitrate.upload / target;\r\n\r\n            // Whatever the bitrate, drop early if there is significant loss\r\n            if (packetLoss && packetLoss >= 10) {\r\n                quality = Math.min(quality, 30);\r\n            }\r\n        }\r\n\r\n        // Make sure that the quality doesn't climb quickly\r\n        if (this._lastConnectionQualityUpdate > 0) {\r\n            const maxIncreasePerSecond = 2;\r\n            const prevConnectionQuality = this._localStats.connectionQuality;\r\n            const diffSeconds\r\n                = (window.performance.now() - this._lastConnectionQualityUpdate)\r\n                    / 1000;\r\n\r\n            quality\r\n                = Math.min(\r\n                    quality,\r\n                    prevConnectionQuality\r\n                        + (diffSeconds * maxIncreasePerSecond));\r\n        }\r\n\r\n        return Math.min(100, quality);\r\n    }\r\n\r\n    /**\r\n     * Updates the localConnectionQuality value\r\n     * @param values {number} the new value. Should be in [0, 100].\r\n     */\r\n    _updateLocalConnectionQuality(value) {\r\n        this._localStats.connectionQuality = value;\r\n        this._lastConnectionQualityUpdate = window.performance.now();\r\n    }\r\n\r\n    /**\r\n     * Broadcasts the local statistics to all other participants in the\r\n     * conference.\r\n     */\r\n    _broadcastLocalStats() {\r\n        // Send only the data that remote participants care about.\r\n        const data = {\r\n            bitrate: this._localStats.bitrate,\r\n            packetLoss: this._localStats.packetLoss,\r\n            connectionQuality: this._localStats.connectionQuality,\r\n            jvbRTT: this._localStats.jvbRTT,\r\n            serverRegion: this._localStats.serverRegion,\r\n            maxEnabledResolution: this._localStats.maxEnabledResolution,\r\n            avgAudioLevels: this._localStats.localAvgAudioLevels\r\n        };\r\n\r\n        try {\r\n            this._conference.broadcastEndpointMessage({\r\n                type: STATS_MESSAGE_TYPE,\r\n                values: data });\r\n        } catch (e) {\r\n            // We often hit this in the beginning of a call, before the data\r\n            // channel is ready. It is not a big problem, because we will\r\n            // send the statistics again after a few seconds, and the error is\r\n            // already logged elsewhere. So just ignore it.\r\n\r\n            // let errorMsg = \"Failed to broadcast local stats\";\r\n            // logger.error(errorMsg, e);\r\n            // GlobalOnErrorHandler.callErrorHandler(\r\n            //    new Error(errorMsg + \": \" + e));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the local statistics\r\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\r\n     * the stats\r\n     * @param data new statistics\r\n     */\r\n    _updateLocalStats(tpc, data) {\r\n        // Update jvbRTT\r\n        if (!tpc.isP2P) {\r\n            const jvbRTT\r\n                = data.transport\r\n                    && data.transport.length && data.transport[0].rtt;\r\n\r\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\r\n        }\r\n\r\n        // Do not continue with processing of other stats if they do not\r\n        // originate from the active peerconnection\r\n        if (tpc !== this._conference.getActivePeerConnection()) {\r\n            return;\r\n        }\r\n\r\n        let key;\r\n        const updateLocalConnectionQuality\r\n            = !this._conference.isConnectionInterrupted();\r\n        const localVideoTrack\r\n            = this._conference.getLocalVideoTrack();\r\n        const videoType\r\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\r\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\r\n        const resolution = localVideoTrack\r\n            ? Math.min(localVideoTrack.resolution, localVideoTrack.maxEnabledResolution) : null;\r\n\r\n        if (!isMuted) {\r\n            this._maybeUpdateUnmuteTime();\r\n        }\r\n\r\n        // Copy the fields already in 'data'.\r\n        for (key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                this._localStats[key] = data[key];\r\n            }\r\n        }\r\n\r\n        // And re-calculate the connectionQuality field.\r\n        if (updateLocalConnectionQuality) {\r\n            this._updateLocalConnectionQuality(\r\n                this._calculateConnectionQuality(\r\n                    videoType,\r\n                    isMuted,\r\n                    resolution));\r\n        }\r\n\r\n        this.eventEmitter.emit(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._localStats);\r\n        this._broadcastLocalStats();\r\n    }\r\n\r\n    /**\r\n     * Updates remote statistics\r\n     * @param id the id of the remote participant\r\n     * @param data the statistics received\r\n     */\r\n    _updateRemoteStats(id, data) {\r\n        // Use only the fields we need\r\n        this._remoteStats[id] = {\r\n            bitrate: data.bitrate,\r\n            packetLoss: data.packetLoss,\r\n            connectionQuality: data.connectionQuality,\r\n            jvbRTT: data.jvbRTT,\r\n            serverRegion: data.serverRegion,\r\n            maxEnabledResolution: data.maxEnabledResolution,\r\n            avgAudioLevels: data.avgAudioLevels\r\n        };\r\n\r\n        this.eventEmitter.emit(\r\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n            id,\r\n            this._remoteStats[id]);\r\n    }\r\n\r\n    /**\r\n     * Returns the local statistics.\r\n     * Exported only for use in jitsi-meet-torture.\r\n     */\r\n    getStats() {\r\n        return this._localStats;\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceErrors from '../../JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This class deals with shenanigans around JVB media session's ICE failed status handling.\r\n *\r\n * If ICE restarts are NOT explicitly enabled by the {@code enableIceRestart} config option, then the conference will\r\n * delay emitting the {@JitsiConferenceErrors.ICE_FAILED} event by 15 seconds. If the network info module reports\r\n * the internet offline status then the time will start counting after the internet comes back online.\r\n *\r\n * If ICE restart are enabled, then a delayed ICE failed notification to Jicofo will be sent, only if the ICE connection\r\n * does not recover soon after or before the XMPP connection is restored (if it was ever broken). If ICE fails while\r\n * the XMPP connection is not broken then the notifications will be sent after 2 seconds delay.\r\n */\r\nexport default class IceFailedHandling {\r\n    /**\r\n     * Creates new {@code DelayedIceFailed} task.\r\n     * @param {JitsiConference} conference\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n    }\r\n\r\n    /**\r\n     * After making sure there's no way for the ICE connection to recover this method either sends ICE failed\r\n     * notification to Jicofo or emits the ice failed conference event.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _actOnIceFailed() {\r\n        const { enableIceRestart } = this._conference.options.config;\r\n        const explicitlyDisabled = typeof enableIceRestart !== 'undefined' && !enableIceRestart;\r\n        const supportsRestartByTerminate = this._conference.room.supportsRestartByTerminate();\r\n        const useTerminateForRestart = supportsRestartByTerminate && !enableIceRestart;\r\n\r\n        logger.info('ICE failed,'\r\n            + ` enableIceRestart: ${enableIceRestart},`\r\n            + ` supports restart by terminate: ${supportsRestartByTerminate}`);\r\n\r\n        if (explicitlyDisabled || (!enableIceRestart && !supportsRestartByTerminate)) {\r\n            logger.info('ICE failed, but ICE restarts are disabled');\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.CONFERENCE_FAILED,\r\n                JitsiConferenceErrors.ICE_FAILED);\r\n\r\n            return;\r\n        }\r\n\r\n        const jvbConnection = this._conference.jvbJingleSession;\r\n        const jvbConnIceState = jvbConnection && jvbConnection.getIceConnectionState();\r\n\r\n        if (!jvbConnection) {\r\n            logger.warn('Not sending ICE failed - no JVB connection');\r\n        } else if (jvbConnIceState === 'connected') {\r\n            logger.info('ICE connection restored - not sending ICE failed');\r\n        } else {\r\n            logger.info('Sending ICE failed - the connection did not recover, '\r\n                + `ICE state: ${jvbConnIceState}, `\r\n                + `use 'session-terminate': ${useTerminateForRestart}`);\r\n            if (useTerminateForRestart) {\r\n                this._conference.jvbJingleSession.terminate(\r\n                    () => {\r\n                        logger.info('session-terminate for ice restart - done');\r\n                    },\r\n                    error => {\r\n                        logger.error(`session-terminate for ice restart - error: ${error.message}`);\r\n                    }, {\r\n                        reason: 'connectivity-error',\r\n                        reasonDescription: 'ICE FAILED',\r\n                        requestRestart: true,\r\n                        sendSessionTerminate: true\r\n                    });\r\n            } else {\r\n                this._conference.jvbJingleSession.sendIceFailedNotification();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starts the task.\r\n     */\r\n    start() {\r\n        //  Using xmpp.ping allows to handle both XMPP being disconnected and internet offline cases. The ping function\r\n        // uses sendIQ2 method which is resilient to XMPP connection disconnected state and will patiently wait until it\r\n        // gets reconnected.\r\n        //  This also handles the case about waiting for the internet to come back online, because ping\r\n        // will only succeed when the internet is online and then there's a chance for the ICE to recover from FAILED to\r\n        // CONNECTED which is the extra 2 second timeout after ping.\r\n        //  The 65 second timeout is given on purpose as there's no chance for XMPP to recover after 65 seconds of no\r\n        // communication with the server. Such resume attempt will result in unrecoverable conference failed event due\r\n        // to 'item-not-found' error returned by the server.\r\n        this._conference.xmpp.ping(65000).then(\r\n            () => {\r\n                if (!this._canceled) {\r\n                    this._iceFailedTimeout = window.setTimeout(() => {\r\n                        this._iceFailedTimeout = undefined;\r\n                        this._actOnIceFailed();\r\n                    }, 2000);\r\n                }\r\n            },\r\n            error => {\r\n                logger.error('PING error/timeout - not sending ICE failed', error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Cancels the task.\r\n     */\r\n    cancel() {\r\n        this._canceled = true;\r\n        window.clearTimeout(this._iceFailedTimeout);\r\n    }\r\n}\r\n","import EventEmitter from 'events';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport browser from '../browser';\r\n\r\nimport * as DetectionEvents from './DetectionEvents';\r\n\r\n// We wait a certain time interval for constant silence input from the current device to account for\r\n// potential abnormalities and for a better use experience i.e. don't generate event the instant\r\n// an audio track is added to the tcr.\r\n// Potential improvement - add this as a configurable parameter.\r\nconst SILENCE_PERIOD_MS = 4000;\r\n\r\n/**\r\n * Detect if there is no audio input on the current TraceAblePeerConnection selected track. The no audio\r\n * state must be constant for a configured amount of time in order for the event to be triggered.\r\n * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\r\n * @fires DetectionEvents.NO_AUDIO_INPUT\r\n */\r\nexport default class NoAudioSignalDetection extends EventEmitter {\r\n    /**\r\n     * Creates new NoAudioSignalDetection.\r\n     *\r\n     * @param conference the JitsiConference instance that created us.\r\n     * @constructor\r\n     */\r\n    constructor(conference) {\r\n        super();\r\n\r\n        this._conference = conference;\r\n        this._timeoutTrigger = null;\r\n        this._hasAudioInput = null;\r\n\r\n        if (!browser.supportsReceiverStats()) {\r\n            conference.statistics.addAudioLevelListener(this._audioLevel.bind(this));\r\n        }\r\n        conference.on(JitsiConferenceEvents.TRACK_ADDED, this._trackAdded.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Clear the timeout state.\r\n     */\r\n    _clearTriggerTimeout() {\r\n        clearTimeout(this._timeoutTrigger);\r\n        this._timeoutTrigger = null;\r\n    }\r\n\r\n\r\n    /**\r\n     * Generated event triggered by a change in the current conference audio input state.\r\n     *\r\n     * @param {*} audioLevel - The audio level of the ssrc.\r\n     * @fires DetectionEvents.AUDIO_INPUT_STATE_CHANGE\r\n     */\r\n    _handleAudioInputStateChange(audioLevel) {\r\n        // Current audio input state of the active local track in the conference, true for audio input false for no\r\n        // audio input.\r\n        const status = audioLevel !== 0;\r\n\r\n        // If this is the first audio event picked up or the current status is different from the previous trigger\r\n        // the event.\r\n        if (this._hasAudioInput === null || this._hasAudioInput !== status) {\r\n            this._hasAudioInput = status;\r\n            this.emit(DetectionEvents.AUDIO_INPUT_STATE_CHANGE, this._hasAudioInput);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generate event triggered by a prolonged period of no audio input.\r\n     *\r\n     * @param {number} audioLevel - The audio level of the ssrc.\r\n     * @fires DetectionEvents.NO_AUDIO_INPUT\r\n     */\r\n    _handleNoAudioInputDetection(audioLevel) {\r\n        if (this._eventFired) {\r\n            return;\r\n        }\r\n\r\n        if (audioLevel === 0 && !this._timeoutTrigger) {\r\n            this._timeoutTrigger = setTimeout(() => {\r\n                this._eventFired = true;\r\n\r\n                this.emit(DetectionEvents.NO_AUDIO_INPUT);\r\n            }, SILENCE_PERIOD_MS);\r\n        } else if (audioLevel !== 0 && this._timeoutTrigger) {\r\n            this._clearTriggerTimeout();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Receives audio level events for all send and receive streams on the current TraceablePeerConnection.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc - TraceablePeerConnection of the owning conference.\r\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of the endpoint/participant/stream\r\n     * being reported.\r\n     * @param {number} audioLevel - The audio level of the ssrc.\r\n     * @param {boolean} isLocal - true for local/send streams or false for remote/receive streams.\r\n     */\r\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\r\n        // We are interested in the local audio streams\r\n        if (!isLocal || !this._audioTrack) {\r\n            return;\r\n        }\r\n\r\n        // Get currently active local tracks from the TraceablePeerConnection\r\n        const localSSRCs = tpc.localSSRCs.get(this._audioTrack.rtcId);\r\n\r\n        // Only target the current active track in the tpc. For some reason audio levels for previous\r\n        // devices are also picked up from the PeerConnection so we filter them out.\r\n        if (!localSSRCs || !localSSRCs.ssrcs.includes(ssrc)) {\r\n            return;\r\n        }\r\n\r\n        // First handle audio input state change. In case the state changed to no input the no audio input event\r\n        // can try to fire again.\r\n        this._handleAudioInputStateChange(audioLevel);\r\n        this._handleNoAudioInputDetection(audioLevel);\r\n    }\r\n\r\n    /**\r\n     * Notifies NoAudioSignalDetection that a JitsiTrack was added to the associated JitsiConference.\r\n     * Only take into account local audio tracks.\r\n     *\r\n     * @param {JitsiTrack} track - The added JitsiTrack.\r\n     */\r\n    _trackAdded(track) {\r\n        if (track.isLocalAudioTrack()) {\r\n            // Reset state for the new track.\r\n            this._audioTrack = track;\r\n            this._eventFired = false;\r\n            this._clearTriggerTimeout();\r\n\r\n            // Listen for the audio levels on the newly added audio track\r\n            if (browser.supportsReceiverStats()) {\r\n                track.on(\r\n                    JitsiTrackEvents.NO_AUDIO_INPUT,\r\n                    audioLevel => {\r\n                        this._handleNoAudioInputDetection(audioLevel);\r\n                    }\r\n                );\r\n                track.on(\r\n                    JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n                    audioLevel => {\r\n                        this._handleNoAudioInputDetection(audioLevel);\r\n                        this._handleAudioInputStateChange(audioLevel);\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\n\r\n/**\r\n * The value which we use to say, every sound over this threshold\r\n * is talking on the mic.\r\n * @type {number}\r\n */\r\nconst SPEECH_DETECT_THRESHOLD = 0.6;\r\n\r\n/**\r\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\r\n * currently used.\r\n * Listens for changes in the audio level changes of the local p2p audio track\r\n * or remote p2p one and fires dominant speaker events to be able to use\r\n * features depending on those events (speaker stats), to make them work without\r\n * the video bridge.\r\n */\r\nexport default class P2PDominantSpeakerDetection {\r\n    /**\r\n     * Creates P2PDominantSpeakerDetection\r\n     * @param conference the JitsiConference instance that created us.\r\n     * @constructor\r\n     */\r\n    constructor(conference) {\r\n        this.conference = conference;\r\n\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\r\n            this._audioLevel.bind(this));\r\n\r\n        this.myUserID = this.conference.myUserId();\r\n    }\r\n\r\n    /**\r\n     * Receives audio level events for all streams in the conference.\r\n     *\r\n     * @param {String} id - The participant id\r\n     * @param {number} audioLevel - The audio level.\r\n     */\r\n    _audioLevel(id, audioLevel) {\r\n\r\n        // we do not process if p2p is not active\r\n        // or audio level is under certain threshold\r\n        // or if the audio level is for local audio track which is muted\r\n        if (!this.conference.isP2PActive()\r\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\r\n            || (id === this.myUserID\r\n                    && this.conference.getLocalAudioTrack().isMuted())) {\r\n            return;\r\n        }\r\n\r\n        this.conference.rtc.eventEmitter.emit(\r\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\r\n            id);\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\n\r\nimport { calculateAverage, filterPositiveValues } from '../util/MathUtil';\r\n\r\nimport { VAD_NOISY_DEVICE, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\n\r\n/**\r\n * The average value VAD needs to be under over a period of time to be considered noise.\r\n * @type {number}\r\n */\r\nconst VAD_NOISE_AVG_THRESHOLD = 0.2;\r\n\r\n/**\r\n * The average values that audio input need to be over to be considered loud.\r\n * @type {number}\r\n */\r\nconst NOISY_AUDIO_LEVEL_THRESHOLD = 0.040;\r\n\r\n/**\r\n * The value that a VAD score needs to be under in order for processing to begin.\r\n * @type {number}\r\n */\r\nconst VAD_SCORE_TRIGGER = 0.2;\r\n\r\n/**\r\n * The value that a VAD score needs to be under in order for processing to begin.\r\n * @type {number}\r\n */\r\nconst AUDIO_LEVEL_SCORE_TRIGGER = 0.020;\r\n\r\n/**\r\n * Time span over which we calculate an average score used to determine if we trigger the event.\r\n * @type {number}\r\n */\r\nconst PROCESS_TIME_FRAME_SPAN_MS = 1500;\r\n\r\n/**\r\n * Detect if provided VAD score and PCM data is considered noise.\r\n */\r\nexport default class VADNoiseDetection extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADNoiseDetection</tt>\r\n     *\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\r\n         * ongoing.\r\n         */\r\n        this._processing = false;\r\n\r\n        /**\r\n         * Buffer that keeps the VAD scores for a period of time.\r\n         */\r\n        this._scoreArray = [];\r\n\r\n        /**\r\n         * Buffer that keeps audio level samples for a period of time.\r\n         */\r\n        this._audioLvlArray = [];\r\n\r\n        /**\r\n         * Current state of the service, if it's not active no processing will occur.\r\n         */\r\n        this._active = false;\r\n\r\n        this._calculateNoisyScore = this._calculateNoisyScore.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Compute cumulative VAD score and PCM audio levels once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\r\n     * If the score is above the set threshold fire the event.\r\n     * @returns {void}\r\n     * @fires VAD_NOISY_DEVICE\r\n     */\r\n    _calculateNoisyScore() {\r\n        const scoreAvg = calculateAverage(this._scoreArray);\r\n        const audioLevelAvg = calculateAverage(this._audioLvlArray);\r\n\r\n        if (scoreAvg < VAD_NOISE_AVG_THRESHOLD && audioLevelAvg > NOISY_AUDIO_LEVEL_THRESHOLD) {\r\n            this.emit(VAD_NOISY_DEVICE);\r\n\r\n            this._setActiveState(false);\r\n        }\r\n\r\n        // We reset the context in case a new process phase needs to be triggered.\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Record the vad score and average volume in the appropriate buffers.\r\n     *\r\n     * @param {number} vadScore\r\n     * @param {number} avgAudioLvl - average audio level of the PCM sample associated with the VAD score.s\r\n     */\r\n    _recordValues(vadScore, avgAudioLvl) {\r\n        this._scoreArray.push(vadScore);\r\n        this._audioLvlArray.push(avgAudioLvl);\r\n    }\r\n\r\n    /**\r\n     * Set the active state of the detection service and notify any listeners.\r\n     *\r\n     * @param {boolean} active\r\n     * @fires DETECTOR_STATE_CHANGE\r\n     */\r\n    _setActiveState(active) {\r\n        this._active = active;\r\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\r\n    }\r\n\r\n    /**\r\n     * Change the state according to the muted status of the tracked device.\r\n     *\r\n     * @param {boolean} isMuted - Is the device muted or not.\r\n     */\r\n    changeMuteState(isMuted) {\r\n        // This service only needs to run when the microphone is not muted.\r\n        this._setActiveState(!isMuted);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the service is active or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isActive() {\r\n        return this._active;\r\n    }\r\n\r\n    /**\r\n     * Reset the processing context, clear buffers, cancel the timeout trigger.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._processing = false;\r\n        this._scoreArray = [];\r\n        this._audioLvlArray = [];\r\n        clearTimeout(this._processTimeout);\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and processes them.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {Float32Array} vadScore.pcmData - Raw PCM Data associated with the VAD score.\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    processVADScore(vadScore) {\r\n        if (!this._active) {\r\n            return;\r\n        }\r\n\r\n        // There is a processing phase on going, add score to buffer array.\r\n        if (this._processing) {\r\n            // Filter and calculate sample average so we don't have to process one large array at a time.\r\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\r\n\r\n            this._recordValues(vadScore.score, calculateAverage(posAudioLevels));\r\n\r\n            return;\r\n        }\r\n\r\n        // If the VAD score for the sample is low and audio level has a high enough level we can start listening for\r\n        // noise\r\n        if (vadScore.score < VAD_SCORE_TRIGGER) {\r\n            const posAudioLevels = filterPositiveValues(vadScore.pcmData);\r\n            const avgAudioLvl = calculateAverage(posAudioLevels);\r\n\r\n            if (avgAudioLvl > AUDIO_LEVEL_SCORE_TRIGGER) {\r\n                this._processing = true;\r\n                this._recordValues(vadScore.score, avgAudioLvl);\r\n\r\n                // Once the preset timeout executes the final score will be calculated.\r\n                this._processTimeout = setTimeout(this._calculateNoisyScore, PROCESS_TIME_FRAME_SPAN_MS);\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { EventEmitter } from 'events';\r\n\r\nimport { calculateAverage } from '../util/MathUtil';\r\n\r\nimport { VAD_TALK_WHILE_MUTED, DETECTOR_STATE_CHANGE } from './DetectionEvents';\r\n\r\n\r\n/**\r\n * The threshold which the average VAD values for a span of time needs to exceed to trigger an event.\r\n * @type {number}\r\n */\r\nconst VAD_AVG_THRESHOLD = 0.6;\r\n\r\n/**\r\n * The VAD score needed to trigger the processing algorithm, i.e. if a sample has the VAD score >= VAD_VOICE_LEVEL\r\n * we start processing all scores for a time span defined by const PROCESS_TIME_FRAME_SPAN_MS.\r\n * @type {number}\r\n */\r\nconst VAD_VOICE_LEVEL = 0.9;\r\n\r\n/**\r\n * Sample rate of TrackVADEmitter, it defines how many audio samples are processed at a time.\r\n * @type {number}\r\n */\r\n\r\n/**\r\n * Time span over which we calculate an average score used to determine if we trigger the event.\r\n * @type {number}\r\n */\r\nconst PROCESS_TIME_FRAME_SPAN_MS = 700;\r\n\r\n/**\r\n * Detect if provided VAD score which is generated on a muted device is voice and fires an event.\r\n */\r\nexport default class VADTalkMutedDetection extends EventEmitter {\r\n    /**\r\n     * Creates <tt>VADTalkMutedDetection</tt>\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * Flag which denotes the current state of the detection service i.e.if there is already a processing operation\r\n         * ongoing.\r\n         */\r\n        this._processing = false;\r\n\r\n        /**\r\n         * Buffer that keeps the VAD scores for a period of time.\r\n         */\r\n        this._scoreArray = [];\r\n\r\n        /**\r\n         * Current mute state of the audio track being monitored.\r\n         */\r\n        this._active = false;\r\n\r\n        this._calculateVADScore = this._calculateVADScore.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Compute cumulative VAD score function called once the PROCESS_TIME_FRAME_SPAN_MS timeout has elapsed.\r\n     * @returns {void}\r\n     * @fires VAD_TALK_WHILE_MUTED\r\n     */\r\n    _calculateVADScore() {\r\n        const score = calculateAverage(this._scoreArray);\r\n\r\n        if (score > VAD_AVG_THRESHOLD) {\r\n            this.emit(VAD_TALK_WHILE_MUTED);\r\n\r\n            // Event was fired. Stop event emitter and remove listeners so no residue events kick off after this point\r\n            // and a single VAD_TALK_WHILE_MUTED is generated per mic muted state.\r\n            this._setActiveState(false);\r\n        }\r\n\r\n        // We reset the context in case a new process phase needs to be triggered.\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Set the active state of the detection service and notify any listeners.\r\n     *\r\n     * @param {boolean} active\r\n     * @fires DETECTOR_STATE_CHANGE\r\n     */\r\n    _setActiveState(active) {\r\n        this._active = active;\r\n        this.emit(DETECTOR_STATE_CHANGE, this._active);\r\n    }\r\n\r\n    /**\r\n     * Change the state according to the muted status of the tracked device.\r\n     *\r\n     * @param {boolean} isMuted - Is the device muted or not.\r\n     */\r\n    changeMuteState(isMuted) {\r\n        // This service only needs to run when the microphone is muted.\r\n        this._setActiveState(isMuted);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Check whether or not the service is active or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isActive() {\r\n        return this._active;\r\n    }\r\n\r\n    /**\r\n     * Listens for {@link TrackVADEmitter} events and processes them.\r\n     *\r\n     * @param {Object} vadScore -VAD score emitted by {@link TrackVADEmitter}\r\n     * @param {Date}   vadScore.timestamp - Exact time at which processed PCM sample was generated.\r\n     * @param {number} vadScore.score - VAD score on a scale from 0 to 1 (i.e. 0.7)\r\n     * @param {string} vadScore.deviceId - Device id of the associated track.\r\n     * @listens VAD_SCORE_PUBLISHED\r\n     */\r\n    processVADScore(vadScore) {\r\n        if (!this._active) {\r\n            return;\r\n        }\r\n\r\n        // There is a processing phase on going, add score to buffer array.\r\n        if (this._processing) {\r\n            this._scoreArray.push(vadScore.score);\r\n\r\n            return;\r\n        }\r\n\r\n        // Because we remove all listeners on the vadEmitter once the main event is triggered,\r\n        // there is no need to check for rogue events.\r\n        if (vadScore.score > VAD_VOICE_LEVEL) {\r\n            this._processing = true;\r\n            this._scoreArray.push(vadScore.score);\r\n\r\n            // Start gathering VAD scores for the configured period of time.\r\n            this._processTimeout = setTimeout(this._calculateVADScore, PROCESS_TIME_FRAME_SPAN_MS);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset the processing context, clear buffer, cancel the timeout trigger.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._processing = false;\r\n        this._scoreArray = [];\r\n        clearTimeout(this._processTimeout);\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as E2ePingEvents\r\n    from '../../service/e2eping/E2ePingEvents';\r\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\r\nimport Statistics from '../statistics/statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The 'type' of a message which designates an e2e ping request.\r\n * @type {string}\r\n */\r\nconst E2E_PING_REQUEST = 'e2e-ping-request';\r\n\r\n/**\r\n * The 'type' of a message which designates an e2e ping response.\r\n * @type {string}\r\n */\r\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\r\n\r\n/**\r\n * Saves e2e ping related state for a single JitsiParticipant.\r\n */\r\nclass ParticipantWrapper {\r\n    /**\r\n     * Creates a ParticipantWrapper\r\n     * @param {JitsiParticipant} participant - The remote participant that this\r\n     * object wraps.\r\n     * @param {E2ePing} e2eping\r\n     */\r\n    constructor(participant, e2eping) {\r\n        // The JitsiParticipant\r\n        this.participant = participant;\r\n\r\n        // The E2ePing\r\n        this.e2eping = e2eping;\r\n\r\n        // Caches the ID\r\n        this.id = participant.getId();\r\n\r\n        // Recently sent requests\r\n        this.requests = {};\r\n\r\n        // The ID of the last sent request. We just increment it for each new\r\n        // request. Start at 1 so we can consider only thruthy values valid.\r\n        this.lastRequestId = 1;\r\n\r\n        this.clearIntervals = this.clearIntervals.bind(this);\r\n        this.sendRequest = this.sendRequest.bind(this);\r\n        this.handleResponse = this.handleResponse.bind(this);\r\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\r\n        this.sendAnalytics = this.sendAnalytics.bind(this);\r\n\r\n        // If the data channel was already open (this is likely a participant\r\n        // joining an existing conference) send a request immediately.\r\n        if (e2eping.isDataChannelOpen) {\r\n            this.sendRequest();\r\n        }\r\n\r\n        this.pingInterval = window.setInterval(\r\n            this.sendRequest, e2eping.pingIntervalMs);\r\n        this.analyticsInterval = window.setTimeout(\r\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\r\n    }\r\n\r\n    /**\r\n     * Clears the interval which sends pings.\r\n     * @type {*}\r\n     */\r\n    clearIntervals() {\r\n        if (this.pingInterval) {\r\n            window.clearInterval(this.pingInterval);\r\n        }\r\n        if (this.analyticsInterval) {\r\n            window.clearInterval(this.analyticsInterval);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends the next ping request.\r\n     * @type {*}\r\n     */\r\n    sendRequest() {\r\n        const requestId = this.lastRequestId++;\r\n        const requestMessage = {\r\n            type: E2E_PING_REQUEST,\r\n            id: requestId\r\n        };\r\n\r\n        this.e2eping.sendMessage(requestMessage, this.id);\r\n        this.requests[requestId] = {\r\n            id: requestId,\r\n            timeSent: window.performance.now()\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Handles a response from this participant.\r\n     * @type {*}\r\n     */\r\n    handleResponse(response) {\r\n        const request = this.requests[response.id];\r\n\r\n        if (request) {\r\n            request.rtt = window.performance.now() - request.timeSent;\r\n            this.e2eping.eventEmitter.emit(\r\n                E2ePingEvents.E2E_RTT_CHANGED,\r\n                this.participant,\r\n                request.rtt);\r\n        }\r\n\r\n        this.maybeSendAnalytics();\r\n    }\r\n\r\n    /**\r\n     * Goes over the requests, clearing ones which we don't need anymore, and\r\n     * if it finds at least one request with a valid RTT in the last\r\n     * 'analyticsIntervalMs' then sends an analytics event.\r\n     * @type {*}\r\n     */\r\n    maybeSendAnalytics() {\r\n        const now = window.performance.now();\r\n\r\n        // The RTT we'll report is the minimum RTT measured in the last\r\n        // analyticsInterval\r\n        let rtt = Infinity;\r\n        let request, requestId;\r\n\r\n        // It's time to send analytics. Clean up all requests and find the\r\n        for (requestId in this.requests) {\r\n            if (this.requests.hasOwnProperty(requestId)) {\r\n                request = this.requests[requestId];\r\n\r\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\r\n                    // An old request. We don't care about it anymore.\r\n                    delete this.requests[requestId];\r\n                } else if (request.rtt) {\r\n                    rtt = Math.min(rtt, request.rtt);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (rtt < Infinity) {\r\n            this.sendAnalytics(rtt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends an analytics event for this participant with the given RTT.\r\n     * @type {*}\r\n     */\r\n    sendAnalytics(rtt) {\r\n        Statistics.sendAnalytics(createE2eRttEvent(\r\n            this.id,\r\n            this.participant.getProperty('region'),\r\n            rtt));\r\n    }\r\n}\r\n\r\n/**\r\n * Implements end-to-end ping (from one conference participant to another) via\r\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\r\n *\r\n * TODO: use a broadcast message instead of individual pings to each remote\r\n * participant.\r\n *\r\n * This class:\r\n * 1. Sends periodic ping requests to all other participants in the\r\n * conference.\r\n * 2. Responds to ping requests from other participants.\r\n * 3. Fires events with the end-to-end RTT to each participant whenever a\r\n * response is received.\r\n * 4. Fires analytics events with the end-to-end RTT periodically.\r\n */\r\nexport default class E2ePing {\r\n    /**\r\n     * @param {JitsiConference} conference - The conference.\r\n     * @param {Function} sendMessage - The function to use to send a message.\r\n     * @param {Object} options\r\n     */\r\n    constructor(conference, options, sendMessage) {\r\n        this.conference = conference;\r\n        this.eventEmitter = conference.eventEmitter;\r\n        this.sendMessage = sendMessage;\r\n\r\n        // The interval at which pings will be sent (<= 0 disables sending).\r\n        this.pingIntervalMs = 10000;\r\n\r\n        // The interval at which analytics events will be sent.\r\n        this.analyticsIntervalMs = 60000;\r\n\r\n        // Maps a participant ID to its ParticipantWrapper\r\n        this.participants = {};\r\n\r\n        // Whether the WebRTC channel has been opened or not.\r\n        this.isDataChannelOpen = false;\r\n\r\n        if (options && options.e2eping) {\r\n            if (typeof options.e2eping.pingInterval === 'number') {\r\n                this.pingIntervalMs = options.e2eping.pingInterval;\r\n            }\r\n            if (typeof options.e2eping.analyticsInterval === 'number') {\r\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\r\n            }\r\n\r\n            // We want to report at most once a ping interval.\r\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\r\n                < this.pingIntervalMs) {\r\n                this.analyticsIntervalMs = this.pingIntervalMs;\r\n            }\r\n        }\r\n        logger.info(\r\n            `Initializing e2e ping; pingInterval=${\r\n                this.pingIntervalMs}, analyticsInterval=${\r\n                this.analyticsIntervalMs}.`);\r\n\r\n        this.participantJoined = this.participantJoined.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this.participantJoined);\r\n\r\n        this.participantLeft = this.participantLeft.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this.participantLeft);\r\n\r\n        this.messageReceived = this.messageReceived.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            this.messageReceived);\r\n\r\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\r\n        conference.on(\r\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\r\n            this.dataChannelOpened);\r\n    }\r\n\r\n    /**\r\n     * Notifies this instance that the communications channel has been opened\r\n     * and it can now send messages via sendMessage.\r\n     */\r\n    dataChannelOpened() {\r\n        this.isDataChannelOpen = true;\r\n\r\n        // We don't want to wait the whole interval before sending the first\r\n        // request, but we can't send it immediately after the participant joins\r\n        // either, because our data channel might not have initialized.\r\n        // So once the data channel initializes, send requests to everyone.\r\n        // Wait an additional 200ms to give a chance to the remote side (if it\r\n        // also just connected as is the case for the first 2 participants in a\r\n        // conference) to open its data channel.\r\n        for (const id in this.participants) {\r\n            if (this.participants.hasOwnProperty(id)) {\r\n                const participantWrapper = this.participants[id];\r\n\r\n                window.setTimeout(participantWrapper.sendRequest, 200);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a message that was received.\r\n     *\r\n     * @param participant - The message sender.\r\n     * @param payload - The payload of the message.\r\n     */\r\n    messageReceived(participant, payload) {\r\n        // Listen to E2E PING requests and responses from other participants\r\n        // in the conference.\r\n        if (payload.type === E2E_PING_REQUEST) {\r\n            this.handleRequest(participant.getId(), payload);\r\n        } else if (payload.type === E2E_PING_RESPONSE) {\r\n            this.handleResponse(participant.getId(), payload);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a participant joining the conference. Starts to send ping\r\n     * requests to the participant.\r\n     *\r\n     * @param {String} id - The ID of the participant.\r\n     * @param {JitsiParticipant} participant - The participant that joined.\r\n     */\r\n    participantJoined(id, participant) {\r\n        if (this.pingIntervalMs <= 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.participants[id]) {\r\n            logger.info(\r\n                `Participant wrapper already exists for ${id}. Clearing.`);\r\n            this.participants[id].clearIntervals();\r\n            delete this.participants[id];\r\n        }\r\n\r\n        this.participants[id] = new ParticipantWrapper(participant, this);\r\n    }\r\n\r\n    /**\r\n     * Handles a participant leaving the conference. Stops sending requests.\r\n     *\r\n     * @param {String} id - The ID of the participant.\r\n     */\r\n    participantLeft(id) {\r\n        if (this.pingIntervalMs <= 0) {\r\n            return;\r\n        }\r\n\r\n        if (this.participants[id]) {\r\n            this.participants[id].clearIntervals();\r\n            delete this.participants[id];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a ping request coming from another participant.\r\n     *\r\n     * @param {string} participantId - The ID of the participant who sent the\r\n     * request.\r\n     * @param {Object} request - The request.\r\n     */\r\n    handleRequest(participantId, request) {\r\n        // If it's a valid request, just send a response.\r\n        if (request && request.id) {\r\n            const response = {\r\n                type: E2E_PING_RESPONSE,\r\n                id: request.id\r\n            };\r\n\r\n            this.sendMessage(response, participantId);\r\n        } else {\r\n            logger.info(\r\n                `Received an invalid e2e ping request from ${participantId}.`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handles a ping response coming from another participant\r\n     * @param {string} participantId - The ID of the participant who sent the\r\n     * response.\r\n     * @param {Object} response - The response.\r\n     */\r\n    handleResponse(participantId, response) {\r\n        const participantWrapper = this.participants[participantId];\r\n\r\n        if (participantWrapper) {\r\n            participantWrapper.handleResponse(response);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stops this E2ePing (i.e. stop sending requests).\r\n     */\r\n    stop() {\r\n        logger.info('Stopping e2eping');\r\n\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this.participantJoined);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this.participantLeft);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\r\n            this.messageReceived);\r\n        this.conference.off(\r\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\r\n            this.dataChannelOpened);\r\n\r\n        for (const id in this.participants) {\r\n            if (this.participants.hasOwnProperty(id)) {\r\n                this.participants[id].clearIntervals();\r\n            }\r\n        }\r\n\r\n        this.participants = {};\r\n    }\r\n}\r\n\r\n","/* global __filename */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\r\n * P2P status and the conference participants count. See the event description\r\n * for more info.\r\n */\r\nexport default class Jvb121EventGenerator {\r\n    /**\r\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\r\n     * @param {JitsiConference} conference\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\r\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\r\n         * the conference is currently in the P2P mode.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this._jvb121 = true;\r\n\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\r\n        this._conference.addEventListener(\r\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\r\n    }\r\n\r\n    /**\r\n     * Checks whether the JVB121 value should be updated and a new event\r\n     * emitted.\r\n     */\r\n    evaluateStatus() {\r\n        const oldStatus = this._jvb121;\r\n        const newStatus\r\n            = !this._conference.isP2PActive()\r\n                && this._conference.getParticipantCount() <= 2;\r\n\r\n        if (oldStatus !== newStatus) {\r\n            this._jvb121 = newStatus;\r\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\r\n            this._conference.eventEmitter.emit(\r\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\r\n        }\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport MediaSessionEvents from '../xmpp/MediaSessionEvents';\n\n/**\n * The class manages send and receive video constraints across media sessions({@link JingleSessionPC}) which belong to\n * {@link JitsiConference}. It finds the lowest common value, between the local user's send preference and\n * the remote party's receive preference. Also this module will consider only the active session's receive value,\n * because local tracks are shared and while JVB may have no preference, the remote p2p may have and they may be totally\n * different.\n */\nexport class QualityController {\n    /**\n     * Creates new instance for a given conference.\n     *\n     * @param {JitsiConference} conference - the conference instance for which the new instance will be managing\n     * the quality constraints.\n     */\n    constructor(conference) {\n        this.conference = conference;\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_STARTED,\n            session => this._onMediaSessionStarted(session));\n        this.conference.on(\n            JitsiConferenceEvents._MEDIA_SESSION_ACTIVE_CHANGED,\n            () => this._propagateSendMaxFrameHeight());\n    }\n\n    /**\n     * Handles the {@link JitsiConferenceEvents.MEDIA_SESSION_STARTED}, that is when the conference creates new media\n     * session. It doesn't mean it's already active though. For example the JVB connection may be created after\n     * the conference has entered the p2p mode already.\n     *\n     * @param {JingleSessionPC} mediaSession - the started media session.\n     * @private\n     */\n    _onMediaSessionStarted(mediaSession) {\n        mediaSession.addListener(\n            MediaSessionEvents.REMOTE_VIDEO_CONSTRAINTS_CHANGED,\n            session => {\n                if (session === this.conference._getActiveMediaSession()) {\n                    this._propagateSendMaxFrameHeight();\n                }\n            });\n        this.preferredReceiveMaxFrameHeight\n            && mediaSession.setReceiverVideoConstraint(this.preferredReceiveMaxFrameHeight);\n\n        // Set the degradation preference on the local video track.\n        mediaSession.setSenderVideoDegradationPreference();\n\n        // Set the max bitrates on video sender if they are specified in config.js videoQuality settings.\n        mediaSession.setSenderMaxBitrates();\n    }\n\n    /**\n     * Figures out the send video constraint as specified by {@link selectSendMaxFrameHeight} and sets it on all media\n     * sessions for the reasons mentioned in this class description.\n     *\n     * @returns {Promise<void[]>}\n     * @private\n     */\n    _propagateSendMaxFrameHeight() {\n        const sendMaxFrameHeight = this.selectSendMaxFrameHeight();\n        const promises = [];\n\n        if (sendMaxFrameHeight >= 0) {\n            for (const session of this.conference._getMediaSessions()) {\n                promises.push(session.setSenderVideoConstraint(sendMaxFrameHeight));\n            }\n        }\n\n        return Promise.all(promises);\n    }\n\n    /**\n     * Selects the lowest common value for the local video send constraint by looking at local user's preference and\n     * the active media session's receive preference set by the remote party.\n     *\n     * @returns {number|undefined}\n     */\n    selectSendMaxFrameHeight() {\n        const activeMediaSession = this.conference._getActiveMediaSession();\n        const remoteRecvMaxFrameHeight = activeMediaSession && activeMediaSession.getRemoteRecvMaxFrameHeight();\n\n        if (this.preferredSendMaxFrameHeight >= 0 && remoteRecvMaxFrameHeight >= 0) {\n            return Math.min(this.preferredSendMaxFrameHeight, remoteRecvMaxFrameHeight);\n        } else if (remoteRecvMaxFrameHeight >= 0) {\n            return remoteRecvMaxFrameHeight;\n        }\n\n        return this.preferredSendMaxFrameHeight;\n    }\n\n    /**\n     * Sets local preference for max receive video frame height.\n     * @param {number|undefined} maxFrameHeight - the new value.\n     */\n    setPreferredReceiveMaxFrameHeight(maxFrameHeight) {\n        this.preferredReceiveMaxFrameHeight = maxFrameHeight;\n\n        for (const session of this.conference._getMediaSessions()) {\n            maxFrameHeight && session.setReceiverVideoConstraint(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Sets local preference for max send video frame height.\n     *\n     * @param {number} maxFrameHeight - the new value to set.\n     * @returns {Promise<void[]>} - resolved when the operation is complete.\n     */\n    setPreferredSendMaxFrameHeight(maxFrameHeight) {\n        this.preferredSendMaxFrameHeight = maxFrameHeight;\n\n        return this._propagateSendMaxFrameHeight();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport JibriSession from './JibriSession';\r\nimport recordingXMLUtils from './recordingXMLUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * A class responsible for starting and stopping recording sessions and emitting\r\n * state updates for them.\r\n */\r\nclass RecordingManager {\r\n    /**\r\n     * Initialize {@code RecordingManager} with other objects that are necessary\r\n     * for starting a recording.\r\n     *\r\n     * @param {ChatRoom} chatRoom - The chat room to handle.\r\n     * @returns {void}\r\n     */\r\n    constructor(chatRoom) {\r\n        /**\r\n         * All known recording sessions from the current conference.\r\n         */\r\n        this._sessions = {};\r\n\r\n        this._chatRoom = chatRoom;\r\n\r\n        this.onPresence = this.onPresence.bind(this);\r\n\r\n        this._chatRoom.eventEmitter.addListener(\r\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\r\n    }\r\n\r\n    /**\r\n     * Finds an existing recording session by session ID.\r\n     *\r\n     * @param {string} sessionID - The session ID associated with the recording.\r\n     * @returns {JibriSession|undefined}\r\n     */\r\n    getSession(sessionID) {\r\n        return this._sessions[sessionID];\r\n    }\r\n\r\n    /**\r\n     * Callback to invoke to parse through a presence update to find recording\r\n     * related updates (from Jibri participant doing the recording and the\r\n     * focus which controls recording).\r\n     *\r\n     * @param {Object} event - The presence data from the pubsub event.\r\n     * @param {Node} event.presence - An XMPP presence update.\r\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\r\n     * from a participant that is trusted but not visible, as would be the case\r\n     * with the Jibri recorder participant.\r\n     * @returns {void}\r\n     */\r\n    onPresence({ fromHiddenDomain, presence }) {\r\n        if (recordingXMLUtils.isFromFocus(presence)) {\r\n            this._handleFocusPresence(presence);\r\n        } else if (fromHiddenDomain) {\r\n            this._handleJibriPresence(presence);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Start a recording session.\r\n     *\r\n     * @param {Object} options - Configuration for the recording.\r\n     * @param {string} [options.appData] - Data specific to the app/service that\r\n     * the result file will be uploaded.\r\n     * @param {string} [optional] options.broadcastId - The channel on which a\r\n     * live stream will occur.\r\n     * @param {string} options.mode - The mode in which recording should be\r\n     * started. Recognized values are \"file\" and \"stream\".\r\n     * @param {string} [optional] options.streamId - The stream key to be used\r\n     * for live stream broadcasting. Required for live streaming.\r\n     * @returns {Promise} A promise for starting a recording, which will pass\r\n     * back the session on success. The promise resolves after receiving an\r\n     * acknowledgment of the start request success or fail.\r\n     */\r\n    startRecording(options) {\r\n        const session = new JibriSession({\r\n            ...options,\r\n            connection: this._chatRoom.connection\r\n        });\r\n\r\n        return session.start({\r\n            appData: options.appData,\r\n            broadcastId: options.broadcastId,\r\n            focusMucJid: this._chatRoom.focusMucJid,\r\n            streamId: options.streamId\r\n        })\r\n            .then(() => {\r\n                // Only store the session and emit if the session has not been\r\n                // added already. This is a workaround for the session getting\r\n                // created due to a presence update to announce a \"pending\"\r\n                // recording being received before JibriSession#start finishes.\r\n                if (!this.getSession(session.getID())) {\r\n                    this._addSession(session);\r\n                    this._emitSessionUpdate(session);\r\n                }\r\n\r\n                return session;\r\n            })\r\n            .catch(error => {\r\n                this._emitSessionUpdate(session);\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Stop a recording session.\r\n     *\r\n     * @param {string} sessionID - The ID associated with the recording session\r\n     * to be stopped.\r\n     * @returns {Promise} The promise resolves after receiving an\r\n     * acknowledgment of the stop request success or fail.\r\n     */\r\n    stopRecording(sessionID) {\r\n        const session = this.getSession(sessionID);\r\n\r\n        if (session) {\r\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\r\n        }\r\n\r\n        return Promise.reject(new Error('Could not find session'));\r\n    }\r\n\r\n    /**\r\n     * Stores a reference to the passed in JibriSession.\r\n     *\r\n     * @param {string} session - The JibriSession instance to store.\r\n     * @returns {void}\r\n     */\r\n    _addSession(session) {\r\n        this._sessions[session.getID()] = session;\r\n    }\r\n\r\n    /**\r\n     * Create a new instance of a recording session and stores a reference to\r\n     * it.\r\n     *\r\n     * @param {string} sessionID - The session ID of the recording in progress.\r\n     * @param {string} status - The current status of the recording session.\r\n     * @param {string} mode - The recording mode of the session.\r\n     * @returns {JibriSession}\r\n     */\r\n    _createSession(sessionID, status, mode) {\r\n        const session = new JibriSession({\r\n            connection: this._chatRoom.connection,\r\n            focusMucJid: this._chatRoom.focusMucJid,\r\n            mode,\r\n            sessionID,\r\n            status\r\n        });\r\n\r\n        this._addSession(session);\r\n\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * Notifies listeners of an update to a recording session.\r\n     *\r\n     * @param {JibriSession} session - The session that has been updated.\r\n     * @param {string|undefined} initiator - The jid of the initiator of the update.\r\n     */\r\n    _emitSessionUpdate(session, initiator) {\r\n        this._chatRoom.eventEmitter.emit(\r\n            XMPPEvents.RECORDER_STATE_CHANGED, session, initiator);\r\n    }\r\n\r\n    /**\r\n     * Parses presence to update an existing JibriSession or to create a new\r\n     * JibriSession.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {void}\r\n     */\r\n    _handleFocusPresence(presence) {\r\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\r\n\r\n        if (!jibriStatus) {\r\n            return;\r\n        }\r\n\r\n        const { error, initiator, recordingMode, sessionID, status } = jibriStatus;\r\n\r\n        // We'll look for an existing session or create one (in case we're a\r\n        // participant joining a call with an existing recording going on).\r\n        let session = this.getSession(sessionID);\r\n\r\n        // Handle the case where a status update is received in presence but\r\n        // the local participant has joined while the JibriSession has already\r\n        // ended.\r\n        if (!session && status === 'off') {\r\n            logger.warn(\r\n                'Ignoring recording presence update',\r\n                'Received a new session with status off.');\r\n\r\n            return;\r\n        }\r\n\r\n        // Jicofo sends updates via presence, and any extension in presence\r\n        // is sent until it is explicitly removed.  It's difficult for\r\n        // Jicofo to know when a presence has been sent once, so it won't\r\n        // remove jibri status extension.  This means we may receive the same\r\n        // status update more than once, so check for that here\r\n        if (session\r\n            && session.getStatus() === status\r\n            && session.getError() === error) {\r\n            logger.warn('Ignoring duplicate presence update: ',\r\n                JSON.stringify(jibriStatus));\r\n\r\n            return;\r\n        }\r\n\r\n        if (!session) {\r\n            session = this._createSession(sessionID, status, recordingMode);\r\n        }\r\n\r\n        session.setStatus(status);\r\n\r\n        if (error) {\r\n            session.setError(error);\r\n        }\r\n\r\n        this._emitSessionUpdate(session, initiator);\r\n    }\r\n\r\n    /**\r\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\r\n     * needs to be updated in a JibriSession.\r\n     *\r\n     * @param {Node} presence - An XMPP presence update.\r\n     * @returns {void}\r\n     */\r\n    _handleJibriPresence(presence) {\r\n        const { liveStreamViewURL, mode, sessionID }\r\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\r\n\r\n        if (!sessionID) {\r\n            logger.warn(\r\n                'Ignoring potential jibri presence due to no session id.');\r\n\r\n            return;\r\n        }\r\n\r\n        let session = this.getSession(sessionID);\r\n\r\n        if (!session) {\r\n            session = this._createSession(sessionID, '', mode);\r\n        }\r\n\r\n        session.setLiveStreamViewURL(liveStreamViewURL);\r\n\r\n        this._emitSessionUpdate(session);\r\n    }\r\n}\r\n\r\nexport default RecordingManager;\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\r\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\r\n\r\nimport Statistics from './statistics';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Number of local samples that will be used for comparison before and after the remote sample is received.\r\n */\r\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\r\n\r\n/**\r\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\r\n * participant and compares them to detect potential audio problem for a participant.\r\n */\r\nexport default class AudioOutputProblemDetector {\r\n\r\n    /**\r\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\r\n     *\r\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\r\n     */\r\n    constructor(conference) {\r\n        this._conference = conference;\r\n        this._localAudioLevelCache = {};\r\n        this._reportedParticipants = [];\r\n        this._audioProblemCandidates = {};\r\n        this._numberOfRemoteAudioLevelsReceived = {};\r\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\r\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\r\n        this._clearUserData = this._clearUserData.bind(this);\r\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\r\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\r\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\r\n    }\r\n\r\n    /**\r\n     * A listener for audio level data received by a remote participant.\r\n     *\r\n     * @param {string} userID - The user id of the participant that sent the data.\r\n     * @param {number} audioLevel - The average audio level value.\r\n     * @returns {void}\r\n     */\r\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\r\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\r\n\r\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\r\n\r\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\r\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\r\n            return;\r\n        }\r\n\r\n        const participant = this._conference.getParticipantById(userID);\r\n\r\n        if (participant) {\r\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\r\n\r\n            if (tracks.length > 0 && participant.isAudioMuted()) {\r\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\r\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\r\n                // zero values for muted track.\r\n                return;\r\n            }\r\n        }\r\n\r\n        const localAudioLevels = this._localAudioLevelCache[userID];\r\n\r\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\r\n            this._audioProblemCandidates[userID] = {\r\n                remoteAudioLevels: avgAudioLevels,\r\n                localAudioLevels: []\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * A listener for audio level data retrieved by the local stats.\r\n     *\r\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\r\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\r\n     * @returns {void}\r\n     */\r\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\r\n        if (tpc !== this._conference.getActivePeerConnection()) {\r\n            return;\r\n        }\r\n\r\n        Object.keys(avgAudioLevels).forEach(userID => {\r\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\r\n                return;\r\n            }\r\n\r\n            const localAudioLevels = this._localAudioLevelCache[userID];\r\n\r\n            if (!Array.isArray(localAudioLevels)) {\r\n                this._localAudioLevelCache[userID] = [ ];\r\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\r\n                localAudioLevels.shift();\r\n            }\r\n\r\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\r\n        });\r\n\r\n\r\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\r\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\r\n\r\n            localAudioLevels.push(avgAudioLevels[userID]);\r\n\r\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\r\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\r\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\r\n\r\n                    Statistics.sendAnalytics(\r\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\r\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\r\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\r\n                        remoteAudioLevels}`);\r\n                    this._reportedParticipants.push(userID);\r\n                    this._clearUserData(userID);\r\n                }\r\n\r\n                delete this._audioProblemCandidates[userID];\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Clears the data stored for a participant.\r\n     *\r\n     * @param {string} userID - The id of the participant.\r\n     * @returns {void}\r\n     */\r\n    _clearUserData(userID) {\r\n        delete this._localAudioLevelCache[userID];\r\n    }\r\n\r\n    /**\r\n     * Disposes the allocated resources.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    dispose() {\r\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\r\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\r\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\r\n        this._localAudioLevelCache = undefined;\r\n        this._audioProblemCandidates = undefined;\r\n        this._reportedParticipants = undefined;\r\n        this._numberOfRemoteAudioLevelsReceived = undefined;\r\n        this._conference = undefined;\r\n    }\r\n}\r\n","/* global __filename */\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport isEqual from 'lodash.isequal';\r\n\r\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport * as VideoType from '../../service/RTC/VideoType';\r\nimport * as ConnectionQualityEvents\r\n    from '../../service/connectivity/ConnectionQualityEvents';\r\nimport {\r\n    createRtpStatsEvent,\r\n    createTransportStatsEvent\r\n} from '../../service/statistics/AnalyticsEvents';\r\nimport browser from '../browser';\r\n\r\nimport Statistics from './statistics';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * This will calculate an average for one, named stat and submit it to\r\n * the analytics module when requested. It automatically counts the samples.\r\n */\r\nclass AverageStatReport {\r\n    /**\r\n     * Creates new <tt>AverageStatReport</tt> for given name.\r\n     * @param {string} name that's the name of the event that will be reported\r\n     * to the analytics module.\r\n     */\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.count = 0;\r\n        this.sum = 0;\r\n        this.samples = [];\r\n    }\r\n\r\n    /**\r\n     * Adds the next value that will be included in the average when\r\n     * {@link calculate} is called.\r\n     * @param {number} nextValue\r\n     */\r\n    addNext(nextValue) {\r\n        if (typeof nextValue !== 'number') {\r\n            logger.error(\r\n                `${this.name} - invalid value for idx: ${this.count}`,\r\n                nextValue);\r\n        } else if (!isNaN(nextValue)) {\r\n            this.sum += nextValue;\r\n            this.samples.push(nextValue);\r\n            this.count += 1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates an average for the samples collected using {@link addNext}.\r\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\r\n     * if no samples were collected.\r\n     */\r\n    calculate() {\r\n        return this.sum / this.count;\r\n    }\r\n\r\n    /**\r\n     * Appends the report to the analytics \"data\" object. The object will be\r\n     * set under <tt>prefix</tt> + {@link this.name} key.\r\n     * @param {Object} report the analytics \"data\" object\r\n     */\r\n    appendReport(report) {\r\n        report[`${this.name}_avg`] = this.calculate();\r\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\r\n    }\r\n\r\n    /**\r\n     * Clears all memory of any samples collected, so that new average can be\r\n     * calculated using this instance.\r\n     */\r\n    reset() {\r\n        this.samples = [];\r\n        this.sum = 0;\r\n        this.count = 0;\r\n    }\r\n}\r\n\r\n/**\r\n * Class gathers the stats that are calculated and reported for a\r\n * {@link TraceablePeerConnection} even if it's not currently active. For\r\n * example we want to monitor RTT for the JVB connection while in P2P mode.\r\n */\r\nclass ConnectionAvgStats {\r\n    /**\r\n     * Creates new <tt>ConnectionAvgStats</tt>\r\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\r\n     * @param {boolean} isP2P\r\n     * @param {number} n the number of samples, before arithmetic mean is to be\r\n     * calculated and values submitted to the analytics module.\r\n     */\r\n    constructor(avgRtpStatsReporter, isP2P, n) {\r\n        /**\r\n         * Is this instance for JVB or P2P connection ?\r\n         * @type {boolean}\r\n         */\r\n        this.isP2P = isP2P;\r\n\r\n        /**\r\n         * How many samples are to be included in arithmetic mean calculation.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._n = n;\r\n\r\n        /**\r\n         * The current sample index. Starts from 0 and goes up to {@link _n})\r\n         * when analytics report will be submitted.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._sampleIdx = 0;\r\n\r\n        /**\r\n         * Average round trip time reported by the ICE candidate pair.\r\n         * @type {AverageStatReport}\r\n         */\r\n        this._avgRTT = new AverageStatReport('rtt');\r\n\r\n        /**\r\n         * Map stores average RTT to the JVB reported by remote participants.\r\n         * Mapped per participant id {@link JitsiParticipant.getId}.\r\n         *\r\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\r\n         * <tt>false</tt>.\r\n         *\r\n         * @type {Map<string,AverageStatReport>}\r\n         * @private\r\n         */\r\n        this._avgRemoteRTTMap = new Map();\r\n\r\n        /**\r\n         * The conference for which stats will be collected and reported.\r\n         * @type {JitsiConference}\r\n         * @private\r\n         */\r\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\r\n\r\n        /**\r\n         * The latest average E2E RTT for the JVB connection only.\r\n         *\r\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\r\n         * <tt>false</tt>.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this._avgEnd2EndRTT = undefined;\r\n\r\n        this._onConnectionStats = (tpc, stats) => {\r\n            if (this.isP2P === tpc.isP2P) {\r\n                this._calculateAvgStats(stats);\r\n            }\r\n        };\r\n\r\n        const conference = avgRtpStatsReporter._conference;\r\n\r\n        conference.statistics.addConnectionStatsListener(\r\n            this._onConnectionStats);\r\n\r\n        if (!this.isP2P) {\r\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\r\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\r\n\r\n            this._onRemoteStatsUpdated\r\n                = (id, data) => this._processRemoteStats(id, data);\r\n            conference.on(\r\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n                this._onRemoteStatsUpdated);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Processes next batch of stats.\r\n     * @param {go figure} data\r\n     * @private\r\n     */\r\n    _calculateAvgStats(data) {\r\n        if (!data) {\r\n            logger.error('No stats');\r\n\r\n            return;\r\n        }\r\n\r\n        if (browser.supportsRTTStatistics()) {\r\n            if (data.transport && data.transport.length) {\r\n                this._avgRTT.addNext(data.transport[0].rtt);\r\n            }\r\n        }\r\n\r\n        this._sampleIdx += 1;\r\n\r\n        if (this._sampleIdx >= this._n) {\r\n            if (browser.supportsRTTStatistics()) {\r\n                const conference = this._avgRtpStatsReporter._conference;\r\n\r\n                const batchReport = {\r\n                    p2p: this.isP2P,\r\n                    'conference_size': conference.getParticipantCount()\r\n                };\r\n\r\n                if (data.transport && data.transport.length) {\r\n                    Object.assign(batchReport, {\r\n                        'local_candidate_type':\r\n                            data.transport[0].localCandidateType,\r\n                        'remote_candidate_type':\r\n                            data.transport[0].remoteCandidateType,\r\n                        'transport_type': data.transport[0].type\r\n                    });\r\n                }\r\n\r\n                this._avgRTT.appendReport(batchReport);\r\n\r\n                if (this.isP2P) {\r\n                    // Report RTT diff only for P2P.\r\n                    const jvbEnd2EndRTT = this\r\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\r\n\r\n                    if (!isNaN(jvbEnd2EndRTT)) {\r\n                        // eslint-disable-next-line dot-notation\r\n                        batchReport['rtt_diff']\r\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\r\n                    }\r\n                } else {\r\n                    // Report end to end RTT only for JVB.\r\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\r\n                    const avgLocalRTT = this._avgRTT.calculate();\r\n\r\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\r\n\r\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\r\n                        // eslint-disable-next-line dot-notation\r\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\r\n                    }\r\n                }\r\n\r\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\r\n            }\r\n\r\n            this._resetAvgStats();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\r\n     * participants.\r\n     * @return {number|NaN} NaN if not available (not enough data)\r\n     * @private\r\n     */\r\n    _calculateAvgRemoteRTT() {\r\n        let count = 0, sum = 0;\r\n\r\n        // FIXME should we ignore RTT for participant\r\n        // who \"is having connectivity issues\" ?\r\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\r\n            const avg = remoteAvg.calculate();\r\n\r\n            if (!isNaN(avg)) {\r\n                sum += avg;\r\n                count += 1;\r\n                remoteAvg.reset();\r\n            }\r\n        }\r\n\r\n        return sum / count;\r\n    }\r\n\r\n    /**\r\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\r\n     * RTT towards the JVB reported by each participant.\r\n     * @param {string} id {@link JitsiParticipant.getId}\r\n     * @param {go figure in ConnectionQuality.js} data\r\n     * @private\r\n     */\r\n    _processRemoteStats(id, data) {\r\n        const validData = typeof data.jvbRTT === 'number';\r\n        let rttAvg = this._avgRemoteRTTMap.get(id);\r\n\r\n        if (!rttAvg && validData) {\r\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\r\n            this._avgRemoteRTTMap.set(id, rttAvg);\r\n        }\r\n\r\n        if (validData) {\r\n            rttAvg.addNext(data.jvbRTT);\r\n        } else if (rttAvg) {\r\n            this._avgRemoteRTTMap.delete(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reset cache of all averages and {@link _sampleIdx}.\r\n     * @private\r\n     */\r\n    _resetAvgStats() {\r\n        this._avgRTT.reset();\r\n        if (this._avgRemoteRTTMap) {\r\n            this._avgRemoteRTTMap.clear();\r\n        }\r\n        this._sampleIdx = 0;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    dispose() {\r\n\r\n        const conference = this._avgRtpStatsReporter._conference;\r\n\r\n        conference.statistics.removeConnectionStatsListener(\r\n            this._onConnectionStats);\r\n        if (!this.isP2P) {\r\n            conference.off(\r\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\r\n                this._onRemoteStatsUpdated);\r\n            conference.off(\r\n                ConferenceEvents.USER_LEFT,\r\n                this._onUserLeft);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Reports average RTP statistics values (arithmetic mean) to the analytics\r\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\r\n * of the P2P vs JVB conference modes and submits the values under different\r\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\r\n * P2P mode resets the data collected so far and averages are calculated from\r\n * scratch.\r\n */\r\nexport default class AvgRTPStatsReporter {\r\n    /**\r\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\r\n     * @param {JitsiConference} conference\r\n     * @param {number} n the number of samples, before arithmetic mean is to be\r\n     * calculated and values submitted to the analytics module.\r\n     */\r\n    constructor(conference, n) {\r\n        /**\r\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\r\n         * are to be included in arithmetic mean calculation.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._n = n;\r\n\r\n        if (n > 0) {\r\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\r\n        } else {\r\n            logger.info('Avg RTP stats reports are disabled.');\r\n\r\n            // Do not initialize\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * The current sample index. Starts from 0 and goes up to {@link _n})\r\n         * when analytics report will be submitted.\r\n         * @type {number}\r\n         * @private\r\n         */\r\n        this._sampleIdx = 0;\r\n\r\n        /**\r\n         * The conference for which stats will be collected and reported.\r\n         * @type {JitsiConference}\r\n         * @private\r\n         */\r\n        this._conference = conference;\r\n\r\n        /**\r\n         * Average audio upload bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgAudioBitrateUp\r\n            = new AverageStatReport('bitrate_audio_upload');\r\n\r\n        /**\r\n         * Average audio download bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgAudioBitrateDown\r\n            = new AverageStatReport('bitrate_audio_download');\r\n\r\n        /**\r\n         * Average video upload bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgVideoBitrateUp\r\n            = new AverageStatReport('bitrate_video_upload');\r\n\r\n        /**\r\n         * Average video download bitrate\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgVideoBitrateDown\r\n            = new AverageStatReport('bitrate_video_download');\r\n\r\n        /**\r\n         * Average upload bandwidth\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgBandwidthUp\r\n            = new AverageStatReport('bandwidth_upload');\r\n\r\n        /**\r\n         * Average download bandwidth\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgBandwidthDown\r\n            = new AverageStatReport('bandwidth_download');\r\n\r\n        /**\r\n         * Average total packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossTotal\r\n            = new AverageStatReport('packet_loss_total');\r\n\r\n        /**\r\n         * Average upload packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossUp\r\n            = new AverageStatReport('packet_loss_upload');\r\n\r\n        /**\r\n         * Average download packet loss\r\n         * XXX What are the units?\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgPacketLossDown\r\n            = new AverageStatReport('packet_loss_download');\r\n\r\n        /**\r\n         * Average FPS for remote videos\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\r\n\r\n        /**\r\n         * Average FPS for remote screen streaming videos (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteScreenFPS\r\n            = new AverageStatReport('framerate_screen_remote');\r\n\r\n        /**\r\n         * Average FPS for local video (camera)\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\r\n\r\n        /**\r\n         * Average FPS for local screen streaming video (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalScreenFPS\r\n            = new AverageStatReport('framerate_screen_local');\r\n\r\n        /**\r\n         * Average pixels for remote screen streaming videos (reported only if\r\n         * not a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteCameraPixels\r\n            = new AverageStatReport('pixels_remote');\r\n\r\n        /**\r\n         * Average pixels for remote screen streaming videos (reported only if\r\n         * not a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgRemoteScreenPixels\r\n            = new AverageStatReport('pixels_screen_remote');\r\n\r\n        /**\r\n         * Average pixels for local video (camera)\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalCameraPixels\r\n            = new AverageStatReport('pixels_local');\r\n\r\n        /**\r\n         * Average pixels for local screen streaming video (reported only if not\r\n         * a <tt>NaN</tt>).\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgLocalScreenPixels\r\n            = new AverageStatReport('pixels_screen_local');\r\n\r\n        /**\r\n         * Average connection quality as defined by\r\n         * the {@link ConnectionQuality} module.\r\n         * @type {AverageStatReport}\r\n         * @private\r\n         */\r\n        this._avgCQ = new AverageStatReport('connection_quality');\r\n\r\n        this._cachedTransportStats = undefined;\r\n\r\n        this._onLocalStatsUpdated = data => {\r\n            this._calculateAvgStats(data);\r\n            this._maybeSendTransportAnalyticsEvent(data);\r\n        };\r\n        conference.on(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._onLocalStatsUpdated);\r\n\r\n        this._onP2PStatusChanged = () => {\r\n            logger.debug('Resetting average stats calculation');\r\n            this._resetAvgStats();\r\n            this.jvbStatsMonitor._resetAvgStats();\r\n            this.p2pStatsMonitor._resetAvgStats();\r\n        };\r\n        conference.on(\r\n            ConferenceEvents.P2P_STATUS,\r\n            this._onP2PStatusChanged);\r\n\r\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\r\n            // We want to reset only on the transition from false => true,\r\n            // because otherwise those stats are resetted on JVB <=> P2P\r\n            // transition.\r\n            if (newStatus === true) {\r\n                logger.info('Resetting JVB avg RTP stats');\r\n                this._resetAvgJvbStats();\r\n            }\r\n        };\r\n        conference.on(\r\n            ConferenceEvents.JVB121_STATUS,\r\n            this._onJvb121StatusChanged);\r\n\r\n        this.jvbStatsMonitor\r\n            = new ConnectionAvgStats(this, false /* JVB */, n);\r\n\r\n        this.p2pStatsMonitor\r\n            = new ConnectionAvgStats(this, true /* P2P */, n);\r\n    }\r\n\r\n    /**\r\n     * Processes next batch of stats reported on\r\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\r\n     * @param {go figure} data\r\n     * @private\r\n     */\r\n    _calculateAvgStats(data) {\r\n\r\n        if (!data) {\r\n            logger.error('No stats');\r\n\r\n            return;\r\n        }\r\n\r\n        const isP2P = this._conference.isP2PActive();\r\n        const confSize = this._conference.getParticipantCount();\r\n\r\n        if (!isP2P && confSize < 2) {\r\n\r\n            // There's no point in collecting stats for a JVB conference of 1.\r\n            // That happens for short period of time after everyone leaves\r\n            // the room, until Jicofo terminates the session.\r\n            return;\r\n        }\r\n\r\n        /* Uncomment to figure out stats structure\r\n        for (const key in data) {\r\n            if (data.hasOwnProperty(key)) {\r\n                logger.info(`local stat ${key}: `, data[key]);\r\n            }\r\n        } */\r\n\r\n        const bitrate = data.bitrate;\r\n        const bandwidth = data.bandwidth;\r\n        const packetLoss = data.packetLoss;\r\n        const frameRate = data.framerate;\r\n        const resolution = data.resolution;\r\n\r\n        if (!bitrate) {\r\n            logger.error('No \"bitrate\"');\r\n\r\n            return;\r\n        } else if (!bandwidth) {\r\n            logger.error('No \"bandwidth\"');\r\n\r\n            return;\r\n        } else if (!packetLoss) {\r\n            logger.error('No \"packetloss\"');\r\n\r\n            return;\r\n        } else if (!frameRate) {\r\n            logger.error('No \"framerate\"');\r\n\r\n            return;\r\n        } else if (!resolution) {\r\n            logger.error('No resolution');\r\n\r\n            return;\r\n        }\r\n\r\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\r\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\r\n\r\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\r\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\r\n\r\n        if (browser.supportsBandwidthStatistics()) {\r\n            this._avgBandwidthUp.addNext(bandwidth.upload);\r\n            this._avgBandwidthDown.addNext(bandwidth.download);\r\n        }\r\n\r\n        this._avgPacketLossUp.addNext(packetLoss.upload);\r\n        this._avgPacketLossDown.addNext(packetLoss.download);\r\n        this._avgPacketLossTotal.addNext(packetLoss.total);\r\n\r\n        this._avgCQ.addNext(data.connectionQuality);\r\n\r\n        if (frameRate) {\r\n            this._avgRemoteFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, false /* remote */, VideoType.CAMERA));\r\n            this._avgRemoteScreenFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, false /* remote */, VideoType.DESKTOP));\r\n\r\n            this._avgLocalFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, true /* local */, VideoType.CAMERA));\r\n            this._avgLocalScreenFPS.addNext(\r\n                this._calculateAvgVideoFps(\r\n                    frameRate, true /* local */, VideoType.DESKTOP));\r\n        }\r\n\r\n        if (resolution) {\r\n            this._avgRemoteCameraPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, false /* remote */, VideoType.CAMERA));\r\n\r\n            this._avgRemoteScreenPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, false /* remote */, VideoType.DESKTOP));\r\n\r\n            this._avgLocalCameraPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, true /* local */, VideoType.CAMERA));\r\n\r\n            this._avgLocalScreenPixels.addNext(\r\n                this._calculateAvgVideoPixels(\r\n                    resolution, true /* local */, VideoType.DESKTOP));\r\n        }\r\n\r\n        this._sampleIdx += 1;\r\n\r\n        if (this._sampleIdx >= this._n) {\r\n\r\n            const batchReport = {\r\n                p2p: isP2P,\r\n                'conference_size': confSize\r\n            };\r\n\r\n            if (data.transport && data.transport.length) {\r\n                Object.assign(batchReport, {\r\n                    'local_candidate_type':\r\n                        data.transport[0].localCandidateType,\r\n                    'remote_candidate_type':\r\n                        data.transport[0].remoteCandidateType,\r\n                    'transport_type': data.transport[0].type\r\n                });\r\n            }\r\n\r\n            this._avgAudioBitrateUp.appendReport(batchReport);\r\n            this._avgAudioBitrateDown.appendReport(batchReport);\r\n\r\n            this._avgVideoBitrateUp.appendReport(batchReport);\r\n            this._avgVideoBitrateDown.appendReport(batchReport);\r\n\r\n            if (browser.supportsBandwidthStatistics()) {\r\n                this._avgBandwidthUp.appendReport(batchReport);\r\n                this._avgBandwidthDown.appendReport(batchReport);\r\n            }\r\n            this._avgPacketLossUp.appendReport(batchReport);\r\n            this._avgPacketLossDown.appendReport(batchReport);\r\n            this._avgPacketLossTotal.appendReport(batchReport);\r\n\r\n            this._avgRemoteFPS.appendReport(batchReport);\r\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\r\n                this._avgRemoteScreenFPS.appendReport(batchReport);\r\n            }\r\n            this._avgLocalFPS.appendReport(batchReport);\r\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\r\n                this._avgLocalScreenFPS.appendReport(batchReport);\r\n            }\r\n\r\n            this._avgRemoteCameraPixels.appendReport(batchReport);\r\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\r\n                this._avgRemoteScreenPixels.appendReport(batchReport);\r\n            }\r\n            this._avgLocalCameraPixels.appendReport(batchReport);\r\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\r\n                this._avgLocalScreenPixels.appendReport(batchReport);\r\n            }\r\n\r\n            this._avgCQ.appendReport(batchReport);\r\n\r\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\r\n\r\n            this._resetAvgStats();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calculates average number of pixels for the report\r\n     *\r\n     * @param {map} peerResolutions a map of peer resolutions\r\n     * @param {boolean} isLocal if the average is to be calculated for the local\r\n     * video or <tt>false</tt> if for remote videos.\r\n     * @param {VideoType} videoType\r\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\r\n     * are no samples.\r\n     * @private\r\n     */\r\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\r\n        let peerPixelsSum = 0;\r\n        let peerCount = 0;\r\n        const myID = this._conference.myUserId();\r\n\r\n        for (const peerID of Object.keys(peerResolutions)) {\r\n            if (isLocal ? peerID === myID : peerID !== myID) {\r\n                const participant\r\n                    = isLocal\r\n                        ? null\r\n                        : this._conference.getParticipantById(peerID);\r\n                const videosResolution = peerResolutions[peerID];\r\n\r\n                // Do not continue without participant for non local peerID\r\n                if ((isLocal || participant) && videosResolution) {\r\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\r\n                        videosResolution, participant, videoType);\r\n\r\n                    if (!isNaN(peerAvgPixels)) {\r\n                        peerPixelsSum += peerAvgPixels;\r\n                        peerCount += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return peerPixelsSum / peerCount;\r\n    }\r\n\r\n    /**\r\n     * Calculate average pixels for either remote or local participant\r\n     * @param {object} videos maps resolution per video SSRC\r\n     * @param {JitsiParticipant|null} participant remote participant or\r\n     * <tt>null</tt> for local video pixels calculation.\r\n     * @param {VideoType} videoType the type of the video for which an average\r\n     * will be calculated.\r\n     * @return {number|NaN} average video pixels of all participant's videos or\r\n     * <tt>NaN</tt> if currently not available\r\n     * @private\r\n     */\r\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\r\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\r\n        let videoTracks = null;\r\n\r\n        // NOTE that this method is supposed to be called for the stats\r\n        // received from the current peerconnection.\r\n        const tpc = this._conference.getActivePeerConnection();\r\n\r\n        if (participant) {\r\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n            if (videoTracks) {\r\n                ssrcs\r\n                    = ssrcs.filter(\r\n                        ssrc => videoTracks.find(\r\n                            track =>\r\n                                !track.isMuted()\r\n                                    && track.getSSRC() === ssrc\r\n                                    && track.videoType === videoType));\r\n            }\r\n        } else {\r\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\r\n            ssrcs\r\n                = ssrcs.filter(\r\n                    ssrc => videoTracks.find(\r\n                        track =>\r\n                            !track.isMuted()\r\n                                && tpc.getLocalSSRC(track) === ssrc\r\n                                && track.videoType === videoType));\r\n        }\r\n\r\n        let peerPixelsSum = 0;\r\n        let peerSsrcCount = 0;\r\n\r\n        for (const ssrc of ssrcs) {\r\n            const peerSsrcPixels\r\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\r\n\r\n            // FPS is reported as 0 for users with no video\r\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\r\n                peerPixelsSum += peerSsrcPixels;\r\n                peerSsrcCount += 1;\r\n            }\r\n        }\r\n\r\n        return peerPixelsSum / peerSsrcCount;\r\n    }\r\n\r\n\r\n    /**\r\n     * Calculates average FPS for the report\r\n     * @param {go figure} frameRate\r\n     * @param {boolean} isLocal if the average is to be calculated for the local\r\n     * video or <tt>false</tt> if for remote videos.\r\n     * @param {VideoType} videoType\r\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\r\n     * @private\r\n     */\r\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\r\n        let peerFpsSum = 0;\r\n        let peerCount = 0;\r\n        const myID = this._conference.myUserId();\r\n\r\n        for (const peerID of Object.keys(frameRate)) {\r\n            if (isLocal ? peerID === myID : peerID !== myID) {\r\n                const participant\r\n                    = isLocal\r\n                        ? null : this._conference.getParticipantById(peerID);\r\n                const videosFps = frameRate[peerID];\r\n\r\n                // Do not continue without participant for non local peerID\r\n                if ((isLocal || participant) && videosFps) {\r\n                    const peerAvgFPS\r\n                        = this._calculatePeerAvgVideoFps(\r\n                            videosFps, participant, videoType);\r\n\r\n                    if (!isNaN(peerAvgFPS)) {\r\n                        peerFpsSum += peerAvgFPS;\r\n                        peerCount += 1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return peerFpsSum / peerCount;\r\n    }\r\n\r\n    /**\r\n     * Calculate average FPS for either remote or local participant\r\n     * @param {object} videos maps FPS per video SSRC\r\n     * @param {JitsiParticipant|null} participant remote participant or\r\n     * <tt>null</tt> for local FPS calculation.\r\n     * @param {VideoType} videoType the type of the video for which an average\r\n     * will be calculated.\r\n     * @return {number|NaN} average FPS of all participant's videos or\r\n     * <tt>NaN</tt> if currently not available\r\n     * @private\r\n     */\r\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\r\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\r\n        let videoTracks = null;\r\n\r\n        // NOTE that this method is supposed to be called for the stats\r\n        // received from the current peerconnection.\r\n        const tpc = this._conference.getActivePeerConnection();\r\n\r\n        if (participant) {\r\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\r\n            if (videoTracks) {\r\n                ssrcs\r\n                    = ssrcs.filter(\r\n                        ssrc => videoTracks.find(\r\n                            track => !track.isMuted()\r\n                                && track.getSSRC() === ssrc\r\n                                && track.videoType === videoType));\r\n            }\r\n        } else {\r\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\r\n            ssrcs\r\n                = ssrcs.filter(\r\n                    ssrc => videoTracks.find(\r\n                        track => !track.isMuted()\r\n                            && tpc.getLocalSSRC(track) === ssrc\r\n                            && track.videoType === videoType));\r\n        }\r\n\r\n        let peerFpsSum = 0;\r\n        let peerSsrcCount = 0;\r\n\r\n        for (const ssrc of ssrcs) {\r\n            const peerSsrcFps = Number(videos[ssrc]);\r\n\r\n            // FPS is reported as 0 for users with no video\r\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\r\n                peerFpsSum += peerSsrcFps;\r\n                peerSsrcCount += 1;\r\n            }\r\n        }\r\n\r\n        return peerFpsSum / peerSsrcCount;\r\n    }\r\n\r\n    /**\r\n     * Sends the 'transport.stats' analytics event whenever we detect that\r\n     * there is a change in the local or remote candidate type on the transport\r\n     * that is currently selected.\r\n     * @param {*} data\r\n     * @private\r\n     */\r\n    _maybeSendTransportAnalyticsEvent(data) {\r\n        if (!data || !data.transport || !data.transport.length) {\r\n            return;\r\n        }\r\n        const transportStats = {\r\n            p2p: data.transport[0].p2p,\r\n            'local_candidate_type': data.transport[0].localCandidateType,\r\n            'remote_candidate_type': data.transport[0].remoteCandidateType,\r\n            'transport_type': data.transport[0].type\r\n        };\r\n\r\n        if (!this._cachedTransportStats || !isEqual(transportStats, this._cachedTransportStats)) {\r\n            this._cachedTransportStats = transportStats;\r\n            Statistics.sendAnalytics(createTransportStatsEvent(transportStats));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Resets the stats related to JVB connection. Must not be called when in\r\n     * P2P mode, because then the {@link AverageStatReport} instances are\r\n     * tracking P2P stats. Note that this should never happen unless something\r\n     * is wrong with the P2P and JVB121 events.\r\n     * @private\r\n     */\r\n    _resetAvgJvbStats() {\r\n        this._resetAvgStats();\r\n        this.jvbStatsMonitor._resetAvgStats();\r\n    }\r\n\r\n    /**\r\n     * Reset cache of all averages and {@link _sampleIdx}.\r\n     * @private\r\n     */\r\n    _resetAvgStats() {\r\n        this._avgAudioBitrateUp.reset();\r\n        this._avgAudioBitrateDown.reset();\r\n\r\n        this._avgVideoBitrateUp.reset();\r\n        this._avgVideoBitrateDown.reset();\r\n\r\n        this._avgBandwidthUp.reset();\r\n        this._avgBandwidthDown.reset();\r\n\r\n        this._avgPacketLossUp.reset();\r\n        this._avgPacketLossDown.reset();\r\n        this._avgPacketLossTotal.reset();\r\n\r\n        this._avgRemoteFPS.reset();\r\n        this._avgRemoteScreenFPS.reset();\r\n        this._avgLocalFPS.reset();\r\n        this._avgLocalScreenFPS.reset();\r\n\r\n        this._avgRemoteCameraPixels.reset();\r\n        this._avgRemoteScreenPixels.reset();\r\n        this._avgLocalCameraPixels.reset();\r\n        this._avgLocalScreenPixels.reset();\r\n\r\n        this._avgCQ.reset();\r\n\r\n        this._sampleIdx = 0;\r\n    }\r\n\r\n    /**\r\n     * Unregisters all event listeners and stops working.\r\n     */\r\n    dispose() {\r\n        this._conference.off(\r\n            ConferenceEvents.P2P_STATUS,\r\n            this._onP2PStatusChanged);\r\n        this._conference.off(\r\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\r\n            this._onLocalStatsUpdated);\r\n        this._conference.off(\r\n            ConferenceEvents.JVB121_STATUS,\r\n            this._onJvb121StatusChanged);\r\n        this.jvbStatsMonitor.dispose();\r\n        this.p2pStatsMonitor.dispose();\r\n    }\r\n}\r\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport SpeakerStats from './SpeakerStats';\r\n\r\n/**\r\n * A collection for tracking speaker stats. Attaches listeners\r\n * to the conference to automatically update on tracked events.\r\n */\r\nexport default class SpeakerStatsCollector {\r\n    /**\r\n     * Initializes a new SpeakerStatsCollector instance.\r\n     *\r\n     * @constructor\r\n     * @param {JitsiConference} conference - The conference to track.\r\n     * @returns {void}\r\n     */\r\n    constructor(conference) {\r\n        this.stats = {\r\n            users: {\r\n\r\n                // userId: SpeakerStats\r\n            },\r\n            dominantSpeakerId: null\r\n        };\r\n\r\n        const userId = conference.myUserId();\r\n\r\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\r\n        this.conference = conference;\r\n\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\r\n            this._onDominantSpeaker.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.USER_JOINED,\r\n            this._onUserJoin.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.USER_LEFT,\r\n            this._onUserLeave.bind(this));\r\n        conference.addEventListener(\r\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\r\n            this._onDisplayNameChange.bind(this));\r\n        if (conference.xmpp) {\r\n            conference.xmpp.addListener(\r\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\r\n                this._updateStats.bind(this));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to dominant speaker change events by changing its speaker stats\r\n     * models to reflect the current dominant speaker.\r\n     *\r\n     * @param {string} dominantSpeakerId - The user id of the new\r\n     * dominant speaker.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onDominantSpeaker(dominantSpeakerId) {\r\n        const oldDominantSpeaker\r\n            = this.stats.users[this.stats.dominantSpeakerId];\r\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\r\n\r\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\r\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\r\n        this.stats.dominantSpeakerId = dominantSpeakerId;\r\n    }\r\n\r\n    /**\r\n     * Reacts to user join events by creating a new SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the new user.\r\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onUserJoin(userId, participant) {\r\n        if (participant.isHidden()) {\r\n            return;\r\n        }\r\n\r\n        if (!this.stats.users[userId]) {\r\n            this.stats.users[userId] = new SpeakerStats(userId, participant.getDisplayName());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to user leave events by updating the associated user's\r\n     * SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the user that left.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onUserLeave(userId) {\r\n        const savedUser = this.stats.users[userId];\r\n\r\n        if (savedUser) {\r\n            savedUser.markAsHasLeft();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Reacts to user name change events by updating the last known name\r\n     * tracked in the associated SpeakerStats model.\r\n     *\r\n     * @param {string} userId - The user id of the user that left.\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _onDisplayNameChange(userId, newName) {\r\n        const savedUser = this.stats.users[userId];\r\n\r\n        if (savedUser) {\r\n            savedUser.setDisplayName(newName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Return a copy of the tracked SpeakerStats models.\r\n     *\r\n     * @returns {Object} The keys are the user ids and the values are the\r\n     * associated user's SpeakerStats model.\r\n     * @private\r\n     */\r\n    getStats() {\r\n        return this.stats.users;\r\n    }\r\n\r\n    /**\r\n     * Updates of the current stats is requested, passing the new values.\r\n     *\r\n     * @param {Object} newStats - The new values used to update current one.\r\n     * @private\r\n     */\r\n    _updateStats(newStats) {\r\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\r\n            let speakerStatsToUpdate;\r\n            const newParticipant = this.conference.getParticipantById(userId);\r\n\r\n            // we want to ignore hidden participants\r\n            if (!newParticipant || !newParticipant.isHidden()) {\r\n                if (this.stats.users[userId]) {\r\n                    speakerStatsToUpdate = this.stats.users[userId];\r\n\r\n                    if (!speakerStatsToUpdate.getDisplayName()) {\r\n                        speakerStatsToUpdate\r\n                            .setDisplayName(newStats[userId].displayName);\r\n                    }\r\n                } else {\r\n                    speakerStatsToUpdate = new SpeakerStats(\r\n                        userId, newStats[userId].displayName);\r\n                    this.stats.users[userId] = speakerStatsToUpdate;\r\n                    speakerStatsToUpdate.markAsHasLeft();\r\n                }\r\n            }\r\n\r\n            speakerStatsToUpdate.totalDominantSpeakerTime\r\n                = newStats[userId].totalDominantSpeakerTime;\r\n        }\r\n    }\r\n}\r\n","const AudioRecorder = require('./audioRecorder');\r\nconst SphinxService = require(\r\n    './transcriptionServices/SphinxTranscriptionService');\r\n\r\nconst BEFORE_STATE = 'before';\r\nconst RECORDING_STATE = 'recording';\r\nconst TRANSCRIBING_STATE = 'transcribing';\r\nconst FINISHED_STATE = 'finished';\r\n\r\n// the amount of characters each line in the transcription will have\r\nconst MAXIMUM_SENTENCE_LENGTH = 80;\r\n\r\n/**\r\n * This is the main object for handing the Transcription. It interacts with\r\n * the audioRecorder to record every person in a conference and sends the\r\n * recorder audio to a transcriptionService. The returned speech-to-text result\r\n * will be merged to create a transcript\r\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\r\n */\r\nfunction Transcriber() {\r\n    // the object which can record all audio in the conference\r\n    this.audioRecorder = new AudioRecorder();\r\n\r\n    // this object can send the recorder audio to a speech-to-text service\r\n    this.transcriptionService = new SphinxService();\r\n\r\n    // holds a counter to keep track if merging can start\r\n    this.counter = null;\r\n\r\n    // holds the date when transcription started which makes it possible\r\n    // to calculate the offset between recordings\r\n    this.startTime = null;\r\n\r\n    // will hold the transcription once it is completed\r\n    this.transcription = null;\r\n\r\n    // this will be a method which will be called once the transcription is done\r\n    // with the transcription as parameter\r\n    this.callback = null;\r\n\r\n    // stores all the retrieved speech-to-text results to merge together\r\n    // this value will store an Array<Word> object\r\n    this.results = [];\r\n\r\n    // Stores the current state of the transcription process\r\n    this.state = BEFORE_STATE;\r\n\r\n    // Used in the updateTranscription method to add a new line when the\r\n    // sentence becomes to long\r\n    this.lineLength = 0;\r\n}\r\n\r\n/**\r\n * Method to start the transcription process. It will tell the audioRecorder\r\n * to start storing all audio streams and record the start time for merging\r\n * purposes\r\n */\r\nTranscriber.prototype.start = function start() {\r\n    if (this.state !== BEFORE_STATE) {\r\n        throw new Error(\r\n            `The transcription can only start when it's in the \"${\r\n                BEFORE_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n    this.state = RECORDING_STATE;\r\n    this.audioRecorder.start();\r\n    this.startTime = new Date();\r\n};\r\n\r\n/**\r\n * Method to stop the transcription process. It will tell the audioRecorder to\r\n * stop, and get all the recorded audio to send it to the transcription service\r\n\r\n * @param callback a callback which will receive the transcription\r\n */\r\nTranscriber.prototype.stop = function stop(callback) {\r\n    if (this.state !== RECORDING_STATE) {\r\n        throw new Error(\r\n            `The transcription can only stop when it's in the \"${\r\n                RECORDING_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n\r\n    // stop the recording\r\n    console.log('stopping recording and sending audio files');\r\n    this.audioRecorder.stop();\r\n\r\n    // and send all recorded audio the the transcription service\r\n    const callBack = blobCallBack.bind(null, this);\r\n\r\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\r\n        this.transcriptionService.send(recordingResult, callBack);\r\n        this.counter++;\r\n    });\r\n\r\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\r\n    this.state = TRANSCRIBING_STATE;\r\n\r\n    // and store the callback for later\r\n    this.callback = callback;\r\n};\r\n\r\n/**\r\n * This method gets the answer from the transcription service, calculates the\r\n * offset and adds is to every Word object. It will also start the merging\r\n * when every send request has been received\r\n *\r\n * note: Make sure to bind this as a Transcription object\r\n * @param {Transcriber} transcriber the transcriber instance\r\n * @param {RecordingResult} answer a RecordingResult object with a defined\r\n * WordArray\r\n */\r\nfunction blobCallBack(transcriber, answer) {\r\n    console.log(\r\n        'retrieved an answer from the transcription service. The answer has an'\r\n            + ` array of length: ${answer.wordArray.length}`);\r\n\r\n    // first add the offset between the start of the transcription and\r\n    // the start of the recording to all start and end times\r\n    if (answer.wordArray.length > 0) {\r\n        let offset = answer.startTime.getUTCMilliseconds()\r\n            - transcriber.startTime.getUTCMilliseconds();\r\n\r\n        // transcriber time will always be earlier\r\n\r\n        if (offset < 0) {\r\n            offset = 0; // presume 0 if it somehow not earlier\r\n        }\r\n\r\n        let array = '[';\r\n\r\n        answer.wordArray.forEach(wordObject => {\r\n            wordObject.begin += offset;\r\n            wordObject.end += offset;\r\n            array += `${wordObject.word},`;\r\n        });\r\n        array += ']';\r\n        console.log(array);\r\n\r\n        // give a name value to the Array object so that the merging can access\r\n        // the name value without having to use the whole recordingResult object\r\n        // in the algorithm\r\n        answer.wordArray.name = answer.name;\r\n    }\r\n\r\n    // then store the array and decrease the counter\r\n    transcriber.results.push(answer.wordArray);\r\n    transcriber.counter--;\r\n    console.log(`current counter: ${transcriber.counter}`);\r\n\r\n    // and check if all results have been received.\r\n    transcriber.maybeMerge();\r\n}\r\n\r\n/**\r\n * this method will check if the counter is zero. If it is, it will call\r\n * the merging method\r\n */\r\nTranscriber.prototype.maybeMerge = function() {\r\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\r\n        // make sure to include the events in the result arrays before\r\n        // merging starts\r\n        this.merge();\r\n    }\r\n};\r\n\r\n/**\r\n * This method will merge all speech-to-text arrays together in one\r\n * readable transcription string\r\n */\r\nTranscriber.prototype.merge = function() {\r\n    console.log(\r\n        `starting merge process!\\n The length of the array: ${\r\n            this.results.length}`);\r\n    this.transcription = '';\r\n\r\n    // the merging algorithm will look over all Word objects who are at pos 0 in\r\n    // every array. It will then select the one closest in time to the\r\n    // previously placed word, while removing the selected word from its array\r\n    // note: words can be skipped the skipped word's begin and end time somehow\r\n    // end up between the closest word start and end time\r\n    const arrays = this.results;\r\n\r\n    // arrays of Word objects\r\n    const potentialWords = []; // array of the first Word objects\r\n    // check if any arrays are already empty and remove them\r\n\r\n    hasPopulatedArrays(arrays);\r\n\r\n    // populate all the potential Words for a first time\r\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\r\n\r\n    // keep adding words to transcription until all arrays are exhausted\r\n    while (hasPopulatedArrays(arrays)) {\r\n        // first select the lowest array;\r\n        let lowestWordArray = arrays[0];\r\n\r\n        arrays.forEach(wordArray => {\r\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\r\n                lowestWordArray = wordArray;\r\n            }\r\n        });\r\n\r\n        // put the word in the transcription\r\n        let wordToAdd = lowestWordArray.shift();\r\n\r\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\r\n\r\n        // keep going until a word in another array has a smaller time\r\n        // or the array is empty\r\n        while (lowestWordArray.length > 0) {\r\n            let foundSmaller = false;\r\n            const wordToCompare = lowestWordArray[0].begin;\r\n\r\n            arrays.forEach(wordArray => {\r\n                if (wordArray[0].begin < wordToCompare) {\r\n                    foundSmaller = true;\r\n                }\r\n            });\r\n\r\n            // add next word if no smaller time has been found\r\n            if (foundSmaller) {\r\n                break;\r\n            }\r\n\r\n            wordToAdd = lowestWordArray.shift();\r\n            this.updateTranscription(wordToAdd, null);\r\n        }\r\n\r\n    }\r\n\r\n    // set the state to finished and do the necessary left-over tasks\r\n    this.state = FINISHED_STATE;\r\n    if (this.callback) {\r\n        this.callback(this.transcription);\r\n    }\r\n};\r\n\r\n/**\r\n * Appends a word object to the transcription. It will make a new line with a\r\n * name if a name is specified\r\n * @param {Word} word the Word object holding the word to append\r\n * @param {String|null} name the name of a new speaker. Null if not applicable\r\n */\r\nTranscriber.prototype.updateTranscription = function(word, name) {\r\n    if (name !== undefined && name !== null) {\r\n        this.transcription += `\\n${name}:`;\r\n        this.lineLength = name.length + 1; // +1 for the semi-colon\r\n    }\r\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\r\n        this.transcription += '\\n    ';\r\n        this.lineLength = 4; // because of the 4 spaces after the new line\r\n    }\r\n    this.transcription += ` ${word.word}`;\r\n    this.lineLength += word.word.length + 1; // +1 for the space\r\n};\r\n\r\n/**\r\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\r\n * All zero-element arrays inside will be removed\r\n * If any non-zero-element arrays are found, the method will return true.\r\n * otherwise it will return false\r\n * @param {Array<Array>} twoDimensionalArray the array to check\r\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\r\n */\r\nfunction hasPopulatedArrays(twoDimensionalArray) {\r\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\r\n        if (twoDimensionalArray[i].length === 0) {\r\n            twoDimensionalArray.splice(i, 1);\r\n        }\r\n    }\r\n\r\n    return twoDimensionalArray.length > 0;\r\n}\r\n\r\n/**\r\n * Push a word to the right location in a sorted array. The array is sorted\r\n * from lowest to highest start time. Every word is stored in an object which\r\n * includes the name of the person saying the word.\r\n *\r\n * @param {Array<Word>} array the sorted array to push to\r\n * @param {Word} word the word to push into the array\r\n */\r\nfunction pushWordToSortedArray(array, word) {\r\n    if (array.length === 0) {\r\n        array.push(word);\r\n    } else {\r\n        if (array[array.length - 1].begin <= word.begin) {\r\n            array.push(word);\r\n\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < array.length; i++) {\r\n            if (word.begin < array[i].begin) {\r\n                array.splice(i, 0, word);\r\n\r\n                return;\r\n            }\r\n        }\r\n        array.push(word); // fail safe\r\n    }\r\n}\r\n\r\n/**\r\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\r\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\r\n * audiostream, it will not be added by the audioRecorder\r\n * @param {JitsiTrack} track the track to give to the audioRecorder\r\n */\r\nTranscriber.prototype.addTrack = function(track) {\r\n    this.audioRecorder.addTrack(track);\r\n};\r\n\r\n/**\r\n * Remove the given track from the auioRecorder\r\n * @param track\r\n */\r\nTranscriber.prototype.removeTrack = function(track) {\r\n    this.audioRecorder.removeTrack(track);\r\n};\r\n\r\n/**\r\n * Will return the created transcription if it's avialable or throw an error\r\n * when it's not done yet\r\n * @returns {String} the transcription as a String\r\n */\r\nTranscriber.prototype.getTranscription = function() {\r\n    if (this.state !== FINISHED_STATE) {\r\n        throw new Error(\r\n            `The transcription can only be retrieved when it's in the \"${\r\n                FINISHED_STATE}\" state. It's currently in the \"${\r\n                this.state}\" state`);\r\n    }\r\n\r\n    return this.transcription;\r\n};\r\n\r\n/**\r\n * Returns the current state of the transcription process\r\n */\r\nTranscriber.prototype.getState = function() {\r\n    return this.state;\r\n};\r\n\r\n/**\r\n * Resets the state to the \"before\" state, such that it's again possible to\r\n * call the start method\r\n */\r\nTranscriber.prototype.reset = function() {\r\n    this.state = BEFORE_STATE;\r\n    this.counter = null;\r\n    this.transcription = null;\r\n    this.startTime = null;\r\n    this.callback = null;\r\n    this.results = [];\r\n    this.lineLength = 0;\r\n};\r\n\r\nmodule.exports = Transcriber;\r\n","import Statistics from '../statistics/statistics';\r\n\r\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\r\n\r\n/**\r\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\r\n * the versions of conferencing system components in given\r\n * <tt>JitsiConference</tt>.\r\n * @param conference <tt>JitsiConference</tt> instance which will be used to\r\n *        listen for focus presence updates.\r\n * @constructor\r\n */\r\nexport default function ComponentsVersions(conference) {\r\n\r\n    this.versions = {};\r\n\r\n    this.conference = conference;\r\n    this.conference.addCommandListener(\r\n        'versions', this.processVersions.bind(this));\r\n}\r\n\r\nComponentsVersions.prototype.processVersions\r\n    = function(versions, mucResource, mucJid) {\r\n        if (!this.conference._isFocus(mucJid)) {\r\n            logger.warn(\r\n                `Received versions not from the focus user: ${versions}`,\r\n                mucJid);\r\n\r\n            return;\r\n        }\r\n\r\n        const log = [];\r\n\r\n        versions.children.forEach(component => {\r\n\r\n            const name = component.attributes.name;\r\n            const version = component.value;\r\n\r\n            if (this.versions[name] !== version) {\r\n                this.versions[name] = version;\r\n                logger.info(`Got ${name} version: ${version}`);\r\n\r\n                log.push({\r\n                    id: 'component_version',\r\n                    component: name,\r\n                    version\r\n                });\r\n            }\r\n        });\r\n\r\n        // logs versions to stats\r\n        if (log.length > 0) {\r\n            Statistics.sendLog(JSON.stringify(log));\r\n        }\r\n    };\r\n\r\n/**\r\n * Obtains the version of conferencing system component.\r\n * @param componentName the name of the component for which we want to obtain\r\n *        the version.\r\n * @returns {String} which describes the version of the component identified by\r\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\r\n */\r\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\r\n    return this.versions[componentName];\r\n};\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nconst logger = getLogger(__filename);\r\n\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\n\r\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\r\nimport * as Constants from './VideoSIPGWConstants';\r\n\r\n/**\r\n * Main video SIP GW handler. Stores references of all created sessions.\r\n */\r\nexport default class VideoSIPGW {\r\n\r\n    /**\r\n     * Creates new handler.\r\n     *\r\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\r\n     */\r\n    constructor(chatRoom) {\r\n        this.chatRoom = chatRoom;\r\n        this.eventEmitter = chatRoom.eventEmitter;\r\n        logger.debug('creating VideoSIPGW');\r\n        this.sessions = {};\r\n\r\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\r\n\r\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\r\n        // more than one VideoSIPGW can be created per JitsiConference,\r\n        // so we don't bother to cleanup\r\n        chatRoom.addPresenceListener('jibri-sip-call-state',\r\n            this.handleJibriSIPState.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Handles presence nodes with name: jibri-sip-call-state.\r\n     *\r\n     * @param {Object} node the presence node Object to handle.\r\n     * Object representing part of the presence received over xmpp.\r\n     */\r\n    handleJibriSIPState(node) {\r\n        const attributes = node.attributes;\r\n\r\n        if (!attributes) {\r\n            return;\r\n        }\r\n\r\n        logger.debug('Handle video sip gw state : ', attributes);\r\n\r\n        const newState = attributes.state;\r\n\r\n        if (newState === this.state) {\r\n            return;\r\n        }\r\n\r\n        switch (newState) {\r\n        case Constants.STATE_ON:\r\n        case Constants.STATE_OFF:\r\n        case Constants.STATE_PENDING:\r\n        case Constants.STATE_RETRYING:\r\n        case Constants.STATE_FAILED: {\r\n            const address = attributes.sipaddress;\r\n\r\n            if (!address) {\r\n                return;\r\n            }\r\n\r\n            // find the corresponding session and set its state\r\n            const session = this.sessions[address];\r\n\r\n            if (session) {\r\n                session.setState(newState, attributes.failure_reason);\r\n            } else {\r\n                logger.warn('Video SIP GW session not found:', address);\r\n            }\r\n        }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates new session and stores its reference if it does not exist or\r\n     * returns an error otherwise.\r\n     *\r\n     * @param {string} sipAddress - The sip address to use.\r\n     * @param {string} displayName - The display name to use.\r\n     * @returns {JitsiVideoSIPGWSession|Error}\r\n     */\r\n    createVideoSIPGWSession(sipAddress, displayName) {\r\n        if (this.sessions[sipAddress]) {\r\n            logger.warn('There was already a Video SIP GW session for address',\r\n                sipAddress);\r\n\r\n            return new Error(Constants.ERROR_SESSION_EXISTS);\r\n        }\r\n\r\n        const session = new JitsiVideoSIPGWSession(\r\n            sipAddress, displayName, this.chatRoom);\r\n\r\n        session.addStateListener(this.sessionStateChangeListener);\r\n\r\n        this.sessions[sipAddress] = session;\r\n\r\n        return session;\r\n    }\r\n\r\n    /**\r\n     * Listener for session state changed. When a session goes to off or failed\r\n     * we delete its reference.\r\n     *\r\n     * @param {options} event - { address, oldState, newState, displayName }\r\n     */\r\n    sessionStateChanged(event) {\r\n        const address = event.address;\r\n\r\n        if (event.newState === Constants.STATE_OFF\r\n            || event.newState === Constants.STATE_FAILED) {\r\n            const session = this.sessions[address];\r\n\r\n            if (!session) {\r\n                logger.error('Missing Video SIP GW session with address:',\r\n                    address);\r\n\r\n                return;\r\n            }\r\n\r\n            session.removeStateListener(this.sessionStateChangeListener);\r\n            delete this.sessions[address];\r\n        }\r\n\r\n        this.eventEmitter.emit(\r\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\r\n            event);\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport Listenable from '../util/Listenable';\r\n\r\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The event name for current sip video session state changed.\r\n * @type {string} event name for sip video session state changed.\r\n */\r\nconst STATE_CHANGED = 'STATE_CHANGED';\r\n\r\n/**\r\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\r\n * When session is in OFF or FAILED stated it cannot be used anymore.\r\n */\r\nexport default class JitsiVideoSIPGWSession extends Listenable {\r\n\r\n    /**\r\n     * Creates new session with the desired sip address and display name.\r\n     *\r\n     * @param {string} sipAddress - The sip address to use when\r\n     * starting the session.\r\n     * @param {string} displayName - The display name to use for\r\n     * that participant.\r\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\r\n     */\r\n    constructor(sipAddress, displayName, chatRoom) {\r\n        super();\r\n\r\n        this.sipAddress = sipAddress;\r\n        this.displayName = displayName;\r\n        this.chatRoom = chatRoom;\r\n\r\n        /*\r\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\r\n         * the session enters this state when it was in STATE_ON and was stopped\r\n         * and such session cannot be used anymore.\r\n         *\r\n         * @type {VideoSIPGWConstants|undefined}\r\n         */\r\n        this.state = undefined;\r\n    }\r\n\r\n    /**\r\n     * Stops the current session.\r\n     */\r\n    stop() {\r\n        if (this.state === VideoSIPGWConstants.STATE_OFF\r\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\r\n            logger.warn('Video SIP GW session already stopped or failed!');\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendJibriIQ('stop');\r\n    }\r\n\r\n    /**\r\n     * Starts a new session. Sends an iq to the focus.\r\n     */\r\n    start() {\r\n        // if state is off, this session was active for some reason\r\n        // and we should create new one, rather than reusing it\r\n        if (this.state === VideoSIPGWConstants.STATE_ON\r\n            || this.state === VideoSIPGWConstants.STATE_OFF\r\n            || this.state === VideoSIPGWConstants.STATE_PENDING\r\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\r\n            logger.warn('Video SIP GW session already started!');\r\n\r\n            return;\r\n        }\r\n\r\n        this._sendJibriIQ('start');\r\n    }\r\n\r\n    /**\r\n     * Changes the state of this session.\r\n     *\r\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\r\n     * @param {string} [optional] failureReason - The reason why a failure state\r\n     * was entered.\r\n     * @returns {void}\r\n     */\r\n    setState(newState, failureReason) {\r\n        if (newState === this.state) {\r\n            return;\r\n        }\r\n\r\n        const oldState = this.state;\r\n\r\n        this.state = newState;\r\n        this.eventEmitter.emit(STATE_CHANGED,\r\n            {\r\n                address: this.sipAddress,\r\n                failureReason,\r\n                oldState,\r\n                newState: this.state,\r\n                displayName: this.displayName\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Subscribes the passed listener to the event for state change of this\r\n     * session.\r\n     *\r\n     * @param {Function} listener - The function that will receive the event.\r\n     */\r\n    addStateListener(listener) {\r\n        this.addListener(STATE_CHANGED, listener);\r\n    }\r\n\r\n    /**\r\n     * Unsubscribes the passed handler.\r\n     *\r\n     * @param {Function} listener - The function to be removed.\r\n     */\r\n    removeStateListener(listener) {\r\n        this.removeListener(STATE_CHANGED, listener);\r\n    }\r\n\r\n    /**\r\n     * Sends a jibri command using an iq.\r\n     *\r\n     * @private\r\n     * @param {string} action - The action to send ('start' or 'stop').\r\n     */\r\n    _sendJibriIQ(action) {\r\n        const attributes = {\r\n            'xmlns': 'http://jitsi.org/protocol/jibri',\r\n            'action': action,\r\n            sipaddress: this.sipAddress\r\n        };\r\n\r\n        attributes.displayname = this.displayName;\r\n\r\n        const iq = $iq({\r\n            to: this.chatRoom.focusMucJid,\r\n            type: 'set' })\r\n            .c('jibri', attributes)\r\n            .up();\r\n\r\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\r\n        this.chatRoom.connection.sendIQ(\r\n            iq,\r\n            () => {}, // eslint-disable-line no-empty-function\r\n            error => {\r\n                logger.error(\r\n                    `Failed to ${action} video SIP GW session, error: `, error);\r\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\r\n            });\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\nimport { Strophe } from 'strophe.js';\r\n\r\nimport { MediaType } from '../../service/RTC/MediaType';\r\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\r\nimport SignalingLayer, { getMediaTypeFromSourceName } from '../../service/RTC/SignalingLayer';\r\nimport { VideoType } from '../../service/RTC/VideoType';\r\nimport { XMPPEvents } from '../../service/xmpp/XMPPEvents';\r\nimport FeatureFlags from '../flags/FeatureFlags';\r\n\r\nimport { filterNodeFromPresenceJSON } from './ChatRoom';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\nexport const SOURCE_INFO_PRESENCE_ELEMENT = 'SourceInfo';\r\n\r\n/**\r\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\r\n * the data from the MUC presence.\r\n */\r\nexport default class SignalingLayerImpl extends SignalingLayer {\r\n    /**\r\n     * Creates new instance.\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        /**\r\n         * A map that stores SSRCs of remote streams. And is used only locally\r\n         * We store the mapping when jingle is received, and later is used\r\n         * onaddstream webrtc event where we have only the ssrc\r\n         * FIXME: This map got filled and never cleaned and can grow during long\r\n         * conference\r\n         * @type {Map<number, string>} maps SSRC number to jid\r\n         */\r\n        this.ssrcOwners = new Map();\r\n\r\n        /**\r\n         *\r\n         * @type {ChatRoom|null}\r\n         */\r\n        this.chatRoom = null;\r\n\r\n        /**\r\n         * @type {Map<SourceName, SourceInfo>}\r\n         * @private\r\n         */\r\n        this._localSourceState = { };\r\n\r\n        /**\r\n         * @type {Map<EndpointId, Map<SourceName, SourceInfo>>}\r\n         * @private\r\n         */\r\n        this._remoteSourceState = { };\r\n\r\n        /**\r\n         * A map that stores the source name of a track identified by it's ssrc.\r\n         * We store the mapping when jingle is received, and later is used\r\n         * onaddstream webrtc event where we have only the ssrc\r\n         * FIXME: This map got filled and never cleaned and can grow during long\r\n         * conference\r\n         * @type {Map<number, string>} maps SSRC number to source name\r\n         */\r\n        this._sourceNames = new Map();\r\n    }\r\n\r\n    /**\r\n     * Adds <SourceInfo> element to the local presence.\r\n     *\r\n     * @returns {void}\r\n     * @private\r\n     */\r\n    _addLocalSourceInfoToPresence() {\r\n        if (this.chatRoom) {\r\n            return this.chatRoom.addOrReplaceInPresence(\r\n                SOURCE_INFO_PRESENCE_ELEMENT,\r\n                { value: JSON.stringify(this._localSourceState) });\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Check is given endpoint has advertised <SourceInfo/> in it's presence which means that the source name signaling\r\n     * is used by this endpoint.\r\n     *\r\n     * @param {EndpointId} endpointId\r\n     * @returns {boolean}\r\n     */\r\n    _doesEndpointSendNewSourceInfo(endpointId) {\r\n        const presence = this.chatRoom?.getLastPresence(endpointId);\r\n\r\n        return Boolean(presence && presence.find(node => node.tagName === SOURCE_INFO_PRESENCE_ELEMENT));\r\n    }\r\n\r\n    /**\r\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\r\n     * @param {ChatRoom} room\r\n     */\r\n    setChatRoom(room) {\r\n        const oldChatRoom = this.chatRoom;\r\n\r\n        this.chatRoom = room;\r\n        if (oldChatRoom) {\r\n            oldChatRoom.removePresenceListener(\r\n                'audiomuted', this._audioMuteHandler);\r\n            oldChatRoom.removePresenceListener(\r\n                'videomuted', this._videoMuteHandler);\r\n            oldChatRoom.removePresenceListener(\r\n                'videoType', this._videoTypeHandler);\r\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                this._sourceInfoHandler\r\n                    && oldChatRoom.removePresenceListener(\r\n                        SOURCE_INFO_PRESENCE_ELEMENT, this._sourceInfoHandler);\r\n                this._memberLeftHandler\r\n                    && oldChatRoom.removeEventListener(\r\n                        XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\r\n            }\r\n        }\r\n        if (room) {\r\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                this._bindChatRoomEventHandlers(room);\r\n                this._addLocalSourceInfoToPresence();\r\n            } else {\r\n                // TODO the logic below has been duplicated in _bindChatRoomEventHandlers, clean this up once\r\n                //  the new impl has been tested well enough\r\n                // SignalingEvents\r\n                this._audioMuteHandler = (node, from) => {\r\n                    this.eventEmitter.emit(\r\n                        SignalingEvents.PEER_MUTED_CHANGED,\r\n                        from, MediaType.AUDIO, node.value === 'true');\r\n                };\r\n                room.addPresenceListener('audiomuted', this._audioMuteHandler);\r\n\r\n                this._videoMuteHandler = (node, from) => {\r\n                    this.eventEmitter.emit(\r\n                        SignalingEvents.PEER_MUTED_CHANGED,\r\n                        from, MediaType.VIDEO, node.value === 'true');\r\n                };\r\n                room.addPresenceListener('videomuted', this._videoMuteHandler);\r\n\r\n                this._videoTypeHandler = (node, from) => {\r\n                    this.eventEmitter.emit(\r\n                        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\r\n                        from, node.value);\r\n                };\r\n                room.addPresenceListener('videoType', this._videoTypeHandler);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Binds event listeners to the chat room instance.\r\n     * @param {ChatRoom} room\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _bindChatRoomEventHandlers(room) {\r\n        const emitAudioMutedEvent = (endpointId, muted) => {\r\n            this.eventEmitter.emit(\r\n                SignalingEvents.PEER_MUTED_CHANGED,\r\n                endpointId,\r\n                MediaType.AUDIO,\r\n                muted);\r\n        };\r\n        const emitVideoMutedEvent = (endpointId, muted) => {\r\n            this.eventEmitter.emit(\r\n                SignalingEvents.PEER_MUTED_CHANGED,\r\n                endpointId,\r\n                MediaType.VIDEO,\r\n                muted);\r\n        };\r\n\r\n        // SignalingEvents\r\n        this._audioMuteHandler = (node, from) => {\r\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\r\n                emitAudioMutedEvent(from, node.value === 'true');\r\n            }\r\n        };\r\n        room.addPresenceListener('audiomuted', this._audioMuteHandler);\r\n\r\n        this._videoMuteHandler = (node, from) => {\r\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\r\n                emitVideoMutedEvent(from, node.value === 'true');\r\n            }\r\n        };\r\n        room.addPresenceListener('videomuted', this._videoMuteHandler);\r\n\r\n        const emitVideoTypeEvent = (endpointId, videoType) => {\r\n            this.eventEmitter.emit(\r\n                SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\r\n                endpointId, videoType);\r\n        };\r\n\r\n        this._videoTypeHandler = (node, from) => {\r\n            if (!this._doesEndpointSendNewSourceInfo(from)) {\r\n                emitVideoTypeEvent(from, node.value);\r\n            }\r\n        };\r\n\r\n        if (!FeatureFlags.isMultiStreamSupportEnabled()) {\r\n            room.addPresenceListener('videoType', this._videoTypeHandler);\r\n        }\r\n\r\n        this._sourceInfoHandler = (node, mucNick) => {\r\n            const endpointId = mucNick;\r\n            const { value } = node;\r\n            const sourceInfoJSON = JSON.parse(value);\r\n            const emitEventsFromHere = this._doesEndpointSendNewSourceInfo(endpointId);\r\n            const endpointSourceState\r\n                = this._remoteSourceState[endpointId] || (this._remoteSourceState[endpointId] = {});\r\n\r\n            for (const sourceName of Object.keys(sourceInfoJSON)) {\r\n                const mediaType = getMediaTypeFromSourceName(sourceName);\r\n                const newMutedState = Boolean(sourceInfoJSON[sourceName].muted);\r\n                const oldSourceState = endpointSourceState[sourceName]\r\n                    || (endpointSourceState[sourceName] = { sourceName });\r\n\r\n                if (oldSourceState.muted !== newMutedState) {\r\n                    oldSourceState.muted = newMutedState;\r\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\r\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_MUTED_CHANGED, sourceName, newMutedState);\r\n                    }\r\n                }\r\n\r\n                // Assume a default videoType of 'camera' for video sources.\r\n                const newVideoType = mediaType === MediaType.VIDEO\r\n                    ? (sourceInfoJSON[sourceName].videoType ? sourceInfoJSON[sourceName].videoType : VideoType.CAMERA)\r\n                    : undefined;\r\n\r\n                if (oldSourceState.videoType !== newVideoType) {\r\n                    oldSourceState.videoType = newVideoType;\r\n\r\n                    // Since having a mix of eps that do/don't support multi-stream in the same call is supported, emit\r\n                    // SOURCE_VIDEO_TYPE_CHANGED event when the remote source changes videoType.\r\n                    if (emitEventsFromHere && !this._localSourceState[sourceName]) {\r\n                        this.eventEmitter.emit(SignalingEvents.SOURCE_VIDEO_TYPE_CHANGED, sourceName, newVideoType);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Cleanup removed source names\r\n            const newSourceNames = Object.keys(sourceInfoJSON);\r\n\r\n            for (const sourceName of Object.keys(endpointSourceState)) {\r\n                if (newSourceNames.indexOf(sourceName) === -1) {\r\n                    delete endpointSourceState[sourceName];\r\n                }\r\n            }\r\n        };\r\n        room.addPresenceListener('SourceInfo', this._sourceInfoHandler);\r\n\r\n        // Cleanup when participant leaves\r\n        this._memberLeftHandler = jid => {\r\n            const endpointId = Strophe.getResourceFromJid(jid);\r\n\r\n            delete this._remoteSourceState[endpointId];\r\n\r\n            if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n                for (const [ key, value ] of this.ssrcOwners.entries()) {\r\n                    if (value === endpointId) {\r\n                        delete this._sourceNames[key];\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        room.addEventListener(XMPPEvents.MUC_MEMBER_LEFT, this._memberLeftHandler);\r\n    }\r\n\r\n    /**\r\n     * Finds the first source of given media type for the given endpoint.\r\n     * @param endpointId\r\n     * @param mediaType\r\n     * @returns {SourceInfo|null}\r\n     * @private\r\n     */\r\n    _findEndpointSourceInfoForMediaType(endpointId, mediaType) {\r\n        const remoteSourceState = this._remoteSourceState[endpointId];\r\n\r\n        if (!remoteSourceState) {\r\n            return null;\r\n        }\r\n\r\n        for (const sourceInfo of Object.values(remoteSourceState)) {\r\n            const _mediaType = getMediaTypeFromSourceName(sourceInfo.sourceName);\r\n\r\n            if (_mediaType === mediaType) {\r\n                return sourceInfo;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getPeerMediaInfo(owner, mediaType, sourceName) {\r\n        const legacyGetPeerMediaInfo = () => {\r\n            if (this.chatRoom) {\r\n                return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\r\n            }\r\n            logger.error('Requested peer media info, before room was set');\r\n        };\r\n        const lastPresence = this.chatRoom.getLastPresence(owner);\r\n\r\n        if (!lastPresence) {\r\n            throw new Error(`getPeerMediaInfo - no presence stored for: ${owner}`);\r\n        }\r\n\r\n        if (FeatureFlags.isSourceNameSignalingEnabled()) {\r\n            if (!this._doesEndpointSendNewSourceInfo(owner)) {\r\n                return legacyGetPeerMediaInfo();\r\n            }\r\n\r\n            if (sourceName) {\r\n                return this.getPeerSourceInfo(owner, sourceName);\r\n            }\r\n\r\n            /**\r\n             * @type {PeerMediaInfo}\r\n             */\r\n            const mediaInfo = {};\r\n            const endpointMediaSource = this._findEndpointSourceInfoForMediaType(owner, mediaType);\r\n\r\n            // The defaults are provided only, because getPeerMediaInfo is a legacy method. This will be eventually\r\n            // changed into a getSourceInfo method which returns undefined if there's no source. Also there will be\r\n            // no mediaType argument there.\r\n            if (mediaType === MediaType.AUDIO) {\r\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\r\n            } else if (mediaType === MediaType.VIDEO) {\r\n                mediaInfo.muted = endpointMediaSource ? endpointMediaSource.muted : true;\r\n                mediaInfo.videoType = endpointMediaSource ? endpointMediaSource.videoType : undefined;\r\n\r\n                const codecTypeNode = filterNodeFromPresenceJSON(lastPresence, 'jitsi_participant_codecType');\r\n\r\n                if (codecTypeNode.length > 0) {\r\n                    mediaInfo.codecType = codecTypeNode[0].value;\r\n                }\r\n            } else {\r\n                throw new Error(`Unsupported media type: ${mediaType}`);\r\n            }\r\n\r\n            return mediaInfo;\r\n        }\r\n\r\n        return legacyGetPeerMediaInfo();\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getPeerSourceInfo(owner, sourceName) {\r\n        const mediaInfo = {\r\n            muted: true, // muted by default\r\n            videoType: VideoType.CAMERA // 'camera' by default\r\n        };\r\n\r\n        return this._remoteSourceState[owner]\r\n            ? (this._remoteSourceState[owner][sourceName] ? this._remoteSourceState[owner][sourceName] : mediaInfo)\r\n            : undefined;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getSSRCOwner(ssrc) {\r\n        return this.ssrcOwners.get(ssrc);\r\n    }\r\n\r\n    /**\r\n     * Set an SSRC owner.\r\n     * @param {number} ssrc an SSRC to be owned\r\n     * @param {string} endpointId owner's ID (MUC nickname)\r\n     * @throws TypeError if <tt>ssrc</tt> is not a number\r\n     */\r\n    setSSRCOwner(ssrc, endpointId) {\r\n        if (typeof ssrc !== 'number') {\r\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\r\n        }\r\n\r\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\r\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\r\n        const existingOwner = this.ssrcOwners.get(ssrc);\r\n\r\n        if (existingOwner && existingOwner !== endpointId) {\r\n            logger.error(`SSRC owner re-assigned from ${existingOwner} to ${endpointId}`);\r\n        }\r\n        this.ssrcOwners.set(ssrc, endpointId);\r\n    }\r\n\r\n    /**\r\n     * Adjusts muted status of given track.\r\n     *\r\n     * @param {SourceName} sourceName - the name of the track's source.\r\n     * @param {boolean} muted - the new muted status.\r\n     * @returns {boolean}\r\n     */\r\n    setTrackMuteStatus(sourceName, muted) {\r\n        if (!this._localSourceState[sourceName]) {\r\n            this._localSourceState[sourceName] = {};\r\n        }\r\n\r\n        this._localSourceState[sourceName].muted = muted;\r\n\r\n        if (this.chatRoom) {\r\n            // FIXME This only adjusts the presence, but doesn't actually send it. Here we temporarily rely on\r\n            // the legacy signaling part to send the presence. Remember to add \"send presence\" here when the legacy\r\n            // signaling is removed.\r\n            return this._addLocalSourceInfoToPresence();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Sets track's video type.\r\n     * @param {SourceName} sourceName - the track's source name.\r\n     * @param {VideoType} videoType - the new video type.\r\n     * @returns {boolean}\r\n     */\r\n    setTrackVideoType(sourceName, videoType) {\r\n        if (!this._localSourceState[sourceName]) {\r\n            this._localSourceState[sourceName] = {};\r\n        }\r\n\r\n        if (this._localSourceState[sourceName].videoType !== videoType) {\r\n            // Include only if not a camera (default)\r\n            this._localSourceState[sourceName].videoType = videoType === VideoType.CAMERA ? undefined : videoType;\r\n\r\n            // NOTE this doesn't send the actual presence, because is called from the same place where the legacy video\r\n            // type is emitted which does the actual sending. A send presence statement needs to be added when\r\n            // the legacy part is removed.\r\n            return this._addLocalSourceInfoToPresence();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    getTrackSourceName(ssrc) {\r\n        return this._sourceNames.get(ssrc);\r\n    }\r\n\r\n    /**\r\n     * Saves the source name for a track identified by it's ssrc.\r\n     * @param {number} ssrc the ssrc of the target track.\r\n     * @param {SourceName} sourceName the track's source name to save.\r\n     * @throws TypeError if <tt>ssrc</tt> is not a number\r\n     */\r\n    setTrackSourceName(ssrc, sourceName) {\r\n        if (typeof ssrc !== 'number') {\r\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\r\n        }\r\n\r\n        // Now signaling layer instance is shared between different JingleSessionPC instances, so although very unlikely\r\n        // an SSRC conflict could potentially occur. Log a message to make debugging easier.\r\n        const existingName = this._sourceNames.get(ssrc);\r\n\r\n        if (existingName && existingName !== sourceName) {\r\n            logger.error(`SSRC(${ssrc}) sourceName re-assigned from ${existingName} to ${sourceName}`);\r\n        }\r\n\r\n        this._sourceNames.set(ssrc, sourceName);\r\n    }\r\n\r\n}","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\r\nimport RTC from '../RTC/RTC';\r\nimport Statistics from '../statistics/statistics';\r\n\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n// If after 3000 ms the detector did not find any active devices consider that there aren't any usable ones available\r\n// i.e. audioLevel > 0.008\r\nconst DETECTION_TIMEOUT = 3000;\r\n\r\n\r\n/**\r\n * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\r\n *\r\n * @returns Promise<Object> - Object containing information about the found device.\r\n */\r\nexport default function getActiveAudioDevice() {\r\n\r\n    return new Promise(resolve => {\r\n        RTC.enumerateDevices(devices => {\r\n            const audioDevices = devices.filter(device => device.kind === 'audioinput');\r\n            const devicePromiseArray = [];\r\n\r\n\r\n            for (const micDevice of audioDevices) {\r\n                const devicePromise = RTC.obtainAudioAndVideoPermissions({ devices: [ 'audio' ],\r\n                    micDeviceId: micDevice.deviceId }).then(tracks => {\r\n\r\n                    // We expect a single device to be available when obtained from obtainAudioAndVideoPermissions\r\n                    // that's  why only take p.value[0].\r\n                    const track = tracks[0];\r\n                    const originalStream = track.getOriginalStream();\r\n\r\n                    Statistics.startLocalStats(originalStream, track.setAudioLevel.bind(track));\r\n                    track.addEventListener(JitsiTrackEvents.LOCAL_TRACK_STOPPED, () => {\r\n                        Statistics.stopLocalStats(originalStream);\r\n                    });\r\n\r\n                    return track;\r\n                });\r\n\r\n                devicePromiseArray.push(devicePromise);\r\n            }\r\n\r\n            Promise.allSettled(devicePromiseArray).then(outcomeArray => {\r\n                const successfulPromises = outcomeArray.filter(p => p.status === 'fulfilled');\r\n                const rejectedPromises = outcomeArray.filter(p => p.status === 'rejected');\r\n\r\n\r\n                const availableDevices = successfulPromises.map(p => p.value);\r\n                const rejectReasons = rejectedPromises.map(p => p.value);\r\n\r\n                for (const reason of rejectReasons) {\r\n                    logger.error('Failed to acquire audio device with error: ', reason);\r\n                }\r\n\r\n                // Setup event handlers for monitored devices.\r\n                for (const device of availableDevices) {\r\n                    device.on(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED, audioLevel => {\r\n                        // This is a very naive approach but works, a more accurate one would be to use rnnoise in\r\n                        // order to limit  the number of false positives. The 0.008 constant is due to how\r\n                        // LocalStatsCollector from lib-jitsi-meet publishes audio-levels, in this case 0.008 denotes //\r\n                        // no input.\r\n                        if (audioLevel > 0.008) {\r\n                            stopActiveDevices(availableDevices);\r\n                            resolve({ deviceId: device.deviceId,\r\n                                deviceLabel: device.track.label });\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // Cancel the detection in case no devices was found with audioLevel > 0 in the set timeout.\r\n                setTimeout(() => {\r\n                    stopActiveDevices(availableDevices);\r\n                    resolve({\r\n                        deviceId: '',\r\n                        deviceLabel: '' }\r\n                    );\r\n                }, DETECTION_TIMEOUT);\r\n\r\n            });\r\n\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Stop the streams of the provided JitsiLocalTracks.\r\n *\r\n * @param {Array<JitsiLocalTrack>} deviceList - Array of JitsiLocalTracks to stop.\r\n * @returns {void}\r\n */\r\nfunction stopActiveDevices(deviceList) {\r\n    for (const device of deviceList) {\r\n        device.stopStream();\r\n    }\r\n}\r\n","/* globals $ */\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\nimport { $iq } from 'strophe.js';\r\n\r\nimport * as MediaType from '../../service/RTC/MediaType';\r\nimport VideoType from '../../service/RTC/VideoType';\r\nimport RTC from '../RTC/RTC';\r\n\r\nimport ProxyConnectionPC from './ProxyConnectionPC';\r\nimport { ACTIONS } from './constants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\r\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\r\n * and assumes IQs to be used for communication.\r\n */\r\nexport default class ProxyConnectionService {\r\n    /**\r\n     * Initializes a new {@code ProxyConnectionService} instance.\r\n     *\r\n     * @param {Object} options - Values to initialize the instance with.\r\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\r\n     * video should be returned as a desktop stream. Defaults to false.\r\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\r\n     * for the peer connection.\r\n     * @param {JitsiConnection} [options.jitsiConnection] - The\r\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\r\n     * the P2P connection.\r\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\r\n     * remote video stream has been received and converted to a\r\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\r\n     * @param {Function} options.onSendMessage - Callback to invoke when a\r\n     * message has to be sent (signaled) out. The arguments passed in are the\r\n     * jid to send the message to and the message\r\n     */\r\n    constructor(options = {}) {\r\n        const {\r\n            jitsiConnection,\r\n            ...otherOptions\r\n        } = options;\r\n\r\n        /**\r\n         * Holds a reference to the collection of all callbacks.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        this._options = {\r\n            iceConfig: jitsiConnection\r\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\r\n            ...otherOptions\r\n        };\r\n\r\n        /**\r\n         * The active instance of {@code ProxyConnectionService}.\r\n         *\r\n         * @type {ProxyConnectionPC|null}\r\n         */\r\n        this._peerConnection = null;\r\n\r\n        // Bind event handlers so they are only bound once for every instance.\r\n        this._onFatalError = this._onFatalError.bind(this);\r\n        this._onSendMessage = this._onSendMessage.bind(this);\r\n        this._onRemoteStream = this._onRemoteStream.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Parses a message object regarding a proxy connection to create a new\r\n     * proxy connection or update and existing connection.\r\n     *\r\n     * @param {Object} message - A message object regarding establishing or\r\n     * updating a proxy connection.\r\n     * @param {Object} message.data - An object containing additional message\r\n     * details.\r\n     * @param {string} message.data.iq - The stringified iq which explains how\r\n     * and what to update regarding the proxy connection.\r\n     * @param {string} message.from - The message sender's full jid. Used for\r\n     * sending replies.\r\n     * @returns {void}\r\n     */\r\n    processMessage(message) {\r\n        const peerJid = message.from;\r\n\r\n        if (!peerJid) {\r\n            return;\r\n        }\r\n\r\n        // If a proxy connection has already been established and messages come\r\n        // from another peer jid then those messages should be replied to with\r\n        // a rejection.\r\n        if (this._peerConnection\r\n            && this._peerConnection.getPeerJid() !== peerJid) {\r\n            this._onFatalError(\r\n                peerJid,\r\n                ACTIONS.CONNECTION_ERROR,\r\n                'rejected'\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        const iq = this._convertStringToXML(message.data.iq);\r\n        const $jingle = iq && iq.find('jingle');\r\n        const action = $jingle && $jingle.attr('action');\r\n\r\n        if (action === ACTIONS.INITIATE) {\r\n            this._peerConnection = this._createPeerConnection(peerJid, {\r\n                isInitiator: false,\r\n                receiveVideo: true\r\n            });\r\n        }\r\n\r\n        // Truthy check for peer connection added to protect against possibly\r\n        // receiving actions before an ACTIONS.INITIATE.\r\n        if (this._peerConnection) {\r\n            this._peerConnection.processMessage($jingle);\r\n        }\r\n\r\n        // Take additional steps to ensure the peer connection is cleaned up\r\n        // if it is to be closed.\r\n        if (action === ACTIONS.CONNECTION_ERROR\r\n            || action === ACTIONS.UNAVAILABLE\r\n            || action === ACTIONS.TERMINATE) {\r\n            this._selfCloseConnection();\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    /**\r\n     * Instantiates and initiates a proxy peer connection.\r\n     *\r\n     * @param {string} peerJid - The jid of the remote client that should\r\n     * receive messages.\r\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\r\n     * send through to the peer.\r\n     * @returns {void}\r\n     */\r\n    start(peerJid, localTracks = []) {\r\n        this._peerConnection = this._createPeerConnection(peerJid, {\r\n            isInitiator: true,\r\n            receiveVideo: false\r\n        });\r\n\r\n        this._peerConnection.start(localTracks);\r\n    }\r\n\r\n    /**\r\n     * Terminates any active proxy peer connection.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        if (this._peerConnection) {\r\n            this._peerConnection.stop();\r\n        }\r\n\r\n        this._peerConnection = null;\r\n    }\r\n\r\n    /**\r\n     * Transforms a stringified xML into a XML wrapped in jQuery.\r\n     *\r\n     * @param {string} xml - The XML in string form.\r\n     * @private\r\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\r\n     * if an error is encountered during transformation.\r\n     */\r\n    _convertStringToXML(xml) {\r\n        try {\r\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\r\n\r\n            return $(xmlDom);\r\n        } catch (e) {\r\n            logger.error('Attempted to convert incorrectly formatted xml');\r\n\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\r\n     *\r\n     * @param {string} peerJid - The jid of the remote peer with which the\r\n     * {@code ProxyConnectionPC} will be established with.\r\n     * @param {Object} options - Additional defaults to instantiate the\r\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\r\n     * for more details.\r\n     * @private\r\n     * @returns {ProxyConnectionPC}\r\n     */\r\n    _createPeerConnection(peerJid, options = {}) {\r\n        if (!peerJid) {\r\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\r\n        }\r\n\r\n        const pcOptions = {\r\n            iceConfig: this._options.iceConfig,\r\n            onError: this._onFatalError,\r\n            onRemoteStream: this._onRemoteStream,\r\n            onSendMessage: this._onSendMessage,\r\n            peerJid,\r\n            ...options\r\n        };\r\n\r\n        return new ProxyConnectionPC(pcOptions);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when an error occurs that should cause\r\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\r\n     * connected. Sends an error message/reply back to the peer.\r\n     *\r\n     * @param {string} peerJid - The peer jid with which the connection was\r\n     * attempted or started, and to which an iq with error details should be\r\n     * sent.\r\n     * @param {string} errorType - The constant indicating the type of the error\r\n     * that occured.\r\n     * @param {string} details - Optional additional data about the error.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onFatalError(peerJid, errorType, details = '') {\r\n        logger.error(\r\n            'Received a proxy connection error', peerJid, errorType, details);\r\n\r\n        const iq = $iq({\r\n            to: peerJid,\r\n            type: 'set'\r\n        })\r\n            .c('jingle', {\r\n                xmlns: 'urn:xmpp:jingle:1',\r\n                action: errorType\r\n            })\r\n            .c('details')\r\n            .t(details)\r\n            .up();\r\n\r\n        this._onSendMessage(peerJid, iq);\r\n\r\n        if (this._peerConnection\r\n            && this._peerConnection.getPeerJid() === peerJid) {\r\n            this._selfCloseConnection();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\r\n     * has offered a media stream. The stream is converted into a\r\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\r\n     * callback is defined.\r\n     *\r\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\r\n     * for the peer's media stream.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onRemoteStream(jitsiRemoteTrack) {\r\n        if (!this._options.onRemoteStream) {\r\n            logger.error('Remote track received without callback.');\r\n            jitsiRemoteTrack.dispose();\r\n\r\n            return;\r\n        }\r\n\r\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\r\n        let videoType;\r\n\r\n        if (isVideo) {\r\n            videoType = this._options.convertVideoToDesktop\r\n                ? VideoType.DESKTOP : VideoType.CAMERA;\r\n        }\r\n\r\n        // Grab the webrtc media stream and pipe it through the same processing\r\n        // that would occur for a locally obtained media stream.\r\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\r\n        const jitsiLocalTracks = RTC.newCreateLocalTracks(\r\n            [\r\n                {\r\n                    deviceId:\r\n                        `proxy:${this._peerConnection.getPeerJid()}`,\r\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\r\n                    sourceType: 'proxy',\r\n                    stream: mediaStream,\r\n                    track: mediaStream.getVideoTracks()[0],\r\n                    videoType\r\n                }\r\n            ]);\r\n\r\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\r\n    }\r\n\r\n    /**\r\n     * Formats and forwards a message an iq to be sent to a peer jid.\r\n     *\r\n     * @param {string} peerJid - The jid the iq should be sent to.\r\n     * @param {Object} iq - The iq which would be sent to the peer jid.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSendMessage(peerJid, iq) {\r\n        if (!this._options.onSendMessage) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const stringifiedIq\r\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\r\n\r\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\r\n        } catch (e) {\r\n            logger.error('Attempted to send an incorrectly formatted iq.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _selfCloseConnection() {\r\n        this.stop();\r\n\r\n        this._options.onConnectionClosed\r\n            && this._options.onConnectionClosed();\r\n    }\r\n}\r\n","import { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport RTCEvents from '../../service/RTC/RTCEvents';\r\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\r\nimport RTC from '../RTC/RTC';\r\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\r\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\r\n\r\nimport { ACTIONS } from './constants';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\r\n * an XMPP connection. It is being re-used for consistency with the rest of the\r\n * codebase and to leverage existing peer connection event handling. Also\r\n * this class provides a facade to hide most of the API for\r\n * {@code JingleSessionPC}.\r\n */\r\nexport default class ProxyConnectionPC {\r\n    /**\r\n     * Initializes a new {@code ProxyConnectionPC} instance.\r\n     *\r\n     * @param {Object} options - Values to initialize the instance with.\r\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\r\n     * for the peer connection.\r\n     * @param {boolean} [options.isInitiator] - If true, the local client should\r\n     * send offers. If false, the local client should send answers. Defaults to\r\n     * false.\r\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\r\n     * remote media stream has been received through the peer connection.\r\n     * @param {string} options.peerJid - The jid of the remote client with which\r\n     * the peer connection is being establish and which should receive direct\r\n     * messages regarding peer connection updates.\r\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\r\n     * connection should accept incoming video streams. Defaults to false.\r\n     * @param {Function} options.onSendMessage - Callback to invoke when a\r\n     * message has to be sent (signaled) out.\r\n     */\r\n    constructor(options = {}) {\r\n        this._options = {\r\n            iceConfig: {},\r\n            isInitiator: false,\r\n            receiveAudio: false,\r\n            receiveVideo: false,\r\n            ...options\r\n        };\r\n\r\n        /**\r\n         * Instances of {@code JitsiTrack} associated with this instance of\r\n         * {@code ProxyConnectionPC}.\r\n         *\r\n         * @type {Array<JitsiTrack>}\r\n         */\r\n        this._tracks = [];\r\n\r\n        /**\r\n         * The active instance of {@code JingleSessionPC}.\r\n         *\r\n         * @type {JingleSessionPC|null}\r\n         */\r\n        this._peerConnection = null;\r\n\r\n        // Bind event handlers so they are only bound once for every instance.\r\n        this._onError = this._onError.bind(this);\r\n        this._onRemoteStream = this._onRemoteStream.bind(this);\r\n        this._onSendMessage = this._onSendMessage.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Returns the jid of the remote peer with which this peer connection should\r\n     * be established with.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getPeerJid() {\r\n        return this._options.peerJid;\r\n    }\r\n\r\n    /**\r\n     * Updates the peer connection based on the passed in jingle.\r\n     *\r\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\r\n     * describing how the peer connection should be updated.\r\n     * @returns {void}\r\n     */\r\n    processMessage($jingle) {\r\n        switch ($jingle.attr('action')) {\r\n        case ACTIONS.ACCEPT:\r\n            this._onSessionAccept($jingle);\r\n            break;\r\n\r\n        case ACTIONS.INITIATE:\r\n            this._onSessionInitiate($jingle);\r\n            break;\r\n\r\n        case ACTIONS.TERMINATE:\r\n            this._onSessionTerminate($jingle);\r\n            break;\r\n\r\n        case ACTIONS.TRANSPORT_INFO:\r\n            this._onTransportInfo($jingle);\r\n            break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Instantiates a peer connection and starts the offer/answer cycle to\r\n     * establish a connection with a remote peer.\r\n     *\r\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\r\n     * to add to the peer connection.\r\n     * @returns {void}\r\n     */\r\n    start(localTracks = []) {\r\n        if (this._peerConnection) {\r\n            return;\r\n        }\r\n\r\n        this._tracks = this._tracks.concat(localTracks);\r\n\r\n        this._peerConnection = this._createPeerConnection();\r\n\r\n        this._peerConnection.invite(localTracks);\r\n    }\r\n\r\n    /**\r\n     * Begins the process of disconnecting from a remote peer and cleaning up\r\n     * the peer connection.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    stop() {\r\n        if (this._peerConnection) {\r\n            this._peerConnection.terminate();\r\n        }\r\n\r\n        this._onSessionTerminate();\r\n    }\r\n\r\n    /**\r\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\r\n     * dependencies of {@code JingleSessionPC}.\r\n     *\r\n     * @private\r\n     * @returns {JingleSessionPC}\r\n     */\r\n    _createPeerConnection() {\r\n        /**\r\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\r\n         * object, which may not be accessible from the caller.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const configStub = {};\r\n\r\n        /**\r\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\r\n         * passed through, which also has the jingle plugin initialized on it.\r\n         * This connection object is used to signal out peer connection updates\r\n         * via iqs, and those updates need to be piped back out to the remote\r\n         * peer.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const connectionStub = {\r\n            // At the time this is used for Spot and it's okay to say the connection is always connected, because if\r\n            // spot has no signalling it will not be in a meeting where this is used.\r\n            connected: true,\r\n            jingle: {\r\n                terminate: () => { /** no-op */ }\r\n            },\r\n            sendIQ: this._onSendMessage,\r\n\r\n            // Returns empty function, because it does not add any listeners for real\r\n            // eslint-disable-next-line no-empty-function\r\n            addEventListener: () => () => { }\r\n        };\r\n\r\n        /**\r\n         * {@code JingleSessionPC} can take in a custom ice configuration,\r\n         * depending on the peer connection type, peer-to-peer or other.\r\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\r\n         * connection so the ice configuration is hard-coded with defaults.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const iceConfigStub = {\r\n            iceServers: DEFAULT_STUN_SERVERS,\r\n            ...this._options.iceConfig\r\n        };\r\n\r\n        /**\r\n         * {@code JingleSessionPC} expects an instance of\r\n         * {@code JitsiConference}, which has an event emitter that is used\r\n         * to signal various connection updates that the local client should\r\n         * act upon. The conference instance is not a dependency of a proxy\r\n         * connection, but the emitted events can be relevant to the proxy\r\n         * connection so the event emitter is stubbed.\r\n         *\r\n         * @param {string} event - The constant for the event type.\r\n         * @type {Function}\r\n         * @returns {void}\r\n         */\r\n        const emitter = event => {\r\n            switch (event) {\r\n            case XMPPEvents.CONNECTION_ICE_FAILED:\r\n            case XMPPEvents.CONNECTION_FAILED:\r\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\r\n                break;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * {@link JingleSessionPC} expects an instance of\r\n         * {@link ChatRoom} to be passed in. {@link ProxyConnectionPC}\r\n         * is instantiated outside of the {@code JitsiConference}, so it must be\r\n         * stubbed to prevent errors.\r\n         *\r\n         * @type {Object}\r\n         */\r\n        const roomStub = {\r\n            addPresenceListener: () => { /** no-op */ },\r\n            connectionTimes: [],\r\n            eventEmitter: { emit: emitter },\r\n            getMediaPresenceInfo: () => {\r\n                // Errors occur if this function does not return an object\r\n\r\n                return {};\r\n            },\r\n            removePresenceListener: () => { /** no-op */ }\r\n        };\r\n\r\n        /**\r\n         * A {@code JitsiConference} stub passed to the {@link RTC} module.\r\n         * @type {Object}\r\n         */\r\n        const conferenceStub = {};\r\n\r\n        /**\r\n         * Create an instance of {@code RTC} as it is required for peer\r\n         * connection creation by {@code JingleSessionPC}. An existing instance\r\n         * of {@code RTC} from elsewhere should not be re-used because it is\r\n         * a stateful grouping of utilities.\r\n         */\r\n        this._rtc = new RTC(conferenceStub, {});\r\n\r\n        /**\r\n         * Add the remote track listener here as {@code JingleSessionPC} has\r\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\r\n         * emitter.\r\n         */\r\n        this._rtc.addListener(\r\n            RTCEvents.REMOTE_TRACK_ADDED,\r\n            this._onRemoteStream\r\n        );\r\n\r\n        const peerConnection = new JingleSessionPC(\r\n            undefined, // sid\r\n            undefined, // localJid\r\n            this._options.peerJid, // remoteJid\r\n            connectionStub, // connection\r\n            {\r\n                offerToReceiveAudio: this._options.receiveAudio,\r\n                offerToReceiveVideo: this._options.receiveVideo\r\n            }, // mediaConstraints\r\n            iceConfigStub, // iceConfig\r\n            true, // isP2P\r\n            this._options.isInitiator // isInitiator\r\n        );\r\n\r\n        /**\r\n         * An additional initialize call is necessary to properly set instance\r\n         * variable for calling.\r\n         */\r\n        peerConnection.initialize(roomStub, this._rtc, configStub);\r\n\r\n        return peerConnection;\r\n    }\r\n\r\n    /**\r\n     * Invoked when a connection related issue has been encountered.\r\n     *\r\n     * @param {string} errorType - The constant indicating the type of the error\r\n     * that occured.\r\n     * @param {string} details - Optional additional data about the error.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onError(errorType, details = '') {\r\n        this._options.onError(this._options.peerJid, errorType, details);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when the peer connection has received a remote media\r\n     * stream.\r\n     *\r\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\r\n     * wrapped in {@code JitsiRemoteTrack}.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onRemoteStream(jitsiRemoteTrack) {\r\n        this._tracks.push(jitsiRemoteTrack);\r\n\r\n        this._options.onRemoteStream(jitsiRemoteTrack);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\r\n     * out to the remote peer.\r\n     *\r\n     * @param {XML} iq - The message to signal out.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSendMessage(iq) {\r\n        this._options.onSendMessage(this._options.peerJid, iq);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to an agreement to start a proxy connection.\r\n     * The passed in jingle element should contain an SDP answer to a previously\r\n     * sent SDP offer.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionAccept($jingle) {\r\n        if (!this._peerConnection) {\r\n            logger.error('Received an answer when no peer connection exists.');\r\n\r\n            return;\r\n        }\r\n\r\n        this._peerConnection.setAnswer($jingle);\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to a request to start a proxy connection.\r\n     * The passed in jingle element should contain an SDP offer.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionInitiate($jingle) {\r\n        if (this._peerConnection) {\r\n            logger.error('Received an offer when an offer was already sent.');\r\n\r\n            return;\r\n        }\r\n\r\n        this._peerConnection = this._createPeerConnection();\r\n\r\n        this._peerConnection.acceptOffer(\r\n            $jingle,\r\n            () => { /** no-op */ },\r\n            () => this._onError(\r\n                this._options.peerJid,\r\n                ACTIONS.CONNECTION_ERROR,\r\n                'session initiate error'\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to a request to disconnect an active proxy\r\n     * connection. Cleans up tracks and the peer connection.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onSessionTerminate() {\r\n        this._tracks.forEach(track => track.dispose());\r\n        this._tracks = [];\r\n\r\n        if (this._peerConnection) {\r\n            this._peerConnection.onTerminated();\r\n        }\r\n\r\n        if (this._rtc) {\r\n            this._rtc.removeListener(\r\n                RTCEvents.REMOTE_TRACK_ADDED,\r\n                this._onRemoteStream\r\n            );\r\n\r\n            this._rtc.destroy();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback invoked in response to ICE candidates from the remote peer.\r\n     * The passed in jingle element should contain an ICE candidate.\r\n     *\r\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    _onTransportInfo($jingle) {\r\n        this._peerConnection.addIceCandidates($jingle);\r\n    }\r\n}\r\n","export default {\r\n    error: {\r\n        BUSY: 'busy',\r\n        ERROR: 'error',\r\n        RESOURCE_CONSTRAINT: 'resource-constraint',\r\n        SERVICE_UNAVAILABLE: 'service-unavailable'\r\n    },\r\n    mode: {\r\n        FILE: 'file',\r\n        STREAM: 'stream'\r\n    },\r\n    status: {\r\n        OFF: 'off',\r\n        ON: 'on',\r\n        PENDING: 'pending'\r\n    }\r\n};\r\n","import EventEmitter from 'events';\r\n\r\nimport browser from '../browser';\r\nimport Settings from '../settings/Settings';\r\nimport ScriptUtil from '../util/ScriptUtil';\r\n\r\nimport { CALLSTATS_SCRIPT_URL } from './constants';\r\n\r\nconst PRECALL_TEST_RESULTS = 'preCallTestResults';\r\nconst emitter = new EventEmitter();\r\nlet _initialized = false;\r\nlet api = null;\r\n\r\n/**\r\n * Loads the callstats io script.\r\n *\r\n * @returns {Promise<void>}\r\n */\r\nfunction _loadScript() {\r\n    if (browser.isReactNative()) {\r\n        return;\r\n    }\r\n\r\n    return new Promise(resolve => {\r\n        ScriptUtil.loadScript(\r\n            CALLSTATS_SCRIPT_URL,\r\n            /* async */ true,\r\n            /* prepend */ true,\r\n            /* relativeURL */ undefined,\r\n            /* loadCallback */ resolve);\r\n    });\r\n}\r\n\r\n/**\r\n * Initializes the callstats lib and registers a callback to be invoked\r\n * when there are 'preCallTestResults'.\r\n *\r\n * @typedef PrecallTestOptions\r\n * @type {Object}\r\n * @property {string} callStatsID - Callstats credentials - the id.\r\n * @property {string} callStatsSecret - Callstats credentials - the secret.\r\n * @property {string} statisticsId - The user name to use when initializing callstats.\r\n * @property {string} statisticsDisplayName - The user display name.\r\n *\r\n * @param { PrecallTestOptions} options - The init options.\r\n * @returns {Promise<void>}\r\n */\r\nfunction _initialize(options) {\r\n    return new Promise((resolve, reject) => {\r\n        const appId = options.callStatsID;\r\n        const appSecret = options.callStatsSecret;\r\n        const userId = options.statisticsId || options.statisticsDisplayName || Settings.callStatsUserName;\r\n\r\n        api.initialize(appId, appSecret, userId, (status, message) => {\r\n            if (status === 'success') {\r\n                api.on(PRECALL_TEST_RESULTS, (...args) => {\r\n                    emitter.emit(PRECALL_TEST_RESULTS, ...args);\r\n                });\r\n                _initialized = true;\r\n                resolve();\r\n            } else {\r\n                reject({\r\n                    status,\r\n                    message\r\n                });\r\n            }\r\n        }, null, { disablePrecalltest: true });\r\n    });\r\n}\r\n\r\n/**\r\n * Loads the callstats script and initializes the library.\r\n *\r\n * @param {Function} onResult - The callback to be invoked when results are received.\r\n * @returns {Promise<void>}\r\n */\r\nexport async function init(options) {\r\n    if (_initialized) {\r\n        throw new Error('Precall Test already initialized');\r\n    }\r\n\r\n    const { callStatsID, callStatsSecret, disableThirdPartyRequests } = options;\r\n\r\n    if (!callStatsID || !callStatsSecret || disableThirdPartyRequests) {\r\n        throw new Error('Callstats is disabled');\r\n    }\r\n\r\n    await _loadScript();\r\n    // eslint-disable-next-line new-cap\r\n    api = new window.callstats();\r\n\r\n    return _initialize(options);\r\n}\r\n\r\n/**\r\n * Executes a pre call test.\r\n *\r\n * @typedef PrecallTestResults\r\n * @type {Object}\r\n * @property {boolean} mediaConnectivity - If there is media connectivity or not.\r\n * @property {number} throughput  - The average throughput.\r\n * @property {number} fractionalLoss - The packet loss.\r\n * @property {number} rtt - The round trip time.\r\n * @property {string} provider - It is usually 'callstats'.\r\n *\r\n * @returns {Promise<{PrecallTestResults}>}\r\n */\r\nexport function execute() {\r\n    if (!_initialized) {\r\n        return Promise.reject('uninitialized');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        emitter.on(PRECALL_TEST_RESULTS, (status, payload) => {\r\n            if (status === 'success') {\r\n                resolve(payload);\r\n            } else {\r\n                reject({\r\n                    status,\r\n                    payload\r\n                });\r\n            }\r\n\r\n        });\r\n\r\n        api.makePrecallTest();\r\n    });\r\n}\r\n\r\nexport default {\r\n    init,\r\n    execute\r\n};\r\n","const AuthUtil = {\r\n    /**\r\n     * Creates the URL pointing to JWT token authentication service. It is\r\n     * formatted from the 'urlPattern' argument which can contain the following\r\n     * constants:\r\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\r\n     * argument to this method.\r\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\r\n     * the role upgrade scenario, where user connects from anonymous domain and\r\n     * then gets upgraded to the moderator by logging-in from the popup window.\r\n     *\r\n     * @param urlPattern a URL pattern pointing to the login service\r\n     * @param roomName the name of the conference room for which the user will\r\n     * be authenticated\r\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\r\n     * upgrade scenario, where the user logs-in from the popup window in order\r\n     * to have the moderator rights granted\r\n     *\r\n     * @returns {string|null} the URL pointing to JWT login service or\r\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\r\n     * constructed.\r\n     */\r\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\r\n        const url = urlPattern;\r\n\r\n        if (typeof url !== 'string') {\r\n            return null;\r\n        }\r\n\r\n        return url.replace('{room}', roomName)\r\n            .replace('{roleUpgrade}', roleUpgrade === true);\r\n    }\r\n};\r\n\r\nmodule.exports = AuthUtil;\r\n","/* global\r\n    __filename\r\n*/\r\n\r\nimport { getLogger } from 'jitsi-meet-logger';\r\n\r\nimport { createAudioContext } from './WebAudioUtils';\r\n\r\nconst logger = getLogger(__filename);\r\n\r\n/**\r\n * The AudioMixer, as the name implies, mixes a number of MediaStreams containing audio tracks into a single\r\n * MediaStream.\r\n */\r\nexport default class AudioMixer {\r\n    /**\r\n     * Create AudioMixer instance.\r\n     */\r\n    constructor() {\r\n        this._started = false;\r\n        this._streamsToMix = [];\r\n        this._streamMSSArray = [];\r\n    }\r\n\r\n    /**\r\n     * Add audio MediaStream to be mixed, if the stream doesn't contain any audio tracks it will be ignored.\r\n     *\r\n     * @param {MediaStream} stream - MediaStream to be mixed.\r\n     */\r\n    addMediaStream(stream) {\r\n        if (!stream.getAudioTracks()) {\r\n            logger.warn('Added MediaStream doesn\\'t contain audio tracks.');\r\n        }\r\n\r\n        this._streamsToMix.push(stream);\r\n    }\r\n\r\n    /**\r\n     * At this point a WebAudio ChannelMergerNode is created and and the two associated MediaStreams are connected to\r\n     * it; the resulting mixed MediaStream is returned.\r\n     *\r\n     * @returns {MediaStream} - MediaStream containing added streams mixed together, or null if no MediaStream\r\n     * is added.\r\n     */\r\n    start() {\r\n        // If the mixer was already started just return the existing mixed stream.\r\n        if (this._started) {\r\n            return this._mixedMSD.stream;\r\n        }\r\n\r\n        this._audioContext = createAudioContext();\r\n\r\n        if (!this._streamsToMix.length) {\r\n            logger.warn('No MediaStream\\'s added to AudioMixer, nothing will happen.');\r\n\r\n            return null;\r\n        }\r\n\r\n        this._started = true;\r\n\r\n        this._mixedMSD = this._audioContext.createMediaStreamDestination();\r\n\r\n        for (const stream of this._streamsToMix) {\r\n            const streamMSS = this._audioContext.createMediaStreamSource(stream);\r\n\r\n            streamMSS.connect(this._mixedMSD);\r\n\r\n            // Maintain a list of MediaStreamAudioSourceNode so we can disconnect them on reset.\r\n            this._streamMSSArray.push(streamMSS);\r\n        }\r\n\r\n        return this._mixedMSD.stream;\r\n    }\r\n\r\n    /**\r\n     * Disconnect MediaStreamAudioSourceNode and clear references.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    reset() {\r\n        this._started = false;\r\n        this._streamsToMix = [];\r\n\r\n        // Clean up created MediaStreamAudioSourceNode.\r\n        for (const streamMSS of this._streamMSSArray) {\r\n            streamMSS.disconnect();\r\n        }\r\n\r\n        this._streamMSSArray = [];\r\n\r\n        if (this._audioContext) {\r\n            this._audioContext = undefined;\r\n        }\r\n    }\r\n}\r\n","/* Copyright @ 2015 - Present, 8x8 Inc\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport transform from 'sdp-transform';\r\n\r\n/**\r\n * Rewrites the source information in the way sdp-transform expects.\r\n * Source information is split into multiple ssrc objects each containing\r\n * an id, attribute and value.\r\n * @param {Object} media - media description to be modified.\r\n * @returns {void}\r\n */\r\nconst write = function(session, opts) {\r\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\r\n        session.media.forEach(mLine => {\r\n            if (mLine.sources && mLine.sources.length) {\r\n                mLine.ssrcs = [];\r\n                mLine.sources.forEach(source => {\r\n                    Object.keys(source).forEach(attribute => {\r\n                        if (attribute === 'id') {\r\n                            return;\r\n                        }\r\n                        mLine.ssrcs.push({\r\n                            id: source.id,\r\n                            attribute,\r\n                            value: source[attribute]\r\n                        });\r\n                    });\r\n                });\r\n                delete mLine.sources;\r\n            }\r\n\r\n            // join ssrcs in ssrc groups\r\n            if (mLine.ssrcGroups && mLine.ssrcGroups.length) {\r\n                mLine.ssrcGroups.forEach(ssrcGroup => {\r\n                    if (typeof ssrcGroup.ssrcs !== 'undefined'\r\n                    && Array.isArray(ssrcGroup.ssrcs)) {\r\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return transform.write(session, opts);\r\n};\r\n\r\n/**\r\n * Rewrites the source information that we get from sdp-transform.\r\n * All the ssrc lines with different attributes that belong to the\r\n * same ssrc are grouped into a single soure object with multiple key value pairs.\r\n * @param {Object} media - media description to be modified.\r\n * @returns {void}\r\n */\r\nconst parse = function(sdp) {\r\n    const session = transform.parse(sdp);\r\n\r\n    if (typeof session !== 'undefined' && typeof session.media !== 'undefined' && Array.isArray(session.media)) {\r\n        session.media.forEach(mLine => {\r\n            // group sources attributes by ssrc\r\n            if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\r\n                mLine.sources = [];\r\n                mLine.ssrcs.forEach(ssrc => {\r\n                    const found = mLine.sources.findIndex(source => source.id === ssrc.id);\r\n\r\n                    if (found > -1) {\r\n                        mLine.sources[found][ssrc.attribute] = ssrc.value;\r\n                    } else {\r\n                        const src = { id: ssrc.id };\r\n\r\n                        src[ssrc.attribute] = ssrc.value;\r\n                        mLine.sources.push(src);\r\n                    }\r\n                });\r\n                delete mLine.ssrcs;\r\n            }\r\n\r\n            // split ssrcs in ssrc groups\r\n            if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\r\n                mLine.ssrcGroups.forEach(ssrcGroup => {\r\n                    if (typeof ssrcGroup.ssrcs === 'string') {\r\n                        ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    return session;\r\n};\r\n\r\nexport default {\r\n    write,\r\n    parse\r\n};\r\n","/* Copyright @ 2015 - Present, 8x8 Inc\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport clonedeep from 'lodash.clonedeep';\r\nimport transform from './transform.js';\r\n\r\nconst PLAN_B_MIDS = [ 'audio', 'video', 'data' ];\r\nconst findSimGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'SIM');\r\nconst findFidGroup = ssrcGroup => ssrcGroup.find(grp => grp.semantics === 'FID');\r\n\r\n/**\r\n * Add the ssrcs of the SIM group and their corresponding FID group ssrcs\r\n * to the m-line.\r\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\r\n * @param {Object} simGroup - The SIM group whose ssrcs have to be added to\r\n * the m-line.\r\n * @param {Object} sourceGroups - inverted source-group map.\r\n * @param {Array<Object>} sourceList - array containing all the sources.\r\n */\r\nfunction addSimGroupSources(mLine, simGroup, sourceGroups, sourceList) {\r\n    if (!mLine || !simGroup) {\r\n        return;\r\n    }\r\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\r\n\r\n    simGroup.ssrcs.forEach(src => {\r\n        mLine.sources.push(findSourcebyId(src));\r\n\r\n        // find the related FID group member for this ssrc.\r\n        const relatedFidGroup = sourceGroups[parseInt(src, 10)].find(grp => grp.semantics === 'FID');\r\n\r\n        if (relatedFidGroup) {\r\n            const relatedSsrc = relatedFidGroup.ssrcs.find(s => s !== src);\r\n\r\n            mLine.sources.push(findSourcebyId(relatedSsrc));\r\n            mLine.ssrcGroups.push(relatedFidGroup);\r\n        }\r\n    });\r\n\r\n    // Add the SIM group last.\r\n    mLine.ssrcGroups.push(simGroup);\r\n}\r\n\r\n/**\r\n * Add ssrcs and ssrc-groups to the m-line. When a primary ssrc, i.e., the\r\n * first ssrc in a SIM group is passed, all the other ssrcs from the SIM\r\n * group and the other ssrcs from the related FID groups are added to the same\r\n * m-line since they all belong to the same remote source. Since the ssrcs are\r\n * not guaranteed to be in the correct order, try to find if a SIM group exists,\r\n * if not, just add the FID group.\r\n * @param {Object} mLine - The m-line to which ssrcs have to be added.\r\n * @param {Object} ssrc - the primary ssrc.\r\n * @param {Object} sourceGroups - inverted source-group map.\r\n * @param {Array<Object>} sourceList - array containing all the sources.\r\n * @returns {void}\r\n */\r\nfunction addSourcesToMline(mLine, ssrc, sourceGroups, sourceList) {\r\n    if (!mLine || !ssrc) {\r\n        return;\r\n    }\r\n    mLine.sources = [];\r\n    mLine.ssrcGroups = [];\r\n\r\n    // If there are no associated ssrc-groups, just add the ssrc and msid.\r\n    if (!sourceGroups[ssrc.id]) {\r\n        mLine.sources.push(ssrc);\r\n        mLine.msid = ssrc.msid;\r\n\r\n        return;\r\n    }\r\n    const findSourcebyId = src => sourceList.find(source => source.id.toString() === src);\r\n\r\n    // Find the SIM and FID groups that this ssrc belongs to.\r\n    const simGroup = findSimGroup(sourceGroups[ssrc.id]);\r\n    const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\r\n\r\n    // Add the ssrcs for the SIM group and their corresponding FID groups.\r\n    if (simGroup) {\r\n        addSimGroupSources(mLine, simGroup, sourceGroups, sourceList);\r\n    } else if (fidGroup) {\r\n        // check if the other ssrc from this FID group is part of a SIM group\r\n        const otherSsrc = fidGroup.ssrcs.find(s => s !== ssrc);\r\n        const simGroup2 = findSimGroup(sourceGroups[otherSsrc]);\r\n\r\n        if (simGroup2) {\r\n            addSimGroupSources(mLine, simGroup2, sourceGroups, sourceList);\r\n        } else {\r\n            // Add the FID group ssrcs.\r\n            fidGroup.ssrcs.forEach(src => {\r\n                mLine.sources.push(findSourcebyId(src));\r\n            });\r\n            mLine.ssrcGroups.push(fidGroup);\r\n        }\r\n    }\r\n\r\n    // Set the msid for the media description using the msid attribute of the ssrcs.\r\n    mLine.msid = mLine.sources[0].msid;\r\n}\r\n\r\n/**\r\n * Checks if there is a mline for the given ssrc or its related primary ssrc.\r\n * We always implode the SIM group to the first ssrc in the SIM group before sRD,\r\n * so we also check if mline for that ssrc exists.\r\n * For example:\r\n * If the following ssrcs are in a SIM group,\r\n * <ssrc-group xmlns=\\\"urn:xmpp:jingle:apps:rtp:ssma:0\\\" semantics=\\\"SIM\\\">\r\n *        <source ssrc=\\\"1806330949\\\"/>\r\n *        <source ssrc=\\\"4173145196\\\"/>\r\n *        <source ssrc=\\\"2002632207\\\"/>\r\n * </ssrc-group>\r\n * This method returns true for any one of the 3 ssrcs if there is a mline for 1806330949.\r\n * @param {Object} ssrc - ssrc to check.\r\n * @param {Object} sourceGroups - inverted source-group map.\r\n * @param {Array<Object>} mlines - mlines in the description\r\n\r\n * @returns {Boolean} - Returns true if mline for the given ssrc or the related primary ssrc\r\n * exists, returns false otherwise.\r\n */\r\nfunction checkIfMlineForSsrcExists(ssrc, sourceGroups, mlines) {\r\n    const findMatchingMline = mline => {\r\n        if (mline.sources) {\r\n            return mline.sources.some(source => source.id === ssrc.id);\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    if (!mlines.find(findMatchingMline)) {\r\n        // check if this ssrc is member of a SIM group. If so, check if there\r\n        // is a matching m-line for the primary ssrc of the SIM group.\r\n        if (!sourceGroups[ssrc.id]) {\r\n            return false;\r\n        }\r\n        const simGroup = findSimGroup(sourceGroups[ssrc.id]);\r\n        const fidGroup = findFidGroup(sourceGroups[ssrc.id]);\r\n\r\n        if (simGroup) {\r\n            return mlines.some(mline => mline.sources\r\n                && mline.sources.some(src => src.id.toString() === simGroup.ssrcs[0]));\r\n        } else if (fidGroup && ssrc.id.toString() !== fidGroup.ssrcs[0]) {\r\n            const otherSsrc = { id: fidGroup.ssrcs[0] };\r\n\r\n            return checkIfMlineForSsrcExists(otherSsrc, sourceGroups, mlines);\r\n\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Create an inverted sourceGroup map to put all the grouped ssrcs\r\n * in the same m-line.\r\n * @param {Array<Object>} sourceGroups\r\n * @returns {Object} - An inverted sourceGroup map.\r\n */\r\nfunction createSourceGroupMap(sourceGroups) {\r\n    const ssrc2group = {};\r\n\r\n    if (!sourceGroups || !Array.isArray(sourceGroups)) {\r\n        return ssrc2group;\r\n    }\r\n    sourceGroups.forEach(group => {\r\n        if (group.ssrcs && Array.isArray(group.ssrcs)) {\r\n            group.ssrcs.forEach(ssrc => {\r\n                if (typeof ssrc2group[ssrc] === 'undefined') {\r\n                    ssrc2group[ssrc] = [];\r\n                }\r\n                ssrc2group[ssrc].push(group);\r\n            });\r\n        }\r\n    });\r\n\r\n    return ssrc2group;\r\n}\r\n\r\n/**\r\n * Interop provides an API for tranforming a Plan B SDP to a Unified Plan SDP and\r\n * vice versa.\r\n */\r\nexport class Interop {\r\n    /**\r\n     * This method transforms a Unified Plan SDP to an equivalent Plan B SDP.\r\n     * @param {RTCSessionDescription} description - The description in Unified plan format.\r\n     * @returns RTCSessionDescription - The transformed session description.\r\n     */\r\n    toPlanB(description) {\r\n        if (!description || typeof description.sdp !== 'string') {\r\n            console.warn('An empty description was passed as an argument.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Objectify the SDP for easier manipulation.\r\n        const session = transform.parse(description.sdp);\r\n\r\n        // If the SDP contains no media, there's nothing to transform.\r\n        if (!session.media || !session.media.length) {\r\n            console.warn('The description has no media.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Make sure this is a unified plan sdp\r\n        if (session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) !== -1)) {\r\n            console.warn('The description does not look like unified plan sdp');\r\n\r\n            return description;\r\n        }\r\n\r\n        const media = {};\r\n        const sessionMedia = session.media;\r\n\r\n        session.media = [];\r\n        sessionMedia.forEach(mLine => {\r\n            const type = mLine.type;\r\n\r\n            if (type === 'application') {\r\n                mLine.mid = 'data';\r\n                media[mLine.mid] = mLine;\r\n\r\n                return;\r\n            }\r\n            if (typeof media[type] === 'undefined') {\r\n                const bLine = clonedeep(mLine);\r\n\r\n                // Copy the msid attribute to all the ssrcs if they belong to the same source group\r\n                if (bLine.sources && Array.isArray(bLine.sources)) {\r\n                    bLine.sources.forEach(source => {\r\n                        mLine.msid ? source.msid = mLine.msid : delete source.msid;\r\n                    });\r\n                }\r\n\r\n                // Do not signal the FID groups if there is no msid attribute present\r\n                // on the sources as sesison-accept with this source info will fail strophe\r\n                // validation and the session will not be established. This behavior is seen\r\n                // on Firefox (with RTX enabled) when no video source is added at the join time.\r\n                // FF generates two recvonly ssrcs with no msid and a corresponding FID group in\r\n                // this case.\r\n                if (!bLine.ssrcGroups || !mLine.msid) {\r\n                    bLine.ssrcGroups = [];\r\n                }\r\n                delete bLine.msid;\r\n                bLine.mid = type;\r\n                media[type] = bLine;\r\n            } else if (mLine.msid) {\r\n                // Add sources and source-groups to the existing m-line of the same media type.\r\n                if (mLine.sources && Array.isArray(mLine.sources)) {\r\n                    media[type].sources = media[type].sources.concat(mLine.sources);\r\n                }\r\n                if (typeof mLine.ssrcGroups !== 'undefined' && Array.isArray(mLine.ssrcGroups)) {\r\n                    media[type].ssrcGroups = media[type].ssrcGroups.concat(mLine.ssrcGroups);\r\n                }\r\n            }\r\n        });\r\n        session.media = Object.values(media);\r\n\r\n        // Bundle the media only if it is active.\r\n        const bundle = [];\r\n\r\n        Object.values(media).forEach(mline => {\r\n            if (mline.direction !== 'inactive') {\r\n                bundle.push(mline.mid);\r\n            }\r\n        });\r\n\r\n        // We regenerate the BUNDLE group with the new mids.\r\n        session.groups.forEach(group => {\r\n            if (group.type === 'BUNDLE') {\r\n                group.mids = bundle.join(' ');\r\n            }\r\n        });\r\n\r\n        // msid semantic\r\n        session.msidSemantic = {\r\n            semantic: 'WMS',\r\n            token: '*'\r\n        };\r\n        const resStr = transform.write(session);\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: resStr\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This method transforms a Plan B SDP to an equivalent Unified Plan SDP.\r\n     * @param {RTCSessionDescription} description - The description in plan-b format.\r\n     * @param {RTCSessionDescription} current - The current description set on\r\n     * the peerconnection in Unified-plan format, i.e., the readonly attribute\r\n     * remoteDescription on the RTCPeerConnection object.\r\n     * @returns RTCSessionDescription - The transformed session description.\r\n     */\r\n    toUnifiedPlan(description, current = null) {\r\n        if (!description || typeof description.sdp !== 'string') {\r\n            console.warn('An empty description was passed as an argument.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Objectify the SDP for easier manipulation.\r\n        const session = transform.parse(description.sdp);\r\n\r\n        // If the SDP contains no media, there's nothing to transform.\r\n        if (!session.media || !session.media.length) {\r\n            console.warn('The description has no media.');\r\n\r\n            return description;\r\n        }\r\n\r\n        // Make sure this is a plan-b sdp.\r\n        if (session.media.length > 3 || session.media.every(m => PLAN_B_MIDS.indexOf(m.mid) === -1)) {\r\n            console.warn('The description does not look like plan-b');\r\n\r\n            return description;\r\n        }\r\n        const currentDesc = current ? transform.parse(current.sdp) : null;\r\n        const media = {};\r\n\r\n        session.media.forEach(mLine => {\r\n            const type = mLine.type;\r\n\r\n            if (type === 'application') {\r\n                if (!currentDesc || !currentDesc.media) {\r\n                    const newMline = clonedeep(mLine);\r\n\r\n                    newMline.mid = Object.keys(media).length.toString();\r\n                    media[mLine.mid] = newMline;\r\n\r\n                    return;\r\n                }\r\n                const mLineForData = currentDesc.media.findIndex(m => m.type === type);\r\n\r\n                if (mLineForData) {\r\n                    currentDesc.media[mLineForData] = mLine;\r\n                    currentDesc.media[mLineForData].mid = mLineForData;\r\n                }\r\n\r\n                return;\r\n            }\r\n\r\n            // Create an inverted sourceGroup map here to put all the grouped SSRCs in the same m-line.\r\n            const ssrc2group = createSourceGroupMap(mLine.ssrcGroups);\r\n\r\n            if (!mLine.sources) {\r\n                return;\r\n            }\r\n            mLine.sources.forEach((ssrc, idx) => {\r\n                // Do not add the receive-only ssrcs that Jicofo sends in the source-add.\r\n                // These ssrcs do not have the \"msid\" attribute set.\r\n                if (!ssrc.msid) {\r\n                    return;\r\n                }\r\n\r\n                // If there is no description set on the peerconnection, create new m-lines.\r\n                if (!currentDesc || !currentDesc.media) {\r\n                    if (checkIfMlineForSsrcExists(ssrc, ssrc2group, Object.values(media))) {\r\n                        return;\r\n                    }\r\n                    const newMline = clonedeep(mLine);\r\n\r\n                    newMline.mid = Object.keys(media).length.toString();\r\n                    newMline.direction = idx\r\n                        ? 'sendonly'\r\n                        : mLine.direction === 'sendonly' ? 'sendonly' : 'sendrecv';\r\n                    newMline.bundleOnly = undefined;\r\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\r\n                    media[newMline.mid] = newMline;\r\n\r\n                    return;\r\n                }\r\n\r\n                // Create and append the m-lines to the existing description.\r\n                if (checkIfMlineForSsrcExists(ssrc, ssrc2group, currentDesc.media)) {\r\n                    return;\r\n                }\r\n\r\n                // check if there is a m-line that is inactive and is of the same media type\r\n                const inactiveMid = currentDesc.media\r\n                    .findIndex(cmLine => cmLine.direction\r\n                        && cmLine.direction === 'inactive'\r\n                        && cmLine.type === type);\r\n\r\n                if (inactiveMid > -1) {\r\n                    currentDesc.media[inactiveMid].direction = 'sendonly';\r\n                    addSourcesToMline(currentDesc.media[inactiveMid], ssrc, ssrc2group, mLine.sources);\r\n                } else {\r\n                    const newMline = clonedeep(mLine);\r\n\r\n                    newMline.mid = currentDesc.media.length.toString();\r\n                    newMline.direction = 'sendonly';\r\n                    addSourcesToMline(newMline, ssrc, ssrc2group, mLine.sources);\r\n                    currentDesc.media.push(newMline);\r\n                }\r\n            });\r\n        });\r\n        session.media = currentDesc ? currentDesc.media : Object.values(media);\r\n        const mids = [];\r\n\r\n        session.media.forEach(mLine => {\r\n            mids.push(mLine.mid);\r\n        });\r\n\r\n        // We regenerate the BUNDLE group (since we regenerated the mids)\r\n        session.groups.forEach(group => {\r\n            if (group.type === 'BUNDLE') {\r\n                group.mids = mids.join(' ');\r\n            }\r\n        });\r\n\r\n        // msid semantic\r\n        session.msidSemantic = {\r\n            semantic: 'WMS',\r\n            token: '*'\r\n        };\r\n\r\n        // Increment the session version every time.\r\n        session.origin.sessionVersion++;\r\n        const resultSdp = transform.write(session);\r\n\r\n        return new RTCSessionDescription({\r\n            type: description.type,\r\n            sdp: resultSdp\r\n        });\r\n    }\r\n}\r\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\r\n// require the crypto API and do not support built-in fallback to lower quality random number\r\n// generators (like Math.random()).\r\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\r\n// find the complete implementation of crypto (msCrypto) on IE11.\r\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\r\nvar rnds8 = new Uint8Array(16);\r\nexport default function rng() {\r\n  if (!getRandomValues) {\r\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\r\n  }\r\n\r\n  return getRandomValues(rnds8);\r\n}","/**\r\n * Convert array of 16 byte values to UUID string format of the form:\r\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\r\n */\r\nvar byteToHex = [];\r\n\r\nfor (var i = 0; i < 256; ++i) {\r\n  byteToHex.push((i + 0x100).toString(16).substr(1));\r\n}\r\n\r\nfunction bytesToUuid(buf, offset) {\r\n  var i = offset || 0;\r\n  var bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\r\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\r\n\r\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\r\n}\r\n\r\nexport default bytesToUuid;","import rng from './rng.js';\r\nimport bytesToUuid from './bytesToUuid.js';\r\n\r\nfunction v4(options, buf, offset) {\r\n  if (typeof options === 'string') {\r\n    buf = options === 'binary' ? new Uint8Array(16) : null;\r\n    options = null;\r\n  }\r\n\r\n  options = options || {};\r\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\r\n\r\n  rnds[6] = rnds[6] & 0x0f | 0x40;\r\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\r\n\r\n  if (buf) {\r\n    var start = offset || 0;\r\n\r\n    for (var i = 0; i < 16; ++i) {\r\n      buf[start + i] = rnds[i];\r\n    }\r\n\r\n    return buf;\r\n  }\r\n\r\n  return bytesToUuid(rnds);\r\n}\r\n\r\nexport default v4;","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\r\n// library (a.k.a. JitsiMeetJS).\r\nmodule.exports = require('./JitsiMeetJS').default;\r\n","/* global __filename */\r\n\r\nimport Logger from 'jitsi-meet-logger';\r\n\r\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\r\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\r\nimport JitsiConnection from './JitsiConnection';\r\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\r\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\r\nimport JitsiMediaDevices from './JitsiMediaDevices';\r\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\r\nimport JitsiTrackError from './JitsiTrackError';\r\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\r\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\r\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\r\nimport RTC from './modules/RTC/RTC';\r\nimport browser from './modules/browser';\r\nimport NetworkInfo from './modules/connectivity/NetworkInfo';\r\nimport { ParticipantConnectionStatus }\r\n    from './modules/connectivity/ParticipantConnectionStatus';\r\nimport getActiveAudioDevice from './modules/detection/ActiveDeviceDetector';\r\nimport * as DetectionEvents from './modules/detection/DetectionEvents';\r\nimport TrackVADEmitter from './modules/detection/TrackVADEmitter';\r\nimport FeatureFlags from './modules/flags/FeatureFlags';\r\nimport ProxyConnectionService\r\n    from './modules/proxyconnection/ProxyConnectionService';\r\nimport recordingConstants from './modules/recording/recordingConstants';\r\nimport Settings from './modules/settings/Settings';\r\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\r\nimport precallTest from './modules/statistics/PrecallTest';\r\nimport Statistics from './modules/statistics/statistics';\r\nimport AuthUtil from './modules/util/AuthUtil';\r\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\r\nimport ScriptUtil from './modules/util/ScriptUtil';\r\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\r\nimport AudioMixer from './modules/webaudio/AudioMixer';\r\nimport * as MediaType from './service/RTC/MediaType';\r\nimport Resolutions from './service/RTC/Resolutions';\r\nimport * as ConnectionQualityEvents\r\n    from './service/connectivity/ConnectionQualityEvents';\r\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\r\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\r\n\r\nconst logger = Logger.getLogger(__filename);\r\n\r\n/**\r\n * The amount of time to wait until firing\r\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\r\n */\r\nconst USER_MEDIA_PERMISSION_PROMPT_TIMEOUT = 1000;\r\n\r\n/**\r\n * Gets the next lowest desirable resolution to try for a camera. If the given\r\n * resolution is already the lowest acceptable resolution, returns {@code null}.\r\n *\r\n * @param resolution the current resolution\r\n * @return the next lowest resolution from the given one, or {@code null} if it\r\n * is already the lowest acceptable resolution.\r\n */\r\nfunction getLowerResolution(resolution) {\r\n    if (!Resolutions[resolution]) {\r\n        return null;\r\n    }\r\n    const order = Resolutions[resolution].order;\r\n    let res = null;\r\n    let resName = null;\r\n\r\n    Object.keys(Resolutions).forEach(r => {\r\n        const value = Resolutions[r];\r\n\r\n        if (!res || (res.order < value.order && value.order < order)) {\r\n            resName = r;\r\n            res = value;\r\n        }\r\n    });\r\n\r\n    if (resName === resolution) {\r\n        resName = null;\r\n    }\r\n\r\n    return resName;\r\n}\r\n\r\n/**\r\n * Extracts from an 'options' objects with a specific format (TODO what IS the\r\n * format?) the attributes which are to be logged in analytics events.\r\n *\r\n * @param options gum options (???)\r\n * @returns {*} the attributes to attach to analytics events.\r\n */\r\nfunction getAnalyticsAttributesFromOptions(options) {\r\n    const attributes = {\r\n        'audio_requested':\r\n            options.devices.includes('audio'),\r\n        'video_requested':\r\n            options.devices.includes('video'),\r\n        'screen_sharing_requested':\r\n            options.devices.includes('desktop')\r\n    };\r\n\r\n    if (attributes.video_requested) {\r\n        attributes.resolution = options.resolution;\r\n    }\r\n\r\n    return attributes;\r\n}\r\n\r\n/**\r\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\r\n * this module, it's also a global (i.e. attached to {@code window}) namespace\r\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\r\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\r\n * automatically be attached to {@code window} by webpack. Unfortunately,\r\n * webpack's source code does not check whether the global variable has already\r\n * been assigned and overwrites it. Which is OK for the module\r\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\r\n * because it may already contain the values of other projects in the Jitsi Meet\r\n * family. The solution offered here works around webpack by merging all\r\n * existing values of the namespace {@code JitsiMeetJS} into the module\r\n * {@code JitsiMeetJS}.\r\n *\r\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\r\n * exported and may be attached to {@code window} by webpack later on).\r\n * @private\r\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\r\n * value of the namespace {@code JitsiMeetJS} (if any).\r\n */\r\nfunction _mergeNamespaceAndModule(module) {\r\n    return (\r\n        typeof window.JitsiMeetJS === 'object'\r\n            ? Object.assign({}, window.JitsiMeetJS, module)\r\n            : module);\r\n}\r\n\r\n/**\r\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\r\n */\r\nexport default _mergeNamespaceAndModule({\r\n\r\n    version: '{#COMMIT_HASH#}',\r\n\r\n    JitsiConnection,\r\n\r\n    /**\r\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\r\n     * local Jitsi participant without going through a Jitsi conference. It is\r\n     * currently used for room integration development, specifically wireless\r\n     * screensharing. Its API is experimental and will likely change; usage of\r\n     * it is advised against.\r\n     */\r\n    ProxyConnectionService,\r\n\r\n    constants: {\r\n        participantConnectionStatus: ParticipantConnectionStatus,\r\n        recording: recordingConstants,\r\n        sipVideoGW: VideoSIPGWConstants,\r\n        transcriptionStatus: JitsiTranscriptionStatus\r\n    },\r\n    events: {\r\n        conference: JitsiConferenceEvents,\r\n        connection: JitsiConnectionEvents,\r\n        detection: DetectionEvents,\r\n        track: JitsiTrackEvents,\r\n        mediaDevices: JitsiMediaDevicesEvents,\r\n        connectionQuality: ConnectionQualityEvents,\r\n        e2eping: E2ePingEvents\r\n    },\r\n    errors: {\r\n        conference: JitsiConferenceErrors,\r\n        connection: JitsiConnectionErrors,\r\n        track: JitsiTrackErrors\r\n    },\r\n    errorTypes: {\r\n        JitsiTrackError\r\n    },\r\n    logLevels: Logger.levels,\r\n    mediaDevices: JitsiMediaDevices,\r\n    analytics: Statistics.analytics,\r\n    init(options = {}) {\r\n        Settings.init(options.externalStorage);\r\n        Statistics.init(options);\r\n\r\n        // Configure the feature flags.\r\n        FeatureFlags.init(options.flags || { });\r\n\r\n        // Initialize global window.connectionTimes\r\n        // FIXME do not use 'window'\r\n        if (!window.connectionTimes) {\r\n            window.connectionTimes = {};\r\n        }\r\n\r\n        if (options.enableAnalyticsLogging !== true) {\r\n            logger.warn('Analytics disabled, disposing.');\r\n            this.analytics.dispose();\r\n        }\r\n\r\n        if (options.enableWindowOnErrorHandler) {\r\n            GlobalOnErrorHandler.addHandler(\r\n                this.getGlobalOnErrorHandler.bind(this));\r\n        }\r\n\r\n        // Log deployment-specific information, if available. Defined outside\r\n        // the application by individual deployments\r\n        const aprops = options.deploymentInfo;\r\n\r\n        if (aprops && Object.keys(aprops).length > 0) {\r\n            const logObject = {};\r\n\r\n            for (const attr in aprops) {\r\n                if (aprops.hasOwnProperty(attr)) {\r\n                    logObject[attr] = aprops[attr];\r\n                }\r\n            }\r\n\r\n            logObject.id = 'deployment_info';\r\n            Statistics.sendLog(JSON.stringify(logObject));\r\n        }\r\n\r\n        if (this.version) {\r\n            const logObject = {\r\n                id: 'component_version',\r\n                component: 'lib-jitsi-meet',\r\n                version: this.version\r\n            };\r\n\r\n            Statistics.sendLog(JSON.stringify(logObject));\r\n        }\r\n\r\n        return RTC.init(options);\r\n    },\r\n\r\n    /**\r\n     * Returns whether the desktop sharing is enabled or not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isDesktopSharingEnabled() {\r\n        return RTC.isDesktopSharingEnabled();\r\n    },\r\n\r\n    /**\r\n     * Returns whether the current execution environment supports WebRTC (for\r\n     * use within this library).\r\n     *\r\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\r\n     * execution environment (for use within this library); {@code false},\r\n     * otherwise.\r\n     */\r\n    isWebRtcSupported() {\r\n        return RTC.isWebRtcSupported();\r\n    },\r\n\r\n    setLogLevel(level) {\r\n        Logger.setLogLevel(level);\r\n    },\r\n\r\n    /**\r\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\r\n     *\r\n     * @param {Logger.levels} level the logging level to be set\r\n     * @param {string} id the logger id to which new logging level will be set.\r\n     * Usually it's the name of the JavaScript source file including the path\r\n     * ex. \"modules/xmpp/ChatRoom.js\"\r\n     */\r\n    setLogLevelById(level, id) {\r\n        Logger.setLogLevelById(level, id);\r\n    },\r\n\r\n    /**\r\n     * Registers new global logger transport to the library logging framework.\r\n     *\r\n     * @param globalTransport\r\n     * @see Logger.addGlobalTransport\r\n     */\r\n    addGlobalLogTransport(globalTransport) {\r\n        Logger.addGlobalTransport(globalTransport);\r\n    },\r\n\r\n    /**\r\n     * Removes global logging transport from the library logging framework.\r\n     *\r\n     * @param globalTransport\r\n     * @see Logger.removeGlobalTransport\r\n     */\r\n    removeGlobalLogTransport(globalTransport) {\r\n        Logger.removeGlobalTransport(globalTransport);\r\n    },\r\n\r\n    /**\r\n    * Sets global options which will be used by all loggers. Changing these\r\n    * works even after other loggers are created.\r\n    *\r\n    * @param options\r\n    * @see Logger.setGlobalOptions\r\n    */\r\n    setGlobalLogOptions(options) {\r\n        Logger.setGlobalOptions(options);\r\n    },\r\n\r\n    /**\r\n     * Creates the media tracks and returns them trough the callback.\r\n     *\r\n     * @param options Object with properties / settings specifying the tracks\r\n     * which should be created. should be created or some additional\r\n     * configurations about resolution for example.\r\n     * @param {Array} options.effects optional effects array for the track\r\n     * @param {Array} options.devices the devices that will be requested\r\n     * @param {string} options.resolution resolution constraints\r\n     * @param {string} options.cameraDeviceId\r\n     * @param {string} options.micDeviceId\r\n     * @param {intiger} interval - the interval (in ms) for\r\n     * checking whether the desktop sharing extension is installed or not\r\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\r\n     * createLocalTracks will wait and check on every \"interval\" ms for the\r\n     * extension. If the desktop extension is not install and checkAgain()==true\r\n     * createLocalTracks will finish with rejected Promise.\r\n     * @param {Function} listener - The listener will be called to notify the\r\n     * user of lib-jitsi-meet that createLocalTracks is starting external\r\n     * extension installation process.\r\n     * NOTE: If the inline installation process is not possible and external\r\n     * installation is enabled the listener property will be called to notify\r\n     * the start of external installation process. After that createLocalTracks\r\n     * will start to check for the extension on every interval ms until the\r\n     * plugin is installed or until checkAgain return false. If the extension\r\n     * is found createLocalTracks will try to get the desktop sharing track and\r\n     * will finish the execution. If checkAgain returns false, createLocalTracks\r\n     * will finish the execution with rejected Promise.\r\n     *\r\n     * @param {boolean} (firePermissionPromptIsShownEvent) - if event\r\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\r\n     * @param originalOptions - internal use only, to be able to store the\r\n     * originally requested options.\r\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\r\n     * that returns an array of created JitsiTracks if resolved, or a\r\n     * JitsiConferenceError if rejected.\r\n     */\r\n    createLocalTracks(\r\n            options = {}, firePermissionPromptIsShownEvent, originalOptions) {\r\n        let promiseFulfilled = false;\r\n\r\n        if (firePermissionPromptIsShownEvent === true) {\r\n            window.setTimeout(() => {\r\n                if (!promiseFulfilled) {\r\n                    JitsiMediaDevices.emitEvent(\r\n                        JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\r\n                        browser.getName());\r\n                }\r\n            }, USER_MEDIA_PERMISSION_PROMPT_TIMEOUT);\r\n        }\r\n\r\n        if (!window.connectionTimes) {\r\n            window.connectionTimes = {};\r\n        }\r\n        window.connectionTimes['obtainPermissions.start']\r\n            = window.performance.now();\r\n\r\n        return RTC.obtainAudioAndVideoPermissions(options)\r\n            .then(tracks => {\r\n                promiseFulfilled = true;\r\n\r\n                window.connectionTimes['obtainPermissions.end']\r\n                    = window.performance.now();\r\n\r\n                Statistics.sendAnalytics(\r\n                    createGetUserMediaEvent(\r\n                        'success',\r\n                        getAnalyticsAttributesFromOptions(options)));\r\n\r\n                if (!RTC.options.disableAudioLevels) {\r\n                    for (let i = 0; i < tracks.length; i++) {\r\n                        const track = tracks[i];\r\n                        const mStream = track.getOriginalStream();\r\n\r\n                        if (track.getType() === MediaType.AUDIO) {\r\n                            Statistics.startLocalStats(mStream,\r\n                                track.setAudioLevel.bind(track));\r\n                            track.addEventListener(\r\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\r\n                                () => {\r\n                                    Statistics.stopLocalStats(mStream);\r\n                                });\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // set real device ids\r\n                const currentlyAvailableMediaDevices\r\n                    = RTC.getCurrentlyAvailableMediaDevices();\r\n\r\n                if (currentlyAvailableMediaDevices) {\r\n                    for (let i = 0; i < tracks.length; i++) {\r\n                        const track = tracks[i];\r\n\r\n                        track._setRealDeviceIdFromDeviceList(\r\n                            currentlyAvailableMediaDevices);\r\n                    }\r\n                }\r\n\r\n                // set the contentHint to \"detail\" for desktop tracks\r\n                // eslint-disable-next-line prefer-const\r\n                for (const track of tracks) {\r\n                    if (track.type === MediaType.VIDEO\r\n                        && track.videoType === 'desktop') {\r\n                        this.setVideoTrackContentHints(track.track, 'detail');\r\n                    }\r\n                }\r\n\r\n                return tracks;\r\n            })\r\n            .catch(error => {\r\n                promiseFulfilled = true;\r\n                if (error.name\r\n                        === JitsiTrackErrors.SCREENSHARING_USER_CANCELED) {\r\n                    // User cancelled action is not really an error, so only\r\n                    // log it as an event to avoid having conference classified\r\n                    // as partially failed\r\n                    const logObject = {\r\n                        id: 'screensharing_user_canceled',\r\n                        message: error.message\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent(\r\n                            'warning',\r\n                            {\r\n                                reason: 'extension install user canceled'\r\n                            }));\r\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\r\n                    // logs not found devices with just application log to cs\r\n                    const logObject = {\r\n                        id: 'usermedia_missing_device',\r\n                        status: error.gum.devices\r\n                    };\r\n\r\n                    Statistics.sendLog(JSON.stringify(logObject));\r\n\r\n                    const attributes\r\n                        = getAnalyticsAttributesFromOptions(options);\r\n\r\n                    attributes.reason = 'device not found';\r\n                    attributes.devices = error.gum.devices.join('.');\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent('error', attributes));\r\n                } else {\r\n                    // Report gUM failed to the stats\r\n                    Statistics.sendGetUserMediaFailed(error);\r\n\r\n                    const attributes\r\n                        = getAnalyticsAttributesFromOptions(options);\r\n\r\n                    attributes.reason = error.name;\r\n                    Statistics.sendAnalytics(\r\n                        createGetUserMediaEvent('error', attributes));\r\n                }\r\n\r\n                window.connectionTimes['obtainPermissions.end']\r\n                    = window.performance.now();\r\n\r\n                return Promise.reject(error);\r\n            });\r\n    },\r\n\r\n    /**\r\n     * Create a TrackVADEmitter service that connects an audio track to an VAD (voice activity detection) processor in\r\n     * order to obtain VAD scores for individual PCM audio samples.\r\n     * @param {string} localAudioDeviceId - The target local audio device.\r\n     * @param {number} sampleRate - Sample rate at which the emitter will operate. Possible values  256, 512, 1024,\r\n     * 4096, 8192, 16384. Passing other values will default to closes neighbor.\r\n     * I.e. Providing a value of 4096 means that the emitter will process 4096 PCM samples at a time, higher values mean\r\n     * longer calls, lowers values mean more calls but shorter.\r\n     * @param {Object} vadProcessor - VAD Processors that does the actual compute on a PCM sample.The processor needs\r\n     * to implement the following functions:\r\n     * - <tt>getSampleLength()</tt> - Returns the sample size accepted by calculateAudioFrameVAD.\r\n     * - <tt>getRequiredPCMFrequency()</tt> - Returns the PCM frequency at which the processor operates.\r\n     * i.e. (16KHz, 44.1 KHz etc.)\r\n     * - <tt>calculateAudioFrameVAD(pcmSample)</tt> - Process a 32 float pcm sample of getSampleLength size.\r\n     * @returns {Promise<TrackVADEmitter>}\r\n     */\r\n    createTrackVADEmitter(localAudioDeviceId, sampleRate, vadProcessor) {\r\n        return TrackVADEmitter.create(localAudioDeviceId, sampleRate, vadProcessor);\r\n    },\r\n\r\n    /**\r\n     * Create AudioMixer, which is essentially a wrapper over web audio ChannelMergerNode. It essentially allows the\r\n     * user to mix multiple MediaStreams into a single one.\r\n     *\r\n     * @returns {AudioMixer}\r\n     */\r\n    createAudioMixer() {\r\n        return new AudioMixer();\r\n    },\r\n\r\n    /**\r\n     * Go through all audio devices on the system and return one that is active, i.e. has audio signal.\r\n     *\r\n     * @returns Promise<Object> - Object containing information about the found device.\r\n     */\r\n    getActiveAudioDevice() {\r\n        return getActiveAudioDevice();\r\n    },\r\n\r\n    /**\r\n     * Checks if its possible to enumerate available cameras/microphones.\r\n     *\r\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\r\n     * the WebRTC stack is ready, either with true if the device listing is\r\n     * available available or with false otherwise.\r\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\r\n     */\r\n    isDeviceListAvailable() {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\r\n\r\n        return this.mediaDevices.isDeviceListAvailable();\r\n    },\r\n\r\n    /**\r\n     * Returns true if changing the input (camera / microphone) or output\r\n     * (audio) device is supported and false if not.\r\n     *\r\n     * @param {string} [deviceType] - type of device to change. Default is\r\n     * {@code undefined} or 'input', 'output' - for audio output device change.\r\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\r\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\r\n     */\r\n    isDeviceChangeAvailable(deviceType) {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\r\n\r\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\r\n    },\r\n\r\n\r\n    /**\r\n     * Checks if the current environment supports having multiple audio\r\n     * input devices in use simultaneously.\r\n     *\r\n     * @returns {boolean} True if multiple audio input devices can be used.\r\n     */\r\n    isMultipleAudioInputSupported() {\r\n        return this.mediaDevices.isMultipleAudioInputSupported();\r\n    },\r\n\r\n    /**\r\n     * Checks if local tracks can collect stats and collection is enabled.\r\n     *\r\n     * @param {boolean} True if stats are being collected for local tracks.\r\n     */\r\n    isCollectingLocalStats() {\r\n        return Statistics.audioLevelsEnabled\r\n            && LocalStatsCollector.isLocalStatsSupported();\r\n    },\r\n\r\n    /**\r\n     * Executes callback with list of media devices connected.\r\n     *\r\n     * @param {function} callback\r\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\r\n     */\r\n    enumerateDevices(callback) {\r\n        logger.warn('This method is deprecated, use '\r\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\r\n        this.mediaDevices.enumerateDevices(callback);\r\n    },\r\n\r\n    /* eslint-disable max-params */\r\n\r\n    /**\r\n     * @returns function that can be used to be attached to window.onerror and\r\n     * if options.enableWindowOnErrorHandler is enabled returns\r\n     * the function used by the lib.\r\n     * (function(message, source, lineno, colno, error)).\r\n     */\r\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\r\n        logger.error(\r\n            `UnhandledError: ${message}`,\r\n            `Script: ${source}`,\r\n            `Line: ${lineno}`,\r\n            `Column: ${colno}`,\r\n            'StackTrace: ', error);\r\n        Statistics.reportGlobalError(error);\r\n    },\r\n\r\n    /**\r\n     * Informs lib-jitsi-meet about the current network status.\r\n     *\r\n     * @param {boolean} isOnline - {@code true} if the internet connectivity is online or {@code false}\r\n     * otherwise.\r\n     */\r\n    setNetworkInfo({ isOnline }) {\r\n        NetworkInfo.updateNetworkInfo({ isOnline });\r\n    },\r\n\r\n    /**\r\n     * Set the contentHint on the transmitted stream track to indicate\r\n     * charaterstics in the video stream, which informs PeerConnection\r\n     * on how to encode the track (to prefer motion or individual frame detail)\r\n     * @param {MediaStreamTrack} track - the track that is transmitted\r\n     * @param {String} hint - contentHint value that needs to be set on the track\r\n     */\r\n    setVideoTrackContentHints(track, hint) {\r\n        if ('contentHint' in track) {\r\n            track.contentHint = hint;\r\n            if (track.contentHint !== hint) {\r\n                logger.debug('Invalid video track contentHint');\r\n            }\r\n        } else {\r\n            logger.debug('MediaStreamTrack contentHint attribute not supported');\r\n        }\r\n    },\r\n\r\n    precallTest,\r\n\r\n    /* eslint-enable max-params */\r\n\r\n    /**\r\n     * Represents a hub/namespace for utility functionality which may be of\r\n     * interest to lib-jitsi-meet clients.\r\n     */\r\n    util: {\r\n        AuthUtil,\r\n        ScriptUtil,\r\n        browser\r\n    }\r\n});\r\n","/* Copyright @ 2016-present 8x8, Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nvar Logger = require('./Logger.js');\r\n\r\n/**\r\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\r\n * and thus can be added as global transport in order to capture all the logs.\r\n *\r\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\r\n * a message and stores them in a queue in order to batch log entries. There are\r\n * time and size limit constraints which determine how often batch entries are\r\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\r\n * will use the <tt>logStorage</tt> object given as an argument to save\r\n * the batch log entry.\r\n *\r\n * @param {Object} logStorage an object which allows to store the logs collected\r\n * @param {function(string|object[])} logStorage.storeLogs a method called when\r\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\r\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\r\n * item is an object it means that it's an aggregated message. That is a message\r\n * which is the same as the previous one and it's representation has\r\n * the following format:\r\n * {\r\n *   {string} text: 'the text of some duplicated message'\r\n *   {number} count: 3 // how many times the message appeared in a row\r\n * }\r\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\r\n * the sequence of \"A\". Which means that even if the next message \"C\" is\r\n * the same as \"A\" it will start a new aggregated message \"C\".\r\n * @param {function()} logStorage.isReady a method which should return\r\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\r\n * time storage is not ready log batches will be cached and stored on the next\r\n * occasion (flush or interval timeout).\r\n *\r\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\r\n * @param {number} options.maxEntryLength the size limit for a single log entry\r\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\r\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\r\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\r\n * storage becomes ready. Note that the \"is ready\" condition is checked every\r\n * <tt>options.storeInterval</tt> milliseconds.\r\n * @param {number} options.storeInterval how often the logs should be stored in\r\n * case <tt>maxEntryLength</tt> was not exceeded.\r\n * @param {boolean} options.stringifyObjects indicates whether or not object\r\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\r\n * message is composed. Note that objects logged on the error log level are\r\n * always stringified.\r\n *\r\n * @constructor\r\n */\r\nfunction LogCollector(logStorage, options) {\r\n    this.logStorage = logStorage;\r\n    this.stringifyObjects = options && options.stringifyObjects ? options.stringifyObjects : false;\r\n    this.storeInterval = options && options.storeInterval ? options.storeInterval: 30000;\r\n    this.maxEntryLength = options && options.maxEntryLength ? options.maxEntryLength : 10000;\r\n    // Bind the log method for each level to the corresponding method name\r\n    // in order to implement \"global log transport\" object.\r\n    Object.keys(Logger.levels).forEach(\r\n    function (logLevel) {\r\n        var methodName = Logger.levels[logLevel];\r\n        this[methodName] = function () {\r\n            this._log.apply(this, arguments);\r\n        }.bind(this, logLevel);\r\n    }.bind(this));\r\n    /**\r\n     * The ID of store logs interval if one is currently scheduled or\r\n     * <tt>null</tt> otherwise.\r\n     * @type {number|null}\r\n     */\r\n    this.storeLogsIntervalID = null;\r\n    /**\r\n     * The log messages that are to be batched into log entry when\r\n     * {@link LogCollector._flush} method is called.\r\n     * @type {string[]}\r\n     */\r\n    this.queue = [];\r\n    /**\r\n     * The total length of all messages currently stored in the {@link queue}.\r\n     * @type {number}\r\n     */\r\n    this.totalLen = 0;\r\n    /**\r\n     * An array used to temporarily store log batches, before the storage gets\r\n     * ready.\r\n     * @type {string[]}\r\n     */\r\n    this.outputCache = [];\r\n}\r\n\r\n/**\r\n * Method called inside of {@link formatLogMessage} in order to covert an\r\n * <tt>Object</tt> argument to string. The conversion will happen when either\r\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\r\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\r\n * returns \"[object with circular refs?]\" instead of an object if it fails.\r\n *\r\n * @param {object} someObject the <tt>object</tt> to be stringified.\r\n *\r\n * @return {string} the result of <tt>JSON.stringify</tt> or\r\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\r\n *\r\n * @protected\r\n */\r\nLogCollector.prototype.stringify = function (someObject) {\r\n    try {\r\n        return JSON.stringify(someObject);\r\n    } catch (error) {\r\n        return '[object with circular refs?]';\r\n    }\r\n};\r\n\r\n/**\r\n * Formats log entry for the given logging level and arguments passed to the\r\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\r\n * arguments have to be captured using JS built-in 'arguments' variable.\r\n *\r\n * @param {Logger.levels} logLevel provides the logging level of the message to\r\n * be logged.\r\n * @param {Date} timestamp - The {@code Date} when a message has been logged.\r\n *\r\n * @return {string|null} a non-empty string representation of the log entry\r\n * crafted from the log arguments. If the return value is <tt>null</tt> then\r\n * the message wil be discarded by this <tt>LogCollector</tt>.\r\n *\r\n * @protected\r\n */\r\nLogCollector.prototype.formatLogMessage = function (\r\nlogLevel /* timestamp, arg2, arg3, arg4... */) {\r\n    var msg = '';\r\n    for (var i = 1, len = arguments.length; i < len; i++) {\r\n        var arg = arguments[i];\r\n        // objects logged on error level are always converted to JSON\r\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR) &&\r\n            typeof arg === 'object') {\r\n            arg = this.stringify(arg);\r\n        }\r\n        msg += arg;\r\n        if (i !== len - 1) {\r\n            msg += ' ';\r\n        }\r\n    }\r\n    return msg.length ? msg : null;\r\n};\r\n\r\n/**\r\n * The log method bound to each of the logging levels in order to implement\r\n * \"global log transport\" object.\r\n *\r\n * @private\r\n */\r\nLogCollector.prototype._log = function() {\r\n\r\n    // var logLevel = arguments[0]; first argument is the log level\r\n    var timestamp = arguments[1];\r\n    var msg = this.formatLogMessage.apply(this, arguments);\r\n    if (msg) {\r\n        // The same as the previous message aggregation logic\r\n        var prevMessage = this.queue[this.queue.length - 1];\r\n        var prevMessageText = prevMessage && prevMessage.text;\r\n        if (prevMessageText === msg) {\r\n            prevMessage.count += 1;\r\n        } else {\r\n            this.queue.push({\r\n                text: msg,\r\n                timestamp: timestamp,\r\n                count: 1\r\n            });\r\n            this.totalLen += msg.length;\r\n        }\r\n    }\r\n\r\n    if (this.totalLen >= this.maxEntryLength) {\r\n        this._flush(true /* force */, true /* reschedule */);\r\n    }\r\n};\r\n\r\n/**\r\n * Starts periodical \"store logs\" task which will be triggered at the interval\r\n * specified in the constructor options.\r\n */\r\nLogCollector.prototype.start = function () {\r\n    this._reschedulePublishInterval();\r\n};\r\n\r\n/**\r\n * Reschedules the periodical \"store logs\" task which will store the next batch\r\n * log entry in the storage.\r\n * @private\r\n */\r\nLogCollector.prototype._reschedulePublishInterval = function () {\r\n    if (this.storeLogsIntervalID) {\r\n        window.clearTimeout(this.storeLogsIntervalID);\r\n        this.storeLogsIntervalID = null;\r\n    }\r\n    // It's actually a timeout, because it is rescheduled on every flush\r\n    this.storeLogsIntervalID = window.setTimeout(\r\n        this._flush.bind(\r\n            this, false /* do not force */, true /* reschedule */),\r\n        this.storeInterval);\r\n};\r\n\r\n/**\r\n * Call this method to flush the log entry buffer and store it in the log\r\n * storage immediately (given that the storage is ready).\r\n */\r\nLogCollector.prototype.flush = function() {\r\n    this._flush(\r\n        false /* do not force, as it will not be stored anyway */,\r\n        true /* reschedule next update */ );\r\n};\r\n\r\n/**\r\n * Stores the next batch log entry in the log storage.\r\n * @param {boolean} force enforce current logs batch to be stored or cached if\r\n * there is anything to be logged, but the storage is not ready yet. One of\r\n * legitimate reasons to force is when the logs length exceeds size limit which\r\n * could result in truncation.\r\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\r\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\r\n * task cycle.\r\n * @private\r\n */\r\nLogCollector.prototype._flush = function(force, reschedule) {\r\n    // Publish only if there's anything to be logged\r\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\r\n        //FIXME avoid truncating\r\n        // right now we don't care if the message size is \"slightly\" exceeded\r\n        if (this.logStorage.isReady()) {\r\n            // Sends all cached logs\r\n            if (this.outputCache.length) {\r\n                this.outputCache.forEach(\r\n                    function (cachedQueue) {\r\n                        this.logStorage.storeLogs(cachedQueue);\r\n                    }.bind(this)\r\n                );\r\n                // Clear the cache\r\n                this.outputCache = [];\r\n            }\r\n            // Send current batch\r\n            this.logStorage.storeLogs(this.queue);\r\n        } else {\r\n            this.outputCache.push(this.queue);\r\n        }\r\n\r\n        this.queue = [];\r\n        this.totalLen = 0;\r\n    }\r\n\r\n    if (reschedule) {\r\n        this._reschedulePublishInterval();\r\n    }\r\n};\r\n\r\n/**\r\n * Stops the periodical \"store logs\" task and immediately stores any pending\r\n * log entries as a batch.\r\n */\r\nLogCollector.prototype.stop = function() {\r\n    // Flush and stop publishing logs\r\n    this._flush(false /* do not force */, false /* do not reschedule */);\r\n};\r\n\r\nmodule.exports = LogCollector;\r\n","/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n","/*!\r\n * currentExecutingScript\r\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\r\n * Copyright (c) 2015 James M. Greene\r\n * Licensed MIT\r\n * https://github.com/JamesMGreene/currentExecutingScript\r\n * v0.1.3\r\n */\r\n(function(root, factory) {\r\n  if (typeof define === \"function\" && define.amd) {\r\n    // AMD. Register as an anonymous module.\r\n    define([], factory);\r\n  } else if (typeof exports === \"object\") {\r\n    // CommonJS-like environments that support `module.exports`,\r\n    // like Node.js. Does not work with strict CommonJS!\r\n    module.exports = factory();\r\n  } else {\r\n    // Browser globals (`root` is `window`)\r\n    root.currentExecutingScript = factory();\r\n  }\r\n}(\r\n  // Current context/scope\r\n  this || window,\r\n\r\n  // Factory function to return the export\r\n  function() {\r\n\r\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\r\n\r\n// This page's URL (minus query string and fragment identifer hash, if any)\r\nvar fullPageUrl = !!window.location ? window.location.href : null;\r\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\r\n\r\n// Live NodeList collection\r\nvar scripts = document.getElementsByTagName(\"script\");\r\n\r\n// Check if the browser supports the `readyState` property on `script` elements\r\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\r\n\r\n// Lousy browser detection for [not] Opera\r\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\r\n\r\n// Detect if `document.currentScript` is supported\r\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\r\n\r\nvar originalStackDepthConfig;\r\n// Detect if the V8 Error Stack Trace API is supported\r\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\r\n  originalStackDepthConfig = Error.stackTraceLimit;\r\n  Error.stackTraceLimit = Infinity;\r\n}\r\n\r\n\r\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\r\n// object instance without needing to throw it. Avoiding an unnecessary\r\n// use of `throw` saves time and performance.\r\nvar hasStackBeforeThrowing = false,\r\n    hasStackAfterThrowing = false;\r\n(function() {\r\n  try {\r\n    var err = new Error();\r\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\r\n    throw err;\r\n  }\r\n  catch (thrownErr) {\r\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\r\n  }\r\n})();\r\n\r\n\r\n// Normalize whitespace within a string\r\nfunction normalizeWhitespace(str) {\r\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\r\n}\r\n\r\n// Get script object based on the `src` URL\r\nfunction getScriptFromUrl(url, eligibleScripts) {\r\n  var i,\r\n      script = null;\r\n\r\n  eligibleScripts = eligibleScripts || scripts;\r\n\r\n  if (typeof url === \"string\" && url) {\r\n    for (i = eligibleScripts.length; i--; ) {\r\n      if (eligibleScripts[i].src === url) {\r\n        // NOTE: Could check if the same script URL is used by more than one `script` element\r\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\r\n        script = eligibleScripts[i];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return script;\r\n}\r\n\r\n// Get script object based on the caller function's source code body (text)\r\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\r\n  var i, inlineScriptText,\r\n      script = null,\r\n      callerSourceText = normalizeWhitespace(callerFnSource);\r\n\r\n  eligibleScripts = eligibleScripts || scripts;\r\n\r\n  if (callerFnSource && callerSourceText) {\r\n    for (i = eligibleScripts.length; i--; ) {\r\n      // Only look at inline scripts\r\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\r\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\r\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\r\n          // If more than one match is found, don't return any\r\n          if (script) {\r\n            script = null;\r\n            break;\r\n          }\r\n          script = eligibleScripts[i];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return script;\r\n}\r\n\r\n// If there is only a single inline script on the page, return it; otherwise `null`\r\nfunction getSoleInlineScript(eligibleScripts) {\r\n  var i, len,\r\n      script = null;\r\n  eligibleScripts = eligibleScripts || scripts;\r\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\r\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\r\n      if (script) {\r\n        script = null;\r\n        break;\r\n      }\r\n      script = eligibleScripts[i];\r\n    }\r\n  }\r\n  return script;\r\n}\r\n\r\n// Get the currently executing script URL from an Error stack trace\r\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\r\n  var matches, remainingStack,\r\n      url = null,\r\n      ignoreMessage = typeof skipStackDepth === \"number\";\r\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\r\n  if (typeof stack === \"string\" && stack) {\r\n    if (ignoreMessage) {\r\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\r\n    }\r\n    else {\r\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\r\n\r\n      if (!(matches && matches[1])) {\r\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\r\n      }\r\n    }\r\n\r\n    if (matches && matches[1]) {\r\n      if (skipStackDepth > 0) {\r\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\r\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\r\n      }\r\n      else {\r\n        url = matches[1];\r\n      }\r\n    }\r\n\r\n    // TODO: Handle more edge cases!\r\n    // Fixes #1\r\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\r\n\r\n    // ???\r\n\r\n  }\r\n  return url;\r\n}\r\n\r\n\r\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\r\n// element for the caller function, regardless of whether it is that `script`\r\n// DOM element is currently being evaluated for the first time. The farthest\r\n// currently executing `script` DOM element would typically be considered the\r\n// originator of the current execution stack.\r\nfunction _farthestExecutingScript() {\r\n  /*jshint noarg:false */\r\n\r\n  // TODO: Implement!\r\n  // Fixes #3\r\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\r\n  return null;\r\n\r\n/*\r\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\r\n  if (scripts.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  // Guaranteed accurate in IE 6-10.\r\n  // Not accurate/supported in any other browsers.\r\n  if (isNotOpera && supportsScriptReadyState) {\r\n    for (var i = scripts.length; i--; ) {\r\n      if (scripts[i].readyState === \"interactive\") {\r\n        return scripts[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  var stack,\r\n      e = new Error();\r\n  if (hasStackBeforeThrowing) {\r\n    stack = e.stack;\r\n  }\r\n  if (!stack && hasStackAfterThrowing) {\r\n    try {\r\n      throw e;\r\n    }\r\n    catch (err) {\r\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\r\n      stack = err.stack;\r\n    }\r\n  }\r\n  if (stack) {\r\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\r\n    var script = getScriptFromUrl(url, scripts );\r\n    if (!script && pageUrl && url === pageUrl) {\r\n      // Try to find the correct inline script by searching through\r\n      // inline scripts' text content for the caller function's source\r\n      // code to be present. If the caller function's source code is\r\n      // not available, see if there is only one inline script element\r\n      // in the DOM and return that (even though it may be wrong)\r\n\r\n      // TODO: Implement!\r\n      // Fixes #4 in part\r\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\r\n\r\n      var callerFn = _farthestExecutingScript.caller || null,\r\n          callerFnStack = [],\r\n          callerFnSource = null;\r\n\r\n      while (callerFn) {\r\n        callerFnStack.push(callerFn);\r\n        callerFn = callerFn.caller || null;\r\n      }\r\n      callerFn = callerFnStack.slice(-1)[0];\r\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\r\n\r\n\r\n      if (callerFnSource) {\r\n        script = getInlineScriptFromCallerSource(callerFnSource);\r\n      }\r\n      else {\r\n        // NOTE: This is a loose assumption that could be inaccurate!\r\n        //\r\n        // Inaccuracies:\r\n        //  - If the inline script that initiated the call was also removed from the DOM.\r\n        //  - If the call was initiated by an element's inline event handler,\r\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\r\n        script = getSoleInlineScript();\r\n      }\r\n    }\r\n    return script;\r\n  }\r\n\r\n  // NOTE: This is a loose assumption that could be inaccurate!\r\n  //\r\n  // Inaccuracies:\r\n  //  - If a script is created dynamically and appended to some position\r\n  //    other than the very end of the document.\r\n  //  - If multiple scripts are created dynamically and all appended to the\r\n  //    same position within the document (and do not have their `async` attributes\r\n  //    set to `false`, at least in browsers that support async script evaluation.\r\n  //    other than the very end of the document.\r\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\r\n  //    that supports it.\r\n  //  - May get confused by `script` elements within `svg` elements\r\n  return scripts[scripts.length - 1] || null;\r\n*/\r\n}\r\n\r\n\r\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\r\n// element or attribute node (e.g. `onclick`) for the caller function,\r\n// regardless of whether it is that `script` DOM element is currently being\r\n// evaluated for the first time. The originating currently executing `script`\r\n// DOM element [or attribute node] is the originator of the current execution stack.\r\nfunction _originatingExecutingScript() {\r\n  // TODO: Implement!\r\n  // Fixes #2\r\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\r\n  return null;\r\n}\r\n\r\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\r\n// element for the caller function, regardless of whether it is that `script`\r\n// DOM element is currently being evaluated for the first time.\r\nfunction _nearestExecutingScript() {\r\n  /*jshint noarg:false */\r\n\r\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\r\n  if (scripts.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  var i, e, stack, url, script,\r\n      eligibleScripts = [],\r\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\r\n\r\n      // TODO: Implement!\r\n      // Fixes #4 in part\r\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\r\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\r\n\r\n  // This part will only help in IE 6-10.\r\n  for (i = 0; i < scripts.length; i++) {\r\n    if (isNotOpera && supportsScriptReadyState) {\r\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\r\n        eligibleScripts.push(scripts[i]);\r\n      }\r\n    }\r\n    else {\r\n      eligibleScripts.push(scripts[i]);\r\n    }\r\n  }\r\n\r\n  e = new Error();\r\n  if (hasStackBeforeThrowing) {\r\n    stack = e.stack;\r\n  }\r\n  if (!stack && hasStackAfterThrowing) {\r\n    try {\r\n      throw e;\r\n    }\r\n    catch (err) {\r\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\r\n      stack = err.stack;\r\n    }\r\n  }\r\n\r\n  if (stack) {\r\n    url = getScriptUrlFromStack(stack, skipStackDepth);\r\n    script = getScriptFromUrl(url, eligibleScripts);\r\n\r\n    if (!script && pageUrl && url === pageUrl) {\r\n      // Try to find the correct inline script by searching through\r\n      // inline scripts' text content for the caller function's source\r\n      // code to be present.\r\n      if (callerFnSource) {\r\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\r\n      }\r\n      // If the caller function's source code is not available, see if\r\n      // there is only one inline script element in the DOM and return\r\n      // that (even though it may be wrong)...\r\n      else {\r\n        // NOTE: This is a loose assumption that could be inaccurate!\r\n        //\r\n        // Inaccuracies:\r\n        //  - If the inline script that initiated the call was also removed from the DOM.\r\n        //  - If the call was initiated by an element's inline event handler,\r\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\r\n        script = getSoleInlineScript(eligibleScripts);\r\n      }\r\n    }\r\n  }\r\n\r\n  //\r\n  // Welcome to the Island of Inaccurate Assumptions!\r\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\r\n  //\r\n\r\n  if (!script) {\r\n    // Inaccuracies:\r\n    //  - If the inline script that initiated the call was also removed from the DOM.\r\n    //  - If the call was initiated by an element's inline event handler,\r\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\r\n    if (eligibleScripts.length === 1) {\r\n      script = eligibleScripts[0];\r\n    }\r\n  }\r\n\r\n  if (!script) {\r\n    // Inaccuracies:\r\n    //  - If script currently being synchronously evaluated by the parser is the\r\n    //    originator of this call stack but NOT the source script of the caller/invocation\r\n    //    e.g.\r\n    //    ```html\r\n    //    <script id=\"a\">\r\n    //    function getCurrentScriptCallerFn() {\r\n    //      return currentExecutingScript.near();\r\n    //    }\r\n    //    </script>\r\n    //    <script id=\"b\">\r\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\r\n    //    getCurrentScriptCallerFn();\r\n    //    </script>\r\n    if (hasNativeCurrentScriptAccessor) {\r\n      script = document.currentScript;\r\n    }\r\n  }\r\n\r\n  if (!script) {\r\n    // Inaccuracies:\r\n    //  - If script currently being synchronously evaluated by the parser is the\r\n    //    originator of this call stack but NOT the source script of the caller/invocation\r\n    //    e.g.\r\n    //    ```html\r\n    //    <script id=\"a\">\r\n    //    function getCurrentScriptCallerFn() {\r\n    //      return currentExecutingScript.near();\r\n    //    }\r\n    //    </script>\r\n    //    <script id=\"b\">\r\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\r\n    //    getCurrentScriptCallerFn();\r\n    //    </script>\r\n    if (isNotOpera && supportsScriptReadyState) {\r\n      for (i = eligibleScripts.length; i--; ) {\r\n        if (eligibleScripts[i].readyState === \"interactive\") {\r\n          script = eligibleScripts[i];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!script) {\r\n    // Inaccuracies:\r\n    //  - If a script is created dynamically and appended to some position\r\n    //    other than the very end of the document.\r\n    //  - If multiple scripts are created dynamically and all appended to the\r\n    //    same position within the document (and do not have their `async` attributes\r\n    //    set to `false`, at least in browsers that support async script evaluation.\r\n    //    other than the very end of the document.\r\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\r\n    //    that supports it.\r\n    //  - May get confused by `script` elements within `svg` elements\r\n    //  - If script currently being synchronously evaluated by the parser is the\r\n    //    originator of this call stack but NOT the source script of the caller/invocation\r\n    //    e.g.\r\n    //    ```html\r\n    //    <script id=\"a\">\r\n    //    function getCurrentScriptCallerFn() {\r\n    //      return currentExecutingScript.near();\r\n    //    }\r\n    //    </script>\r\n    //    <script id=\"b\">\r\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\r\n    //    getCurrentScriptCallerFn();\r\n    //    </script>\r\n    //    ```\r\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\r\n  }\r\n\r\n  return script;\r\n}\r\n\r\n// Default stack depth to skip over when analyzing call stack frames\r\n_nearestExecutingScript.skipStackDepth = 1;\r\n\r\n\r\n\r\n    //\r\n    // Export the API\r\n    //\r\n    var currentExecutingScript    = _nearestExecutingScript;      // default\r\n    currentExecutingScript.near   = _nearestExecutingScript;\r\n    currentExecutingScript.far    = _farthestExecutingScript;\r\n    currentExecutingScript.origin = _originatingExecutingScript;\r\n\r\n\r\n    // Just return a value to define the module export.\r\n    // This example returns an object, but the module\r\n    // can return a function as the exported value.\r\n    return currentExecutingScript;\r\n  })\r\n);\r\n","const Constants = {\r\n    LOCAL_JID: 'local'\r\n};\r\n\r\nmodule.exports = Constants;\r\n","import { $iq, Strophe } from 'strophe.js';\n\nStrophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = $iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = $iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n","import { $build, Strophe } from 'strophe.js';\n\n/**\n* StropheJS - Stream Management XEP-0198\n*\n* This plugin implements stream management ACK capabilities of the specs XEP-0198.\n* Note: Resumption is not supported in this current implementation.\n*\n* Reference: http://xmpp.org/extensions/xep-0198.html\n*\n* @class streamManagement\n*/\nStrophe.addConnectionPlugin('streamManagement', {\n\n\t/**\n\t* @property {Boolean} logging: Set to true to enable logging regarding out of sync stanzas.\n\t*/\n\tlogging: false,\n\n\t/**\n\t* @property {Boolean} autoSendCountOnEveryIncomingStanza: Set to true to send an 'a' response after every stanza.\n\t* @default false\n\t* @public\n\t*/\n\tautoSendCountOnEveryIncomingStanza: false,\n\n\t/**\n\t* @property {Integer} requestResponseInterval: Set this value to send a request for counter on very interval\n\t* number of stanzas sent. Set to 0 to disable.\n\t* @default 5\n\t* @public\n\t*/\n\trequestResponseInterval: 5,\n\n\t/**\n\t* @property {Pointer} _c: Strophe connection instance.\n\t* @private\n\t*/\n\t_c: null,\n\n\t/**\n\t* @property {String} _NS XMPP Namespace.\n\t* @private\n\t*/\n\t_NS: 'urn:xmpp:sm:3',\n\n\t/**\n\t* @property {Boolean} _isStreamManagementEnabled\n\t* @private\n\t*/\n\t_isStreamManagementEnabled: false,\n\n\t/**\n\t* @property {Integer} _serverProcesssedStanzasCounter: Keeps count of stanzas confirmed processed by the server.\n\t* The server is the source of truth of this value. It is the 'h' attribute on the latest 'a' element received\n\t* from the server.\n\t* @private\n\t*/\n\t_serverProcesssedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientProcessedStanzasCounter: Counter of stanzas received by the client from the server.\n\t* Client is the source of truth of this value. It is the 'h' attribute in the 'a' sent from the client to\n\t* the server.\n\t* @private\n\t*/\n\t_clientProcessedStanzasCounter: null,\n\n\t/**\n\t* @property {Integer} _clientSentStanzasCounter\n\t* @private\n\t*/\n\t_clientSentStanzasCounter: null,\n\n\t/**\n\t* Stores a reference to Strophe connection xmlOutput function to wrap counting functionality.\n\t* @method _originalXMLOutput\n\t* @type {Handler}\n\t* @private\n\t*/\n\t_originalXMLOutput: null,\n\n\t/**\n\t* @property {Handler} _requestHandler: Stores reference to handler that process count request from server.\n\t* @private\n\t*/\n\t_requestHandler: null,\n\n\t/**\n\t* @property {Handler} _incomingHandler: Stores reference to handler that processes incoming stanzas count.\n\t* @private\n\t*/\n\t_incomingHandler: null,\n\n\t/**\n\t* @property {Integer} _requestResponseIntervalCount: Counts sent stanzas since last response request.\n\t*/\n\t_requestResponseIntervalCount: 0,\n\n\t/**\n\t * @property {boolean} _isSupported: indicates whether or not the server has advertised support for the stream\n\t * management namespace.\n\t */\n\t_isSupported: false,\n\n\t/**\n\t* @property {Queue} _unacknowledgedStanzas: Maintains a list of packet ids for stanzas which have yet to be acknowledged.\n\t*/\n\t_unacknowledgedStanzas: [],\n\n\t/**\n\t* @property {Array} _acknowledgedStanzaListeners: Stores callbacks for each stanza acknowledged by the server.\n\t* Provides the packet id of the stanza as a parameter.\n\t* @private\n\t*/\n\t_acknowledgedStanzaListeners: [],\n\n\taddAcknowledgedStanzaListener: function(listener) {\n\t\tthis._acknowledgedStanzaListeners.push(listener);\n\t},\n\n\tenable: function(resume) {\n\t\tif (!this._isSupported) {\n\t\t\tthrow new Error('The server doesn\\'t support urn:xmpp:sm:3 namespace');\n\t\t} else if (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('enable() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._c.send($build('enable', { xmlns: this._NS, resume }));\n\t\tthis._c.flush();\n\t\tthis._c.pause();\n\t},\n\n\tgetResumeToken: function() {\n\t\treturn this._resumeToken;\n\t},\n\n\tisSupported() {\n\t\treturn this._isSupported;\n\t},\n\n\tresume: function() {\n\t\tif (!this.getResumeToken()) {\n\t\t\tthrow new Error('No resume token');\n\t\t}\n\t\tif (this._connectionStatus !== Strophe.Status.DISCONNECTED) {\n\t\t\tthrow new Error('resume() can only be called in the DISCONNECTED state');\n\t\t}\n\n\t\tthis._c.options.explicitResourceBinding = true;\n\t\tthis._resuming = true;\n\n\t\tthis._originalConnect.apply(this._c, this._connectArgs);\n\t},\n\n\trequestAcknowledgement: function() {\n\t\tif (this._connectionStatus !== Strophe.Status.CONNECTED) {\n\t\t\tthrow new Error('requestAcknowledgement() can only be called in the CONNECTED state');\n\t\t}\n\t\tthis._requestResponseIntervalCount = 0;\n\t\tthis._c.send($build('r', { xmlns: this._NS }));\n\t},\n\n\tgetOutgoingCounter: function() {\n\t\treturn this._clientSentStanzasCounter;\n\t},\n\n\tgetIncomingCounter: function() {\n\t\treturn this._clientProcessedStanzasCounter;\n\t},\n\n\tinit: function(conn) {\n\t\tthis._c = conn;\n\t\tStrophe.addNamespace('SM', this._NS);\n\n\t\t// Storing original xmlOutput function to use additional logic\n\t\tthis._originalXMLOutput = this._c.xmlOutput;\n\t\tthis._c.xmlOutput = this.xmlOutput.bind(this);\n\n\t\tthis._originalConnect = this._c.connect;\n\t\tthis._c.connect = this._interceptConnectArgs.bind(this);\n\n\t\tthis._originalOnStreamFeaturesAfterSASL = this._c._onStreamFeaturesAfterSASL;\n\t\tthis._c._onStreamFeaturesAfterSASL = this._onStreamFeaturesAfterSASL.bind(this);\n\n\t\tthis._originalDoDisconnect = this._c._doDisconnect;\n\t\tthis._c._doDisconnect = this._interceptDoDisconnect.bind(this);\n\n\t\tthis._originalDisconnect = this._c.disconnect;\n\t\tthis._c.disconnect = this._interceptDisconnect.bind(this);\n\t},\n\n\t_interceptDisconnect: function() {\n\t\tthis._resumeToken = undefined;\n\t\tthis._originalDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptDoDisconnect: function() {\n\t\tif (this.getResumeToken()\n\t\t\t\t&& !this._resuming\n\t\t\t\t&& this._c.connected && !this._c.disconnecting) {\n\t\t\tthis._resumeState = {\n\t\t\t\thandlers: this._c.handlers,\n\t\t\t\ttimedHandlers: this._c.timedHandlers,\n\t\t\t\tremoveTimeds: this._c.removeTimeds,\n\t\t\t\tremoveHandlers: this._c.removeHandlers,\n\t\t\t\taddTimeds: this._c.addTimeds,\n\t\t\t\taddHandlers: this._c.addHandlers\n\t\t\t};\n\t\t\tthis._storedJid = this._c.jid;\n\n\t\t\tthis.logging && Strophe.debug('SM stored resume state, handler count: ' + this._resumeState.handlers.length);\n\t\t}\n\n\t\t// Remove any queued stanzas from the buffer that have failed to send while the socket was closed,\n\t\t// as they would interfere with the resume flow. They will be resent anyway.\n\t\tthis._c._data = [];\n\n\t\tthis._originalDoDisconnect.apply(this._c, arguments);\n\t},\n\n\t_interceptConnectArgs: function() {\n\t\tthis._connectArgs = arguments;\n\n\t\tthis._originalConnect.apply(this._c, arguments);\n\t},\n\n\t_onStreamFeaturesAfterSASL: function(elem) {\n\t\tthis._isSupported = elem.getElementsByTagNameNS(this._NS, \"sm\").length > 0;\n\n\t\treturn this._originalOnStreamFeaturesAfterSASL.apply(this._c, arguments);\n\t},\n\n\tstatusChanged: function (status) {\n\t\tthis._connectionStatus = status;\n\t\tif (!this.getResumeToken()\n\t\t\t&& (status === Strophe.Status.CONNECTED || status === Strophe.Status.DISCONNECTED)) {\n\t\t\tthis.logging && Strophe.debug('SM reset state');\n\n\t\t\tthis._serverProcesssedStanzasCounter = 0;\n\t\t\tthis._clientProcessedStanzasCounter = 0;\n\n\t\t\tthis._clientSentStanzasCounter = 0;\n\n\t\t\tthis._isStreamManagementEnabled = false;\n\t\t\tthis._requestResponseIntervalCount = 0;\n\n\t\t\t// FIXME not described in JSDocs\n\t\t\tthis._resuming = false;\n\n\t\t\tif (status === Strophe.Status.DISCONNECTED) {\n\t\t\t\tthis._isSupported = false;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas = [];\n\n\t\t\tif (this._requestHandler) {\n\t\t\t\tthis._c.deleteHandler(this._requestHandler);\n\t\t\t}\n\n\t\t\tif (this._incomingHandler) {\n\t\t\t\tthis._c.deleteHandler(this._incomingHandler);\n\t\t\t}\n\n\t\t\tthis._requestHandler = this._c.addHandler(this._handleServerRequestHandler.bind(this), this._NS, 'r');\n\t\t\tthis._ackHandler = this._c.addHandler(this._handleServerAck.bind(this), this._NS, 'a');\n\t\t\tthis._incomingHandler = this._c.addHandler(this._incomingStanzaHandler.bind(this));\n\n\t\t\t// FIXME handler instances stored, but never used\n\t\t\tthis._enabledHandler = this._c._addSysHandler(this._handleEnabled.bind(this), this._NS, 'enabled');\n\t\t\tthis._resumeFailedHandler = this._c._addSysHandler(this._handleResumeFailed.bind(this), this._NS, 'failed');\n\t\t\tthis._resumedHandler =  this._c._addSysHandler(this._handleResumed.bind(this), this._NS,'resumed');\n\n\t\t} else if (status === Strophe.Status.BINDREQUIRED)  {\n\t\t\tthis._c.jid = this._storedJid;\n\n\t\t\t// Restore Strophe handlers\n\t\t\tfor (const property in this._resumeState) {\n\t\t\t\tthis._c[property] = this._resumeState[property];\n\t\t\t}\n\n\t\t\t// FIXME check conditions if there's session ID and if enabled\n\t\t\tthis._c.send($build('resume', {\n\t\t\t\txmlns: this._NS,\n\t\t\t\th: this._clientProcessedStanzasCounter,\n\t\t\t\tprevid: this._resumeToken\n\t\t\t}));\n\t\t\tthis._c.flush();\n\t\t} else if (status === Strophe.Status.ERROR) {\n\t\t\tthis.logging && Strophe.debug('SM cleared resume token on error');\n\t\t\tthis._resumeToken = undefined;\n\t\t}\n\t},\n\n\t/**\n\t* This method overrides the send method implemented by Strophe.Connection\n\t* to count outgoing stanzas\n\t*\n\t* @method Send\n\t* @public\n\t*/\n\txmlOutput: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') ||\n\t\t\tStrophe.isTagEqual(elem, 'presence') ||\n\t\t\tStrophe.isTagEqual(elem, 'message')) {\n\t\t\tthis._increaseSentStanzasCounter(elem);\n\t\t}\n\n\t\treturn this._originalXMLOutput.call(this._c, elem);\n\t},\n\n\t_handleEnabled: function(elem) {\n\t\tthis._isStreamManagementEnabled = true;\n\t\t// FIXME fail if requested, but not enabled\n\t\tthis._resumeToken = elem.getAttribute('resume') === 'true' && elem.getAttribute('id');\n\n\t\tthis._c.resume();\n\n\t\treturn true;\n\t},\n\n\t_handleResumeFailed: function(elem) {\n\t\tconst error = elem && elem.firstElementChild && elem.firstElementChild.tagName;\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.ERROR, error, elem);\n\t\tthis._c._doDisconnect();\n\n\t\treturn true;\n\t},\n\n\t_handleResumed: function(elem) {\n\t\t// FIXME check if in the correct state\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\tthis._resuming = false;\n\t\tthis._c.do_bind = false; // No need to bind our resource anymore\n\t\tthis._c.authenticated = true;\n\t\tthis._c.restored = true;\n\n\t\tif (this._unacknowledgedStanzas.length > 0) {\n\t\t\tthis.logging && Strophe.debug('SM Sending unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t\tfor(const stanza of this._unacknowledgedStanzas) {\n\t\t\t\tthis._c.send(stanza);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.logging && Strophe.debug('SM No unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._c._changeConnectStatus(Strophe.Status.CONNECTED, null);\n\n\t\treturn true;\n\t},\n\n\t_incomingStanzaHandler: function(elem) {\n\t\tif (Strophe.isTagEqual(elem, 'iq') || Strophe.isTagEqual(elem, 'presence') || Strophe.isTagEqual(elem, 'message'))  {\n\t\t\tthis._increaseReceivedStanzasCounter();\n\n\t\t\tif (this.autoSendCountOnEveryIncomingStanza) {\n\t\t\t\tthis._answerProcessedStanzas();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t},\n\n\t_handleAcknowledgedStanzas: function(reportedHandledCount, lastKnownHandledCount) {\n\t\tvar delta = reportedHandledCount - lastKnownHandledCount;\n\n\t\tif (delta < 0) {\n\t\t\tthis._throwError('New reported stanza count lower than previous. New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tif (delta > this._unacknowledgedStanzas.length) {\n\t\t\tthis._throwError('Higher reported acknowledge count than unacknowledged stanzas. Reported Acknowledge Count: ' + delta + ' - Unacknowledge Stanza Count: ' + this._unacknowledgedStanzas.length + ' - New: ' + reportedHandledCount + ' - Previous: ' + lastKnownHandledCount);\n\t\t}\n\n\t\tfor(var i = 0; i < delta; i++) {\n\t\t\tvar stanza = this._unacknowledgedStanzas.shift();\n\t\t\tfor (var j = 0; j < this._acknowledgedStanzaListeners.length; j++) {\n\t\t\t\tthis._acknowledgedStanzaListeners[j](stanza);\n\t\t\t}\n\t\t}\n\n\t\tif (this.logging && this._unacknowledgedStanzas.length > 0) {\n\t\t\tStrophe.warn('SM Unacknowledged stanzas', this._unacknowledgedStanzas);\n\t\t}\n\n\t\tthis._serverProcesssedStanzasCounter = reportedHandledCount;\n\n\t\tif (this.requestResponseInterval > 0) {\n\t\t\tthis._requestResponseIntervalCount = 0;\n\t\t}\n\t},\n\n\t_handleServerRequestHandler: function() {\n\t\tthis._answerProcessedStanzas();\n\n\t\treturn true;\n\t},\n\n\t_handleServerAck: function(elem){\n\t\tvar handledCount = parseInt(elem.getAttribute('h'));\n\t\tthis._handleAcknowledgedStanzas(handledCount, this._serverProcesssedStanzasCounter);\n\n\t\treturn true;\n\t},\n\n\t_answerProcessedStanzas: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._c.send($build('a', { xmlns: this._NS, h: this._clientProcessedStanzasCounter }));\n\t\t}\n\t},\n\n\t_increaseSentStanzasCounter: function(elem) {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tif (this._unacknowledgedStanzas.indexOf(elem) !== -1) {\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._unacknowledgedStanzas.push(elem);\n\t\t\tthis._clientSentStanzasCounter++;\n\n\t\t\tif (this.requestResponseInterval > 0) {\n\t\t\t\tthis._requestResponseIntervalCount++;\n\n\t\t\t\tif (this._requestResponseIntervalCount === this.requestResponseInterval) {\n\t\t\t\t\t// FIXME Can not call send from onIdle.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tif (this._connectionStatus === Strophe.Status.CONNECTED) {\n\t\t\t\t\t\t\tthis.requestAcknowledgement();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t_increaseReceivedStanzasCounter: function() {\n\t\tif (this._isStreamManagementEnabled) {\n\t\t\tthis._clientProcessedStanzasCounter++;\n\t\t}\n\t},\n\n\t_throwError: function(msg) {\n\t\tStrophe.error(msg);\n\t\tthrow new Error(msg);\n\t}\n\n});\n","var scope = (typeof global !== \"undefined\" && global) ||\r\n            (typeof self !== \"undefined\" && self) ||\r\n            window;\r\nvar apply = Function.prototype.apply;\r\n\r\n// DOM APIs, for completeness\r\n\r\nexports.setTimeout = function() {\r\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\r\n};\r\nexports.setInterval = function() {\r\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\r\n};\r\nexports.clearTimeout =\r\nexports.clearInterval = function(timeout) {\r\n  if (timeout) {\r\n    timeout.close();\r\n  }\r\n};\r\n\r\nfunction Timeout(id, clearFn) {\r\n  this._id = id;\r\n  this._clearFn = clearFn;\r\n}\r\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\r\nTimeout.prototype.close = function() {\r\n  this._clearFn.call(scope, this._id);\r\n};\r\n\r\n// Does not start the time, just sets up the members needed.\r\nexports.enroll = function(item, msecs) {\r\n  clearTimeout(item._idleTimeoutId);\r\n  item._idleTimeout = msecs;\r\n};\r\n\r\nexports.unenroll = function(item) {\r\n  clearTimeout(item._idleTimeoutId);\r\n  item._idleTimeout = -1;\r\n};\r\n\r\nexports._unrefActive = exports.active = function(item) {\r\n  clearTimeout(item._idleTimeoutId);\r\n\r\n  var msecs = item._idleTimeout;\r\n  if (msecs >= 0) {\r\n    item._idleTimeoutId = setTimeout(function onTimeout() {\r\n      if (item._onTimeout)\r\n        item._onTimeout();\r\n    }, msecs);\r\n  }\r\n};\r\n\r\n// setimmediate attaches itself to the global object\r\nrequire(\"setimmediate\");\r\n// On some exotic environments, it's not clear which object `setimmediate` was\r\n// able to install onto.  Search each possibility in the same order as the\r\n// `setimmediate` library.\r\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\r\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\r\n                       (this && this.setImmediate);\r\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\r\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\r\n                         (this && this.clearImmediate);\r\n","(function (global, undefined) {\r\n    \"use strict\";\r\n\r\n    if (global.setImmediate) {\r\n        return;\r\n    }\r\n\r\n    var nextHandle = 1; // Spec says greater than zero\r\n    var tasksByHandle = {};\r\n    var currentlyRunningATask = false;\r\n    var doc = global.document;\r\n    var registerImmediate;\r\n\r\n    function setImmediate(callback) {\r\n      // Callback can either be a function or a string\r\n      if (typeof callback !== \"function\") {\r\n        callback = new Function(\"\" + callback);\r\n      }\r\n      // Copy function arguments\r\n      var args = new Array(arguments.length - 1);\r\n      for (var i = 0; i < args.length; i++) {\r\n          args[i] = arguments[i + 1];\r\n      }\r\n      // Store and register the task\r\n      var task = { callback: callback, args: args };\r\n      tasksByHandle[nextHandle] = task;\r\n      registerImmediate(nextHandle);\r\n      return nextHandle++;\r\n    }\r\n\r\n    function clearImmediate(handle) {\r\n        delete tasksByHandle[handle];\r\n    }\r\n\r\n    function run(task) {\r\n        var callback = task.callback;\r\n        var args = task.args;\r\n        switch (args.length) {\r\n        case 0:\r\n            callback();\r\n            break;\r\n        case 1:\r\n            callback(args[0]);\r\n            break;\r\n        case 2:\r\n            callback(args[0], args[1]);\r\n            break;\r\n        case 3:\r\n            callback(args[0], args[1], args[2]);\r\n            break;\r\n        default:\r\n            callback.apply(undefined, args);\r\n            break;\r\n        }\r\n    }\r\n\r\n    function runIfPresent(handle) {\r\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\r\n        // So if we're currently running a task, we'll need to delay this invocation.\r\n        if (currentlyRunningATask) {\r\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\r\n            // \"too much recursion\" error.\r\n            setTimeout(runIfPresent, 0, handle);\r\n        } else {\r\n            var task = tasksByHandle[handle];\r\n            if (task) {\r\n                currentlyRunningATask = true;\r\n                try {\r\n                    run(task);\r\n                } finally {\r\n                    clearImmediate(handle);\r\n                    currentlyRunningATask = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function installNextTickImplementation() {\r\n        registerImmediate = function(handle) {\r\n            process.nextTick(function () { runIfPresent(handle); });\r\n        };\r\n    }\r\n\r\n    function canUsePostMessage() {\r\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\r\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\r\n        if (global.postMessage && !global.importScripts) {\r\n            var postMessageIsAsynchronous = true;\r\n            var oldOnMessage = global.onmessage;\r\n            global.onmessage = function() {\r\n                postMessageIsAsynchronous = false;\r\n            };\r\n            global.postMessage(\"\", \"*\");\r\n            global.onmessage = oldOnMessage;\r\n            return postMessageIsAsynchronous;\r\n        }\r\n    }\r\n\r\n    function installPostMessageImplementation() {\r\n        // Installs an event handler on `global` for the `message` event: see\r\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\r\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\r\n\r\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\r\n        var onGlobalMessage = function(event) {\r\n            if (event.source === global &&\r\n                typeof event.data === \"string\" &&\r\n                event.data.indexOf(messagePrefix) === 0) {\r\n                runIfPresent(+event.data.slice(messagePrefix.length));\r\n            }\r\n        };\r\n\r\n        if (global.addEventListener) {\r\n            global.addEventListener(\"message\", onGlobalMessage, false);\r\n        } else {\r\n            global.attachEvent(\"onmessage\", onGlobalMessage);\r\n        }\r\n\r\n        registerImmediate = function(handle) {\r\n            global.postMessage(messagePrefix + handle, \"*\");\r\n        };\r\n    }\r\n\r\n    function installMessageChannelImplementation() {\r\n        var channel = new MessageChannel();\r\n        channel.port1.onmessage = function(event) {\r\n            var handle = event.data;\r\n            runIfPresent(handle);\r\n        };\r\n\r\n        registerImmediate = function(handle) {\r\n            channel.port2.postMessage(handle);\r\n        };\r\n    }\r\n\r\n    function installReadyStateChangeImplementation() {\r\n        var html = doc.documentElement;\r\n        registerImmediate = function(handle) {\r\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\r\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\r\n            var script = doc.createElement(\"script\");\r\n            script.onreadystatechange = function () {\r\n                runIfPresent(handle);\r\n                script.onreadystatechange = null;\r\n                html.removeChild(script);\r\n                script = null;\r\n            };\r\n            html.appendChild(script);\r\n        };\r\n    }\r\n\r\n    function installSetTimeoutImplementation() {\r\n        registerImmediate = function(handle) {\r\n            setTimeout(runIfPresent, 0, handle);\r\n        };\r\n    }\r\n\r\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\r\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\r\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\r\n\r\n    // Don't get fooled by e.g. browserify environments.\r\n    if ({}.toString.call(global.process) === \"[object process]\") {\r\n        // For Node.js before 0.9\r\n        installNextTickImplementation();\r\n\r\n    } else if (canUsePostMessage()) {\r\n        // For non-IE10 modern browsers\r\n        installPostMessageImplementation();\r\n\r\n    } else if (global.MessageChannel) {\r\n        // For web workers, where supported\r\n        installMessageChannelImplementation();\r\n\r\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\r\n        // For IE 6–8\r\n        installReadyStateChangeImplementation();\r\n\r\n    } else {\r\n        // For older browsers\r\n        installSetTimeoutImplementation();\r\n    }\r\n\r\n    attachTo.setImmediate = setImmediate;\r\n    attachTo.clearImmediate = clearImmediate;\r\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\r\n","var toIntIfInt = function (v) {\r\n  return String(Number(v)) === v ? Number(v) : v;\r\n};\r\n\r\nvar attachProperties = function (match, location, names, rawName) {\r\n  if (rawName && !names) {\r\n    location[rawName] = toIntIfInt(match[1]);\r\n  }\r\n  else {\r\n    for (var i = 0; i < names.length; i += 1) {\r\n      if (match[i+1] != null) {\r\n        location[names[i]] = toIntIfInt(match[i+1]);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nvar parseReg = function (obj, location, content) {\r\n  var needsBlank = obj.name && obj.names;\r\n  if (obj.push && !location[obj.push]) {\r\n    location[obj.push] = [];\r\n  }\r\n  else if (needsBlank && !location[obj.name]) {\r\n    location[obj.name] = {};\r\n  }\r\n  var keyLocation = obj.push ?\r\n    {} :  // blank object that will be pushed\r\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\r\n\r\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\r\n\r\n  if (obj.push) {\r\n    location[obj.push].push(keyLocation);\r\n  }\r\n};\r\n\r\nvar grammar = require('./grammar');\r\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\r\n\r\nexports.parse = function (sdp) {\r\n  var session = {}\r\n    , media = []\r\n    , location = session; // points at where properties go under (one of the above)\r\n\r\n  // parse lines we understand\r\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\r\n    var type = l[0];\r\n    var content = l.slice(2);\r\n    if (type === 'm') {\r\n      media.push({rtp: [], fmtp: []});\r\n      location = media[media.length-1]; // point at latest media line\r\n    }\r\n\r\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\r\n      var obj = grammar[type][j];\r\n      if (obj.reg.test(content)) {\r\n        return parseReg(obj, location, content);\r\n      }\r\n    }\r\n  });\r\n\r\n  session.media = media; // link it up\r\n  return session;\r\n};\r\n\r\nvar paramReducer = function (acc, expr) {\r\n  var s = expr.split(/=(.+)/, 2);\r\n  if (s.length === 2) {\r\n    acc[s[0]] = toIntIfInt(s[1]);\r\n  }\r\n  return acc;\r\n};\r\n\r\nexports.parseParams = function (str) {\r\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\r\n};\r\n\r\n// For backward compatibility - alias will be removed in 3.0.0\r\nexports.parseFmtpConfig = exports.parseParams;\r\n\r\nexports.parsePayloads = function (str) {\r\n  return str.split(' ').map(Number);\r\n};\r\n\r\nexports.parseRemoteCandidates = function (str) {\r\n  var candidates = [];\r\n  var parts = str.split(' ').map(toIntIfInt);\r\n  for (var i = 0; i < parts.length; i += 3) {\r\n    candidates.push({\r\n      component: parts[i],\r\n      ip: parts[i + 1],\r\n      port: parts[i + 2]\r\n    });\r\n  }\r\n  return candidates;\r\n};\r\n\r\nexports.parseImageAttributes = function (str) {\r\n  return str.split(' ').map(function (item) {\r\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\r\n  });\r\n};\r\n\r\nexports.parseSimulcastStreamList = function (str) {\r\n  return str.split(';').map(function (stream) {\r\n    return stream.split(',').map(function (format) {\r\n      var scid, paused = false;\r\n\r\n      if (format[0] !== '~') {\r\n        scid = toIntIfInt(format);\r\n      } else {\r\n        scid = toIntIfInt(format.substring(1, format.length));\r\n        paused = true;\r\n      }\r\n\r\n      return {\r\n        scid: scid,\r\n        paused: paused\r\n      };\r\n    });\r\n  });\r\n};\r\n","var grammar = require('./grammar');\r\n\r\n// customized util.format - discards excess arguments and can void middle ones\r\nvar formatRegExp = /%[sdv%]/g;\r\nvar format = function (formatStr) {\r\n  var i = 1;\r\n  var args = arguments;\r\n  var len = args.length;\r\n  return formatStr.replace(formatRegExp, function (x) {\r\n    if (i >= len) {\r\n      return x; // missing argument\r\n    }\r\n    var arg = args[i];\r\n    i += 1;\r\n    switch (x) {\r\n    case '%%':\r\n      return '%';\r\n    case '%s':\r\n      return String(arg);\r\n    case '%d':\r\n      return Number(arg);\r\n    case '%v':\r\n      return '';\r\n    }\r\n  });\r\n  // NB: we discard excess arguments - they are typically undefined from makeLine\r\n};\r\n\r\nvar makeLine = function (type, obj, location) {\r\n  var str = obj.format instanceof Function ?\r\n    (obj.format(obj.push ? location : location[obj.name])) :\r\n    obj.format;\r\n\r\n  var args = [type + '=' + str];\r\n  if (obj.names) {\r\n    for (var i = 0; i < obj.names.length; i += 1) {\r\n      var n = obj.names[i];\r\n      if (obj.name) {\r\n        args.push(location[obj.name][n]);\r\n      }\r\n      else { // for mLine and push attributes\r\n        args.push(location[obj.names[i]]);\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    args.push(location[obj.name]);\r\n  }\r\n  return format.apply(null, args);\r\n};\r\n\r\n// RFC specified order\r\n// TODO: extend this with all the rest\r\nvar defaultOuterOrder = [\r\n  'v', 'o', 's', 'i',\r\n  'u', 'e', 'p', 'c',\r\n  'b', 't', 'r', 'z', 'a'\r\n];\r\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\r\n\r\n\r\nmodule.exports = function (session, opts) {\r\n  opts = opts || {};\r\n  // ensure certain properties exist\r\n  if (session.version == null) {\r\n    session.version = 0; // 'v=0' must be there (only defined version atm)\r\n  }\r\n  if (session.name == null) {\r\n    session.name = ' '; // 's= ' must be there if no meaningful name set\r\n  }\r\n  session.media.forEach(function (mLine) {\r\n    if (mLine.payloads == null) {\r\n      mLine.payloads = '';\r\n    }\r\n  });\r\n\r\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\r\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\r\n  var sdp = [];\r\n\r\n  // loop through outerOrder for matching properties on session\r\n  outerOrder.forEach(function (type) {\r\n    grammar[type].forEach(function (obj) {\r\n      if (obj.name in session && session[obj.name] != null) {\r\n        sdp.push(makeLine(type, obj, session));\r\n      }\r\n      else if (obj.push in session && session[obj.push] != null) {\r\n        session[obj.push].forEach(function (el) {\r\n          sdp.push(makeLine(type, obj, el));\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  // then for each media line, follow the innerOrder\r\n  session.media.forEach(function (mLine) {\r\n    sdp.push(makeLine('m', grammar.m[0], mLine));\r\n\r\n    innerOrder.forEach(function (type) {\r\n      grammar[type].forEach(function (obj) {\r\n        if (obj.name in mLine && mLine[obj.name] != null) {\r\n          sdp.push(makeLine(type, obj, mLine));\r\n        }\r\n        else if (obj.push in mLine && mLine[obj.push] != null) {\r\n          mLine[obj.push].forEach(function (el) {\r\n            sdp.push(makeLine(type, obj, el));\r\n          });\r\n        }\r\n      });\r\n    });\r\n  });\r\n\r\n  return sdp.join('\\r\\n') + '\\r\\n';\r\n};\r\n","/* Copyright @ 2016 Atlassian Pty Ltd\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nvar transform = require('sdp-transform');\r\nvar transformUtils = require('./transform-utils');\r\nvar parseSsrcs = transformUtils.parseSsrcs;\r\nvar writeSsrcs = transformUtils.writeSsrcs;\r\n\r\n//region Constants\r\n\r\nvar DEFAULT_NUM_OF_LAYERS = 3;\r\n\r\n//endregion\r\n\r\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\r\n    return mLine\r\n        .ssrcs\r\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\r\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\r\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\r\n}\r\n\r\n//region Ctor\r\n\r\nfunction Simulcast(options) {\r\n\r\n    this.options = options ? options : {};\r\n\r\n    if (!this.options.numOfLayers) {\r\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\r\n    }\r\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\r\n\r\n    /**\r\n     * An IN-ORDER list of the simulcast ssrcs\r\n     * @type {list<number>}\r\n     */\r\n    this.ssrcCache = [];\r\n}\r\n\r\n//endregion\r\n\r\n//region Stateless private utility functions\r\n\r\n/**\r\n * Returns a random integer between min (included) and max (excluded)\r\n * Using Math.round() gives a non-uniform distribution!\r\n * @returns {number}\r\n */\r\nfunction generateSSRC() {\r\n    var min = 0, max = 0xffffffff;\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n};\r\n\r\nfunction processVideo(session, action) {\r\n    if (session == null || !Array.isArray(session.media)) {\r\n        return;\r\n    }\r\n\r\n    session.media.forEach(function (mLine) {\r\n        if (mLine.type === 'video') {\r\n            action(mLine);\r\n        }\r\n    });\r\n};\r\n\r\nfunction validateDescription(desc)\r\n{\r\n    return desc && desc != null\r\n        && desc.type && desc.type != ''\r\n        && desc.sdp && desc.sdp != '';\r\n}\r\n\r\nfunction explodeRemoteSimulcast(mLine) {\r\n\r\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\r\n        return;\r\n    }\r\n\r\n    var sources = parseSsrcs(mLine);\r\n    var order = [];\r\n\r\n    // Find the SIM group and explode its sources.\r\n    var j = mLine.ssrcGroups.length;\r\n    while (j--) {\r\n\r\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\r\n            continue;\r\n        }\r\n\r\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\r\n\r\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\r\n\r\n            var ssrc = simulcastSsrcs[i];\r\n            order.push(ssrc);\r\n\r\n            var parts = sources[ssrc].msid.split(' ');\r\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\r\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\r\n\r\n            // Remove all the groups that this SSRC participates in.\r\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\r\n                if (relatedGroup.semantics === 'SIM') {\r\n                    return;\r\n                }\r\n\r\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\r\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\r\n                    return;\r\n                }\r\n\r\n                // Nuke all the related SSRCs.\r\n                relatedSsrcs.forEach(function (relatedSSRC) {\r\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\r\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\r\n                    if (relatedSSRC !== ssrc) {\r\n                        order.push(relatedSSRC);\r\n                    }\r\n                });\r\n\r\n                // Schedule the related group for nuking.\r\n            })\r\n        }\r\n\r\n        mLine.ssrcs = writeSsrcs(sources, order);\r\n        mLine.ssrcGroups.splice(j, 1);\r\n    };\r\n}\r\n\r\nfunction implodeRemoteSimulcast(mLine) {\r\n\r\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\r\n        console.info('Halt: There are no SSRC groups in the remote ' +\r\n                'description.');\r\n        return;\r\n    }\r\n\r\n    var sources = parseSsrcs(mLine);\r\n\r\n    // Find the SIM group and nuke it.\r\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\r\n        if (simulcastGroup.semantics !== 'SIM') {\r\n            return;\r\n        }\r\n\r\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\r\n        // Schedule the SIM group for nuking.\r\n        simulcastGroup.nuke = true;\r\n\r\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\r\n\r\n        // Nuke all the higher layer SSRCs.\r\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\r\n\r\n            var ssrc = simulcastSsrcs[i];\r\n            delete sources[ssrc];\r\n\r\n            // Remove all the groups that this SSRC participates in.\r\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\r\n                if (relatedGroup.semantics === 'SIM') {\r\n                    return;\r\n                }\r\n\r\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\r\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\r\n                    return;\r\n                }\r\n\r\n                // Nuke all the related SSRCs.\r\n                relatedSsrcs.forEach(function (relatedSSRC) {\r\n                    delete sources[relatedSSRC];\r\n                });\r\n\r\n                // Schedule the related group for nuking.\r\n                relatedGroup.nuke = true;\r\n            })\r\n        }\r\n\r\n        return;\r\n    });\r\n\r\n    mLine.ssrcs = writeSsrcs(sources);\r\n\r\n    // Nuke all the scheduled groups.\r\n    var i = mLine.ssrcGroups.length;\r\n    while (i--) {\r\n        if (mLine.ssrcGroups[i].nuke) {\r\n            mLine.ssrcGroups.splice(i, 1);\r\n        }\r\n    }\r\n}\r\n\r\nfunction removeGoogConference(mLine) {\r\n    if (!mLine || typeof mLine.xGoogleFlag === 'undefined') {\r\n        return;\r\n    }\r\n\r\n    mLine.xGoogleFlag = undefined;\r\n}\r\n\r\nfunction assertGoogConference(mLine) {\r\n    if (!mLine) {\r\n        return;\r\n    }\r\n\r\n    if (!Array.isArray(mLine.invalid)) {\r\n        mLine.invalid = [];\r\n    }\r\n\r\n    if (!mLine.invalid.some(\r\n            function (i) { return i.value === 'x-google-flag:conference' })) {\r\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\r\n    }\r\n}\r\n\r\nSimulcast.prototype.clearSsrcCache = function() {\r\n    this.ssrcCache = [];\r\n}\r\n\r\n/**\r\n * When we start as video muted, all of the video\r\n *  ssrcs get generated so we can include them as part\r\n *  of the original session-accept.  That means we\r\n *  need this library to restore to those same ssrcs\r\n *  the first time we unmute, so we need the ability to\r\n *  force its cache\r\n */\r\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\r\n    this.ssrcCache = ssrcs;\r\n}\r\n\r\n//endregion\r\n\r\n//region \"Private\" functions\r\n\r\n/**\r\n * Given a video mLine, return a list of the video ssrcs\r\n *  in simulcast layer order (returns a list of just\r\n *  the primary ssrc if there are no simulcast layers)\r\n */\r\nSimulcast.prototype._parseSimLayers = function (mLine) {\r\n    var simGroup = mLine.ssrcGroups &&\r\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\r\n    if (simGroup) {\r\n        return simGroup.ssrcs\r\n            .split(\" \")\r\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\r\n    } else {\r\n        return [mLine.ssrcs[0].id];\r\n    }\r\n}\r\n\r\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\r\n    var ssrcMap = {};\r\n    for (var i = 0; i < newSsrcList.length; ++i) {\r\n        var newSsrc = newSsrcList[i];\r\n        var oldSsrc = oldSsrcList[i] || null;\r\n        ssrcMap[newSsrc] = oldSsrc;\r\n    }\r\n    return ssrcMap;\r\n}\r\n\r\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\r\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\r\n    var newSimSsrcs = this._parseSimLayers(mLine);\r\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\r\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\r\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\r\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\r\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\r\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\r\n    //  to replace directly\r\n    var ssrcsToAdd = this.ssrcCache\r\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\r\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\r\n\r\n    // First do the replacements\r\n    mLine.ssrcs.forEach(function(ssrc) {\r\n        if (ssrcsToReplace[ssrc.id]) {\r\n            ssrc.id = ssrcsToReplace[ssrc.id];\r\n        }\r\n    });\r\n    // Now the adds\r\n    ssrcsToAdd.forEach(function(ssrc) {\r\n        mLine.ssrcs.push({\r\n            id: ssrc,\r\n            attribute: \"msid\",\r\n            value: newMsid\r\n        });\r\n        mLine.ssrcs.push({\r\n            id: ssrc,\r\n            attribute: \"cname\",\r\n            value: newCname\r\n        });\r\n    });\r\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\r\n    mLine.ssrcGroups.push({\r\n        semantics: \"SIM\",\r\n        ssrcs: this.ssrcCache.join(\" \")\r\n    });\r\n    return mLine;\r\n}\r\n\r\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\r\n    var addAssociatedStream = function(mLine, ssrc) {\r\n        mLine.ssrcs.push({\r\n            id: ssrc,\r\n            attribute: \"cname\",\r\n            value: primarySsrcCname\r\n        });\r\n        mLine.ssrcs.push({\r\n            id: ssrc,\r\n            attribute: \"msid\",\r\n            value: primarySsrcMsid\r\n        });\r\n    }\r\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\r\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\r\n\r\n    // In Unified-plan mode, the a=ssrc lines with the msid attribute are not present\r\n    // in the answers that Chrome and Safari generate for an offer received from Jicofo.\r\n    // Generate these a=ssrc lines using the msid values from the a=msid line.\r\n    if (this.options.usesUnifiedPlan && !primarySsrcMsid) {\r\n        primarySsrcMsid = mLine.msid;\r\n        var primarySsrcs = mLine.ssrcs;\r\n        primarySsrcs.forEach(ssrc => {\r\n            mLine.ssrcs.push({\r\n                id: ssrc.id,\r\n                attribute: \"msid\",\r\n                value: primarySsrcMsid\r\n            });\r\n        });\r\n    }\r\n\r\n    // Generate sim layers\r\n    var simSsrcs = [];\r\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\r\n        var simSsrc = generateSSRC();\r\n        addAssociatedStream(mLine, simSsrc);\r\n        simSsrcs.push(simSsrc);\r\n    }\r\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\r\n    mLine.ssrcGroups.push({\r\n        semantics: \"SIM\",\r\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\r\n    });\r\n    return mLine;\r\n}\r\n\r\n\r\n\r\n// Assumptions:\r\n//  1) 'mLine' contains only a single primary video source\r\n//   (i.e. it will not already have simulcast streams inserted)\r\n//  2) 'mLine' MAY already contain an RTX stream for its video source\r\n//  3) 'mLine' is in sendrecv or sendonly state\r\n// Guarantees:\r\n//  1) return mLine will contain 2 additional simulcast layers\r\n//   generated\r\n//  2) if the base video ssrc in mLine has been seen before,\r\n//   then the same generated simulcast streams from before will\r\n//   be used again\r\n//  3) if rtx is enabled for the mLine, all generated simulcast\r\n//   streams will have rtx streams generated as well\r\n//  4) if rtx has been generated for a src before, we will generate\r\n//   the same rtx stream again\r\nSimulcast.prototype._restoreSimulcast = function(mLine) {\r\n    // First, find the primary video source in the given\r\n    // mLine and see if we've seen it before.\r\n    var primarySsrc;\r\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\r\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\r\n        .filter(function(ssrc, index, array) {\r\n            return array.indexOf(ssrc) === index;\r\n        })\r\n        .length || 0;\r\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\r\n\r\n    if (numSsrcs === 0 || numSsrcs > 2) {\r\n        // Unsupported scenario\r\n        return mLine;\r\n    }\r\n    if (numSsrcs == 2 && numGroups === 0) {\r\n        // Unsupported scenario\r\n        return mLine;\r\n    }\r\n\r\n    if (numSsrcs === 1) {\r\n        primarySsrc = mLine.ssrcs[0].id;\r\n    } else {\r\n        // There must be an FID group, so parse\r\n        //  that and pull the primary ssrc from there\r\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\r\n        if (fidGroup) {\r\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\r\n        } else {\r\n            // Unsupported scenario\r\n            return mLine;\r\n        }\r\n    }\r\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\r\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\r\n\r\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\r\n\r\n    if (seenPrimarySsrc) {\r\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\r\n            \"filling in data from cache\");\r\n        mLine = this._fillInSourceDataFromCache(mLine);\r\n    } else {\r\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\r\n            \"generating source data\");\r\n        mLine = this._generateSourceData(mLine, primarySsrc);\r\n    }\r\n    // Now update the cache to match whatever we've just put into this sdp\r\n    this.ssrcCache = this._parseSimLayers(mLine);\r\n    return mLine;\r\n}\r\n\r\n//endregion\r\n\r\n//region \"Public\" functions\r\n\r\n/**\r\n *\r\n * @param desc\r\n * @param enableConferenceFlag\r\n * @returns {RTCSessionDescription}\r\n */\r\nSimulcast.prototype.mungeRemoteDescription = function (desc, enableConferenceFlag) {\r\n\r\n    if (!validateDescription(desc)) {\r\n        return desc;\r\n    }\r\n\r\n    var session = transform.parse(desc.sdp);\r\n\r\n    var self = this;\r\n    processVideo(session, function (mLine) {\r\n\r\n        // Handle simulcast reception.\r\n        if (self.options.explodeRemoteSimulcast) {\r\n            explodeRemoteSimulcast(mLine);\r\n        } else {\r\n            implodeRemoteSimulcast(mLine);\r\n        }\r\n\r\n        // Add or remove \"x-google-conference\" from the remote description based on whether the client\r\n        // has enabled simulcast for the local video source. For cases where we disable simulcast for desktop share,\r\n        // it is necessary to remove the flag so that Chrome stops sending T1 temporal layers. It also fixes other\r\n        // issues related to screensharing like https://bugs.chromium.org/p/chromium/issues/detail?id=1093819.\r\n        if (!self.options.usesUnifiedPlan && enableConferenceFlag) {\r\n            assertGoogConference(mLine);\r\n        } else {\r\n            removeGoogConference(mLine);\r\n        }\r\n    });\r\n\r\n    return new RTCSessionDescription({\r\n        type: desc.type,\r\n        sdp: transform.write(session)\r\n    });\r\n};\r\n\r\n/**\r\n *\r\n * NOTE this method should be called only if simulcast is supported by\r\n * the current browser, otherwise local SDP should not be munged.\r\n * @param desc\r\n * @returns {RTCSessionDescription}\r\n */\r\nSimulcast.prototype.mungeLocalDescription = function (desc) {\r\n\r\n    if (!validateDescription(desc)) {\r\n        return desc;\r\n    }\r\n\r\n    var session = transform.parse(desc.sdp);\r\n\r\n    var self = this;\r\n    processVideo(session, function (mLine) {\r\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\r\n        {\r\n            return;\r\n        }\r\n        self._restoreSimulcast(mLine);\r\n    });\r\n\r\n    return new RTCSessionDescription({\r\n        type: desc.type,\r\n        sdp: transform.write(session)\r\n    });\r\n};\r\n\r\n//endregion\r\n\r\nmodule.exports = Simulcast;\r\n","/* Copyright @ 2015 Atlassian Pty Ltd\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * FIXME\r\n * @param sources FIXME\r\n * @param order An array of SSRCs which will be used to order the entries in\r\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\r\n * in the specified order, and all other sources will be added afterwards (in\r\n * no specific order).\r\n * @returns {Array} FIXME\r\n */\r\nexports.writeSsrcs = function(sources, order) {\r\n  var ssrcs = [];\r\n\r\n  // expand sources to ssrcs\r\n  if (typeof sources !== 'undefined' &&\r\n      Object.keys(sources).length !== 0) {\r\n\r\n    if (!Array.isArray(order)) {\r\n      order = []\r\n    }\r\n\r\n    // Add the sources that appear in 'order' first.\r\n    for (var i = 0; i < order.length; i++) {\r\n      var ssrc = order[i];\r\n      var source = sources[ssrc];\r\n      Object.keys(source).forEach(function (attribute) {\r\n        ssrcs.push({\r\n          id: ssrc,\r\n          attribute: attribute,\r\n          value: source[attribute]\r\n        });\r\n      });\r\n    }\r\n\r\n    // Now add the rest of the sources.\r\n    Object.keys(sources).forEach(function (ssrc) {\r\n      ssrc = parseInt(ssrc); // Object.keys() returns string\r\n      if (order.indexOf(ssrc) >= 0) {\r\n        // Already added.\r\n        return;\r\n      }\r\n\r\n      var source = sources[ssrc];\r\n      Object.keys(source).forEach(function (attribute) {\r\n        ssrcs.push({\r\n          id: ssrc,\r\n          attribute: attribute,\r\n          value: source[attribute]\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  return ssrcs;\r\n};\r\n\r\nexports.parseSsrcs = function (mLine) {\r\n  var sources = {};\r\n  // group sources attributes by ssrc.\r\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\r\n    mLine.ssrcs.forEach(function (ssrc) {\r\n      if (!sources[ssrc.id])\r\n        sources[ssrc.id] = {};\r\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\r\n    });\r\n  }\r\n  return sources;\r\n};\r\n\r\n","/* eslint-disable max-params */\r\n\r\n/**\r\n * This object stores variables needed around the recording of an audio stream\r\n * and passing this recording along with additional information along to\r\n * different processes\r\n * @param blob the recording audio stream as a single blob\r\n * @param name the name of the person of the audio stream\r\n * @param startTime the time in UTC when recording of the audiostream started\r\n * @param wordArray the recorder audio stream transcribed as an array of Word\r\n *                  objects\r\n */\r\nconst RecordingResult = function(blob, name, startTime, wordArray) {\r\n    this.blob = blob;\r\n    this.name = name;\r\n    this.startTime = startTime;\r\n    this.wordArray = wordArray;\r\n};\r\n\r\n/* eslint-enable max-params */\r\n\r\nmodule.exports = RecordingResult;\r\n","/* global config */\r\n\r\nconst Word = require('../word');\r\n\r\nconst audioRecorder = require('./../audioRecorder');\r\nconst TranscriptionService = require('./AbstractTranscriptionService');\r\n\r\n/**\r\n * Implements a TranscriptionService for a Sphinx4 http server\r\n */\r\nconst SphinxService = function() {\r\n    // set the correct url\r\n    this.url = getURL();\r\n};\r\n\r\n/**\r\n * Subclass of AbstractTranscriptionService\r\n */\r\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\r\n\r\n/**\r\n * Set the right constructor\r\n */\r\nSphinxService.constructor = SphinxService;\r\n\r\n/**\r\n * Overrides the sendRequest method from AbstractTranscriptionService\r\n * it will send the audio stream the a Sphinx4 server to get the transcription\r\n *\r\n * @param audioFileBlob the recorder audio stream an a single Blob\r\n * @param callback the callback function retrieving the server response\r\n */\r\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\r\n    console.log(`sending an audio file  to ${this.url}`);\r\n    console.log(`the audio file being sent: ${audioFileBlob}`);\r\n    const request = new XMLHttpRequest();\r\n\r\n    request.onreadystatechange = function() {\r\n        if (request.readyState === XMLHttpRequest.DONE\r\n            && request.status === 200) {\r\n            callback(request.responseText);\r\n        } else if (request.readyState === XMLHttpRequest.DONE) {\r\n            throw new Error(\r\n                `unable to accept response from sphinx server. status: ${\r\n                    request.status}`);\r\n        }\r\n\r\n        // if not ready no point to throw an error\r\n    };\r\n    request.open('POST', this.url);\r\n    request.setRequestHeader('Content-Type',\r\n        audioRecorder.determineCorrectFileType());\r\n    request.send(audioFileBlob);\r\n    console.log(`send ${audioFileBlob}`);\r\n};\r\n\r\n/**\r\n * Overrides the formatResponse method from AbstractTranscriptionService\r\n * It will parse the answer from the server in the expected format\r\n *\r\n * @param response the JSON body retrieved from the Sphinx4 server\r\n */\r\nSphinxService.prototype.formatResponse = function(response) {\r\n    const result = JSON.parse(response).objects;\r\n\r\n    // make sure to delete the session id object, which is always\r\n    // the first value in the JSON array\r\n\r\n    result.shift();\r\n    const array = [];\r\n\r\n    result.forEach(\r\n        word =>\r\n            word.filler\r\n                || array.push(new Word(word.word, word.start, word.end)));\r\n\r\n    return array;\r\n};\r\n\r\n/**\r\n * checks wether the reply is empty, or doesn't contain a correct JSON object\r\n * @param response the server response\r\n * @return {boolean} whether the response is valid\r\n */\r\nSphinxService.prototype.verify = function(response) {\r\n    console.log(`response from server:${response.toString()}`);\r\n\r\n    // test if server responded with a string object\r\n    if (typeof response !== 'string') {\r\n        return false;\r\n    }\r\n\r\n    // test if the string can be parsed into valid JSON\r\n    let json;\r\n\r\n    try {\r\n        json = JSON.parse(response);\r\n    } catch (error) {\r\n        console.log(error);\r\n\r\n        return false;\r\n    }\r\n\r\n    // check if the JSON has a \"objects\" value\r\n    if (json.objects === undefined) {\r\n        return false;\r\n    }\r\n\r\n    // get the \"objects\" value and check for a session ID\r\n    const array = json.objects;\r\n\r\n    if (!(array[0] && array[0]['session-id'])) {\r\n        return false;\r\n    }\r\n\r\n    // everything seems to be in order\r\n    return true;\r\n};\r\n\r\n/**\r\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\r\n * it will throw an error\r\n *\r\n * @returns {string} the URL to the sphinx4 server\r\n */\r\nfunction getURL() {\r\n    const message = 'config does not contain an url to a Sphinx4 https server';\r\n\r\n    if (config.sphinxURL === undefined) {\r\n        console.log(message);\r\n    } else {\r\n        const toReturn = config.sphinxURL;\r\n\r\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\r\n            return toReturn;\r\n        }\r\n        console.log(message);\r\n\r\n    }\r\n}\r\n\r\nmodule.exports = SphinxService;\r\n","/**\r\n * An object representing a transcribed word, with some additional information\r\n * @param word the word\r\n * @param begin the time the word was started being uttered\r\n * @param end the time the word stopped being uttered\r\n */\r\nconst Word = function(word, begin, end) {\r\n    this.word = word;\r\n    this.begin = begin;\r\n    this.end = end;\r\n};\r\n\r\n/**\r\n * Get the string representation of the word\r\n * @returns {*} the word as a string\r\n */\r\nWord.prototype.getWord = function() {\r\n    return this.word;\r\n};\r\n\r\n/**\r\n * Get the time the word started being uttered\r\n * @returns {*} the start time as an integer\r\n */\r\nWord.prototype.getBeginTime = function() {\r\n    return this.begin;\r\n};\r\n\r\n/**\r\n * Get the time the word stopped being uttered\r\n * @returns {*} the end time as an integer\r\n */\r\nWord.prototype.getEndTime = function() {\r\n    return this.end;\r\n};\r\n\r\nmodule.exports = Word;\r\n","/**\r\n * Abstract class representing an interface to implement a speech-to-text\r\n * service on.\r\n */\r\nconst TranscriptionService = function() {\r\n    throw new Error('TranscriptionService is abstract and cannot be'\r\n        + 'created');\r\n};\r\n\r\n/**\r\n * This method can be used to send the recorder audio stream and\r\n * retrieve the answer from the transcription service from the callback\r\n *\r\n * @param {RecordingResult} recordingResult a recordingResult object which\r\n * includes the recorded audio stream as a blob\r\n * @param {Function} callback  which will retrieve the a RecordingResult with\r\n *        the answer as a WordArray\r\n */\r\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\r\n    this.sendRequest(recordingResult.blob, response => {\r\n        if (this.verify(response)) {\r\n            recordingResult.wordArray = this.formatResponse(response);\r\n        } else {\r\n            console.log('the retrieved response from the server is not valid!');\r\n            recordingResult.wordArray = [];\r\n        }\r\n        callback(recordingResult);\r\n    });\r\n};\r\n\r\n/**\r\n * Abstract method which will rend the recorder audio stream to the implemented\r\n * transcription service and will retrieve an answer, which will be\r\n * called on the given callback method\r\n *\r\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\r\n * @param {function} callback function which will retrieve the answer\r\n *                            from the service\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\r\n    throw new Error('TranscriptionService.sendRequest is abstract');\r\n};\r\n\r\n/**\r\n * Abstract method which will parse the output from the implemented\r\n * transcription service to the expected format\r\n *\r\n * The transcriber class expect an array of word objects, where each word\r\n * object is one transcribed word by the service.\r\n *\r\n * The expected output of this method is an array of word objects, in\r\n * the correct order. That is, the first object in the array is the first word\r\n * being said, and the last word in the array is the last word being said\r\n *\r\n * @param response the answer from the speech-to-text server which needs to be\r\n *                 formatted\r\n * @return {Array<Word>} an array of Word objects\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.formatResponse = function(response) {\r\n    throw new Error('TranscriptionService.format is abstract');\r\n};\r\n\r\n/**\r\n * Abstract method which will verify that the response from the server is valid\r\n *\r\n * @param response the response from the server\r\n * @return {boolean} true if response is valid, false otherwise\r\n */\r\n// eslint-disable-next-line no-unused-vars\r\nTranscriptionService.prototype.verify = function(response) {\r\n    throw new Error('TranscriptionService.verify is abstract');\r\n};\r\n\r\nmodule.exports = TranscriptionService;\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n /* eslint-env node */\r\n'use strict';\r\n\r\nlet logDisabled_ = true;\r\nlet deprecationWarnings_ = true;\r\n\r\n/**\r\n * Extract browser version out of the provided user agent string.\r\n *\r\n * @param {!string} uastring userAgent string.\r\n * @param {!string} expr Regular expression used as match criteria.\r\n * @param {!number} pos position in the version string to be returned.\r\n * @return {!number} browser version.\r\n */\r\nexport function extractVersion(uastring, expr, pos) {\r\n  const match = uastring.match(expr);\r\n  return match && match.length >= pos && parseInt(match[pos], 10);\r\n}\r\n\r\n// Wraps the peerconnection event eventNameToWrap in a function\r\n// which returns the modified event object (or false to prevent\r\n// the event).\r\nexport function wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const proto = window.RTCPeerConnection.prototype;\r\n  const nativeAddEventListener = proto.addEventListener;\r\n  proto.addEventListener = function(nativeEventName, cb) {\r\n    if (nativeEventName !== eventNameToWrap) {\r\n      return nativeAddEventListener.apply(this, arguments);\r\n    }\r\n    const wrappedCallback = (e) => {\r\n      const modifiedEvent = wrapper(e);\r\n      if (modifiedEvent) {\r\n        cb(modifiedEvent);\r\n      }\r\n    };\r\n    this._eventMap = this._eventMap || {};\r\n    this._eventMap[cb] = wrappedCallback;\r\n    return nativeAddEventListener.apply(this, [nativeEventName,\r\n      wrappedCallback]);\r\n  };\r\n\r\n  const nativeRemoveEventListener = proto.removeEventListener;\r\n  proto.removeEventListener = function(nativeEventName, cb) {\r\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\r\n        || !this._eventMap[cb]) {\r\n      return nativeRemoveEventListener.apply(this, arguments);\r\n    }\r\n    const unwrappedCb = this._eventMap[cb];\r\n    delete this._eventMap[cb];\r\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\r\n      unwrappedCb]);\r\n  };\r\n\r\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\r\n    get() {\r\n      return this['_on' + eventNameToWrap];\r\n    },\r\n    set(cb) {\r\n      if (this['_on' + eventNameToWrap]) {\r\n        this.removeEventListener(eventNameToWrap,\r\n            this['_on' + eventNameToWrap]);\r\n        delete this['_on' + eventNameToWrap];\r\n      }\r\n      if (cb) {\r\n        this.addEventListener(eventNameToWrap,\r\n            this['_on' + eventNameToWrap] = cb);\r\n      }\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n  });\r\n}\r\n\r\nexport function disableLog(bool) {\r\n  if (typeof bool !== 'boolean') {\r\n    return new Error('Argument type: ' + typeof bool +\r\n        '. Please use a boolean.');\r\n  }\r\n  logDisabled_ = bool;\r\n  return (bool) ? 'adapter.js logging disabled' :\r\n      'adapter.js logging enabled';\r\n}\r\n\r\n/**\r\n * Disable or enable deprecation warnings\r\n * @param {!boolean} bool set to true to disable warnings.\r\n */\r\nexport function disableWarnings(bool) {\r\n  if (typeof bool !== 'boolean') {\r\n    return new Error('Argument type: ' + typeof bool +\r\n        '. Please use a boolean.');\r\n  }\r\n  deprecationWarnings_ = !bool;\r\n  return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\r\n}\r\n\r\nexport function log() {\r\n  if (typeof window === 'object') {\r\n    if (logDisabled_) {\r\n      return;\r\n    }\r\n    if (typeof console !== 'undefined' && typeof console.log === 'function') {\r\n      console.log.apply(console, arguments);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Shows a deprecation warning suggesting the modern and spec-compatible API.\r\n */\r\nexport function deprecated(oldMethod, newMethod) {\r\n  if (!deprecationWarnings_) {\r\n    return;\r\n  }\r\n  console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\r\n      ' instead.');\r\n}\r\n\r\n/**\r\n * Browser detector.\r\n *\r\n * @return {object} result containing browser and version\r\n *     properties.\r\n */\r\nexport function detectBrowser(window) {\r\n  const {navigator} = window;\r\n\r\n  // Returned result object.\r\n  const result = {browser: null, version: null};\r\n\r\n  // Fail early if it's not a browser\r\n  if (typeof window === 'undefined' || !window.navigator) {\r\n    result.browser = 'Not a browser.';\r\n    return result;\r\n  }\r\n\r\n  if (navigator.mozGetUserMedia) { // Firefox.\r\n    result.browser = 'firefox';\r\n    result.version = extractVersion(navigator.userAgent,\r\n        /Firefox\\/(\\d+)\\./, 1);\r\n  } else if (navigator.webkitGetUserMedia ||\r\n      (window.isSecureContext === false && window.webkitRTCPeerConnection &&\r\n       !window.RTCIceGatherer)) {\r\n    // Chrome, Chromium, Webview, Opera.\r\n    // Version matches Chrome/WebRTC version.\r\n    // Chrome 74 removed webkitGetUserMedia on http as well so we need the\r\n    // more complicated fallback to webkitRTCPeerConnection.\r\n    result.browser = 'chrome';\r\n    result.version = extractVersion(navigator.userAgent,\r\n        /Chrom(e|ium)\\/(\\d+)\\./, 2);\r\n  } else if (navigator.mediaDevices &&\r\n      navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\r\n    result.browser = 'edge';\r\n    result.version = extractVersion(navigator.userAgent,\r\n        /Edge\\/(\\d+).(\\d+)$/, 2);\r\n  } else if (window.RTCPeerConnection &&\r\n      navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) { // Safari.\r\n    result.browser = 'safari';\r\n    result.version = extractVersion(navigator.userAgent,\r\n        /AppleWebKit\\/(\\d+)\\./, 1);\r\n    result.supportsUnifiedPlan = window.RTCRtpTransceiver &&\r\n        'currentDirection' in window.RTCRtpTransceiver.prototype;\r\n  } else { // Default fallthrough: not supported.\r\n    result.browser = 'Not a supported browser.';\r\n    return result;\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/**\r\n * Checks if something is an object.\r\n *\r\n * @param {*} val The something you want to check.\r\n * @return true if val is an object, false otherwise.\r\n */\r\nfunction isObject(val) {\r\n  return Object.prototype.toString.call(val) === '[object Object]';\r\n}\r\n\r\n/**\r\n * Remove all empty objects and undefined values\r\n * from a nested object -- an enhanced and vanilla version\r\n * of Lodash's `compact`.\r\n */\r\nexport function compactObject(data) {\r\n  if (!isObject(data)) {\r\n    return data;\r\n  }\r\n\r\n  return Object.keys(data).reduce(function(accumulator, key) {\r\n    const isObj = isObject(data[key]);\r\n    const value = isObj ? compactObject(data[key]) : data[key];\r\n    const isEmptyObject = isObj && !Object.keys(value).length;\r\n    if (value === undefined || isEmptyObject) {\r\n      return accumulator;\r\n    }\r\n    return Object.assign(accumulator, {[key]: value});\r\n  }, {});\r\n}\r\n\r\n/* iterates the stats graph recursively. */\r\nexport function walkStats(stats, base, resultSet) {\r\n  if (!base || resultSet.has(base.id)) {\r\n    return;\r\n  }\r\n  resultSet.set(base.id, base);\r\n  Object.keys(base).forEach(name => {\r\n    if (name.endsWith('Id')) {\r\n      walkStats(stats, stats.get(base[name]), resultSet);\r\n    } else if (name.endsWith('Ids')) {\r\n      base[name].forEach(id => {\r\n        walkStats(stats, stats.get(id), resultSet);\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\n/* filter getStats for a sender/receiver track. */\r\nexport function filterStats(result, track, outbound) {\r\n  const streamStatsType = outbound ? 'outbound-rtp' : 'inbound-rtp';\r\n  const filteredResult = new Map();\r\n  if (track === null) {\r\n    return filteredResult;\r\n  }\r\n  const trackStats = [];\r\n  result.forEach(value => {\r\n    if (value.type === 'track' &&\r\n        value.trackIdentifier === track.id) {\r\n      trackStats.push(value);\r\n    }\r\n  });\r\n  trackStats.forEach(trackStat => {\r\n    result.forEach(stats => {\r\n      if (stats.type === streamStatsType && stats.trackId === trackStat.id) {\r\n        walkStats(result, stats, filteredResult);\r\n      }\r\n    });\r\n  });\r\n  return filteredResult;\r\n}\r\n\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\nimport * as utils from '../utils.js';\r\nconst logging = utils.log;\r\n\r\nexport function shimGetUserMedia(window) {\r\n  const navigator = window && window.navigator;\r\n\r\n  if (!navigator.mediaDevices) {\r\n    return;\r\n  }\r\n\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  const constraintsToChrome_ = function(c) {\r\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\r\n      return c;\r\n    }\r\n    const cc = {};\r\n    Object.keys(c).forEach(key => {\r\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\r\n        return;\r\n      }\r\n      const r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\r\n      if (r.exact !== undefined && typeof r.exact === 'number') {\r\n        r.min = r.max = r.exact;\r\n      }\r\n      const oldname_ = function(prefix, name) {\r\n        if (prefix) {\r\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\r\n        }\r\n        return (name === 'deviceId') ? 'sourceId' : name;\r\n      };\r\n      if (r.ideal !== undefined) {\r\n        cc.optional = cc.optional || [];\r\n        let oc = {};\r\n        if (typeof r.ideal === 'number') {\r\n          oc[oldname_('min', key)] = r.ideal;\r\n          cc.optional.push(oc);\r\n          oc = {};\r\n          oc[oldname_('max', key)] = r.ideal;\r\n          cc.optional.push(oc);\r\n        } else {\r\n          oc[oldname_('', key)] = r.ideal;\r\n          cc.optional.push(oc);\r\n        }\r\n      }\r\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\r\n        cc.mandatory = cc.mandatory || {};\r\n        cc.mandatory[oldname_('', key)] = r.exact;\r\n      } else {\r\n        ['min', 'max'].forEach(mix => {\r\n          if (r[mix] !== undefined) {\r\n            cc.mandatory = cc.mandatory || {};\r\n            cc.mandatory[oldname_(mix, key)] = r[mix];\r\n          }\r\n        });\r\n      }\r\n    });\r\n    if (c.advanced) {\r\n      cc.optional = (cc.optional || []).concat(c.advanced);\r\n    }\r\n    return cc;\r\n  };\r\n\r\n  const shimConstraints_ = function(constraints, func) {\r\n    if (browserDetails.version >= 61) {\r\n      return func(constraints);\r\n    }\r\n    constraints = JSON.parse(JSON.stringify(constraints));\r\n    if (constraints && typeof constraints.audio === 'object') {\r\n      const remap = function(obj, a, b) {\r\n        if (a in obj && !(b in obj)) {\r\n          obj[b] = obj[a];\r\n          delete obj[a];\r\n        }\r\n      };\r\n      constraints = JSON.parse(JSON.stringify(constraints));\r\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\r\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\r\n      constraints.audio = constraintsToChrome_(constraints.audio);\r\n    }\r\n    if (constraints && typeof constraints.video === 'object') {\r\n      // Shim facingMode for mobile & surface pro.\r\n      let face = constraints.video.facingMode;\r\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\r\n      const getSupportedFacingModeLies = browserDetails.version < 66;\r\n\r\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\r\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\r\n          !(navigator.mediaDevices.getSupportedConstraints &&\r\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\r\n            !getSupportedFacingModeLies)) {\r\n        delete constraints.video.facingMode;\r\n        let matches;\r\n        if (face.exact === 'environment' || face.ideal === 'environment') {\r\n          matches = ['back', 'rear'];\r\n        } else if (face.exact === 'user' || face.ideal === 'user') {\r\n          matches = ['front'];\r\n        }\r\n        if (matches) {\r\n          // Look for matches in label, or use last cam for back (typical).\r\n          return navigator.mediaDevices.enumerateDevices()\r\n          .then(devices => {\r\n            devices = devices.filter(d => d.kind === 'videoinput');\r\n            let dev = devices.find(d => matches.some(match =>\r\n              d.label.toLowerCase().includes(match)));\r\n            if (!dev && devices.length && matches.includes('back')) {\r\n              dev = devices[devices.length - 1]; // more likely the back cam\r\n            }\r\n            if (dev) {\r\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\r\n                                                        {ideal: dev.deviceId};\r\n            }\r\n            constraints.video = constraintsToChrome_(constraints.video);\r\n            logging('chrome: ' + JSON.stringify(constraints));\r\n            return func(constraints);\r\n          });\r\n        }\r\n      }\r\n      constraints.video = constraintsToChrome_(constraints.video);\r\n    }\r\n    logging('chrome: ' + JSON.stringify(constraints));\r\n    return func(constraints);\r\n  };\r\n\r\n  const shimError_ = function(e) {\r\n    if (browserDetails.version >= 64) {\r\n      return e;\r\n    }\r\n    return {\r\n      name: {\r\n        PermissionDeniedError: 'NotAllowedError',\r\n        PermissionDismissedError: 'NotAllowedError',\r\n        InvalidStateError: 'NotAllowedError',\r\n        DevicesNotFoundError: 'NotFoundError',\r\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\r\n        TrackStartError: 'NotReadableError',\r\n        MediaDeviceFailedDueToShutdown: 'NotAllowedError',\r\n        MediaDeviceKillSwitchOn: 'NotAllowedError',\r\n        TabCaptureError: 'AbortError',\r\n        ScreenCaptureError: 'AbortError',\r\n        DeviceCaptureError: 'AbortError'\r\n      }[e.name] || e.name,\r\n      message: e.message,\r\n      constraint: e.constraint || e.constraintName,\r\n      toString() {\r\n        return this.name + (this.message && ': ') + this.message;\r\n      }\r\n    };\r\n  };\r\n\r\n  const getUserMedia_ = function(constraints, onSuccess, onError) {\r\n    shimConstraints_(constraints, c => {\r\n      navigator.webkitGetUserMedia(c, onSuccess, e => {\r\n        if (onError) {\r\n          onError(shimError_(e));\r\n        }\r\n      });\r\n    });\r\n  };\r\n  navigator.getUserMedia = getUserMedia_.bind(navigator);\r\n\r\n  // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\r\n  // function which returns a Promise, it does not accept spec-style\r\n  // constraints.\r\n  if (navigator.mediaDevices.getUserMedia) {\r\n    const origGetUserMedia = navigator.mediaDevices.getUserMedia.\r\n        bind(navigator.mediaDevices);\r\n    navigator.mediaDevices.getUserMedia = function(cs) {\r\n      return shimConstraints_(cs, c => origGetUserMedia(c).then(stream => {\r\n        if (c.audio && !stream.getAudioTracks().length ||\r\n            c.video && !stream.getVideoTracks().length) {\r\n          stream.getTracks().forEach(track => {\r\n            track.stop();\r\n          });\r\n          throw new DOMException('', 'NotFoundError');\r\n        }\r\n        return stream;\r\n      }, e => Promise.reject(shimError_(e))));\r\n    };\r\n  }\r\n}\r\n","/*\r\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\nexport function shimGetDisplayMedia(window, getSourceId) {\r\n  if (window.navigator.mediaDevices &&\r\n    'getDisplayMedia' in window.navigator.mediaDevices) {\r\n    return;\r\n  }\r\n  if (!(window.navigator.mediaDevices)) {\r\n    return;\r\n  }\r\n  // getSourceId is a function that returns a promise resolving with\r\n  // the sourceId of the screen/window/tab to be shared.\r\n  if (typeof getSourceId !== 'function') {\r\n    console.error('shimGetDisplayMedia: getSourceId argument is not ' +\r\n        'a function');\r\n    return;\r\n  }\r\n  window.navigator.mediaDevices.getDisplayMedia =\r\n    function getDisplayMedia(constraints) {\r\n      return getSourceId(constraints)\r\n        .then(sourceId => {\r\n          const widthSpecified = constraints.video && constraints.video.width;\r\n          const heightSpecified = constraints.video &&\r\n            constraints.video.height;\r\n          const frameRateSpecified = constraints.video &&\r\n            constraints.video.frameRate;\r\n          constraints.video = {\r\n            mandatory: {\r\n              chromeMediaSource: 'desktop',\r\n              chromeMediaSourceId: sourceId,\r\n              maxFrameRate: frameRateSpecified || 3\r\n            }\r\n          };\r\n          if (widthSpecified) {\r\n            constraints.video.mandatory.maxWidth = widthSpecified;\r\n          }\r\n          if (heightSpecified) {\r\n            constraints.video.mandatory.maxHeight = heightSpecified;\r\n          }\r\n          return window.navigator.mediaDevices.getUserMedia(constraints);\r\n        });\r\n    };\r\n}\r\n","\r\n/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n /* eslint-env node */\r\n'use strict';\r\nimport * as utils from '../utils.js';\r\n\r\nexport {shimGetUserMedia} from './getusermedia';\r\nexport {shimGetDisplayMedia} from './getdisplaymedia';\r\n\r\nexport function shimMediaStream(window) {\r\n  window.MediaStream = window.MediaStream || window.webkitMediaStream;\r\n}\r\n\r\nexport function shimOnTrack(window) {\r\n  if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\r\n      window.RTCPeerConnection.prototype)) {\r\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\r\n      get() {\r\n        return this._ontrack;\r\n      },\r\n      set(f) {\r\n        if (this._ontrack) {\r\n          this.removeEventListener('track', this._ontrack);\r\n        }\r\n        this.addEventListener('track', this._ontrack = f);\r\n      },\r\n      enumerable: true,\r\n      configurable: true\r\n    });\r\n    const origSetRemoteDescription =\r\n        window.RTCPeerConnection.prototype.setRemoteDescription;\r\n    window.RTCPeerConnection.prototype.setRemoteDescription =\r\n      function setRemoteDescription() {\r\n        if (!this._ontrackpoly) {\r\n          this._ontrackpoly = (e) => {\r\n            // onaddstream does not fire when a track is added to an existing\r\n            // stream. But stream.onaddtrack is implemented so we use that.\r\n            e.stream.addEventListener('addtrack', te => {\r\n              let receiver;\r\n              if (window.RTCPeerConnection.prototype.getReceivers) {\r\n                receiver = this.getReceivers()\r\n                  .find(r => r.track && r.track.id === te.track.id);\r\n              } else {\r\n                receiver = {track: te.track};\r\n              }\r\n\r\n              const event = new Event('track');\r\n              event.track = te.track;\r\n              event.receiver = receiver;\r\n              event.transceiver = {receiver};\r\n              event.streams = [e.stream];\r\n              this.dispatchEvent(event);\r\n            });\r\n            e.stream.getTracks().forEach(track => {\r\n              let receiver;\r\n              if (window.RTCPeerConnection.prototype.getReceivers) {\r\n                receiver = this.getReceivers()\r\n                  .find(r => r.track && r.track.id === track.id);\r\n              } else {\r\n                receiver = {track};\r\n              }\r\n              const event = new Event('track');\r\n              event.track = track;\r\n              event.receiver = receiver;\r\n              event.transceiver = {receiver};\r\n              event.streams = [e.stream];\r\n              this.dispatchEvent(event);\r\n            });\r\n          };\r\n          this.addEventListener('addstream', this._ontrackpoly);\r\n        }\r\n        return origSetRemoteDescription.apply(this, arguments);\r\n      };\r\n  } else {\r\n    // even if RTCRtpTransceiver is in window, it is only used and\r\n    // emitted in unified-plan. Unfortunately this means we need\r\n    // to unconditionally wrap the event.\r\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\r\n      if (!e.transceiver) {\r\n        Object.defineProperty(e, 'transceiver',\r\n          {value: {receiver: e.receiver}});\r\n      }\r\n      return e;\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimGetSendersWithDtmf(window) {\r\n  // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\r\n  if (typeof window === 'object' && window.RTCPeerConnection &&\r\n      !('getSenders' in window.RTCPeerConnection.prototype) &&\r\n      'createDTMFSender' in window.RTCPeerConnection.prototype) {\r\n    const shimSenderWithDtmf = function(pc, track) {\r\n      return {\r\n        track,\r\n        get dtmf() {\r\n          if (this._dtmf === undefined) {\r\n            if (track.kind === 'audio') {\r\n              this._dtmf = pc.createDTMFSender(track);\r\n            } else {\r\n              this._dtmf = null;\r\n            }\r\n          }\r\n          return this._dtmf;\r\n        },\r\n        _pc: pc\r\n      };\r\n    };\r\n\r\n    // augment addTrack when getSenders is not available.\r\n    if (!window.RTCPeerConnection.prototype.getSenders) {\r\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n        this._senders = this._senders || [];\r\n        return this._senders.slice(); // return a copy of the internal state.\r\n      };\r\n      const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n      window.RTCPeerConnection.prototype.addTrack =\r\n        function addTrack(track, stream) {\r\n          let sender = origAddTrack.apply(this, arguments);\r\n          if (!sender) {\r\n            sender = shimSenderWithDtmf(this, track);\r\n            this._senders.push(sender);\r\n          }\r\n          return sender;\r\n        };\r\n\r\n      const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\r\n      window.RTCPeerConnection.prototype.removeTrack =\r\n        function removeTrack(sender) {\r\n          origRemoveTrack.apply(this, arguments);\r\n          const idx = this._senders.indexOf(sender);\r\n          if (idx !== -1) {\r\n            this._senders.splice(idx, 1);\r\n          }\r\n        };\r\n    }\r\n    const origAddStream = window.RTCPeerConnection.prototype.addStream;\r\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n      this._senders = this._senders || [];\r\n      origAddStream.apply(this, [stream]);\r\n      stream.getTracks().forEach(track => {\r\n        this._senders.push(shimSenderWithDtmf(this, track));\r\n      });\r\n    };\r\n\r\n    const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\r\n    window.RTCPeerConnection.prototype.removeStream =\r\n      function removeStream(stream) {\r\n        this._senders = this._senders || [];\r\n        origRemoveStream.apply(this, [stream]);\r\n\r\n        stream.getTracks().forEach(track => {\r\n          const sender = this._senders.find(s => s.track === track);\r\n          if (sender) { // remove sender\r\n            this._senders.splice(this._senders.indexOf(sender), 1);\r\n          }\r\n        });\r\n      };\r\n  } else if (typeof window === 'object' && window.RTCPeerConnection &&\r\n             'getSenders' in window.RTCPeerConnection.prototype &&\r\n             'createDTMFSender' in window.RTCPeerConnection.prototype &&\r\n             window.RTCRtpSender &&\r\n             !('dtmf' in window.RTCRtpSender.prototype)) {\r\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\r\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n      const senders = origGetSenders.apply(this, []);\r\n      senders.forEach(sender => sender._pc = this);\r\n      return senders;\r\n    };\r\n\r\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\r\n      get() {\r\n        if (this._dtmf === undefined) {\r\n          if (this.track.kind === 'audio') {\r\n            this._dtmf = this._pc.createDTMFSender(this.track);\r\n          } else {\r\n            this._dtmf = null;\r\n          }\r\n        }\r\n        return this._dtmf;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimGetStats(window) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n\r\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\r\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\r\n    const [selector, onSucc, onErr] = arguments;\r\n\r\n    // If selector is a function then we are in the old style stats so just\r\n    // pass back the original getStats format to avoid breaking old users.\r\n    if (arguments.length > 0 && typeof selector === 'function') {\r\n      return origGetStats.apply(this, arguments);\r\n    }\r\n\r\n    // When spec-style getStats is supported, return those when called with\r\n    // either no arguments or the selector argument is null.\r\n    if (origGetStats.length === 0 && (arguments.length === 0 ||\r\n        typeof selector !== 'function')) {\r\n      return origGetStats.apply(this, []);\r\n    }\r\n\r\n    const fixChromeStats_ = function(response) {\r\n      const standardReport = {};\r\n      const reports = response.result();\r\n      reports.forEach(report => {\r\n        const standardStats = {\r\n          id: report.id,\r\n          timestamp: report.timestamp,\r\n          type: {\r\n            localcandidate: 'local-candidate',\r\n            remotecandidate: 'remote-candidate'\r\n          }[report.type] || report.type\r\n        };\r\n        report.names().forEach(name => {\r\n          standardStats[name] = report.stat(name);\r\n        });\r\n        standardReport[standardStats.id] = standardStats;\r\n      });\r\n\r\n      return standardReport;\r\n    };\r\n\r\n    // shim getStats with maplike support\r\n    const makeMapStats = function(stats) {\r\n      return new Map(Object.keys(stats).map(key => [key, stats[key]]));\r\n    };\r\n\r\n    if (arguments.length >= 2) {\r\n      const successCallbackWrapper_ = function(response) {\r\n        onSucc(makeMapStats(fixChromeStats_(response)));\r\n      };\r\n\r\n      return origGetStats.apply(this, [successCallbackWrapper_,\r\n        selector]);\r\n    }\r\n\r\n    // promise-support\r\n    return new Promise((resolve, reject) => {\r\n      origGetStats.apply(this, [\r\n        function(response) {\r\n          resolve(makeMapStats(fixChromeStats_(response)));\r\n        }, reject]);\r\n    }).then(onSucc, onErr);\r\n  };\r\n}\r\n\r\nexport function shimSenderReceiverGetStats(window) {\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\r\n      window.RTCRtpSender && window.RTCRtpReceiver)) {\r\n    return;\r\n  }\r\n\r\n  // shim sender stats.\r\n  if (!('getStats' in window.RTCRtpSender.prototype)) {\r\n    const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\r\n    if (origGetSenders) {\r\n      window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n        const senders = origGetSenders.apply(this, []);\r\n        senders.forEach(sender => sender._pc = this);\r\n        return senders;\r\n      };\r\n    }\r\n\r\n    const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n    if (origAddTrack) {\r\n      window.RTCPeerConnection.prototype.addTrack = function addTrack() {\r\n        const sender = origAddTrack.apply(this, arguments);\r\n        sender._pc = this;\r\n        return sender;\r\n      };\r\n    }\r\n    window.RTCRtpSender.prototype.getStats = function getStats() {\r\n      const sender = this;\r\n      return this._pc.getStats().then(result =>\r\n        /* Note: this will include stats of all senders that\r\n         *   send a track with the same id as sender.track as\r\n         *   it is not possible to identify the RTCRtpSender.\r\n         */\r\n        utils.filterStats(result, sender.track, true));\r\n    };\r\n  }\r\n\r\n  // shim receiver stats.\r\n  if (!('getStats' in window.RTCRtpReceiver.prototype)) {\r\n    const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\r\n    if (origGetReceivers) {\r\n      window.RTCPeerConnection.prototype.getReceivers =\r\n        function getReceivers() {\r\n          const receivers = origGetReceivers.apply(this, []);\r\n          receivers.forEach(receiver => receiver._pc = this);\r\n          return receivers;\r\n        };\r\n    }\r\n    utils.wrapPeerConnectionEvent(window, 'track', e => {\r\n      e.receiver._pc = e.srcElement;\r\n      return e;\r\n    });\r\n    window.RTCRtpReceiver.prototype.getStats = function getStats() {\r\n      const receiver = this;\r\n      return this._pc.getStats().then(result =>\r\n        utils.filterStats(result, receiver.track, false));\r\n    };\r\n  }\r\n\r\n  if (!('getStats' in window.RTCRtpSender.prototype &&\r\n      'getStats' in window.RTCRtpReceiver.prototype)) {\r\n    return;\r\n  }\r\n\r\n  // shim RTCPeerConnection.getStats(track).\r\n  const origGetStats = window.RTCPeerConnection.prototype.getStats;\r\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\r\n    if (arguments.length > 0 &&\r\n        arguments[0] instanceof window.MediaStreamTrack) {\r\n      const track = arguments[0];\r\n      let sender;\r\n      let receiver;\r\n      let err;\r\n      this.getSenders().forEach(s => {\r\n        if (s.track === track) {\r\n          if (sender) {\r\n            err = true;\r\n          } else {\r\n            sender = s;\r\n          }\r\n        }\r\n      });\r\n      this.getReceivers().forEach(r => {\r\n        if (r.track === track) {\r\n          if (receiver) {\r\n            err = true;\r\n          } else {\r\n            receiver = r;\r\n          }\r\n        }\r\n        return r.track === track;\r\n      });\r\n      if (err || (sender && receiver)) {\r\n        return Promise.reject(new DOMException(\r\n          'There are more than one sender or receiver for the track.',\r\n          'InvalidAccessError'));\r\n      } else if (sender) {\r\n        return sender.getStats();\r\n      } else if (receiver) {\r\n        return receiver.getStats();\r\n      }\r\n      return Promise.reject(new DOMException(\r\n        'There is no sender or receiver for the track.',\r\n        'InvalidAccessError'));\r\n    }\r\n    return origGetStats.apply(this, arguments);\r\n  };\r\n}\r\n\r\nexport function shimAddTrackRemoveTrackWithNative(window) {\r\n  // shim addTrack/removeTrack with native variants in order to make\r\n  // the interactions with legacy getLocalStreams behave as in other browsers.\r\n  // Keeps a mapping stream.id => [stream, rtpsenders...]\r\n  window.RTCPeerConnection.prototype.getLocalStreams =\r\n    function getLocalStreams() {\r\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n      return Object.keys(this._shimmedLocalStreams)\r\n        .map(streamId => this._shimmedLocalStreams[streamId][0]);\r\n    };\r\n\r\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n  window.RTCPeerConnection.prototype.addTrack =\r\n    function addTrack(track, stream) {\r\n      if (!stream) {\r\n        return origAddTrack.apply(this, arguments);\r\n      }\r\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n\r\n      const sender = origAddTrack.apply(this, arguments);\r\n      if (!this._shimmedLocalStreams[stream.id]) {\r\n        this._shimmedLocalStreams[stream.id] = [stream, sender];\r\n      } else if (this._shimmedLocalStreams[stream.id].indexOf(sender) === -1) {\r\n        this._shimmedLocalStreams[stream.id].push(sender);\r\n      }\r\n      return sender;\r\n    };\r\n\r\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\r\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n    this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n\r\n    stream.getTracks().forEach(track => {\r\n      const alreadyExists = this.getSenders().find(s => s.track === track);\r\n      if (alreadyExists) {\r\n        throw new DOMException('Track already exists.',\r\n            'InvalidAccessError');\r\n      }\r\n    });\r\n    const existingSenders = this.getSenders();\r\n    origAddStream.apply(this, arguments);\r\n    const newSenders = this.getSenders()\r\n      .filter(newSender => existingSenders.indexOf(newSender) === -1);\r\n    this._shimmedLocalStreams[stream.id] = [stream].concat(newSenders);\r\n  };\r\n\r\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\r\n  window.RTCPeerConnection.prototype.removeStream =\r\n    function removeStream(stream) {\r\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n      delete this._shimmedLocalStreams[stream.id];\r\n      return origRemoveStream.apply(this, arguments);\r\n    };\r\n\r\n  const origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\r\n  window.RTCPeerConnection.prototype.removeTrack =\r\n    function removeTrack(sender) {\r\n      this._shimmedLocalStreams = this._shimmedLocalStreams || {};\r\n      if (sender) {\r\n        Object.keys(this._shimmedLocalStreams).forEach(streamId => {\r\n          const idx = this._shimmedLocalStreams[streamId].indexOf(sender);\r\n          if (idx !== -1) {\r\n            this._shimmedLocalStreams[streamId].splice(idx, 1);\r\n          }\r\n          if (this._shimmedLocalStreams[streamId].length === 1) {\r\n            delete this._shimmedLocalStreams[streamId];\r\n          }\r\n        });\r\n      }\r\n      return origRemoveTrack.apply(this, arguments);\r\n    };\r\n}\r\n\r\nexport function shimAddTrackRemoveTrack(window) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const browserDetails = utils.detectBrowser(window);\r\n  // shim addTrack and removeTrack.\r\n  if (window.RTCPeerConnection.prototype.addTrack &&\r\n      browserDetails.version >= 65) {\r\n    return shimAddTrackRemoveTrackWithNative(window);\r\n  }\r\n\r\n  // also shim pc.getLocalStreams when addTrack is shimmed\r\n  // to return the original streams.\r\n  const origGetLocalStreams = window.RTCPeerConnection.prototype\r\n      .getLocalStreams;\r\n  window.RTCPeerConnection.prototype.getLocalStreams =\r\n    function getLocalStreams() {\r\n      const nativeStreams = origGetLocalStreams.apply(this);\r\n      this._reverseStreams = this._reverseStreams || {};\r\n      return nativeStreams.map(stream => this._reverseStreams[stream.id]);\r\n    };\r\n\r\n  const origAddStream = window.RTCPeerConnection.prototype.addStream;\r\n  window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n    this._streams = this._streams || {};\r\n    this._reverseStreams = this._reverseStreams || {};\r\n\r\n    stream.getTracks().forEach(track => {\r\n      const alreadyExists = this.getSenders().find(s => s.track === track);\r\n      if (alreadyExists) {\r\n        throw new DOMException('Track already exists.',\r\n            'InvalidAccessError');\r\n      }\r\n    });\r\n    // Add identity mapping for consistency with addTrack.\r\n    // Unless this is being used with a stream from addTrack.\r\n    if (!this._reverseStreams[stream.id]) {\r\n      const newStream = new window.MediaStream(stream.getTracks());\r\n      this._streams[stream.id] = newStream;\r\n      this._reverseStreams[newStream.id] = stream;\r\n      stream = newStream;\r\n    }\r\n    origAddStream.apply(this, [stream]);\r\n  };\r\n\r\n  const origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\r\n  window.RTCPeerConnection.prototype.removeStream =\r\n    function removeStream(stream) {\r\n      this._streams = this._streams || {};\r\n      this._reverseStreams = this._reverseStreams || {};\r\n\r\n      origRemoveStream.apply(this, [(this._streams[stream.id] || stream)]);\r\n      delete this._reverseStreams[(this._streams[stream.id] ?\r\n          this._streams[stream.id].id : stream.id)];\r\n      delete this._streams[stream.id];\r\n    };\r\n\r\n  window.RTCPeerConnection.prototype.addTrack =\r\n    function addTrack(track, stream) {\r\n      if (this.signalingState === 'closed') {\r\n        throw new DOMException(\r\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\r\n          'InvalidStateError');\r\n      }\r\n      const streams = [].slice.call(arguments, 1);\r\n      if (streams.length !== 1 ||\r\n          !streams[0].getTracks().find(t => t === track)) {\r\n        // this is not fully correct but all we can manage without\r\n        // [[associated MediaStreams]] internal slot.\r\n        throw new DOMException(\r\n          'The adapter.js addTrack polyfill only supports a single ' +\r\n          ' stream which is associated with the specified track.',\r\n          'NotSupportedError');\r\n      }\r\n\r\n      const alreadyExists = this.getSenders().find(s => s.track === track);\r\n      if (alreadyExists) {\r\n        throw new DOMException('Track already exists.',\r\n            'InvalidAccessError');\r\n      }\r\n\r\n      this._streams = this._streams || {};\r\n      this._reverseStreams = this._reverseStreams || {};\r\n      const oldStream = this._streams[stream.id];\r\n      if (oldStream) {\r\n        // this is using odd Chrome behaviour, use with caution:\r\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\r\n        // Note: we rely on the high-level addTrack/dtmf shim to\r\n        // create the sender with a dtmf sender.\r\n        oldStream.addTrack(track);\r\n\r\n        // Trigger ONN async.\r\n        Promise.resolve().then(() => {\r\n          this.dispatchEvent(new Event('negotiationneeded'));\r\n        });\r\n      } else {\r\n        const newStream = new window.MediaStream([track]);\r\n        this._streams[stream.id] = newStream;\r\n        this._reverseStreams[newStream.id] = stream;\r\n        this.addStream(newStream);\r\n      }\r\n      return this.getSenders().find(s => s.track === track);\r\n    };\r\n\r\n  // replace the internal stream id with the external one and\r\n  // vice versa.\r\n  function replaceInternalStreamId(pc, description) {\r\n    let sdp = description.sdp;\r\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\r\n      const externalStream = pc._reverseStreams[internalId];\r\n      const internalStream = pc._streams[externalStream.id];\r\n      sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\r\n          externalStream.id);\r\n    });\r\n    return new RTCSessionDescription({\r\n      type: description.type,\r\n      sdp\r\n    });\r\n  }\r\n  function replaceExternalStreamId(pc, description) {\r\n    let sdp = description.sdp;\r\n    Object.keys(pc._reverseStreams || []).forEach(internalId => {\r\n      const externalStream = pc._reverseStreams[internalId];\r\n      const internalStream = pc._streams[externalStream.id];\r\n      sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\r\n          internalStream.id);\r\n    });\r\n    return new RTCSessionDescription({\r\n      type: description.type,\r\n      sdp\r\n    });\r\n  }\r\n  ['createOffer', 'createAnswer'].forEach(function(method) {\r\n    const nativeMethod = window.RTCPeerConnection.prototype[method];\r\n    const methodObj = {[method]() {\r\n      const args = arguments;\r\n      const isLegacyCall = arguments.length &&\r\n          typeof arguments[0] === 'function';\r\n      if (isLegacyCall) {\r\n        return nativeMethod.apply(this, [\r\n          (description) => {\r\n            const desc = replaceInternalStreamId(this, description);\r\n            args[0].apply(null, [desc]);\r\n          },\r\n          (err) => {\r\n            if (args[1]) {\r\n              args[1].apply(null, err);\r\n            }\r\n          }, arguments[2]\r\n        ]);\r\n      }\r\n      return nativeMethod.apply(this, arguments)\r\n      .then(description => replaceInternalStreamId(this, description));\r\n    }};\r\n    window.RTCPeerConnection.prototype[method] = methodObj[method];\r\n  });\r\n\r\n  const origSetLocalDescription =\r\n      window.RTCPeerConnection.prototype.setLocalDescription;\r\n  window.RTCPeerConnection.prototype.setLocalDescription =\r\n    function setLocalDescription() {\r\n      if (!arguments.length || !arguments[0].type) {\r\n        return origSetLocalDescription.apply(this, arguments);\r\n      }\r\n      arguments[0] = replaceExternalStreamId(this, arguments[0]);\r\n      return origSetLocalDescription.apply(this, arguments);\r\n    };\r\n\r\n  // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\r\n\r\n  const origLocalDescription = Object.getOwnPropertyDescriptor(\r\n      window.RTCPeerConnection.prototype, 'localDescription');\r\n  Object.defineProperty(window.RTCPeerConnection.prototype,\r\n      'localDescription', {\r\n        get() {\r\n          const description = origLocalDescription.get.apply(this);\r\n          if (description.type === '') {\r\n            return description;\r\n          }\r\n          return replaceInternalStreamId(this, description);\r\n        }\r\n      });\r\n\r\n  window.RTCPeerConnection.prototype.removeTrack =\r\n    function removeTrack(sender) {\r\n      if (this.signalingState === 'closed') {\r\n        throw new DOMException(\r\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\r\n          'InvalidStateError');\r\n      }\r\n      // We can not yet check for sender instanceof RTCRtpSender\r\n      // since we shim RTPSender. So we check if sender._pc is set.\r\n      if (!sender._pc) {\r\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\r\n            'does not implement interface RTCRtpSender.', 'TypeError');\r\n      }\r\n      const isLocal = sender._pc === this;\r\n      if (!isLocal) {\r\n        throw new DOMException('Sender was not created by this connection.',\r\n            'InvalidAccessError');\r\n      }\r\n\r\n      // Search for the native stream the senders track belongs to.\r\n      this._streams = this._streams || {};\r\n      let stream;\r\n      Object.keys(this._streams).forEach(streamid => {\r\n        const hasTrack = this._streams[streamid].getTracks()\r\n          .find(track => sender.track === track);\r\n        if (hasTrack) {\r\n          stream = this._streams[streamid];\r\n        }\r\n      });\r\n\r\n      if (stream) {\r\n        if (stream.getTracks().length === 1) {\r\n          // if this is the last track of the stream, remove the stream. This\r\n          // takes care of any shimmed _senders.\r\n          this.removeStream(this._reverseStreams[stream.id]);\r\n        } else {\r\n          // relying on the same odd chrome behaviour as above.\r\n          stream.removeTrack(sender.track);\r\n        }\r\n        this.dispatchEvent(new Event('negotiationneeded'));\r\n      }\r\n    };\r\n}\r\n\r\nexport function shimPeerConnection(window) {\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  if (!window.RTCPeerConnection && window.webkitRTCPeerConnection) {\r\n    // very basic support for old versions.\r\n    window.RTCPeerConnection = window.webkitRTCPeerConnection;\r\n  }\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n\r\n  const addIceCandidateNullSupported =\r\n    window.RTCPeerConnection.prototype.addIceCandidate.length === 0;\r\n\r\n  // shim implicit creation of RTCSessionDescription/RTCIceCandidate\r\n  if (browserDetails.version < 53) {\r\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\r\n        .forEach(function(method) {\r\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\r\n          const methodObj = {[method]() {\r\n            arguments[0] = new ((method === 'addIceCandidate') ?\r\n                window.RTCIceCandidate :\r\n                window.RTCSessionDescription)(arguments[0]);\r\n            return nativeMethod.apply(this, arguments);\r\n          }};\r\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\r\n        });\r\n  }\r\n\r\n  // support for addIceCandidate(null or undefined)\r\n  const nativeAddIceCandidate =\r\n      window.RTCPeerConnection.prototype.addIceCandidate;\r\n  window.RTCPeerConnection.prototype.addIceCandidate =\r\n    function addIceCandidate() {\r\n      if (!addIceCandidateNullSupported && !arguments[0]) {\r\n        if (arguments[1]) {\r\n          arguments[1].apply(null);\r\n        }\r\n        return Promise.resolve();\r\n      }\r\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\r\n      // in older versions. Native support planned for Chrome M77.\r\n      if (browserDetails.version < 78 &&\r\n        arguments[0] && arguments[0].candidate === '') {\r\n        return Promise.resolve();\r\n      }\r\n      return nativeAddIceCandidate.apply(this, arguments);\r\n    };\r\n}\r\n\r\nexport function fixNegotiationNeeded(window) {\r\n  utils.wrapPeerConnectionEvent(window, 'negotiationneeded', e => {\r\n    const pc = e.target;\r\n    if (pc.signalingState !== 'stable') {\r\n      return;\r\n    }\r\n    return e;\r\n  });\r\n}\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n /* eslint-env node */\r\n'use strict';\r\n\r\nexport function shimGetUserMedia(window) {\r\n  const navigator = window && window.navigator;\r\n\r\n  const shimError_ = function(e) {\r\n    return {\r\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\r\n      message: e.message,\r\n      constraint: e.constraint,\r\n      toString() {\r\n        return this.name;\r\n      }\r\n    };\r\n  };\r\n\r\n  // getUserMedia error shim.\r\n  const origGetUserMedia = navigator.mediaDevices.getUserMedia.\r\n      bind(navigator.mediaDevices);\r\n  navigator.mediaDevices.getUserMedia = function(c) {\r\n    return origGetUserMedia(c).catch(e => Promise.reject(shimError_(e)));\r\n  };\r\n}\r\n","/*\r\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n /* eslint-env node */\r\n'use strict';\r\n\r\nexport function shimGetDisplayMedia(window) {\r\n  if (!('getDisplayMedia' in window.navigator)) {\r\n    return;\r\n  }\r\n  if (!(window.navigator.mediaDevices)) {\r\n    return;\r\n  }\r\n  if (window.navigator.mediaDevices &&\r\n    'getDisplayMedia' in window.navigator.mediaDevices) {\r\n    return;\r\n  }\r\n  window.navigator.mediaDevices.getDisplayMedia =\r\n    window.navigator.getDisplayMedia.bind(window.navigator);\r\n}\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport * as utils from '../utils';\r\nimport {filterIceServers} from './filtericeservers';\r\nimport shimRTCPeerConnection from 'rtcpeerconnection-shim';\r\n\r\nexport {shimGetUserMedia} from './getusermedia';\r\nexport {shimGetDisplayMedia} from './getdisplaymedia';\r\n\r\nexport function shimPeerConnection(window) {\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  if (window.RTCIceGatherer) {\r\n    if (!window.RTCIceCandidate) {\r\n      window.RTCIceCandidate = function RTCIceCandidate(args) {\r\n        return args;\r\n      };\r\n    }\r\n    if (!window.RTCSessionDescription) {\r\n      window.RTCSessionDescription = function RTCSessionDescription(args) {\r\n        return args;\r\n      };\r\n    }\r\n    // this adds an additional event listener to MediaStrackTrack that signals\r\n    // when a tracks enabled property was changed. Workaround for a bug in\r\n    // addStream, see below. No longer required in 15025+\r\n    if (browserDetails.version < 15025) {\r\n      const origMSTEnabled = Object.getOwnPropertyDescriptor(\r\n          window.MediaStreamTrack.prototype, 'enabled');\r\n      Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\r\n        set(value) {\r\n          origMSTEnabled.set.call(this, value);\r\n          const ev = new Event('enabled');\r\n          ev.enabled = value;\r\n          this.dispatchEvent(ev);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // ORTC defines the DTMF sender a bit different.\r\n  // https://github.com/w3c/ortc/issues/714\r\n  if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\r\n    Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\r\n      get() {\r\n        if (this._dtmf === undefined) {\r\n          if (this.track.kind === 'audio') {\r\n            this._dtmf = new window.RTCDtmfSender(this);\r\n          } else if (this.track.kind === 'video') {\r\n            this._dtmf = null;\r\n          }\r\n        }\r\n        return this._dtmf;\r\n      }\r\n    });\r\n  }\r\n  // Edge currently only implements the RTCDtmfSender, not the\r\n  // RTCDTMFSender alias. See http://draft.ortc.org/#rtcdtmfsender2*\r\n  if (window.RTCDtmfSender && !window.RTCDTMFSender) {\r\n    window.RTCDTMFSender = window.RTCDtmfSender;\r\n  }\r\n\r\n  const RTCPeerConnectionShim = shimRTCPeerConnection(window,\r\n      browserDetails.version);\r\n  window.RTCPeerConnection = function RTCPeerConnection(config) {\r\n    if (config && config.iceServers) {\r\n      config.iceServers = filterIceServers(config.iceServers,\r\n        browserDetails.version);\r\n      utils.log('ICE servers after filtering:', config.iceServers);\r\n    }\r\n    return new RTCPeerConnectionShim(config);\r\n  };\r\n  window.RTCPeerConnection.prototype = RTCPeerConnectionShim.prototype;\r\n}\r\n\r\nexport function shimReplaceTrack(window) {\r\n  // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\r\n  if (window.RTCRtpSender &&\r\n      !('replaceTrack' in window.RTCRtpSender.prototype)) {\r\n    window.RTCRtpSender.prototype.replaceTrack =\r\n        window.RTCRtpSender.prototype.setTrack;\r\n  }\r\n}\r\n","/*\r\n *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport * as utils from '../utils';\r\n// Edge does not like\r\n// 1) stun: filtered after 14393 unless ?transport=udp is present\r\n// 2) turn: that does not have all of turn:host:port?transport=udp\r\n// 3) turn: with ipv6 addresses\r\n// 4) turn: occurring muliple times\r\nexport function filterIceServers(iceServers, edgeVersion) {\r\n  let hasTurn = false;\r\n  iceServers = JSON.parse(JSON.stringify(iceServers));\r\n  return iceServers.filter(server => {\r\n    if (server && (server.urls || server.url)) {\r\n      var urls = server.urls || server.url;\r\n      if (server.url && !server.urls) {\r\n        utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\r\n      }\r\n      const isString = typeof urls === 'string';\r\n      if (isString) {\r\n        urls = [urls];\r\n      }\r\n      urls = urls.filter(url => {\r\n        // filter STUN unconditionally.\r\n        if (url.indexOf('stun:') === 0) {\r\n          return false;\r\n        }\r\n\r\n        const validTurn = url.startsWith('turn') &&\r\n            !url.startsWith('turn:[') &&\r\n            url.includes('transport=udp');\r\n        if (validTurn && !hasTurn) {\r\n          hasTurn = true;\r\n          return true;\r\n        }\r\n        return validTurn && !hasTurn;\r\n      });\r\n\r\n      delete server.url;\r\n      server.urls = isString ? urls[0] : urls;\r\n      return !!urls.length;\r\n    }\r\n  });\r\n}\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport * as utils from '../utils';\r\n\r\nexport function shimGetUserMedia(window) {\r\n  const browserDetails = utils.detectBrowser(window);\r\n  const navigator = window && window.navigator;\r\n  const MediaStreamTrack = window && window.MediaStreamTrack;\r\n\r\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\r\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\r\n    utils.deprecated('navigator.getUserMedia',\r\n        'navigator.mediaDevices.getUserMedia');\r\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\r\n  };\r\n\r\n  if (!(browserDetails.version > 55 &&\r\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\r\n    const remap = function(obj, a, b) {\r\n      if (a in obj && !(b in obj)) {\r\n        obj[b] = obj[a];\r\n        delete obj[a];\r\n      }\r\n    };\r\n\r\n    const nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\r\n        bind(navigator.mediaDevices);\r\n    navigator.mediaDevices.getUserMedia = function(c) {\r\n      if (typeof c === 'object' && typeof c.audio === 'object') {\r\n        c = JSON.parse(JSON.stringify(c));\r\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\r\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\r\n      }\r\n      return nativeGetUserMedia(c);\r\n    };\r\n\r\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\r\n      const nativeGetSettings = MediaStreamTrack.prototype.getSettings;\r\n      MediaStreamTrack.prototype.getSettings = function() {\r\n        const obj = nativeGetSettings.apply(this, arguments);\r\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\r\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\r\n        return obj;\r\n      };\r\n    }\r\n\r\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\r\n      const nativeApplyConstraints =\r\n        MediaStreamTrack.prototype.applyConstraints;\r\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\r\n        if (this.kind === 'audio' && typeof c === 'object') {\r\n          c = JSON.parse(JSON.stringify(c));\r\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\r\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\r\n        }\r\n        return nativeApplyConstraints.apply(this, [c]);\r\n      };\r\n    }\r\n  }\r\n}\r\n","/*\r\n *  Copyright (c) 2018 The adapter.js project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nexport function shimGetDisplayMedia(window, preferredMediaSource) {\r\n  if (window.navigator.mediaDevices &&\r\n    'getDisplayMedia' in window.navigator.mediaDevices) {\r\n    return;\r\n  }\r\n  if (!(window.navigator.mediaDevices)) {\r\n    return;\r\n  }\r\n  window.navigator.mediaDevices.getDisplayMedia =\r\n    function getDisplayMedia(constraints) {\r\n      if (!(constraints && constraints.video)) {\r\n        const err = new DOMException('getDisplayMedia without video ' +\r\n            'constraints is undefined');\r\n        err.name = 'NotFoundError';\r\n        // from https://heycam.github.io/webidl/#idl-DOMException-error-names\r\n        err.code = 8;\r\n        return Promise.reject(err);\r\n      }\r\n      if (constraints.video === true) {\r\n        constraints.video = {mediaSource: preferredMediaSource};\r\n      } else {\r\n        constraints.video.mediaSource = preferredMediaSource;\r\n      }\r\n      return window.navigator.mediaDevices.getUserMedia(constraints);\r\n    };\r\n}\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport * as utils from '../utils';\r\nexport {shimGetUserMedia} from './getusermedia';\r\nexport {shimGetDisplayMedia} from './getdisplaymedia';\r\n\r\nexport function shimOnTrack(window) {\r\n  if (typeof window === 'object' && window.RTCTrackEvent &&\r\n      ('receiver' in window.RTCTrackEvent.prototype) &&\r\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\r\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\r\n      get() {\r\n        return {receiver: this.receiver};\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimPeerConnection(window) {\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  if (typeof window !== 'object' ||\r\n      !(window.RTCPeerConnection || window.mozRTCPeerConnection)) {\r\n    return; // probably media.peerconnection.enabled=false in about:config\r\n  }\r\n  if (!window.RTCPeerConnection && window.mozRTCPeerConnection) {\r\n    // very basic support for old versions.\r\n    window.RTCPeerConnection = window.mozRTCPeerConnection;\r\n  }\r\n\r\n  if (browserDetails.version < 53) {\r\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\r\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\r\n        .forEach(function(method) {\r\n          const nativeMethod = window.RTCPeerConnection.prototype[method];\r\n          const methodObj = {[method]() {\r\n            arguments[0] = new ((method === 'addIceCandidate') ?\r\n                window.RTCIceCandidate :\r\n                window.RTCSessionDescription)(arguments[0]);\r\n            return nativeMethod.apply(this, arguments);\r\n          }};\r\n          window.RTCPeerConnection.prototype[method] = methodObj[method];\r\n        });\r\n  }\r\n\r\n  // support for addIceCandidate(null or undefined)\r\n  // as well as ignoring {sdpMid, candidate: \"\"}\r\n  if (browserDetails.version < 68) {\r\n    const nativeAddIceCandidate =\r\n        window.RTCPeerConnection.prototype.addIceCandidate;\r\n    window.RTCPeerConnection.prototype.addIceCandidate =\r\n    function addIceCandidate() {\r\n      if (!arguments[0]) {\r\n        if (arguments[1]) {\r\n          arguments[1].apply(null);\r\n        }\r\n        return Promise.resolve();\r\n      }\r\n      // Firefox 68+ emits and processes {candidate: \"\", ...}, ignore\r\n      // in older versions.\r\n      if (arguments[0] && arguments[0].candidate === '') {\r\n        return Promise.resolve();\r\n      }\r\n      return nativeAddIceCandidate.apply(this, arguments);\r\n    };\r\n  }\r\n\r\n  const modernStatsTypes = {\r\n    inboundrtp: 'inbound-rtp',\r\n    outboundrtp: 'outbound-rtp',\r\n    candidatepair: 'candidate-pair',\r\n    localcandidate: 'local-candidate',\r\n    remotecandidate: 'remote-candidate'\r\n  };\r\n\r\n  const nativeGetStats = window.RTCPeerConnection.prototype.getStats;\r\n  window.RTCPeerConnection.prototype.getStats = function getStats() {\r\n    const [selector, onSucc, onErr] = arguments;\r\n    return nativeGetStats.apply(this, [selector || null])\r\n      .then(stats => {\r\n        if (browserDetails.version < 53 && !onSucc) {\r\n          // Shim only promise getStats with spec-hyphens in type names\r\n          // Leave callback version alone; misc old uses of forEach before Map\r\n          try {\r\n            stats.forEach(stat => {\r\n              stat.type = modernStatsTypes[stat.type] || stat.type;\r\n            });\r\n          } catch (e) {\r\n            if (e.name !== 'TypeError') {\r\n              throw e;\r\n            }\r\n            // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\r\n            stats.forEach((stat, i) => {\r\n              stats.set(i, Object.assign({}, stat, {\r\n                type: modernStatsTypes[stat.type] || stat.type\r\n              }));\r\n            });\r\n          }\r\n        }\r\n        return stats;\r\n      })\r\n      .then(onSucc, onErr);\r\n  };\r\n}\r\n\r\nexport function shimSenderGetStats(window) {\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\r\n      window.RTCRtpSender)) {\r\n    return;\r\n  }\r\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpSender.prototype) {\r\n    return;\r\n  }\r\n  const origGetSenders = window.RTCPeerConnection.prototype.getSenders;\r\n  if (origGetSenders) {\r\n    window.RTCPeerConnection.prototype.getSenders = function getSenders() {\r\n      const senders = origGetSenders.apply(this, []);\r\n      senders.forEach(sender => sender._pc = this);\r\n      return senders;\r\n    };\r\n  }\r\n\r\n  const origAddTrack = window.RTCPeerConnection.prototype.addTrack;\r\n  if (origAddTrack) {\r\n    window.RTCPeerConnection.prototype.addTrack = function addTrack() {\r\n      const sender = origAddTrack.apply(this, arguments);\r\n      sender._pc = this;\r\n      return sender;\r\n    };\r\n  }\r\n  window.RTCRtpSender.prototype.getStats = function getStats() {\r\n    return this.track ? this._pc.getStats(this.track) :\r\n        Promise.resolve(new Map());\r\n  };\r\n}\r\n\r\nexport function shimReceiverGetStats(window) {\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection &&\r\n      window.RTCRtpSender)) {\r\n    return;\r\n  }\r\n  if (window.RTCRtpSender && 'getStats' in window.RTCRtpReceiver.prototype) {\r\n    return;\r\n  }\r\n  const origGetReceivers = window.RTCPeerConnection.prototype.getReceivers;\r\n  if (origGetReceivers) {\r\n    window.RTCPeerConnection.prototype.getReceivers = function getReceivers() {\r\n      const receivers = origGetReceivers.apply(this, []);\r\n      receivers.forEach(receiver => receiver._pc = this);\r\n      return receivers;\r\n    };\r\n  }\r\n  utils.wrapPeerConnectionEvent(window, 'track', e => {\r\n    e.receiver._pc = e.srcElement;\r\n    return e;\r\n  });\r\n  window.RTCRtpReceiver.prototype.getStats = function getStats() {\r\n    return this._pc.getStats(this.track);\r\n  };\r\n}\r\n\r\nexport function shimRemoveStream(window) {\r\n  if (!window.RTCPeerConnection ||\r\n      'removeStream' in window.RTCPeerConnection.prototype) {\r\n    return;\r\n  }\r\n  window.RTCPeerConnection.prototype.removeStream =\r\n    function removeStream(stream) {\r\n      utils.deprecated('removeStream', 'removeTrack');\r\n      this.getSenders().forEach(sender => {\r\n        if (sender.track && stream.getTracks().includes(sender.track)) {\r\n          this.removeTrack(sender);\r\n        }\r\n      });\r\n    };\r\n}\r\n\r\nexport function shimRTCDataChannel(window) {\r\n  // rename DataChannel to RTCDataChannel (native fix in FF60):\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1173851\r\n  if (window.DataChannel && !window.RTCDataChannel) {\r\n    window.RTCDataChannel = window.DataChannel;\r\n  }\r\n}\r\n\r\nexport function shimAddTransceiver(window) {\r\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\r\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\r\n    return;\r\n  }\r\n  const origAddTransceiver = window.RTCPeerConnection.prototype.addTransceiver;\r\n  if (origAddTransceiver) {\r\n    window.RTCPeerConnection.prototype.addTransceiver =\r\n      function addTransceiver() {\r\n        this.setParametersPromises = [];\r\n        const initParameters = arguments[1];\r\n        const shouldPerformCheck = initParameters &&\r\n                                  'sendEncodings' in initParameters;\r\n        if (shouldPerformCheck) {\r\n          // If sendEncodings params are provided, validate grammar\r\n          initParameters.sendEncodings.forEach((encodingParam) => {\r\n            if ('rid' in encodingParam) {\r\n              const ridRegex = /^[a-z0-9]{0,16}$/i;\r\n              if (!ridRegex.test(encodingParam.rid)) {\r\n                throw new TypeError('Invalid RID value provided.');\r\n              }\r\n            }\r\n            if ('scaleResolutionDownBy' in encodingParam) {\r\n              if (!(parseFloat(encodingParam.scaleResolutionDownBy) >= 1.0)) {\r\n                throw new RangeError('scale_resolution_down_by must be >= 1.0');\r\n              }\r\n            }\r\n            if ('maxFramerate' in encodingParam) {\r\n              if (!(parseFloat(encodingParam.maxFramerate) >= 0)) {\r\n                throw new RangeError('max_framerate must be >= 0.0');\r\n              }\r\n            }\r\n          });\r\n        }\r\n        const transceiver = origAddTransceiver.apply(this, arguments);\r\n        if (shouldPerformCheck) {\r\n          // Check if the init options were applied. If not we do this in an\r\n          // asynchronous way and save the promise reference in a global object.\r\n          // This is an ugly hack, but at the same time is way more robust than\r\n          // checking the sender parameters before and after the createOffer\r\n          // Also note that after the createoffer we are not 100% sure that\r\n          // the params were asynchronously applied so we might miss the\r\n          // opportunity to recreate offer.\r\n          const {sender} = transceiver;\r\n          const params = sender.getParameters();\r\n          if (!('encodings' in params)) {\r\n            params.encodings = initParameters.sendEncodings;\r\n            this.setParametersPromises.push(\r\n              sender.setParameters(params)\r\n              .catch(() => {})\r\n            );\r\n          }\r\n        }\r\n        return transceiver;\r\n      };\r\n  }\r\n}\r\n\r\nexport function shimCreateOffer(window) {\r\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\r\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\r\n    return;\r\n  }\r\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\r\n  window.RTCPeerConnection.prototype.createOffer = function createOffer() {\r\n    if (this.setParametersPromises && this.setParametersPromises.length) {\r\n      return Promise.all(this.setParametersPromises)\r\n      .then(() => {\r\n        return origCreateOffer.apply(this, arguments);\r\n      })\r\n      .finally(() => {\r\n        this.setParametersPromises = [];\r\n      });\r\n    }\r\n    return origCreateOffer.apply(this, arguments);\r\n  };\r\n}\r\n\r\nexport function shimCreateAnswer(window) {\r\n  // https://github.com/webrtcHacks/adapter/issues/998#issuecomment-516921647\r\n  // Firefox ignores the init sendEncodings options passed to addTransceiver\r\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=1396918\r\n  if (!(typeof window === 'object' && window.RTCPeerConnection)) {\r\n    return;\r\n  }\r\n  const origCreateAnswer = window.RTCPeerConnection.prototype.createAnswer;\r\n  window.RTCPeerConnection.prototype.createAnswer = function createAnswer() {\r\n    if (this.setParametersPromises && this.setParametersPromises.length) {\r\n      return Promise.all(this.setParametersPromises)\r\n      .then(() => {\r\n        return origCreateAnswer.apply(this, arguments);\r\n      })\r\n      .finally(() => {\r\n        this.setParametersPromises = [];\r\n      });\r\n    }\r\n    return origCreateAnswer.apply(this, arguments);\r\n  };\r\n}","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n'use strict';\r\nimport * as utils from '../utils';\r\n\r\nexport function shimLocalStreamsAPI(window) {\r\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\r\n    window.RTCPeerConnection.prototype.getLocalStreams =\r\n      function getLocalStreams() {\r\n        if (!this._localStreams) {\r\n          this._localStreams = [];\r\n        }\r\n        return this._localStreams;\r\n      };\r\n  }\r\n  if (!('addStream' in window.RTCPeerConnection.prototype)) {\r\n    const _addTrack = window.RTCPeerConnection.prototype.addTrack;\r\n    window.RTCPeerConnection.prototype.addStream = function addStream(stream) {\r\n      if (!this._localStreams) {\r\n        this._localStreams = [];\r\n      }\r\n      if (!this._localStreams.includes(stream)) {\r\n        this._localStreams.push(stream);\r\n      }\r\n      // Try to emulate Chrome's behaviour of adding in audio-video order.\r\n      // Safari orders by track id.\r\n      stream.getAudioTracks().forEach(track => _addTrack.call(this, track,\r\n        stream));\r\n      stream.getVideoTracks().forEach(track => _addTrack.call(this, track,\r\n        stream));\r\n    };\r\n\r\n    window.RTCPeerConnection.prototype.addTrack =\r\n      function addTrack(track) {\r\n        const stream = arguments[1];\r\n        if (stream) {\r\n          if (!this._localStreams) {\r\n            this._localStreams = [stream];\r\n          } else if (!this._localStreams.includes(stream)) {\r\n            this._localStreams.push(stream);\r\n          }\r\n        }\r\n        return _addTrack.apply(this, arguments);\r\n      };\r\n  }\r\n  if (!('removeStream' in window.RTCPeerConnection.prototype)) {\r\n    window.RTCPeerConnection.prototype.removeStream =\r\n      function removeStream(stream) {\r\n        if (!this._localStreams) {\r\n          this._localStreams = [];\r\n        }\r\n        const index = this._localStreams.indexOf(stream);\r\n        if (index === -1) {\r\n          return;\r\n        }\r\n        this._localStreams.splice(index, 1);\r\n        const tracks = stream.getTracks();\r\n        this.getSenders().forEach(sender => {\r\n          if (tracks.includes(sender.track)) {\r\n            this.removeTrack(sender);\r\n          }\r\n        });\r\n      };\r\n  }\r\n}\r\n\r\nexport function shimRemoteStreamsAPI(window) {\r\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\r\n    window.RTCPeerConnection.prototype.getRemoteStreams =\r\n      function getRemoteStreams() {\r\n        return this._remoteStreams ? this._remoteStreams : [];\r\n      };\r\n  }\r\n  if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\r\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\r\n      get() {\r\n        return this._onaddstream;\r\n      },\r\n      set(f) {\r\n        if (this._onaddstream) {\r\n          this.removeEventListener('addstream', this._onaddstream);\r\n          this.removeEventListener('track', this._onaddstreampoly);\r\n        }\r\n        this.addEventListener('addstream', this._onaddstream = f);\r\n        this.addEventListener('track', this._onaddstreampoly = (e) => {\r\n          e.streams.forEach(stream => {\r\n            if (!this._remoteStreams) {\r\n              this._remoteStreams = [];\r\n            }\r\n            if (this._remoteStreams.includes(stream)) {\r\n              return;\r\n            }\r\n            this._remoteStreams.push(stream);\r\n            const event = new Event('addstream');\r\n            event.stream = stream;\r\n            this.dispatchEvent(event);\r\n          });\r\n        });\r\n      }\r\n    });\r\n    const origSetRemoteDescription =\r\n      window.RTCPeerConnection.prototype.setRemoteDescription;\r\n    window.RTCPeerConnection.prototype.setRemoteDescription =\r\n      function setRemoteDescription() {\r\n        const pc = this;\r\n        if (!this._onaddstreampoly) {\r\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\r\n            e.streams.forEach(stream => {\r\n              if (!pc._remoteStreams) {\r\n                pc._remoteStreams = [];\r\n              }\r\n              if (pc._remoteStreams.indexOf(stream) >= 0) {\r\n                return;\r\n              }\r\n              pc._remoteStreams.push(stream);\r\n              const event = new Event('addstream');\r\n              event.stream = stream;\r\n              pc.dispatchEvent(event);\r\n            });\r\n          });\r\n        }\r\n        return origSetRemoteDescription.apply(pc, arguments);\r\n      };\r\n  }\r\n}\r\n\r\nexport function shimCallbacksAPI(window) {\r\n  if (typeof window !== 'object' || !window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const prototype = window.RTCPeerConnection.prototype;\r\n  const origCreateOffer = prototype.createOffer;\r\n  const origCreateAnswer = prototype.createAnswer;\r\n  const setLocalDescription = prototype.setLocalDescription;\r\n  const setRemoteDescription = prototype.setRemoteDescription;\r\n  const addIceCandidate = prototype.addIceCandidate;\r\n\r\n  prototype.createOffer =\r\n    function createOffer(successCallback, failureCallback) {\r\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\r\n      const promise = origCreateOffer.apply(this, [options]);\r\n      if (!failureCallback) {\r\n        return promise;\r\n      }\r\n      promise.then(successCallback, failureCallback);\r\n      return Promise.resolve();\r\n    };\r\n\r\n  prototype.createAnswer =\r\n    function createAnswer(successCallback, failureCallback) {\r\n      const options = (arguments.length >= 2) ? arguments[2] : arguments[0];\r\n      const promise = origCreateAnswer.apply(this, [options]);\r\n      if (!failureCallback) {\r\n        return promise;\r\n      }\r\n      promise.then(successCallback, failureCallback);\r\n      return Promise.resolve();\r\n    };\r\n\r\n  let withCallback = function(description, successCallback, failureCallback) {\r\n    const promise = setLocalDescription.apply(this, [description]);\r\n    if (!failureCallback) {\r\n      return promise;\r\n    }\r\n    promise.then(successCallback, failureCallback);\r\n    return Promise.resolve();\r\n  };\r\n  prototype.setLocalDescription = withCallback;\r\n\r\n  withCallback = function(description, successCallback, failureCallback) {\r\n    const promise = setRemoteDescription.apply(this, [description]);\r\n    if (!failureCallback) {\r\n      return promise;\r\n    }\r\n    promise.then(successCallback, failureCallback);\r\n    return Promise.resolve();\r\n  };\r\n  prototype.setRemoteDescription = withCallback;\r\n\r\n  withCallback = function(candidate, successCallback, failureCallback) {\r\n    const promise = addIceCandidate.apply(this, [candidate]);\r\n    if (!failureCallback) {\r\n      return promise;\r\n    }\r\n    promise.then(successCallback, failureCallback);\r\n    return Promise.resolve();\r\n  };\r\n  prototype.addIceCandidate = withCallback;\r\n}\r\n\r\nexport function shimGetUserMedia(window) {\r\n  const navigator = window && window.navigator;\r\n\r\n  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n    // shim not needed in Safari 12.1\r\n    const mediaDevices = navigator.mediaDevices;\r\n    const _getUserMedia = mediaDevices.getUserMedia.bind(mediaDevices);\r\n    navigator.mediaDevices.getUserMedia = (constraints) => {\r\n      return _getUserMedia(shimConstraints(constraints));\r\n    };\r\n  }\r\n\r\n  if (!navigator.getUserMedia && navigator.mediaDevices &&\r\n    navigator.mediaDevices.getUserMedia) {\r\n    navigator.getUserMedia = function getUserMedia(constraints, cb, errcb) {\r\n      navigator.mediaDevices.getUserMedia(constraints)\r\n      .then(cb, errcb);\r\n    }.bind(navigator);\r\n  }\r\n}\r\n\r\nexport function shimConstraints(constraints) {\r\n  if (constraints && constraints.video !== undefined) {\r\n    return Object.assign({},\r\n      constraints,\r\n      {video: utils.compactObject(constraints.video)}\r\n    );\r\n  }\r\n\r\n  return constraints;\r\n}\r\n\r\nexport function shimRTCIceServerUrls(window) {\r\n  // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\r\n  const OrigPeerConnection = window.RTCPeerConnection;\r\n  window.RTCPeerConnection =\r\n    function RTCPeerConnection(pcConfig, pcConstraints) {\r\n      if (pcConfig && pcConfig.iceServers) {\r\n        const newIceServers = [];\r\n        for (let i = 0; i < pcConfig.iceServers.length; i++) {\r\n          let server = pcConfig.iceServers[i];\r\n          if (!server.hasOwnProperty('urls') &&\r\n              server.hasOwnProperty('url')) {\r\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\r\n            server = JSON.parse(JSON.stringify(server));\r\n            server.urls = server.url;\r\n            delete server.url;\r\n            newIceServers.push(server);\r\n          } else {\r\n            newIceServers.push(pcConfig.iceServers[i]);\r\n          }\r\n        }\r\n        pcConfig.iceServers = newIceServers;\r\n      }\r\n      return new OrigPeerConnection(pcConfig, pcConstraints);\r\n    };\r\n  window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\r\n  // wrap static methods. Currently just generateCertificate.\r\n  if ('generateCertificate' in window.RTCPeerConnection) {\r\n    Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\r\n      get() {\r\n        return OrigPeerConnection.generateCertificate;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimTrackEventTransceiver(window) {\r\n  // Add event.transceiver member over deprecated event.receiver\r\n  if (typeof window === 'object' && window.RTCTrackEvent &&\r\n      'receiver' in window.RTCTrackEvent.prototype &&\r\n      !('transceiver' in window.RTCTrackEvent.prototype)) {\r\n    Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\r\n      get() {\r\n        return {receiver: this.receiver};\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function shimCreateOfferLegacy(window) {\r\n  const origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\r\n  window.RTCPeerConnection.prototype.createOffer =\r\n    function createOffer(offerOptions) {\r\n      if (offerOptions) {\r\n        if (typeof offerOptions.offerToReceiveAudio !== 'undefined') {\r\n          // support bit values\r\n          offerOptions.offerToReceiveAudio =\r\n            !!offerOptions.offerToReceiveAudio;\r\n        }\r\n        const audioTransceiver = this.getTransceivers().find(transceiver =>\r\n          transceiver.receiver.track.kind === 'audio');\r\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\r\n          if (audioTransceiver.direction === 'sendrecv') {\r\n            if (audioTransceiver.setDirection) {\r\n              audioTransceiver.setDirection('sendonly');\r\n            } else {\r\n              audioTransceiver.direction = 'sendonly';\r\n            }\r\n          } else if (audioTransceiver.direction === 'recvonly') {\r\n            if (audioTransceiver.setDirection) {\r\n              audioTransceiver.setDirection('inactive');\r\n            } else {\r\n              audioTransceiver.direction = 'inactive';\r\n            }\r\n          }\r\n        } else if (offerOptions.offerToReceiveAudio === true &&\r\n            !audioTransceiver) {\r\n          this.addTransceiver('audio');\r\n        }\r\n\r\n        if (typeof offerOptions.offerToReceiveVideo !== 'undefined') {\r\n          // support bit values\r\n          offerOptions.offerToReceiveVideo =\r\n            !!offerOptions.offerToReceiveVideo;\r\n        }\r\n        const videoTransceiver = this.getTransceivers().find(transceiver =>\r\n          transceiver.receiver.track.kind === 'video');\r\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\r\n          if (videoTransceiver.direction === 'sendrecv') {\r\n            if (videoTransceiver.setDirection) {\r\n              videoTransceiver.setDirection('sendonly');\r\n            } else {\r\n              videoTransceiver.direction = 'sendonly';\r\n            }\r\n          } else if (videoTransceiver.direction === 'recvonly') {\r\n            if (videoTransceiver.setDirection) {\r\n              videoTransceiver.setDirection('inactive');\r\n            } else {\r\n              videoTransceiver.direction = 'inactive';\r\n            }\r\n          }\r\n        } else if (offerOptions.offerToReceiveVideo === true &&\r\n            !videoTransceiver) {\r\n          this.addTransceiver('video');\r\n        }\r\n      }\r\n      return origCreateOffer.apply(this, arguments);\r\n    };\r\n}\r\n","/*\r\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n'use strict';\r\n\r\nimport SDPUtils from 'sdp';\r\nimport * as utils from './utils';\r\n\r\nexport function shimRTCIceCandidate(window) {\r\n  // foundation is arbitrarily chosen as an indicator for full support for\r\n  // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\r\n  if (!window.RTCIceCandidate || (window.RTCIceCandidate && 'foundation' in\r\n      window.RTCIceCandidate.prototype)) {\r\n    return;\r\n  }\r\n\r\n  const NativeRTCIceCandidate = window.RTCIceCandidate;\r\n  window.RTCIceCandidate = function RTCIceCandidate(args) {\r\n    // Remove the a= which shouldn't be part of the candidate string.\r\n    if (typeof args === 'object' && args.candidate &&\r\n        args.candidate.indexOf('a=') === 0) {\r\n      args = JSON.parse(JSON.stringify(args));\r\n      args.candidate = args.candidate.substr(2);\r\n    }\r\n\r\n    if (args.candidate && args.candidate.length) {\r\n      // Augment the native candidate with the parsed fields.\r\n      const nativeCandidate = new NativeRTCIceCandidate(args);\r\n      const parsedCandidate = SDPUtils.parseCandidate(args.candidate);\r\n      const augmentedCandidate = Object.assign(nativeCandidate,\r\n          parsedCandidate);\r\n\r\n      // Add a serializer that does not serialize the extra attributes.\r\n      augmentedCandidate.toJSON = function toJSON() {\r\n        return {\r\n          candidate: augmentedCandidate.candidate,\r\n          sdpMid: augmentedCandidate.sdpMid,\r\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\r\n          usernameFragment: augmentedCandidate.usernameFragment,\r\n        };\r\n      };\r\n      return augmentedCandidate;\r\n    }\r\n    return new NativeRTCIceCandidate(args);\r\n  };\r\n  window.RTCIceCandidate.prototype = NativeRTCIceCandidate.prototype;\r\n\r\n  // Hook up the augmented candidate in onicecandidate and\r\n  // addEventListener('icecandidate', ...)\r\n  utils.wrapPeerConnectionEvent(window, 'icecandidate', e => {\r\n    if (e.candidate) {\r\n      Object.defineProperty(e, 'candidate', {\r\n        value: new window.RTCIceCandidate(e.candidate),\r\n        writable: 'false'\r\n      });\r\n    }\r\n    return e;\r\n  });\r\n}\r\n\r\nexport function shimMaxMessageSize(window) {\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  if (!('sctp' in window.RTCPeerConnection.prototype)) {\r\n    Object.defineProperty(window.RTCPeerConnection.prototype, 'sctp', {\r\n      get() {\r\n        return typeof this._sctp === 'undefined' ? null : this._sctp;\r\n      }\r\n    });\r\n  }\r\n\r\n  const sctpInDescription = function(description) {\r\n    if (!description || !description.sdp) {\r\n      return false;\r\n    }\r\n    const sections = SDPUtils.splitSections(description.sdp);\r\n    sections.shift();\r\n    return sections.some(mediaSection => {\r\n      const mLine = SDPUtils.parseMLine(mediaSection);\r\n      return mLine && mLine.kind === 'application'\r\n          && mLine.protocol.indexOf('SCTP') !== -1;\r\n    });\r\n  };\r\n\r\n  const getRemoteFirefoxVersion = function(description) {\r\n    // TODO: Is there a better solution for detecting Firefox?\r\n    const match = description.sdp.match(/mozilla...THIS_IS_SDPARTA-(\\d+)/);\r\n    if (match === null || match.length < 2) {\r\n      return -1;\r\n    }\r\n    const version = parseInt(match[1], 10);\r\n    // Test for NaN (yes, this is ugly)\r\n    return version !== version ? -1 : version;\r\n  };\r\n\r\n  const getCanSendMaxMessageSize = function(remoteIsFirefox) {\r\n    // Every implementation we know can send at least 64 KiB.\r\n    // Note: Although Chrome is technically able to send up to 256 KiB, the\r\n    //       data does not reach the other peer reliably.\r\n    //       See: https://bugs.chromium.org/p/webrtc/issues/detail?id=8419\r\n    let canSendMaxMessageSize = 65536;\r\n    if (browserDetails.browser === 'firefox') {\r\n      if (browserDetails.version < 57) {\r\n        if (remoteIsFirefox === -1) {\r\n          // FF < 57 will send in 16 KiB chunks using the deprecated PPID\r\n          // fragmentation.\r\n          canSendMaxMessageSize = 16384;\r\n        } else {\r\n          // However, other FF (and RAWRTC) can reassemble PPID-fragmented\r\n          // messages. Thus, supporting ~2 GiB when sending.\r\n          canSendMaxMessageSize = 2147483637;\r\n        }\r\n      } else if (browserDetails.version < 60) {\r\n        // Currently, all FF >= 57 will reset the remote maximum message size\r\n        // to the default value when a data channel is created at a later\r\n        // stage. :(\r\n        // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\r\n        canSendMaxMessageSize =\r\n          browserDetails.version === 57 ? 65535 : 65536;\r\n      } else {\r\n        // FF >= 60 supports sending ~2 GiB\r\n        canSendMaxMessageSize = 2147483637;\r\n      }\r\n    }\r\n    return canSendMaxMessageSize;\r\n  };\r\n\r\n  const getMaxMessageSize = function(description, remoteIsFirefox) {\r\n    // Note: 65536 bytes is the default value from the SDP spec. Also,\r\n    //       every implementation we know supports receiving 65536 bytes.\r\n    let maxMessageSize = 65536;\r\n\r\n    // FF 57 has a slightly incorrect default remote max message size, so\r\n    // we need to adjust it here to avoid a failure when sending.\r\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=1425697\r\n    if (browserDetails.browser === 'firefox'\r\n         && browserDetails.version === 57) {\r\n      maxMessageSize = 65535;\r\n    }\r\n\r\n    const match = SDPUtils.matchPrefix(description.sdp,\r\n      'a=max-message-size:');\r\n    if (match.length > 0) {\r\n      maxMessageSize = parseInt(match[0].substr(19), 10);\r\n    } else if (browserDetails.browser === 'firefox' &&\r\n                remoteIsFirefox !== -1) {\r\n      // If the maximum message size is not present in the remote SDP and\r\n      // both local and remote are Firefox, the remote peer can receive\r\n      // ~2 GiB.\r\n      maxMessageSize = 2147483637;\r\n    }\r\n    return maxMessageSize;\r\n  };\r\n\r\n  const origSetRemoteDescription =\r\n      window.RTCPeerConnection.prototype.setRemoteDescription;\r\n  window.RTCPeerConnection.prototype.setRemoteDescription =\r\n    function setRemoteDescription() {\r\n      this._sctp = null;\r\n      // Chrome decided to not expose .sctp in plan-b mode.\r\n      // As usual, adapter.js has to do an 'ugly worakaround'\r\n      // to cover up the mess.\r\n      if (browserDetails.browser === 'chrome' && browserDetails.version >= 76) {\r\n        const {sdpSemantics} = this.getConfiguration();\r\n        if (sdpSemantics === 'plan-b') {\r\n          Object.defineProperty(this, 'sctp', {\r\n            get() {\r\n              return typeof this._sctp === 'undefined' ? null : this._sctp;\r\n            },\r\n            enumerable: true,\r\n            configurable: true,\r\n          });\r\n        }\r\n      }\r\n\r\n      if (sctpInDescription(arguments[0])) {\r\n        // Check if the remote is FF.\r\n        const isFirefox = getRemoteFirefoxVersion(arguments[0]);\r\n\r\n        // Get the maximum message size the local peer is capable of sending\r\n        const canSendMMS = getCanSendMaxMessageSize(isFirefox);\r\n\r\n        // Get the maximum message size of the remote peer.\r\n        const remoteMMS = getMaxMessageSize(arguments[0], isFirefox);\r\n\r\n        // Determine final maximum message size\r\n        let maxMessageSize;\r\n        if (canSendMMS === 0 && remoteMMS === 0) {\r\n          maxMessageSize = Number.POSITIVE_INFINITY;\r\n        } else if (canSendMMS === 0 || remoteMMS === 0) {\r\n          maxMessageSize = Math.max(canSendMMS, remoteMMS);\r\n        } else {\r\n          maxMessageSize = Math.min(canSendMMS, remoteMMS);\r\n        }\r\n\r\n        // Create a dummy RTCSctpTransport object and the 'maxMessageSize'\r\n        // attribute.\r\n        const sctp = {};\r\n        Object.defineProperty(sctp, 'maxMessageSize', {\r\n          get() {\r\n            return maxMessageSize;\r\n          }\r\n        });\r\n        this._sctp = sctp;\r\n      }\r\n\r\n      return origSetRemoteDescription.apply(this, arguments);\r\n    };\r\n}\r\n\r\nexport function shimSendThrowTypeError(window) {\r\n  if (!(window.RTCPeerConnection &&\r\n      'createDataChannel' in window.RTCPeerConnection.prototype)) {\r\n    return;\r\n  }\r\n\r\n  // Note: Although Firefox >= 57 has a native implementation, the maximum\r\n  //       message size can be reset for all data channels at a later stage.\r\n  //       See: https://bugzilla.mozilla.org/show_bug.cgi?id=1426831\r\n\r\n  function wrapDcSend(dc, pc) {\r\n    const origDataChannelSend = dc.send;\r\n    dc.send = function send() {\r\n      const data = arguments[0];\r\n      const length = data.length || data.size || data.byteLength;\r\n      if (dc.readyState === 'open' &&\r\n          pc.sctp && length > pc.sctp.maxMessageSize) {\r\n        throw new TypeError('Message too large (can send a maximum of ' +\r\n          pc.sctp.maxMessageSize + ' bytes)');\r\n      }\r\n      return origDataChannelSend.apply(dc, arguments);\r\n    };\r\n  }\r\n  const origCreateDataChannel =\r\n    window.RTCPeerConnection.prototype.createDataChannel;\r\n  window.RTCPeerConnection.prototype.createDataChannel =\r\n    function createDataChannel() {\r\n      const dataChannel = origCreateDataChannel.apply(this, arguments);\r\n      wrapDcSend(dataChannel, this);\r\n      return dataChannel;\r\n    };\r\n  utils.wrapPeerConnectionEvent(window, 'datachannel', e => {\r\n    wrapDcSend(e.channel, e.target);\r\n    return e;\r\n  });\r\n}\r\n\r\n\r\n/* shims RTCConnectionState by pretending it is the same as iceConnectionState.\r\n * See https://bugs.chromium.org/p/webrtc/issues/detail?id=6145#c12\r\n * for why this is a valid hack in Chrome. In Firefox it is slightly incorrect\r\n * since DTLS failures would be hidden. See\r\n * https://bugzilla.mozilla.org/show_bug.cgi?id=1265827\r\n * for the Firefox tracking bug.\r\n */\r\nexport function shimConnectionState(window) {\r\n  if (!window.RTCPeerConnection ||\r\n      'connectionState' in window.RTCPeerConnection.prototype) {\r\n    return;\r\n  }\r\n  const proto = window.RTCPeerConnection.prototype;\r\n  Object.defineProperty(proto, 'connectionState', {\r\n    get() {\r\n      return {\r\n        completed: 'connected',\r\n        checking: 'connecting'\r\n      }[this.iceConnectionState] || this.iceConnectionState;\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n  });\r\n  Object.defineProperty(proto, 'onconnectionstatechange', {\r\n    get() {\r\n      return this._onconnectionstatechange || null;\r\n    },\r\n    set(cb) {\r\n      if (this._onconnectionstatechange) {\r\n        this.removeEventListener('connectionstatechange',\r\n            this._onconnectionstatechange);\r\n        delete this._onconnectionstatechange;\r\n      }\r\n      if (cb) {\r\n        this.addEventListener('connectionstatechange',\r\n            this._onconnectionstatechange = cb);\r\n      }\r\n    },\r\n    enumerable: true,\r\n    configurable: true\r\n  });\r\n\r\n  ['setLocalDescription', 'setRemoteDescription'].forEach((method) => {\r\n    const origMethod = proto[method];\r\n    proto[method] = function() {\r\n      if (!this._connectionstatechangepoly) {\r\n        this._connectionstatechangepoly = e => {\r\n          const pc = e.target;\r\n          if (pc._lastConnectionState !== pc.connectionState) {\r\n            pc._lastConnectionState = pc.connectionState;\r\n            const newEvent = new Event('connectionstatechange', e);\r\n            pc.dispatchEvent(newEvent);\r\n          }\r\n          return e;\r\n        };\r\n        this.addEventListener('iceconnectionstatechange',\r\n          this._connectionstatechangepoly);\r\n      }\r\n      return origMethod.apply(this, arguments);\r\n    };\r\n  });\r\n}\r\n\r\nexport function removeAllowExtmapMixed(window) {\r\n  /* remove a=extmap-allow-mixed for Chrome < M71 */\r\n  if (!window.RTCPeerConnection) {\r\n    return;\r\n  }\r\n  const browserDetails = utils.detectBrowser(window);\r\n  if (browserDetails.browser === 'chrome' && browserDetails.version >= 71) {\r\n    return;\r\n  }\r\n  const nativeSRD = window.RTCPeerConnection.prototype.setRemoteDescription;\r\n  window.RTCPeerConnection.prototype.setRemoteDescription =\r\n  function setRemoteDescription(desc) {\r\n    if (desc && desc.sdp && desc.sdp.indexOf('\\na=extmap-allow-mixed') !== -1) {\r\n      desc.sdp = desc.sdp.split('\\n').filter((line) => {\r\n        return line.trim() !== 'a=extmap-allow-mixed';\r\n      }).join('\\n');\r\n    }\r\n    return nativeSRD.apply(this, arguments);\r\n  };\r\n}\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\n/* eslint-env node */\r\n\r\n'use strict';\r\n\r\nimport {adapterFactory} from './adapter_factory.js';\r\n\r\nconst adapter = adapterFactory({window});\r\nexport default adapter;\r\n","/*\r\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\r\n *\r\n *  Use of this source code is governed by a BSD-style license\r\n *  that can be found in the LICENSE file in the root of the source\r\n *  tree.\r\n */\r\nimport * as utils from './utils';\r\n\r\n  // Browser shims.\r\nimport * as chromeShim from './chrome/chrome_shim';\r\nimport * as edgeShim from './edge/edge_shim';\r\nimport * as firefoxShim from './firefox/firefox_shim';\r\nimport * as safariShim from './safari/safari_shim';\r\nimport * as commonShim from './common_shim';\r\n\r\n// Shimming starts here.\r\nexport function adapterFactory({window} = {}, options = {\r\n  shimChrome: true,\r\n  shimFirefox: true,\r\n  shimEdge: true,\r\n  shimSafari: true,\r\n}) {\r\n  // Utils.\r\n  const logging = utils.log;\r\n  const browserDetails = utils.detectBrowser(window);\r\n\r\n  const adapter = {\r\n    browserDetails,\r\n    commonShim,\r\n    extractVersion: utils.extractVersion,\r\n    disableLog: utils.disableLog,\r\n    disableWarnings: utils.disableWarnings\r\n  };\r\n\r\n  // Shim browser if found.\r\n  switch (browserDetails.browser) {\r\n    case 'chrome':\r\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\r\n          !options.shimChrome) {\r\n        logging('Chrome shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming chrome.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = chromeShim;\r\n\r\n      chromeShim.shimGetUserMedia(window);\r\n      chromeShim.shimMediaStream(window);\r\n      chromeShim.shimPeerConnection(window);\r\n      chromeShim.shimOnTrack(window);\r\n      chromeShim.shimAddTrackRemoveTrack(window);\r\n      chromeShim.shimGetSendersWithDtmf(window);\r\n      chromeShim.shimGetStats(window);\r\n      chromeShim.shimSenderReceiverGetStats(window);\r\n      chromeShim.fixNegotiationNeeded(window);\r\n\r\n      commonShim.shimRTCIceCandidate(window);\r\n      commonShim.shimConnectionState(window);\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      commonShim.removeAllowExtmapMixed(window);\r\n      break;\r\n    case 'firefox':\r\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\r\n          !options.shimFirefox) {\r\n        logging('Firefox shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming firefox.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = firefoxShim;\r\n\r\n      firefoxShim.shimGetUserMedia(window);\r\n      firefoxShim.shimPeerConnection(window);\r\n      firefoxShim.shimOnTrack(window);\r\n      firefoxShim.shimRemoveStream(window);\r\n      firefoxShim.shimSenderGetStats(window);\r\n      firefoxShim.shimReceiverGetStats(window);\r\n      firefoxShim.shimRTCDataChannel(window);\r\n      firefoxShim.shimAddTransceiver(window);\r\n      firefoxShim.shimCreateOffer(window);\r\n      firefoxShim.shimCreateAnswer(window);\r\n\r\n      commonShim.shimRTCIceCandidate(window);\r\n      commonShim.shimConnectionState(window);\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      break;\r\n    case 'edge':\r\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\r\n        logging('MS edge shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming edge.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = edgeShim;\r\n\r\n      edgeShim.shimGetUserMedia(window);\r\n      edgeShim.shimGetDisplayMedia(window);\r\n      edgeShim.shimPeerConnection(window);\r\n      edgeShim.shimReplaceTrack(window);\r\n\r\n      // the edge shim implements the full RTCIceCandidate object.\r\n\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      break;\r\n    case 'safari':\r\n      if (!safariShim || !options.shimSafari) {\r\n        logging('Safari shim is not included in this adapter release.');\r\n        return adapter;\r\n      }\r\n      logging('adapter.js shimming safari.');\r\n      // Export to the adapter global object visible in the browser.\r\n      adapter.browserShim = safariShim;\r\n\r\n      safariShim.shimRTCIceServerUrls(window);\r\n      safariShim.shimCreateOfferLegacy(window);\r\n      safariShim.shimCallbacksAPI(window);\r\n      safariShim.shimLocalStreamsAPI(window);\r\n      safariShim.shimRemoteStreamsAPI(window);\r\n      safariShim.shimTrackEventTransceiver(window);\r\n      safariShim.shimGetUserMedia(window);\r\n\r\n      commonShim.shimRTCIceCandidate(window);\r\n      commonShim.shimMaxMessageSize(window);\r\n      commonShim.shimSendThrowTypeError(window);\r\n      commonShim.removeAllowExtmapMixed(window);\r\n      break;\r\n    default:\r\n      logging('Unsupported browser!');\r\n      break;\r\n  }\r\n\r\n  return adapter;\r\n}\r\n"],"sourceRoot":""}